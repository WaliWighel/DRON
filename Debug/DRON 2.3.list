
DRON 2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dfa8  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e18  0801e278  0801e278  00024278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020090  08020090  00026090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020098  08020098  00026098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802009c  0802009c  0002609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  080200a0  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  08020118  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  08020118  000278ac  2**0
                  ALLOC
  9 .IRAM         000041e9  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031d24  00000000  00000000  0004973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f40  00000000  00000000  0007b462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024c8  00000000  00000000  000813a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c7c  00000000  00000000  00083870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003cb43  00000000  00000000  000854ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038ac1  00000000  00000000  000c202f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e099  00000000  00000000  000faaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00268b89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a17c  00000000  00000000  00268bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00272d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e260 	.word	0x0801e260

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801e260 	.word	0x0801e260

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:
static I2C_HandleTypeDef *hi2c_BMP180;
extern BMP180_Struct BMP180;
//extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
//extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00d fbb4 	bl	800de28 <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af04      	add	r7, sp, #16
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a1c      	ldr	r2, [pc, #112]	@ (800074c <BMP180_init+0x7c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	uint8_t data;
	BMP180_read_calliberation_data();
 80006de:	f000 f947 	bl	8000970 <BMP180_read_calliberation_data>
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006e2:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <BMP180_init+0x7c>)
 80006e4:	6818      	ldr	r0, [r3, #0]
 80006e6:	2364      	movs	r3, #100	@ 0x64
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	2301      	movs	r3, #1
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	f107 030e 	add.w	r3, r7, #14
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	22d0      	movs	r2, #208	@ 0xd0
 80006f8:	21ee      	movs	r1, #238	@ 0xee
 80006fa:	f00d fb95 	bl	800de28 <HAL_I2C_Mem_Read>
	data = data | 0x40;
 80006fe:	7bbb      	ldrb	r3, [r7, #14]
 8000700:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000704:	b2db      	uxtb	r3, r3
 8000706:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, 0xF4, 1, &data, 1, 1);//set oversampling to 2
 8000708:	4b10      	ldr	r3, [pc, #64]	@ (800074c <BMP180_init+0x7c>)
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	9302      	str	r3, [sp, #8]
 8000710:	2301      	movs	r3, #1
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	f107 030e 	add.w	r3, r7, #14
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2301      	movs	r3, #1
 800071c:	22f4      	movs	r2, #244	@ 0xf4
 800071e:	21ee      	movs	r1, #238	@ 0xee
 8000720:	f00d fa6e 	bl	800dc00 <HAL_I2C_Mem_Write>

	uint8_t status = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 8000728:	f7ff ffba 	bl	80006a0 <BMP180_read_ID>
 800072c:	4603      	mov	r3, r0
 800072e:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	2b55      	cmp	r3, #85	@ 0x55
 8000734:	d002      	beq.n	800073c <BMP180_init+0x6c>
		status = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	73fb      	strb	r3, [r7, #15]
 800073a:	e001      	b.n	8000740 <BMP180_init+0x70>
	}
	else{
		status = 1;
 800073c:	2301      	movs	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000740:	7bfb      	ldrb	r3, [r7, #15]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	24000094 	.word	0x24000094

08000750 <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_temp+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	2364      	movs	r3, #100	@ 0x64
 800075c:	9302      	str	r3, [sp, #8]
 800075e:	2302      	movs	r3, #2
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2301      	movs	r3, #1
 8000768:	22f6      	movs	r2, #246	@ 0xf6
 800076a:	21ee      	movs	r1, #238	@ 0xee
 800076c:	f00d fb5c 	bl	800de28 <HAL_I2C_Mem_Read>
	BMP180.Callibration_Regs.UT = ((data[0]<<8) | data[1]);
 8000770:	793b      	ldrb	r3, [r7, #4]
 8000772:	021b      	lsls	r3, r3, #8
 8000774:	797a      	ldrb	r2, [r7, #5]
 8000776:	4313      	orrs	r3, r2
 8000778:	4a05      	ldr	r2, [pc, #20]	@ (8000790 <BMP180_READ_temp+0x40>)
 800077a:	6253      	str	r3, [r2, #36]	@ 0x24
	return BMP180.Callibration_Regs.UT;
 800077c:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <BMP180_READ_temp+0x40>)
 800077e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000780:	b29b      	uxth	r3, r3
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094
 8000790:	0000006c 	.word	0x0000006c

08000794 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <BMP180_READ_pres+0x3c>)
 800079c:	6818      	ldr	r0, [r3, #0]
 800079e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a2:	9302      	str	r3, [sp, #8]
 80007a4:	2303      	movs	r3, #3
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	22f6      	movs	r2, #246	@ 0xf6
 80007b0:	21ee      	movs	r1, #238	@ 0xee
 80007b2:	f00d fb39 	bl	800de28 <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 80007b6:	793b      	ldrb	r3, [r7, #4]
 80007b8:	041a      	lsls	r2, r3, #16
 80007ba:	797b      	ldrb	r3, [r7, #5]
 80007bc:	021b      	lsls	r3, r3, #8
 80007be:	4313      	orrs	r3, r2
 80007c0:	79ba      	ldrb	r2, [r7, #6]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	115b      	asrs	r3, r3, #5
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	24000094 	.word	0x24000094

080007d4 <BMP180_READ_temp_IT>:

void BMP180_READ_temp_IT(void){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180.Data_Temp_IT, 2);
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <BMP180_READ_temp_IT+0x2c>)
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	2302      	movs	r3, #2
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <BMP180_READ_temp_IT+0x30>)
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	22f6      	movs	r2, #246	@ 0xf6
 80007ea:	21ee      	movs	r1, #238	@ 0xee
 80007ec:	f00d fcc0 	bl	800e170 <HAL_I2C_Mem_Read_IT>
	BMP180.BMP180_IRQ = 1;
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <BMP180_READ_temp_IT+0x34>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	24000094 	.word	0x24000094
 8000804:	000000c7 	.word	0x000000c7
 8000808:	0000006c 	.word	0x0000006c

0800080c <BMP180_READ_pres_IT>:

void BMP180_READ_pres_IT(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180.Data_Press_IT, 3);
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <BMP180_READ_pres_IT+0x2c>)
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	2303      	movs	r3, #3
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <BMP180_READ_pres_IT+0x30>)
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2301      	movs	r3, #1
 8000820:	22f6      	movs	r2, #246	@ 0xf6
 8000822:	21ee      	movs	r1, #238	@ 0xee
 8000824:	f00d fca4 	bl	800e170 <HAL_I2C_Mem_Read_IT>
	BMP180.BMP180_IRQ = 2;
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <BMP180_READ_pres_IT+0x34>)
 800082a:	2202      	movs	r2, #2
 800082c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	24000094 	.word	0x24000094
 800083c:	000000c4 	.word	0x000000c4
 8000840:	0000006c 	.word	0x0000006c

08000844 <BMP180_GET_temp_IT>:

uint16_t BMP180_GET_temp_IT(void){
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
	BMP180.Callibration_Regs.UT = ((BMP180.Data_Temp_IT[0]<<8) | BMP180.Data_Temp_IT[1]);
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <BMP180_GET_temp_IT+0x28>)
 800084a:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	4a06      	ldr	r2, [pc, #24]	@ (800086c <BMP180_GET_temp_IT+0x28>)
 8000852:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8000856:	4313      	orrs	r3, r2
 8000858:	4a04      	ldr	r2, [pc, #16]	@ (800086c <BMP180_GET_temp_IT+0x28>)
 800085a:	6253      	str	r3, [r2, #36]	@ 0x24
	return BMP180.Callibration_Regs.UT;
 800085c:	4b03      	ldr	r3, [pc, #12]	@ (800086c <BMP180_GET_temp_IT+0x28>)
 800085e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000860:	b29b      	uxth	r3, r3
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	0000006c 	.word	0x0000006c

08000870 <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	return (((BMP180.Data_Press_IT[0]<<16)|(BMP180.Data_Press_IT[1]<<8)|BMP180.Data_Press_IT[2]) >> 5);
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <BMP180_GET_pres_IT+0x2c>)
 8000876:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800087a:	041a      	lsls	r2, r3, #16
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <BMP180_GET_pres_IT+0x2c>)
 800087e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	4313      	orrs	r3, r2
 8000886:	4a05      	ldr	r2, [pc, #20]	@ (800089c <BMP180_GET_pres_IT+0x2c>)
 8000888:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 800088c:	4313      	orrs	r3, r2
 800088e:	115b      	asrs	r3, r3, #5
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	0000006c 	.word	0x0000006c

080008a0 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80008a6:	232e      	movs	r3, #46	@ 0x2e
 80008a8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <BMP180_start_measurment_temp+0x2c>)
 80008ac:	6818      	ldr	r0, [r3, #0]
 80008ae:	2364      	movs	r3, #100	@ 0x64
 80008b0:	9302      	str	r3, [sp, #8]
 80008b2:	2301      	movs	r3, #1
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2301      	movs	r3, #1
 80008bc:	22f4      	movs	r2, #244	@ 0xf4
 80008be:	21ee      	movs	r1, #238	@ 0xee
 80008c0:	f00d f99e 	bl	800dc00 <HAL_I2C_Mem_Write>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	24000094 	.word	0x24000094

080008d0 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 80008d6:	23f4      	movs	r3, #244	@ 0xf4
 80008d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <BMP180_start_measurment_pres+0x2c>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	2364      	movs	r3, #100	@ 0x64
 80008e0:	9302      	str	r3, [sp, #8]
 80008e2:	2301      	movs	r3, #1
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2301      	movs	r3, #1
 80008ec:	22f4      	movs	r2, #244	@ 0xf4
 80008ee:	21ee      	movs	r1, #238	@ 0xee
 80008f0:	f00d f986 	bl	800dc00 <HAL_I2C_Mem_Write>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	24000094 	.word	0x24000094

08000900 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 8000906:	23f4      	movs	r3, #244	@ 0xf4
 8000908:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <BMP180_start_measurment_pres_IT+0x30>)
 800090c:	6818      	ldr	r0, [r3, #0]
 800090e:	2301      	movs	r3, #1
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2301      	movs	r3, #1
 8000918:	22f4      	movs	r2, #244	@ 0xf4
 800091a:	21ee      	movs	r1, #238	@ 0xee
 800091c:	f00d fb9e 	bl	800e05c <HAL_I2C_Mem_Write_IT>
	BMP180.I2C_Tx_IRQ = 2;
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <BMP180_start_measurment_pres_IT+0x34>)
 8000922:	2202      	movs	r2, #2
 8000924:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	24000094 	.word	0x24000094
 8000934:	0000006c 	.word	0x0000006c

08000938 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 800093e:	232e      	movs	r3, #46	@ 0x2e
 8000940:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <BMP180_start_measurment_temp_IT+0x30>)
 8000944:	6818      	ldr	r0, [r3, #0]
 8000946:	2301      	movs	r3, #1
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2301      	movs	r3, #1
 8000950:	22f4      	movs	r2, #244	@ 0xf4
 8000952:	21ee      	movs	r1, #238	@ 0xee
 8000954:	f00d fb82 	bl	800e05c <HAL_I2C_Mem_Write_IT>
	BMP180.I2C_Tx_IRQ = 1;
 8000958:	4b04      	ldr	r3, [pc, #16]	@ (800096c <BMP180_start_measurment_temp_IT+0x34>)
 800095a:	2201      	movs	r2, #1
 800095c:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	24000094 	.word	0x24000094
 800096c:	0000006c 	.word	0x0000006c

08000970 <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	@ 0x28
 8000974:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000988:	23aa      	movs	r3, #170	@ 0xaa
 800098a:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 800098c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a7c <BMP180_read_calliberation_data+0x10c>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	8afa      	ldrh	r2, [r7, #22]
 8000992:	2364      	movs	r3, #100	@ 0x64
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	2316      	movs	r3, #22
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	463b      	mov	r3, r7
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2301      	movs	r3, #1
 80009a0:	21ee      	movs	r1, #238	@ 0xee
 80009a2:	f00d fa41 	bl	800de28 <HAL_I2C_Mem_Read>

	BMP180.Callibration_Regs.AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80009a6:	783b      	ldrb	r3, [r7, #0]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	787b      	ldrb	r3, [r7, #1]
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	4b32      	ldr	r3, [pc, #200]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 80009b6:	80da      	strh	r2, [r3, #6]
	BMP180.Callibration_Regs.AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80009b8:	78bb      	ldrb	r3, [r7, #2]
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	b21a      	sxth	r2, r3
 80009be:	78fb      	ldrb	r3, [r7, #3]
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 80009c8:	811a      	strh	r2, [r3, #8]
	BMP180.Callibration_Regs.AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80009ca:	793b      	ldrb	r3, [r7, #4]
 80009cc:	021b      	lsls	r3, r3, #8
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	797b      	ldrb	r3, [r7, #5]
 80009d2:	b21b      	sxth	r3, r3
 80009d4:	4313      	orrs	r3, r2
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	4b29      	ldr	r3, [pc, #164]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 80009da:	815a      	strh	r2, [r3, #10]
	BMP180.Callibration_Regs.AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	4b24      	ldr	r3, [pc, #144]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 80009ee:	801a      	strh	r2, [r3, #0]
	BMP180.Callibration_Regs.AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 80009f0:	7a3b      	ldrb	r3, [r7, #8]
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	7a7b      	ldrb	r3, [r7, #9]
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a02:	805a      	strh	r2, [r3, #2]
	BMP180.Callibration_Regs.AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000a04:	7abb      	ldrb	r3, [r7, #10]
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	7afb      	ldrb	r3, [r7, #11]
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a16:	809a      	strh	r2, [r3, #4]
	BMP180.Callibration_Regs.B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000a18:	7b3b      	ldrb	r3, [r7, #12]
 8000a1a:	021b      	lsls	r3, r3, #8
 8000a1c:	b21a      	sxth	r2, r3
 8000a1e:	7b7b      	ldrb	r3, [r7, #13]
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b21a      	sxth	r2, r3
 8000a26:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a28:	819a      	strh	r2, [r3, #12]
	BMP180.Callibration_Regs.B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000a2a:	7bbb      	ldrb	r3, [r7, #14]
 8000a2c:	021b      	lsls	r3, r3, #8
 8000a2e:	b21a      	sxth	r2, r3
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	b21b      	sxth	r3, r3
 8000a34:	4313      	orrs	r3, r2
 8000a36:	b21a      	sxth	r2, r3
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a3a:	81da      	strh	r2, [r3, #14]
	BMP180.Callibration_Regs.MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000a3c:	7c3b      	ldrb	r3, [r7, #16]
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	7c7b      	ldrb	r3, [r7, #17]
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a4c:	821a      	strh	r2, [r3, #16]
	BMP180.Callibration_Regs.MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 8000a4e:	7cbb      	ldrb	r3, [r7, #18]
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	b21a      	sxth	r2, r3
 8000a54:	7cfb      	ldrb	r3, [r7, #19]
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b21a      	sxth	r2, r3
 8000a5c:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a5e:	825a      	strh	r2, [r3, #18]
	BMP180.Callibration_Regs.MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 8000a60:	7d3b      	ldrb	r3, [r7, #20]
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	7d7b      	ldrb	r3, [r7, #21]
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	4b04      	ldr	r3, [pc, #16]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a70:	829a      	strh	r2, [r3, #20]
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	24000094 	.word	0x24000094
 8000a80:	0000006c 	.word	0x0000006c

08000a84 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
	float temp;
	BMP180.Callibration_Regs.X1 = ((temperature - BMP180.Callibration_Regs.AC6) * BMP180.Callibration_Regs.AC5)/32768;
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	4a20      	ldr	r2, [pc, #128]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000a92:	8892      	ldrh	r2, [r2, #4]
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	4a1f      	ldr	r2, [pc, #124]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000a98:	8852      	ldrh	r2, [r2, #2]
 8000a9a:	fb02 f303 	mul.w	r3, r2, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	da03      	bge.n	8000aaa <BMP180_GET_temp+0x26>
 8000aa2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000aa6:	441a      	add	r2, r3
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	13db      	asrs	r3, r3, #15
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ab0:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = (BMP180.Callibration_Regs.MC * 2048)/(BMP180.Callibration_Regs.X1 + BMP180.Callibration_Regs.MD);
 8000ab2:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ab4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000ab8:	02da      	lsls	r2, r3, #11
 8000aba:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000abe:	4915      	ldr	r1, [pc, #84]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ac0:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8000ac4:	440b      	add	r3, r1
 8000ac6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aca:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000acc:	62d3      	str	r3, [r2, #44]	@ 0x2c
	BMP180.Callibration_Regs.B5 = BMP180.Callibration_Regs.X1 + BMP180.Callibration_Regs.X2;
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ad0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ada:	6313      	str	r3, [r2, #48]	@ 0x30
	temp = (BMP180.Callibration_Regs.B5 + 8)/16;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae0:	3308      	adds	r3, #8
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	da00      	bge.n	8000ae8 <BMP180_GET_temp+0x64>
 8000ae6:	330f      	adds	r3, #15
 8000ae8:	111b      	asrs	r3, r3, #4
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af2:	edc7 7a03 	vstr	s15, [r7, #12]
	return temp/10.0;
 8000af6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000afa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000afe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b02:	eef0 7a66 	vmov.f32	s15, s13
}
 8000b06:	eeb0 0a67 	vmov.f32	s0, s15
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	0000006c 	.word	0x0000006c

08000b18 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]
	float pres;
	BMP180.Callibration_Regs.UP = BMP180_READ_pres();
 8000b22:	f7ff fe37 	bl	8000794 <BMP180_READ_pres>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a98      	ldr	r2, [pc, #608]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b2a:	6213      	str	r3, [r2, #32]
	BMP180.Callibration_Regs.X1 = (((BMP180.Callibration_Regs.UT-BMP180.Callibration_Regs.AC6) * BMP180.Callibration_Regs.AC5)/32768);//
 8000b2c:	4b97      	ldr	r3, [pc, #604]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b30:	4a96      	ldr	r2, [pc, #600]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b32:	8892      	ldrh	r2, [r2, #4]
 8000b34:	1a9b      	subs	r3, r3, r2
 8000b36:	4a95      	ldr	r2, [pc, #596]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b38:	8852      	ldrh	r2, [r2, #2]
 8000b3a:	fb02 f303 	mul.w	r3, r2, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	da03      	bge.n	8000b4a <BMP180_GET_pres+0x32>
 8000b42:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000b46:	441a      	add	r2, r3
 8000b48:	4613      	mov	r3, r2
 8000b4a:	13db      	asrs	r3, r3, #15
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b8f      	ldr	r3, [pc, #572]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = ((BMP180.Callibration_Regs.MC*(2048)) / (BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.MD));
 8000b52:	4b8e      	ldr	r3, [pc, #568]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b54:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000b58:	02da      	lsls	r2, r3, #11
 8000b5a:	4b8c      	ldr	r3, [pc, #560]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b5e:	498b      	ldr	r1, [pc, #556]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b60:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8000b64:	440b      	add	r3, r1
 8000b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6a:	4a88      	ldr	r2, [pc, #544]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	BMP180.Callibration_Regs.B5 = BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2;
 8000b6e:	4b87      	ldr	r3, [pc, #540]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b72:	4b86      	ldr	r3, [pc, #536]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b76:	4413      	add	r3, r2
 8000b78:	4a84      	ldr	r2, [pc, #528]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b7a:	6313      	str	r3, [r2, #48]	@ 0x30
	BMP180.Callibration_Regs.B6 = BMP180.Callibration_Regs.B5-4000;
 8000b7c:	4b83      	ldr	r3, [pc, #524]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000b84:	4a81      	ldr	r2, [pc, #516]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b86:	6353      	str	r3, [r2, #52]	@ 0x34
	BMP180.Callibration_Regs.X1 = (BMP180.Callibration_Regs.B2 * (BMP180.Callibration_Regs.B6*BMP180.Callibration_Regs.B6/(4096)))/(2048);
 8000b88:	4b80      	ldr	r3, [pc, #512]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4b7e      	ldr	r3, [pc, #504]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b94:	4a7d      	ldr	r2, [pc, #500]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000b98:	fb02 f303 	mul.w	r3, r2, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da01      	bge.n	8000ba4 <BMP180_GET_pres+0x8c>
 8000ba0:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000ba4:	131b      	asrs	r3, r3, #12
 8000ba6:	fb01 f303 	mul.w	r3, r1, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	da01      	bge.n	8000bb2 <BMP180_GET_pres+0x9a>
 8000bae:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000bb2:	12db      	asrs	r3, r3, #11
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b75      	ldr	r3, [pc, #468]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bb8:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = BMP180.Callibration_Regs.AC2*BMP180.Callibration_Regs.B6/(2048);
 8000bba:	4b74      	ldr	r3, [pc, #464]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b72      	ldr	r3, [pc, #456]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	da01      	bge.n	8000bd2 <BMP180_GET_pres+0xba>
 8000bce:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000bd2:	12db      	asrs	r3, r3, #11
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
	BMP180.Callibration_Regs.X3 = BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2;
 8000bda:	4b6c      	ldr	r3, [pc, #432]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000bde:	4b6b      	ldr	r3, [pc, #428]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be2:	4413      	add	r3, r2
 8000be4:	4a69      	ldr	r2, [pc, #420]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000be6:	63d3      	str	r3, [r2, #60]	@ 0x3c
	BMP180.Callibration_Regs.B3 = (((BMP180.Callibration_Regs.AC1*4+BMP180.Callibration_Regs.X3)<<3)+2)/4;
 8000be8:	4b68      	ldr	r3, [pc, #416]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000bee:	009a      	lsls	r2, r3, #2
 8000bf0:	4b66      	ldr	r3, [pc, #408]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bf4:	4413      	add	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da00      	bge.n	8000c00 <BMP180_GET_pres+0xe8>
 8000bfe:	3303      	adds	r3, #3
 8000c00:	109b      	asrs	r3, r3, #2
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b61      	ldr	r3, [pc, #388]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c06:	639a      	str	r2, [r3, #56]	@ 0x38
	BMP180.Callibration_Regs.X1 = BMP180.Callibration_Regs.AC3*BMP180.Callibration_Regs.B6/8192;
 8000c08:	4b60      	ldr	r3, [pc, #384]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c0a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4b5e      	ldr	r3, [pc, #376]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c14:	fb02 f303 	mul.w	r3, r2, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da03      	bge.n	8000c24 <BMP180_GET_pres+0x10c>
 8000c1c:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000c20:	441a      	add	r2, r3
 8000c22:	4613      	mov	r3, r2
 8000c24:	135b      	asrs	r3, r3, #13
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b58      	ldr	r3, [pc, #352]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c2a:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = (BMP180.Callibration_Regs.B1 * (BMP180.Callibration_Regs.B6*BMP180.Callibration_Regs.B6/(4096)))/(65536);
 8000c2c:	4b57      	ldr	r3, [pc, #348]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c2e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c32:	4619      	mov	r1, r3
 8000c34:	4b55      	ldr	r3, [pc, #340]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c38:	4a54      	ldr	r2, [pc, #336]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c3a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000c3c:	fb02 f303 	mul.w	r3, r2, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	da01      	bge.n	8000c48 <BMP180_GET_pres+0x130>
 8000c44:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000c48:	131b      	asrs	r3, r3, #12
 8000c4a:	fb01 f303 	mul.w	r3, r1, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	da03      	bge.n	8000c5a <BMP180_GET_pres+0x142>
 8000c52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c56:	441a      	add	r2, r3
 8000c58:	4613      	mov	r3, r2
 8000c5a:	141b      	asrs	r3, r3, #16
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c60:	62da      	str	r2, [r3, #44]	@ 0x2c
	BMP180.Callibration_Regs.X3 = ((BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2)+2)/4;
 8000c62:	4b4a      	ldr	r3, [pc, #296]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c66:	4b49      	ldr	r3, [pc, #292]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	da00      	bge.n	8000c74 <BMP180_GET_pres+0x15c>
 8000c72:	3303      	adds	r3, #3
 8000c74:	109b      	asrs	r3, r3, #2
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b44      	ldr	r3, [pc, #272]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
	BMP180.Callibration_Regs.B4 = BMP180.Callibration_Regs.AC4* (uint32_t)(BMP180.Callibration_Regs.X3+32768)/(32768);
 8000c7c:	4b43      	ldr	r3, [pc, #268]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b42      	ldr	r3, [pc, #264]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c86:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c8a:	fb02 f303 	mul.w	r3, r2, r3
 8000c8e:	0bdb      	lsrs	r3, r3, #15
 8000c90:	4a3e      	ldr	r2, [pc, #248]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c92:	6193      	str	r3, [r2, #24]
	BMP180.Callibration_Regs.B7 = ((uint32_t)BMP180.Callibration_Regs.UP-BMP180.Callibration_Regs.B3)*(50000>>3);
 8000c94:	4b3d      	ldr	r3, [pc, #244]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	4a3c      	ldr	r2, [pc, #240]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000c9c:	1a9b      	subs	r3, r3, r2
 8000c9e:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000ca2:	fb02 f303 	mul.w	r3, r2, r3
 8000ca6:	4a39      	ldr	r2, [pc, #228]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000ca8:	61d3      	str	r3, [r2, #28]
	if (BMP180.Callibration_Regs.B7 < 0x80000000){
 8000caa:	4b38      	ldr	r3, [pc, #224]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	db0d      	blt.n	8000cce <BMP180_GET_pres+0x1b6>
		pres = (BMP180.Callibration_Regs.B7*2)/BMP180.Callibration_Regs.B4;
 8000cb2:	4b36      	ldr	r3, [pc, #216]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	005a      	lsls	r2, r3, #1
 8000cb8:	4b34      	ldr	r3, [pc, #208]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc0:	ee07 3a90 	vmov	s15, r3
 8000cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cc8:	edc7 7a03 	vstr	s15, [r7, #12]
 8000ccc:	e00c      	b.n	8000ce8 <BMP180_GET_pres+0x1d0>
	}
	else{
		pres = (BMP180.Callibration_Regs.B7/BMP180.Callibration_Regs.B4)*2;
 8000cce:	4b2f      	ldr	r3, [pc, #188]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000cd0:	69da      	ldr	r2, [r3, #28]
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	ee07 3a90 	vmov	s15, r3
 8000ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ce4:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	BMP180.Callibration_Regs.X1 = (pres/(256))*(pres/(256));
 8000ce8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cec:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000d90 <BMP180_GET_pres+0x278>
 8000cf0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000cf4:	edd7 6a03 	vldr	s13, [r7, #12]
 8000cf8:	ed9f 6a25 	vldr	s12, [pc, #148]	@ 8000d90 <BMP180_GET_pres+0x278>
 8000cfc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d08:	ee17 2a90 	vmov	r2, s15
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000d0e:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X1 = (BMP180.Callibration_Regs.X1*3038)/(65536);
 8000d10:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d14:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000d18:	fb02 f303 	mul.w	r3, r2, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	da03      	bge.n	8000d28 <BMP180_GET_pres+0x210>
 8000d20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d24:	441a      	add	r2, r3
 8000d26:	4613      	mov	r3, r2
 8000d28:	141b      	asrs	r3, r3, #16
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000d2e:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = (-7357*pres)/(65536);
 8000d30:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d34:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000d94 <BMP180_GET_pres+0x27c>
 8000d38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d3c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000d98 <BMP180_GET_pres+0x280>
 8000d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d48:	ee17 2a90 	vmov	r2, s15
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	pres = pres + (BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2+3791)/(16);
 8000d50:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000d52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d54:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d58:	4413      	add	r3, r2
 8000d5a:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	da00      	bge.n	8000d64 <BMP180_GET_pres+0x24c>
 8000d62:	330f      	adds	r3, #15
 8000d64:	111b      	asrs	r3, r3, #4
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d76:	edc7 7a03 	vstr	s15, [r7, #12]
	return pres;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	ee07 3a90 	vmov	s15, r3
}
 8000d80:	eeb0 0a67 	vmov.f32	s0, s15
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	0000006c 	.word	0x0000006c
 8000d90:	43800000 	.word	0x43800000
 8000d94:	c5e5e800 	.word	0xc5e5e800
 8000d98:	47800000 	.word	0x47800000

08000d9c <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	float temperature, pressure, pres;
	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000da4:	f7ff fd7c 	bl	80008a0 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000da8:	200a      	movs	r0, #10
 8000daa:	f007 fd1d 	bl	80087e8 <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000dae:	f7ff fccf 	bl	8000750 <BMP180_READ_temp>
 8000db2:	4603      	mov	r3, r0
 8000db4:	ee07 3a90 	vmov	s15, r3
 8000db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dbc:	edc7 7a05 	vstr	s15, [r7, #20]
	BMP180.temp = BMP180_GET_temp(temperature);
 8000dc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dc8:	ee17 3a90 	vmov	r3, s15
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fe58 	bl	8000a84 <BMP180_GET_temp>
 8000dd4:	eef0 7a40 	vmov.f32	s15, s0
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <BMP180_CALIBRATION+0x84>)
 8000dda:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	BMP180_start_measurment_pres();
 8000dde:	f7ff fd77 	bl	80008d0 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000de2:	201e      	movs	r0, #30
 8000de4:	f007 fd00 	bl	80087e8 <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000de8:	f7ff fcd4 	bl	8000794 <BMP180_READ_pres>
 8000dec:	ee07 0a90 	vmov	s15, r0
 8000df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df4:	edc7 7a04 	vstr	s15, [r7, #16]
	pres = BMP180_GET_pres(pressure);
 8000df8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e00:	ee17 3a90 	vmov	r3, s15
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fe86 	bl	8000b18 <BMP180_GET_pres>
 8000e0c:	ed87 0a03 	vstr	s0, [r7, #12]
	//}
	*firstpres = pres;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	601a      	str	r2, [r3, #0]
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	0000006c 	.word	0x0000006c

08000e24 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000e2a:	f04f 0300 	mov.w	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e30:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <BMP180_GET_height+0x38>)
 8000e32:	603b      	str	r3, [r7, #0]
	height = (BMP180.ampritude/factor);
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <BMP180_GET_height+0x3c>)
 8000e36:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8000e3a:	ed97 7a00 	vldr	s14, [r7]
 8000e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e42:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	ee07 3a90 	vmov	s15, r3
}
 8000e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	4134cccd 	.word	0x4134cccd
 8000e60:	0000006c 	.word	0x0000006c

08000e64 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
//	  if(a >  max_speed)
//	  {
//		  a =  max_speed;
//	  }

	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d907      	bls.n	8000e88 <ESC_1_SPEED+0x24>
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	bf28      	it	cs
 8000e82:	4613      	movcs	r3, r2
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	e001      	b.n	8000e8c <ESC_1_SPEED+0x28>
 8000e88:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e8c:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <ESC_1_SPEED+0x40>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	88fa      	ldrh	r2, [r7, #6]
 8000e96:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	24000098 	.word	0x24000098

08000ea8 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d907      	bls.n	8000ecc <ESC_2_SPEED+0x24>
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	bf28      	it	cs
 8000ec6:	4613      	movcs	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	e001      	b.n	8000ed0 <ESC_2_SPEED+0x28>
 8000ecc:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ed0:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000ed2:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <ESC_2_SPEED+0x40>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	88fa      	ldrh	r2, [r7, #6]
 8000eda:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	24000098 	.word	0x24000098

08000eec <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d907      	bls.n	8000f10 <ESC_3_SPEED+0x24>
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f06:	4293      	cmp	r3, r2
 8000f08:	bf28      	it	cs
 8000f0a:	4613      	movcs	r3, r2
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	e001      	b.n	8000f14 <ESC_3_SPEED+0x28>
 8000f10:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f14:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000f16:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <ESC_3_SPEED+0x40>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	88fa      	ldrh	r2, [r7, #6]
 8000f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	24000098 	.word	0x24000098

08000f30 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d907      	bls.n	8000f54 <ESC_4_SPEED+0x24>
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	bf28      	it	cs
 8000f4e:	4613      	movcs	r3, r2
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	e001      	b.n	8000f58 <ESC_4_SPEED+0x28>
 8000f54:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f58:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000f5a:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <ESC_4_SPEED+0x40>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	88fa      	ldrh	r2, [r7, #6]
 8000f62:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	24000098 	.word	0x24000098

08000f74 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f7c:	4a20      	ldr	r2, [pc, #128]	@ (8001000 <ESC_INT+0x8c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f82:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f014 feff 	bl	8015d8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2104      	movs	r1, #4
 8000f94:	4618      	mov	r0, r3
 8000f96:	f014 fef9 	bl	8015d8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f014 fef3 	bl	8015d8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	210c      	movs	r1, #12
 8000fac:	4618      	mov	r0, r3
 8000fae:	f014 feed 	bl	8015d8c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000fb2:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <ESC_INT+0x8c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fbc:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000fbe:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <ESC_INT+0x8c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fc8:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <ESC_INT+0x8c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fd4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <ESC_INT+0x8c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fe0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe8:	4806      	ldr	r0, [pc, #24]	@ (8001004 <ESC_INT+0x90>)
 8000fea:	f00c fd39 	bl	800da60 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fee:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ff2:	f007 fbf9 	bl	80087e8 <HAL_Delay>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	24000098 	.word	0x24000098
 8001004:	58021800 	.word	0x58021800

08001008 <HMC5883L_Init>:


static I2C_HandleTypeDef *hi2c_HMC5883L;
extern HMC5883L_Struct HMC5883L;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af04      	add	r7, sp, #16
 800100e:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8001010:	4a2b      	ldr	r2, [pc, #172]	@ (80010c0 <HMC5883L_Init+0xb8>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			15 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x70;
 800101a:	2370      	movs	r3, #112	@ 0x70
 800101c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 800101e:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <HMC5883L_Init+0xb8>)
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2301      	movs	r3, #1
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	f107 030f 	add.w	r3, r7, #15
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	2200      	movs	r2, #0
 8001034:	213c      	movs	r1, #60	@ 0x3c
 8001036:	f00c fde3 	bl	800dc00 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xA0;
 800103a:	23a0      	movs	r3, #160	@ 0xa0
 800103c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800103e:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <HMC5883L_Init+0xb8>)
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2301      	movs	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	f107 030f 	add.w	r3, r7, #15
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	2201      	movs	r2, #1
 8001054:	213c      	movs	r1, #60	@ 0x3c
 8001056:	f00c fdd3 	bl	800dc00 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x00;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <HMC5883L_Init+0xb8>)
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	f107 030f 	add.w	r3, r7, #15
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	2202      	movs	r2, #2
 8001074:	213c      	movs	r1, #60	@ 0x3c
 8001076:	f00c fdc3 	bl	800dc00 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f007 fbb2 	bl	80087e8 <HAL_Delay>

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 8001084:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <HMC5883L_Init+0xb8>)
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	f107 030e 	add.w	r3, r7, #14
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	220a      	movs	r2, #10
 800109a:	213c      	movs	r1, #60	@ 0x3c
 800109c:	f00c fec4 	bl	800de28 <HAL_I2C_Mem_Read>

	if(status != 0x48){
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	2b48      	cmp	r3, #72	@ 0x48
 80010a4:	d002      	beq.n	80010ac <HMC5883L_Init+0xa4>
		status = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]
 80010aa:	e001      	b.n	80010b0 <HMC5883L_Init+0xa8>
	}
	else{
		status = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 80010b0:	200a      	movs	r0, #10
 80010b2:	f007 fb99 	bl	80087e8 <HAL_Delay>

	return status;
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2400009c 	.word	0x2400009c

080010c4 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 80010ca:	23b6      	movs	r3, #182	@ 0xb6
 80010cc:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, data, 6, 1);
 80010ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <HMC5883L_Get_Z_Start+0x40>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	9302      	str	r3, [sp, #8]
 80010d6:	2306      	movs	r3, #6
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	463b      	mov	r3, r7
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	213c      	movs	r1, #60	@ 0x3c
 80010e4:	f00c fea0 	bl	800de28 <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[2]<<8) | data[3];
 80010e8:	78bb      	ldrb	r3, [r7, #2]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2400009c 	.word	0x2400009c

08001108 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, (uint8_t *)HMC5883L.I2C_Data, 6);
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <HMC5883L_Get_Z_Start_IT+0x2c>)
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	2306      	movs	r3, #6
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <HMC5883L_Get_Z_Start_IT+0x30>)
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	213c      	movs	r1, #60	@ 0x3c
 8001120:	f00d f826 	bl	800e170 <HAL_I2C_Mem_Read_IT>
	HMC5883L.HMC583L_IRQ = 1;
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <HMC5883L_Get_Z_Start_IT+0x34>)
 8001126:	2201      	movs	r2, #1
 8001128:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2400009c 	.word	0x2400009c
 8001138:	0000418c 	.word	0x0000418c
 800113c:	00004164 	.word	0x00004164

08001140 <HMC5883L_Get_Z_End_IT>:

void HMC5883L_Get_Z_End_IT(void){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
//	Mag_Z = (((int16_t)HMC5883L_Data_IT[2]<<8) | HMC5883L_Data_IT[3]) * 2.56;// 2.56 - scale
//	Mag_X = (((int16_t)HMC5883L_Data_IT[0]<<8) | HMC5883L_Data_IT[1]) * 2.56;
//	Mag_Y = (((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5]) * 2.56;
		HMC5883L.Directions.X = (((int16_t)HMC5883L.I2C_Data[1]<<8) | HMC5883L.I2C_Data[0]) * 2.56;//important fake HMC5883L, msb -> lsb
 8001144:	4b36      	ldr	r3, [pc, #216]	@ (8001220 <HMC5883L_Get_Z_End_IT+0xe0>)
 8001146:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	4a34      	ldr	r2, [pc, #208]	@ (8001220 <HMC5883L_Get_Z_End_IT+0xe0>)
 800114e:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8001152:	4313      	orrs	r3, r2
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800115c:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8001208 <HMC5883L_Get_Z_End_IT+0xc8>
 8001160:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001164:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001168:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <HMC5883L_Get_Z_End_IT+0xe0>)
 800116a:	edc3 7a02 	vstr	s15, [r3, #8]
		HMC5883L.Directions.Z = (((int16_t)HMC5883L.I2C_Data[3]<<8) | HMC5883L.I2C_Data[2]) * 2.56;// 2.56 - scale
 800116e:	4b2c      	ldr	r3, [pc, #176]	@ (8001220 <HMC5883L_Get_Z_End_IT+0xe0>)
 8001170:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	4a2a      	ldr	r2, [pc, #168]	@ (8001220 <HMC5883L_Get_Z_End_IT+0xe0>)
 8001178:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 800117c:	4313      	orrs	r3, r2
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001186:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001208 <HMC5883L_Get_Z_End_IT+0xc8>
 800118a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800118e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <HMC5883L_Get_Z_End_IT+0xe0>)
 8001194:	edc3 7a00 	vstr	s15, [r3]
		HMC5883L.Directions.Y = (((int16_t)HMC5883L.I2C_Data[5]<<8) | HMC5883L.I2C_Data[4]) * 2.56;
 8001198:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <HMC5883L_Get_Z_End_IT+0xe0>)
 800119a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001220 <HMC5883L_Get_Z_End_IT+0xe0>)
 80011a2:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80011a6:	4313      	orrs	r3, r2
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011b0:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 8001208 <HMC5883L_Get_Z_End_IT+0xc8>
 80011b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011bc:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <HMC5883L_Get_Z_End_IT+0xe0>)
 80011be:	edc3 7a01 	vstr	s15, [r3, #4]
		HMC5883L.Directions.Heading = (atan2(HMC5883L.Directions.X, HMC5883L.Directions.Y))*180/M_PI;
 80011c2:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <HMC5883L_Get_Z_End_IT+0xe0>)
 80011c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80011c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011cc:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <HMC5883L_Get_Z_End_IT+0xe0>)
 80011ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80011d2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80011d6:	eeb0 1b46 	vmov.f64	d1, d6
 80011da:	eeb0 0b47 	vmov.f64	d0, d7
 80011de:	f01c fb59 	bl	801d894 <atan2>
 80011e2:	eeb0 7b40 	vmov.f64	d7, d0
 80011e6:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8001210 <HMC5883L_Get_Z_End_IT+0xd0>
 80011ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011ee:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8001218 <HMC5883L_Get_Z_End_IT+0xd8>
 80011f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <HMC5883L_Get_Z_End_IT+0xe0>)
 80011fc:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	f3af 8000 	nop.w
 8001208:	47ae147b 	.word	0x47ae147b
 800120c:	40047ae1 	.word	0x40047ae1
 8001210:	00000000 	.word	0x00000000
 8001214:	40668000 	.word	0x40668000
 8001218:	54442d18 	.word	0x54442d18
 800121c:	400921fb 	.word	0x400921fb
 8001220:	00004164 	.word	0x00004164

08001224 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 8001224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	e014      	b.n	8001268 <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 800123e:	f7ff ff41 	bl	80010c4 <HMC5883L_Get_Z_Start>
 8001242:	4603      	mov	r3, r0
 8001244:	b21b      	sxth	r3, r3
 8001246:	17da      	asrs	r2, r3, #31
 8001248:	461c      	mov	r4, r3
 800124a:	4615      	mov	r5, r2
 800124c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001250:	eb12 0804 	adds.w	r8, r2, r4
 8001254:	eb43 0905 	adc.w	r9, r3, r5
 8001258:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 800125c:	2064      	movs	r0, #100	@ 0x64
 800125e:	f007 fac3 	bl	80087e8 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3301      	adds	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b09      	cmp	r3, #9
 800126c:	dde7      	ble.n	800123e <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 800126e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001272:	f04f 020a 	mov.w	r2, #10
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	f7ff f849 	bl	8000310 <__aeabi_ldivmod>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	b213      	sxth	r3, r2
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001290 <MPU6050_INIT>:
extern float looptime;
extern MPU6050_Struct MPU6050;



uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 8001298:	4a13      	ldr	r2, [pc, #76]	@ (80012e8 <MPU6050_INIT+0x58>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 800129e:	f000 f825 	bl	80012ec <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 80012a2:	f000 f88f 	bl	80013c4 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 80012a6:	2005      	movs	r0, #5
 80012a8:	f000 f838 	bl	800131c <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 80012ac:	2008      	movs	r0, #8
 80012ae:	f000 f851 	bl	8001354 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 80012b2:	2008      	movs	r0, #8
 80012b4:	f000 f86a 	bl	800138c <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 80012b8:	f000 fc92 	bl	8001be0 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 80012bc:	f000 f89a 	bl	80013f4 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 80012c0:	200a      	movs	r0, #10
 80012c2:	f007 fa91 	bl	80087e8 <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 80012c6:	f000 fc73 	bl	8001bb0 <MPU6050_READ_ID>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	2b68      	cmp	r3, #104	@ 0x68
 80012d2:	d002      	beq.n	80012da <MPU6050_INIT+0x4a>
		status = 0;//error
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e001      	b.n	80012de <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80012da:	2301      	movs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	240000a0 	.word	0x240000a0

080012ec <MPU6050_RESET>:


void MPU6050_RESET(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 80012f2:	2300      	movs	r3, #0
 80012f4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <MPU6050_RESET+0x2c>)
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2301      	movs	r3, #1
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	226b      	movs	r2, #107	@ 0x6b
 800130a:	21d0      	movs	r1, #208	@ 0xd0
 800130c:	f00c fc78 	bl	800dc00 <HAL_I2C_Mem_Write>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	240000a0 	.word	0x240000a0

0800131c <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af04      	add	r7, sp, #16
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <MPU6050_CONFIG_DLPF+0x34>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	2301      	movs	r3, #1
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	f107 030f 	add.w	r3, r7, #15
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	221a      	movs	r2, #26
 8001340:	21d0      	movs	r1, #208	@ 0xd0
 8001342:	f00c fc5d 	bl	800dc00 <HAL_I2C_Mem_Write>
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	240000a0 	.word	0x240000a0

08001354 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af04      	add	r7, sp, #16
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <MPU6050_CONFIG_GYRO+0x34>)
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2301      	movs	r3, #1
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	f107 030f 	add.w	r3, r7, #15
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	221b      	movs	r2, #27
 8001378:	21d0      	movs	r1, #208	@ 0xd0
 800137a:	f00c fc41 	bl	800dc00 <HAL_I2C_Mem_Write>
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	240000a0 	.word	0x240000a0

0800138c <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af04      	add	r7, sp, #16
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MPU6050_CONFIG_ACCEL+0x34>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	2301      	movs	r3, #1
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	f107 030f 	add.w	r3, r7, #15
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	221c      	movs	r2, #28
 80013b0:	21d0      	movs	r1, #208	@ 0xd0
 80013b2:	f00c fc25 	bl	800dc00 <HAL_I2C_Mem_Write>
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	240000a0 	.word	0x240000a0

080013c4 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2301      	movs	r3, #1
 80013e0:	2219      	movs	r2, #25
 80013e2:	21d0      	movs	r1, #208	@ 0xd0
 80013e4:	f00c fc0c 	bl	800dc00 <HAL_I2C_Mem_Write>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	240000a0 	.word	0x240000a0

080013f4 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 80013fa:	2300      	movs	r3, #0
 80013fc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 80013fe:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	2301      	movs	r3, #1
 8001404:	9302      	str	r3, [sp, #8]
 8001406:	2301      	movs	r3, #1
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2301      	movs	r3, #1
 8001410:	226a      	movs	r2, #106	@ 0x6a
 8001412:	21d0      	movs	r1, #208	@ 0xd0
 8001414:	f00c fbf4 	bl	800dc00 <HAL_I2C_Mem_Write>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	240000a0 	.word	0x240000a0

08001424 <MPU6050_CALIBRATION>:
//}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(void){
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 1000; i++){ //5 sec
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	e071      	b.n	8001538 <MPU6050_CALIBRATION+0x114>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/MPU6050.Acc.Acc_Scale;
 8001454:	f000 fb28 	bl	8001aa8 <MPU6050_GET_ACCEL_FULLVALUE_X>
 8001458:	4603      	mov	r3, r0
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001462:	4b59      	ldr	r3, [pc, #356]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001464:	ed93 7a06 	vldr	s14, [r3, #24]
 8001468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001474:	edc7 7a07 	vstr	s15, [r7, #28]
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/MPU6050.Acc.Acc_Scale;
 8001478:	f000 fb36 	bl	8001ae8 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800147c:	4603      	mov	r3, r0
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001486:	4b50      	ldr	r3, [pc, #320]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001488:	ed93 7a06 	vldr	s14, [r3, #24]
 800148c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001490:	ed97 7a06 	vldr	s14, [r7, #24]
 8001494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001498:	edc7 7a06 	vstr	s15, [r7, #24]
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/MPU6050.Acc.Acc_Scale;
 800149c:	f000 fb38 	bl	8001b10 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 80014a0:	4603      	mov	r3, r0
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014aa:	4b47      	ldr	r3, [pc, #284]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 80014ac:	ed93 7a06 	vldr	s14, [r3, #24]
 80014b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	edc7 7a05 	vstr	s15, [r7, #20]

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/MPU6050.Gyr.Gyr_Scale;
 80014c0:	f000 fb3a 	bl	8001b38 <MPU6050_GET_GYRO_FULLVALUE_X>
 80014c4:	4603      	mov	r3, r0
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ce:	4b3e      	ldr	r3, [pc, #248]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 80014d0:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	edc7 7a04 	vstr	s15, [r7, #16]
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/MPU6050.Gyr.Gyr_Scale;
 80014e4:	f000 fb3c 	bl	8001b60 <MPU6050_GET_GYRO_FULLVALUE_Y>
 80014e8:	4603      	mov	r3, r0
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f2:	4b35      	ldr	r3, [pc, #212]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 80014f4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001504:	edc7 7a03 	vstr	s15, [r7, #12]
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/MPU6050.Gyr.Gyr_Scale;
 8001508:	f000 fb3e 	bl	8001b88 <MPU6050_GET_GYRO_FULLVALUE_Z>
 800150c:	4603      	mov	r3, r0
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001516:	4b2c      	ldr	r3, [pc, #176]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001518:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800151c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001520:	ed97 7a02 	vldr	s14, [r7, #8]
 8001524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001528:	edc7 7a02 	vstr	s15, [r7, #8]
		  HAL_Delay(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f007 f95b 	bl	80087e8 <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3301      	adds	r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800153e:	db89      	blt.n	8001454 <MPU6050_CALIBRATION+0x30>
	}
	MPU6050.Acc.acc_x_cal = accelx/1000;
 8001540:	ed97 7a07 	vldr	s14, [r7, #28]
 8001544:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80015cc <MPU6050_CALIBRATION+0x1a8>
 8001548:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154c:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 800154e:	edc3 7a07 	vstr	s15, [r3, #28]
	MPU6050.Acc.acc_y_cal = accely/1000;
 8001552:	ed97 7a06 	vldr	s14, [r7, #24]
 8001556:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80015cc <MPU6050_CALIBRATION+0x1a8>
 800155a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800155e:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001560:	edc3 7a08 	vstr	s15, [r3, #32]
	MPU6050.Acc.acc_z_cal = accelz/1000;
 8001564:	ed97 7a05 	vldr	s14, [r7, #20]
 8001568:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80015cc <MPU6050_CALIBRATION+0x1a8>
 800156c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001572:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MPU6050.Acc.acc_z_cal = 1 - MPU6050.Acc.acc_z_cal;
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001578:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800157c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001584:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001586:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MPU6050.Gyr.gyr_x_cal = gyrox/1000;
 800158a:	ed97 7a04 	vldr	s14, [r7, #16]
 800158e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80015cc <MPU6050_CALIBRATION+0x1a8>
 8001592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001596:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001598:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	MPU6050.Gyr.gyr_y_cal = gyroy/1000;
 800159c:	ed97 7a03 	vldr	s14, [r7, #12]
 80015a0:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80015cc <MPU6050_CALIBRATION+0x1a8>
 80015a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a8:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 80015aa:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	MPU6050.Gyr.gyr_z_cal = gyroz/1000;
 80015ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80015b2:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80015cc <MPU6050_CALIBRATION+0x1a8>
 80015b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ba:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 80015bc:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	00000000 	.word	0x00000000
 80015cc:	447a0000 	.word	0x447a0000

080015d0 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(void){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
	float ang1 = sqrt((MPU6050.Acc.ax*MPU6050.Acc.ax)+(MPU6050.Acc.az*MPU6050.Acc.az));
 80015d6:	4b42      	ldr	r3, [pc, #264]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015d8:	ed93 7a00 	vldr	s14, [r3]
 80015dc:	4b40      	ldr	r3, [pc, #256]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015e6:	4b3e      	ldr	r3, [pc, #248]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80015ec:	4b3c      	ldr	r3, [pc, #240]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80015f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015fe:	eeb0 0b47 	vmov.f64	d0, d7
 8001602:	f01c f949 	bl	801d898 <sqrt>
 8001606:	eeb0 7b40 	vmov.f64	d7, d0
 800160a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800160e:	edc7 7a01 	vstr	s15, [r7, #4]
	float ang2 = sqrt((MPU6050.Acc.ay*MPU6050.Acc.ay)+(MPU6050.Acc.az*MPU6050.Acc.az));
 8001612:	4b33      	ldr	r3, [pc, #204]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001614:	ed93 7a01 	vldr	s14, [r3, #4]
 8001618:	4b31      	ldr	r3, [pc, #196]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 800161a:	edd3 7a01 	vldr	s15, [r3, #4]
 800161e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001622:	4b2f      	ldr	r3, [pc, #188]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001624:	edd3 6a02 	vldr	s13, [r3, #8]
 8001628:	4b2d      	ldr	r3, [pc, #180]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 800162a:	edd3 7a02 	vldr	s15, [r3, #8]
 800162e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001636:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800163a:	eeb0 0b47 	vmov.f64	d0, d7
 800163e:	f01c f92b 	bl	801d898 <sqrt>
 8001642:	eeb0 7b40 	vmov.f64	d7, d0
 8001646:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800164a:	edc7 7a00 	vstr	s15, [r7]

	MPU6050.Acc.ay_ang = ((-1*(atan(MPU6050.Acc.ax/ang2)))*180)/M_PI;
 800164e:	4b24      	ldr	r3, [pc, #144]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001650:	edd3 6a00 	vldr	s13, [r3]
 8001654:	ed97 7a00 	vldr	s14, [r7]
 8001658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001660:	eeb0 0b47 	vmov.f64	d0, d7
 8001664:	f01c f938 	bl	801d8d8 <atan>
 8001668:	eeb0 7b40 	vmov.f64	d7, d0
 800166c:	eeb1 7b47 	vneg.f64	d7, d7
 8001670:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 80016d0 <MPU6050_GET_ACCEL_TO_ANGLE+0x100>
 8001674:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001678:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 80016d8 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 800167c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001680:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001684:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001686:	edc3 7a04 	vstr	s15, [r3, #16]
	MPU6050.Acc.ax_ang = ((atan(MPU6050.Acc.ay/ang1))*180)/M_PI;
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 800168c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001690:	ed97 7a01 	vldr	s14, [r7, #4]
 8001694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001698:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800169c:	eeb0 0b47 	vmov.f64	d0, d7
 80016a0:	f01c f91a 	bl	801d8d8 <atan>
 80016a4:	eeb0 7b40 	vmov.f64	d7, d0
 80016a8:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80016d0 <MPU6050_GET_ACCEL_TO_ANGLE+0x100>
 80016ac:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016b0:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80016d8 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 80016b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80016be:	edc3 7a03 	vstr	s15, [r3, #12]
//	axan = -1*(atan(ax/ang2));
//	ayan= atan(ay/ang1);
//
//	*ay_ang = (axan*180)/M_PI;
//	*ax_ang = (ayan*180)/M_PI;
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	f3af 8000 	nop.w
 80016d0:	00000000 	.word	0x00000000
 80016d4:	40668000 	.word	0x40668000
 80016d8:	54442d18 	.word	0x54442d18
 80016dc:	400921fb 	.word	0x400921fb
 80016e0:	00000000 	.word	0x00000000

080016e4 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, MPU6050.I2C_Data, 14);
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	230e      	movs	r3, #14
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2301      	movs	r3, #1
 80016f8:	223b      	movs	r2, #59	@ 0x3b
 80016fa:	21d0      	movs	r1, #208	@ 0xd0
 80016fc:	f00c fd38 	bl	800e170 <HAL_I2C_Mem_Read_IT>
	MPU6050.MPU6050_IRQ = 1;
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x34>)
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	240000a0 	.word	0x240000a0
 8001714:	00000044 	.word	0x00000044
 8001718:	00000000 	.word	0x00000000

0800171c <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(void){
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
	MPU6050.Acc.ax = (((int16_t)(MPU6050.I2C_Data[0]<<8) | MPU6050.I2C_Data[1])/MPU6050.Acc.Acc_Scale) - MPU6050.Acc.acc_x_cal;
 8001720:	4b53      	ldr	r3, [pc, #332]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001722:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21b      	sxth	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	4b50      	ldr	r3, [pc, #320]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800172e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001732:	4313      	orrs	r3, r2
 8001734:	ee07 3a90 	vmov	s15, r3
 8001738:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800173c:	4b4c      	ldr	r3, [pc, #304]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800173e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001746:	4b4a      	ldr	r3, [pc, #296]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001748:	edd3 7a07 	vldr	s15, [r3, #28]
 800174c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001750:	4b47      	ldr	r3, [pc, #284]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001752:	edc3 7a00 	vstr	s15, [r3]
	MPU6050.Acc.ay = (((int16_t)(MPU6050.I2C_Data[2]<<8) | MPU6050.I2C_Data[3])/MPU6050.Acc.Acc_Scale) - MPU6050.Acc.acc_y_cal;
 8001756:	4b46      	ldr	r3, [pc, #280]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001758:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21b      	sxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	4b43      	ldr	r3, [pc, #268]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001764:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001768:	4313      	orrs	r3, r2
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001772:	4b3f      	ldr	r3, [pc, #252]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001774:	edd3 7a06 	vldr	s15, [r3, #24]
 8001778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800177c:	4b3c      	ldr	r3, [pc, #240]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800177e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001786:	4b3a      	ldr	r3, [pc, #232]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001788:	edc3 7a01 	vstr	s15, [r3, #4]
	MPU6050.Acc.az = (((int16_t)(MPU6050.I2C_Data[4]<<8) | MPU6050.I2C_Data[5])/MPU6050.Acc.Acc_Scale) + MPU6050.Acc.acc_z_cal;
 800178c:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800178e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	b21b      	sxth	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	4b35      	ldr	r3, [pc, #212]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800179a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800179e:	4313      	orrs	r3, r2
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017a8:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80017ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017b4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80017b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017be:	edc3 7a02 	vstr	s15, [r3, #8]

	MPU6050.Gyr.gx = (((int16_t)(MPU6050.I2C_Data[8]<<8) | MPU6050.I2C_Data[9])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_x_cal;
 80017c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017c4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017d0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80017d4:	4313      	orrs	r3, r2
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017de:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017e0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80017e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017e8:	4b21      	ldr	r3, [pc, #132]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017ea:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80017ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017f4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	MPU6050.Gyr.gy = (((int16_t)(MPU6050.I2C_Data[10]<<8) | MPU6050.I2C_Data[11])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_y_cal;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017fa:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	b21b      	sxth	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	4b1a      	ldr	r3, [pc, #104]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001806:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 800180a:	4313      	orrs	r3, r2
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001814:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001816:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800181a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800181e:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001820:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800182a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	MPU6050.Gyr.gz = (((int16_t)(MPU6050.I2C_Data[12]<<8) | MPU6050.I2C_Data[13])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_z_cal;
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001830:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b21b      	sxth	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800183c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001840:	4313      	orrs	r3, r2
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800184c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001856:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800185a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185e:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001860:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	00000000 	.word	0x00000000

08001874 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float megz_ang){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	ed87 0a00 	vstr	s0, [r7]
	Complementary_getFilter(Complementary_Filter_st, MPU6050.Acc.ax_ang, MPU6050.Acc.ay_ang, megz_ang, MPU6050.Gyr.gx, MPU6050.Gyr.gy, MPU6050.Gyr.gz);
 8001880:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 8001882:	edd3 7a03 	vldr	s15, [r3, #12]
 8001886:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 8001888:	ed93 7a04 	vldr	s14, [r3, #16]
 800188c:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 800188e:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001892:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 8001894:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 800189a:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 800189e:	eef0 2a65 	vmov.f32	s5, s11
 80018a2:	eeb0 2a46 	vmov.f32	s4, s12
 80018a6:	eef0 1a66 	vmov.f32	s3, s13
 80018aa:	ed97 1a00 	vldr	s2, [r7]
 80018ae:	eef0 0a47 	vmov.f32	s1, s14
 80018b2:	eeb0 0a67 	vmov.f32	s0, s15
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f9aa 	bl	8001c10 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	00000000 	.word	0x00000000

080018c8 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <MPU6050_GET_ACCEL_YH+0x2c>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	2301      	movs	r3, #1
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	2301      	movs	r3, #1
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	1dfb      	adds	r3, r7, #7
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	223d      	movs	r2, #61	@ 0x3d
 80018e2:	21d0      	movs	r1, #208	@ 0xd0
 80018e4:	f00c faa0 	bl	800de28 <HAL_I2C_Mem_Read>
	return data;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	240000a0 	.word	0x240000a0

080018f8 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <MPU6050_GET_ACCEL_YL+0x2c>)
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	2301      	movs	r3, #1
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	2301      	movs	r3, #1
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	223e      	movs	r2, #62	@ 0x3e
 8001912:	21d0      	movs	r1, #208	@ 0xd0
 8001914:	f00c fa88 	bl	800de28 <HAL_I2C_Mem_Read>
	return data;
 8001918:	79fb      	ldrb	r3, [r7, #7]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	240000a0 	.word	0x240000a0

08001928 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	2301      	movs	r3, #1
 8001934:	9302      	str	r3, [sp, #8]
 8001936:	2301      	movs	r3, #1
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2301      	movs	r3, #1
 8001940:	223f      	movs	r2, #63	@ 0x3f
 8001942:	21d0      	movs	r1, #208	@ 0xd0
 8001944:	f00c fa70 	bl	800de28 <HAL_I2C_Mem_Read>
	return data;
 8001948:	79fb      	ldrb	r3, [r7, #7]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	240000a0 	.word	0x240000a0

08001958 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <MPU6050_GET_ACCEL_ZL+0x2c>)
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	2301      	movs	r3, #1
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2301      	movs	r3, #1
 8001970:	2240      	movs	r2, #64	@ 0x40
 8001972:	21d0      	movs	r1, #208	@ 0xd0
 8001974:	f00c fa58 	bl	800de28 <HAL_I2C_Mem_Read>
	return data;
 8001978:	79fb      	ldrb	r3, [r7, #7]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	240000a0 	.word	0x240000a0

08001988 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MPU6050_GET_GYRO_XH+0x2c>)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	2301      	movs	r3, #1
 8001994:	9302      	str	r3, [sp, #8]
 8001996:	2301      	movs	r3, #1
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2301      	movs	r3, #1
 80019a0:	2243      	movs	r2, #67	@ 0x43
 80019a2:	21d0      	movs	r1, #208	@ 0xd0
 80019a4:	f00c fa40 	bl	800de28 <HAL_I2C_Mem_Read>
	return data;
 80019a8:	79fb      	ldrb	r3, [r7, #7]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	240000a0 	.word	0x240000a0

080019b8 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <MPU6050_GET_GYRO_XL+0x2c>)
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	2301      	movs	r3, #1
 80019c4:	9302      	str	r3, [sp, #8]
 80019c6:	2301      	movs	r3, #1
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2301      	movs	r3, #1
 80019d0:	2244      	movs	r2, #68	@ 0x44
 80019d2:	21d0      	movs	r1, #208	@ 0xd0
 80019d4:	f00c fa28 	bl	800de28 <HAL_I2C_Mem_Read>
	return data;
 80019d8:	79fb      	ldrb	r3, [r7, #7]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	240000a0 	.word	0x240000a0

080019e8 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <MPU6050_GET_GYRO_YH+0x2c>)
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	2301      	movs	r3, #1
 80019f4:	9302      	str	r3, [sp, #8]
 80019f6:	2301      	movs	r3, #1
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2301      	movs	r3, #1
 8001a00:	2245      	movs	r2, #69	@ 0x45
 8001a02:	21d0      	movs	r1, #208	@ 0xd0
 8001a04:	f00c fa10 	bl	800de28 <HAL_I2C_Mem_Read>
	return data;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	240000a0 	.word	0x240000a0

08001a18 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <MPU6050_GET_GYRO_YL+0x2c>)
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	2301      	movs	r3, #1
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2301      	movs	r3, #1
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	1dfb      	adds	r3, r7, #7
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	2246      	movs	r2, #70	@ 0x46
 8001a32:	21d0      	movs	r1, #208	@ 0xd0
 8001a34:	f00c f9f8 	bl	800de28 <HAL_I2C_Mem_Read>
	return data;
 8001a38:	79fb      	ldrb	r3, [r7, #7]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	240000a0 	.word	0x240000a0

08001a48 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <MPU6050_GET_GYRO_ZH+0x2c>)
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	2301      	movs	r3, #1
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2301      	movs	r3, #1
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	1dfb      	adds	r3, r7, #7
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	2247      	movs	r2, #71	@ 0x47
 8001a62:	21d0      	movs	r1, #208	@ 0xd0
 8001a64:	f00c f9e0 	bl	800de28 <HAL_I2C_Mem_Read>
	return data;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	240000a0 	.word	0x240000a0

08001a78 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <MPU6050_GET_GYRO_ZL+0x2c>)
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	2301      	movs	r3, #1
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	2301      	movs	r3, #1
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	2248      	movs	r2, #72	@ 0x48
 8001a92:	21d0      	movs	r1, #208	@ 0xd0
 8001a94:	f00c f9c8 	bl	800de28 <HAL_I2C_Mem_Read>
	return data;
 8001a98:	79fb      	ldrb	r3, [r7, #7]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	240000a0 	.word	0x240000a0

08001aa8 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	223b      	movs	r2, #59	@ 0x3b
 8001ac2:	21d0      	movs	r1, #208	@ 0xd0
 8001ac4:	f00c f9b0 	bl	800de28 <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001ac8:	793b      	ldrb	r3, [r7, #4]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	797b      	ldrb	r3, [r7, #5]
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	80fb      	strh	r3, [r7, #6]
	return data;
 8001ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	240000a0 	.word	0x240000a0

08001ae8 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001aee:	f7ff feeb 	bl	80018c8 <MPU6050_GET_ACCEL_YH>
 8001af2:	4603      	mov	r3, r0
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	b21c      	sxth	r4, r3
 8001af8:	f7ff fefe 	bl	80018f8 <MPU6050_GET_ACCEL_YL>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4323      	orrs	r3, r4
 8001b02:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd90      	pop	{r4, r7, pc}

08001b10 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001b16:	f7ff ff07 	bl	8001928 <MPU6050_GET_ACCEL_ZH>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b21c      	sxth	r4, r3
 8001b20:	f7ff ff1a 	bl	8001958 <MPU6050_GET_ACCEL_ZL>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	4323      	orrs	r3, r4
 8001b2a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}

08001b38 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001b3e:	f7ff ff23 	bl	8001988 <MPU6050_GET_GYRO_XH>
 8001b42:	4603      	mov	r3, r0
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	b21c      	sxth	r4, r3
 8001b48:	f7ff ff36 	bl	80019b8 <MPU6050_GET_GYRO_XL>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	4323      	orrs	r3, r4
 8001b52:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}

08001b60 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001b66:	f7ff ff3f 	bl	80019e8 <MPU6050_GET_GYRO_YH>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21c      	sxth	r4, r3
 8001b70:	f7ff ff52 	bl	8001a18 <MPU6050_GET_GYRO_YL>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	4323      	orrs	r3, r4
 8001b7a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001b8e:	f7ff ff5b 	bl	8001a48 <MPU6050_GET_GYRO_ZH>
 8001b92:	4603      	mov	r3, r0
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	b21c      	sxth	r4, r3
 8001b98:	f7ff ff6e 	bl	8001a78 <MPU6050_GET_GYRO_ZL>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	4323      	orrs	r3, r4
 8001ba2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd90      	pop	{r4, r7, pc}

08001bb0 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001bb6:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <MPU6050_READ_ID+0x2c>)
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	2275      	movs	r2, #117	@ 0x75
 8001bca:	21d0      	movs	r1, #208	@ 0xd0
 8001bcc:	f00c f92c 	bl	800de28 <HAL_I2C_Mem_Read>
	return data;
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	b25b      	sxtb	r3, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	240000a0 	.word	0x240000a0

08001be0 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001be6:	2302      	movs	r3, #2
 8001be8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	9302      	str	r3, [sp, #8]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	2237      	movs	r2, #55	@ 0x37
 8001bfe:	21d0      	movs	r1, #208	@ 0xd0
 8001c00:	f00b fffe 	bl	800dc00 <HAL_I2C_Mem_Write>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	240000a0 	.word	0x240000a0

08001c10 <Complementary_getFilter>:
	*VerVel += (VerAcc*looptime);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	@ 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	61f8      	str	r0, [r7, #28]
 8001c18:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c1c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c20:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c24:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c28:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c2c:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang)+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));//
 8001c30:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c38:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8001cf8 <Complementary_getFilter+0xe8>
 8001c3c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c40:	4b31      	ldr	r3, [pc, #196]	@ (8001d08 <Complementary_getFilter+0xf8>)
 8001c42:	ed93 7a00 	vldr	s14, [r3]
 8001c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c5c:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001d00 <Complementary_getFilter+0xf0>
 8001c60:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001c64:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang)+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001c72:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c7a:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001cf8 <Complementary_getFilter+0xe8>
 8001c7e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c82:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <Complementary_getFilter+0xf8>)
 8001c84:	ed93 7a00 	vldr	s14, [r3]
 8001c88:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c9e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001d00 <Complementary_getFilter+0xf0>
 8001ca2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ca6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001caa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (((gz_ang*looptime)+Complementary_Filter_st->oz));//todo add magnetomiter?
 8001cb4:	4b14      	ldr	r3, [pc, #80]	@ (8001d08 <Complementary_getFilter+0xf8>)
 8001cb6:	ed93 7a00 	vldr	s14, [r3]
 8001cba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001cea:	bf00      	nop
 8001cec:	3724      	adds	r7, #36	@ 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	47ae147b 	.word	0x47ae147b
 8001cfc:	3f947ae1 	.word	0x3f947ae1
 8001d00:	f5c28f5c 	.word	0xf5c28f5c
 8001d04:	3fef5c28 	.word	0x3fef5c28
 8001d08:	0801e2e4 	.word	0x0801e2e4

08001d0c <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f006 fd66 	bl	80087e8 <HAL_Delay>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001d30:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <nRF24_SendSpi+0x28>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	f011 ffe1 	bl	8013d04 <HAL_SPI_Transmit>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	240000a4 	.word	0x240000a4

08001d50 <nRF24_SendSpi_IT>:
static void nRF24_SendSpi_IT(uint8_t *Data, uint8_t Length)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit_IT(hspi_nrf, Data, Length);
 8001d5c:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <nRF24_SendSpi_IT+0x24>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	b292      	uxth	r2, r2
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f012 ff66 	bl	8014c38 <HAL_SPI_Transmit_IT>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	240000a4 	.word	0x240000a4

08001d78 <nRF24_ReadSpi>:


static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <nRF24_ReadSpi+0x28>)
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	f012 f9a5 	bl	80140e0 <HAL_SPI_Receive>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	240000a4 	.word	0x240000a4

08001da4 <nRF24_ReadSpi_IT>:
static void nRF24_ReadSpi_IT(uint8_t *Data, uint8_t Length)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive_IT(hspi_nrf, Data, Length);
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <nRF24_ReadSpi_IT+0x24>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	b292      	uxth	r2, r2
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f012 ffe6 	bl	8014d8c <HAL_SPI_Receive_IT>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	240000a4 	.word	0x240000a4

08001dcc <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2180      	movs	r1, #128	@ 0x80
 8001dde:	480c      	ldr	r0, [pc, #48]	@ (8001e10 <nRF24_ReadRegister+0x44>)
 8001de0:	f00b fe3e 	bl	800da60 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001de4:	1dfb      	adds	r3, r7, #7
 8001de6:	2101      	movs	r1, #1
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff9b 	bl	8001d24 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001dee:	f107 030f 	add.w	r3, r7, #15
 8001df2:	2101      	movs	r1, #1
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ffbf 	bl	8001d78 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2180      	movs	r1, #128	@ 0x80
 8001dfe:	4804      	ldr	r0, [pc, #16]	@ (8001e10 <nRF24_ReadRegister+0x44>)
 8001e00:	f00b fe2e 	bl	800da60 <HAL_GPIO_WritePin>

	return result;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	58020400 	.word	0x58020400

08001e14 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	4613      	mov	r3, r2
 8001e22:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2180      	movs	r1, #128	@ 0x80
 8001e2c:	480a      	ldr	r0, [pc, #40]	@ (8001e58 <nRF24_ReadRegisters+0x44>)
 8001e2e:	f00b fe17 	bl	800da60 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	2101      	movs	r1, #1
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff74 	bl	8001d24 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6838      	ldr	r0, [r7, #0]
 8001e42:	f7ff ff99 	bl	8001d78 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e46:	2201      	movs	r2, #1
 8001e48:	2180      	movs	r1, #128	@ 0x80
 8001e4a:	4803      	ldr	r0, [pc, #12]	@ (8001e58 <nRF24_ReadRegisters+0x44>)
 8001e4c:	f00b fe08 	bl	800da60 <HAL_GPIO_WritePin>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	58020400 	.word	0x58020400

08001e5c <nRF24_ReadRegisters_IT>:

static void nRF24_ReadRegisters_IT(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e70:	2200      	movs	r2, #0
 8001e72:	2180      	movs	r1, #128	@ 0x80
 8001e74:	480a      	ldr	r0, [pc, #40]	@ (8001ea0 <nRF24_ReadRegisters_IT+0x44>)
 8001e76:	f00b fdf3 	bl	800da60 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff50 	bl	8001d24 <nRF24_SendSpi>
	nRF24_ReadSpi_IT(ret, len);
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	4619      	mov	r1, r3
 8001e88:	6838      	ldr	r0, [r7, #0]
 8001e8a:	f7ff ff8b 	bl	8001da4 <nRF24_ReadSpi_IT>

	NRF24.SPI_Rx_Inte = 1;
 8001e8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <nRF24_ReadRegisters_IT+0x48>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	//NRF24_CSN_HIGH;
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	58020400 	.word	0x58020400
 8001ea4:	000000cc 	.word	0x000000cc

08001ea8 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	460a      	mov	r2, r1
 8001eb2:	71fb      	strb	r3, [r7, #7]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	f043 0320 	orr.w	r3, r3, #32
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2180      	movs	r1, #128	@ 0x80
 8001eca:	4809      	ldr	r0, [pc, #36]	@ (8001ef0 <nRF24_WriteRegister+0x48>)
 8001ecc:	f00b fdc8 	bl	800da60 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff24 	bl	8001d24 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001edc:	2201      	movs	r2, #1
 8001ede:	2180      	movs	r1, #128	@ 0x80
 8001ee0:	4803      	ldr	r0, [pc, #12]	@ (8001ef0 <nRF24_WriteRegister+0x48>)
 8001ee2:	f00b fdbd 	bl	800da60 <HAL_GPIO_WritePin>
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	58020400 	.word	0x58020400

08001ef4 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
 8001f00:	4613      	mov	r3, r2
 8001f02:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f043 0320 	orr.w	r3, r3, #32
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2180      	movs	r1, #128	@ 0x80
 8001f12:	480b      	ldr	r0, [pc, #44]	@ (8001f40 <nRF24_WriteRegisters+0x4c>)
 8001f14:	f00b fda4 	bl	800da60 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001f18:	1dfb      	adds	r3, r7, #7
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff01 	bl	8001d24 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001f22:	79bb      	ldrb	r3, [r7, #6]
 8001f24:	4619      	mov	r1, r3
 8001f26:	6838      	ldr	r0, [r7, #0]
 8001f28:	f7ff fefc 	bl	8001d24 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2180      	movs	r1, #128	@ 0x80
 8001f30:	4803      	ldr	r0, [pc, #12]	@ (8001f40 <nRF24_WriteRegisters+0x4c>)
 8001f32:	f00b fd95 	bl	800da60 <HAL_GPIO_WritePin>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	58020400 	.word	0x58020400

08001f44 <nRF24_WriteRegisters_IT>:

static void nRF24_WriteRegisters_IT(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
 8001f50:	4613      	mov	r3, r2
 8001f52:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f043 0320 	orr.w	r3, r3, #32
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2180      	movs	r1, #128	@ 0x80
 8001f62:	480a      	ldr	r0, [pc, #40]	@ (8001f8c <nRF24_WriteRegisters_IT+0x48>)
 8001f64:	f00b fd7c 	bl	800da60 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001f68:	1dfb      	adds	r3, r7, #7
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fed9 	bl	8001d24 <nRF24_SendSpi>
	nRF24_SendSpi_IT(val, len);
 8001f72:	79bb      	ldrb	r3, [r7, #6]
 8001f74:	4619      	mov	r1, r3
 8001f76:	6838      	ldr	r0, [r7, #0]
 8001f78:	f7ff feea 	bl	8001d50 <nRF24_SendSpi_IT>

	NRF24.SPI_Tx_Inte = 1;
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <nRF24_WriteRegisters_IT+0x4c>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	//NRF24_CSN_HIGH;
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	58020400 	.word	0x58020400
 8001f90:	000000cc 	.word	0x000000cc

08001f94 <nRF24_RX_Mode>:



void nRF24_RX_Mode(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
	NRF24.Status = NRF24_InUse;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <nRF24_RX_Mode+0x60>)
 8001f9c:	2205      	movs	r2, #5
 8001f9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	uint8_t config = nRF24_ReadConfig();
 8001fa2:	f000 f85d 	bl	8002060 <nRF24_ReadConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001faa:	4913      	ldr	r1, [pc, #76]	@ (8001ff8 <nRF24_RX_Mode+0x64>)
 8001fac:	2000      	movs	r0, #0
 8001fae:	f000 fa06 	bl	80023be <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 f853 	bl	8002070 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001fca:	2070      	movs	r0, #112	@ 0x70
 8001fcc:	f000 f8ab 	bl	8002126 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001fd0:	f000 f8b8 	bl	8002144 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001fd4:	f000 f8d0 	bl	8002178 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2140      	movs	r1, #64	@ 0x40
 8001fdc:	4807      	ldr	r0, [pc, #28]	@ (8001ffc <nRF24_RX_Mode+0x68>)
 8001fde:	f00b fd3f 	bl	800da60 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
	NRF24.NRF24_MODE = NRF24_Switching_Modes;
 8001fe2:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <nRF24_RX_Mode+0x60>)
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	000000cc 	.word	0x000000cc
 8001ff8:	240000a8 	.word	0x240000a8
 8001ffc:	58020400 	.word	0x58020400

08002000 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
	NRF24.Status = NRF24_InUse;
 8002006:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <nRF24_TX_Mode+0x58>)
 8002008:	2205      	movs	r2, #5
 800200a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	NRF24_CE_LOW;
 800200e:	2200      	movs	r2, #0
 8002010:	2140      	movs	r1, #64	@ 0x40
 8002012:	4812      	ldr	r0, [pc, #72]	@ (800205c <nRF24_TX_Mode+0x5c>)
 8002014:	f00b fd24 	bl	800da60 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8002018:	f000 f822 	bl	8002060 <nRF24_ReadConfig>
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f81c 	bl	8002070 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002038:	2070      	movs	r0, #112	@ 0x70
 800203a:	f000 f874 	bl	8002126 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800203e:	f000 f881 	bl	8002144 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8002042:	f000 f899 	bl	8002178 <nRF24_FlushTX>
	//important wait 2ms for next interactionw with NRF24
	//nRF24_Delay(1);
	NRF24.NRF24_MODE = NRF24_Switching_Modes;
 8002046:	4b04      	ldr	r3, [pc, #16]	@ (8002058 <nRF24_TX_Mode+0x58>)
 8002048:	2203      	movs	r2, #3
 800204a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	000000cc 	.word	0x000000cc
 800205c:	58020400 	.word	0x58020400

08002060 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff feb1 	bl	8001dcc <nRF24_ReadRegister>
 800206a:	4603      	mov	r3, r0
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}

08002070 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	4619      	mov	r1, r3
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff ff12 	bl	8001ea8 <nRF24_WriteRegister>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002096:	2006      	movs	r0, #6
 8002098:	f7ff fe98 	bl	8001dcc <nRF24_ReadRegister>
 800209c:	4603      	mov	r3, r0
 800209e:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	f023 0307 	bic.w	r3, r3, #7
 80020a6:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	b25a      	sxtb	r2, r3
 80020ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b25b      	sxtb	r3, r3
 80020b6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	4619      	mov	r1, r3
 80020bc:	2006      	movs	r0, #6
 80020be:	f7ff fef3 	bl	8001ea8 <nRF24_WriteRegister>
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80020d4:	2006      	movs	r0, #6
 80020d6:	f7ff fe79 	bl	8001dcc <nRF24_ReadRegister>
 80020da:	4603      	mov	r3, r0
 80020dc:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80020e4:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d104      	bne.n	80020f6 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	f043 0320 	orr.w	r3, r3, #32
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e006      	b.n	8002104 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d103      	bne.n	8002104 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	f043 0308 	orr.w	r3, r3, #8
 8002102:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	4619      	mov	r1, r3
 8002108:	2006      	movs	r0, #6
 800210a:	f7ff fecd 	bl	8001ea8 <nRF24_WriteRegister>
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800211a:	2007      	movs	r0, #7
 800211c:	f7ff fe56 	bl	8001dcc <nRF24_ReadRegister>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	bd80      	pop	{r7, pc}

08002126 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	4619      	mov	r1, r3
 8002134:	2007      	movs	r0, #7
 8002136:	f7ff feb7 	bl	8001ea8 <nRF24_WriteRegister>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800214a:	23e2      	movs	r3, #226	@ 0xe2
 800214c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800214e:	2200      	movs	r2, #0
 8002150:	2180      	movs	r1, #128	@ 0x80
 8002152:	4808      	ldr	r0, [pc, #32]	@ (8002174 <nRF24_FlushRX+0x30>)
 8002154:	f00b fc84 	bl	800da60 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002158:	1dfb      	adds	r3, r7, #7
 800215a:	2101      	movs	r1, #1
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fde1 	bl	8001d24 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002162:	2201      	movs	r2, #1
 8002164:	2180      	movs	r1, #128	@ 0x80
 8002166:	4803      	ldr	r0, [pc, #12]	@ (8002174 <nRF24_FlushRX+0x30>)
 8002168:	f00b fc7a 	bl	800da60 <HAL_GPIO_WritePin>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	58020400 	.word	0x58020400

08002178 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 800217e:	23e1      	movs	r3, #225	@ 0xe1
 8002180:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002182:	2200      	movs	r2, #0
 8002184:	2180      	movs	r1, #128	@ 0x80
 8002186:	4808      	ldr	r0, [pc, #32]	@ (80021a8 <nRF24_FlushTX+0x30>)
 8002188:	f00b fc6a 	bl	800da60 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800218c:	1dfb      	adds	r3, r7, #7
 800218e:	2101      	movs	r1, #1
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fdc7 	bl	8001d24 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002196:	2201      	movs	r2, #1
 8002198:	2180      	movs	r1, #128	@ 0x80
 800219a:	4803      	ldr	r0, [pc, #12]	@ (80021a8 <nRF24_FlushTX+0x30>)
 800219c:	f00b fc60 	bl	800da60 <HAL_GPIO_WritePin>
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	58020400 	.word	0x58020400

080021ac <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80021b6:	f7ff ff53 	bl	8002060 <nRF24_ReadConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e003      	b.n	80021d6 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	f023 0308 	bic.w	r3, r3, #8
 80021d4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff49 	bl	8002070 <nRF24_WriteConfig>
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80021f0:	f7ff ff36 	bl	8002060 <nRF24_ReadConfig>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d104      	bne.n	8002208 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	e003      	b.n	8002210 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	f023 0304 	bic.w	r3, r3, #4
 800220e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff2c 	bl	8002070 <nRF24_WriteConfig>
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	460a      	mov	r2, r1
 800222a:	71fb      	strb	r3, [r7, #7]
 800222c:	4613      	mov	r3, r2
 800222e:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	b25a      	sxtb	r2, r3
 8002236:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	b25b      	sxtb	r3, r3
 8002240:	4313      	orrs	r3, r2
 8002242:	b25b      	sxtb	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	4619      	mov	r1, r3
 8002248:	2004      	movs	r0, #4
 800224a:	f7ff fe2d 	bl	8001ea8 <nRF24_WriteRegister>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	2005      	movs	r0, #5
 800226c:	f7ff fe1c 	bl	8001ea8 <nRF24_WriteRegister>
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	460a      	mov	r2, r1
 8002282:	71fb      	strb	r3, [r7, #7]
 8002284:	4613      	mov	r3, r2
 8002286:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2b05      	cmp	r3, #5
 800228c:	d901      	bls.n	8002292 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 800228e:	2305      	movs	r3, #5
 8002290:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	3311      	adds	r3, #17
 8002296:	b2da      	uxtb	r2, r3
 8002298:	79bb      	ldrb	r3, [r7, #6]
 800229a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7ff fe00 	bl	8001ea8 <nRF24_WriteRegister>
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	460a      	mov	r2, r1
 80022ba:	71fb      	strb	r3, [r7, #7]
 80022bc:	4613      	mov	r3, r2
 80022be:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d901      	bls.n	80022ca <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 80022c6:	2305      	movs	r3, #5
 80022c8:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80022ca:	2002      	movs	r0, #2
 80022cc:	f7ff fd7e 	bl	8001dcc <nRF24_ReadRegister>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10a      	bne.n	80022f0 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	2201      	movs	r2, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	b25a      	sxtb	r2, r3
 80022e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	b25b      	sxtb	r3, r3
 80022ec:	73fb      	strb	r3, [r7, #15]
 80022ee:	e00b      	b.n	8002308 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	2201      	movs	r2, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	b25a      	sxtb	r2, r3
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4013      	ands	r3, r2
 8002304:	b25b      	sxtb	r3, r3
 8002306:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	4619      	mov	r1, r3
 800230c:	2002      	movs	r0, #2
 800230e:	f7ff fdcb 	bl	8001ea8 <nRF24_WriteRegister>
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	460a      	mov	r2, r1
 8002324:	71fb      	strb	r3, [r7, #7]
 8002326:	4613      	mov	r3, r2
 8002328:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2b05      	cmp	r3, #5
 800232e:	d901      	bls.n	8002334 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002330:	2305      	movs	r3, #5
 8002332:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002334:	2001      	movs	r0, #1
 8002336:	f7ff fd49 	bl	8001dcc <nRF24_ReadRegister>
 800233a:	4603      	mov	r3, r0
 800233c:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800233e:	79bb      	ldrb	r3, [r7, #6]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d10a      	bne.n	800235a <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	2201      	movs	r2, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	b25a      	sxtb	r2, r3
 800234e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002352:	4313      	orrs	r3, r2
 8002354:	b25b      	sxtb	r3, r3
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e00b      	b.n	8002372 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2201      	movs	r2, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	b25b      	sxtb	r3, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	b25a      	sxtb	r2, r3
 8002368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236c:	4013      	ands	r3, r2
 800236e:	b25b      	sxtb	r3, r3
 8002370:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	4619      	mov	r1, r3
 8002376:	2001      	movs	r0, #1
 8002378:	f7ff fd96 	bl	8001ea8 <nRF24_WriteRegister>
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	2b05      	cmp	r3, #5
 8002392:	d901      	bls.n	8002398 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8002394:	2305      	movs	r3, #5
 8002396:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d801      	bhi.n	80023a2 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 800239e:	2303      	movs	r3, #3
 80023a0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	3b02      	subs	r3, #2
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	4619      	mov	r1, r3
 80023b0:	2003      	movs	r0, #3
 80023b2:	f7ff fd79 	bl	8001ea8 <nRF24_WriteRegister>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	6039      	str	r1, [r7, #0]
 80023c8:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <nRF24_SetRXAddress+0x18>
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d11d      	bne.n	8002412 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	e00d      	b.n	80023f8 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	441a      	add	r2, r3
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	f1c3 0302 	rsb	r3, r3, #2
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	3310      	adds	r3, #16
 80023ec:	443b      	add	r3, r7
 80023ee:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	3301      	adds	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d9ee      	bls.n	80023dc <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	330a      	adds	r3, #10
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f107 010c 	add.w	r1, r7, #12
 8002408:	2203      	movs	r2, #3
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fd72 	bl	8001ef4 <nRF24_WriteRegisters>
	{
 8002410:	e00a      	b.n	8002428 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	330a      	adds	r3, #10
 8002416:	b2da      	uxtb	r2, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	3302      	adds	r3, #2
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f7ff fd41 	bl	8001ea8 <nRF24_WriteRegister>
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	2203      	movs	r2, #3
 800243e:	4619      	mov	r1, r3
 8002440:	200a      	movs	r0, #10
 8002442:	f7ff fce7 	bl	8001e14 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e00c      	b.n	8002466 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	f1c3 0302 	rsb	r3, r3, #2
 8002454:	3210      	adds	r2, #16
 8002456:	443a      	add	r2, r7
 8002458:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 800245c:	4a16      	ldr	r2, [pc, #88]	@ (80024b8 <nRF24_SetTXAddress+0x88>)
 800245e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	3301      	adds	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d9ef      	bls.n	800244c <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e00d      	b.n	800248e <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	441a      	add	r2, r3
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	f1c3 0302 	rsb	r3, r3, #2
 800247e:	7812      	ldrb	r2, [r2, #0]
 8002480:	3310      	adds	r3, #16
 8002482:	443b      	add	r3, r7
 8002484:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	3301      	adds	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d9ee      	bls.n	8002472 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	2203      	movs	r2, #3
 800249a:	4619      	mov	r1, r3
 800249c:	200a      	movs	r0, #10
 800249e:	f7ff fd29 	bl	8001ef4 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80024a2:	f107 030c 	add.w	r3, r7, #12
 80024a6:	2203      	movs	r2, #3
 80024a8:	4619      	mov	r1, r3
 80024aa:	2010      	movs	r0, #16
 80024ac:	f7ff fd22 	bl	8001ef4 <nRF24_WriteRegisters>

}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	240000a8 	.word	0x240000a8

080024bc <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80024c2:	f7ff fe28 	bl	8002116 <nRF24_ReadStatus>
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80024d0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fe26 	bl	8002126 <nRF24_WriteStatus>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024ec:	f7ff fdb8 	bl	8002060 <nRF24_ReadConfig>
 80024f0:	4603      	mov	r3, r0
 80024f2:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d104      	bne.n	8002504 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	e003      	b.n	800250c <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800250a:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fdae 	bl	8002070 <nRF24_WriteConfig>
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002526:	f7ff fd9b 	bl	8002060 <nRF24_ReadConfig>
 800252a:	4603      	mov	r3, r0
 800252c:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d104      	bne.n	800253e <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	f043 0320 	orr.w	r3, r3, #32
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	e003      	b.n	8002546 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	f023 0320 	bic.w	r3, r3, #32
 8002544:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fd91 	bl	8002070 <nRF24_WriteConfig>
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002560:	f7ff fd7e 	bl	8002060 <nRF24_ReadConfig>
 8002564:	4603      	mov	r3, r0
 8002566:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d104      	bne.n	8002578 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	f043 0310 	orr.w	r3, r3, #16
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	e003      	b.n	8002580 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	f023 0310 	bic.w	r3, r3, #16
 800257e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fd74 	bl	8002070 <nRF24_WriteConfig>
}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002598:	2220      	movs	r2, #32
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	20a0      	movs	r0, #160	@ 0xa0
 800259e:	f7ff fca9 	bl	8001ef4 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <nRF24_WriteTXPayload_IT>:

void nRF24_WriteTXPayload_IT(uint8_t * data)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	NRF24.Status = NRF24_InUse;
 80025b4:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <nRF24_WriteTXPayload_IT+0x24>)
 80025b6:	2205      	movs	r2, #5
 80025b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	nRF24_WriteRegisters_IT(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80025bc:	2220      	movs	r2, #32
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	20a0      	movs	r0, #160	@ 0xa0
 80025c2:	f7ff fcbf 	bl	8001f44 <nRF24_WriteRegisters_IT>
	//nRF24_WaitTX();
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	000000cc 	.word	0x000000cc

080025d4 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80025da:	2201      	movs	r2, #1
 80025dc:	2140      	movs	r1, #64	@ 0x40
 80025de:	4810      	ldr	r0, [pc, #64]	@ (8002620 <nRF24_WaitTX+0x4c>)
 80025e0:	f00b fa3e 	bl	800da60 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f7ff fb91 	bl	8001d0c <nRF24_Delay>
	NRF24_CE_LOW;
 80025ea:	2200      	movs	r2, #0
 80025ec:	2140      	movs	r1, #64	@ 0x40
 80025ee:	480c      	ldr	r0, [pc, #48]	@ (8002620 <nRF24_WaitTX+0x4c>)
 80025f0:	f00b fa36 	bl	800da60 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 80025f4:	2001      	movs	r0, #1
 80025f6:	f7ff fb89 	bl	8001d0c <nRF24_Delay>
		status = nRF24_ReadStatus();
 80025fa:	f7ff fd8c 	bl	8002116 <nRF24_ReadStatus>
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	d104      	bne.n	8002616 <nRF24_WaitTX+0x42>
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0ee      	beq.n	80025f4 <nRF24_WaitTX+0x20>

}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	58020400 	.word	0x58020400

08002624 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800262c:	2220      	movs	r2, #32
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	2061      	movs	r0, #97	@ 0x61
 8002632:	f7ff fbef 	bl	8001e14 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002636:	2140      	movs	r1, #64	@ 0x40
 8002638:	2007      	movs	r0, #7
 800263a:	f7ff fc35 	bl	8001ea8 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800263e:	f7ff fd6a 	bl	8002116 <nRF24_ReadStatus>
 8002642:	4603      	mov	r3, r0
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 800264c:	2120      	movs	r1, #32
 800264e:	2007      	movs	r0, #7
 8002650:	f7ff fc2a 	bl	8001ea8 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <nRF24_ReadRXPaylaod_IT>:

void nRF24_ReadRXPaylaod_IT(uint8_t *data){
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	NRF24.Status = NRF24_InUse;
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <nRF24_ReadRXPaylaod_IT+0x24>)
 8002666:	2205      	movs	r2, #5
 8002668:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	nRF24_ReadRegisters_IT(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800266c:	2220      	movs	r2, #32
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	2061      	movs	r0, #97	@ 0x61
 8002672:	f7ff fbf3 	bl	8001e5c <nRF24_ReadRegisters_IT>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	000000cc 	.word	0x000000cc

08002684 <nRF24_ReadRXPaylaod_IT_End>:

void nRF24_ReadRXPaylaod_IT_End(void){
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	NRF24_CSN_HIGH;
 8002688:	2201      	movs	r2, #1
 800268a:	2180      	movs	r1, #128	@ 0x80
 800268c:	480b      	ldr	r0, [pc, #44]	@ (80026bc <nRF24_ReadRXPaylaod_IT_End+0x38>)
 800268e:	f00b f9e7 	bl	800da60 <HAL_GPIO_WritePin>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002692:	2140      	movs	r1, #64	@ 0x40
 8002694:	2007      	movs	r0, #7
 8002696:	f7ff fc07 	bl	8001ea8 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800269a:	f7ff fd3c 	bl	8002116 <nRF24_ReadStatus>
 800269e:	4603      	mov	r3, r0
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <nRF24_ReadRXPaylaod_IT_End+0x2c>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 80026a8:	2120      	movs	r1, #32
 80026aa:	2007      	movs	r0, #7
 80026ac:	f7ff fbfc 	bl	8001ea8 <nRF24_WriteRegister>
	}
	NRF24.Status = NRF24_Ready;
 80026b0:	4b03      	ldr	r3, [pc, #12]	@ (80026c0 <nRF24_ReadRXPaylaod_IT_End+0x3c>)
 80026b2:	2204      	movs	r2, #4
 80026b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	58020400 	.word	0x58020400
 80026c0:	000000cc 	.word	0x000000cc

080026c4 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 80026ce:	f000 f811 	bl	80026f4 <nRF24_ReadFifoStatus>
 80026d2:	4603      	mov	r3, r0
 80026d4:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	fa42 f303 	asr.w	r3, r2, r3
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80026f8:	2017      	movs	r0, #23
 80026fa:	f7ff fb67 	bl	8001dcc <nRF24_ReadRegister>
 80026fe:	4603      	mov	r3, r0
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}

08002704 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 800270c:	4a25      	ldr	r2, [pc, #148]	@ (80027a4 <nRF24_Init+0xa0>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8002712:	2200      	movs	r2, #0
 8002714:	2140      	movs	r1, #64	@ 0x40
 8002716:	4824      	ldr	r0, [pc, #144]	@ (80027a8 <nRF24_Init+0xa4>)
 8002718:	f00b f9a2 	bl	800da60 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 800271c:	2201      	movs	r2, #1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	4821      	ldr	r0, [pc, #132]	@ (80027a8 <nRF24_Init+0xa4>)
 8002722:	f00b f99d 	bl	800da60 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 8002726:	200a      	movs	r0, #10
 8002728:	f006 f85e 	bl	80087e8 <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 800272c:	2003      	movs	r0, #3
 800272e:	f7ff fcad 	bl	800208c <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 8002732:	2001      	movs	r0, #1
 8002734:	f7ff fcc9 	bl	80020ca <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002738:	2001      	movs	r0, #1
 800273a:	f7ff fd37 	bl	80021ac <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800273e:	2000      	movs	r0, #0
 8002740:	f7ff fd51 	bl	80021e6 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 8002744:	2100      	movs	r1, #0
 8002746:	2000      	movs	r0, #0
 8002748:	f7ff fd6a 	bl	8002220 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 800274c:	2100      	movs	r1, #0
 800274e:	201c      	movs	r0, #28
 8002750:	f7ff fbaa 	bl	8001ea8 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002754:	2120      	movs	r1, #32
 8002756:	2000      	movs	r0, #0
 8002758:	f7ff fd8e 	bl	8002278 <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 800275c:	200f      	movs	r0, #15
 800275e:	f7ff fd7a 	bl	8002256 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002762:	2101      	movs	r1, #1
 8002764:	2000      	movs	r0, #0
 8002766:	f7ff fda3 	bl	80022b0 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800276a:	2101      	movs	r1, #1
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff fdd4 	bl	800231a <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002772:	2003      	movs	r0, #3
 8002774:	f7ff fe06 	bl	8002384 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 8002778:	2001      	movs	r0, #1
 800277a:	f006 f835 	bl	80087e8 <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 800277e:	2001      	movs	r0, #1
 8002780:	f7ff feaf 	bl	80024e2 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff fec9 	bl	800251c <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800278a:	2000      	movs	r0, #0
 800278c:	f7ff fee3 	bl	8002556 <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 8002790:	2001      	movs	r0, #1
 8002792:	f006 f829 	bl	80087e8 <HAL_Delay>

	nRF24_ClearInterrupts();
 8002796:	f7ff fe91 	bl	80024bc <nRF24_ClearInterrupts>


}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	240000a4 	.word	0x240000a4
 80027a8:	58020400 	.word	0x58020400

080027ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027b0:	f3bf 8f4f 	dsb	sy
}
 80027b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80027b6:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <__NVIC_SystemReset+0x24>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80027be:	4904      	ldr	r1, [pc, #16]	@ (80027d0 <__NVIC_SystemReset+0x24>)
 80027c0:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <__NVIC_SystemReset+0x28>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80027c6:	f3bf 8f4f 	dsb	sy
}
 80027ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <__NVIC_SystemReset+0x20>
 80027d0:	e000ed00 	.word	0xe000ed00
 80027d4:	05fa0004 	.word	0x05fa0004

080027d8 <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	75fb      	strb	r3, [r7, #23]
 80027e2:	2300      	movs	r3, #0
 80027e4:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 80027e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002864 <interpretcommand+0x8c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 80027ec:	2300      	movs	r3, #0
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	e02e      	b.n	8002850 <interpretcommand+0x78>

		if(words[j] == ' '){
 80027f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002868 <interpretcommand+0x90>)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d102      	bne.n	8002804 <interpretcommand+0x2c>
			vcount++;
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	3301      	adds	r3, #1
 8002802:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d108      	bne.n	800281c <interpretcommand+0x44>
			command[j] = words[j];
 800280a:	4a17      	ldr	r2, [pc, #92]	@ (8002868 <interpretcommand+0x90>)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	7819      	ldrb	r1, [r3, #0]
 8002812:	4a16      	ldr	r2, [pc, #88]	@ (800286c <interpretcommand+0x94>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	460a      	mov	r2, r1
 800281a:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d113      	bne.n	800284a <interpretcommand+0x72>
			value1[J1] = words[j];
 8002822:	7dbb      	ldrb	r3, [r7, #22]
 8002824:	4910      	ldr	r1, [pc, #64]	@ (8002868 <interpretcommand+0x90>)
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	440a      	add	r2, r1
 800282a:	7812      	ldrb	r2, [r2, #0]
 800282c:	3318      	adds	r3, #24
 800282e:	443b      	add	r3, r7
 8002830:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 8002834:	7dba      	ldrb	r2, [r7, #22]
 8002836:	7dbb      	ldrb	r3, [r7, #22]
 8002838:	3218      	adds	r2, #24
 800283a:	443a      	add	r2, r7
 800283c:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002840:	4a0b      	ldr	r2, [pc, #44]	@ (8002870 <interpretcommand+0x98>)
 8002842:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002844:	7dbb      	ldrb	r3, [r7, #22]
 8002846:	3301      	adds	r3, #1
 8002848:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	3301      	adds	r3, #1
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b4f      	cmp	r3, #79	@ 0x4f
 8002854:	ddcd      	ble.n	80027f2 <interpretcommand+0x1a>
		}
	}
}
 8002856:	bf00      	nop
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	000041da 	.word	0x000041da
 8002868:	000041d0 	.word	0x000041d0
 800286c:	000041cc 	.word	0x000041cc
 8002870:	000041bc 	.word	0x000041bc

08002874 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b50      	cmp	r3, #80	@ 0x50
 8002884:	d14c      	bne.n	8002920 <executecommand+0xac>
	{
		MYDRON.PID_Pitch.Angle_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002886:	4bd5      	ldr	r3, [pc, #852]	@ (8002bdc <executecommand+0x368>)
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	ee07 3a90 	vmov	s15, r3
 800288e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002892:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002be0 <executecommand+0x36c>
 8002896:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800289a:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002be4 <executecommand+0x370>
 800289e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028a2:	4bce      	ldr	r3, [pc, #824]	@ (8002bdc <executecommand+0x368>)
 80028a4:	789b      	ldrb	r3, [r3, #2]
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ae:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002be0 <executecommand+0x36c>
 80028b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028b6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80028ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c2:	4bc6      	ldr	r3, [pc, #792]	@ (8002bdc <executecommand+0x368>)
 80028c4:	78db      	ldrb	r3, [r3, #3]
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ce:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002be0 <executecommand+0x36c>
 80028d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028da:	4bc0      	ldr	r3, [pc, #768]	@ (8002bdc <executecommand+0x368>)
 80028dc:	791b      	ldrb	r3, [r3, #4]
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e6:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002be0 <executecommand+0x36c>
 80028ea:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028ee:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80028f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028fa:	4bb8      	ldr	r3, [pc, #736]	@ (8002bdc <executecommand+0x368>)
 80028fc:	795b      	ldrb	r3, [r3, #5]
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002906:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002be0 <executecommand+0x36c>
 800290a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800290e:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002be4 <executecommand+0x370>
 8002912:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291a:	4bb3      	ldr	r3, [pc, #716]	@ (8002be8 <executecommand+0x374>)
 800291c:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
	}

	if(command[0] == 'I')
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b49      	cmp	r3, #73	@ 0x49
 8002926:	d14f      	bne.n	80029c8 <executecommand+0x154>
	{
		MYDRON.PID_Pitch.Angle_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002928:	4bac      	ldr	r3, [pc, #688]	@ (8002bdc <executecommand+0x368>)
 800292a:	785b      	ldrb	r3, [r3, #1]
 800292c:	ee07 3a90 	vmov	s15, r3
 8002930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002934:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002be0 <executecommand+0x36c>
 8002938:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800293c:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002be4 <executecommand+0x370>
 8002940:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002944:	4ba5      	ldr	r3, [pc, #660]	@ (8002bdc <executecommand+0x368>)
 8002946:	789b      	ldrb	r3, [r3, #2]
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002950:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002be0 <executecommand+0x36c>
 8002954:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002958:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800295c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002964:	4b9d      	ldr	r3, [pc, #628]	@ (8002bdc <executecommand+0x368>)
 8002966:	78db      	ldrb	r3, [r3, #3]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002970:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002be0 <executecommand+0x36c>
 8002974:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800297c:	4b97      	ldr	r3, [pc, #604]	@ (8002bdc <executecommand+0x368>)
 800297e:	791b      	ldrb	r3, [r3, #4]
 8002980:	ee07 3a90 	vmov	s15, r3
 8002984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002988:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002be0 <executecommand+0x36c>
 800298c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002990:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002994:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002998:	ee37 7a27 	vadd.f32	s14, s14, s15
 800299c:	4b8f      	ldr	r3, [pc, #572]	@ (8002bdc <executecommand+0x368>)
 800299e:	795b      	ldrb	r3, [r3, #5]
 80029a0:	ee07 3a90 	vmov	s15, r3
 80029a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a8:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002be0 <executecommand+0x36c>
 80029ac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029b0:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002be4 <executecommand+0x370>
 80029b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029bc:	4b8a      	ldr	r3, [pc, #552]	@ (8002be8 <executecommand+0x374>)
 80029be:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
		MYDRON.Pitch.Angle_Error_Sum = 0;
 80029c2:	4b89      	ldr	r3, [pc, #548]	@ (8002be8 <executecommand+0x374>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	if(command[0] == 'D')
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b44      	cmp	r3, #68	@ 0x44
 80029ce:	d14c      	bne.n	8002a6a <executecommand+0x1f6>
	{
		MYDRON.PID_Pitch.Angle_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80029d0:	4b82      	ldr	r3, [pc, #520]	@ (8002bdc <executecommand+0x368>)
 80029d2:	785b      	ldrb	r3, [r3, #1]
 80029d4:	ee07 3a90 	vmov	s15, r3
 80029d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029dc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002be0 <executecommand+0x36c>
 80029e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029e4:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8002bec <executecommand+0x378>
 80029e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029ec:	4b7b      	ldr	r3, [pc, #492]	@ (8002bdc <executecommand+0x368>)
 80029ee:	789b      	ldrb	r3, [r3, #2]
 80029f0:	ee07 3a90 	vmov	s15, r3
 80029f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f8:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002be0 <executecommand+0x36c>
 80029fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a00:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002be4 <executecommand+0x370>
 8002a04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a0c:	4b73      	ldr	r3, [pc, #460]	@ (8002bdc <executecommand+0x368>)
 8002a0e:	78db      	ldrb	r3, [r3, #3]
 8002a10:	ee07 3a90 	vmov	s15, r3
 8002a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a18:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002be0 <executecommand+0x36c>
 8002a1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a20:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2c:	4b6b      	ldr	r3, [pc, #428]	@ (8002bdc <executecommand+0x368>)
 8002a2e:	791b      	ldrb	r3, [r3, #4]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a38:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002be0 <executecommand+0x36c>
 8002a3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a44:	4b65      	ldr	r3, [pc, #404]	@ (8002bdc <executecommand+0x368>)
 8002a46:	795b      	ldrb	r3, [r3, #5]
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a50:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002be0 <executecommand+0x36c>
 8002a54:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a58:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a5c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a64:	4b60      	ldr	r3, [pc, #384]	@ (8002be8 <executecommand+0x374>)
 8002a66:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
	}
	if(command[0] == 'p')
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b70      	cmp	r3, #112	@ 0x70
 8002a70:	d14c      	bne.n	8002b0c <executecommand+0x298>
	{
		MYDRON.PID_Pitch.Angular_Rate_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002a72:	4b5a      	ldr	r3, [pc, #360]	@ (8002bdc <executecommand+0x368>)
 8002a74:	785b      	ldrb	r3, [r3, #1]
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7e:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002be0 <executecommand+0x36c>
 8002a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a86:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002be4 <executecommand+0x370>
 8002a8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a8e:	4b53      	ldr	r3, [pc, #332]	@ (8002bdc <executecommand+0x368>)
 8002a90:	789b      	ldrb	r3, [r3, #2]
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9a:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002be0 <executecommand+0x36c>
 8002a9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002aa2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002aa6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002aaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aae:	4b4b      	ldr	r3, [pc, #300]	@ (8002bdc <executecommand+0x368>)
 8002ab0:	78db      	ldrb	r3, [r3, #3]
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aba:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002be0 <executecommand+0x36c>
 8002abe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ac2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac6:	4b45      	ldr	r3, [pc, #276]	@ (8002bdc <executecommand+0x368>)
 8002ac8:	791b      	ldrb	r3, [r3, #4]
 8002aca:	ee07 3a90 	vmov	s15, r3
 8002ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002be0 <executecommand+0x36c>
 8002ad6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ada:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002ade:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bdc <executecommand+0x368>)
 8002ae8:	795b      	ldrb	r3, [r3, #5]
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002be0 <executecommand+0x36c>
 8002af6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002afa:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002be4 <executecommand+0x370>
 8002afe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	4b38      	ldr	r3, [pc, #224]	@ (8002be8 <executecommand+0x374>)
 8002b08:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
	}

	if(command[0] == 'i')
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b69      	cmp	r3, #105	@ 0x69
 8002b12:	d14f      	bne.n	8002bb4 <executecommand+0x340>
	{
		MYDRON.PID_Pitch.Angular_Rate_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002b14:	4b31      	ldr	r3, [pc, #196]	@ (8002bdc <executecommand+0x368>)
 8002b16:	785b      	ldrb	r3, [r3, #1]
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b20:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002be0 <executecommand+0x36c>
 8002b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b28:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002be4 <executecommand+0x370>
 8002b2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b30:	4b2a      	ldr	r3, [pc, #168]	@ (8002bdc <executecommand+0x368>)
 8002b32:	789b      	ldrb	r3, [r3, #2]
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002be0 <executecommand+0x36c>
 8002b40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b44:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b50:	4b22      	ldr	r3, [pc, #136]	@ (8002bdc <executecommand+0x368>)
 8002b52:	78db      	ldrb	r3, [r3, #3]
 8002b54:	ee07 3a90 	vmov	s15, r3
 8002b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002be0 <executecommand+0x36c>
 8002b60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b68:	4b1c      	ldr	r3, [pc, #112]	@ (8002bdc <executecommand+0x368>)
 8002b6a:	791b      	ldrb	r3, [r3, #4]
 8002b6c:	ee07 3a90 	vmov	s15, r3
 8002b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b74:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002be0 <executecommand+0x36c>
 8002b78:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b7c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002b80:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b88:	4b14      	ldr	r3, [pc, #80]	@ (8002bdc <executecommand+0x368>)
 8002b8a:	795b      	ldrb	r3, [r3, #5]
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b94:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002be0 <executecommand+0x36c>
 8002b98:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b9c:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002be4 <executecommand+0x370>
 8002ba0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8002be8 <executecommand+0x374>)
 8002baa:	edc3 7a36 	vstr	s15, [r3, #216]	@ 0xd8
		MYDRON.Pitch.Angular_Rate_Error_Sum = 0;
 8002bae:	4b0e      	ldr	r3, [pc, #56]	@ (8002be8 <executecommand+0x374>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	if(command[0] == 'd')
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b64      	cmp	r3, #100	@ 0x64
 8002bba:	d158      	bne.n	8002c6e <executecommand+0x3fa>
	{
		MYDRON.PID_Pitch.Angular_Rate_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002bbc:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <executecommand+0x368>)
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	ee07 3a90 	vmov	s15, r3
 8002bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002be0 <executecommand+0x36c>
 8002bcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bd0:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002bec <executecommand+0x378>
 8002bd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bd8:	e00a      	b.n	8002bf0 <executecommand+0x37c>
 8002bda:	bf00      	nop
 8002bdc:	000041bc 	.word	0x000041bc
 8002be0:	42400000 	.word	0x42400000
 8002be4:	42c80000 	.word	0x42c80000
 8002be8:	00000158 	.word	0x00000158
 8002bec:	447a0000 	.word	0x447a0000
 8002bf0:	4bd3      	ldr	r3, [pc, #844]	@ (8002f40 <executecommand+0x6cc>)
 8002bf2:	789b      	ldrb	r3, [r3, #2]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfc:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002f44 <executecommand+0x6d0>
 8002c00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c04:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002f48 <executecommand+0x6d4>
 8002c08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c10:	4bcb      	ldr	r3, [pc, #812]	@ (8002f40 <executecommand+0x6cc>)
 8002c12:	78db      	ldrb	r3, [r3, #3]
 8002c14:	ee07 3a90 	vmov	s15, r3
 8002c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1c:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002f44 <executecommand+0x6d0>
 8002c20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c24:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c30:	4bc3      	ldr	r3, [pc, #780]	@ (8002f40 <executecommand+0x6cc>)
 8002c32:	791b      	ldrb	r3, [r3, #4]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3c:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002f44 <executecommand+0x6d0>
 8002c40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c48:	4bbd      	ldr	r3, [pc, #756]	@ (8002f40 <executecommand+0x6cc>)
 8002c4a:	795b      	ldrb	r3, [r3, #5]
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c54:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002f44 <executecommand+0x6d0>
 8002c58:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c5c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c60:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c68:	4bb8      	ldr	r3, [pc, #736]	@ (8002f4c <executecommand+0x6d8>)
 8002c6a:	edc3 7a37 	vstr	s15, [r3, #220]	@ 0xdc
	}
	if(command[0] == 'F')
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b46      	cmp	r3, #70	@ 0x46
 8002c74:	d150      	bne.n	8002d18 <executecommand+0x4a4>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002c76:	4bb2      	ldr	r3, [pc, #712]	@ (8002f40 <executecommand+0x6cc>)
 8002c78:	785b      	ldrb	r3, [r3, #1]
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c82:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002f44 <executecommand+0x6d0>
 8002c86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c8a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002f50 <executecommand+0x6dc>
 8002c8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c92:	4bab      	ldr	r3, [pc, #684]	@ (8002f40 <executecommand+0x6cc>)
 8002c94:	789b      	ldrb	r3, [r3, #2]
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9e:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002f44 <executecommand+0x6d0>
 8002ca2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ca6:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002f48 <executecommand+0x6d4>
 8002caa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb2:	4ba3      	ldr	r3, [pc, #652]	@ (8002f40 <executecommand+0x6cc>)
 8002cb4:	78db      	ldrb	r3, [r3, #3]
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cbe:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002f44 <executecommand+0x6d0>
 8002cc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cc6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd2:	4b9b      	ldr	r3, [pc, #620]	@ (8002f40 <executecommand+0x6cc>)
 8002cd4:	791b      	ldrb	r3, [r3, #4]
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cde:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002f44 <executecommand+0x6d0>
 8002ce2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cea:	4b95      	ldr	r3, [pc, #596]	@ (8002f40 <executecommand+0x6cc>)
 8002cec:	795b      	ldrb	r3, [r3, #5]
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf6:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002f44 <executecommand+0x6d0>
 8002cfa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002cfe:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d02:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d0e:	ee17 3a90 	vmov	r3, s15
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	4b8f      	ldr	r3, [pc, #572]	@ (8002f54 <executecommand+0x6e0>)
 8002d16:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b66      	cmp	r3, #102	@ 0x66
 8002d1e:	d150      	bne.n	8002dc2 <executecommand+0x54e>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002d20:	4b87      	ldr	r3, [pc, #540]	@ (8002f40 <executecommand+0x6cc>)
 8002d22:	785b      	ldrb	r3, [r3, #1]
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2c:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002f44 <executecommand+0x6d0>
 8002d30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d34:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002f50 <executecommand+0x6dc>
 8002d38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d3c:	4b80      	ldr	r3, [pc, #512]	@ (8002f40 <executecommand+0x6cc>)
 8002d3e:	789b      	ldrb	r3, [r3, #2]
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d48:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002f44 <executecommand+0x6d0>
 8002d4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d50:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002f48 <executecommand+0x6d4>
 8002d54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d5c:	4b78      	ldr	r3, [pc, #480]	@ (8002f40 <executecommand+0x6cc>)
 8002d5e:	78db      	ldrb	r3, [r3, #3]
 8002d60:	ee07 3a90 	vmov	s15, r3
 8002d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d68:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002f44 <executecommand+0x6d0>
 8002d6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d70:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d7c:	4b70      	ldr	r3, [pc, #448]	@ (8002f40 <executecommand+0x6cc>)
 8002d7e:	791b      	ldrb	r3, [r3, #4]
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d88:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002f44 <executecommand+0x6d0>
 8002d8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d94:	4b6a      	ldr	r3, [pc, #424]	@ (8002f40 <executecommand+0x6cc>)
 8002d96:	795b      	ldrb	r3, [r3, #5]
 8002d98:	ee07 3a90 	vmov	s15, r3
 8002d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da0:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002f44 <executecommand+0x6d0>
 8002da4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002da8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002dac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002db8:	ee17 3a90 	vmov	r3, s15
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	4b66      	ldr	r3, [pc, #408]	@ (8002f58 <executecommand+0x6e4>)
 8002dc0:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b61      	cmp	r3, #97	@ 0x61
 8002dc8:	d14c      	bne.n	8002e64 <executecommand+0x5f0>
		{
			MYDRON.PID_Rool.Angle_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002dca:	4b5d      	ldr	r3, [pc, #372]	@ (8002f40 <executecommand+0x6cc>)
 8002dcc:	785b      	ldrb	r3, [r3, #1]
 8002dce:	ee07 3a90 	vmov	s15, r3
 8002dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd6:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002f44 <executecommand+0x6d0>
 8002dda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dde:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002f48 <executecommand+0x6d4>
 8002de2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002de6:	4b56      	ldr	r3, [pc, #344]	@ (8002f40 <executecommand+0x6cc>)
 8002de8:	789b      	ldrb	r3, [r3, #2]
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df2:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002f44 <executecommand+0x6d0>
 8002df6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002dfa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002dfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e06:	4b4e      	ldr	r3, [pc, #312]	@ (8002f40 <executecommand+0x6cc>)
 8002e08:	78db      	ldrb	r3, [r3, #3]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e12:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002f44 <executecommand+0x6d0>
 8002e16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e1e:	4b48      	ldr	r3, [pc, #288]	@ (8002f40 <executecommand+0x6cc>)
 8002e20:	791b      	ldrb	r3, [r3, #4]
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2a:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002f44 <executecommand+0x6d0>
 8002e2e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e32:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002e36:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e3e:	4b40      	ldr	r3, [pc, #256]	@ (8002f40 <executecommand+0x6cc>)
 8002e40:	795b      	ldrb	r3, [r3, #5]
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4a:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002f44 <executecommand+0x6d0>
 8002e4e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e52:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002f48 <executecommand+0x6d4>
 8002e56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f4c <executecommand+0x6d8>)
 8002e60:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
		}

		if(command[0] == 'b')
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b62      	cmp	r3, #98	@ 0x62
 8002e6a:	d14f      	bne.n	8002f0c <executecommand+0x698>
		{
			MYDRON.PID_Rool.Angle_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002e6c:	4b34      	ldr	r3, [pc, #208]	@ (8002f40 <executecommand+0x6cc>)
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	ee07 3a90 	vmov	s15, r3
 8002e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e78:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002f44 <executecommand+0x6d0>
 8002e7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e80:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002f48 <executecommand+0x6d4>
 8002e84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e88:	4b2d      	ldr	r3, [pc, #180]	@ (8002f40 <executecommand+0x6cc>)
 8002e8a:	789b      	ldrb	r3, [r3, #2]
 8002e8c:	ee07 3a90 	vmov	s15, r3
 8002e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e94:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002f44 <executecommand+0x6d0>
 8002e98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e9c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ea0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea8:	4b25      	ldr	r3, [pc, #148]	@ (8002f40 <executecommand+0x6cc>)
 8002eaa:	78db      	ldrb	r3, [r3, #3]
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002f44 <executecommand+0x6d0>
 8002eb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f40 <executecommand+0x6cc>)
 8002ec2:	791b      	ldrb	r3, [r3, #4]
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ecc:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002f44 <executecommand+0x6d0>
 8002ed0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ed4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002ed8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002edc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee0:	4b17      	ldr	r3, [pc, #92]	@ (8002f40 <executecommand+0x6cc>)
 8002ee2:	795b      	ldrb	r3, [r3, #5]
 8002ee4:	ee07 3a90 	vmov	s15, r3
 8002ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eec:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002f44 <executecommand+0x6d0>
 8002ef0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ef4:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002f48 <executecommand+0x6d4>
 8002ef8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <executecommand+0x6d8>)
 8002f02:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
			MYDRON.Pitch.Angle_Error_Sum = 0;
 8002f06:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <executecommand+0x6d8>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		if(command[0] == 'c')
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b63      	cmp	r3, #99	@ 0x63
 8002f12:	d160      	bne.n	8002fd6 <executecommand+0x762>
		{
			MYDRON.PID_Rool.Angle_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002f14:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <executecommand+0x6cc>)
 8002f16:	785b      	ldrb	r3, [r3, #1]
 8002f18:	ee07 3a90 	vmov	s15, r3
 8002f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f20:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002f44 <executecommand+0x6d0>
 8002f24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f28:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002f50 <executecommand+0x6dc>
 8002f2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f30:	4b03      	ldr	r3, [pc, #12]	@ (8002f40 <executecommand+0x6cc>)
 8002f32:	789b      	ldrb	r3, [r3, #2]
 8002f34:	ee07 3a90 	vmov	s15, r3
 8002f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3c:	e012      	b.n	8002f64 <executecommand+0x6f0>
 8002f3e:	bf00      	nop
 8002f40:	000041bc 	.word	0x000041bc
 8002f44:	42400000 	.word	0x42400000
 8002f48:	42c80000 	.word	0x42c80000
 8002f4c:	00000158 	.word	0x00000158
 8002f50:	447a0000 	.word	0x447a0000
 8002f54:	000041ae 	.word	0x000041ae
 8002f58:	000041b0 	.word	0x000041b0
 8002f5c:	42400000 	.word	0x42400000
 8002f60:	42c80000 	.word	0x42c80000
 8002f64:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002f5c <executecommand+0x6e8>
 8002f68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f6c:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002f60 <executecommand+0x6ec>
 8002f70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f78:	4bd5      	ldr	r3, [pc, #852]	@ (80032d0 <executecommand+0xa5c>)
 8002f7a:	78db      	ldrb	r3, [r3, #3]
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f84:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 80032d4 <executecommand+0xa60>
 8002f88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f8c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f98:	4bcd      	ldr	r3, [pc, #820]	@ (80032d0 <executecommand+0xa5c>)
 8002f9a:	791b      	ldrb	r3, [r3, #4]
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa4:	eddf 6acb 	vldr	s13, [pc, #812]	@ 80032d4 <executecommand+0xa60>
 8002fa8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb0:	4bc7      	ldr	r3, [pc, #796]	@ (80032d0 <executecommand+0xa5c>)
 8002fb2:	795b      	ldrb	r3, [r3, #5]
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fbc:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 80032d4 <executecommand+0xa60>
 8002fc0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fc4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002fc8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd0:	4bc1      	ldr	r3, [pc, #772]	@ (80032d8 <executecommand+0xa64>)
 8002fd2:	edc3 7a3f 	vstr	s15, [r3, #252]	@ 0xfc
		}
		if(command[0] == 'e')
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b65      	cmp	r3, #101	@ 0x65
 8002fdc:	d14c      	bne.n	8003078 <executecommand+0x804>
		{
			MYDRON.PID_Rool.Angular_Rate_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002fde:	4bbc      	ldr	r3, [pc, #752]	@ (80032d0 <executecommand+0xa5c>)
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fea:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80032d4 <executecommand+0xa60>
 8002fee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ff2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80032dc <executecommand+0xa68>
 8002ff6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ffa:	4bb5      	ldr	r3, [pc, #724]	@ (80032d0 <executecommand+0xa5c>)
 8002ffc:	789b      	ldrb	r3, [r3, #2]
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003006:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 80032d4 <executecommand+0xa60>
 800300a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800300e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003012:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003016:	ee37 7a27 	vadd.f32	s14, s14, s15
 800301a:	4bad      	ldr	r3, [pc, #692]	@ (80032d0 <executecommand+0xa5c>)
 800301c:	78db      	ldrb	r3, [r3, #3]
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	eddf 6aab 	vldr	s13, [pc, #684]	@ 80032d4 <executecommand+0xa60>
 800302a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800302e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003032:	4ba7      	ldr	r3, [pc, #668]	@ (80032d0 <executecommand+0xa5c>)
 8003034:	791b      	ldrb	r3, [r3, #4]
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303e:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80032d4 <executecommand+0xa60>
 8003042:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003046:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800304a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800304e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003052:	4b9f      	ldr	r3, [pc, #636]	@ (80032d0 <executecommand+0xa5c>)
 8003054:	795b      	ldrb	r3, [r3, #5]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305e:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80032d4 <executecommand+0xa60>
 8003062:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003066:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 80032dc <executecommand+0xa68>
 800306a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800306e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003072:	4b99      	ldr	r3, [pc, #612]	@ (80032d8 <executecommand+0xa64>)
 8003074:	edc3 7a42 	vstr	s15, [r3, #264]	@ 0x108
		}

		if(command[0] == 'g')
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b67      	cmp	r3, #103	@ 0x67
 800307e:	d14f      	bne.n	8003120 <executecommand+0x8ac>
		{
			MYDRON.PID_Rool.Angular_Rate_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003080:	4b93      	ldr	r3, [pc, #588]	@ (80032d0 <executecommand+0xa5c>)
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80032d4 <executecommand+0xa60>
 8003090:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003094:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80032dc <executecommand+0xa68>
 8003098:	ee27 7a87 	vmul.f32	s14, s15, s14
 800309c:	4b8c      	ldr	r3, [pc, #560]	@ (80032d0 <executecommand+0xa5c>)
 800309e:	789b      	ldrb	r3, [r3, #2]
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a8:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 80032d4 <executecommand+0xa60>
 80030ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030b0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030bc:	4b84      	ldr	r3, [pc, #528]	@ (80032d0 <executecommand+0xa5c>)
 80030be:	78db      	ldrb	r3, [r3, #3]
 80030c0:	ee07 3a90 	vmov	s15, r3
 80030c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c8:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80032d4 <executecommand+0xa60>
 80030cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d4:	4b7e      	ldr	r3, [pc, #504]	@ (80032d0 <executecommand+0xa5c>)
 80030d6:	791b      	ldrb	r3, [r3, #4]
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e0:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80032d4 <executecommand+0xa60>
 80030e4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030e8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80030ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f4:	4b76      	ldr	r3, [pc, #472]	@ (80032d0 <executecommand+0xa5c>)
 80030f6:	795b      	ldrb	r3, [r3, #5]
 80030f8:	ee07 3a90 	vmov	s15, r3
 80030fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003100:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80032d4 <executecommand+0xa60>
 8003104:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003108:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 80032dc <executecommand+0xa68>
 800310c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003114:	4b70      	ldr	r3, [pc, #448]	@ (80032d8 <executecommand+0xa64>)
 8003116:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
			MYDRON.Rool.Angular_Rate_Error_Sum = 0;
 800311a:	4b6f      	ldr	r3, [pc, #444]	@ (80032d8 <executecommand+0xa64>)
 800311c:	2200      	movs	r2, #0
 800311e:	659a      	str	r2, [r3, #88]	@ 0x58
		}

		if(command[0] == 'h')
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b68      	cmp	r3, #104	@ 0x68
 8003126:	d14c      	bne.n	80031c2 <executecommand+0x94e>
		{
			MYDRON.PID_Rool.Angular_Rate_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003128:	4b69      	ldr	r3, [pc, #420]	@ (80032d0 <executecommand+0xa5c>)
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003134:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80032d4 <executecommand+0xa60>
 8003138:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800313c:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80032e0 <executecommand+0xa6c>
 8003140:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003144:	4b62      	ldr	r3, [pc, #392]	@ (80032d0 <executecommand+0xa5c>)
 8003146:	789b      	ldrb	r3, [r3, #2]
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003150:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80032d4 <executecommand+0xa60>
 8003154:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003158:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80032dc <executecommand+0xa68>
 800315c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003160:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003164:	4b5a      	ldr	r3, [pc, #360]	@ (80032d0 <executecommand+0xa5c>)
 8003166:	78db      	ldrb	r3, [r3, #3]
 8003168:	ee07 3a90 	vmov	s15, r3
 800316c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003170:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032d4 <executecommand+0xa60>
 8003174:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003178:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800317c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003180:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003184:	4b52      	ldr	r3, [pc, #328]	@ (80032d0 <executecommand+0xa5c>)
 8003186:	791b      	ldrb	r3, [r3, #4]
 8003188:	ee07 3a90 	vmov	s15, r3
 800318c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003190:	eddf 6a50 	vldr	s13, [pc, #320]	@ 80032d4 <executecommand+0xa60>
 8003194:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003198:	ee37 7a27 	vadd.f32	s14, s14, s15
 800319c:	4b4c      	ldr	r3, [pc, #304]	@ (80032d0 <executecommand+0xa5c>)
 800319e:	795b      	ldrb	r3, [r3, #5]
 80031a0:	ee07 3a90 	vmov	s15, r3
 80031a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a8:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80032d4 <executecommand+0xa60>
 80031ac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031b0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80031b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031bc:	4b46      	ldr	r3, [pc, #280]	@ (80032d8 <executecommand+0xa64>)
 80031be:	edc3 7a44 	vstr	s15, [r3, #272]	@ 0x110





		if(command[0] == 'j')
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b6a      	cmp	r3, #106	@ 0x6a
 80031c8:	d14c      	bne.n	8003264 <executecommand+0x9f0>
			{
				MYDRON.PID_Yaw.Angle_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80031ca:	4b41      	ldr	r3, [pc, #260]	@ (80032d0 <executecommand+0xa5c>)
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80032d4 <executecommand+0xa60>
 80031da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031de:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80032dc <executecommand+0xa68>
 80031e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031e6:	4b3a      	ldr	r3, [pc, #232]	@ (80032d0 <executecommand+0xa5c>)
 80031e8:	789b      	ldrb	r3, [r3, #2]
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032d4 <executecommand+0xa60>
 80031f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031fa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80031fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003206:	4b32      	ldr	r3, [pc, #200]	@ (80032d0 <executecommand+0xa5c>)
 8003208:	78db      	ldrb	r3, [r3, #3]
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003212:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80032d4 <executecommand+0xa60>
 8003216:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800321a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800321e:	4b2c      	ldr	r3, [pc, #176]	@ (80032d0 <executecommand+0xa5c>)
 8003220:	791b      	ldrb	r3, [r3, #4]
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80032d4 <executecommand+0xa60>
 800322e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003232:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003236:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800323a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800323e:	4b24      	ldr	r3, [pc, #144]	@ (80032d0 <executecommand+0xa5c>)
 8003240:	795b      	ldrb	r3, [r3, #5]
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80032d4 <executecommand+0xa60>
 800324e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003252:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80032dc <executecommand+0xa68>
 8003256:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800325a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325e:	4b1e      	ldr	r3, [pc, #120]	@ (80032d8 <executecommand+0xa64>)
 8003260:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
			}

			if(command[0] == 'k')
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b6b      	cmp	r3, #107	@ 0x6b
 800326a:	d15e      	bne.n	800332a <executecommand+0xab6>
			{
				MYDRON.PID_Yaw.Angle_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800326c:	4b18      	ldr	r3, [pc, #96]	@ (80032d0 <executecommand+0xa5c>)
 800326e:	785b      	ldrb	r3, [r3, #1]
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003278:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80032d4 <executecommand+0xa60>
 800327c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003280:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80032dc <executecommand+0xa68>
 8003284:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003288:	4b11      	ldr	r3, [pc, #68]	@ (80032d0 <executecommand+0xa5c>)
 800328a:	789b      	ldrb	r3, [r3, #2]
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003294:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80032d4 <executecommand+0xa60>
 8003298:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800329c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80032a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a8:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <executecommand+0xa5c>)
 80032aa:	78db      	ldrb	r3, [r3, #3]
 80032ac:	ee07 3a90 	vmov	s15, r3
 80032b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80032d4 <executecommand+0xa60>
 80032b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c0:	4b03      	ldr	r3, [pc, #12]	@ (80032d0 <executecommand+0xa5c>)
 80032c2:	791b      	ldrb	r3, [r3, #4]
 80032c4:	ee07 3a90 	vmov	s15, r3
 80032c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032cc:	e00c      	b.n	80032e8 <executecommand+0xa74>
 80032ce:	bf00      	nop
 80032d0:	000041bc 	.word	0x000041bc
 80032d4:	42400000 	.word	0x42400000
 80032d8:	00000158 	.word	0x00000158
 80032dc:	42c80000 	.word	0x42c80000
 80032e0:	447a0000 	.word	0x447a0000
 80032e4:	42400000 	.word	0x42400000
 80032e8:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 80032e4 <executecommand+0xa70>
 80032ec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032f0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032f4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032fc:	4bbb      	ldr	r3, [pc, #748]	@ (80035ec <executecommand+0xd78>)
 80032fe:	795b      	ldrb	r3, [r3, #5]
 8003300:	ee07 3a90 	vmov	s15, r3
 8003304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003308:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 80035f0 <executecommand+0xd7c>
 800330c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003310:	ed9f 6ab8 	vldr	s12, [pc, #736]	@ 80035f4 <executecommand+0xd80>
 8003314:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331c:	4bb6      	ldr	r3, [pc, #728]	@ (80035f8 <executecommand+0xd84>)
 800331e:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
				MYDRON.Yaw.Angle_Error_Sum = 0;
 8003322:	4bb5      	ldr	r3, [pc, #724]	@ (80035f8 <executecommand+0xd84>)
 8003324:	2200      	movs	r2, #0
 8003326:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			}

			if(command[0] == 'l')
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b6c      	cmp	r3, #108	@ 0x6c
 8003330:	d14c      	bne.n	80033cc <executecommand+0xb58>
			{
				MYDRON.PID_Yaw.Angle_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003332:	4bae      	ldr	r3, [pc, #696]	@ (80035ec <executecommand+0xd78>)
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333e:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 80035f0 <executecommand+0xd7c>
 8003342:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003346:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80035fc <executecommand+0xd88>
 800334a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800334e:	4ba7      	ldr	r3, [pc, #668]	@ (80035ec <executecommand+0xd78>)
 8003350:	789b      	ldrb	r3, [r3, #2]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80035f0 <executecommand+0xd7c>
 800335e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003362:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80035f4 <executecommand+0xd80>
 8003366:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800336a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800336e:	4b9f      	ldr	r3, [pc, #636]	@ (80035ec <executecommand+0xd78>)
 8003370:	78db      	ldrb	r3, [r3, #3]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80035f0 <executecommand+0xd7c>
 800337e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003382:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003386:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800338a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800338e:	4b97      	ldr	r3, [pc, #604]	@ (80035ec <executecommand+0xd78>)
 8003390:	791b      	ldrb	r3, [r3, #4]
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339a:	eddf 6a95 	vldr	s13, [pc, #596]	@ 80035f0 <executecommand+0xd7c>
 800339e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a6:	4b91      	ldr	r3, [pc, #580]	@ (80035ec <executecommand+0xd78>)
 80033a8:	795b      	ldrb	r3, [r3, #5]
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b2:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 80035f0 <executecommand+0xd7c>
 80033b6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033ba:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c6:	4b8c      	ldr	r3, [pc, #560]	@ (80035f8 <executecommand+0xd84>)
 80033c8:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130
			}
			if(command[0] == 'm')
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b6d      	cmp	r3, #109	@ 0x6d
 80033d2:	d14c      	bne.n	800346e <executecommand+0xbfa>
			{
				MYDRON.PID_Yaw.Angular_Rate_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80033d4:	4b85      	ldr	r3, [pc, #532]	@ (80035ec <executecommand+0xd78>)
 80033d6:	785b      	ldrb	r3, [r3, #1]
 80033d8:	ee07 3a90 	vmov	s15, r3
 80033dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e0:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80035f0 <executecommand+0xd7c>
 80033e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033e8:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80035f4 <executecommand+0xd80>
 80033ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033f0:	4b7e      	ldr	r3, [pc, #504]	@ (80035ec <executecommand+0xd78>)
 80033f2:	789b      	ldrb	r3, [r3, #2]
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fc:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80035f0 <executecommand+0xd7c>
 8003400:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003404:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003408:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800340c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003410:	4b76      	ldr	r3, [pc, #472]	@ (80035ec <executecommand+0xd78>)
 8003412:	78db      	ldrb	r3, [r3, #3]
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341c:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80035f0 <executecommand+0xd7c>
 8003420:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003428:	4b70      	ldr	r3, [pc, #448]	@ (80035ec <executecommand+0xd78>)
 800342a:	791b      	ldrb	r3, [r3, #4]
 800342c:	ee07 3a90 	vmov	s15, r3
 8003430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003434:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80035f0 <executecommand+0xd7c>
 8003438:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800343c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003440:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003448:	4b68      	ldr	r3, [pc, #416]	@ (80035ec <executecommand+0xd78>)
 800344a:	795b      	ldrb	r3, [r3, #5]
 800344c:	ee07 3a90 	vmov	s15, r3
 8003450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003454:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80035f0 <executecommand+0xd7c>
 8003458:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800345c:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 80035f4 <executecommand+0xd80>
 8003460:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003468:	4b63      	ldr	r3, [pc, #396]	@ (80035f8 <executecommand+0xd84>)
 800346a:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
			}

			if(command[0] == 'n')
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b6e      	cmp	r3, #110	@ 0x6e
 8003474:	d150      	bne.n	8003518 <executecommand+0xca4>
			{
				MYDRON.PID_Yaw.Angular_Rate_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003476:	4b5d      	ldr	r3, [pc, #372]	@ (80035ec <executecommand+0xd78>)
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003482:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80035f0 <executecommand+0xd7c>
 8003486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800348a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80035f4 <executecommand+0xd80>
 800348e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003492:	4b56      	ldr	r3, [pc, #344]	@ (80035ec <executecommand+0xd78>)
 8003494:	789b      	ldrb	r3, [r3, #2]
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349e:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80035f0 <executecommand+0xd7c>
 80034a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034a6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80034aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034b2:	4b4e      	ldr	r3, [pc, #312]	@ (80035ec <executecommand+0xd78>)
 80034b4:	78db      	ldrb	r3, [r3, #3]
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034be:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 80035f0 <executecommand+0xd7c>
 80034c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ca:	4b48      	ldr	r3, [pc, #288]	@ (80035ec <executecommand+0xd78>)
 80034cc:	791b      	ldrb	r3, [r3, #4]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80035f0 <executecommand+0xd7c>
 80034da:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034de:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80034e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ea:	4b40      	ldr	r3, [pc, #256]	@ (80035ec <executecommand+0xd78>)
 80034ec:	795b      	ldrb	r3, [r3, #5]
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f6:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80035f0 <executecommand+0xd7c>
 80034fa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034fe:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 80035f4 <executecommand+0xd80>
 8003502:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800350a:	4b3b      	ldr	r3, [pc, #236]	@ (80035f8 <executecommand+0xd84>)
 800350c:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140
				MYDRON.Yaw.Angular_Rate_Error_Sum = 0;
 8003510:	4b39      	ldr	r3, [pc, #228]	@ (80035f8 <executecommand+0xd84>)
 8003512:	2200      	movs	r2, #0
 8003514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			}

			if(command[0] == 'o')
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b6f      	cmp	r3, #111	@ 0x6f
 800351e:	d14c      	bne.n	80035ba <executecommand+0xd46>
			{
				MYDRON.PID_Yaw.Angular_Rate_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003520:	4b32      	ldr	r3, [pc, #200]	@ (80035ec <executecommand+0xd78>)
 8003522:	785b      	ldrb	r3, [r3, #1]
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80035f0 <executecommand+0xd7c>
 8003530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003534:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80035fc <executecommand+0xd88>
 8003538:	ee27 7a87 	vmul.f32	s14, s15, s14
 800353c:	4b2b      	ldr	r3, [pc, #172]	@ (80035ec <executecommand+0xd78>)
 800353e:	789b      	ldrb	r3, [r3, #2]
 8003540:	ee07 3a90 	vmov	s15, r3
 8003544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003548:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80035f0 <executecommand+0xd7c>
 800354c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003550:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80035f4 <executecommand+0xd80>
 8003554:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800355c:	4b23      	ldr	r3, [pc, #140]	@ (80035ec <executecommand+0xd78>)
 800355e:	78db      	ldrb	r3, [r3, #3]
 8003560:	ee07 3a90 	vmov	s15, r3
 8003564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003568:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80035f0 <executecommand+0xd7c>
 800356c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003570:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003574:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800357c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ec <executecommand+0xd78>)
 800357e:	791b      	ldrb	r3, [r3, #4]
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003588:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80035f0 <executecommand+0xd7c>
 800358c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003594:	4b15      	ldr	r3, [pc, #84]	@ (80035ec <executecommand+0xd78>)
 8003596:	795b      	ldrb	r3, [r3, #5]
 8003598:	ee07 3a90 	vmov	s15, r3
 800359c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80035f0 <executecommand+0xd7c>
 80035a4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80035a8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80035ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b4:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <executecommand+0xd84>)
 80035b6:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144
			}

	if(command[0] == 'r'){
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b72      	cmp	r3, #114	@ 0x72
 80035c0:	d101      	bne.n	80035c6 <executecommand+0xd52>
		NVIC_SystemReset();
 80035c2:	f7ff f8f3 	bl	80027ac <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	e007      	b.n	80035dc <executecommand+0xd68>
		UASRT_PID_VAL[i] = 0;
 80035cc:	4a07      	ldr	r2, [pc, #28]	@ (80035ec <executecommand+0xd78>)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4413      	add	r3, r2
 80035d2:	2200      	movs	r2, #0
 80035d4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3301      	adds	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b0e      	cmp	r3, #14
 80035e0:	ddf4      	ble.n	80035cc <executecommand+0xd58>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	000041bc 	.word	0x000041bc
 80035f0:	42400000 	.word	0x42400000
 80035f4:	42c80000 	.word	0x42c80000
 80035f8:	00000158 	.word	0x00000158
 80035fc:	447a0000 	.word	0x447a0000

08003600 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	@ 0x28
 8003604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003606:	1d3b      	adds	r3, r7, #4
 8003608:	2224      	movs	r2, #36	@ 0x24
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f01a f901 	bl	801d814 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003612:	4b2e      	ldr	r3, [pc, #184]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003614:	4a2e      	ldr	r2, [pc, #184]	@ (80036d0 <MX_ADC2_Init+0xd0>)
 8003616:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8003618:	4b2c      	ldr	r3, [pc, #176]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800361a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800361e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003620:	4b2a      	ldr	r3, [pc, #168]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003622:	2208      	movs	r2, #8
 8003624:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003626:	4b29      	ldr	r3, [pc, #164]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003628:	2200      	movs	r2, #0
 800362a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800362c:	4b27      	ldr	r3, [pc, #156]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800362e:	2204      	movs	r2, #4
 8003630:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003632:	4b26      	ldr	r3, [pc, #152]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003634:	2200      	movs	r2, #0
 8003636:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003638:	4b24      	ldr	r3, [pc, #144]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800363a:	2200      	movs	r2, #0
 800363c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800363e:	4b23      	ldr	r3, [pc, #140]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003640:	2201      	movs	r2, #1
 8003642:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003644:	4b21      	ldr	r3, [pc, #132]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 800364c:	4b1f      	ldr	r3, [pc, #124]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800364e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8003652:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003654:	4b1d      	ldr	r3, [pc, #116]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003656:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800365a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800365c:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800365e:	2203      	movs	r2, #3
 8003660:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003662:	4b1a      	ldr	r3, [pc, #104]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003664:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003668:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800366a:	4b18      	ldr	r3, [pc, #96]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800366c:	2200      	movs	r2, #0
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003670:	4b16      	ldr	r3, [pc, #88]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003678:	4b14      	ldr	r3, [pc, #80]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800367a:	2201      	movs	r2, #1
 800367c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800367e:	4813      	ldr	r0, [pc, #76]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003680:	f005 fbfc 	bl	8008e7c <HAL_ADC_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800368a:	f004 f8f1 	bl	8007870 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800368e:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <MX_ADC2_Init+0xd4>)
 8003690:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003692:	2306      	movs	r3, #6
 8003694:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8003696:	2307      	movs	r3, #7
 8003698:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800369a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800369e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80036a0:	2304      	movs	r3, #4
 80036a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4806      	ldr	r0, [pc, #24]	@ (80036cc <MX_ADC2_Init+0xcc>)
 80036b4:	f006 f928 	bl	8009908 <HAL_ADC_ConfigChannel>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 80036be:	f004 f8d7 	bl	8007870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80036c2:	bf00      	nop
 80036c4:	3728      	adds	r7, #40	@ 0x28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	240000ac 	.word	0x240000ac
 80036d0:	40022100 	.word	0x40022100
 80036d4:	19200040 	.word	0x19200040

080036d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	@ 0x28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a34      	ldr	r2, [pc, #208]	@ (80037c8 <HAL_ADC_MspInit+0xf0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d162      	bne.n	80037c0 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80036fa:	4b34      	ldr	r3, [pc, #208]	@ (80037cc <HAL_ADC_MspInit+0xf4>)
 80036fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003700:	4a32      	ldr	r2, [pc, #200]	@ (80037cc <HAL_ADC_MspInit+0xf4>)
 8003702:	f043 0320 	orr.w	r3, r3, #32
 8003706:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800370a:	4b30      	ldr	r3, [pc, #192]	@ (80037cc <HAL_ADC_MspInit+0xf4>)
 800370c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003718:	4b2c      	ldr	r3, [pc, #176]	@ (80037cc <HAL_ADC_MspInit+0xf4>)
 800371a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800371e:	4a2b      	ldr	r2, [pc, #172]	@ (80037cc <HAL_ADC_MspInit+0xf4>)
 8003720:	f043 0320 	orr.w	r3, r3, #32
 8003724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003728:	4b28      	ldr	r3, [pc, #160]	@ (80037cc <HAL_ADC_MspInit+0xf4>)
 800372a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003736:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800373a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800373c:	2303      	movs	r3, #3
 800373e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4619      	mov	r1, r3
 800374a:	4821      	ldr	r0, [pc, #132]	@ (80037d0 <HAL_ADC_MspInit+0xf8>)
 800374c:	f009 ffc8 	bl	800d6e0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003750:	4b20      	ldr	r3, [pc, #128]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003752:	4a21      	ldr	r2, [pc, #132]	@ (80037d8 <HAL_ADC_MspInit+0x100>)
 8003754:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003756:	4b1f      	ldr	r3, [pc, #124]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003758:	220a      	movs	r2, #10
 800375a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800375c:	4b1d      	ldr	r3, [pc, #116]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003762:	4b1c      	ldr	r3, [pc, #112]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003764:	2200      	movs	r2, #0
 8003766:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003768:	4b1a      	ldr	r3, [pc, #104]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 800376a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800376e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003770:	4b18      	ldr	r3, [pc, #96]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003772:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003776:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003778:	4b16      	ldr	r3, [pc, #88]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 800377a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800377e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003780:	4b14      	ldr	r3, [pc, #80]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003782:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003786:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003788:	4b12      	ldr	r3, [pc, #72]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 800378a:	2200      	movs	r2, #0
 800378c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800378e:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003790:	2200      	movs	r2, #0
 8003792:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003794:	480f      	ldr	r0, [pc, #60]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003796:	f007 f951 	bl	800aa3c <HAL_DMA_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 80037a0:	f004 f866 	bl	8007870 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a0b      	ldr	r2, [pc, #44]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 80037a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80037aa:	4a0a      	ldr	r2, [pc, #40]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80037b0:	2200      	movs	r2, #0
 80037b2:	2100      	movs	r1, #0
 80037b4:	2012      	movs	r0, #18
 80037b6:	f007 f894 	bl	800a8e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80037ba:	2012      	movs	r0, #18
 80037bc:	f007 f8ab 	bl	800a916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80037c0:	bf00      	nop
 80037c2:	3728      	adds	r7, #40	@ 0x28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40022100 	.word	0x40022100
 80037cc:	58024400 	.word	0x58024400
 80037d0:	58021400 	.word	0x58021400
 80037d4:	2400011c 	.word	0x2400011c
 80037d8:	40020410 	.word	0x40020410

080037dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037e2:	4b19      	ldr	r3, [pc, #100]	@ (8003848 <MX_DMA_Init+0x6c>)
 80037e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037e8:	4a17      	ldr	r2, [pc, #92]	@ (8003848 <MX_DMA_Init+0x6c>)
 80037ea:	f043 0302 	orr.w	r3, r3, #2
 80037ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037f2:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <MX_DMA_Init+0x6c>)
 80037f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003800:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <MX_DMA_Init+0x6c>)
 8003802:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003806:	4a10      	ldr	r2, [pc, #64]	@ (8003848 <MX_DMA_Init+0x6c>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003810:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <MX_DMA_Init+0x6c>)
 8003812:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800381e:	2200      	movs	r2, #0
 8003820:	2100      	movs	r1, #0
 8003822:	200b      	movs	r0, #11
 8003824:	f007 f85d 	bl	800a8e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003828:	200b      	movs	r0, #11
 800382a:	f007 f874 	bl	800a916 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800382e:	2200      	movs	r2, #0
 8003830:	2100      	movs	r1, #0
 8003832:	2038      	movs	r0, #56	@ 0x38
 8003834:	f007 f855 	bl	800a8e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003838:	2038      	movs	r0, #56	@ 0x38
 800383a:	f007 f86c 	bl	800a916 <HAL_NVIC_EnableIRQ>

}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	58024400 	.word	0x58024400
 800384c:	00000000 	.word	0x00000000

08003850 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003850:	b580      	push	{r7, lr}
 8003852:	b08e      	sub	sp, #56	@ 0x38
 8003854:	af00      	add	r7, sp, #0
 8003856:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(MYDRON.Pitch.Angle_Error);
 800386c:	4b8c      	ldr	r3, [pc, #560]	@ (8003aa0 <Thrust_filter+0x250>)
 800386e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003872:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003876:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(MYDRON.Rool.Angle_Error);
 800387a:	4b89      	ldr	r3, [pc, #548]	@ (8003aa0 <Thrust_filter+0x250>)
 800387c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003880:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003884:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 8003888:	ed97 7b08 	vldr	d7, [r7, #32]
 800388c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003890:	eeb0 0a67 	vmov.f32	s0, s15
 8003894:	f003 fb30 	bl	8006ef8 <WartoscBezwgledna>
 8003898:	eef0 7a40 	vmov.f32	s15, s0
 800389c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038a0:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 80038a4:	ed97 7b06 	vldr	d7, [r7, #24]
 80038a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038ac:	eeb0 0a67 	vmov.f32	s0, s15
 80038b0:	f003 fb22 	bl	8006ef8 <WartoscBezwgledna>
 80038b4:	eef0 7a40 	vmov.f32	s15, s0
 80038b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038bc:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 80038c0:	ed97 6b08 	vldr	d6, [r7, #32]
 80038c4:	ed97 7b06 	vldr	d7, [r7, #24]
 80038c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80038cc:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80038d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038d4:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 80038d8:	eeb0 0b47 	vmov.f64	d0, d7
 80038dc:	f01a f934 	bl	801db48 <pow>
 80038e0:	ed87 0b04 	vstr	d0, [r7, #16]
	if(MYDRON.Thrust.Wanted > 10500){
 80038e4:	4b6e      	ldr	r3, [pc, #440]	@ (8003aa0 <Thrust_filter+0x250>)
 80038e6:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 80038ea:	f642 1204 	movw	r2, #10500	@ 0x2904
 80038ee:	4293      	cmp	r3, r2
 80038f0:	dd04      	ble.n	80038fc <Thrust_filter+0xac>
		MYDRON.Thrust.Wanted = 10500;
 80038f2:	4b6b      	ldr	r3, [pc, #428]	@ (8003aa0 <Thrust_filter+0x250>)
 80038f4:	f642 1204 	movw	r2, #10500	@ 0x2904
 80038f8:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	}

	thrust_error = MYDRON.Thrust.Wanted - MYDRON.Thrust.Now;
 80038fc:	4b68      	ldr	r3, [pc, #416]	@ (8003aa0 <Thrust_filter+0x250>)
 80038fe:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8003902:	b29a      	uxth	r2, r3
 8003904:	4b66      	ldr	r3, [pc, #408]	@ (8003aa0 <Thrust_filter+0x250>)
 8003906:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	b29b      	uxth	r3, r3
 800390e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 8003910:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003914:	2b00      	cmp	r3, #0
 8003916:	da13      	bge.n	8003940 <Thrust_filter+0xf0>
		thrust_error = WartoscBezwgledna(thrust_error);
 8003918:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003924:	eeb0 0a67 	vmov.f32	s0, s15
 8003928:	f003 fae6 	bl	8006ef8 <WartoscBezwgledna>
 800392c:	eef0 7a40 	vmov.f32	s15, s0
 8003930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003934:	ee17 3a90 	vmov	r3, s15
 8003938:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003940:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 809d 	beq.w	8003a84 <Thrust_filter+0x234>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 800394a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003956:	eeb0 0b47 	vmov.f64	d0, d7
 800395a:	f019 ff9d 	bl	801d898 <sqrt>
 800395e:	eeb0 7b40 	vmov.f64	d7, d0
 8003962:	eeb0 0b47 	vmov.f64	d0, d7
 8003966:	f019 ff97 	bl	801d898 <sqrt>
 800396a:	eeb0 7b40 	vmov.f64	d7, d0
 800396e:	ed9f 6b48 	vldr	d6, [pc, #288]	@ 8003a90 <Thrust_filter+0x240>
 8003972:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003976:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 800397a:	ed97 7b00 	vldr	d7, [r7]
 800397e:	ed9f 6b46 	vldr	d6, [pc, #280]	@ 8003a98 <Thrust_filter+0x248>
 8003982:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003986:	ed97 7b02 	vldr	d7, [r7, #8]
 800398a:	ee26 5b07 	vmul.f64	d5, d6, d7
 800398e:	ed97 6b04 	vldr	d6, [r7, #16]
 8003992:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003996:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 800399a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d105      	bne.n	80039ae <Thrust_filter+0x15e>
			thrust_add = thrust_add*(-1);
 80039a2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039a6:	eeb1 7b47 	vneg.f64	d7, d7
 80039aa:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 80039ae:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039b2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039be:	d513      	bpl.n	80039e8 <Thrust_filter+0x198>
 80039c0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039c4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80039c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d0:	dd0a      	ble.n	80039e8 <Thrust_filter+0x198>
			MYDRON.Thrust.Values = MYDRON.Thrust.Values + thrust_add;
 80039d2:	4b33      	ldr	r3, [pc, #204]	@ (8003aa0 <Thrust_filter+0x250>)
 80039d4:	ed93 6b26 	vldr	d6, [r3, #152]	@ 0x98
 80039d8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039e0:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa0 <Thrust_filter+0x250>)
 80039e2:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
 80039e6:	e012      	b.n	8003a0e <Thrust_filter+0x1be>
		}
		else{
			MYDRON.Thrust.Now = MYDRON.Thrust.Now + thrust_add;
 80039e8:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa0 <Thrust_filter+0x250>)
 80039ea:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80039f6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a02:	ee17 3a90 	vmov	r3, s15
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	4b25      	ldr	r3, [pc, #148]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a0a:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		}

		if(MYDRON.Thrust.Values >= 1 || MYDRON.Thrust.Values <= -1){
 8003a0e:	4b24      	ldr	r3, [pc, #144]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a10:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 8003a14:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003a18:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a20:	da09      	bge.n	8003a36 <Thrust_filter+0x1e6>
 8003a22:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a24:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 8003a28:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003a2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	d81a      	bhi.n	8003a6c <Thrust_filter+0x21c>
			MYDRON.Thrust.Now = MYDRON.Thrust.Now + MYDRON.Thrust.Values;
 8003a36:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a38:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a44:	4b16      	ldr	r3, [pc, #88]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a46:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 8003a4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a4e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a52:	ee17 3a90 	vmov	r3, s15
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	4b11      	ldr	r3, [pc, #68]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a5a:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			MYDRON.Thrust.Values = 0;
 8003a5e:	4910      	ldr	r1, [pc, #64]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
		}
		if(MYDRON.Thrust.Now > 10000){//ograniczenie THRUST
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a6e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8003a72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d904      	bls.n	8003a84 <Thrust_filter+0x234>
			MYDRON.Thrust.Now = 10000;
 8003a7a:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a7c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a80:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		}
	}
}
 8003a84:	bf00      	nop
 8003a86:	3738      	adds	r7, #56	@ 0x38
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	f3af 8000 	nop.w
 8003a90:	00000000 	.word	0x00000000
 8003a94:	409f4000 	.word	0x409f4000
 8003a98:	30553261 	.word	0x30553261
 8003a9c:	3f43a92a 	.word	0x3f43a92a
 8003aa0:	00000158 	.word	0x00000158

08003aa4 <PID_call>:
//
//	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_call(Dron Paramiters){
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	b490      	push	{r4, r7}
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	f107 0408 	add.w	r4, r7, #8
 8003aae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Paramiters.PID_Pitch.Angle_Value = (Paramiters.Pitch.Angle_Error * Paramiters.PID_Pitch.Angle_Factors[0]) + (Paramiters.Pitch.Angle_Error_Sum * Paramiters.PID_Pitch.Angle_Factors[1] * looptime) + ((Paramiters.Pitch.Angle_Error - Paramiters.Pitch.Old_Angle_Error) * Paramiters.PID_Pitch.Angle_Factors[2]);
 8003ab2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ab6:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8003aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac0:	ee07 3a90 	vmov	s15, r3
 8003ac4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ac8:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8003acc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ad0:	4b67      	ldr	r3, [pc, #412]	@ (8003c70 <PID_call+0x1cc>)
 8003ad2:	edd3 7a00 	vldr	s15, [r3]
 8003ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ae2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ae6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003aea:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8003aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af6:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
	Paramiters.PID_Rool.Angle_Value = (Paramiters.Rool.Angle_Error * Paramiters.PID_Rool.Angle_Factors[0]) + (Paramiters.Rool.Angle_Error_Sum * Paramiters.PID_Rool.Angle_Factors[1] * looptime) + ((Paramiters.Rool.Angle_Error - Paramiters.Rool.Old_Angle_Error) * Paramiters.PID_Rool.Angle_Factors[2]);
 8003afa:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003afe:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8003b02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b08:	ee07 3a90 	vmov	s15, r3
 8003b0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b10:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8003b14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b18:	4b55      	ldr	r3, [pc, #340]	@ (8003c70 <PID_call+0x1cc>)
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b26:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8003b2a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003b2e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b32:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8003b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3e:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
	Paramiters.PID_Yaw.Angle_Value = (Paramiters.Yaw.Angle_Error * Paramiters.PID_Yaw.Angle_Factors[0]) + (Paramiters.Yaw.Angle_Error_Sum * Paramiters.PID_Yaw.Angle_Factors[1] * looptime) + ((Paramiters.Yaw.Angle_Error - Paramiters.Yaw.Old_Angle_Error) * Paramiters.PID_Yaw.Angle_Factors[2]);
 8003b42:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8003b46:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8003b4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b5a:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8003b5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b62:	4b43      	ldr	r3, [pc, #268]	@ (8003c70 <PID_call+0x1cc>)
 8003b64:	edd3 7a00 	vldr	s15, [r3]
 8003b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b70:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8003b74:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003b78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b7c:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b88:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128

	Paramiters.PID_Pitch.Angular_Rate_Value = (Paramiters.Pitch.Angular_Rate_Error * Paramiters.PID_Pitch.Angular_Rate_Factors[0]) + (Paramiters.Pitch.Angular_Rate_Error_Sum * Paramiters.PID_Pitch.Angular_Rate_Factors[1] * looptime) + ((Paramiters.Pitch.Angular_Rate_Error - Paramiters.Pitch.Old_Angular_Rate_Error) * Paramiters.PID_Pitch.Angular_Rate_Factors[2]);
 8003b8c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003b90:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8003b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ba2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8003ba6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003baa:	4b31      	ldr	r3, [pc, #196]	@ (8003c70 <PID_call+0x1cc>)
 8003bac:	edd3 7a00 	vldr	s15, [r3]
 8003bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bb8:	edd7 6a08 	vldr	s13, [r7, #32]
 8003bbc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003bc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003bc4:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8003bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd0:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
	Paramiters.PID_Rool.Angular_Rate_Value = (Paramiters.Rool.Angular_Rate_Error * Paramiters.PID_Rool.Angular_Rate_Factors[0]) + (Paramiters.Rool.Angular_Rate_Error_Sum * Paramiters.PID_Rool.Angular_Rate_Factors[1] * looptime) + ((Paramiters.Rool.Angular_Rate_Error - Paramiters.Rool.Old_Angular_Rate_Error) * Paramiters.PID_Rool.Angular_Rate_Factors[2]);
 8003bd4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003bd8:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8003bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003bea:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8003bee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c70 <PID_call+0x1cc>)
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c00:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8003c04:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003c08:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c0c:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8003c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c18:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
	Paramiters.PID_Yaw.Angular_Rate_Value = (Paramiters.Yaw.Angular_Rate_Error * Paramiters.PID_Yaw.Angular_Rate_Factors[0]) + (Paramiters.Yaw.Angular_Rate_Error_Sum * Paramiters.PID_Yaw.Angular_Rate_Factors[1] * looptime) + ((Paramiters.Yaw.Angular_Rate_Error - Paramiters.Yaw.Old_Angular_Rate_Error) * Paramiters.PID_Yaw.Angular_Rate_Factors[2]);
 8003c1c:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003c20:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8003c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c34:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8003c38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c70 <PID_call+0x1cc>)
 8003c3e:	edd3 7a00 	vldr	s15, [r3]
 8003c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c4a:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8003c4e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003c52:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c56:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8003c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c62:	edc7 7a4b 	vstr	s15, [r7, #300]	@ 0x12c
}
 8003c66:	bf00      	nop
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc90      	pop	{r4, r7}
 8003c6c:	b004      	add	sp, #16
 8003c6e:	4770      	bx	lr
 8003c70:	0801e2e4 	.word	0x0801e2e4
 8003c74:	00000000 	.word	0x00000000

08003c78 <Get_batteryvalue>:
//		default:
//			break;
	//}
}

void Get_batteryvalue(void){
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 8003c7c:	4b20      	ldr	r3, [pc, #128]	@ (8003d00 <Get_batteryvalue+0x88>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8003c84:	ee07 3a90 	vmov	s15, r3
 8003c88:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003c8c:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 8003cf8 <Get_batteryvalue+0x80>
 8003c90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003c94:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003c98:	ee17 3a90 	vmov	r3, s15
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	4b19      	ldr	r3, [pc, #100]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003ca0:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
	if(MYDRON.batterysize >= 100){
 8003ca4:	4b17      	ldr	r3, [pc, #92]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003ca6:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8003caa:	2b63      	cmp	r3, #99	@ 0x63
 8003cac:	d903      	bls.n	8003cb6 <Get_batteryvalue+0x3e>
		MYDRON.batterysize = 100;
 8003cae:	4b15      	ldr	r3, [pc, #84]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003cb0:	2264      	movs	r2, #100	@ 0x64
 8003cb2:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
	}

	if(MYDRON.batterysize < 25){
 8003cb6:	4b13      	ldr	r3, [pc, #76]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003cb8:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8003cbc:	2b18      	cmp	r3, #24
 8003cbe:	d803      	bhi.n	8003cc8 <Get_batteryvalue+0x50>
		MYDRON.Status.Battery = DRON_BATTERY_RUN_OUT;
 8003cc0:	4b10      	ldr	r3, [pc, #64]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003cc2:	2207      	movs	r2, #7
 8003cc4:	f883 2155 	strb.w	r2, [r3, #341]	@ 0x155
	}
	if(MYDRON.batterysize <= 10){
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003cca:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8003cce:	2b0a      	cmp	r3, #10
 8003cd0:	d803      	bhi.n	8003cda <Get_batteryvalue+0x62>
		MYDRON.Status.Battery = DRON_BATTERY_CRIT_VAL;
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003cd4:	2209      	movs	r2, #9
 8003cd6:	f883 2155 	strb.w	r2, [r3, #341]	@ 0x155
	}
	if(MYDRON.batterysize >= 25){
 8003cda:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003cdc:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8003ce0:	2b18      	cmp	r3, #24
 8003ce2:	d903      	bls.n	8003cec <Get_batteryvalue+0x74>
		MYDRON.Status.Battery = DRON_BATTERY_OK;
 8003ce4:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	f883 2155 	strb.w	r2, [r3, #341]	@ 0x155
	}
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	7ae147ae 	.word	0x7ae147ae
 8003cfc:	401dae14 	.word	0x401dae14
 8003d00:	24000eb0 	.word	0x24000eb0
 8003d04:	00000158 	.word	0x00000158

08003d08 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d12:	4802      	ldr	r0, [pc, #8]	@ (8003d1c <SELECT+0x14>)
 8003d14:	f009 fea4 	bl	800da60 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	58020c00 	.word	0x58020c00

08003d20 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003d24:	2201      	movs	r2, #1
 8003d26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d2a:	4802      	ldr	r0, [pc, #8]	@ (8003d34 <DESELECT+0x14>)
 8003d2c:	f009 fe98 	bl	800da60 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	58020c00 	.word	0x58020c00

08003d38 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003d42:	bf00      	nop
 8003d44:	4b07      	ldr	r3, [pc, #28]	@ (8003d64 <SPI_TxByte+0x2c>)
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d1f9      	bne.n	8003d44 <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003d50:	1df9      	adds	r1, r7, #7
 8003d52:	2364      	movs	r3, #100	@ 0x64
 8003d54:	2201      	movs	r2, #1
 8003d56:	4804      	ldr	r0, [pc, #16]	@ (8003d68 <SPI_TxByte+0x30>)
 8003d58:	f00f ffd4 	bl	8013d04 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40020010 	.word	0x40020010
 8003d68:	24000274 	.word	0x24000274

08003d6c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003d78:	bf00      	nop
 8003d7a:	4b08      	ldr	r3, [pc, #32]	@ (8003d9c <SPI_TxBuffer+0x30>)
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d1f9      	bne.n	8003d7a <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4804      	ldr	r0, [pc, #16]	@ (8003da0 <SPI_TxBuffer+0x34>)
 8003d8e:	f011 f8a7 	bl	8014ee0 <HAL_SPI_Transmit_DMA>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40020010 	.word	0x40020010
 8003da0:	24000274 	.word	0x24000274

08003da4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003daa:	23ff      	movs	r3, #255	@ 0xff
 8003dac:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003dae:	bf00      	nop
 8003db0:	4b09      	ldr	r3, [pc, #36]	@ (8003dd8 <SPI_RxByte+0x34>)
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d1f9      	bne.n	8003db0 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003dbc:	1dba      	adds	r2, r7, #6
 8003dbe:	1df9      	adds	r1, r7, #7
 8003dc0:	2364      	movs	r3, #100	@ 0x64
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	4805      	ldr	r0, [pc, #20]	@ (8003ddc <SPI_RxByte+0x38>)
 8003dc8:	f010 fbfc 	bl	80145c4 <HAL_SPI_TransmitReceive>

	return data;
 8003dcc:	79bb      	ldrb	r3, [r7, #6]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40020010 	.word	0x40020010
 8003ddc:	24000274 	.word	0x24000274

08003de0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003de8:	f7ff ffdc 	bl	8003da4 <SPI_RxByte>
 8003dec:	4603      	mov	r3, r0
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	701a      	strb	r2, [r3, #0]
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8003e02:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <SD_ReadyWait+0x30>)
 8003e04:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003e08:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003e0a:	f7ff ffcb 	bl	8003da4 <SPI_RxByte>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	2bff      	cmp	r3, #255	@ 0xff
 8003e16:	d004      	beq.n	8003e22 <SD_ReadyWait+0x26>
 8003e18:	4b04      	ldr	r3, [pc, #16]	@ (8003e2c <SD_ReadyWait+0x30>)
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f3      	bne.n	8003e0a <SD_ReadyWait+0xe>

	return res;
 8003e22:	79fb      	ldrb	r3, [r7, #7]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	2400037c 	.word	0x2400037c

08003e30 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8003e36:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8003e3a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8003e3c:	f7ff ff70 	bl	8003d20 <DESELECT>
	for(int i = 0; i < 10; i++)
 8003e40:	2300      	movs	r3, #0
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	e005      	b.n	8003e52 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8003e46:	20ff      	movs	r0, #255	@ 0xff
 8003e48:	f7ff ff76 	bl	8003d38 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b09      	cmp	r3, #9
 8003e56:	ddf6      	ble.n	8003e46 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8003e58:	f7ff ff56 	bl	8003d08 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8003e5c:	2340      	movs	r3, #64	@ 0x40
 8003e5e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8003e70:	2395      	movs	r3, #149	@ 0x95
 8003e72:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8003e74:	463b      	mov	r3, r7
 8003e76:	2106      	movs	r1, #6
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ff77 	bl	8003d6c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8003e7e:	e002      	b.n	8003e86 <SD_PowerOn+0x56>
	{
		cnt--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003e86:	f7ff ff8d 	bl	8003da4 <SPI_RxByte>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d002      	beq.n	8003e96 <SD_PowerOn+0x66>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f4      	bne.n	8003e80 <SD_PowerOn+0x50>
	}

	DESELECT();
 8003e96:	f7ff ff43 	bl	8003d20 <DESELECT>
	SPI_TxByte(0XFF);
 8003e9a:	20ff      	movs	r0, #255	@ 0xff
 8003e9c:	f7ff ff4c 	bl	8003d38 <SPI_TxByte>

	PowerFlag = 1;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	@ (8003eb0 <SD_PowerOn+0x80>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	24000195 	.word	0x24000195

08003eb4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	@ (8003ec8 <SD_PowerOff+0x14>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	24000195 	.word	0x24000195

08003ecc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	@ (8003ee0 <SD_CheckPower+0x14>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	24000195 	.word	0x24000195

08003ee4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 8003eee:	4b14      	ldr	r3, [pc, #80]	@ (8003f40 <SD_RxDataBlock+0x5c>)
 8003ef0:	220a      	movs	r2, #10
 8003ef2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003ef4:	f7ff ff56 	bl	8003da4 <SPI_RxByte>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2bff      	cmp	r3, #255	@ 0xff
 8003f00:	d104      	bne.n	8003f0c <SD_RxDataBlock+0x28>
 8003f02:	4b0f      	ldr	r3, [pc, #60]	@ (8003f40 <SD_RxDataBlock+0x5c>)
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f3      	bne.n	8003ef4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003f10:	d001      	beq.n	8003f16 <SD_RxDataBlock+0x32>
 8003f12:	2300      	movs	r3, #0
 8003f14:	e00f      	b.n	8003f36 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ff5f 	bl	8003de0 <SPI_RxBytePtr>
	} while(len--);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	1e5a      	subs	r2, r3, #1
 8003f26:	603a      	str	r2, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f4      	bne.n	8003f16 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8003f2c:	f7ff ff3a 	bl	8003da4 <SPI_RxByte>
	SPI_RxByte();
 8003f30:	f7ff ff38 	bl	8003da4 <SPI_RxByte>

	return TRUE;
 8003f34:	2301      	movs	r3, #1
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	24000378 	.word	0x24000378

08003f44 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003f54:	f7ff ff52 	bl	8003dfc <SD_ReadyWait>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2bff      	cmp	r3, #255	@ 0xff
 8003f5c:	d001      	beq.n	8003f62 <SD_TxDataBlock+0x1e>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e02f      	b.n	8003fc2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff fee7 	bl	8003d38 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	2bfd      	cmp	r3, #253	@ 0xfd
 8003f6e:	d020      	beq.n	8003fb2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003f70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff fef9 	bl	8003d6c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8003f7a:	f7ff ff13 	bl	8003da4 <SPI_RxByte>
		SPI_RxByte();
 8003f7e:	f7ff ff11 	bl	8003da4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003f82:	e00b      	b.n	8003f9c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003f84:	f7ff ff0e 	bl	8003da4 <SPI_RxByte>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d006      	beq.n	8003fa4 <SD_TxDataBlock+0x60>
			i++;
 8003f96:	7bbb      	ldrb	r3, [r7, #14]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8003f9c:	7bbb      	ldrb	r3, [r7, #14]
 8003f9e:	2b40      	cmp	r3, #64	@ 0x40
 8003fa0:	d9f0      	bls.n	8003f84 <SD_TxDataBlock+0x40>
 8003fa2:	e000      	b.n	8003fa6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003fa4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003fa6:	bf00      	nop
 8003fa8:	f7ff fefc 	bl	8003da4 <SPI_RxByte>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0fa      	beq.n	8003fa8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	2b05      	cmp	r3, #5
 8003fba:	d101      	bne.n	8003fc0 <SD_TxDataBlock+0x7c>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <SD_TxDataBlock+0x7e>

	return FALSE;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	6039      	str	r1, [r7, #0]
 8003fd4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003fd6:	f7ff ff11 	bl	8003dfc <SD_ReadyWait>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2bff      	cmp	r3, #255	@ 0xff
 8003fde:	d001      	beq.n	8003fe4 <SD_SendCmd+0x1a>
 8003fe0:	23ff      	movs	r3, #255	@ 0xff
 8003fe2:	e042      	b.n	800406a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fea6 	bl	8003d38 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	0e1b      	lsrs	r3, r3, #24
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fea0 	bl	8003d38 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	0c1b      	lsrs	r3, r3, #16
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fe9a 	bl	8003d38 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	b2db      	uxtb	r3, r3
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fe94 	bl	8003d38 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff fe8f 	bl	8003d38 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	2b40      	cmp	r3, #64	@ 0x40
 800401e:	d102      	bne.n	8004026 <SD_SendCmd+0x5c>
 8004020:	2395      	movs	r3, #149	@ 0x95
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	e007      	b.n	8004036 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	2b48      	cmp	r3, #72	@ 0x48
 800402a:	d102      	bne.n	8004032 <SD_SendCmd+0x68>
 800402c:	2387      	movs	r3, #135	@ 0x87
 800402e:	73fb      	strb	r3, [r7, #15]
 8004030:	e001      	b.n	8004036 <SD_SendCmd+0x6c>
	else crc = 1;
 8004032:	2301      	movs	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fe7d 	bl	8003d38 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	2b4c      	cmp	r3, #76	@ 0x4c
 8004042:	d101      	bne.n	8004048 <SD_SendCmd+0x7e>
 8004044:	f7ff feae 	bl	8003da4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004048:	230a      	movs	r3, #10
 800404a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800404c:	f7ff feaa 	bl	8003da4 <SPI_RxByte>
 8004050:	4603      	mov	r3, r0
 8004052:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004054:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004058:	2b00      	cmp	r3, #0
 800405a:	da05      	bge.n	8004068 <SD_SendCmd+0x9e>
 800405c:	7bbb      	ldrb	r3, [r7, #14]
 800405e:	3b01      	subs	r3, #1
 8004060:	73bb      	strb	r3, [r7, #14]
 8004062:	7bbb      	ldrb	r3, [r7, #14]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f1      	bne.n	800404c <SD_SendCmd+0x82>

	return res;
 8004068:	7b7b      	ldrb	r3, [r7, #13]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <SD_disk_initialize+0x14>
 8004084:	2301      	movs	r3, #1
 8004086:	e0d6      	b.n	8004236 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004088:	4b6d      	ldr	r3, [pc, #436]	@ (8004240 <SD_disk_initialize+0x1cc>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <SD_disk_initialize+0x2a>
 8004096:	4b6a      	ldr	r3, [pc, #424]	@ (8004240 <SD_disk_initialize+0x1cc>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	e0cb      	b.n	8004236 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800409e:	f7ff fec7 	bl	8003e30 <SD_PowerOn>

	/* slave select */
	SELECT();
 80040a2:	f7ff fe31 	bl	8003d08 <SELECT>

	/* check disk type */
	type = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80040aa:	2100      	movs	r1, #0
 80040ac:	2040      	movs	r0, #64	@ 0x40
 80040ae:	f7ff ff8c 	bl	8003fca <SD_SendCmd>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	f040 80a6 	bne.w	8004206 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80040ba:	4b62      	ldr	r3, [pc, #392]	@ (8004244 <SD_disk_initialize+0x1d0>)
 80040bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040c0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80040c2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80040c6:	2048      	movs	r0, #72	@ 0x48
 80040c8:	f7ff ff7f 	bl	8003fca <SD_SendCmd>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d158      	bne.n	8004184 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
 80040d6:	e00c      	b.n	80040f2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80040d8:	7bfc      	ldrb	r4, [r7, #15]
 80040da:	f7ff fe63 	bl	8003da4 <SPI_RxByte>
 80040de:	4603      	mov	r3, r0
 80040e0:	461a      	mov	r2, r3
 80040e2:	f104 0310 	add.w	r3, r4, #16
 80040e6:	443b      	add	r3, r7
 80040e8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	3301      	adds	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d9ef      	bls.n	80040d8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80040f8:	7abb      	ldrb	r3, [r7, #10]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	f040 8083 	bne.w	8004206 <SD_disk_initialize+0x192>
 8004100:	7afb      	ldrb	r3, [r7, #11]
 8004102:	2baa      	cmp	r3, #170	@ 0xaa
 8004104:	d17f      	bne.n	8004206 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004106:	2100      	movs	r1, #0
 8004108:	2077      	movs	r0, #119	@ 0x77
 800410a:	f7ff ff5e 	bl	8003fca <SD_SendCmd>
 800410e:	4603      	mov	r3, r0
 8004110:	2b01      	cmp	r3, #1
 8004112:	d807      	bhi.n	8004124 <SD_disk_initialize+0xb0>
 8004114:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004118:	2069      	movs	r0, #105	@ 0x69
 800411a:	f7ff ff56 	bl	8003fca <SD_SendCmd>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8004124:	4b47      	ldr	r3, [pc, #284]	@ (8004244 <SD_disk_initialize+0x1d0>)
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1eb      	bne.n	8004106 <SD_disk_initialize+0x92>
 800412e:	e000      	b.n	8004132 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004130:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004132:	4b44      	ldr	r3, [pc, #272]	@ (8004244 <SD_disk_initialize+0x1d0>)
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d064      	beq.n	8004206 <SD_disk_initialize+0x192>
 800413c:	2100      	movs	r1, #0
 800413e:	207a      	movs	r0, #122	@ 0x7a
 8004140:	f7ff ff43 	bl	8003fca <SD_SendCmd>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d15d      	bne.n	8004206 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
 800414e:	e00c      	b.n	800416a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8004150:	7bfc      	ldrb	r4, [r7, #15]
 8004152:	f7ff fe27 	bl	8003da4 <SPI_RxByte>
 8004156:	4603      	mov	r3, r0
 8004158:	461a      	mov	r2, r3
 800415a:	f104 0310 	add.w	r3, r4, #16
 800415e:	443b      	add	r3, r7
 8004160:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	3301      	adds	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d9ef      	bls.n	8004150 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004170:	7a3b      	ldrb	r3, [r7, #8]
 8004172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <SD_disk_initialize+0x10a>
 800417a:	230c      	movs	r3, #12
 800417c:	e000      	b.n	8004180 <SD_disk_initialize+0x10c>
 800417e:	2304      	movs	r3, #4
 8004180:	73bb      	strb	r3, [r7, #14]
 8004182:	e040      	b.n	8004206 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004184:	2100      	movs	r1, #0
 8004186:	2077      	movs	r0, #119	@ 0x77
 8004188:	f7ff ff1f 	bl	8003fca <SD_SendCmd>
 800418c:	4603      	mov	r3, r0
 800418e:	2b01      	cmp	r3, #1
 8004190:	d808      	bhi.n	80041a4 <SD_disk_initialize+0x130>
 8004192:	2100      	movs	r1, #0
 8004194:	2069      	movs	r0, #105	@ 0x69
 8004196:	f7ff ff18 	bl	8003fca <SD_SendCmd>
 800419a:	4603      	mov	r3, r0
 800419c:	2b01      	cmp	r3, #1
 800419e:	d801      	bhi.n	80041a4 <SD_disk_initialize+0x130>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e000      	b.n	80041a6 <SD_disk_initialize+0x132>
 80041a4:	2301      	movs	r3, #1
 80041a6:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80041a8:	7bbb      	ldrb	r3, [r7, #14]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d10e      	bne.n	80041cc <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80041ae:	2100      	movs	r1, #0
 80041b0:	2077      	movs	r0, #119	@ 0x77
 80041b2:	f7ff ff0a 	bl	8003fca <SD_SendCmd>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d80e      	bhi.n	80041da <SD_disk_initialize+0x166>
 80041bc:	2100      	movs	r1, #0
 80041be:	2069      	movs	r0, #105	@ 0x69
 80041c0:	f7ff ff03 	bl	8003fca <SD_SendCmd>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <SD_disk_initialize+0x166>
 80041ca:	e00d      	b.n	80041e8 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80041cc:	2100      	movs	r1, #0
 80041ce:	2041      	movs	r0, #65	@ 0x41
 80041d0:	f7ff fefb 	bl	8003fca <SD_SendCmd>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80041da:	4b1a      	ldr	r3, [pc, #104]	@ (8004244 <SD_disk_initialize+0x1d0>)
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e1      	bne.n	80041a8 <SD_disk_initialize+0x134>
 80041e4:	e000      	b.n	80041e8 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80041e6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80041e8:	4b16      	ldr	r3, [pc, #88]	@ (8004244 <SD_disk_initialize+0x1d0>)
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d007      	beq.n	8004202 <SD_disk_initialize+0x18e>
 80041f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041f6:	2050      	movs	r0, #80	@ 0x50
 80041f8:	f7ff fee7 	bl	8003fca <SD_SendCmd>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <SD_disk_initialize+0x192>
 8004202:	2300      	movs	r3, #0
 8004204:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8004206:	4a10      	ldr	r2, [pc, #64]	@ (8004248 <SD_disk_initialize+0x1d4>)
 8004208:	7bbb      	ldrb	r3, [r7, #14]
 800420a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800420c:	f7ff fd88 	bl	8003d20 <DESELECT>
	SPI_RxByte();
 8004210:	f7ff fdc8 	bl	8003da4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8004214:	7bbb      	ldrb	r3, [r7, #14]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800421a:	4b09      	ldr	r3, [pc, #36]	@ (8004240 <SD_disk_initialize+0x1cc>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	b2da      	uxtb	r2, r3
 8004226:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <SD_disk_initialize+0x1cc>)
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	e001      	b.n	8004230 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800422c:	f7ff fe42 	bl	8003eb4 <SD_PowerOff>
	}

	return Stat;
 8004230:	4b03      	ldr	r3, [pc, #12]	@ (8004240 <SD_disk_initialize+0x1cc>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	b2db      	uxtb	r3, r3
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	bd90      	pop	{r4, r7, pc}
 800423e:	bf00      	nop
 8004240:	24000000 	.word	0x24000000
 8004244:	24000378 	.word	0x24000378
 8004248:	24000194 	.word	0x24000194

0800424c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <SD_disk_status+0x14>
 800425c:	2301      	movs	r3, #1
 800425e:	e002      	b.n	8004266 <SD_disk_status+0x1a>
	return Stat;
 8004260:	4b04      	ldr	r3, [pc, #16]	@ (8004274 <SD_disk_status+0x28>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b2db      	uxtb	r3, r3
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	24000000 	.word	0x24000000

08004278 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	4603      	mov	r3, r0
 8004286:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <SD_disk_read+0x1c>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <SD_disk_read+0x20>
 8004294:	2304      	movs	r3, #4
 8004296:	e051      	b.n	800433c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004298:	4b2a      	ldr	r3, [pc, #168]	@ (8004344 <SD_disk_read+0xcc>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <SD_disk_read+0x32>
 80042a6:	2303      	movs	r3, #3
 80042a8:	e048      	b.n	800433c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80042aa:	4b27      	ldr	r3, [pc, #156]	@ (8004348 <SD_disk_read+0xd0>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <SD_disk_read+0x44>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	025b      	lsls	r3, r3, #9
 80042ba:	607b      	str	r3, [r7, #4]

	SELECT();
 80042bc:	f7ff fd24 	bl	8003d08 <SELECT>

	if (count == 1)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d111      	bne.n	80042ea <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	2051      	movs	r0, #81	@ 0x51
 80042ca:	f7ff fe7e 	bl	8003fca <SD_SendCmd>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d129      	bne.n	8004328 <SD_disk_read+0xb0>
 80042d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042d8:	68b8      	ldr	r0, [r7, #8]
 80042da:	f7ff fe03 	bl	8003ee4 <SD_RxDataBlock>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d021      	beq.n	8004328 <SD_disk_read+0xb0>
 80042e4:	2300      	movs	r3, #0
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	e01e      	b.n	8004328 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	2052      	movs	r0, #82	@ 0x52
 80042ee:	f7ff fe6c 	bl	8003fca <SD_SendCmd>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d117      	bne.n	8004328 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80042f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042fc:	68b8      	ldr	r0, [r7, #8]
 80042fe:	f7ff fdf1 	bl	8003ee4 <SD_RxDataBlock>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <SD_disk_read+0xa6>
				buff += 512;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800430e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	3b01      	subs	r3, #1
 8004314:	603b      	str	r3, [r7, #0]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1ed      	bne.n	80042f8 <SD_disk_read+0x80>
 800431c:	e000      	b.n	8004320 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800431e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004320:	2100      	movs	r1, #0
 8004322:	204c      	movs	r0, #76	@ 0x4c
 8004324:	f7ff fe51 	bl	8003fca <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004328:	f7ff fcfa 	bl	8003d20 <DESELECT>
	SPI_RxByte();
 800432c:	f7ff fd3a 	bl	8003da4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	24000000 	.word	0x24000000
 8004348:	24000194 	.word	0x24000194

0800434c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	4603      	mov	r3, r0
 800435a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <SD_disk_write+0x1c>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <SD_disk_write+0x20>
 8004368:	2304      	movs	r3, #4
 800436a:	e06b      	b.n	8004444 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800436c:	4b37      	ldr	r3, [pc, #220]	@ (800444c <SD_disk_write+0x100>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <SD_disk_write+0x32>
 800437a:	2303      	movs	r3, #3
 800437c:	e062      	b.n	8004444 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800437e:	4b33      	ldr	r3, [pc, #204]	@ (800444c <SD_disk_write+0x100>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <SD_disk_write+0x44>
 800438c:	2302      	movs	r3, #2
 800438e:	e059      	b.n	8004444 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004390:	4b2f      	ldr	r3, [pc, #188]	@ (8004450 <SD_disk_write+0x104>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <SD_disk_write+0x56>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	025b      	lsls	r3, r3, #9
 80043a0:	607b      	str	r3, [r7, #4]

	SELECT();
 80043a2:	f7ff fcb1 	bl	8003d08 <SELECT>

	if (count == 1)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d110      	bne.n	80043ce <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	2058      	movs	r0, #88	@ 0x58
 80043b0:	f7ff fe0b 	bl	8003fca <SD_SendCmd>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d13a      	bne.n	8004430 <SD_disk_write+0xe4>
 80043ba:	21fe      	movs	r1, #254	@ 0xfe
 80043bc:	68b8      	ldr	r0, [r7, #8]
 80043be:	f7ff fdc1 	bl	8003f44 <SD_TxDataBlock>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d033      	beq.n	8004430 <SD_disk_write+0xe4>
			count = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	e030      	b.n	8004430 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80043ce:	4b20      	ldr	r3, [pc, #128]	@ (8004450 <SD_disk_write+0x104>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80043da:	2100      	movs	r1, #0
 80043dc:	2077      	movs	r0, #119	@ 0x77
 80043de:	f7ff fdf4 	bl	8003fca <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80043e2:	6839      	ldr	r1, [r7, #0]
 80043e4:	2057      	movs	r0, #87	@ 0x57
 80043e6:	f7ff fdf0 	bl	8003fca <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	2059      	movs	r0, #89	@ 0x59
 80043ee:	f7ff fdec 	bl	8003fca <SD_SendCmd>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d11b      	bne.n	8004430 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80043f8:	21fc      	movs	r1, #252	@ 0xfc
 80043fa:	68b8      	ldr	r0, [r7, #8]
 80043fc:	f7ff fda2 	bl	8003f44 <SD_TxDataBlock>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <SD_disk_write+0xd0>
				buff += 512;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800440c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	3b01      	subs	r3, #1
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1ee      	bne.n	80043f8 <SD_disk_write+0xac>
 800441a:	e000      	b.n	800441e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800441c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800441e:	21fd      	movs	r1, #253	@ 0xfd
 8004420:	2000      	movs	r0, #0
 8004422:	f7ff fd8f 	bl	8003f44 <SD_TxDataBlock>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <SD_disk_write+0xe4>
			{
				count = 1;
 800442c:	2301      	movs	r3, #1
 800442e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004430:	f7ff fc76 	bl	8003d20 <DESELECT>
	SPI_RxByte();
 8004434:	f7ff fcb6 	bl	8003da4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf14      	ite	ne
 800443e:	2301      	movne	r3, #1
 8004440:	2300      	moveq	r3, #0
 8004442:	b2db      	uxtb	r3, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	24000000 	.word	0x24000000
 8004450:	24000194 	.word	0x24000194

08004454 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004454:	b590      	push	{r4, r7, lr}
 8004456:	b08b      	sub	sp, #44	@ 0x2c
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	603a      	str	r2, [r7, #0]
 800445e:	71fb      	strb	r3, [r7, #7]
 8004460:	460b      	mov	r3, r1
 8004462:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <SD_disk_ioctl+0x1e>
 800446e:	2304      	movs	r3, #4
 8004470:	e113      	b.n	800469a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8004478:	79bb      	ldrb	r3, [r7, #6]
 800447a:	2b05      	cmp	r3, #5
 800447c:	d124      	bne.n	80044c8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d012      	beq.n	80044ac <SD_disk_ioctl+0x58>
 8004486:	2b02      	cmp	r3, #2
 8004488:	dc1a      	bgt.n	80044c0 <SD_disk_ioctl+0x6c>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <SD_disk_ioctl+0x40>
 800448e:	2b01      	cmp	r3, #1
 8004490:	d006      	beq.n	80044a0 <SD_disk_ioctl+0x4c>
 8004492:	e015      	b.n	80044c0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004494:	f7ff fd0e 	bl	8003eb4 <SD_PowerOff>
			res = RES_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800449e:	e0fa      	b.n	8004696 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80044a0:	f7ff fcc6 	bl	8003e30 <SD_PowerOn>
			res = RES_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80044aa:	e0f4      	b.n	8004696 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	1c5c      	adds	r4, r3, #1
 80044b0:	f7ff fd0c 	bl	8003ecc <SD_CheckPower>
 80044b4:	4603      	mov	r3, r0
 80044b6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80044b8:	2300      	movs	r3, #0
 80044ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80044be:	e0ea      	b.n	8004696 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80044c0:	2304      	movs	r3, #4
 80044c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80044c6:	e0e6      	b.n	8004696 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80044c8:	4b76      	ldr	r3, [pc, #472]	@ (80046a4 <SD_disk_ioctl+0x250>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <SD_disk_ioctl+0x86>
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0df      	b.n	800469a <SD_disk_ioctl+0x246>

		SELECT();
 80044da:	f7ff fc15 	bl	8003d08 <SELECT>

		switch (ctrl)
 80044de:	79bb      	ldrb	r3, [r7, #6]
 80044e0:	2b0d      	cmp	r3, #13
 80044e2:	f200 80c9 	bhi.w	8004678 <SD_disk_ioctl+0x224>
 80044e6:	a201      	add	r2, pc, #4	@ (adr r2, 80044ec <SD_disk_ioctl+0x98>)
 80044e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ec:	080045e3 	.word	0x080045e3
 80044f0:	08004525 	.word	0x08004525
 80044f4:	080045d3 	.word	0x080045d3
 80044f8:	08004679 	.word	0x08004679
 80044fc:	08004679 	.word	0x08004679
 8004500:	08004679 	.word	0x08004679
 8004504:	08004679 	.word	0x08004679
 8004508:	08004679 	.word	0x08004679
 800450c:	08004679 	.word	0x08004679
 8004510:	08004679 	.word	0x08004679
 8004514:	08004679 	.word	0x08004679
 8004518:	080045f5 	.word	0x080045f5
 800451c:	08004619 	.word	0x08004619
 8004520:	0800463d 	.word	0x0800463d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004524:	2100      	movs	r1, #0
 8004526:	2049      	movs	r0, #73	@ 0x49
 8004528:	f7ff fd4f 	bl	8003fca <SD_SendCmd>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	f040 80a6 	bne.w	8004680 <SD_disk_ioctl+0x22c>
 8004534:	f107 030c 	add.w	r3, r7, #12
 8004538:	2110      	movs	r1, #16
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fcd2 	bl	8003ee4 <SD_RxDataBlock>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 809c 	beq.w	8004680 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004548:	7b3b      	ldrb	r3, [r7, #12]
 800454a:	099b      	lsrs	r3, r3, #6
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b01      	cmp	r3, #1
 8004550:	d10d      	bne.n	800456e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004552:	7d7b      	ldrb	r3, [r7, #21]
 8004554:	461a      	mov	r2, r3
 8004556:	7d3b      	ldrb	r3, [r7, #20]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	b29b      	uxth	r3, r3
 800455c:	4413      	add	r3, r2
 800455e:	b29b      	uxth	r3, r3
 8004560:	3301      	adds	r3, #1
 8004562:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004564:	8bfb      	ldrh	r3, [r7, #30]
 8004566:	029a      	lsls	r2, r3, #10
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e02d      	b.n	80045ca <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800456e:	7c7b      	ldrb	r3, [r7, #17]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	b2da      	uxtb	r2, r3
 8004576:	7dbb      	ldrb	r3, [r7, #22]
 8004578:	09db      	lsrs	r3, r3, #7
 800457a:	b2db      	uxtb	r3, r3
 800457c:	4413      	add	r3, r2
 800457e:	b2da      	uxtb	r2, r3
 8004580:	7d7b      	ldrb	r3, [r7, #21]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f003 0306 	and.w	r3, r3, #6
 800458a:	b2db      	uxtb	r3, r3
 800458c:	4413      	add	r3, r2
 800458e:	b2db      	uxtb	r3, r3
 8004590:	3302      	adds	r3, #2
 8004592:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004596:	7d3b      	ldrb	r3, [r7, #20]
 8004598:	099b      	lsrs	r3, r3, #6
 800459a:	b2db      	uxtb	r3, r3
 800459c:	461a      	mov	r2, r3
 800459e:	7cfb      	ldrb	r3, [r7, #19]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	4413      	add	r3, r2
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	7cbb      	ldrb	r3, [r7, #18]
 80045aa:	029b      	lsls	r3, r3, #10
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80045bc:	8bfa      	ldrh	r2, [r7, #30]
 80045be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80045c2:	3b09      	subs	r3, #9
 80045c4:	409a      	lsls	r2, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80045d0:	e056      	b.n	8004680 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045d8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80045e0:	e055      	b.n	800468e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80045e2:	f7ff fc0b 	bl	8003dfc <SD_ReadyWait>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2bff      	cmp	r3, #255	@ 0xff
 80045ea:	d14b      	bne.n	8004684 <SD_disk_ioctl+0x230>
 80045ec:	2300      	movs	r3, #0
 80045ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80045f2:	e047      	b.n	8004684 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80045f4:	2100      	movs	r1, #0
 80045f6:	2049      	movs	r0, #73	@ 0x49
 80045f8:	f7ff fce7 	bl	8003fca <SD_SendCmd>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d142      	bne.n	8004688 <SD_disk_ioctl+0x234>
 8004602:	2110      	movs	r1, #16
 8004604:	6a38      	ldr	r0, [r7, #32]
 8004606:	f7ff fc6d 	bl	8003ee4 <SD_RxDataBlock>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d03b      	beq.n	8004688 <SD_disk_ioctl+0x234>
 8004610:	2300      	movs	r3, #0
 8004612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004616:	e037      	b.n	8004688 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004618:	2100      	movs	r1, #0
 800461a:	204a      	movs	r0, #74	@ 0x4a
 800461c:	f7ff fcd5 	bl	8003fca <SD_SendCmd>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d132      	bne.n	800468c <SD_disk_ioctl+0x238>
 8004626:	2110      	movs	r1, #16
 8004628:	6a38      	ldr	r0, [r7, #32]
 800462a:	f7ff fc5b 	bl	8003ee4 <SD_RxDataBlock>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d02b      	beq.n	800468c <SD_disk_ioctl+0x238>
 8004634:	2300      	movs	r3, #0
 8004636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800463a:	e027      	b.n	800468c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800463c:	2100      	movs	r1, #0
 800463e:	207a      	movs	r0, #122	@ 0x7a
 8004640:	f7ff fcc3 	bl	8003fca <SD_SendCmd>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d116      	bne.n	8004678 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800464a:	2300      	movs	r3, #0
 800464c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004650:	e00b      	b.n	800466a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004652:	6a3c      	ldr	r4, [r7, #32]
 8004654:	1c63      	adds	r3, r4, #1
 8004656:	623b      	str	r3, [r7, #32]
 8004658:	f7ff fba4 	bl	8003da4 <SPI_RxByte>
 800465c:	4603      	mov	r3, r0
 800465e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004660:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004664:	3301      	adds	r3, #1
 8004666:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800466a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800466e:	2b03      	cmp	r3, #3
 8004670:	d9ef      	bls.n	8004652 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004678:	2304      	movs	r3, #4
 800467a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800467e:	e006      	b.n	800468e <SD_disk_ioctl+0x23a>
			break;
 8004680:	bf00      	nop
 8004682:	e004      	b.n	800468e <SD_disk_ioctl+0x23a>
			break;
 8004684:	bf00      	nop
 8004686:	e002      	b.n	800468e <SD_disk_ioctl+0x23a>
			break;
 8004688:	bf00      	nop
 800468a:	e000      	b.n	800468e <SD_disk_ioctl+0x23a>
			break;
 800468c:	bf00      	nop
		}

		DESELECT();
 800468e:	f7ff fb47 	bl	8003d20 <DESELECT>
		SPI_RxByte();
 8004692:	f7ff fb87 	bl	8003da4 <SPI_RxByte>
	}

	return res;
 8004696:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800469a:	4618      	mov	r0, r3
 800469c:	372c      	adds	r7, #44	@ 0x2c
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd90      	pop	{r4, r7, pc}
 80046a2:	bf00      	nop
 80046a4:	24000000 	.word	0x24000000

080046a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	@ 0x38
 80046ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	609a      	str	r2, [r3, #8]
 80046ba:	60da      	str	r2, [r3, #12]
 80046bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046be:	4b8b      	ldr	r3, [pc, #556]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046c4:	4a89      	ldr	r2, [pc, #548]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046c6:	f043 0310 	orr.w	r3, r3, #16
 80046ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046ce:	4b87      	ldr	r3, [pc, #540]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046dc:	4b83      	ldr	r3, [pc, #524]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046e2:	4a82      	ldr	r2, [pc, #520]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046ec:	4b7f      	ldr	r3, [pc, #508]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fa:	4b7c      	ldr	r3, [pc, #496]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004700:	4a7a      	ldr	r2, [pc, #488]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800470a:	4b78      	ldr	r3, [pc, #480]	@ (80048ec <MX_GPIO_Init+0x244>)
 800470c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004718:	4b74      	ldr	r3, [pc, #464]	@ (80048ec <MX_GPIO_Init+0x244>)
 800471a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800471e:	4a73      	ldr	r2, [pc, #460]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004720:	f043 0320 	orr.w	r3, r3, #32
 8004724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004728:	4b70      	ldr	r3, [pc, #448]	@ (80048ec <MX_GPIO_Init+0x244>)
 800472a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004736:	4b6d      	ldr	r3, [pc, #436]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800473c:	4a6b      	ldr	r2, [pc, #428]	@ (80048ec <MX_GPIO_Init+0x244>)
 800473e:	f043 0302 	orr.w	r3, r3, #2
 8004742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004746:	4b69      	ldr	r3, [pc, #420]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004754:	4b65      	ldr	r3, [pc, #404]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800475a:	4a64      	ldr	r2, [pc, #400]	@ (80048ec <MX_GPIO_Init+0x244>)
 800475c:	f043 0308 	orr.w	r3, r3, #8
 8004760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004764:	4b61      	ldr	r3, [pc, #388]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004772:	4b5e      	ldr	r3, [pc, #376]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004778:	4a5c      	ldr	r2, [pc, #368]	@ (80048ec <MX_GPIO_Init+0x244>)
 800477a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800477e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004782:	4b5a      	ldr	r3, [pc, #360]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004790:	4b56      	ldr	r3, [pc, #344]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004796:	4a55      	ldr	r2, [pc, #340]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004798:	f043 0304 	orr.w	r3, r3, #4
 800479c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80047a0:	4b52      	ldr	r3, [pc, #328]	@ (80048ec <MX_GPIO_Init+0x244>)
 80047a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80047ae:	2200      	movs	r2, #0
 80047b0:	f248 0108 	movw	r1, #32776	@ 0x8008
 80047b4:	484e      	ldr	r0, [pc, #312]	@ (80048f0 <MX_GPIO_Init+0x248>)
 80047b6:	f009 f953 	bl	800da60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 80047ba:	2200      	movs	r2, #0
 80047bc:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 80047c0:	484c      	ldr	r0, [pc, #304]	@ (80048f4 <MX_GPIO_Init+0x24c>)
 80047c2:	f009 f94d 	bl	800da60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 80047c6:	2200      	movs	r2, #0
 80047c8:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 80047cc:	484a      	ldr	r0, [pc, #296]	@ (80048f8 <MX_GPIO_Init+0x250>)
 80047ce:	f009 f947 	bl	800da60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 80047d2:	2200      	movs	r2, #0
 80047d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047d8:	4848      	ldr	r0, [pc, #288]	@ (80048fc <MX_GPIO_Init+0x254>)
 80047da:	f009 f941 	bl	800da60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 80047de:	2200      	movs	r2, #0
 80047e0:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80047e4:	4846      	ldr	r0, [pc, #280]	@ (8004900 <MX_GPIO_Init+0x258>)
 80047e6:	f009 f93b 	bl	800da60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 80047ea:	f248 0308 	movw	r3, #32776	@ 0x8008
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047f0:	2301      	movs	r3, #1
 80047f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f8:	2300      	movs	r3, #0
 80047fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004800:	4619      	mov	r1, r3
 8004802:	483b      	ldr	r0, [pc, #236]	@ (80048f0 <MX_GPIO_Init+0x248>)
 8004804:	f008 ff6c 	bl	800d6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004808:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800480e:	2301      	movs	r3, #1
 8004810:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004812:	2300      	movs	r3, #0
 8004814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004816:	2300      	movs	r3, #0
 8004818:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800481a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800481e:	4619      	mov	r1, r3
 8004820:	4834      	ldr	r0, [pc, #208]	@ (80048f4 <MX_GPIO_Init+0x24c>)
 8004822:	f008 ff5d 	bl	800d6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800482a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800482c:	2300      	movs	r3, #0
 800482e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004838:	4619      	mov	r1, r3
 800483a:	482e      	ldr	r0, [pc, #184]	@ (80048f4 <MX_GPIO_Init+0x24c>)
 800483c:	f008 ff50 	bl	800d6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004840:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004846:	2301      	movs	r3, #1
 8004848:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484a:	2300      	movs	r3, #0
 800484c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484e:	2300      	movs	r3, #0
 8004850:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004856:	4619      	mov	r1, r3
 8004858:	4827      	ldr	r0, [pc, #156]	@ (80048f8 <MX_GPIO_Init+0x250>)
 800485a:	f008 ff41 	bl	800d6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 800485e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004864:	2301      	movs	r3, #1
 8004866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	2300      	movs	r3, #0
 800486a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800486c:	2301      	movs	r3, #1
 800486e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004874:	4619      	mov	r1, r3
 8004876:	4820      	ldr	r0, [pc, #128]	@ (80048f8 <MX_GPIO_Init+0x250>)
 8004878:	f008 ff32 	bl	800d6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 800487c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004882:	2301      	movs	r3, #1
 8004884:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	2300      	movs	r3, #0
 8004888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800488a:	2300      	movs	r3, #0
 800488c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 800488e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004892:	4619      	mov	r1, r3
 8004894:	4819      	ldr	r0, [pc, #100]	@ (80048fc <MX_GPIO_Init+0x254>)
 8004896:	f008 ff23 	bl	800d6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 800489a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048a0:	2301      	movs	r3, #1
 80048a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a8:	2300      	movs	r3, #0
 80048aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048b0:	4619      	mov	r1, r3
 80048b2:	4813      	ldr	r0, [pc, #76]	@ (8004900 <MX_GPIO_Init+0x258>)
 80048b4:	f008 ff14 	bl	800d6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 80048b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80048be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80048c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80048c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048cc:	4619      	mov	r1, r3
 80048ce:	480b      	ldr	r0, [pc, #44]	@ (80048fc <MX_GPIO_Init+0x254>)
 80048d0:	f008 ff06 	bl	800d6e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80048d4:	2200      	movs	r2, #0
 80048d6:	2100      	movs	r1, #0
 80048d8:	2028      	movs	r0, #40	@ 0x28
 80048da:	f006 f802 	bl	800a8e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80048de:	2028      	movs	r0, #40	@ 0x28
 80048e0:	f006 f819 	bl	800a916 <HAL_NVIC_EnableIRQ>

}
 80048e4:	bf00      	nop
 80048e6:	3738      	adds	r7, #56	@ 0x38
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	58024400 	.word	0x58024400
 80048f0:	58021000 	.word	0x58021000
 80048f4:	58020400 	.word	0x58020400
 80048f8:	58020c00 	.word	0x58020c00
 80048fc:	58021800 	.word	0x58021800
 8004900:	58020000 	.word	0x58020000

08004904 <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004908:	4b1d      	ldr	r3, [pc, #116]	@ (8004980 <MX_I2C5_Init+0x7c>)
 800490a:	4a1e      	ldr	r2, [pc, #120]	@ (8004984 <MX_I2C5_Init+0x80>)
 800490c:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 800490e:	4b1c      	ldr	r3, [pc, #112]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004910:	2200      	movs	r2, #0
 8004912:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004914:	4b1a      	ldr	r3, [pc, #104]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004916:	2200      	movs	r2, #0
 8004918:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800491a:	4b19      	ldr	r3, [pc, #100]	@ (8004980 <MX_I2C5_Init+0x7c>)
 800491c:	2201      	movs	r2, #1
 800491e:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004920:	4b17      	ldr	r3, [pc, #92]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004922:	2200      	movs	r2, #0
 8004924:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004926:	4b16      	ldr	r3, [pc, #88]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004928:	2200      	movs	r2, #0
 800492a:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800492c:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <MX_I2C5_Init+0x7c>)
 800492e:	2200      	movs	r2, #0
 8004930:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004932:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004934:	2200      	movs	r2, #0
 8004936:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004938:	4b11      	ldr	r3, [pc, #68]	@ (8004980 <MX_I2C5_Init+0x7c>)
 800493a:	2200      	movs	r2, #0
 800493c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 800493e:	4810      	ldr	r0, [pc, #64]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004940:	f009 f8c2 	bl	800dac8 <HAL_I2C_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 800494a:	f002 ff91 	bl	8007870 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800494e:	2100      	movs	r1, #0
 8004950:	480b      	ldr	r0, [pc, #44]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004952:	f00b fc71 	bl	8010238 <HAL_I2CEx_ConfigAnalogFilter>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 800495c:	f002 ff88 	bl	8007870 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004960:	2100      	movs	r1, #0
 8004962:	4807      	ldr	r0, [pc, #28]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004964:	f00b fcb3 	bl	80102ce <HAL_I2CEx_ConfigDigitalFilter>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 800496e:	f002 ff7f 	bl	8007870 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004972:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004976:	f00b fcf7 	bl	8010368 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	24000198 	.word	0x24000198
 8004984:	40006400 	.word	0x40006400

08004988 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b0b8      	sub	sp, #224	@ 0xe0
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004990:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	609a      	str	r2, [r3, #8]
 800499c:	60da      	str	r2, [r3, #12]
 800499e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049a0:	f107 0310 	add.w	r3, r7, #16
 80049a4:	22b8      	movs	r2, #184	@ 0xb8
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f018 ff33 	bl	801d814 <memset>
  if(i2cHandle->Instance==I2C5)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004a60 <HAL_I2C_MspInit+0xd8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d14f      	bne.n	8004a58 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 80049b8:	f04f 0208 	mov.w	r2, #8
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 80049c4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80049c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049cc:	f107 0310 	add.w	r3, r7, #16
 80049d0:	4618      	mov	r0, r3
 80049d2:	f00c fc8d 	bl	80112f0 <HAL_RCCEx_PeriphCLKConfig>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80049dc:	f002 ff48 	bl	8007870 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049e0:	4b20      	ldr	r3, [pc, #128]	@ (8004a64 <HAL_I2C_MspInit+0xdc>)
 80049e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a64 <HAL_I2C_MspInit+0xdc>)
 80049e8:	f043 0304 	orr.w	r3, r3, #4
 80049ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a64 <HAL_I2C_MspInit+0xdc>)
 80049f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80049fe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004a02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a06:	2312      	movs	r3, #18
 8004a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004a18:	2304      	movs	r3, #4
 8004a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a1e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004a22:	4619      	mov	r1, r3
 8004a24:	4810      	ldr	r0, [pc, #64]	@ (8004a68 <HAL_I2C_MspInit+0xe0>)
 8004a26:	f008 fe5b 	bl	800d6e0 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a64 <HAL_I2C_MspInit+0xdc>)
 8004a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a30:	4a0c      	ldr	r2, [pc, #48]	@ (8004a64 <HAL_I2C_MspInit+0xdc>)
 8004a32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <HAL_I2C_MspInit+0xdc>)
 8004a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	209d      	movs	r0, #157	@ 0x9d
 8004a4e:	f005 ff48 	bl	800a8e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004a52:	209d      	movs	r0, #157	@ 0x9d
 8004a54:	f005 ff5f 	bl	800a916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004a58:	bf00      	nop
 8004a5a:	37e0      	adds	r7, #224	@ 0xe0
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40006400 	.word	0x40006400
 8004a64:	58024400 	.word	0x58024400
 8004a68:	58020800 	.word	0x58020800

08004a6c <__NVIC_SystemReset>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004a70:	f3bf 8f4f 	dsb	sy
}
 8004a74:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004a76:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <__NVIC_SystemReset+0x24>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004a7e:	4904      	ldr	r1, [pc, #16]	@ (8004a90 <__NVIC_SystemReset+0x24>)
 8004a80:	4b04      	ldr	r3, [pc, #16]	@ (8004a94 <__NVIC_SystemReset+0x28>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a86:	f3bf 8f4f 	dsb	sy
}
 8004a8a:	bf00      	nop
    __NOP();
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <__NVIC_SystemReset+0x20>
 8004a90:	e000ed00 	.word	0xe000ed00
 8004a94:	05fa0004 	.word	0x05fa0004

08004a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004a9e:	f002 febb 	bl	8007818 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004aa2:	f003 fe0f 	bl	80086c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004aa6:	f000 ff03 	bl	80058b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004aaa:	f000 ff73 	bl	8005994 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aae:	f7ff fdfb 	bl	80046a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ab2:	f7fe fe93 	bl	80037dc <MX_DMA_Init>
  MX_I2C5_Init();
 8004ab6:	f7ff ff25 	bl	8004904 <MX_I2C5_Init>
  MX_ADC2_Init();
 8004aba:	f7fe fda1 	bl	8003600 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004abe:	f002 ff33 	bl	8007928 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004ac2:	f003 fd17 	bl	80084f4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004ac6:	f003 fa35 	bl	8007f34 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004aca:	f003 fbab 	bl	8008224 <MX_TIM8_Init>
  MX_TIM3_Init();
 8004ace:	f003 fb2d 	bl	800812c <MX_TIM3_Init>
  MX_FATFS_Init();
 8004ad2:	f015 fceb 	bl	801a4ac <MX_FATFS_Init>
  MX_TIM2_Init();
 8004ad6:	f003 fad5 	bl	8008084 <MX_TIM2_Init>
  MX_SPI1_Init();
 8004ada:	f002 fecf 	bl	800787c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ae4:	48b0      	ldr	r0, [pc, #704]	@ (8004da8 <main+0x310>)
 8004ae6:	f008 ffbb 	bl	800da60 <HAL_GPIO_WritePin>


  	  STARTUP = 1;
 8004aea:	4bb0      	ldr	r3, [pc, #704]	@ (8004dac <main+0x314>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	701a      	strb	r2, [r3, #0]

  	DRON_ON_GRUND = 1;
 8004af0:	4baf      	ldr	r3, [pc, #700]	@ (8004db0 <main+0x318>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	701a      	strb	r2, [r3, #0]

  	MPU6050.Acc.Acc_Scale = 8192;
 8004af6:	4baf      	ldr	r3, [pc, #700]	@ (8004db4 <main+0x31c>)
 8004af8:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8004afc:	619a      	str	r2, [r3, #24]
  	MPU6050.Acc.acc_x_cal = 0;
 8004afe:	4bad      	ldr	r3, [pc, #692]	@ (8004db4 <main+0x31c>)
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	61da      	str	r2, [r3, #28]
  	MPU6050.Acc.acc_y_cal = 0;
 8004b06:	4bab      	ldr	r3, [pc, #684]	@ (8004db4 <main+0x31c>)
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	621a      	str	r2, [r3, #32]
  	MPU6050.Acc.acc_z_cal = 0;
 8004b0e:	4ba9      	ldr	r3, [pc, #676]	@ (8004db4 <main+0x31c>)
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	625a      	str	r2, [r3, #36]	@ 0x24
  	MPU6050.Acc.ax_ang = 0;
 8004b16:	4ba7      	ldr	r3, [pc, #668]	@ (8004db4 <main+0x31c>)
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	60da      	str	r2, [r3, #12]
  	MPU6050.Acc.ay_ang = 0;
 8004b1e:	4ba5      	ldr	r3, [pc, #660]	@ (8004db4 <main+0x31c>)
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	611a      	str	r2, [r3, #16]
  	MPU6050.Acc.az_ang = 0;
 8004b26:	4ba3      	ldr	r3, [pc, #652]	@ (8004db4 <main+0x31c>)
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	615a      	str	r2, [r3, #20]
  	MPU6050.Acc.ax = 0;
 8004b2e:	4ba1      	ldr	r3, [pc, #644]	@ (8004db4 <main+0x31c>)
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
  	MPU6050.Acc.ay = 0;
 8004b36:	4b9f      	ldr	r3, [pc, #636]	@ (8004db4 <main+0x31c>)
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	605a      	str	r2, [r3, #4]
  	MPU6050.Acc.az = 0;
 8004b3e:	4b9d      	ldr	r3, [pc, #628]	@ (8004db4 <main+0x31c>)
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	609a      	str	r2, [r3, #8]
  	MPU6050.Gyr.Gyr_Scale = 65.5;
 8004b46:	4b9b      	ldr	r3, [pc, #620]	@ (8004db4 <main+0x31c>)
 8004b48:	4a9b      	ldr	r2, [pc, #620]	@ (8004db8 <main+0x320>)
 8004b4a:	635a      	str	r2, [r3, #52]	@ 0x34
  	MPU6050.Gyr.gyr_x_cal = 0;
 8004b4c:	4b99      	ldr	r3, [pc, #612]	@ (8004db4 <main+0x31c>)
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	639a      	str	r2, [r3, #56]	@ 0x38
  	MPU6050.Gyr.gyr_y_cal = 0;
 8004b54:	4b97      	ldr	r3, [pc, #604]	@ (8004db4 <main+0x31c>)
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  	MPU6050.Gyr.gyr_z_cal = 0;
 8004b5c:	4b95      	ldr	r3, [pc, #596]	@ (8004db4 <main+0x31c>)
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	641a      	str	r2, [r3, #64]	@ 0x40
  	MPU6050.Gyr.gx = 0;
 8004b64:	4b93      	ldr	r3, [pc, #588]	@ (8004db4 <main+0x31c>)
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  	MPU6050.Gyr.gy = 0;
 8004b6c:	4b91      	ldr	r3, [pc, #580]	@ (8004db4 <main+0x31c>)
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  	MPU6050.Gyr.gz = 0;
 8004b74:	4b8f      	ldr	r3, [pc, #572]	@ (8004db4 <main+0x31c>)
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  	MPU6050.MPU6050_IRQ = 0;
 8004b7c:	4b8d      	ldr	r3, [pc, #564]	@ (8004db4 <main+0x31c>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52



	NRF24.NRF24_MODE = NRF24_Error;
 8004b84:	4b8d      	ldr	r3, [pc, #564]	@ (8004dbc <main+0x324>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	NRF24.Status = NRF24_Ready;
 8004b8c:	4b8b      	ldr	r3, [pc, #556]	@ (8004dbc <main+0x324>)
 8004b8e:	2204      	movs	r2, #4
 8004b90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	NRF24.Message_Status = 0;
 8004b94:	4b89      	ldr	r3, [pc, #548]	@ (8004dbc <main+0x324>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	NRF24.NRF24_Message_count = 0;
 8004b9c:	4b87      	ldr	r3, [pc, #540]	@ (8004dbc <main+0x324>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
	NRF24.Timer_1 = 0;
 8004ba4:	4b85      	ldr	r3, [pc, #532]	@ (8004dbc <main+0x324>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	NRF24.Timer_2 = 0;
 8004bac:	4b83      	ldr	r3, [pc, #524]	@ (8004dbc <main+0x324>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	NRF24.Step = 0;
 8004bb4:	4b81      	ldr	r3, [pc, #516]	@ (8004dbc <main+0x324>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	NRF24.SPI_Rx_Inte = 0;
 8004bbc:	4b7f      	ldr	r3, [pc, #508]	@ (8004dbc <main+0x324>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	NRF24.SPI_Tx_Inte = 0;
 8004bc4:	4b7d      	ldr	r3, [pc, #500]	@ (8004dbc <main+0x324>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89



	BMP180.BMP180_IRQ = 0;
 8004bcc:	4b7c      	ldr	r3, [pc, #496]	@ (8004dc0 <main+0x328>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	BMP180.ampritude = 0;
 8004bd4:	4b7a      	ldr	r3, [pc, #488]	@ (8004dc0 <main+0x328>)
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	651a      	str	r2, [r3, #80]	@ 0x50
	BMP180.pres = 0;
 8004bdc:	4b78      	ldr	r3, [pc, #480]	@ (8004dc0 <main+0x328>)
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	64da      	str	r2, [r3, #76]	@ 0x4c
	BMP180.startpres = 0;
 8004be4:	4b76      	ldr	r3, [pc, #472]	@ (8004dc0 <main+0x328>)
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	655a      	str	r2, [r3, #84]	@ 0x54
	BMP180.temp = 0;
 8004bec:	4b74      	ldr	r3, [pc, #464]	@ (8004dc0 <main+0x328>)
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	649a      	str	r2, [r3, #72]	@ 0x48
	BMP180.Raw_Data.pressure = 0;
 8004bf4:	4b72      	ldr	r3, [pc, #456]	@ (8004dc0 <main+0x328>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	645a      	str	r2, [r3, #68]	@ 0x44
	BMP180.Raw_Data.temperature = 0;
 8004bfa:	4b71      	ldr	r3, [pc, #452]	@ (8004dc0 <main+0x328>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	641a      	str	r2, [r3, #64]	@ 0x40



	MYDRON.dronheight = 0;
 8004c00:	4b70      	ldr	r3, [pc, #448]	@ (8004dc4 <main+0x32c>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a
	MYDRON.batterysize = 0;
 8004c08:	4b6e      	ldr	r3, [pc, #440]	@ (8004dc4 <main+0x32c>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
	MYDRON.Pitch.Angle_Error_Sum = 0;
 8004c10:	4b6c      	ldr	r3, [pc, #432]	@ (8004dc4 <main+0x32c>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	625a      	str	r2, [r3, #36]	@ 0x24
	MYDRON.Pitch.Angle_Error = 0;
 8004c16:	4b6b      	ldr	r3, [pc, #428]	@ (8004dc4 <main+0x32c>)
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	615a      	str	r2, [r3, #20]
	MYDRON.Pitch.Angular_Rate_Error = 0;
 8004c1e:	4b69      	ldr	r3, [pc, #420]	@ (8004dc4 <main+0x32c>)
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	619a      	str	r2, [r3, #24]
	MYDRON.Pitch.Angular_Rate_Error_Sum = 0;
 8004c26:	4b67      	ldr	r3, [pc, #412]	@ (8004dc4 <main+0x32c>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	629a      	str	r2, [r3, #40]	@ 0x28
	MYDRON.Pitch.Last_Wanted_rx = 0;
 8004c2c:	4b65      	ldr	r3, [pc, #404]	@ (8004dc4 <main+0x32c>)
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	605a      	str	r2, [r3, #4]
	MYDRON.Pitch.Now = 0;
 8004c34:	4b63      	ldr	r3, [pc, #396]	@ (8004dc4 <main+0x32c>)
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	611a      	str	r2, [r3, #16]
	MYDRON.Pitch.Old_Angle_Error = 0;
 8004c3c:	4b61      	ldr	r3, [pc, #388]	@ (8004dc4 <main+0x32c>)
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	61da      	str	r2, [r3, #28]
	MYDRON.Pitch.Old_Angular_Rate_Error = 0;
 8004c44:	4b5f      	ldr	r3, [pc, #380]	@ (8004dc4 <main+0x32c>)
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	621a      	str	r2, [r3, #32]
	MYDRON.Pitch.Value = 0;
 8004c4c:	4b5d      	ldr	r3, [pc, #372]	@ (8004dc4 <main+0x32c>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	859a      	strh	r2, [r3, #44]	@ 0x2c
	MYDRON.Pitch.Wanted = 0;
 8004c52:	4b5c      	ldr	r3, [pc, #368]	@ (8004dc4 <main+0x32c>)
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	609a      	str	r2, [r3, #8]
	MYDRON.Pitch.Wanted_Factor = 0.65;
 8004c5a:	4b5a      	ldr	r3, [pc, #360]	@ (8004dc4 <main+0x32c>)
 8004c5c:	4a5a      	ldr	r2, [pc, #360]	@ (8004dc8 <main+0x330>)
 8004c5e:	60da      	str	r2, [r3, #12]
	MYDRON.Pitch.Wanted_rx = 0;
 8004c60:	4b58      	ldr	r3, [pc, #352]	@ (8004dc4 <main+0x32c>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
	MYDRON.Pitch.Wanted_v = 0;
 8004c66:	4b57      	ldr	r3, [pc, #348]	@ (8004dc4 <main+0x32c>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	805a      	strh	r2, [r3, #2]
	MYDRON.Rool.Angle_Error_Sum = 0;
 8004c6c:	4b55      	ldr	r3, [pc, #340]	@ (8004dc4 <main+0x32c>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	655a      	str	r2, [r3, #84]	@ 0x54
	MYDRON.Rool.Angle_Error = 0;
 8004c72:	4b54      	ldr	r3, [pc, #336]	@ (8004dc4 <main+0x32c>)
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	645a      	str	r2, [r3, #68]	@ 0x44
	MYDRON.Rool.Angular_Rate_Error = 0;
 8004c7a:	4b52      	ldr	r3, [pc, #328]	@ (8004dc4 <main+0x32c>)
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	649a      	str	r2, [r3, #72]	@ 0x48
	MYDRON.Rool.Angular_Rate_Error_Sum = 0;
 8004c82:	4b50      	ldr	r3, [pc, #320]	@ (8004dc4 <main+0x32c>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	659a      	str	r2, [r3, #88]	@ 0x58
	MYDRON.Rool.Last_Wanted_rx = 0;
 8004c88:	4b4e      	ldr	r3, [pc, #312]	@ (8004dc4 <main+0x32c>)
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	635a      	str	r2, [r3, #52]	@ 0x34
	MYDRON.Rool.Now = 0;
 8004c90:	4b4c      	ldr	r3, [pc, #304]	@ (8004dc4 <main+0x32c>)
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	641a      	str	r2, [r3, #64]	@ 0x40
	MYDRON.Rool.Old_Angle_Error = 0;
 8004c98:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc4 <main+0x32c>)
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	64da      	str	r2, [r3, #76]	@ 0x4c
	MYDRON.Rool.Old_Angular_Rate_Error = 0;
 8004ca0:	4b48      	ldr	r3, [pc, #288]	@ (8004dc4 <main+0x32c>)
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	651a      	str	r2, [r3, #80]	@ 0x50
	MYDRON.Rool.Value = 0;
 8004ca8:	4b46      	ldr	r3, [pc, #280]	@ (8004dc4 <main+0x32c>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	MYDRON.Rool.Wanted = 0;
 8004cb0:	4b44      	ldr	r3, [pc, #272]	@ (8004dc4 <main+0x32c>)
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	639a      	str	r2, [r3, #56]	@ 0x38
	MYDRON.Rool.Wanted_Factor = 0.66;
 8004cb8:	4b42      	ldr	r3, [pc, #264]	@ (8004dc4 <main+0x32c>)
 8004cba:	4a44      	ldr	r2, [pc, #272]	@ (8004dcc <main+0x334>)
 8004cbc:	63da      	str	r2, [r3, #60]	@ 0x3c
	MYDRON.Rool.Wanted_rx = 0;
 8004cbe:	4b41      	ldr	r3, [pc, #260]	@ (8004dc4 <main+0x32c>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	861a      	strh	r2, [r3, #48]	@ 0x30
	MYDRON.Rool.Wanted_v = 0;
 8004cc4:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc4 <main+0x32c>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	865a      	strh	r2, [r3, #50]	@ 0x32
	MYDRON.Yaw.Angle_Error_Sum = 0;
 8004cca:	4b3e      	ldr	r3, [pc, #248]	@ (8004dc4 <main+0x32c>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	MYDRON.Yaw.Angle_Error = 0;
 8004cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8004dc4 <main+0x32c>)
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	675a      	str	r2, [r3, #116]	@ 0x74
	MYDRON.Yaw.Angular_Rate_Error = 0;
 8004cda:	4b3a      	ldr	r3, [pc, #232]	@ (8004dc4 <main+0x32c>)
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	679a      	str	r2, [r3, #120]	@ 0x78
	MYDRON.Yaw.Angular_Rate_Error_Sum = 0;
 8004ce2:	4b38      	ldr	r3, [pc, #224]	@ (8004dc4 <main+0x32c>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	MYDRON.Yaw.Last_Wanted_rx = 0;
 8004cea:	4b36      	ldr	r3, [pc, #216]	@ (8004dc4 <main+0x32c>)
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	665a      	str	r2, [r3, #100]	@ 0x64
	MYDRON.Yaw.Now = 0;
 8004cf2:	4b34      	ldr	r3, [pc, #208]	@ (8004dc4 <main+0x32c>)
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	671a      	str	r2, [r3, #112]	@ 0x70
	MYDRON.Yaw.Old_Angle_Error = 0;
 8004cfa:	4b32      	ldr	r3, [pc, #200]	@ (8004dc4 <main+0x32c>)
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	67da      	str	r2, [r3, #124]	@ 0x7c
	MYDRON.Yaw.Old_Angular_Rate_Error = 0;
 8004d02:	4b30      	ldr	r3, [pc, #192]	@ (8004dc4 <main+0x32c>)
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	MYDRON.Yaw.Value = 0;
 8004d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8004dc4 <main+0x32c>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
	MYDRON.Yaw.Wanted = 0;
 8004d14:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc4 <main+0x32c>)
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	669a      	str	r2, [r3, #104]	@ 0x68
	MYDRON.Yaw.Wanted_Factor = 0.6;
 8004d1c:	4b29      	ldr	r3, [pc, #164]	@ (8004dc4 <main+0x32c>)
 8004d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd0 <main+0x338>)
 8004d20:	66da      	str	r2, [r3, #108]	@ 0x6c
	MYDRON.Yaw.Wanted_rx = 0;
 8004d22:	4b28      	ldr	r3, [pc, #160]	@ (8004dc4 <main+0x32c>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	MYDRON.Yaw.Wanted_v = 0;
 8004d2a:	4b26      	ldr	r3, [pc, #152]	@ (8004dc4 <main+0x32c>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	MYDRON.PID_Pitch.Angle_Factors[0] = 6;
 8004d32:	4b24      	ldr	r3, [pc, #144]	@ (8004dc4 <main+0x32c>)
 8004d34:	4a27      	ldr	r2, [pc, #156]	@ (8004dd4 <main+0x33c>)
 8004d36:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	MYDRON.PID_Pitch.Angle_Factors[1] = 8;
 8004d3a:	4b22      	ldr	r3, [pc, #136]	@ (8004dc4 <main+0x32c>)
 8004d3c:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004d40:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	MYDRON.PID_Pitch.Angle_Factors[2] = 25;
 8004d44:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc4 <main+0x32c>)
 8004d46:	4a24      	ldr	r2, [pc, #144]	@ (8004dd8 <main+0x340>)
 8004d48:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	MYDRON.PID_Pitch.Angle_Factors[3] = 0;
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc4 <main+0x32c>)
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	MYDRON.PID_Pitch.Angle_Factors[4] = 0;
 8004d56:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc4 <main+0x32c>)
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	MYDRON.PID_Pitch.Angular_Rate_Factors[0] = 10;
 8004d60:	4b18      	ldr	r3, [pc, #96]	@ (8004dc4 <main+0x32c>)
 8004d62:	4a1e      	ldr	r2, [pc, #120]	@ (8004ddc <main+0x344>)
 8004d64:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	MYDRON.PID_Pitch.Angular_Rate_Factors[1] = 0;
 8004d68:	4b16      	ldr	r3, [pc, #88]	@ (8004dc4 <main+0x32c>)
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	MYDRON.PID_Pitch.Angular_Rate_Factors[2] = 30;
 8004d72:	4b14      	ldr	r3, [pc, #80]	@ (8004dc4 <main+0x32c>)
 8004d74:	4a1a      	ldr	r2, [pc, #104]	@ (8004de0 <main+0x348>)
 8004d76:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	MYDRON.PID_Pitch.Angular_Rate_Factors[3] = 0;
 8004d7a:	4b12      	ldr	r3, [pc, #72]	@ (8004dc4 <main+0x32c>)
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	MYDRON.PID_Pitch.Angular_Rate_Factors[4] = 0;
 8004d84:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc4 <main+0x32c>)
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	MYDRON.PID_Pitch.Angle_Value = 0;
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc4 <main+0x32c>)
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	MYDRON.PID_Pitch.Angular_Rate_Value = 0;
 8004d98:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <main+0x32c>)
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	MYDRON.PID_Rool.Angle_Factors[0] = 5;
 8004da2:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <main+0x32c>)
 8004da4:	e01e      	b.n	8004de4 <main+0x34c>
 8004da6:	bf00      	nop
 8004da8:	58021800 	.word	0x58021800
 8004dac:	0000419c 	.word	0x0000419c
 8004db0:	000041b8 	.word	0x000041b8
 8004db4:	00000000 	.word	0x00000000
 8004db8:	42830000 	.word	0x42830000
 8004dbc:	000000cc 	.word	0x000000cc
 8004dc0:	0000006c 	.word	0x0000006c
 8004dc4:	00000158 	.word	0x00000158
 8004dc8:	3f266666 	.word	0x3f266666
 8004dcc:	3f28f5c3 	.word	0x3f28f5c3
 8004dd0:	3f19999a 	.word	0x3f19999a
 8004dd4:	40c00000 	.word	0x40c00000
 8004dd8:	41c80000 	.word	0x41c80000
 8004ddc:	41200000 	.word	0x41200000
 8004de0:	41f00000 	.word	0x41f00000
 8004de4:	4ab2      	ldr	r2, [pc, #712]	@ (80050b0 <main+0x618>)
 8004de6:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	MYDRON.PID_Rool.Angle_Factors[1] = 10;
 8004dea:	4bb2      	ldr	r3, [pc, #712]	@ (80050b4 <main+0x61c>)
 8004dec:	4ab2      	ldr	r2, [pc, #712]	@ (80050b8 <main+0x620>)
 8004dee:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	MYDRON.PID_Rool.Angle_Factors[2] = 0;
 8004df2:	4bb0      	ldr	r3, [pc, #704]	@ (80050b4 <main+0x61c>)
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	MYDRON.PID_Rool.Angle_Factors[3] = 0;
 8004dfc:	4bad      	ldr	r3, [pc, #692]	@ (80050b4 <main+0x61c>)
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	MYDRON.PID_Rool.Angle_Factors[4] = 0;
 8004e06:	4bab      	ldr	r3, [pc, #684]	@ (80050b4 <main+0x61c>)
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	MYDRON.PID_Rool.Angular_Rate_Factors[0] =  10;
 8004e10:	4ba8      	ldr	r3, [pc, #672]	@ (80050b4 <main+0x61c>)
 8004e12:	4aa9      	ldr	r2, [pc, #676]	@ (80050b8 <main+0x620>)
 8004e14:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	MYDRON.PID_Rool.Angular_Rate_Factors[1] = 0;
 8004e18:	4ba6      	ldr	r3, [pc, #664]	@ (80050b4 <main+0x61c>)
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	MYDRON.PID_Rool.Angular_Rate_Factors[2] = 20;
 8004e22:	4ba4      	ldr	r3, [pc, #656]	@ (80050b4 <main+0x61c>)
 8004e24:	4aa5      	ldr	r2, [pc, #660]	@ (80050bc <main+0x624>)
 8004e26:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	MYDRON.PID_Rool.Angular_Rate_Factors[3] = 0;
 8004e2a:	4ba2      	ldr	r3, [pc, #648]	@ (80050b4 <main+0x61c>)
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	MYDRON.PID_Rool.Angular_Rate_Factors[4] = 0;
 8004e34:	4b9f      	ldr	r3, [pc, #636]	@ (80050b4 <main+0x61c>)
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	MYDRON.PID_Rool.Angle_Value = 0;
 8004e3e:	4b9d      	ldr	r3, [pc, #628]	@ (80050b4 <main+0x61c>)
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	MYDRON.PID_Rool.Angular_Rate_Value = 0;
 8004e48:	4b9a      	ldr	r3, [pc, #616]	@ (80050b4 <main+0x61c>)
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	MYDRON.PID_Yaw.Angle_Factors[0] = 10;
 8004e52:	4b98      	ldr	r3, [pc, #608]	@ (80050b4 <main+0x61c>)
 8004e54:	4a98      	ldr	r2, [pc, #608]	@ (80050b8 <main+0x620>)
 8004e56:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
	MYDRON.PID_Yaw.Angle_Factors[1] = 0;
 8004e5a:	4b96      	ldr	r3, [pc, #600]	@ (80050b4 <main+0x61c>)
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	MYDRON.PID_Yaw.Angle_Factors[2] = 0;
 8004e64:	4b93      	ldr	r3, [pc, #588]	@ (80050b4 <main+0x61c>)
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	MYDRON.PID_Yaw.Angle_Factors[3] = 0;
 8004e6e:	4b91      	ldr	r3, [pc, #580]	@ (80050b4 <main+0x61c>)
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
	MYDRON.PID_Yaw.Angle_Factors[4] = 0;
 8004e78:	4b8e      	ldr	r3, [pc, #568]	@ (80050b4 <main+0x61c>)
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
	MYDRON.PID_Yaw.Angular_Rate_Factors[0] = 15;
 8004e82:	4b8c      	ldr	r3, [pc, #560]	@ (80050b4 <main+0x61c>)
 8004e84:	4a8e      	ldr	r2, [pc, #568]	@ (80050c0 <main+0x628>)
 8004e86:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
	MYDRON.PID_Yaw.Angular_Rate_Factors[1] = 0;
 8004e8a:	4b8a      	ldr	r3, [pc, #552]	@ (80050b4 <main+0x61c>)
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	MYDRON.PID_Yaw.Angular_Rate_Factors[2] = 5;
 8004e94:	4b87      	ldr	r3, [pc, #540]	@ (80050b4 <main+0x61c>)
 8004e96:	4a86      	ldr	r2, [pc, #536]	@ (80050b0 <main+0x618>)
 8004e98:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
	MYDRON.PID_Yaw.Angular_Rate_Factors[3] = 0;
 8004e9c:	4b85      	ldr	r3, [pc, #532]	@ (80050b4 <main+0x61c>)
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
	MYDRON.PID_Yaw.Angular_Rate_Factors[4] = 0;
 8004ea6:	4b83      	ldr	r3, [pc, #524]	@ (80050b4 <main+0x61c>)
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
	MYDRON.PID_Yaw.Angle_Value = 0;
 8004eb0:	4b80      	ldr	r3, [pc, #512]	@ (80050b4 <main+0x61c>)
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
	MYDRON.PID_Yaw.Angular_Rate_Value = 0;
 8004eba:	4b7e      	ldr	r3, [pc, #504]	@ (80050b4 <main+0x61c>)
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
	MYDRON.Thrust.Now = 0;
 8004ec4:	4b7b      	ldr	r3, [pc, #492]	@ (80050b4 <main+0x61c>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
	MYDRON.Thrust.Old_Speed_1 = min_speed;
 8004ecc:	4b79      	ldr	r3, [pc, #484]	@ (80050b4 <main+0x61c>)
 8004ece:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004ed2:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	MYDRON.Thrust.Old_Speed_2 = min_speed;
 8004ed6:	4b77      	ldr	r3, [pc, #476]	@ (80050b4 <main+0x61c>)
 8004ed8:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004edc:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
	MYDRON.Thrust.Old_Speed_3 = min_speed;
 8004ee0:	4b74      	ldr	r3, [pc, #464]	@ (80050b4 <main+0x61c>)
 8004ee2:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004ee6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	MYDRON.Thrust.Old_Speed_4 = min_speed;
 8004eea:	4b72      	ldr	r3, [pc, #456]	@ (80050b4 <main+0x61c>)
 8004eec:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004ef0:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
	MYDRON.Thrust.Speed_1 = min_speed;
 8004ef4:	4b6f      	ldr	r3, [pc, #444]	@ (80050b4 <main+0x61c>)
 8004ef6:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004efa:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	MYDRON.Thrust.Speed_2 = min_speed;
 8004efe:	4b6d      	ldr	r3, [pc, #436]	@ (80050b4 <main+0x61c>)
 8004f00:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f04:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	MYDRON.Thrust.Speed_3 = min_speed;
 8004f08:	4b6a      	ldr	r3, [pc, #424]	@ (80050b4 <main+0x61c>)
 8004f0a:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f0e:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	MYDRON.Thrust.Speed_4 = min_speed;
 8004f12:	4b68      	ldr	r3, [pc, #416]	@ (80050b4 <main+0x61c>)
 8004f14:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f18:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
	MYDRON.Thrust.Thrust_Limit = 10000;
 8004f1c:	4b65      	ldr	r3, [pc, #404]	@ (80050b4 <main+0x61c>)
 8004f1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004f22:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	MYDRON.Thrust.Values = 0;
 8004f26:	4963      	ldr	r1, [pc, #396]	@ (80050b4 <main+0x61c>)
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	MYDRON.Thrust.Wanted = 0;
 8004f34:	4b5f      	ldr	r3, [pc, #380]	@ (80050b4 <main+0x61c>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	MYDRON.Status.Battery = DRON_BATTERY_OK;
 8004f3c:	4b5d      	ldr	r3, [pc, #372]	@ (80050b4 <main+0x61c>)
 8004f3e:	2208      	movs	r2, #8
 8004f40:	f883 2155 	strb.w	r2, [r3, #341]	@ 0x155
	MYDRON.Status.Code = DRON_CODE_OK;
 8004f44:	4b5b      	ldr	r3, [pc, #364]	@ (80050b4 <main+0x61c>)
 8004f46:	2205      	movs	r2, #5
 8004f48:	f883 2156 	strb.w	r2, [r3, #342]	@ 0x156
	MYDRON.Status.Connection = DRON_CONNECTED;
 8004f4c:	4b59      	ldr	r3, [pc, #356]	@ (80050b4 <main+0x61c>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2154 	strb.w	r2, [r3, #340]	@ 0x154
	MYDRON.Status.Wobble = NO_WOBBLE;
 8004f54:	4b57      	ldr	r3, [pc, #348]	@ (80050b4 <main+0x61c>)
 8004f56:	220e      	movs	r2, #14
 8004f58:	f883 2157 	strb.w	r2, [r3, #343]	@ 0x157


  	TIM_inte_SD = 0, TIM_inte = 0;
 8004f5c:	4b59      	ldr	r3, [pc, #356]	@ (80050c4 <main+0x62c>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	4b59      	ldr	r3, [pc, #356]	@ (80050c8 <main+0x630>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 8004f68:	4b58      	ldr	r3, [pc, #352]	@ (80050cc <main+0x634>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]

  	FDP_D_Gain_AR = 0;
 8004f6e:	4b58      	ldr	r3, [pc, #352]	@ (80050d0 <main+0x638>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 0;
 8004f74:	4b57      	ldr	r3, [pc, #348]	@ (80050d4 <main+0x63c>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	801a      	strh	r2, [r3, #0]

  	commandready = 0;
 8004f7a:	4b57      	ldr	r3, [pc, #348]	@ (80050d8 <main+0x640>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 8004f80:	4b56      	ldr	r3, [pc, #344]	@ (80050dc <main+0x644>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 8004f86:	4b56      	ldr	r3, [pc, #344]	@ (80050e0 <main+0x648>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8004f8c:	4b55      	ldr	r3, [pc, #340]	@ (80050e4 <main+0x64c>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 8004f92:	4b55      	ldr	r3, [pc, #340]	@ (80050e8 <main+0x650>)
 8004f94:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004f98:	601a      	str	r2, [r3, #0]
  	i = 0, loopnum = 0;
 8004f9a:	4b54      	ldr	r3, [pc, #336]	@ (80050ec <main+0x654>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	4b53      	ldr	r3, [pc, #332]	@ (80050f0 <main+0x658>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]

  	data.ox = 0;
 8004fa6:	4b53      	ldr	r3, [pc, #332]	@ (80050f4 <main+0x65c>)
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 8004fae:	4b51      	ldr	r3, [pc, #324]	@ (80050f4 <main+0x65c>)
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 8004fb6:	4b4f      	ldr	r3, [pc, #316]	@ (80050f4 <main+0x65c>)
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 8004fbe:	4b4d      	ldr	r3, [pc, #308]	@ (80050f4 <main+0x65c>)
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 8004fc6:	4b4b      	ldr	r3, [pc, #300]	@ (80050f4 <main+0x65c>)
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 8004fce:	4b49      	ldr	r3, [pc, #292]	@ (80050f4 <main+0x65c>)
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	609a      	str	r2, [r3, #8]


  	NRF24_inte = 0;
 8004fd6:	4b48      	ldr	r3, [pc, #288]	@ (80050f8 <main+0x660>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 8004fdc:	4a47      	ldr	r2, [pc, #284]	@ (80050fc <main+0x664>)
 8004fde:	f107 0308 	add.w	r3, r7, #8
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	8019      	strh	r1, [r3, #0]
 8004fe8:	3302      	adds	r3, #2
 8004fea:	0c12      	lsrs	r2, r2, #16
 8004fec:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 8004fee:	4a44      	ldr	r2, [pc, #272]	@ (8005100 <main+0x668>)
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	8019      	strh	r1, [r3, #0]
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	0c12      	lsrs	r2, r2, #16
 8004ffc:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 8004ffe:	2201      	movs	r2, #1
 8005000:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005004:	483f      	ldr	r0, [pc, #252]	@ (8005104 <main+0x66c>)
 8005006:	f008 fd2b 	bl	800da60 <HAL_GPIO_WritePin>
  	LED_6_1;
 800500a:	2201      	movs	r2, #1
 800500c:	2108      	movs	r1, #8
 800500e:	483e      	ldr	r0, [pc, #248]	@ (8005108 <main+0x670>)
 8005010:	f008 fd26 	bl	800da60 <HAL_GPIO_WritePin>
  	LED_7_1;
 8005014:	2201      	movs	r2, #1
 8005016:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800501a:	483a      	ldr	r0, [pc, #232]	@ (8005104 <main+0x66c>)
 800501c:	f008 fd20 	bl	800da60 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 8005020:	2201      	movs	r2, #1
 8005022:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005026:	4839      	ldr	r0, [pc, #228]	@ (800510c <main+0x674>)
 8005028:	f008 fd1a 	bl	800da60 <HAL_GPIO_WritePin>
  	LED_G_1;
 800502c:	2201      	movs	r2, #1
 800502e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005032:	4835      	ldr	r0, [pc, #212]	@ (8005108 <main+0x670>)
 8005034:	f008 fd14 	bl	800da60 <HAL_GPIO_WritePin>
  	LED_Y_1;
 8005038:	2201      	movs	r2, #1
 800503a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800503e:	4834      	ldr	r0, [pc, #208]	@ (8005110 <main+0x678>)
 8005040:	f008 fd0e 	bl	800da60 <HAL_GPIO_WritePin>
  	LED_R_1;
 8005044:	2201      	movs	r2, #1
 8005046:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800504a:	4831      	ldr	r0, [pc, #196]	@ (8005110 <main+0x678>)
 800504c:	f008 fd08 	bl	800da60 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 8005050:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005054:	f003 fbc8 	bl	80087e8 <HAL_Delay>
  	LED_G_0;
 8005058:	2200      	movs	r2, #0
 800505a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800505e:	482a      	ldr	r0, [pc, #168]	@ (8005108 <main+0x670>)
 8005060:	f008 fcfe 	bl	800da60 <HAL_GPIO_WritePin>
  	LED_Y_0;
 8005064:	2200      	movs	r2, #0
 8005066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800506a:	4829      	ldr	r0, [pc, #164]	@ (8005110 <main+0x678>)
 800506c:	f008 fcf8 	bl	800da60 <HAL_GPIO_WritePin>
  	LED_R_0;
 8005070:	2200      	movs	r2, #0
 8005072:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005076:	4826      	ldr	r0, [pc, #152]	@ (8005110 <main+0x678>)
 8005078:	f008 fcf2 	bl	800da60 <HAL_GPIO_WritePin>
  	LED_5_0;
 800507c:	2200      	movs	r2, #0
 800507e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005082:	4820      	ldr	r0, [pc, #128]	@ (8005104 <main+0x66c>)
 8005084:	f008 fcec 	bl	800da60 <HAL_GPIO_WritePin>
  	LED_6_0;
 8005088:	2200      	movs	r2, #0
 800508a:	2108      	movs	r1, #8
 800508c:	481e      	ldr	r0, [pc, #120]	@ (8005108 <main+0x670>)
 800508e:	f008 fce7 	bl	800da60 <HAL_GPIO_WritePin>
  	LED_7_0;
 8005092:	2200      	movs	r2, #0
 8005094:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005098:	481a      	ldr	r0, [pc, #104]	@ (8005104 <main+0x66c>)
 800509a:	f008 fce1 	bl	800da60 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 800509e:	2200      	movs	r2, #0
 80050a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80050a4:	4819      	ldr	r0, [pc, #100]	@ (800510c <main+0x674>)
 80050a6:	f008 fcdb 	bl	800da60 <HAL_GPIO_WritePin>


  	for(int i = 0; i < 4000; i++){
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	e03b      	b.n	8005128 <main+0x690>
 80050b0:	40a00000 	.word	0x40a00000
 80050b4:	00000158 	.word	0x00000158
 80050b8:	41200000 	.word	0x41200000
 80050bc:	41a00000 	.word	0x41a00000
 80050c0:	41700000 	.word	0x41700000
 80050c4:	00004194 	.word	0x00004194
 80050c8:	00004198 	.word	0x00004198
 80050cc:	000041a0 	.word	0x000041a0
 80050d0:	000041ae 	.word	0x000041ae
 80050d4:	000041b0 	.word	0x000041b0
 80050d8:	000041da 	.word	0x000041da
 80050dc:	000041db 	.word	0x000041db
 80050e0:	000041e0 	.word	0x000041e0
 80050e4:	000041e4 	.word	0x000041e4
 80050e8:	000041b4 	.word	0x000041b4
 80050ec:	000041a4 	.word	0x000041a4
 80050f0:	000041a8 	.word	0x000041a8
 80050f4:	00000054 	.word	0x00000054
 80050f8:	000041ad 	.word	0x000041ad
 80050fc:	0801e294 	.word	0x0801e294
 8005100:	0801e298 	.word	0x0801e298
 8005104:	58020000 	.word	0x58020000
 8005108:	58021000 	.word	0x58021000
 800510c:	58020c00 	.word	0x58020c00
 8005110:	58020400 	.word	0x58020400
  		Old_Data_stack.olddata[i] = 0;
 8005114:	4ab0      	ldr	r2, [pc, #704]	@ (80053d8 <main+0x940>)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3301      	adds	r3, #1
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800512e:	dbf1      	blt.n	8005114 <main+0x67c>
  	}
  	Old_Data_stack.start_pointer = 0;
 8005130:	4ba9      	ldr	r3, [pc, #676]	@ (80053d8 <main+0x940>)
 8005132:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8005136:	2200      	movs	r2, #0
 8005138:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 800513c:	4ba6      	ldr	r3, [pc, #664]	@ (80053d8 <main+0x940>)
 800513e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8005142:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8005146:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 800514a:	4ba4      	ldr	r3, [pc, #656]	@ (80053dc <main+0x944>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 8005150:	48a3      	ldr	r0, [pc, #652]	@ (80053e0 <main+0x948>)
 8005152:	f010 fcbf 	bl	8015ad4 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 8005156:	2201      	movs	r2, #1
 8005158:	49a0      	ldr	r1, [pc, #640]	@ (80053dc <main+0x944>)
 800515a:	48a2      	ldr	r0, [pc, #648]	@ (80053e4 <main+0x94c>)
 800515c:	f004 f896 	bl	800928c <HAL_ADC_Start_DMA>
  	LED_R_1;
 8005160:	2201      	movs	r2, #1
 8005162:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005166:	48a0      	ldr	r0, [pc, #640]	@ (80053e8 <main+0x950>)
 8005168:	f008 fc7a 	bl	800da60 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 800516c:	bf00      	nop
 800516e:	4b9b      	ldr	r3, [pc, #620]	@ (80053dc <main+0x944>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0fb      	beq.n	800516e <main+0x6d6>

  	}
  	LED_R_0;
 8005176:	2200      	movs	r2, #0
 8005178:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800517c:	489a      	ldr	r0, [pc, #616]	@ (80053e8 <main+0x950>)
 800517e:	f008 fc6f 	bl	800da60 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 8005182:	f7fe fd79 	bl	8003c78 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 8005186:	2104      	movs	r1, #4
 8005188:	4898      	ldr	r0, [pc, #608]	@ (80053ec <main+0x954>)
 800518a:	f010 fdff 	bl	8015d8c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800518e:	2108      	movs	r1, #8
 8005190:	4896      	ldr	r0, [pc, #600]	@ (80053ec <main+0x954>)
 8005192:	f010 fdfb 	bl	8015d8c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005196:	210c      	movs	r1, #12
 8005198:	4894      	ldr	r0, [pc, #592]	@ (80053ec <main+0x954>)
 800519a:	f010 fdf7 	bl	8015d8c <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 800519e:	4b94      	ldr	r3, [pc, #592]	@ (80053f0 <main+0x958>)
 80051a0:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 fee6 	bl	8006f78 <RGB_LED_For_BAT>
  	if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT)
 80051ac:	4b90      	ldr	r3, [pc, #576]	@ (80053f0 <main+0x958>)
 80051ae:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80051b2:	2b07      	cmp	r3, #7
 80051b4:	d107      	bne.n	80051c6 <main+0x72e>
  	{
  		LED_R_1;
 80051b6:	2201      	movs	r2, #1
 80051b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80051bc:	488a      	ldr	r0, [pc, #552]	@ (80053e8 <main+0x950>)
 80051be:	f008 fc4f 	bl	800da60 <HAL_GPIO_WritePin>
  		while(1){
 80051c2:	bf00      	nop
 80051c4:	e7fd      	b.n	80051c2 <main+0x72a>

  		}
  	}
  	if(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 80051c6:	4b8a      	ldr	r3, [pc, #552]	@ (80053f0 <main+0x958>)
 80051c8:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80051cc:	2b09      	cmp	r3, #9
 80051ce:	d107      	bne.n	80051e0 <main+0x748>
  		LED_R_1;
 80051d0:	2201      	movs	r2, #1
 80051d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80051d6:	4884      	ldr	r0, [pc, #528]	@ (80053e8 <main+0x950>)
 80051d8:	f008 fc42 	bl	800da60 <HAL_GPIO_WritePin>

  		while(1){
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <main+0x744>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 80051e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80051e4:	4880      	ldr	r0, [pc, #512]	@ (80053e8 <main+0x950>)
 80051e6:	f008 fc23 	bl	800da30 <HAL_GPIO_ReadPin>
 80051ea:	4603      	mov	r3, r0
 80051ec:	461a      	mov	r2, r3
 80051ee:	4b81      	ldr	r3, [pc, #516]	@ (80053f4 <main+0x95c>)
 80051f0:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 80051f2:	4b80      	ldr	r3, [pc, #512]	@ (80053f4 <main+0x95c>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d103      	bne.n	8005202 <main+0x76a>
		SD_enable_Flag = 0;
 80051fa:	4b7e      	ldr	r3, [pc, #504]	@ (80053f4 <main+0x95c>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	e002      	b.n	8005208 <main+0x770>
	}
	else{
		SD_enable_Flag = 1;
 8005202:	4b7c      	ldr	r3, [pc, #496]	@ (80053f4 <main+0x95c>)
 8005204:	2201      	movs	r2, #1
 8005206:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 8005208:	4b7a      	ldr	r3, [pc, #488]	@ (80053f4 <main+0x95c>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d15f      	bne.n	80052d0 <main+0x838>
		LED_uSD_1;
 8005210:	2201      	movs	r2, #1
 8005212:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005216:	4878      	ldr	r0, [pc, #480]	@ (80053f8 <main+0x960>)
 8005218:	f008 fc22 	bl	800da60 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 800521c:	2201      	movs	r2, #1
 800521e:	4977      	ldr	r1, [pc, #476]	@ (80053fc <main+0x964>)
 8005220:	4877      	ldr	r0, [pc, #476]	@ (8005400 <main+0x968>)
 8005222:	f017 fcdf 	bl	801cbe4 <f_mount>
 8005226:	4603      	mov	r3, r0
 8005228:	461a      	mov	r2, r3
 800522a:	4b76      	ldr	r3, [pc, #472]	@ (8005404 <main+0x96c>)
 800522c:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 800522e:	4876      	ldr	r0, [pc, #472]	@ (8005408 <main+0x970>)
 8005230:	f018 f922 	bl	801d478 <f_unlink>
 8005234:	4603      	mov	r3, r0
 8005236:	461a      	mov	r2, r3
 8005238:	4b72      	ldr	r3, [pc, #456]	@ (8005404 <main+0x96c>)
 800523a:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 800523c:	2201      	movs	r2, #1
 800523e:	496f      	ldr	r1, [pc, #444]	@ (80053fc <main+0x964>)
 8005240:	486f      	ldr	r0, [pc, #444]	@ (8005400 <main+0x968>)
 8005242:	f017 fccf 	bl	801cbe4 <f_mount>
 8005246:	4603      	mov	r3, r0
 8005248:	461a      	mov	r2, r3
 800524a:	4b6e      	ldr	r3, [pc, #440]	@ (8005404 <main+0x96c>)
 800524c:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 800524e:	220a      	movs	r2, #10
 8005250:	496e      	ldr	r1, [pc, #440]	@ (800540c <main+0x974>)
 8005252:	486f      	ldr	r0, [pc, #444]	@ (8005410 <main+0x978>)
 8005254:	f017 fd0c 	bl	801cc70 <f_open>
 8005258:	4603      	mov	r3, r0
 800525a:	461a      	mov	r2, r3
 800525c:	4b69      	ldr	r3, [pc, #420]	@ (8005404 <main+0x96c>)
 800525e:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 8005260:	2200      	movs	r2, #0
 8005262:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005266:	4864      	ldr	r0, [pc, #400]	@ (80053f8 <main+0x960>)
 8005268:	f008 fbfa 	bl	800da60 <HAL_GPIO_WritePin>

		LED_uSD_1;
 800526c:	2201      	movs	r2, #1
 800526e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005272:	4861      	ldr	r0, [pc, #388]	@ (80053f8 <main+0x960>)
 8005274:	f008 fbf4 	bl	800da60 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 8005278:	2300      	movs	r3, #0
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	e007      	b.n	800528e <main+0x7f6>
			DataToSendBuffer[i] = 49;
 800527e:	4a65      	ldr	r2, [pc, #404]	@ (8005414 <main+0x97c>)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	4413      	add	r3, r2
 8005284:	2231      	movs	r2, #49	@ 0x31
 8005286:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	3301      	adds	r3, #1
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	4a61      	ldr	r2, [pc, #388]	@ (8005418 <main+0x980>)
 8005292:	4293      	cmp	r3, r2
 8005294:	ddf3      	ble.n	800527e <main+0x7e6>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 8005296:	4b61      	ldr	r3, [pc, #388]	@ (800541c <main+0x984>)
 8005298:	2281      	movs	r2, #129	@ 0x81
 800529a:	495e      	ldr	r1, [pc, #376]	@ (8005414 <main+0x97c>)
 800529c:	485c      	ldr	r0, [pc, #368]	@ (8005410 <main+0x978>)
 800529e:	f017 feaf 	bl	801d000 <f_write>
 80052a2:	4603      	mov	r3, r0
 80052a4:	461a      	mov	r2, r3
 80052a6:	4b57      	ldr	r3, [pc, #348]	@ (8005404 <main+0x96c>)
 80052a8:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 80052aa:	4859      	ldr	r0, [pc, #356]	@ (8005410 <main+0x978>)
 80052ac:	f018 f8ba 	bl	801d424 <f_close>
 80052b0:	4603      	mov	r3, r0
 80052b2:	461a      	mov	r2, r3
 80052b4:	4b53      	ldr	r3, [pc, #332]	@ (8005404 <main+0x96c>)
 80052b6:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 80052b8:	4b52      	ldr	r3, [pc, #328]	@ (8005404 <main+0x96c>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <main+0x82c>
			NVIC_SystemReset();
 80052c0:	f7ff fbd4 	bl	8004a6c <__NVIC_SystemReset>
			while(1){

			}
		}
		LED_uSD_0;
 80052c4:	2200      	movs	r2, #0
 80052c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80052ca:	484b      	ldr	r0, [pc, #300]	@ (80053f8 <main+0x960>)
 80052cc:	f008 fbc8 	bl	800da60 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 80052d0:	2201      	movs	r2, #1
 80052d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052d6:	4852      	ldr	r0, [pc, #328]	@ (8005420 <main+0x988>)
 80052d8:	f008 fbc2 	bl	800da60 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 80052dc:	4851      	ldr	r0, [pc, #324]	@ (8005424 <main+0x98c>)
 80052de:	f7fb ffd7 	bl	8001290 <MPU6050_INIT>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d107      	bne.n	80052f8 <main+0x860>
			LED_R_1;
 80052e8:	2201      	movs	r2, #1
 80052ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80052ee:	483e      	ldr	r0, [pc, #248]	@ (80053e8 <main+0x950>)
 80052f0:	f008 fbb6 	bl	800da60 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 80052f4:	f7ff fbba 	bl	8004a6c <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 80052f8:	2201      	movs	r2, #1
 80052fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052fe:	483a      	ldr	r0, [pc, #232]	@ (80053e8 <main+0x950>)
 8005300:	f008 fbae 	bl	800da60 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION();
 8005304:	f7fc f88e 	bl	8001424 <MPU6050_CALIBRATION>
		LED_Y_0;
 8005308:	2200      	movs	r2, #0
 800530a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800530e:	4836      	ldr	r0, [pc, #216]	@ (80053e8 <main+0x950>)
 8005310:	f008 fba6 	bl	800da60 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 8005314:	4843      	ldr	r0, [pc, #268]	@ (8005424 <main+0x98c>)
 8005316:	f7fb f9db 	bl	80006d0 <BMP180_init>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d107      	bne.n	8005330 <main+0x898>
			LED_R_1;
 8005320:	2201      	movs	r2, #1
 8005322:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005326:	4830      	ldr	r0, [pc, #192]	@ (80053e8 <main+0x950>)
 8005328:	f008 fb9a 	bl	800da60 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 800532c:	f7ff fb9e 	bl	8004a6c <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 8005330:	2201      	movs	r2, #1
 8005332:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005336:	482c      	ldr	r0, [pc, #176]	@ (80053e8 <main+0x950>)
 8005338:	f008 fb92 	bl	800da60 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&BMP180.startpres);
 800533c:	483a      	ldr	r0, [pc, #232]	@ (8005428 <main+0x990>)
 800533e:	f7fb fd2d 	bl	8000d9c <BMP180_CALIBRATION>
		LED_Y_0;
 8005342:	2200      	movs	r2, #0
 8005344:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005348:	4827      	ldr	r0, [pc, #156]	@ (80053e8 <main+0x950>)
 800534a:	f008 fb89 	bl	800da60 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 800534e:	4835      	ldr	r0, [pc, #212]	@ (8005424 <main+0x98c>)
 8005350:	f7fb fe5a 	bl	8001008 <HMC5883L_Init>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d107      	bne.n	800536a <main+0x8d2>
			LED_R_1;
 800535a:	2201      	movs	r2, #1
 800535c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005360:	4821      	ldr	r0, [pc, #132]	@ (80053e8 <main+0x950>)
 8005362:	f008 fb7d 	bl	800da60 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8005366:	f7ff fb81 	bl	8004a6c <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 800536a:	2201      	movs	r2, #1
 800536c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005370:	481d      	ldr	r0, [pc, #116]	@ (80053e8 <main+0x950>)
 8005372:	f008 fb75 	bl	800da60 <HAL_GPIO_WritePin>
		HMC5883L.Off_Set_Values.Z = HMC5883L_Calibration();
 8005376:	f7fb ff55 	bl	8001224 <HMC5883L_Calibration>
 800537a:	4603      	mov	r3, r0
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005384:	4b29      	ldr	r3, [pc, #164]	@ (800542c <main+0x994>)
 8005386:	edc3 7a07 	vstr	s15, [r3, #28]
		LED_Y_0;
 800538a:	2200      	movs	r2, #0
 800538c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005390:	4815      	ldr	r0, [pc, #84]	@ (80053e8 <main+0x950>)
 8005392:	f008 fb65 	bl	800da60 <HAL_GPIO_WritePin>

		LED_5_0;
 8005396:	2200      	movs	r2, #0
 8005398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800539c:	4820      	ldr	r0, [pc, #128]	@ (8005420 <main+0x988>)
 800539e:	f008 fb5f 	bl	800da60 <HAL_GPIO_WritePin>



	/////////////////////////////// nRF24
		LED_6_1;
 80053a2:	2201      	movs	r2, #1
 80053a4:	2108      	movs	r1, #8
 80053a6:	4822      	ldr	r0, [pc, #136]	@ (8005430 <main+0x998>)
 80053a8:	f008 fb5a 	bl	800da60 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi1);
 80053ac:	4821      	ldr	r0, [pc, #132]	@ (8005434 <main+0x99c>)
 80053ae:	f7fd f9a9 	bl	8002704 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 80053b2:	f107 0308 	add.w	r3, r7, #8
 80053b6:	4619      	mov	r1, r3
 80053b8:	2000      	movs	r0, #0
 80053ba:	f7fd f800 	bl	80023be <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 80053be:	1d3b      	adds	r3, r7, #4
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fd f835 	bl	8002430 <nRF24_SetTXAddress>
		nRF24_TX_Mode();
 80053c6:	f7fc fe1b 	bl	8002000 <nRF24_TX_Mode>
		NRF24.NRF24_MODE = NRF24_Tx_Mode;
 80053ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005438 <main+0x9a0>)
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80



		for(int i = 0; i < 32; i++){
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	e03a      	b.n	800544e <main+0x9b6>
 80053d8:	000002b8 	.word	0x000002b8
 80053dc:	24000eb0 	.word	0x24000eb0
 80053e0:	24000464 	.word	0x24000464
 80053e4:	240000ac 	.word	0x240000ac
 80053e8:	58020400 	.word	0x58020400
 80053ec:	24000380 	.word	0x24000380
 80053f0:	00000158 	.word	0x00000158
 80053f4:	000041e8 	.word	0x000041e8
 80053f8:	58020c00 	.word	0x58020c00
 80053fc:	0801e278 	.word	0x0801e278
 8005400:	24000eb4 	.word	0x24000eb4
 8005404:	24001eec 	.word	0x24001eec
 8005408:	0801e27c 	.word	0x0801e27c
 800540c:	0801e288 	.word	0x0801e288
 8005410:	24001ef0 	.word	0x24001ef0
 8005414:	24002f28 	.word	0x24002f28
 8005418:	0001f7e7 	.word	0x0001f7e7
 800541c:	24002f24 	.word	0x24002f24
 8005420:	58020000 	.word	0x58020000
 8005424:	24000198 	.word	0x24000198
 8005428:	000000c0 	.word	0x000000c0
 800542c:	00004164 	.word	0x00004164
 8005430:	58021000 	.word	0x58021000
 8005434:	240001ec 	.word	0x240001ec
 8005438:	000000cc 	.word	0x000000cc
			NRF24.Txcode[i] = 0;
 800543c:	4ab3      	ldr	r2, [pc, #716]	@ (800570c <main+0xc74>)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	4413      	add	r3, r2
 8005442:	3360      	adds	r3, #96	@ 0x60
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	3301      	adds	r3, #1
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b1f      	cmp	r3, #31
 8005452:	ddf3      	ble.n	800543c <main+0x9a4>
		}
		NRF24.Txcode[22] = 'd';
 8005454:	4bad      	ldr	r3, [pc, #692]	@ (800570c <main+0xc74>)
 8005456:	2264      	movs	r2, #100	@ 0x64
 8005458:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
		NRF24.Txcode[23] = 'r';
 800545c:	4bab      	ldr	r3, [pc, #684]	@ (800570c <main+0xc74>)
 800545e:	2272      	movs	r2, #114	@ 0x72
 8005460:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
		NRF24.Txcode[24] = 'o';
 8005464:	4ba9      	ldr	r3, [pc, #676]	@ (800570c <main+0xc74>)
 8005466:	226f      	movs	r2, #111	@ 0x6f
 8005468:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
		NRF24.Txcode[25] = 'n';
 800546c:	4ba7      	ldr	r3, [pc, #668]	@ (800570c <main+0xc74>)
 800546e:	226e      	movs	r2, #110	@ 0x6e
 8005470:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
		NRF24.Txcode[26] = '2';
 8005474:	4ba5      	ldr	r3, [pc, #660]	@ (800570c <main+0xc74>)
 8005476:	2232      	movs	r2, #50	@ 0x32
 8005478:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
		NRF24.Txcode[27] = 'c';
 800547c:	4ba3      	ldr	r3, [pc, #652]	@ (800570c <main+0xc74>)
 800547e:	2263      	movs	r2, #99	@ 0x63
 8005480:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
		NRF24.Txcode[28] = '1';
 8005484:	4ba1      	ldr	r3, [pc, #644]	@ (800570c <main+0xc74>)
 8005486:	2231      	movs	r2, #49	@ 0x31
 8005488:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
		NRF24.Txcode[29] = 'z';
 800548c:	4b9f      	ldr	r3, [pc, #636]	@ (800570c <main+0xc74>)
 800548e:	227a      	movs	r2, #122	@ 0x7a
 8005490:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
		NRF24.Txcode[30] = 'a';
 8005494:	4b9d      	ldr	r3, [pc, #628]	@ (800570c <main+0xc74>)
 8005496:	2261      	movs	r2, #97	@ 0x61
 8005498:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
		NRF24.Txcode[31] = '7';
 800549c:	4b9b      	ldr	r3, [pc, #620]	@ (800570c <main+0xc74>)
 800549e:	2237      	movs	r2, #55	@ 0x37
 80054a0:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f



		nRF24_WriteTXPayload(NRF24.Txcode);
 80054a4:	489a      	ldr	r0, [pc, #616]	@ (8005710 <main+0xc78>)
 80054a6:	f7fd f873 	bl	8002590 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 80054aa:	f7fd f893 	bl	80025d4 <nRF24_WaitTX>
		nRF24_RX_Mode();
 80054ae:	f7fc fd71 	bl	8001f94 <nRF24_RX_Mode>
		NRF24.NRF24_MODE = NRF24_Rx_Mode;
 80054b2:	4b96      	ldr	r3, [pc, #600]	@ (800570c <main+0xc74>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

		uint8_t cunter = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 80054be:	e022      	b.n	8005506 <main+0xa6e>
			LED_G_1;
 80054c0:	2201      	movs	r2, #1
 80054c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054c6:	4893      	ldr	r0, [pc, #588]	@ (8005714 <main+0xc7c>)
 80054c8:	f008 faca 	bl	800da60 <HAL_GPIO_WritePin>
			LED_Y_1;
 80054cc:	2201      	movs	r2, #1
 80054ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80054d2:	4891      	ldr	r0, [pc, #580]	@ (8005718 <main+0xc80>)
 80054d4:	f008 fac4 	bl	800da60 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80054d8:	2001      	movs	r0, #1
 80054da:	f003 f985 	bl	80087e8 <HAL_Delay>
			LED_G_0;
 80054de:	2200      	movs	r2, #0
 80054e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054e4:	488b      	ldr	r0, [pc, #556]	@ (8005714 <main+0xc7c>)
 80054e6:	f008 fabb 	bl	800da60 <HAL_GPIO_WritePin>
			LED_Y_0;
 80054ea:	2200      	movs	r2, #0
 80054ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80054f0:	4889      	ldr	r0, [pc, #548]	@ (8005718 <main+0xc80>)
 80054f2:	f008 fab5 	bl	800da60 <HAL_GPIO_WritePin>

			cunter++;
 80054f6:	7cfb      	ldrb	r3, [r7, #19]
 80054f8:	3301      	adds	r3, #1
 80054fa:	74fb      	strb	r3, [r7, #19]
			if(cunter == 200){
 80054fc:	7cfb      	ldrb	r3, [r7, #19]
 80054fe:	2bc8      	cmp	r3, #200	@ 0xc8
 8005500:	d101      	bne.n	8005506 <main+0xa6e>
				NVIC_SystemReset();
 8005502:	f7ff fab3 	bl	8004a6c <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005506:	2000      	movs	r0, #0
 8005508:	f7fd f8dc 	bl	80026c4 <nRF24_IsBitSetInFifoStatus>
 800550c:	4603      	mov	r3, r0
 800550e:	2b01      	cmp	r3, #1
 8005510:	d0d6      	beq.n	80054c0 <main+0xa28>
			}
		}

		while(NRF24_inte != 1){
 8005512:	bf00      	nop
 8005514:	4b81      	ldr	r3, [pc, #516]	@ (800571c <main+0xc84>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d1fb      	bne.n	8005514 <main+0xa7c>

		}
		nRF24_ReadRXPaylaod(NRF24.RxData);
 800551c:	487b      	ldr	r0, [pc, #492]	@ (800570c <main+0xc74>)
 800551e:	f7fd f881 	bl	8002624 <nRF24_ReadRXPaylaod>
		STARTUP = 0;
 8005522:	4b7f      	ldr	r3, [pc, #508]	@ (8005720 <main+0xc88>)
 8005524:	2200      	movs	r2, #0
 8005526:	701a      	strb	r2, [r3, #0]
		LED_6_0;
 8005528:	2200      	movs	r2, #0
 800552a:	2108      	movs	r1, #8
 800552c:	4879      	ldr	r0, [pc, #484]	@ (8005714 <main+0xc7c>)
 800552e:	f008 fa97 	bl	800da60 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 8005532:	230c      	movs	r3, #12
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e00c      	b.n	8005552 <main+0xaba>
			NRF24.Rxcode[i] = NRF24.RxData[i];
 8005538:	4a74      	ldr	r2, [pc, #464]	@ (800570c <main+0xc74>)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	7819      	ldrb	r1, [r3, #0]
 8005540:	4a72      	ldr	r2, [pc, #456]	@ (800570c <main+0xc74>)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	3340      	adds	r3, #64	@ 0x40
 8005548:	460a      	mov	r2, r1
 800554a:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	3301      	adds	r3, #1
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b15      	cmp	r3, #21
 8005556:	ddef      	ble.n	8005538 <main+0xaa0>
		}
	///////////////////////////////////////////////////////////////////////
		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005558:	4872      	ldr	r0, [pc, #456]	@ (8005724 <main+0xc8c>)
 800555a:	f010 fb39 	bl	8015bd0 <HAL_TIM_Base_Start_IT>

		ESC_INT(&htim3);
 800555e:	4872      	ldr	r0, [pc, #456]	@ (8005728 <main+0xc90>)
 8005560:	f7fb fd08 	bl	8000f74 <ESC_INT>

		LED_7_1;
 8005564:	2201      	movs	r2, #1
 8005566:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800556a:	4870      	ldr	r0, [pc, #448]	@ (800572c <main+0xc94>)
 800556c:	f008 fa78 	bl	800da60 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005570:	2201      	movs	r2, #1
 8005572:	496f      	ldr	r1, [pc, #444]	@ (8005730 <main+0xc98>)
 8005574:	486f      	ldr	r0, [pc, #444]	@ (8005734 <main+0xc9c>)
 8005576:	f012 f987 	bl	8017888 <HAL_UART_Receive_IT>
		LED_7_0;
 800557a:	2200      	movs	r2, #0
 800557c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005580:	486a      	ldr	r0, [pc, #424]	@ (800572c <main+0xc94>)
 8005582:	f008 fa6d 	bl	800da60 <HAL_GPIO_WritePin>

//		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms

	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005586:	4b6c      	ldr	r3, [pc, #432]	@ (8005738 <main+0xca0>)
 8005588:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 800558c:	b2db      	uxtb	r3, r3
 800558e:	4618      	mov	r0, r3
 8005590:	f001 fcf2 	bl	8006f78 <RGB_LED_For_BAT>

	  	if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT)
 8005594:	4b68      	ldr	r3, [pc, #416]	@ (8005738 <main+0xca0>)
 8005596:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 800559a:	2b07      	cmp	r3, #7
 800559c:	d107      	bne.n	80055ae <main+0xb16>
	  	{
	  		LED_R_1;
 800559e:	2201      	movs	r2, #1
 80055a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055a4:	485c      	ldr	r0, [pc, #368]	@ (8005718 <main+0xc80>)
 80055a6:	f008 fa5b 	bl	800da60 <HAL_GPIO_WritePin>
	  		while(1){
 80055aa:	bf00      	nop
 80055ac:	e7fd      	b.n	80055aa <main+0xb12>

	  		}
	  	}

	  	if(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 80055ae:	4b62      	ldr	r3, [pc, #392]	@ (8005738 <main+0xca0>)
 80055b0:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80055b4:	2b09      	cmp	r3, #9
 80055b6:	d107      	bne.n	80055c8 <main+0xb30>
	  		LED_R_1;
 80055b8:	2201      	movs	r2, #1
 80055ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055be:	4856      	ldr	r0, [pc, #344]	@ (8005718 <main+0xc80>)
 80055c0:	f008 fa4e 	bl	800da60 <HAL_GPIO_WritePin>
	  		while(1){
 80055c4:	bf00      	nop
 80055c6:	e7fd      	b.n	80055c4 <main+0xb2c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT){
 80055c8:	4b5b      	ldr	r3, [pc, #364]	@ (8005738 <main+0xca0>)
 80055ca:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80055ce:	2b07      	cmp	r3, #7
 80055d0:	d10c      	bne.n	80055ec <main+0xb54>
	  			LED_R_1;
 80055d2:	2201      	movs	r2, #1
 80055d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055d8:	484f      	ldr	r0, [pc, #316]	@ (8005718 <main+0xc80>)
 80055da:	f008 fa41 	bl	800da60 <HAL_GPIO_WritePin>
	  			MYDRON.Thrust.Thrust_Limit = MYDRON.Thrust.Now;
 80055de:	4b56      	ldr	r3, [pc, #344]	@ (8005738 <main+0xca0>)
 80055e0:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80055e4:	b21a      	sxth	r2, r3
 80055e6:	4b54      	ldr	r3, [pc, #336]	@ (8005738 <main+0xca0>)
 80055e8:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	  		}
	  		if(MYDRON.Status.Battery == DRON_BATTERY_OK){
 80055ec:	4b52      	ldr	r3, [pc, #328]	@ (8005738 <main+0xca0>)
 80055ee:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d104      	bne.n	8005600 <main+0xb68>
	  			MYDRON.Thrust.Thrust_Limit = 10000;
 80055f6:	4b50      	ldr	r3, [pc, #320]	@ (8005738 <main+0xca0>)
 80055f8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80055fc:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	  		}
	  		if(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 8005600:	4b4d      	ldr	r3, [pc, #308]	@ (8005738 <main+0xca0>)
 8005602:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 8005606:	2b09      	cmp	r3, #9
 8005608:	d119      	bne.n	800563e <main+0xba6>
	  			ESC_POWER_1;
 800560a:	2201      	movs	r2, #1
 800560c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005610:	484a      	ldr	r0, [pc, #296]	@ (800573c <main+0xca4>)
 8005612:	f008 fa25 	bl	800da60 <HAL_GPIO_WritePin>
	  			LED_R_1;
 8005616:	2201      	movs	r2, #1
 8005618:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800561c:	483e      	ldr	r0, [pc, #248]	@ (8005718 <main+0xc80>)
 800561e:	f008 fa1f 	bl	800da60 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 8005622:	4847      	ldr	r0, [pc, #284]	@ (8005740 <main+0xca8>)
 8005624:	f017 fefe 	bl	801d424 <f_close>
	  			while(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 8005628:	e004      	b.n	8005634 <main+0xb9c>
	  				HAL_Delay(10);
 800562a:	200a      	movs	r0, #10
 800562c:	f003 f8dc 	bl	80087e8 <HAL_Delay>
	  				Get_batteryvalue();
 8005630:	f7fe fb22 	bl	8003c78 <Get_batteryvalue>
	  			while(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 8005634:	4b40      	ldr	r3, [pc, #256]	@ (8005738 <main+0xca0>)
 8005636:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 800563a:	2b09      	cmp	r3, #9
 800563c:	d0f5      	beq.n	800562a <main+0xb92>
	  			}
	  		}

	  		if(commandready == 1){
 800563e:	4b41      	ldr	r3, [pc, #260]	@ (8005744 <main+0xcac>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d111      	bne.n	800566a <main+0xbd2>
	  			LED_7_1;
 8005646:	2201      	movs	r2, #1
 8005648:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800564c:	4837      	ldr	r0, [pc, #220]	@ (800572c <main+0xc94>)
 800564e:	f008 fa07 	bl	800da60 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005652:	f7fd f8c1 	bl	80027d8 <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005656:	493c      	ldr	r1, [pc, #240]	@ (8005748 <main+0xcb0>)
 8005658:	483c      	ldr	r0, [pc, #240]	@ (800574c <main+0xcb4>)
 800565a:	f7fd f90b 	bl	8002874 <executecommand>
	  			LED_7_0;
 800565e:	2200      	movs	r2, #0
 8005660:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005664:	4831      	ldr	r0, [pc, #196]	@ (800572c <main+0xc94>)
 8005666:	f008 f9fb 	bl	800da60 <HAL_GPIO_WritePin>
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 800566a:	4b39      	ldr	r3, [pc, #228]	@ (8005750 <main+0xcb8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b01      	cmp	r3, #1
 8005670:	f040 8085 	bne.w	800577e <main+0xce6>
 8005674:	4b37      	ldr	r3, [pc, #220]	@ (8005754 <main+0xcbc>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f040 8080 	bne.w	800577e <main+0xce6>
 800567e:	4b36      	ldr	r3, [pc, #216]	@ (8005758 <main+0xcc0>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d17b      	bne.n	800577e <main+0xce6>
	  			TIM_inte_SD = 0;
 8005686:	4b32      	ldr	r3, [pc, #200]	@ (8005750 <main+0xcb8>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 800568c:	4b33      	ldr	r3, [pc, #204]	@ (800575c <main+0xcc4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f001 fe07 	bl	80072a4 <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005696:	4b31      	ldr	r3, [pc, #196]	@ (800575c <main+0xcc4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800569e:	4293      	cmp	r3, r2
 80056a0:	d12b      	bne.n	80056fa <main+0xc62>
	  				SD_In_Use = 1;
 80056a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005760 <main+0xcc8>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 80056a8:	2201      	movs	r2, #1
 80056aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056ae:	482d      	ldr	r0, [pc, #180]	@ (8005764 <main+0xccc>)
 80056b0:	f008 f9d6 	bl	800da60 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 80056b4:	2232      	movs	r2, #50	@ 0x32
 80056b6:	492c      	ldr	r1, [pc, #176]	@ (8005768 <main+0xcd0>)
 80056b8:	4821      	ldr	r0, [pc, #132]	@ (8005740 <main+0xca8>)
 80056ba:	f017 fad9 	bl	801cc70 <f_open>
 80056be:	4603      	mov	r3, r0
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b24      	ldr	r3, [pc, #144]	@ (8005754 <main+0xcbc>)
 80056c4:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 80056c6:	4b29      	ldr	r3, [pc, #164]	@ (800576c <main+0xcd4>)
 80056c8:	4a29      	ldr	r2, [pc, #164]	@ (8005770 <main+0xcd8>)
 80056ca:	492a      	ldr	r1, [pc, #168]	@ (8005774 <main+0xcdc>)
 80056cc:	481c      	ldr	r0, [pc, #112]	@ (8005740 <main+0xca8>)
 80056ce:	f017 fc97 	bl	801d000 <f_write>
 80056d2:	4603      	mov	r3, r0
 80056d4:	461a      	mov	r2, r3
 80056d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005754 <main+0xcbc>)
 80056d8:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 80056da:	4819      	ldr	r0, [pc, #100]	@ (8005740 <main+0xca8>)
 80056dc:	f017 fea2 	bl	801d424 <f_close>
 80056e0:	4603      	mov	r3, r0
 80056e2:	461a      	mov	r2, r3
 80056e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005754 <main+0xcbc>)
 80056e6:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 80056e8:	2200      	movs	r2, #0
 80056ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056ee:	481d      	ldr	r0, [pc, #116]	@ (8005764 <main+0xccc>)
 80056f0:	f008 f9b6 	bl	800da60 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 80056f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005760 <main+0xcc8>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
	  				}

	  			Mainloop_Number = Mainloop_Number < 1000 ? Mainloop_Number+1 : 0;
 80056fa:	4b18      	ldr	r3, [pc, #96]	@ (800575c <main+0xcc4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005702:	d239      	bcs.n	8005778 <main+0xce0>
 8005704:	4b15      	ldr	r3, [pc, #84]	@ (800575c <main+0xcc4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3301      	adds	r3, #1
 800570a:	e036      	b.n	800577a <main+0xce2>
 800570c:	000000cc 	.word	0x000000cc
 8005710:	0000012c 	.word	0x0000012c
 8005714:	58021000 	.word	0x58021000
 8005718:	58020400 	.word	0x58020400
 800571c:	000041ad 	.word	0x000041ad
 8005720:	0000419c 	.word	0x0000419c
 8005724:	240003cc 	.word	0x240003cc
 8005728:	24000418 	.word	0x24000418
 800572c:	58020000 	.word	0x58020000
 8005730:	000041dc 	.word	0x000041dc
 8005734:	240004b0 	.word	0x240004b0
 8005738:	00000158 	.word	0x00000158
 800573c:	58021800 	.word	0x58021800
 8005740:	24001ef0 	.word	0x24001ef0
 8005744:	000041da 	.word	0x000041da
 8005748:	000041bc 	.word	0x000041bc
 800574c:	000041cc 	.word	0x000041cc
 8005750:	00004194 	.word	0x00004194
 8005754:	24001eec 	.word	0x24001eec
 8005758:	000041e8 	.word	0x000041e8
 800575c:	000041e0 	.word	0x000041e0
 8005760:	000041e4 	.word	0x000041e4
 8005764:	58020c00 	.word	0x58020c00
 8005768:	0801e288 	.word	0x0801e288
 800576c:	24002f24 	.word	0x24002f24
 8005770:	0001f7e8 	.word	0x0001f7e8
 8005774:	24002f28 	.word	0x24002f28
 8005778:	2300      	movs	r3, #0
 800577a:	4a45      	ldr	r2, [pc, #276]	@ (8005890 <main+0xdf8>)
 800577c:	6013      	str	r3, [r2, #0]
	  		}


			if(i == 0){
 800577e:	4b45      	ldr	r3, [pc, #276]	@ (8005894 <main+0xdfc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10d      	bne.n	80057a2 <main+0xd0a>
				LED_5_1;
 8005786:	2201      	movs	r2, #1
 8005788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800578c:	4842      	ldr	r0, [pc, #264]	@ (8005898 <main+0xe00>)
 800578e:	f008 f967 	bl	800da60 <HAL_GPIO_WritePin>
				BMP180_start_measurment_temp_IT();
 8005792:	f7fb f8d1 	bl	8000938 <BMP180_start_measurment_temp_IT>
				LED_5_0;
 8005796:	2200      	movs	r2, #0
 8005798:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800579c:	483e      	ldr	r0, [pc, #248]	@ (8005898 <main+0xe00>)
 800579e:	f008 f95f 	bl	800da60 <HAL_GPIO_WritePin>
			}
			if(i == 5){
 80057a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005894 <main+0xdfc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b05      	cmp	r3, #5
 80057a8:	d10d      	bne.n	80057c6 <main+0xd2e>
				LED_5_1;
 80057aa:	2201      	movs	r2, #1
 80057ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057b0:	4839      	ldr	r0, [pc, #228]	@ (8005898 <main+0xe00>)
 80057b2:	f008 f955 	bl	800da60 <HAL_GPIO_WritePin>
				BMP180_READ_temp_IT();
 80057b6:	f7fb f80d 	bl	80007d4 <BMP180_READ_temp_IT>
				LED_5_0;
 80057ba:	2200      	movs	r2, #0
 80057bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057c0:	4835      	ldr	r0, [pc, #212]	@ (8005898 <main+0xe00>)
 80057c2:	f008 f94d 	bl	800da60 <HAL_GPIO_WritePin>
			}
			if(BMP180.Timer == 0 && BMP180.BMP180_IRQ == 3){
 80057c6:	4b35      	ldr	r3, [pc, #212]	@ (800589c <main+0xe04>)
 80057c8:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d11a      	bne.n	8005806 <main+0xd6e>
 80057d0:	4b32      	ldr	r3, [pc, #200]	@ (800589c <main+0xe04>)
 80057d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d115      	bne.n	8005806 <main+0xd6e>
				LED_5_1;
 80057da:	2201      	movs	r2, #1
 80057dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057e0:	482d      	ldr	r0, [pc, #180]	@ (8005898 <main+0xe00>)
 80057e2:	f008 f93d 	bl	800da60 <HAL_GPIO_WritePin>
				BMP180_start_measurment_pres_IT();
 80057e6:	f7fb f88b 	bl	8000900 <BMP180_start_measurment_pres_IT>
				LED_5_0;
 80057ea:	2200      	movs	r2, #0
 80057ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057f0:	4829      	ldr	r0, [pc, #164]	@ (8005898 <main+0xe00>)
 80057f2:	f008 f935 	bl	800da60 <HAL_GPIO_WritePin>
				BMP180.BMP180_IRQ = 0;
 80057f6:	4b29      	ldr	r3, [pc, #164]	@ (800589c <main+0xe04>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
				BMP180.Timer = 8;
 80057fe:	4b27      	ldr	r3, [pc, #156]	@ (800589c <main+0xe04>)
 8005800:	2208      	movs	r2, #8
 8005802:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
			}
			if(BMP180.Timer == 0 && BMP180.I2C_Tx_IRQ == 2){
 8005806:	4b25      	ldr	r3, [pc, #148]	@ (800589c <main+0xe04>)
 8005808:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 800580c:	2b00      	cmp	r3, #0
 800580e:	d112      	bne.n	8005836 <main+0xd9e>
 8005810:	4b22      	ldr	r3, [pc, #136]	@ (800589c <main+0xe04>)
 8005812:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8005816:	2b02      	cmp	r3, #2
 8005818:	d10d      	bne.n	8005836 <main+0xd9e>
				LED_5_1;
 800581a:	2201      	movs	r2, #1
 800581c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005820:	481d      	ldr	r0, [pc, #116]	@ (8005898 <main+0xe00>)
 8005822:	f008 f91d 	bl	800da60 <HAL_GPIO_WritePin>
				BMP180_READ_pres_IT();
 8005826:	f7fa fff1 	bl	800080c <BMP180_READ_pres_IT>
				LED_5_0;
 800582a:	2200      	movs	r2, #0
 800582c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005830:	4819      	ldr	r0, [pc, #100]	@ (8005898 <main+0xe00>)
 8005832:	f008 f915 	bl	800da60 <HAL_GPIO_WritePin>
			}


	  		if(MYDRON.Status.Connection == DRON_DISCONNECTED){
 8005836:	4b1a      	ldr	r3, [pc, #104]	@ (80058a0 <main+0xe08>)
 8005838:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 800583c:	2b02      	cmp	r3, #2
 800583e:	d118      	bne.n	8005872 <main+0xdda>
	  			if(NRF24.Step == 0){
 8005840:	4b18      	ldr	r3, [pc, #96]	@ (80058a4 <main+0xe0c>)
 8005842:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <main+0xdc8>
	  				NRF24.Step = 2;
 800584a:	4b16      	ldr	r3, [pc, #88]	@ (80058a4 <main+0xe0c>)
 800584c:	2202      	movs	r2, #2
 800584e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	  				NRF24.Status = NRF24_Ready;
 8005852:	4b14      	ldr	r3, [pc, #80]	@ (80058a4 <main+0xe0c>)
 8005854:	2204      	movs	r2, #4
 8005856:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	  				HAL_Delay(10);
 800585a:	200a      	movs	r0, #10
 800585c:	f002 ffc4 	bl	80087e8 <HAL_Delay>
	  			}
	  			if(NRF24.Step == 9){
 8005860:	4b10      	ldr	r3, [pc, #64]	@ (80058a4 <main+0xe0c>)
 8005862:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005866:	2b09      	cmp	r3, #9
 8005868:	d103      	bne.n	8005872 <main+0xdda>
	  				NRF24.Step = 0;
 800586a:	4b0e      	ldr	r3, [pc, #56]	@ (80058a4 <main+0xe0c>)
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

	  			}
	  		}
	  		if(TIM_inte == 1){
 8005872:	4b0d      	ldr	r3, [pc, #52]	@ (80058a8 <main+0xe10>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b01      	cmp	r3, #1
 8005878:	f47f aea6 	bne.w	80055c8 <main+0xb30>
	  			LED_R_0;
 800587c:	2200      	movs	r2, #0
 800587e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005882:	480a      	ldr	r0, [pc, #40]	@ (80058ac <main+0xe14>)
 8005884:	f008 f8ec 	bl	800da60 <HAL_GPIO_WritePin>
	  			TIM_inte = 0;
 8005888:	4b07      	ldr	r3, [pc, #28]	@ (80058a8 <main+0xe10>)
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
	  if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT){
 800588e:	e69b      	b.n	80055c8 <main+0xb30>
 8005890:	000041e0 	.word	0x000041e0
 8005894:	000041a4 	.word	0x000041a4
 8005898:	58020000 	.word	0x58020000
 800589c:	0000006c 	.word	0x0000006c
 80058a0:	00000158 	.word	0x00000158
 80058a4:	000000cc 	.word	0x000000cc
 80058a8:	00004198 	.word	0x00004198
 80058ac:	58020400 	.word	0x58020400

080058b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b09c      	sub	sp, #112	@ 0x70
 80058b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058ba:	224c      	movs	r2, #76	@ 0x4c
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f017 ffa8 	bl	801d814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058c4:	1d3b      	adds	r3, r7, #4
 80058c6:	2220      	movs	r2, #32
 80058c8:	2100      	movs	r1, #0
 80058ca:	4618      	mov	r0, r3
 80058cc:	f017 ffa2 	bl	801d814 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80058d0:	2002      	movs	r0, #2
 80058d2:	f00a fd6d 	bl	80103b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80058d6:	2300      	movs	r3, #0
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	4b2d      	ldr	r3, [pc, #180]	@ (8005990 <SystemClock_Config+0xe0>)
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	4a2c      	ldr	r2, [pc, #176]	@ (8005990 <SystemClock_Config+0xe0>)
 80058e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80058e4:	6193      	str	r3, [r2, #24]
 80058e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005990 <SystemClock_Config+0xe0>)
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80058f2:	bf00      	nop
 80058f4:	4b26      	ldr	r3, [pc, #152]	@ (8005990 <SystemClock_Config+0xe0>)
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005900:	d1f8      	bne.n	80058f4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005902:	2311      	movs	r3, #17
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005906:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800590a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800590c:	2380      	movs	r3, #128	@ 0x80
 800590e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005910:	2310      	movs	r3, #16
 8005912:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005914:	2302      	movs	r3, #2
 8005916:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005918:	2302      	movs	r3, #2
 800591a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800591c:	2303      	movs	r3, #3
 800591e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005920:	2344      	movs	r3, #68	@ 0x44
 8005922:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005924:	2301      	movs	r3, #1
 8005926:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005928:	2302      	movs	r3, #2
 800592a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800592c:	2302      	movs	r3, #2
 800592e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005930:	230c      	movs	r3, #12
 8005932:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005934:	2300      	movs	r3, #0
 8005936:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005938:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800593c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800593e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005942:	4618      	mov	r0, r3
 8005944:	f00a fd6e 	bl	8010424 <HAL_RCC_OscConfig>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800594e:	f001 ff8f 	bl	8007870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005952:	233f      	movs	r3, #63	@ 0x3f
 8005954:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005956:	2303      	movs	r3, #3
 8005958:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800595e:	2308      	movs	r3, #8
 8005960:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005962:	2340      	movs	r3, #64	@ 0x40
 8005964:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005966:	2340      	movs	r3, #64	@ 0x40
 8005968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800596a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800596e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005970:	2340      	movs	r3, #64	@ 0x40
 8005972:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005974:	1d3b      	adds	r3, r7, #4
 8005976:	2103      	movs	r1, #3
 8005978:	4618      	mov	r0, r3
 800597a:	f00b f92d 	bl	8010bd8 <HAL_RCC_ClockConfig>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005984:	f001 ff74 	bl	8007870 <Error_Handler>
  }
}
 8005988:	bf00      	nop
 800598a:	3770      	adds	r7, #112	@ 0x70
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	58024800 	.word	0x58024800

08005994 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b0ae      	sub	sp, #184	@ 0xb8
 8005998:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800599a:	463b      	mov	r3, r7
 800599c:	22b8      	movs	r2, #184	@ 0xb8
 800599e:	2100      	movs	r1, #0
 80059a0:	4618      	mov	r0, r3
 80059a2:	f017 ff37 	bl	801d814 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2
 80059a6:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 80059b2:	2316      	movs	r3, #22
 80059b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 80059b6:	23c0      	movs	r3, #192	@ 0xc0
 80059b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80059ba:	2303      	movs	r3, #3
 80059bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80059be:	2302      	movs	r3, #2
 80059c0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80059c2:	2302      	movs	r3, #2
 80059c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80059ca:	2320      	movs	r3, #32
 80059cc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80059d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80059d8:	2300      	movs	r3, #0
 80059da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059de:	463b      	mov	r3, r7
 80059e0:	4618      	mov	r0, r3
 80059e2:	f00b fc85 	bl	80112f0 <HAL_RCCEx_PeriphCLKConfig>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80059ec:	f001 ff40 	bl	8007870 <Error_Handler>
  }
}
 80059f0:	bf00      	nop
 80059f2:	37b8      	adds	r7, #184	@ 0xb8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4aaf      	ldr	r2, [pc, #700]	@ (8005cc0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	f040 81c3 	bne.w	8005d90 <HAL_TIM_PeriodElapsedCallback+0x398>
	{
		TIM_inte_SD = 1;
 8005a0a:	4bae      	ldr	r3, [pc, #696]	@ (8005cc4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 8005a10:	4bad      	ldr	r3, [pc, #692]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 8005a16:	4bad      	ldr	r3, [pc, #692]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	4aab      	ldr	r2, [pc, #684]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005a1e:	6013      	str	r3, [r2, #0]

		if(NRF24.Timer_1 == 0){
 8005a20:	4bab      	ldr	r3, [pc, #684]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a22:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f040 8094 	bne.w	8005b54 <HAL_TIM_PeriodElapsedCallback+0x15c>
			if(NRF24.Step == 2  && NRF24.Status == NRF24_Ready){
 8005a2c:	4ba8      	ldr	r3, [pc, #672]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a2e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d11c      	bne.n	8005a70 <HAL_TIM_PeriodElapsedCallback+0x78>
 8005a36:	4ba6      	ldr	r3, [pc, #664]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d117      	bne.n	8005a70 <HAL_TIM_PeriodElapsedCallback+0x78>
				LED_6_1;
 8005a40:	2201      	movs	r2, #1
 8005a42:	2108      	movs	r1, #8
 8005a44:	48a3      	ldr	r0, [pc, #652]	@ (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005a46:	f008 f80b 	bl	800da60 <HAL_GPIO_WritePin>
				nRF24_TX_Mode();
 8005a4a:	f7fc fad9 	bl	8002000 <nRF24_TX_Mode>
				LED_6_0;
 8005a4e:	2200      	movs	r2, #0
 8005a50:	2108      	movs	r1, #8
 8005a52:	48a0      	ldr	r0, [pc, #640]	@ (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005a54:	f008 f804 	bl	800da60 <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 3
 8005a58:	4b9d      	ldr	r3, [pc, #628]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a5a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005a5e:	3301      	adds	r3, #1
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	4b9b      	ldr	r3, [pc, #620]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a64:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
				NRF24.Timer_1 = 1;
 8005a68:	4b99      	ldr	r3, [pc, #612]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			}
			if(NRF24.Step == 3 && NRF24.Timer_1 == 0){
 8005a70:	4b97      	ldr	r3, [pc, #604]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a72:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d12d      	bne.n	8005ad6 <HAL_TIM_PeriodElapsedCallback+0xde>
 8005a7a:	4b95      	ldr	r3, [pc, #596]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a7c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d128      	bne.n	8005ad6 <HAL_TIM_PeriodElapsedCallback+0xde>
				NRF24.Status = NRF24_Ready;
 8005a84:	4b92      	ldr	r3, [pc, #584]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a86:	2204      	movs	r2, #4
 8005a88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
				NRF24.NRF24_MODE = NRF24_Tx_Mode;
 8005a8c:	4b90      	ldr	r3, [pc, #576]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				NRF24.TxData[10] = (MYDRON.Status.Connection == DRON_DISCONNECTED) ? 1: 0;
 8005a94:	4b90      	ldr	r3, [pc, #576]	@ (8005cd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005a96:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	bf0c      	ite	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	2300      	movne	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4b8a      	ldr	r3, [pc, #552]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005aa8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

				LED_6_1;
 8005aac:	2201      	movs	r2, #1
 8005aae:	2108      	movs	r1, #8
 8005ab0:	4888      	ldr	r0, [pc, #544]	@ (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005ab2:	f007 ffd5 	bl	800da60 <HAL_GPIO_WritePin>
				nRF24_WriteTXPayload_IT(NRF24.TxData);
 8005ab6:	4889      	ldr	r0, [pc, #548]	@ (8005cdc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005ab8:	f7fc fd78 	bl	80025ac <nRF24_WriteTXPayload_IT>
				LED_6_0;
 8005abc:	2200      	movs	r2, #0
 8005abe:	2108      	movs	r1, #8
 8005ac0:	4884      	ldr	r0, [pc, #528]	@ (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005ac2:	f007 ffcd 	bl	800da60 <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 4
 8005ac6:	4b82      	ldr	r3, [pc, #520]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005ac8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005acc:	3301      	adds	r3, #1
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	4b7f      	ldr	r3, [pc, #508]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005ad2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			}
			if(NRF24.Step == 5){
 8005ad6:	4b7e      	ldr	r3, [pc, #504]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005ad8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005adc:	2b05      	cmp	r3, #5
 8005ade:	d10c      	bne.n	8005afa <HAL_TIM_PeriodElapsedCallback+0x102>
				NRF24_CE_LOW;
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2140      	movs	r1, #64	@ 0x40
 8005ae4:	487e      	ldr	r0, [pc, #504]	@ (8005ce0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8005ae6:	f007 ffbb 	bl	800da60 <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 6
 8005aea:	4b79      	ldr	r3, [pc, #484]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005aec:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005af0:	3301      	adds	r3, #1
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	4b76      	ldr	r3, [pc, #472]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005af6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			}
			if(NRF24.Step == 6){
 8005afa:	4b75      	ldr	r3, [pc, #468]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005afc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b00:	2b06      	cmp	r3, #6
 8005b02:	d127      	bne.n	8005b54 <HAL_TIM_PeriodElapsedCallback+0x15c>
				LED_6_1;
 8005b04:	2201      	movs	r2, #1
 8005b06:	2108      	movs	r1, #8
 8005b08:	4872      	ldr	r0, [pc, #456]	@ (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b0a:	f007 ffa9 	bl	800da60 <HAL_GPIO_WritePin>
				uint8_t status = nRF24_ReadStatus();
 8005b0e:	f7fc fb02 	bl	8002116 <nRF24_ReadStatus>
 8005b12:	4603      	mov	r3, r0
 8005b14:	72fb      	strb	r3, [r7, #11]
				if(((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS)))){//nRF24_WaitTX()
 8005b16:	7afb      	ldrb	r3, [r7, #11]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d104      	bne.n	8005b2a <HAL_TIM_PeriodElapsedCallback+0x132>
 8005b20:	7afb      	ldrb	r3, [r7, #11]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00f      	beq.n	8005b4a <HAL_TIM_PeriodElapsedCallback+0x152>
					NRF24.Timer_2 = 1;
 8005b2a:	4b69      	ldr	r3, [pc, #420]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
					NRF24.Status = NRF24_Ready;
 8005b32:	4b67      	ldr	r3, [pc, #412]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b34:	2204      	movs	r2, #4
 8005b36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
					NRF24.Step++;//Step 7
 8005b3a:	4b65      	ldr	r3, [pc, #404]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b3c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b40:	3301      	adds	r3, #1
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	4b62      	ldr	r3, [pc, #392]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b46:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
				}
				LED_6_0;
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2108      	movs	r1, #8
 8005b4e:	4861      	ldr	r0, [pc, #388]	@ (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b50:	f007 ff86 	bl	800da60 <HAL_GPIO_WritePin>
			}
		}
		if(NRF24.Timer_2 == 0 && NRF24.Step == 7 && NRF24.Status == NRF24_Ready){
 8005b54:	4b5e      	ldr	r3, [pc, #376]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b56:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d121      	bne.n	8005ba2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
 8005b5e:	4b5c      	ldr	r3, [pc, #368]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b60:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b64:	2b07      	cmp	r3, #7
 8005b66:	d11c      	bne.n	8005ba2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
 8005b68:	4b59      	ldr	r3, [pc, #356]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b6a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d117      	bne.n	8005ba2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
			LED_6_1;
 8005b72:	2201      	movs	r2, #1
 8005b74:	2108      	movs	r1, #8
 8005b76:	4857      	ldr	r0, [pc, #348]	@ (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b78:	f007 ff72 	bl	800da60 <HAL_GPIO_WritePin>
			nRF24_RX_Mode();
 8005b7c:	f7fc fa0a 	bl	8001f94 <nRF24_RX_Mode>
			LED_6_0;
 8005b80:	2200      	movs	r2, #0
 8005b82:	2108      	movs	r1, #8
 8005b84:	4853      	ldr	r0, [pc, #332]	@ (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b86:	f007 ff6b 	bl	800da60 <HAL_GPIO_WritePin>
			NRF24.Timer_2 = 1;
 8005b8a:	4b51      	ldr	r3, [pc, #324]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			NRF24.Step++;//Step 8
 8005b92:	4b4f      	ldr	r3, [pc, #316]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b94:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b98:	3301      	adds	r3, #1
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	4b4c      	ldr	r3, [pc, #304]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b9e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		}
		if(NRF24.Timer_2 == 0 && NRF24.Step == 8){
 8005ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005ba4:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d110      	bne.n	8005bce <HAL_TIM_PeriodElapsedCallback+0x1d6>
 8005bac:	4b48      	ldr	r3, [pc, #288]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005bae:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d10b      	bne.n	8005bce <HAL_TIM_PeriodElapsedCallback+0x1d6>
			NRF24.Status = NRF24_Ready;
 8005bb6:	4b46      	ldr	r3, [pc, #280]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005bb8:	2204      	movs	r2, #4
 8005bba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			NRF24.NRF24_MODE = NRF24_Rx_Mode;
 8005bbe:	4b44      	ldr	r3, [pc, #272]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			NRF24.Step = 0;
 8005bc6:	4b42      	ldr	r3, [pc, #264]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		}


		if(i == 0){// na calosc 100ms
 8005bce:	4b45      	ldr	r3, [pc, #276]	@ (8005ce4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <HAL_TIM_PeriodElapsedCallback+0x1ec>


			RGB_LED_For_BAT(MYDRON.batterysize);
 8005bd6:	4b40      	ldr	r3, [pc, #256]	@ (8005cd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005bd8:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 f9ca 	bl	8006f78 <RGB_LED_For_BAT>
//			BMP180_READ_temp_IT();
//			LED_5_0;
//		}


		if(i == 36){
 8005be4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ce4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b24      	cmp	r3, #36	@ 0x24
 8005bea:	d10d      	bne.n	8005c08 <HAL_TIM_PeriodElapsedCallback+0x210>
			LED_5_1;
 8005bec:	2201      	movs	r2, #1
 8005bee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bf2:	483d      	ldr	r0, [pc, #244]	@ (8005ce8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005bf4:	f007 ff34 	bl	800da60 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8005bf8:	f7fb fa86 	bl	8001108 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c02:	4839      	ldr	r0, [pc, #228]	@ (8005ce8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005c04:	f007 ff2c 	bl	800da60 <HAL_GPIO_WritePin>
		}

		if(i == 40){//5
 8005c08:	4b36      	ldr	r3, [pc, #216]	@ (8005ce4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b28      	cmp	r3, #40	@ 0x28
 8005c0e:	d140      	bne.n	8005c92 <HAL_TIM_PeriodElapsedCallback+0x29a>
			//BMP180_READ_pres_IT();
			BMP180.ampritude = BMP180.startpres - BMP180.pres;
 8005c10:	4b36      	ldr	r3, [pc, #216]	@ (8005cec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8005c12:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8005c16:	4b35      	ldr	r3, [pc, #212]	@ (8005cec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8005c18:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8005c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c20:	4b32      	ldr	r3, [pc, #200]	@ (8005cec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8005c22:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

			MYDRON.dronheight = (int16_t)BMP180_GET_height();
 8005c26:	f7fb f8fd 	bl	8000e24 <BMP180_GET_height>
 8005c2a:	eef0 7a40 	vmov.f32	s15, s0
 8005c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c32:	ee17 3a90 	vmov	r3, s15
 8005c36:	b21a      	sxth	r2, r3
 8005c38:	4b27      	ldr	r3, [pc, #156]	@ (8005cd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005c3a:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a
			convert_value_to_array(MYDRON.dronheight, NRF24.TxData, 0, 3);
 8005c3e:	4b26      	ldr	r3, [pc, #152]	@ (8005cd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005c40:	f9b3 015a 	ldrsh.w	r0, [r3, #346]	@ 0x15a
 8005c44:	2303      	movs	r3, #3
 8005c46:	2200      	movs	r2, #0
 8005c48:	4924      	ldr	r1, [pc, #144]	@ (8005cdc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005c4a:	f001 f8b6 	bl	8006dba <convert_value_to_array>

			Get_batteryvalue();
 8005c4e:	f7fe f813 	bl	8003c78 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, NRF24.TxData, 3, 6);
 8005c52:	4b21      	ldr	r3, [pc, #132]	@ (8005cd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005c54:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8005c58:	b218      	sxth	r0, r3
 8005c5a:	2306      	movs	r3, #6
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	491f      	ldr	r1, [pc, #124]	@ (8005cdc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005c60:	f001 f8ab 	bl	8006dba <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	e010      	b.n	8005c8c <HAL_TIM_PeriodElapsedCallback+0x294>
				NRF24.TxData[22+i] = NRF24.Txcode[22+i];
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f103 0216 	add.w	r2, r3, #22
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3316      	adds	r3, #22
 8005c74:	4916      	ldr	r1, [pc, #88]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005c76:	440a      	add	r2, r1
 8005c78:	f892 1060 	ldrb.w	r1, [r2, #96]	@ 0x60
 8005c7c:	4a14      	ldr	r2, [pc, #80]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005c7e:	4413      	add	r3, r2
 8005c80:	460a      	mov	r2, r1
 8005c82:	f883 2020 	strb.w	r2, [r3, #32]
			for(int i = 0; i < 10; i++){
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b09      	cmp	r3, #9
 8005c90:	ddeb      	ble.n	8005c6a <HAL_TIM_PeriodElapsedCallback+0x272>
			}
		}


		LED_5_1;
 8005c92:	2201      	movs	r2, #1
 8005c94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c98:	4813      	ldr	r0, [pc, #76]	@ (8005ce8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005c9a:	f007 fee1 	bl	800da60 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 8005c9e:	f7fb fd21 	bl	80016e4 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ca8:	480f      	ldr	r0, [pc, #60]	@ (8005ce8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005caa:	f007 fed9 	bl	800da60 <HAL_GPIO_WritePin>

		i = (i == 100) ? 0 : i+1;
 8005cae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b64      	cmp	r3, #100	@ 0x64
 8005cb4:	d01c      	beq.n	8005cf0 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	e019      	b.n	8005cf2 <HAL_TIM_PeriodElapsedCallback+0x2fa>
 8005cbe:	bf00      	nop
 8005cc0:	240003cc 	.word	0x240003cc
 8005cc4:	00004194 	.word	0x00004194
 8005cc8:	00004198 	.word	0x00004198
 8005ccc:	000041a0 	.word	0x000041a0
 8005cd0:	000000cc 	.word	0x000000cc
 8005cd4:	58021000 	.word	0x58021000
 8005cd8:	00000158 	.word	0x00000158
 8005cdc:	000000ec 	.word	0x000000ec
 8005ce0:	58020400 	.word	0x58020400
 8005ce4:	000041a4 	.word	0x000041a4
 8005ce8:	58020000 	.word	0x58020000
 8005cec:	0000006c 	.word	0x0000006c
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4a29      	ldr	r2, [pc, #164]	@ (8005d98 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8005cf4:	6013      	str	r3, [r2, #0]

		if(NRF_TIM_Inte >= 1000){
 8005cf6:	4b29      	ldr	r3, [pc, #164]	@ (8005d9c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cfe:	d309      	bcc.n	8005d14 <HAL_TIM_PeriodElapsedCallback+0x31c>
			LED_R_1;
 8005d00:	2201      	movs	r2, #1
 8005d02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d06:	4826      	ldr	r0, [pc, #152]	@ (8005da0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8005d08:	f007 feaa 	bl	800da60 <HAL_GPIO_WritePin>
			MYDRON.Status.Connection = DRON_DISCONNECTED;
 8005d0c:	4b25      	ldr	r3, [pc, #148]	@ (8005da4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 2154 	strb.w	r2, [r3, #340]	@ 0x154
		}
		if(MYDRON.Status.Connection == DRON_DISCONNECTED){
 8005d14:	4b23      	ldr	r3, [pc, #140]	@ (8005da4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8005d16:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d111      	bne.n	8005d42 <HAL_TIM_PeriodElapsedCallback+0x34a>
			MYDRON.Rool.Wanted = 0;
 8005d1e:	4b21      	ldr	r3, [pc, #132]	@ (8005da4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	639a      	str	r2, [r3, #56]	@ 0x38
			MYDRON.Pitch.Wanted = 0;
 8005d26:	4b1f      	ldr	r3, [pc, #124]	@ (8005da4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
			MYDRON.Yaw.Wanted = 0;
 8005d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005da4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	669a      	str	r2, [r3, #104]	@ 0x68
			MYDRON.Thrust.Wanted = DRON_SLOWFALING;
 8005d36:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005d3a:	b21a      	sxth	r2, r3
 8005d3c:	4b19      	ldr	r3, [pc, #100]	@ (8005da4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8005d3e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
		}
		(NRF24.Timer_1 != 0) ? NRF24.Timer_1--: 0;
 8005d42:	4b19      	ldr	r3, [pc, #100]	@ (8005da8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8005d44:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d007      	beq.n	8005d5c <HAL_TIM_PeriodElapsedCallback+0x364>
 8005d4c:	4b16      	ldr	r3, [pc, #88]	@ (8005da8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8005d4e:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	4b14      	ldr	r3, [pc, #80]	@ (8005da8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8005d58:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
		(NRF24.Timer_2 != 0) ? NRF24.Timer_2--: 0;
 8005d5c:	4b12      	ldr	r3, [pc, #72]	@ (8005da8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8005d5e:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <HAL_TIM_PeriodElapsedCallback+0x37e>
 8005d66:	4b10      	ldr	r3, [pc, #64]	@ (8005da8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8005d68:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	4b0d      	ldr	r3, [pc, #52]	@ (8005da8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8005d72:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
		(BMP180.Timer != 0) ? BMP180.Timer--: 0;
 8005d76:	4b0d      	ldr	r3, [pc, #52]	@ (8005dac <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8005d78:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <HAL_TIM_PeriodElapsedCallback+0x398>
 8005d80:	4b0a      	ldr	r3, [pc, #40]	@ (8005dac <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8005d82:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	4b08      	ldr	r3, [pc, #32]	@ (8005dac <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8005d8c:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
	}
}
 8005d90:	bf00      	nop
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	000041a4 	.word	0x000041a4
 8005d9c:	000041a0 	.word	0x000041a0
 8005da0:	58020400 	.word	0x58020400
 8005da4:	00000158 	.word	0x00000158
 8005da8:	000000cc 	.word	0x000000cc
 8005dac:	0000006c 	.word	0x0000006c

08005db0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc0:	d11b      	bne.n	8005dfa <HAL_GPIO_EXTI_Callback+0x4a>
	{
		NRF24_inte = 1;
 8005dc2:	4b10      	ldr	r3, [pc, #64]	@ (8005e04 <HAL_GPIO_EXTI_Callback+0x54>)
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	701a      	strb	r2, [r3, #0]
		if(STARTUP == 0){
 8005dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e08 <HAL_GPIO_EXTI_Callback+0x58>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d114      	bne.n	8005dfa <HAL_GPIO_EXTI_Callback+0x4a>
			LED_6_1;
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	2108      	movs	r1, #8
 8005dd4:	480d      	ldr	r0, [pc, #52]	@ (8005e0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8005dd6:	f007 fe43 	bl	800da60 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod_IT(NRF24.RxData);
 8005dda:	480d      	ldr	r0, [pc, #52]	@ (8005e10 <HAL_GPIO_EXTI_Callback+0x60>)
 8005ddc:	f7fc fc3e 	bl	800265c <nRF24_ReadRXPaylaod_IT>
			NRF24.Step++;//step 1
 8005de0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e10 <HAL_GPIO_EXTI_Callback+0x60>)
 8005de2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005de6:	3301      	adds	r3, #1
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	4b09      	ldr	r3, [pc, #36]	@ (8005e10 <HAL_GPIO_EXTI_Callback+0x60>)
 8005dec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			LED_6_0;
 8005df0:	2200      	movs	r2, #0
 8005df2:	2108      	movs	r1, #8
 8005df4:	4805      	ldr	r0, [pc, #20]	@ (8005e0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8005df6:	f007 fe33 	bl	800da60 <HAL_GPIO_WritePin>
		}
	}
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	000041ad 	.word	0x000041ad
 8005e08:	0000419c 	.word	0x0000419c
 8005e0c:	58021000 	.word	0x58021000
 8005e10:	000000cc 	.word	0x000000cc

08005e14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 8005e1c:	4b24      	ldr	r3, [pc, #144]	@ (8005eb0 <HAL_UART_RxCpltCallback+0x9c>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	4b24      	ldr	r3, [pc, #144]	@ (8005eb4 <HAL_UART_RxCpltCallback+0xa0>)
 8005e24:	7819      	ldrb	r1, [r3, #0]
 8005e26:	4b24      	ldr	r3, [pc, #144]	@ (8005eb8 <HAL_UART_RxCpltCallback+0xa4>)
 8005e28:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 8005e2a:	4b21      	ldr	r3, [pc, #132]	@ (8005eb0 <HAL_UART_RxCpltCallback+0x9c>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4b21      	ldr	r3, [pc, #132]	@ (8005eb8 <HAL_UART_RxCpltCallback+0xa4>)
 8005e32:	5c9b      	ldrb	r3, [r3, r2]
 8005e34:	2b0d      	cmp	r3, #13
 8005e36:	d11a      	bne.n	8005e6e <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 8005e38:	230a      	movs	r3, #10
 8005e3a:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8005e3c:	f107 010f 	add.w	r1, r7, #15
 8005e40:	2364      	movs	r3, #100	@ 0x64
 8005e42:	2201      	movs	r2, #1
 8005e44:	481d      	ldr	r0, [pc, #116]	@ (8005ebc <HAL_UART_RxCpltCallback+0xa8>)
 8005e46:	f011 fbfd 	bl	8017644 <HAL_UART_Transmit>
		Y = '\r';
 8005e4a:	230d      	movs	r3, #13
 8005e4c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8005e4e:	f107 010f 	add.w	r1, r7, #15
 8005e52:	2364      	movs	r3, #100	@ 0x64
 8005e54:	2201      	movs	r2, #1
 8005e56:	4819      	ldr	r0, [pc, #100]	@ (8005ebc <HAL_UART_RxCpltCallback+0xa8>)
 8005e58:	f011 fbf4 	bl	8017644 <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 8005e5c:	4b14      	ldr	r3, [pc, #80]	@ (8005eb0 <HAL_UART_RxCpltCallback+0x9c>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	4b15      	ldr	r3, [pc, #84]	@ (8005eb8 <HAL_UART_RxCpltCallback+0xa4>)
 8005e64:	2100      	movs	r1, #0
 8005e66:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8005e68:	4b15      	ldr	r3, [pc, #84]	@ (8005ec0 <HAL_UART_RxCpltCallback+0xac>)
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 8005e6e:	4b10      	ldr	r3, [pc, #64]	@ (8005eb0 <HAL_UART_RxCpltCallback+0x9c>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	4b10      	ldr	r3, [pc, #64]	@ (8005eb8 <HAL_UART_RxCpltCallback+0xa4>)
 8005e76:	4413      	add	r3, r2
 8005e78:	2201      	movs	r2, #1
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	480f      	ldr	r0, [pc, #60]	@ (8005ebc <HAL_UART_RxCpltCallback+0xa8>)
 8005e7e:	f011 fc6f 	bl	8017760 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005e82:	2201      	movs	r2, #1
 8005e84:	490b      	ldr	r1, [pc, #44]	@ (8005eb4 <HAL_UART_RxCpltCallback+0xa0>)
 8005e86:	480d      	ldr	r0, [pc, #52]	@ (8005ebc <HAL_UART_RxCpltCallback+0xa8>)
 8005e88:	f011 fcfe 	bl	8017888 <HAL_UART_Receive_IT>
	command_ch_num++;
 8005e8c:	4b08      	ldr	r3, [pc, #32]	@ (8005eb0 <HAL_UART_RxCpltCallback+0x9c>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	3301      	adds	r3, #1
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	4b06      	ldr	r3, [pc, #24]	@ (8005eb0 <HAL_UART_RxCpltCallback+0x9c>)
 8005e96:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 8005e98:	4b09      	ldr	r3, [pc, #36]	@ (8005ec0 <HAL_UART_RxCpltCallback+0xac>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d102      	bne.n	8005ea6 <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 8005ea0:	4b03      	ldr	r3, [pc, #12]	@ (8005eb0 <HAL_UART_RxCpltCallback+0x9c>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
	}
}
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	000041db 	.word	0x000041db
 8005eb4:	000041dc 	.word	0x000041dc
 8005eb8:	000041d0 	.word	0x000041d0
 8005ebc:	240004b0 	.word	0x240004b0
 8005ec0:	000041da 	.word	0x000041da

08005ec4 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
//	}
//	if(BMP180.I2C_Tx_IRQ == 2){
//		BMP180_READ_pres_IT();
//		BMP180.I2C_Tx_IRQ = 0;
//	}
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b0d7      	sub	sp, #348	@ 0x15c
 8005edc:	af54      	add	r7, sp, #336	@ 0x150
 8005ede:	6078      	str	r0, [r7, #4]
	if(MPU6050.MPU6050_IRQ == 1){
 8005ee0:	4bbd      	ldr	r3, [pc, #756]	@ (80061d8 <HAL_I2C_MemRxCpltCallback+0x300>)
 8005ee2:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	f040 84d3 	bne.w	8006892 <HAL_I2C_MemRxCpltCallback+0x9ba>
			MPU6050.MPU6050_IRQ = 0;
 8005eec:	4bba      	ldr	r3, [pc, #744]	@ (80061d8 <HAL_I2C_MemRxCpltCallback+0x300>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

			LED_G_1;
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005efa:	48b8      	ldr	r0, [pc, #736]	@ (80061dc <HAL_I2C_MemRxCpltCallback+0x304>)
 8005efc:	f007 fdb0 	bl	800da60 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT();
 8005f00:	f7fb fc0c 	bl	800171c <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE();
 8005f04:	f7fb fb64 	bl	80015d0 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, HMC5883L.Directions.Z);
 8005f08:	4bb5      	ldr	r3, [pc, #724]	@ (80061e0 <HAL_I2C_MemRxCpltCallback+0x308>)
 8005f0a:	edd3 7a00 	vldr	s15, [r3]
 8005f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f12:	48b4      	ldr	r0, [pc, #720]	@ (80061e4 <HAL_I2C_MemRxCpltCallback+0x30c>)
 8005f14:	f7fb fcae 	bl	8001874 <MPU6050_GET_ACCANDGYR_FILTRED>



			MYDRON.Pitch.Now = data.x;
 8005f18:	4bb2      	ldr	r3, [pc, #712]	@ (80061e4 <HAL_I2C_MemRxCpltCallback+0x30c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4ab2      	ldr	r2, [pc, #712]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f1e:	6113      	str	r3, [r2, #16]
			MYDRON.Rool.Now = data.y;
 8005f20:	4bb0      	ldr	r3, [pc, #704]	@ (80061e4 <HAL_I2C_MemRxCpltCallback+0x30c>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	4ab0      	ldr	r2, [pc, #704]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f26:	6413      	str	r3, [r2, #64]	@ 0x40
			MYDRON.Yaw.Now = data.z;
 8005f28:	4bae      	ldr	r3, [pc, #696]	@ (80061e4 <HAL_I2C_MemRxCpltCallback+0x30c>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4aae      	ldr	r2, [pc, #696]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f2e:	6713      	str	r3, [r2, #112]	@ 0x70


			MYDRON.Rool.Wanted = (float)MYDRON.Rool.Wanted_rx/10;
 8005f30:	4bad      	ldr	r3, [pc, #692]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f32:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f3e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8005f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f46:	4ba8      	ldr	r3, [pc, #672]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f48:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			MYDRON.Pitch.Wanted = (float)MYDRON.Pitch.Wanted_rx/10;
 8005f4c:	4ba6      	ldr	r3, [pc, #664]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f5a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8005f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f62:	4ba1      	ldr	r3, [pc, #644]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f64:	edc3 7a02 	vstr	s15, [r3, #8]
			MYDRON.Yaw.Wanted = 0;//(float)MYDRON.Yaw.Wanted_rx/10;
 8005f68:	4b9f      	ldr	r3, [pc, #636]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	669a      	str	r2, [r3, #104]	@ 0x68
				  			/*
				  				 * FDP
				  				 */
			MYDRON.Rool.Wanted = (MYDRON.Rool.Wanted * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (MYDRON.Rool.Last_Wanted_rx * (1 / (1 + (FDP_FQ * looptime))));
 8005f70:	4b9d      	ldr	r3, [pc, #628]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f72:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8005f76:	eddf 7a9d 	vldr	s15, [pc, #628]	@ 80061ec <HAL_I2C_MemRxCpltCallback+0x314>
 8005f7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f7e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005f82:	eddf 7a9a 	vldr	s15, [pc, #616]	@ 80061ec <HAL_I2C_MemRxCpltCallback+0x314>
 8005f86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f96:	4b94      	ldr	r3, [pc, #592]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f98:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8005f9c:	eddf 7a93 	vldr	s15, [pc, #588]	@ 80061ec <HAL_I2C_MemRxCpltCallback+0x314>
 8005fa0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fa4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005fa8:	ee37 6a86 	vadd.f32	s12, s15, s12
 8005fac:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005fb0:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fbc:	4b8a      	ldr	r3, [pc, #552]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005fbe:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			MYDRON.Pitch.Wanted = (MYDRON.Pitch.Wanted * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (MYDRON.Pitch.Last_Wanted_rx * (1 / (1 + (FDP_FQ * looptime))));
 8005fc2:	4b89      	ldr	r3, [pc, #548]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005fc4:	ed93 7a02 	vldr	s14, [r3, #8]
 8005fc8:	eddf 7a88 	vldr	s15, [pc, #544]	@ 80061ec <HAL_I2C_MemRxCpltCallback+0x314>
 8005fcc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fd0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005fd4:	eddf 7a85 	vldr	s15, [pc, #532]	@ 80061ec <HAL_I2C_MemRxCpltCallback+0x314>
 8005fd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe8:	4b7f      	ldr	r3, [pc, #508]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005fea:	edd3 6a01 	vldr	s13, [r3, #4]
 8005fee:	eddf 7a7f 	vldr	s15, [pc, #508]	@ 80061ec <HAL_I2C_MemRxCpltCallback+0x314>
 8005ff2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ff6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005ffa:	ee37 6a86 	vadd.f32	s12, s15, s12
 8005ffe:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006002:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8006006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800600a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800600e:	4b76      	ldr	r3, [pc, #472]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006010:	edc3 7a02 	vstr	s15, [r3, #8]
			MYDRON.Yaw.Wanted = (MYDRON.Yaw.Wanted * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (MYDRON.Yaw.Last_Wanted_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006014:	4b74      	ldr	r3, [pc, #464]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006016:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800601a:	eddf 7a74 	vldr	s15, [pc, #464]	@ 80061ec <HAL_I2C_MemRxCpltCallback+0x314>
 800601e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006022:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006026:	eddf 7a71 	vldr	s15, [pc, #452]	@ 80061ec <HAL_I2C_MemRxCpltCallback+0x314>
 800602a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800602e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006032:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603a:	4b6b      	ldr	r3, [pc, #428]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 800603c:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8006040:	eddf 7a6a 	vldr	s15, [pc, #424]	@ 80061ec <HAL_I2C_MemRxCpltCallback+0x314>
 8006044:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006048:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800604c:	ee37 6a86 	vadd.f32	s12, s15, s12
 8006050:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006054:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8006058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800605c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006060:	4b61      	ldr	r3, [pc, #388]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006062:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68


			MYDRON.Rool.Last_Wanted_rx = MYDRON.Rool.Wanted;
 8006066:	4b60      	ldr	r3, [pc, #384]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606a:	4a5f      	ldr	r2, [pc, #380]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 800606c:	6353      	str	r3, [r2, #52]	@ 0x34
			MYDRON.Pitch.Last_Wanted_rx = MYDRON.Pitch.Wanted;
 800606e:	4b5e      	ldr	r3, [pc, #376]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	4a5d      	ldr	r2, [pc, #372]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006074:	6053      	str	r3, [r2, #4]
			MYDRON.Yaw.Last_Wanted_rx= MYDRON.Yaw.Wanted;
 8006076:	4b5c      	ldr	r3, [pc, #368]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800607a:	4a5b      	ldr	r2, [pc, #364]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 800607c:	6653      	str	r3, [r2, #100]	@ 0x64


			MYDRON.Pitch.Angle_Error = MYDRON.Pitch.Wanted - MYDRON.Pitch.Now;
 800607e:	4b5a      	ldr	r3, [pc, #360]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006080:	ed93 7a02 	vldr	s14, [r3, #8]
 8006084:	4b58      	ldr	r3, [pc, #352]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006086:	edd3 7a04 	vldr	s15, [r3, #16]
 800608a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800608e:	4b56      	ldr	r3, [pc, #344]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006090:	edc3 7a05 	vstr	s15, [r3, #20]
			MYDRON.Rool.Angle_Error = MYDRON.Rool.Wanted - MYDRON.Rool.Now;
 8006094:	4b54      	ldr	r3, [pc, #336]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006096:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800609a:	4b53      	ldr	r3, [pc, #332]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 800609c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80060a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060a4:	4b50      	ldr	r3, [pc, #320]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060a6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		  	MYDRON.Yaw.Angle_Error = MYDRON.Yaw.Wanted - MYDRON.Yaw.Now;
 80060aa:	4b4f      	ldr	r3, [pc, #316]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060ac:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80060b0:	4b4d      	ldr	r3, [pc, #308]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060b2:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80060b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ba:	4b4b      	ldr	r3, [pc, #300]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060bc:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
		  	MYDRON.Pitch.Angular_Rate_Error = MYDRON.PID_Pitch.Angle_Value- MPU6050.Gyr.gx;
 80060c0:	4b49      	ldr	r3, [pc, #292]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060c2:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 80060c6:	4b44      	ldr	r3, [pc, #272]	@ (80061d8 <HAL_I2C_MemRxCpltCallback+0x300>)
 80060c8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80060cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060d0:	4b45      	ldr	r3, [pc, #276]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060d2:	edc3 7a06 	vstr	s15, [r3, #24]
		  	MYDRON.Rool.Angular_Rate_Error = MYDRON.PID_Rool.Angle_Value- MPU6050.Gyr.gy;
 80060d6:	4b44      	ldr	r3, [pc, #272]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060d8:	ed93 7a3b 	vldr	s14, [r3, #236]	@ 0xec
 80060dc:	4b3e      	ldr	r3, [pc, #248]	@ (80061d8 <HAL_I2C_MemRxCpltCallback+0x300>)
 80060de:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80060e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060e6:	4b40      	ldr	r3, [pc, #256]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060e8:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		  	MYDRON.Yaw.Angular_Rate_Error = MYDRON.PID_Yaw.Angle_Value- MPU6050.Gyr.gz;
 80060ec:	4b3e      	ldr	r3, [pc, #248]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060ee:	ed93 7a48 	vldr	s14, [r3, #288]	@ 0x120
 80060f2:	4b39      	ldr	r3, [pc, #228]	@ (80061d8 <HAL_I2C_MemRxCpltCallback+0x300>)
 80060f4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80060f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060fc:	4b3a      	ldr	r3, [pc, #232]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060fe:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78


			MYDRON.Pitch.Angle_Error_Sum = (MYDRON.PID_Pitch.Status != 0) ? MYDRON.Pitch.Angle_Error_Sum : MYDRON.Pitch.Angle_Error_Sum + (MYDRON.Pitch.Angle_Error);//pitch_error -> pitch_error
 8006102:	4b39      	ldr	r3, [pc, #228]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006104:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d008      	beq.n	800611e <HAL_I2C_MemRxCpltCallback+0x246>
 800610c:	4b36      	ldr	r3, [pc, #216]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 800610e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800611c:	e00c      	b.n	8006138 <HAL_I2C_MemRxCpltCallback+0x260>
 800611e:	4b32      	ldr	r3, [pc, #200]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800612a:	4b2f      	ldr	r3, [pc, #188]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 800612c:	edd3 7a05 	vldr	s15, [r3, #20]
 8006130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006138:	4b2b      	ldr	r3, [pc, #172]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 800613a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			MYDRON.Rool.Angle_Error_Sum = (MYDRON.PID_Rool.Status != 0) ? MYDRON.Rool.Angle_Error_Sum : MYDRON.Rool.Angle_Error_Sum + (MYDRON.Rool.Angle_Error);//rool_error
 800613e:	4b2a      	ldr	r3, [pc, #168]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006140:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <HAL_I2C_MemRxCpltCallback+0x282>
 8006148:	4b27      	ldr	r3, [pc, #156]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 800614a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800614c:	ee07 3a90 	vmov	s15, r3
 8006150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006158:	e00c      	b.n	8006174 <HAL_I2C_MemRxCpltCallback+0x29c>
 800615a:	4b23      	ldr	r3, [pc, #140]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 800615c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006166:	4b20      	ldr	r3, [pc, #128]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006168:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800616c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006174:	4b1c      	ldr	r3, [pc, #112]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006176:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
			MYDRON.Yaw.Angle_Error_Sum = (MYDRON.PID_Yaw.Status != 0) ? MYDRON.Yaw.Angle_Error_Sum : MYDRON.Yaw.Angle_Error_Sum + (MYDRON.Yaw.Angle_Error);//yaw_error
 800617a:	4b1b      	ldr	r3, [pc, #108]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 800617c:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8006180:	2b00      	cmp	r3, #0
 8006182:	d009      	beq.n	8006198 <HAL_I2C_MemRxCpltCallback+0x2c0>
 8006184:	4b18      	ldr	r3, [pc, #96]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006196:	e00d      	b.n	80061b4 <HAL_I2C_MemRxCpltCallback+0x2dc>
 8006198:	4b13      	ldr	r3, [pc, #76]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 800619a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061a6:	4b10      	ldr	r3, [pc, #64]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80061a8:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 80061ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061b4:	4b0c      	ldr	r3, [pc, #48]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80061b6:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

			MYDRON.Pitch.Angular_Rate_Error_Sum = (MYDRON.PID_Pitch.Status != 0) ? MYDRON.Pitch.Angular_Rate_Error_Sum : MYDRON.Pitch.Angular_Rate_Error_Sum + (MYDRON.Pitch.Angular_Rate_Error);//pitch_ar_error
 80061ba:	4b0b      	ldr	r3, [pc, #44]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80061bc:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d015      	beq.n	80061f0 <HAL_I2C_MemRxCpltCallback+0x318>
 80061c4:	4b08      	ldr	r3, [pc, #32]	@ (80061e8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80061c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c8:	ee07 3a90 	vmov	s15, r3
 80061cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061d4:	e019      	b.n	800620a <HAL_I2C_MemRxCpltCallback+0x332>
 80061d6:	bf00      	nop
 80061d8:	00000000 	.word	0x00000000
 80061dc:	58021000 	.word	0x58021000
 80061e0:	00004164 	.word	0x00004164
 80061e4:	00000054 	.word	0x00000054
 80061e8:	00000158 	.word	0x00000158
 80061ec:	3a83126f 	.word	0x3a83126f
 80061f0:	4bc9      	ldr	r3, [pc, #804]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80061f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f4:	ee07 3a90 	vmov	s15, r3
 80061f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061fc:	4bc6      	ldr	r3, [pc, #792]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80061fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8006202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800620a:	4bc3      	ldr	r3, [pc, #780]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 800620c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			MYDRON.Rool.Angular_Rate_Error_Sum = (MYDRON.PID_Rool.Status != 0) ? MYDRON.Rool.Angular_Rate_Error_Sum : MYDRON.Rool.Angular_Rate_Error_Sum + (MYDRON.Rool.Angular_Rate_Error);
 8006210:	4bc1      	ldr	r3, [pc, #772]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006212:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8006216:	2b00      	cmp	r3, #0
 8006218:	d008      	beq.n	800622c <HAL_I2C_MemRxCpltCallback+0x354>
 800621a:	4bbf      	ldr	r3, [pc, #764]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 800621c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800622a:	e00c      	b.n	8006246 <HAL_I2C_MemRxCpltCallback+0x36e>
 800622c:	4bba      	ldr	r3, [pc, #744]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 800622e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006230:	ee07 3a90 	vmov	s15, r3
 8006234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006238:	4bb7      	ldr	r3, [pc, #732]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 800623a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800623e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006246:	4bb4      	ldr	r3, [pc, #720]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006248:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
			MYDRON.Yaw.Angular_Rate_Error_Sum = (MYDRON.PID_Yaw.Status != 0) ? MYDRON.Yaw.Angular_Rate_Error_Sum : MYDRON.Yaw.Angular_Rate_Error_Sum + (MYDRON.Yaw.Angular_Rate_Error);
 800624c:	4bb2      	ldr	r3, [pc, #712]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 800624e:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8006252:	2b00      	cmp	r3, #0
 8006254:	d009      	beq.n	800626a <HAL_I2C_MemRxCpltCallback+0x392>
 8006256:	4bb0      	ldr	r3, [pc, #704]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800625c:	ee07 3a90 	vmov	s15, r3
 8006260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006268:	e00d      	b.n	8006286 <HAL_I2C_MemRxCpltCallback+0x3ae>
 800626a:	4bab      	ldr	r3, [pc, #684]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 800626c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006270:	ee07 3a90 	vmov	s15, r3
 8006274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006278:	4ba7      	ldr	r3, [pc, #668]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 800627a:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 800627e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006286:	4ba4      	ldr	r3, [pc, #656]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006288:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88


			PID_call(MYDRON);
 800628c:	4ca2      	ldr	r4, [pc, #648]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 800628e:	4668      	mov	r0, sp
 8006290:	f104 0310 	add.w	r3, r4, #16
 8006294:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8006298:	4619      	mov	r1, r3
 800629a:	f017 faed 	bl	801d878 <memcpy>
 800629e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80062a2:	f7fd fbff 	bl	8003aa4 <PID_call>


			MYDRON.Pitch.Old_Angle_Error = MYDRON.Pitch.Angle_Error;
 80062a6:	4b9c      	ldr	r3, [pc, #624]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	4a9b      	ldr	r2, [pc, #620]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062ac:	61d3      	str	r3, [r2, #28]
			MYDRON.Rool.Old_Angle_Error = MYDRON.Rool.Angle_Error;
 80062ae:	4b9a      	ldr	r3, [pc, #616]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b2:	4a99      	ldr	r2, [pc, #612]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
			MYDRON.Yaw.Old_Angle_Error = MYDRON.Yaw.Angle_Error;
 80062b6:	4b98      	ldr	r3, [pc, #608]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ba:	4a97      	ldr	r2, [pc, #604]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062bc:	67d3      	str	r3, [r2, #124]	@ 0x7c

			MYDRON.Pitch.Old_Angle_Error = MYDRON.Pitch.Angular_Rate_Error;
 80062be:	4b96      	ldr	r3, [pc, #600]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	4a95      	ldr	r2, [pc, #596]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062c4:	61d3      	str	r3, [r2, #28]
			MYDRON.Rool.Old_Angle_Error = MYDRON.Rool.Angular_Rate_Error;
 80062c6:	4b94      	ldr	r3, [pc, #592]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ca:	4a93      	ldr	r2, [pc, #588]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
			MYDRON.Yaw.Old_Angle_Error = MYDRON.Yaw.Angular_Rate_Error;
 80062ce:	4b92      	ldr	r3, [pc, #584]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062d2:	4a91      	ldr	r2, [pc, #580]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062d4:	67d3      	str	r3, [r2, #124]	@ 0x7c


			MYDRON.Pitch.Value  	= (MYDRON.PID_Pitch.Angular_Rate_Value > 5000) ? PITCH_MAX_VAL(): (MYDRON.PID_Pitch.Angular_Rate_Value < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 80062d6:	4b90      	ldr	r3, [pc, #576]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062d8:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80062dc:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800651c <HAL_I2C_MemRxCpltCallback+0x644>
 80062e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e8:	dd04      	ble.n	80062f4 <HAL_I2C_MemRxCpltCallback+0x41c>
 80062ea:	f001 fa13 	bl	8007714 <PITCH_MAX_VAL>
 80062ee:	4603      	mov	r3, r0
 80062f0:	461a      	mov	r2, r3
 80062f2:	e012      	b.n	800631a <HAL_I2C_MemRxCpltCallback+0x442>
 80062f4:	4b88      	ldr	r3, [pc, #544]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062f6:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80062fa:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8006520 <HAL_I2C_MemRxCpltCallback+0x648>
 80062fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006306:	d504      	bpl.n	8006312 <HAL_I2C_MemRxCpltCallback+0x43a>
 8006308:	f001 fa14 	bl	8007734 <PITCH_MIN_VAL>
 800630c:	4603      	mov	r3, r0
 800630e:	461a      	mov	r2, r3
 8006310:	e003      	b.n	800631a <HAL_I2C_MemRxCpltCallback+0x442>
 8006312:	f001 fa55 	bl	80077c0 <PITCH_GOOD_VAL>
 8006316:	4603      	mov	r3, r0
 8006318:	461a      	mov	r2, r3
 800631a:	4b7f      	ldr	r3, [pc, #508]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 800631c:	859a      	strh	r2, [r3, #44]	@ 0x2c
			MYDRON.Rool.Value 	    = (MYDRON.PID_Rool.Angular_Rate_Value > 5000) ? ROOL_MAX_VAL(): (MYDRON.PID_Rool.Angular_Rate_Value < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 800631e:	4b7e      	ldr	r3, [pc, #504]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006320:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 8006324:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 800651c <HAL_I2C_MemRxCpltCallback+0x644>
 8006328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800632c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006330:	dd04      	ble.n	800633c <HAL_I2C_MemRxCpltCallback+0x464>
 8006332:	f001 f9cf 	bl	80076d4 <ROOL_MAX_VAL>
 8006336:	4603      	mov	r3, r0
 8006338:	461a      	mov	r2, r3
 800633a:	e012      	b.n	8006362 <HAL_I2C_MemRxCpltCallback+0x48a>
 800633c:	4b76      	ldr	r3, [pc, #472]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 800633e:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 8006342:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8006520 <HAL_I2C_MemRxCpltCallback+0x648>
 8006346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800634a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634e:	d504      	bpl.n	800635a <HAL_I2C_MemRxCpltCallback+0x482>
 8006350:	f001 f9d0 	bl	80076f4 <ROOL_MIN_VAL>
 8006354:	4603      	mov	r3, r0
 8006356:	461a      	mov	r2, r3
 8006358:	e003      	b.n	8006362 <HAL_I2C_MemRxCpltCallback+0x48a>
 800635a:	f001 fa1b 	bl	8007794 <ROOL_GOOD_VAL>
 800635e:	4603      	mov	r3, r0
 8006360:	461a      	mov	r2, r3
 8006362:	4b6d      	ldr	r3, [pc, #436]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006364:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			MYDRON.Yaw.Value  		= (MYDRON.PID_Yaw.Angular_Rate_Value > 5000) ? YAW_MAX_VAL(): (MYDRON.PID_Yaw.Angular_Rate_Value < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 8006368:	4b6b      	ldr	r3, [pc, #428]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 800636a:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 800636e:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800651c <HAL_I2C_MemRxCpltCallback+0x644>
 8006372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637a:	dd04      	ble.n	8006386 <HAL_I2C_MemRxCpltCallback+0x4ae>
 800637c:	f001 f9ea 	bl	8007754 <YAW_MAX_VAL>
 8006380:	4603      	mov	r3, r0
 8006382:	461a      	mov	r2, r3
 8006384:	e012      	b.n	80063ac <HAL_I2C_MemRxCpltCallback+0x4d4>
 8006386:	4b64      	ldr	r3, [pc, #400]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006388:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 800638c:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8006520 <HAL_I2C_MemRxCpltCallback+0x648>
 8006390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006398:	d504      	bpl.n	80063a4 <HAL_I2C_MemRxCpltCallback+0x4cc>
 800639a:	f001 f9eb 	bl	8007774 <YAW_MIN_VAL>
 800639e:	4603      	mov	r3, r0
 80063a0:	461a      	mov	r2, r3
 80063a2:	e003      	b.n	80063ac <HAL_I2C_MemRxCpltCallback+0x4d4>
 80063a4:	f001 fa22 	bl	80077ec <YAW_GOOD_VAL>
 80063a8:	4603      	mov	r3, r0
 80063aa:	461a      	mov	r2, r3
 80063ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063ae:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 80063b2:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80063b6:	f7fd fa4b 	bl	8003850 <Thrust_filter>
			if(MYDRON.Thrust.Now > MYDRON.Thrust.Thrust_Limit){
 80063ba:	4b57      	ldr	r3, [pc, #348]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063bc:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80063c0:	461a      	mov	r2, r3
 80063c2:	4b55      	ldr	r3, [pc, #340]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063c4:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 80063c8:	429a      	cmp	r2, r3
 80063ca:	dd06      	ble.n	80063da <HAL_I2C_MemRxCpltCallback+0x502>
				MYDRON.Thrust.Now = MYDRON.Thrust.Thrust_Limit;
 80063cc:	4b52      	ldr	r3, [pc, #328]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063ce:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	4b50      	ldr	r3, [pc, #320]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063d6:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			}


			Stack_Push(WartoscBezwgledna(MYDRON.PID_Pitch.Angle_Factors[4]));
 80063da:	4b4f      	ldr	r3, [pc, #316]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063dc:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 80063e0:	eeb0 0a67 	vmov.f32	s0, s15
 80063e4:	f000 fd88 	bl	8006ef8 <WartoscBezwgledna>
 80063e8:	eef0 7a40 	vmov.f32	s15, s0
 80063ec:	eeb0 0a67 	vmov.f32	s0, s15
 80063f0:	f001 f924 	bl	800763c <Stack_Push>
			Stack_Push(WartoscBezwgledna(MYDRON.PID_Pitch.Angle_Factors[4]));
 80063f4:	4b48      	ldr	r3, [pc, #288]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063f6:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 80063fa:	eeb0 0a67 	vmov.f32	s0, s15
 80063fe:	f000 fd7b 	bl	8006ef8 <WartoscBezwgledna>
 8006402:	eef0 7a40 	vmov.f32	s15, s0
 8006406:	eeb0 0a67 	vmov.f32	s0, s15
 800640a:	f001 f917 	bl	800763c <Stack_Push>
			Stack_Push(MYDRON.Pitch.Now);
 800640e:	4b42      	ldr	r3, [pc, #264]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006410:	edd3 7a04 	vldr	s15, [r3, #16]
 8006414:	eeb0 0a67 	vmov.f32	s0, s15
 8006418:	f001 f910 	bl	800763c <Stack_Push>
			Stack_Push(MYDRON.Rool.Now);
 800641c:	4b3e      	ldr	r3, [pc, #248]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 800641e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006422:	eeb0 0a67 	vmov.f32	s0, s15
 8006426:	f001 f909 	bl	800763c <Stack_Push>


			MYDRON.Thrust.Speed_1 = (((uint32_t)((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value - MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value - MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500) : max_speed;//trust 7000 max
 800642a:	4b3b      	ldr	r3, [pc, #236]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 800642c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8006430:	ee07 3a90 	vmov	s15, r3
 8006434:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006438:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8006500 <HAL_I2C_MemRxCpltCallback+0x628>
 800643c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006440:	4b35      	ldr	r3, [pc, #212]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006442:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800644e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006452:	4b31      	ldr	r3, [pc, #196]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006454:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006458:	ee07 3a90 	vmov	s15, r3
 800645c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006460:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006464:	4b2c      	ldr	r3, [pc, #176]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006466:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006472:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006476:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006508 <HAL_I2C_MemRxCpltCallback+0x630>
 800647a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800647e:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006510 <HAL_I2C_MemRxCpltCallback+0x638>
 8006482:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006486:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800648a:	ee17 2a90 	vmov	r2, s15
 800648e:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006492:	429a      	cmp	r2, r3
 8006494:	d846      	bhi.n	8006524 <HAL_I2C_MemRxCpltCallback+0x64c>
 8006496:	4b20      	ldr	r3, [pc, #128]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006498:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800649c:	ee07 3a90 	vmov	s15, r3
 80064a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064a4:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8006500 <HAL_I2C_MemRxCpltCallback+0x628>
 80064a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80064ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80064ae:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064ba:	ee36 6b07 	vadd.f64	d6, d6, d7
 80064be:	4b16      	ldr	r3, [pc, #88]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80064c0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80064c4:	ee07 3a90 	vmov	s15, r3
 80064c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80064d0:	4b11      	ldr	r3, [pc, #68]	@ (8006518 <HAL_I2C_MemRxCpltCallback+0x640>)
 80064d2:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064de:	ee36 7b07 	vadd.f64	d7, d6, d7
 80064e2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006508 <HAL_I2C_MemRxCpltCallback+0x630>
 80064e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80064ea:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006510 <HAL_I2C_MemRxCpltCallback+0x638>
 80064ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80064f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80064f6:	ee17 3a90 	vmov	r3, s15
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	e014      	b.n	8006528 <HAL_I2C_MemRxCpltCallback+0x650>
 80064fe:	bf00      	nop
 8006500:	66666666 	.word	0x66666666
 8006504:	3fe66666 	.word	0x3fe66666
 8006508:	00000000 	.word	0x00000000
 800650c:	40c48200 	.word	0x40c48200
 8006510:	00000000 	.word	0x00000000
 8006514:	407f4000 	.word	0x407f4000
 8006518:	00000158 	.word	0x00000158
 800651c:	459c4000 	.word	0x459c4000
 8006520:	c59c4000 	.word	0xc59c4000
 8006524:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006528:	4aab      	ldr	r2, [pc, #684]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 800652a:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
			MYDRON.Thrust.Speed_2 = (((uint32_t)((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value - MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value - MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500) : max_speed;//
 800652e:	4baa      	ldr	r3, [pc, #680]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006530:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8006534:	ee07 3a90 	vmov	s15, r3
 8006538:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800653c:	ed9f 6ba0 	vldr	d6, [pc, #640]	@ 80067c0 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006540:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006544:	4ba4      	ldr	r3, [pc, #656]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006546:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006552:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006556:	4ba0      	ldr	r3, [pc, #640]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006558:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800655c:	ee07 3a90 	vmov	s15, r3
 8006560:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006564:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006568:	4b9b      	ldr	r3, [pc, #620]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 800656a:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006576:	ee36 7b47 	vsub.f64	d7, d6, d7
 800657a:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 80067c8 <HAL_I2C_MemRxCpltCallback+0x8f0>
 800657e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006582:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 80067d0 <HAL_I2C_MemRxCpltCallback+0x8f8>
 8006586:	ee37 7b06 	vadd.f64	d7, d7, d6
 800658a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800658e:	ee17 2a90 	vmov	r2, s15
 8006592:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006596:	429a      	cmp	r2, r3
 8006598:	d833      	bhi.n	8006602 <HAL_I2C_MemRxCpltCallback+0x72a>
 800659a:	4b8f      	ldr	r3, [pc, #572]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 800659c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80065a0:	ee07 3a90 	vmov	s15, r3
 80065a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065a8:	ed9f 6b85 	vldr	d6, [pc, #532]	@ 80067c0 <HAL_I2C_MemRxCpltCallback+0x8e8>
 80065ac:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065b0:	4b89      	ldr	r3, [pc, #548]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 80065b2:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80065c2:	4b85      	ldr	r3, [pc, #532]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 80065c4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80065c8:	ee07 3a90 	vmov	s15, r3
 80065cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065d0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80065d4:	4b80      	ldr	r3, [pc, #512]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 80065d6:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80065e6:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 80067c8 <HAL_I2C_MemRxCpltCallback+0x8f0>
 80065ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80065ee:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 80067d0 <HAL_I2C_MemRxCpltCallback+0x8f8>
 80065f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80065f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80065fa:	ee17 3a90 	vmov	r3, s15
 80065fe:	b29b      	uxth	r3, r3
 8006600:	e001      	b.n	8006606 <HAL_I2C_MemRxCpltCallback+0x72e>
 8006602:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006606:	4a74      	ldr	r2, [pc, #464]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006608:	f8a2 30a2 	strh.w	r3, [r2, #162]	@ 0xa2
			MYDRON.Thrust.Speed_3 = (((uint32_t)((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value + MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value + MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500) : max_speed;//
 800660c:	4b72      	ldr	r3, [pc, #456]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 800660e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800661a:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 80067c0 <HAL_I2C_MemRxCpltCallback+0x8e8>
 800661e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006622:	4b6d      	ldr	r3, [pc, #436]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006624:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 8006628:	ee07 3a90 	vmov	s15, r3
 800662c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006630:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006634:	4b68      	ldr	r3, [pc, #416]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006636:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006642:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006646:	4b64      	ldr	r3, [pc, #400]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006648:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 800664c:	ee07 3a90 	vmov	s15, r3
 8006650:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006654:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006658:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 80067c8 <HAL_I2C_MemRxCpltCallback+0x8f0>
 800665c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006660:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 80067d0 <HAL_I2C_MemRxCpltCallback+0x8f8>
 8006664:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006668:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800666c:	ee17 2a90 	vmov	r2, s15
 8006670:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006674:	429a      	cmp	r2, r3
 8006676:	d833      	bhi.n	80066e0 <HAL_I2C_MemRxCpltCallback+0x808>
 8006678:	4b57      	ldr	r3, [pc, #348]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 800667a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006686:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 80067c0 <HAL_I2C_MemRxCpltCallback+0x8e8>
 800668a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800668e:	4b52      	ldr	r3, [pc, #328]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006690:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 8006694:	ee07 3a90 	vmov	s15, r3
 8006698:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800669c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80066a0:	4b4d      	ldr	r3, [pc, #308]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 80066a2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80066b2:	4b49      	ldr	r3, [pc, #292]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 80066b4:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 80066b8:	ee07 3a90 	vmov	s15, r3
 80066bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80066c4:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 80067c8 <HAL_I2C_MemRxCpltCallback+0x8f0>
 80066c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80066cc:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 80067d0 <HAL_I2C_MemRxCpltCallback+0x8f8>
 80066d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80066d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066d8:	ee17 3a90 	vmov	r3, s15
 80066dc:	b29b      	uxth	r3, r3
 80066de:	e001      	b.n	80066e4 <HAL_I2C_MemRxCpltCallback+0x80c>
 80066e0:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 80066e4:	4a3c      	ldr	r2, [pc, #240]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 80066e6:	f8a2 30a4 	strh.w	r3, [r2, #164]	@ 0xa4
			MYDRON.Thrust.Speed_4 = (((uint32_t)((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value + MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value + MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500) : max_speed;//
 80066ea:	4b3b      	ldr	r3, [pc, #236]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 80066ec:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066f8:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 80067c0 <HAL_I2C_MemRxCpltCallback+0x8e8>
 80066fc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006700:	4b35      	ldr	r3, [pc, #212]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006702:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800670e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006712:	4b31      	ldr	r3, [pc, #196]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006714:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006718:	ee07 3a90 	vmov	s15, r3
 800671c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006720:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006724:	4b2c      	ldr	r3, [pc, #176]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006726:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 800672a:	ee07 3a90 	vmov	s15, r3
 800672e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006732:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006736:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 80067c8 <HAL_I2C_MemRxCpltCallback+0x8f0>
 800673a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800673e:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 80067d0 <HAL_I2C_MemRxCpltCallback+0x8f8>
 8006742:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006746:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800674a:	ee17 2a90 	vmov	r2, s15
 800674e:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006752:	429a      	cmp	r2, r3
 8006754:	d842      	bhi.n	80067dc <HAL_I2C_MemRxCpltCallback+0x904>
 8006756:	4b20      	ldr	r3, [pc, #128]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006758:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800675c:	ee07 3a90 	vmov	s15, r3
 8006760:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006764:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 80067c0 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006768:	ee27 6b06 	vmul.f64	d6, d7, d6
 800676c:	4b1a      	ldr	r3, [pc, #104]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 800676e:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800677a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800677e:	4b16      	ldr	r3, [pc, #88]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006780:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800678c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006790:	4b11      	ldr	r3, [pc, #68]	@ (80067d8 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006792:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800679e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80067a2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80067c8 <HAL_I2C_MemRxCpltCallback+0x8f0>
 80067a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80067aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80067d0 <HAL_I2C_MemRxCpltCallback+0x8f8>
 80067ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80067b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80067b6:	ee17 3a90 	vmov	r3, s15
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	e010      	b.n	80067e0 <HAL_I2C_MemRxCpltCallback+0x908>
 80067be:	bf00      	nop
 80067c0:	66666666 	.word	0x66666666
 80067c4:	3fe66666 	.word	0x3fe66666
 80067c8:	00000000 	.word	0x00000000
 80067cc:	40c48200 	.word	0x40c48200
 80067d0:	00000000 	.word	0x00000000
 80067d4:	407f4000 	.word	0x407f4000
 80067d8:	00000158 	.word	0x00000158
 80067dc:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 80067e0:	4a67      	ldr	r2, [pc, #412]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 80067e2:	f8a2 30a6 	strh.w	r3, [r2, #166]	@ 0xa6

			if( MYDRON.Thrust.Speed_1 != MYDRON.Thrust.Old_Speed_1){
 80067e6:	4b66      	ldr	r3, [pc, #408]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 80067e8:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 80067ec:	4b64      	ldr	r3, [pc, #400]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 80067ee:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d005      	beq.n	8006802 <HAL_I2C_MemRxCpltCallback+0x92a>
				ESC_1_SPEED( MYDRON.Thrust.Speed_1);
 80067f6:	4b62      	ldr	r3, [pc, #392]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 80067f8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fa fb31 	bl	8000e64 <ESC_1_SPEED>
			}
			if( MYDRON.Thrust.Speed_2 != MYDRON.Thrust.Old_Speed_2){
 8006802:	4b5f      	ldr	r3, [pc, #380]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 8006804:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	@ 0xa2
 8006808:	4b5d      	ldr	r3, [pc, #372]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 800680a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 800680e:	429a      	cmp	r2, r3
 8006810:	d005      	beq.n	800681e <HAL_I2C_MemRxCpltCallback+0x946>
				ESC_2_SPEED( MYDRON.Thrust.Speed_2);
 8006812:	4b5b      	ldr	r3, [pc, #364]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 8006814:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 8006818:	4618      	mov	r0, r3
 800681a:	f7fa fb45 	bl	8000ea8 <ESC_2_SPEED>
			}
			if( MYDRON.Thrust.Speed_3 != MYDRON.Thrust.Old_Speed_3){
 800681e:	4b58      	ldr	r3, [pc, #352]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 8006820:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	@ 0xa4
 8006824:	4b56      	ldr	r3, [pc, #344]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 8006826:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800682a:	429a      	cmp	r2, r3
 800682c:	d005      	beq.n	800683a <HAL_I2C_MemRxCpltCallback+0x962>
				ESC_3_SPEED( MYDRON.Thrust.Speed_3);
 800682e:	4b54      	ldr	r3, [pc, #336]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 8006830:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8006834:	4618      	mov	r0, r3
 8006836:	f7fa fb59 	bl	8000eec <ESC_3_SPEED>
			}
			if( MYDRON.Thrust.Speed_4 != MYDRON.Thrust.Old_Speed_4){
 800683a:	4b51      	ldr	r3, [pc, #324]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 800683c:	f8b3 20a6 	ldrh.w	r2, [r3, #166]	@ 0xa6
 8006840:	4b4f      	ldr	r3, [pc, #316]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 8006842:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8006846:	429a      	cmp	r2, r3
 8006848:	d005      	beq.n	8006856 <HAL_I2C_MemRxCpltCallback+0x97e>
				ESC_4_SPEED( MYDRON.Thrust.Speed_4);
 800684a:	4b4d      	ldr	r3, [pc, #308]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 800684c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8006850:	4618      	mov	r0, r3
 8006852:	f7fa fb6d 	bl	8000f30 <ESC_4_SPEED>
			}

			MYDRON.Thrust.Old_Speed_1 = MYDRON.Thrust.Speed_1;
 8006856:	4b4a      	ldr	r3, [pc, #296]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 8006858:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 800685c:	4b48      	ldr	r3, [pc, #288]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 800685e:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
			MYDRON.Thrust.Old_Speed_2 = MYDRON.Thrust.Speed_2;
 8006862:	4b47      	ldr	r3, [pc, #284]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 8006864:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	@ 0xa2
 8006868:	4b45      	ldr	r3, [pc, #276]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 800686a:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
			MYDRON.Thrust.Old_Speed_3 = MYDRON.Thrust.Speed_3;
 800686e:	4b44      	ldr	r3, [pc, #272]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 8006870:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	@ 0xa4
 8006874:	4b42      	ldr	r3, [pc, #264]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 8006876:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			MYDRON.Thrust.Old_Speed_4 = MYDRON.Thrust.Speed_4;
 800687a:	4b41      	ldr	r3, [pc, #260]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 800687c:	f8b3 20a6 	ldrh.w	r2, [r3, #166]	@ 0xa6
 8006880:	4b3f      	ldr	r3, [pc, #252]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 8006882:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

			LED_G_0;
 8006886:	2200      	movs	r2, #0
 8006888:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800688c:	483d      	ldr	r0, [pc, #244]	@ (8006984 <HAL_I2C_MemRxCpltCallback+0xaac>)
 800688e:	f007 f8e7 	bl	800da60 <HAL_GPIO_WritePin>
	}
	if(HMC5883L.HMC583L_IRQ == 1){
 8006892:	4b3d      	ldr	r3, [pc, #244]	@ (8006988 <HAL_I2C_MemRxCpltCallback+0xab0>)
 8006894:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8006898:	2b01      	cmp	r3, #1
 800689a:	d126      	bne.n	80068ea <HAL_I2C_MemRxCpltCallback+0xa12>
		HMC5883L.HMC583L_IRQ = 0;
 800689c:	4b3a      	ldr	r3, [pc, #232]	@ (8006988 <HAL_I2C_MemRxCpltCallback+0xab0>)
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		HMC5883L_Get_Z_End_IT();
 80068a4:	f7fa fc4c 	bl	8001140 <HMC5883L_Get_Z_End_IT>
		HMC5883L.Directions.Z = (HMC5883L.Directions.Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (HMC5883L.Directions.Old_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 80068a8:	4b37      	ldr	r3, [pc, #220]	@ (8006988 <HAL_I2C_MemRxCpltCallback+0xab0>)
 80068aa:	edd3 7a00 	vldr	s15, [r3]
 80068ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80068b2:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8006968 <HAL_I2C_MemRxCpltCallback+0xa90>
 80068b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80068ba:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 8006970 <HAL_I2C_MemRxCpltCallback+0xa98>
 80068be:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80068c2:	4b31      	ldr	r3, [pc, #196]	@ (8006988 <HAL_I2C_MemRxCpltCallback+0xab0>)
 80068c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80068c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80068cc:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8006978 <HAL_I2C_MemRxCpltCallback+0xaa0>
 80068d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80068d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80068d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80068dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006988 <HAL_I2C_MemRxCpltCallback+0xab0>)
 80068de:	edc3 7a00 	vstr	s15, [r3]
		HMC5883L.Directions.Old_Z = HMC5883L.Directions.Z;
 80068e2:	4b29      	ldr	r3, [pc, #164]	@ (8006988 <HAL_I2C_MemRxCpltCallback+0xab0>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a28      	ldr	r2, [pc, #160]	@ (8006988 <HAL_I2C_MemRxCpltCallback+0xab0>)
 80068e8:	60d3      	str	r3, [r2, #12]
	}
	if(BMP180.BMP180_IRQ == 1){
 80068ea:	4b28      	ldr	r3, [pc, #160]	@ (800698c <HAL_I2C_MemRxCpltCallback+0xab4>)
 80068ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d118      	bne.n	8006926 <HAL_I2C_MemRxCpltCallback+0xa4e>
		BMP180.Timer = 1;
 80068f4:	4b25      	ldr	r3, [pc, #148]	@ (800698c <HAL_I2C_MemRxCpltCallback+0xab4>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
		BMP180.Raw_Data.temperature = BMP180_GET_temp_IT();
 80068fc:	f7f9 ffa2 	bl	8000844 <BMP180_GET_temp_IT>
 8006900:	4603      	mov	r3, r0
 8006902:	461a      	mov	r2, r3
 8006904:	4b21      	ldr	r3, [pc, #132]	@ (800698c <HAL_I2C_MemRxCpltCallback+0xab4>)
 8006906:	641a      	str	r2, [r3, #64]	@ 0x40
		BMP180.temp = BMP180_GET_temp(BMP180.Raw_Data.temperature);
 8006908:	4b20      	ldr	r3, [pc, #128]	@ (800698c <HAL_I2C_MemRxCpltCallback+0xab4>)
 800690a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690c:	b29b      	uxth	r3, r3
 800690e:	4618      	mov	r0, r3
 8006910:	f7fa f8b8 	bl	8000a84 <BMP180_GET_temp>
 8006914:	eef0 7a40 	vmov.f32	s15, s0
 8006918:	4b1c      	ldr	r3, [pc, #112]	@ (800698c <HAL_I2C_MemRxCpltCallback+0xab4>)
 800691a:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		BMP180.BMP180_IRQ = 3;
 800691e:	4b1b      	ldr	r3, [pc, #108]	@ (800698c <HAL_I2C_MemRxCpltCallback+0xab4>)
 8006920:	2203      	movs	r2, #3
 8006922:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	}
	if(BMP180.BMP180_IRQ == 2){
 8006926:	4b19      	ldr	r3, [pc, #100]	@ (800698c <HAL_I2C_MemRxCpltCallback+0xab4>)
 8006928:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800692c:	2b02      	cmp	r3, #2
 800692e:	d114      	bne.n	800695a <HAL_I2C_MemRxCpltCallback+0xa82>
		BMP180.Raw_Data.pressure = BMP180_GET_pres_IT();
 8006930:	f7f9 ff9e 	bl	8000870 <BMP180_GET_pres_IT>
 8006934:	4603      	mov	r3, r0
 8006936:	461a      	mov	r2, r3
 8006938:	4b14      	ldr	r3, [pc, #80]	@ (800698c <HAL_I2C_MemRxCpltCallback+0xab4>)
 800693a:	645a      	str	r2, [r3, #68]	@ 0x44
		BMP180.pres = BMP180_GET_pres(BMP180.Raw_Data.pressure);
 800693c:	4b13      	ldr	r3, [pc, #76]	@ (800698c <HAL_I2C_MemRxCpltCallback+0xab4>)
 800693e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006940:	b29b      	uxth	r3, r3
 8006942:	4618      	mov	r0, r3
 8006944:	f7fa f8e8 	bl	8000b18 <BMP180_GET_pres>
 8006948:	eef0 7a40 	vmov.f32	s15, s0
 800694c:	4b0f      	ldr	r3, [pc, #60]	@ (800698c <HAL_I2C_MemRxCpltCallback+0xab4>)
 800694e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		BMP180.BMP180_IRQ = 0;
 8006952:	4b0e      	ldr	r3, [pc, #56]	@ (800698c <HAL_I2C_MemRxCpltCallback+0xab4>)
 8006954:	2200      	movs	r2, #0
 8006956:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	}
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	bd90      	pop	{r4, r7, pc}
 8006962:	bf00      	nop
 8006964:	f3af 8000 	nop.w
 8006968:	9999999a 	.word	0x9999999a
 800696c:	3fc99999 	.word	0x3fc99999
 8006970:	33333333 	.word	0x33333333
 8006974:	3ff33333 	.word	0x3ff33333
 8006978:	aaaaaaab 	.word	0xaaaaaaab
 800697c:	3feaaaaa 	.word	0x3feaaaaa
 8006980:	00000158 	.word	0x00000158
 8006984:	58021000 	.word	0x58021000
 8006988:	00004164 	.word	0x00004164
 800698c:	0000006c 	.word	0x0000006c

08006990 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi){
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	if(NRF24.SPI_Tx_Inte == 1 && NRF24.Step == 4){
 8006998:	4b1a      	ldr	r3, [pc, #104]	@ (8006a04 <HAL_SPI_TxCpltCallback+0x74>)
 800699a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d02c      	beq.n	80069fc <HAL_SPI_TxCpltCallback+0x6c>
 80069a2:	4b18      	ldr	r3, [pc, #96]	@ (8006a04 <HAL_SPI_TxCpltCallback+0x74>)
 80069a4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d127      	bne.n	80069fc <HAL_SPI_TxCpltCallback+0x6c>
		LED_6_1;
 80069ac:	2201      	movs	r2, #1
 80069ae:	2108      	movs	r1, #8
 80069b0:	4815      	ldr	r0, [pc, #84]	@ (8006a08 <HAL_SPI_TxCpltCallback+0x78>)
 80069b2:	f007 f855 	bl	800da60 <HAL_GPIO_WritePin>
		NRF24_CSN_HIGH;
 80069b6:	2201      	movs	r2, #1
 80069b8:	2180      	movs	r1, #128	@ 0x80
 80069ba:	4814      	ldr	r0, [pc, #80]	@ (8006a0c <HAL_SPI_TxCpltCallback+0x7c>)
 80069bc:	f007 f850 	bl	800da60 <HAL_GPIO_WritePin>
		NRF24_CE_HIGH;//nRF24_WaitTX()
 80069c0:	2201      	movs	r2, #1
 80069c2:	2140      	movs	r1, #64	@ 0x40
 80069c4:	4811      	ldr	r0, [pc, #68]	@ (8006a0c <HAL_SPI_TxCpltCallback+0x7c>)
 80069c6:	f007 f84b 	bl	800da60 <HAL_GPIO_WritePin>
		LED_6_0;
 80069ca:	2200      	movs	r2, #0
 80069cc:	2108      	movs	r1, #8
 80069ce:	480e      	ldr	r0, [pc, #56]	@ (8006a08 <HAL_SPI_TxCpltCallback+0x78>)
 80069d0:	f007 f846 	bl	800da60 <HAL_GPIO_WritePin>
		//
		NRF24.Status = NRF24_Ready;
 80069d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a04 <HAL_SPI_TxCpltCallback+0x74>)
 80069d6:	2204      	movs	r2, #4
 80069d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		NRF24.Timer_1 = 1;
 80069dc:	4b09      	ldr	r3, [pc, #36]	@ (8006a04 <HAL_SPI_TxCpltCallback+0x74>)
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
		//NRF24.Message_Status = 2;
		NRF24.SPI_Tx_Inte = 0;
 80069e4:	4b07      	ldr	r3, [pc, #28]	@ (8006a04 <HAL_SPI_TxCpltCallback+0x74>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
		NRF24.Step++;//Step 5
 80069ec:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <HAL_SPI_TxCpltCallback+0x74>)
 80069ee:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80069f2:	3301      	adds	r3, #1
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	4b03      	ldr	r3, [pc, #12]	@ (8006a04 <HAL_SPI_TxCpltCallback+0x74>)
 80069f8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

	}
}
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	000000cc 	.word	0x000000cc
 8006a08:	58021000 	.word	0x58021000
 8006a0c:	58020400 	.word	0x58020400

08006a10 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi){//todo
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
	if(STARTUP == 0 && NRF24.SPI_Rx_Inte == 1 && NRF24.Step == 1){
 8006a18:	4bac      	ldr	r3, [pc, #688]	@ (8006ccc <HAL_SPI_RxCpltCallback+0x2bc>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f040 8151 	bne.w	8006cc4 <HAL_SPI_RxCpltCallback+0x2b4>
 8006a22:	4bab      	ldr	r3, [pc, #684]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a24:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 814b 	beq.w	8006cc4 <HAL_SPI_RxCpltCallback+0x2b4>
 8006a2e:	4ba8      	ldr	r3, [pc, #672]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a30:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	f040 8145 	bne.w	8006cc4 <HAL_SPI_RxCpltCallback+0x2b4>

		NRF24.SPI_Rx_Inte = 0;
 8006a3a:	4ba5      	ldr	r3, [pc, #660]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
		LED_6_1;
 8006a42:	2201      	movs	r2, #1
 8006a44:	2108      	movs	r1, #8
 8006a46:	48a3      	ldr	r0, [pc, #652]	@ (8006cd4 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006a48:	f007 f80a 	bl	800da60 <HAL_GPIO_WritePin>
		nRF24_ReadRXPaylaod_IT_End();
 8006a4c:	f7fb fe1a 	bl	8002684 <nRF24_ReadRXPaylaod_IT_End>
		LED_6_0;
 8006a50:	2200      	movs	r2, #0
 8006a52:	2108      	movs	r1, #8
 8006a54:	489f      	ldr	r0, [pc, #636]	@ (8006cd4 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006a56:	f007 f803 	bl	800da60 <HAL_GPIO_WritePin>
		NRF24.Step++;//step 2
 8006a5a:	4b9d      	ldr	r3, [pc, #628]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a5c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006a60:	3301      	adds	r3, #1
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	4b9a      	ldr	r3, [pc, #616]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a66:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		NRF24.Timer_1 = 2;
 8006a6a:	4b99      	ldr	r3, [pc, #612]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86

		LED_Y_1;
 8006a72:	2201      	movs	r2, #1
 8006a74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006a78:	4897      	ldr	r0, [pc, #604]	@ (8006cd8 <HAL_SPI_RxCpltCallback+0x2c8>)
 8006a7a:	f006 fff1 	bl	800da60 <HAL_GPIO_WritePin>

		loopnum = 0;
 8006a7e:	4b97      	ldr	r3, [pc, #604]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2cc>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
		for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	e013      	b.n	8006ab2 <HAL_SPI_RxCpltCallback+0xa2>
			if(NRF24.RxData[12+abc] == NRF24.Rxcode[abc+12]){
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	330c      	adds	r3, #12
 8006a8e:	4a90      	ldr	r2, [pc, #576]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a90:	5cd2      	ldrb	r2, [r2, r3]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	330c      	adds	r3, #12
 8006a96:	498e      	ldr	r1, [pc, #568]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a98:	440b      	add	r3, r1
 8006a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d104      	bne.n	8006aac <HAL_SPI_RxCpltCallback+0x9c>
				loopnum++;
 8006aa2:	4b8e      	ldr	r3, [pc, #568]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2cc>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	4a8c      	ldr	r2, [pc, #560]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2cc>)
 8006aaa:	6013      	str	r3, [r2, #0]
		for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b09      	cmp	r3, #9
 8006ab6:	dde8      	ble.n	8006a8a <HAL_SPI_RxCpltCallback+0x7a>
			}
		}

		if(loopnum == 10){
 8006ab8:	4b88      	ldr	r3, [pc, #544]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2cc>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b0a      	cmp	r3, #10
 8006abe:	f040 80ef 	bne.w	8006ca0 <HAL_SPI_RxCpltCallback+0x290>
			convert_array_to_value(NRF24.RxData, &MYDRON.Pitch.Wanted_v, 0, 2);//pitch
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4986      	ldr	r1, [pc, #536]	@ (8006ce0 <HAL_SPI_RxCpltCallback+0x2d0>)
 8006ac8:	4881      	ldr	r0, [pc, #516]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006aca:	f000 f925 	bl	8006d18 <convert_array_to_value>
			convert_array_to_value(NRF24.RxData, &MYDRON.Rool.Wanted_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 8006ace:	2305      	movs	r3, #5
 8006ad0:	2203      	movs	r2, #3
 8006ad2:	4984      	ldr	r1, [pc, #528]	@ (8006ce4 <HAL_SPI_RxCpltCallback+0x2d4>)
 8006ad4:	487e      	ldr	r0, [pc, #504]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006ad6:	f000 f91f 	bl	8006d18 <convert_array_to_value>
			if(wobble_strenght == 1){
 8006ada:	4b83      	ldr	r3, [pc, #524]	@ (8006ce8 <HAL_SPI_RxCpltCallback+0x2d8>)
 8006adc:	edd3 7a00 	vldr	s15, [r3]
 8006ae0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ae4:	eef4 7a47 	vcmp.f32	s15, s14
 8006ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aec:	d105      	bne.n	8006afa <HAL_SPI_RxCpltCallback+0xea>
				convert_array_to_value(NRF24.RxData, &MYDRON.Thrust.Wanted, 6, 8);//
 8006aee:	2308      	movs	r3, #8
 8006af0:	2206      	movs	r2, #6
 8006af2:	497e      	ldr	r1, [pc, #504]	@ (8006cec <HAL_SPI_RxCpltCallback+0x2dc>)
 8006af4:	4876      	ldr	r0, [pc, #472]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006af6:	f000 f90f 	bl	8006d18 <convert_array_to_value>
			}
			convert_array_to_value(NRF24.RxData, &MYDRON.Yaw.Wanted_v, 9, 11);//
 8006afa:	230b      	movs	r3, #11
 8006afc:	2209      	movs	r2, #9
 8006afe:	497c      	ldr	r1, [pc, #496]	@ (8006cf0 <HAL_SPI_RxCpltCallback+0x2e0>)
 8006b00:	4873      	ldr	r0, [pc, #460]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006b02:	f000 f909 	bl	8006d18 <convert_array_to_value>
			MYDRON.Status.Connection = DRON_CONNECTED;
 8006b06:	4b7b      	ldr	r3, [pc, #492]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2154 	strb.w	r2, [r3, #340]	@ 0x154

			if(NRF24.RxData[23] == 1){
 8006b0e:	4b70      	ldr	r3, [pc, #448]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006b10:	7ddb      	ldrb	r3, [r3, #23]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d11b      	bne.n	8006b4e <HAL_SPI_RxCpltCallback+0x13e>
				ESC_POWER_1;
 8006b16:	2201      	movs	r2, #1
 8006b18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b1c:	4876      	ldr	r0, [pc, #472]	@ (8006cf8 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006b1e:	f006 ff9f 	bl	800da60 <HAL_GPIO_WritePin>
				LED_R_1;
 8006b22:	2201      	movs	r2, #1
 8006b24:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006b28:	486b      	ldr	r0, [pc, #428]	@ (8006cd8 <HAL_SPI_RxCpltCallback+0x2c8>)
 8006b2a:	f006 ff99 	bl	800da60 <HAL_GPIO_WritePin>
				if(SD_enable_Flag == 1){
 8006b2e:	4b73      	ldr	r3, [pc, #460]	@ (8006cfc <HAL_SPI_RxCpltCallback+0x2ec>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d10b      	bne.n	8006b4e <HAL_SPI_RxCpltCallback+0x13e>
					f_close(&fil);
 8006b36:	4872      	ldr	r0, [pc, #456]	@ (8006d00 <HAL_SPI_RxCpltCallback+0x2f0>)
 8006b38:	f016 fc74 	bl	801d424 <f_close>
					fresult = f_mount(NULL, "/", 1);
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	4971      	ldr	r1, [pc, #452]	@ (8006d04 <HAL_SPI_RxCpltCallback+0x2f4>)
 8006b40:	2000      	movs	r0, #0
 8006b42:	f016 f84f 	bl	801cbe4 <f_mount>
 8006b46:	4603      	mov	r3, r0
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4b6f      	ldr	r3, [pc, #444]	@ (8006d08 <HAL_SPI_RxCpltCallback+0x2f8>)
 8006b4c:	701a      	strb	r2, [r3, #0]
					}
			}

			if(MYDRON.Thrust.Wanted == 9999){
 8006b4e:	4b69      	ldr	r3, [pc, #420]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b50:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8006b54:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d103      	bne.n	8006b64 <HAL_SPI_RxCpltCallback+0x154>
				MYDRON.Thrust.Max_Flag = THRUST_MAX;
 8006b5c:	4b65      	ldr	r3, [pc, #404]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b5e:	2210      	movs	r2, #16
 8006b60:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
		  	}
			MYDRON.Thrust.Wanted = MYDRON.Thrust.Wanted * 20;
 8006b64:	4b63      	ldr	r3, [pc, #396]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b66:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	0092      	lsls	r2, r2, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	b21a      	sxth	r2, r3
 8006b78:	4b5e      	ldr	r3, [pc, #376]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b7a:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			MYDRON.Thrust.Wanted = MYDRON.Thrust.Wanted - 10000;
 8006b7e:	4b5d      	ldr	r3, [pc, #372]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b80:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	4b61      	ldr	r3, [pc, #388]	@ (8006d0c <HAL_SPI_RxCpltCallback+0x2fc>)
 8006b88:	4413      	add	r3, r2
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	b21a      	sxth	r2, r3
 8006b8e:	4b59      	ldr	r3, [pc, #356]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b90:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			if(MYDRON.Thrust.Wanted < 0){
 8006b94:	4b57      	ldr	r3, [pc, #348]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b96:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	da03      	bge.n	8006ba6 <HAL_SPI_RxCpltCallback+0x196>
				MYDRON.Thrust.Wanted = 0;
 8006b9e:	4b55      	ldr	r3, [pc, #340]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			}

			MYDRON.Rool.Wanted_rx = (MYDRON.Rool.Wanted_v - 500)*MYDRON.Rool.Wanted_Factor;//MYDRON.Rool.Wanted_rx (-90 <-> 90)
 8006ba6:	4b53      	ldr	r3, [pc, #332]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006ba8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8006bac:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006bb0:	ee07 3a90 	vmov	s15, r3
 8006bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006bba:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8006bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bc6:	ee17 3a90 	vmov	r3, s15
 8006bca:	b21a      	sxth	r2, r3
 8006bcc:	4b49      	ldr	r3, [pc, #292]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006bce:	861a      	strh	r2, [r3, #48]	@ 0x30
			MYDRON.Pitch.Wanted_rx = (MYDRON.Pitch.Wanted_v - 500)*MYDRON.Pitch.Wanted_Factor;// (-450 <-> 450)
 8006bd0:	4b48      	ldr	r3, [pc, #288]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006bd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006bd6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006be2:	4b44      	ldr	r3, [pc, #272]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006be4:	edd3 7a03 	vldr	s15, [r3, #12]
 8006be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bf0:	ee17 3a90 	vmov	r3, s15
 8006bf4:	b21a      	sxth	r2, r3
 8006bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006bf8:	801a      	strh	r2, [r3, #0]
			MYDRON.Yaw.Wanted_rx = (MYDRON.Yaw.Wanted_v - 500)*MYDRON.Yaw.Wanted_Factor;// wanted yaw is in deg/s
 8006bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006bfc:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 8006c00:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006c04:	ee07 3a90 	vmov	s15, r3
 8006c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c0c:	4b39      	ldr	r3, [pc, #228]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c0e:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8006c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c1a:	ee17 3a90 	vmov	r3, s15
 8006c1e:	b21a      	sxth	r2, r3
 8006c20:	4b34      	ldr	r3, [pc, #208]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

			MYDRON.Rool.Wanted_rx = (MYDRON.Rool.Wanted_rx >= 300) ? 300 : (MYDRON.Rool.Wanted_rx <= -300) ? -300 : MYDRON.Rool.Wanted_rx;
 8006c26:	4b33      	ldr	r3, [pc, #204]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006c2c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006c30:	da08      	bge.n	8006c44 <HAL_SPI_RxCpltCallback+0x234>
 8006c32:	4b30      	ldr	r3, [pc, #192]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006c38:	4a35      	ldr	r2, [pc, #212]	@ (8006d10 <HAL_SPI_RxCpltCallback+0x300>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	bfb8      	it	lt
 8006c3e:	4613      	movlt	r3, r2
 8006c40:	b21b      	sxth	r3, r3
 8006c42:	e001      	b.n	8006c48 <HAL_SPI_RxCpltCallback+0x238>
 8006c44:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006c48:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c4a:	8613      	strh	r3, [r2, #48]	@ 0x30
			MYDRON.Pitch.Wanted_rx = (MYDRON.Pitch.Wanted_rx >= 300) ? 300 : (MYDRON.Pitch.Wanted_rx <= -300) ? -300 : MYDRON.Pitch.Wanted_rx;
 8006c4c:	4b29      	ldr	r3, [pc, #164]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c52:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006c56:	da08      	bge.n	8006c6a <HAL_SPI_RxCpltCallback+0x25a>
 8006c58:	4b26      	ldr	r3, [pc, #152]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8006d10 <HAL_SPI_RxCpltCallback+0x300>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	bfb8      	it	lt
 8006c64:	4613      	movlt	r3, r2
 8006c66:	b21b      	sxth	r3, r3
 8006c68:	e001      	b.n	8006c6e <HAL_SPI_RxCpltCallback+0x25e>
 8006c6a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006c6e:	4a21      	ldr	r2, [pc, #132]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c70:	8013      	strh	r3, [r2, #0]
			MYDRON.Yaw.Wanted_rx = (MYDRON.Yaw.Wanted_rx >= 300) ? 300 : (MYDRON.Yaw.Wanted_rx <= -300) ? -300 : MYDRON.Yaw.Wanted_rx;
 8006c72:	4b20      	ldr	r3, [pc, #128]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c74:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	@ 0x60
 8006c78:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006c7c:	da08      	bge.n	8006c90 <HAL_SPI_RxCpltCallback+0x280>
 8006c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c80:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	@ 0x60
 8006c84:	4a22      	ldr	r2, [pc, #136]	@ (8006d10 <HAL_SPI_RxCpltCallback+0x300>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	bfb8      	it	lt
 8006c8a:	4613      	movlt	r3, r2
 8006c8c:	b21b      	sxth	r3, r3
 8006c8e:	e001      	b.n	8006c94 <HAL_SPI_RxCpltCallback+0x284>
 8006c90:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006c94:	4a17      	ldr	r2, [pc, #92]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c96:	f8a2 3060 	strh.w	r3, [r2, #96]	@ 0x60

			NRF_TIM_Inte = 0;
 8006c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8006d14 <HAL_SPI_RxCpltCallback+0x304>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
		}

		if(loopnum > 0 && loopnum < 10){
 8006ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2cc>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <HAL_SPI_RxCpltCallback+0x2a8>
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2cc>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b09      	cmp	r3, #9
 8006cae:	d803      	bhi.n	8006cb8 <HAL_SPI_RxCpltCallback+0x2a8>
			MYDRON.Status.Connection = DRON_CONNECTION_ERROR;
 8006cb0:	4b10      	ldr	r3, [pc, #64]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	f883 2154 	strb.w	r2, [r3, #340]	@ 0x154
		}
		LED_Y_0;
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006cbe:	4806      	ldr	r0, [pc, #24]	@ (8006cd8 <HAL_SPI_RxCpltCallback+0x2c8>)
 8006cc0:	f006 fece 	bl	800da60 <HAL_GPIO_WritePin>
	}
}
 8006cc4:	bf00      	nop
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	0000419c 	.word	0x0000419c
 8006cd0:	000000cc 	.word	0x000000cc
 8006cd4:	58021000 	.word	0x58021000
 8006cd8:	58020400 	.word	0x58020400
 8006cdc:	000041a8 	.word	0x000041a8
 8006ce0:	0000015a 	.word	0x0000015a
 8006ce4:	0000018a 	.word	0x0000018a
 8006ce8:	000041b4 	.word	0x000041b4
 8006cec:	000001ea 	.word	0x000001ea
 8006cf0:	000001ba 	.word	0x000001ba
 8006cf4:	00000158 	.word	0x00000158
 8006cf8:	58021800 	.word	0x58021800
 8006cfc:	000041e8 	.word	0x000041e8
 8006d00:	24001ef0 	.word	0x24001ef0
 8006d04:	0801e278 	.word	0x0801e278
 8006d08:	24001eec 	.word	0x24001eec
 8006d0c:	ffffd8f0 	.word	0xffffd8f0
 8006d10:	fffffed4 	.word	0xfffffed4
 8006d14:	000041a0 	.word	0x000041a0

08006d18 <convert_array_to_value>:

void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	ed2d 8b04 	vpush	{d8-d9}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	4611      	mov	r1, r2
 8006d28:	461a      	mov	r2, r3
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	71fb      	strb	r3, [r7, #7]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2200      	movs	r2, #0
 8006d36:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 8006d38:	79ba      	ldrb	r2, [r7, #6]
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 8006d40:	2300      	movs	r3, #0
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	e02e      	b.n	8006da4 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d4c:	ee07 3a90 	vmov	s15, r3
 8006d50:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8006d54:	79fa      	ldrb	r2, [r7, #7]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	4413      	add	r3, r2
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	ee07 3a90 	vmov	s15, r3
 8006d74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d78:	eeb0 1b47 	vmov.f64	d1, d7
 8006d7c:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006d80:	f016 fee2 	bl	801db48 <pow>
 8006d84:	eeb0 7b40 	vmov.f64	d7, d0
 8006d88:	ee29 7b07 	vmul.f64	d7, d9, d7
 8006d8c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8006d90:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006d94:	ee17 3a90 	vmov	r3, s15
 8006d98:	b21a      	sxth	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	3301      	adds	r3, #1
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	dacc      	bge.n	8006d46 <convert_array_to_value+0x2e>
	}

}
 8006dac:	bf00      	nop
 8006dae:	bf00      	nop
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	ecbd 8b04 	vpop	{d8-d9}
 8006db8:	bd80      	pop	{r7, pc}

08006dba <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8006dba:	b590      	push	{r4, r7, lr}
 8006dbc:	b087      	sub	sp, #28
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6039      	str	r1, [r7, #0]
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	80fb      	strh	r3, [r7, #6]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	717b      	strb	r3, [r7, #5]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8006dda:	793a      	ldrb	r2, [r7, #4]
 8006ddc:	797b      	ldrb	r3, [r7, #5]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	e03e      	b.n	8006e66 <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 8006de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d028      	beq.n	8006e42 <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	4619      	mov	r1, r3
 8006df8:	200a      	movs	r0, #10
 8006dfa:	f000 f83d 	bl	8006e78 <potenga>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	88fa      	ldrh	r2, [r7, #6]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	80fb      	strh	r3, [r7, #6]
			x++;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 8006e10:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e22:	eeb0 1b47 	vmov.f64	d1, d7
 8006e26:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006e2a:	f016 fe8d 	bl	801db48 <pow>
 8006e2e:	eeb0 7b40 	vmov.f64	d7, d0
 8006e32:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e36:	ee17 3a90 	vmov	r3, s15
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	dad3      	bge.n	8006de8 <convert_value_to_array+0x2e>
 8006e40:	e000      	b.n	8006e44 <convert_value_to_array+0x8a>
				break;
 8006e42:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 8006e44:	797a      	ldrb	r2, [r7, #5]
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	4413      	add	r3, r2
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	4413      	add	r3, r2
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	613b      	str	r3, [r7, #16]
		x = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	dad0      	bge.n	8006e10 <convert_value_to_array+0x56>
	}
}
 8006e6e:	bf00      	nop
 8006e70:	bf00      	nop
 8006e72:	371c      	adds	r7, #28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd90      	pop	{r4, r7, pc}

08006e78 <potenga>:
uint32_t potenga(int a, int b){
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <potenga+0x18>
		return 1;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e02d      	b.n	8006eec <potenga+0x74>
	}
	if(b == 1){
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d101      	bne.n	8006e9a <potenga+0x22>
		return a;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	e028      	b.n	8006eec <potenga+0x74>
	}
	if(b > 1){
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	dd10      	ble.n	8006ec2 <potenga+0x4a>
			for(int i = 1; i < b; i++){
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	e007      	b.n	8006eb6 <potenga+0x3e>
			a = a*c;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
 8006eae:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	617b      	str	r3, [r7, #20]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	dbf3      	blt.n	8006ea6 <potenga+0x2e>
		}
		return a;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	e014      	b.n	8006eec <potenga+0x74>
	}
	if(b < 0){
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	da10      	bge.n	8006eea <potenga+0x72>
		for(int i = 0; i < b; i++){
 8006ec8:	2300      	movs	r3, #0
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	e007      	b.n	8006ede <potenga+0x66>
			a = a/c;
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	fb92 f3f3 	sdiv	r3, r2, r3
 8006ed6:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	3301      	adds	r3, #1
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	dbf3      	blt.n	8006ece <potenga+0x56>
		}
		return a;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	e000      	b.n	8006eec <potenga+0x74>
	}
	return a;
 8006eea:	687b      	ldr	r3, [r7, #4]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	371c      	adds	r7, #28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <WartoscBezwgledna>:
float WartoscBezwgledna(float a){
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	ed87 0a01 	vstr	s0, [r7, #4]
	a = (a < 0) ? a*(-1) : a;
 8006f02:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f0e:	d504      	bpl.n	8006f1a <WartoscBezwgledna+0x22>
 8006f10:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f14:	eef1 7a67 	vneg.f32	s15, s15
 8006f18:	e001      	b.n	8006f1e <WartoscBezwgledna+0x26>
 8006f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f1e:	edc7 7a01 	vstr	s15, [r7, #4]
	return a;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	ee07 3a90 	vmov	s15, r3
}
 8006f28:	eeb0 0a67 	vmov.f32	s0, s15
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
	...

08006f38 <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	71fb      	strb	r3, [r7, #7]
 8006f42:	460b      	mov	r3, r1
 8006f44:	71bb      	strb	r3, [r7, #6]
 8006f46:	4613      	mov	r3, r2
 8006f48:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 8006f4a:	4b09      	ldr	r3, [pc, #36]	@ (8006f70 <RGB_LED_Set_color+0x38>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	797a      	ldrb	r2, [r7, #5]
 8006f50:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 8006f52:	4b07      	ldr	r3, [pc, #28]	@ (8006f70 <RGB_LED_Set_color+0x38>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	79fa      	ldrb	r2, [r7, #7]
 8006f58:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 8006f5a:	4b05      	ldr	r3, [pc, #20]	@ (8006f70 <RGB_LED_Set_color+0x38>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	79ba      	ldrb	r2, [r7, #6]
 8006f60:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006f62:	bf00      	nop
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	24000380 	.word	0x24000380
 8006f74:	00000000 	.word	0x00000000

08006f78 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	ee07 3a90 	vmov	s15, r3
 8006f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006f90:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8006fe0 <RGB_LED_For_BAT+0x68>
 8006f94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f98:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8006fe8 <RGB_LED_For_BAT+0x70>
 8006f9c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006fa0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006fa4:	edc7 7a00 	vstr	s15, [r7]
 8006fa8:	783b      	ldrb	r3, [r7, #0]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	79fa      	ldrb	r2, [r7, #7]
 8006fae:	ee07 2a90 	vmov	s15, r2
 8006fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006fba:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006fe0 <RGB_LED_For_BAT+0x68>
 8006fbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fc2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006fc6:	edc7 7a00 	vstr	s15, [r7]
 8006fca:	783a      	ldrb	r2, [r7, #0]
 8006fcc:	b2d1      	uxtb	r1, r2
 8006fce:	2200      	movs	r2, #0
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff ffb1 	bl	8006f38 <RGB_LED_Set_color>
}
 8006fd6:	bf00      	nop
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	66666666 	.word	0x66666666
 8006fe4:	40046666 	.word	0x40046666
 8006fe8:	00000000 	.word	0x00000000
 8006fec:	406fe000 	.word	0x406fe000

08006ff0 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8006ff0:	b590      	push	{r4, r7, lr}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6039      	str	r1, [r7, #0]
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	80fb      	strh	r3, [r7, #6]
 8007000:	460b      	mov	r3, r1
 8007002:	717b      	strb	r3, [r7, #5]
 8007004:	4613      	mov	r3, r2
 8007006:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007010:	793a      	ldrb	r2, [r7, #4]
 8007012:	797b      	ldrb	r3, [r7, #5]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800701c:	2b00      	cmp	r3, #0
 800701e:	da04      	bge.n	800702a <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007020:	797b      	ldrb	r3, [r7, #5]
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	4413      	add	r3, r2
 8007026:	222d      	movs	r2, #45	@ 0x2d
 8007028:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 800702a:	2301      	movs	r3, #1
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	e035      	b.n	800709c <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8007030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01d      	beq.n	8007074 <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	4619      	mov	r1, r3
 8007040:	200a      	movs	r0, #10
 8007042:	f7ff ff19 	bl	8006e78 <potenga>
 8007046:	4603      	mov	r3, r0
 8007048:	b29b      	uxth	r3, r3
 800704a:	88fa      	ldrh	r2, [r7, #6]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	b29b      	uxth	r3, r3
 8007050:	80fb      	strh	r3, [r7, #6]
			x++;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	3301      	adds	r3, #1
 8007056:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8007058:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	4619      	mov	r1, r3
 8007064:	200a      	movs	r0, #10
 8007066:	f7ff ff07 	bl	8006e78 <potenga>
 800706a:	4603      	mov	r3, r0
 800706c:	b29b      	uxth	r3, r3
 800706e:	429c      	cmp	r4, r3
 8007070:	dade      	bge.n	8007030 <convert_value_to_array2+0x40>
 8007072:	e000      	b.n	8007076 <convert_value_to_array2+0x86>
				break;
 8007074:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	b2da      	uxtb	r2, r3
 800707a:	7979      	ldrb	r1, [r7, #5]
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	440b      	add	r3, r1
 8007080:	4619      	mov	r1, r3
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	440b      	add	r3, r1
 8007086:	3230      	adds	r2, #48	@ 0x30
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	3301      	adds	r3, #1
 8007090:	613b      	str	r3, [r7, #16]
		x = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3301      	adds	r3, #1
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	dad9      	bge.n	8007058 <convert_value_to_array2+0x68>
	}
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd90      	pop	{r4, r7, pc}

080070ae <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80070ae:	b580      	push	{r7, lr}
 80070b0:	ed2d 8b02 	vpush	{d8}
 80070b4:	b08c      	sub	sp, #48	@ 0x30
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	ed87 0a03 	vstr	s0, [r7, #12]
 80070bc:	60b8      	str	r0, [r7, #8]
 80070be:	460b      	mov	r3, r1
 80070c0:	71fb      	strb	r3, [r7, #7]
 80070c2:	4613      	mov	r3, r2
 80070c4:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 80070ce:	79ba      	ldrb	r2, [r7, #6]
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 80070da:	edd7 7a03 	vldr	s15, [r7, #12]
 80070de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e6:	d50a      	bpl.n	80070fe <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	4413      	add	r3, r2
 80070ee:	222d      	movs	r2, #45	@ 0x2d
 80070f0:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 80070f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80070f6:	eef1 7a67 	vneg.f32	s15, s15
 80070fa:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 80070fe:	2301      	movs	r3, #1
 8007100:	61fb      	str	r3, [r7, #28]
 8007102:	e021      	b.n	8007148 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007112:	eeb0 1b47 	vmov.f64	d1, d7
 8007116:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800711a:	f016 fd15 	bl	801db48 <pow>
 800711e:	eeb0 7b40 	vmov.f64	d7, d0
 8007122:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007126:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 800712a:	ed97 7a03 	vldr	s14, [r7, #12]
 800712e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800713a:	da0b      	bge.n	8007154 <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	3301      	adds	r3, #1
 8007140:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	3301      	adds	r3, #1
 8007146:	61fb      	str	r3, [r7, #28]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	429a      	cmp	r2, r3
 8007150:	dbd8      	blt.n	8007104 <convert_value_to_array3+0x56>
 8007152:	e000      	b.n	8007156 <convert_value_to_array3+0xa8>
			break;
 8007154:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	3b01      	subs	r3, #1
 800715e:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8007160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007162:	2b00      	cmp	r3, #0
 8007164:	dc07      	bgt.n	8007176 <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	3301      	adds	r3, #1
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	4413      	add	r3, r2
 800716e:	222e      	movs	r2, #46	@ 0x2e
 8007170:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 8007172:	2301      	movs	r3, #1
 8007174:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007178:	2b00      	cmp	r3, #0
 800717a:	dd0a      	ble.n	8007192 <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 800717c:	79fa      	ldrb	r2, [r7, #7]
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	4413      	add	r3, r2
 8007182:	3301      	adds	r3, #1
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	4413      	add	r3, r2
 8007188:	222e      	movs	r2, #46	@ 0x2e
 800718a:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	3301      	adds	r3, #1
 8007190:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 8007192:	edd7 7a03 	vldr	s15, [r7, #12]
 8007196:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	1e5a      	subs	r2, r3, #1
 800719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80071aa:	eeb0 1b47 	vmov.f64	d1, d7
 80071ae:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80071b2:	f016 fcc9 	bl	801db48 <pow>
 80071b6:	eeb0 7b40 	vmov.f64	d7, d0
 80071ba:	ee28 7b07 	vmul.f64	d7, d8, d7
 80071be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80071c2:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80071c6:	2300      	movs	r3, #0
 80071c8:	61bb      	str	r3, [r7, #24]
 80071ca:	e05f      	b.n	800728c <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 80071cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80071d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d8:	d93d      	bls.n	8007256 <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 80071da:	edd7 7a03 	vldr	s15, [r7, #12]
 80071de:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	1e5a      	subs	r2, r3, #1
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80071f2:	eeb0 1b47 	vmov.f64	d1, d7
 80071f6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80071fa:	f016 fca5 	bl	801db48 <pow>
 80071fe:	eeb0 7b40 	vmov.f64	d7, d0
 8007202:	ee38 7b47 	vsub.f64	d7, d8, d7
 8007206:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800720a:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 800720e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007210:	3301      	adds	r3, #1
 8007212:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	1e5a      	subs	r2, r3, #1
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	ee07 3a90 	vmov	s15, r3
 8007220:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007224:	eeb0 1b47 	vmov.f64	d1, d7
 8007228:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800722c:	f016 fc8c 	bl	801db48 <pow>
 8007230:	eeb0 7b40 	vmov.f64	d7, d0
 8007234:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007238:	ee17 3a90 	vmov	r3, s15
 800723c:	b29b      	uxth	r3, r3
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007246:	ed97 7a03 	vldr	s14, [r7, #12]
 800724a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800724e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007252:	dabb      	bge.n	80071cc <convert_value_to_array3+0x11e>
 8007254:	e000      	b.n	8007258 <convert_value_to_array3+0x1aa>
				break;
 8007256:	bf00      	nop
		}

        if(loopnum == kropka){
 8007258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	429a      	cmp	r2, r3
 800725e:	d102      	bne.n	8007266 <convert_value_to_array3+0x1b8>
            loopnum++;
 8007260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007262:	3301      	adds	r3, #1
 8007264:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8007266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007268:	b2da      	uxtb	r2, r3
 800726a:	79f9      	ldrb	r1, [r7, #7]
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726e:	440b      	add	r3, r1
 8007270:	4619      	mov	r1, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	440b      	add	r3, r1
 8007276:	3230      	adds	r2, #48	@ 0x30
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727e:	3301      	adds	r3, #1
 8007280:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	3301      	adds	r3, #1
 800728a:	61bb      	str	r3, [r7, #24]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	3b02      	subs	r3, #2
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	429a      	cmp	r2, r3
 8007294:	dbbe      	blt.n	8007214 <convert_value_to_array3+0x166>
	}
}
 8007296:	bf00      	nop
 8007298:	bf00      	nop
 800729a:	3730      	adds	r7, #48	@ 0x30
 800729c:	46bd      	mov	sp, r7
 800729e:	ecbd 8b02 	vpop	{d8}
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 80072ac:	4ba9      	ldr	r3, [pc, #676]	@ (8007554 <uSD_Card_SendData_To_Buffer+0x2b0>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	b218      	sxth	r0, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	01db      	lsls	r3, r3, #7
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	01db      	lsls	r3, r3, #7
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	3308      	adds	r3, #8
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	49a4      	ldr	r1, [pc, #656]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80072c8:	f7ff fe92 	bl	8006ff0 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	01db      	lsls	r3, r3, #7
 80072d0:	3308      	adds	r3, #8
 80072d2:	4aa1      	ldr	r2, [pc, #644]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80072d4:	2120      	movs	r1, #32
 80072d6:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.Thrust.Speed_1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 80072d8:	4ba0      	ldr	r3, [pc, #640]	@ (800755c <uSD_Card_SendData_To_Buffer+0x2b8>)
 80072da:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80072de:	b218      	sxth	r0, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	01db      	lsls	r3, r3, #7
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	3309      	adds	r3, #9
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	01db      	lsls	r3, r3, #7
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	330f      	adds	r3, #15
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	4997      	ldr	r1, [pc, #604]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80072fa:	f7ff fe79 	bl	8006ff0 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	01db      	lsls	r3, r3, #7
 8007302:	330f      	adds	r3, #15
 8007304:	4a94      	ldr	r2, [pc, #592]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007306:	2120      	movs	r1, #32
 8007308:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Thrust.Speed_2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 800730a:	4b94      	ldr	r3, [pc, #592]	@ (800755c <uSD_Card_SendData_To_Buffer+0x2b8>)
 800730c:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 8007310:	b218      	sxth	r0, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	01db      	lsls	r3, r3, #7
 8007318:	b2db      	uxtb	r3, r3
 800731a:	3310      	adds	r3, #16
 800731c:	b2da      	uxtb	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	01db      	lsls	r3, r3, #7
 8007324:	b2db      	uxtb	r3, r3
 8007326:	3316      	adds	r3, #22
 8007328:	b2db      	uxtb	r3, r3
 800732a:	498b      	ldr	r1, [pc, #556]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800732c:	f7ff fe60 	bl	8006ff0 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	01db      	lsls	r3, r3, #7
 8007334:	3316      	adds	r3, #22
 8007336:	4a88      	ldr	r2, [pc, #544]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007338:	2120      	movs	r1, #32
 800733a:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Thrust.Speed_3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 800733c:	4b87      	ldr	r3, [pc, #540]	@ (800755c <uSD_Card_SendData_To_Buffer+0x2b8>)
 800733e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8007342:	b218      	sxth	r0, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	01db      	lsls	r3, r3, #7
 800734a:	b2db      	uxtb	r3, r3
 800734c:	3317      	adds	r3, #23
 800734e:	b2da      	uxtb	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	01db      	lsls	r3, r3, #7
 8007356:	b2db      	uxtb	r3, r3
 8007358:	331d      	adds	r3, #29
 800735a:	b2db      	uxtb	r3, r3
 800735c:	497e      	ldr	r1, [pc, #504]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800735e:	f7ff fe47 	bl	8006ff0 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	01db      	lsls	r3, r3, #7
 8007366:	331d      	adds	r3, #29
 8007368:	4a7b      	ldr	r2, [pc, #492]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800736a:	2120      	movs	r1, #32
 800736c:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Thrust.Speed_4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 800736e:	4b7b      	ldr	r3, [pc, #492]	@ (800755c <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007370:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8007374:	b218      	sxth	r0, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	b2db      	uxtb	r3, r3
 800737a:	01db      	lsls	r3, r3, #7
 800737c:	b2db      	uxtb	r3, r3
 800737e:	331e      	adds	r3, #30
 8007380:	b2da      	uxtb	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	01db      	lsls	r3, r3, #7
 8007388:	b2db      	uxtb	r3, r3
 800738a:	3324      	adds	r3, #36	@ 0x24
 800738c:	b2db      	uxtb	r3, r3
 800738e:	4972      	ldr	r1, [pc, #456]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007390:	f7ff fe2e 	bl	8006ff0 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	01db      	lsls	r3, r3, #7
 8007398:	3324      	adds	r3, #36	@ 0x24
 800739a:	4a6f      	ldr	r2, [pc, #444]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800739c:	2120      	movs	r1, #32
 800739e:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(MYDRON.Rool.Wanted, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 80073a0:	4b6e      	ldr	r3, [pc, #440]	@ (800755c <uSD_Card_SendData_To_Buffer+0x2b8>)
 80073a2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	01db      	lsls	r3, r3, #7
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	3325      	adds	r3, #37	@ 0x25
 80073b0:	b2d9      	uxtb	r1, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	01db      	lsls	r3, r3, #7
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	332d      	adds	r3, #45	@ 0x2d
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	461a      	mov	r2, r3
 80073c0:	4865      	ldr	r0, [pc, #404]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80073c2:	eeb0 0a67 	vmov.f32	s0, s15
 80073c6:	f7ff fe72 	bl	80070ae <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	01db      	lsls	r3, r3, #7
 80073ce:	332d      	adds	r3, #45	@ 0x2d
 80073d0:	4a61      	ldr	r2, [pc, #388]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80073d2:	2120      	movs	r1, #32
 80073d4:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(MYDRON.Pitch.Wanted, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 80073d6:	4b61      	ldr	r3, [pc, #388]	@ (800755c <uSD_Card_SendData_To_Buffer+0x2b8>)
 80073d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	01db      	lsls	r3, r3, #7
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	332e      	adds	r3, #46	@ 0x2e
 80073e6:	b2d9      	uxtb	r1, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	01db      	lsls	r3, r3, #7
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	3336      	adds	r3, #54	@ 0x36
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	4858      	ldr	r0, [pc, #352]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80073f8:	eeb0 0a67 	vmov.f32	s0, s15
 80073fc:	f7ff fe57 	bl	80070ae <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	01db      	lsls	r3, r3, #7
 8007404:	3336      	adds	r3, #54	@ 0x36
 8007406:	4a54      	ldr	r2, [pc, #336]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007408:	2120      	movs	r1, #32
 800740a:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(MYDRON.Yaw.Wanted, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 800740c:	4b53      	ldr	r3, [pc, #332]	@ (800755c <uSD_Card_SendData_To_Buffer+0x2b8>)
 800740e:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	01db      	lsls	r3, r3, #7
 8007418:	b2db      	uxtb	r3, r3
 800741a:	3337      	adds	r3, #55	@ 0x37
 800741c:	b2d9      	uxtb	r1, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	01db      	lsls	r3, r3, #7
 8007424:	b2db      	uxtb	r3, r3
 8007426:	333f      	adds	r3, #63	@ 0x3f
 8007428:	b2db      	uxtb	r3, r3
 800742a:	461a      	mov	r2, r3
 800742c:	484a      	ldr	r0, [pc, #296]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800742e:	eeb0 0a67 	vmov.f32	s0, s15
 8007432:	f7ff fe3c 	bl	80070ae <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	01db      	lsls	r3, r3, #7
 800743a:	333f      	adds	r3, #63	@ 0x3f
 800743c:	4a46      	ldr	r2, [pc, #280]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800743e:	2120      	movs	r1, #32
 8007440:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(MYDRON.Pitch.Angle_Error_Sum, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 8007442:	4b46      	ldr	r3, [pc, #280]	@ (800755c <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007446:	b218      	sxth	r0, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	01db      	lsls	r3, r3, #7
 800744e:	b2db      	uxtb	r3, r3
 8007450:	3340      	adds	r3, #64	@ 0x40
 8007452:	b2da      	uxtb	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	b2db      	uxtb	r3, r3
 8007458:	01db      	lsls	r3, r3, #7
 800745a:	b2db      	uxtb	r3, r3
 800745c:	3348      	adds	r3, #72	@ 0x48
 800745e:	b2db      	uxtb	r3, r3
 8007460:	493d      	ldr	r1, [pc, #244]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007462:	f7ff fdc5 	bl	8006ff0 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	01db      	lsls	r3, r3, #7
 800746a:	3348      	adds	r3, #72	@ 0x48
 800746c:	4a3a      	ldr	r2, [pc, #232]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800746e:	2120      	movs	r1, #32
 8007470:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Rool.Angle_Error_Sum, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 8007472:	4b3a      	ldr	r3, [pc, #232]	@ (800755c <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007476:	b218      	sxth	r0, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	01db      	lsls	r3, r3, #7
 800747e:	b2db      	uxtb	r3, r3
 8007480:	3349      	adds	r3, #73	@ 0x49
 8007482:	b2da      	uxtb	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	01db      	lsls	r3, r3, #7
 800748a:	b2db      	uxtb	r3, r3
 800748c:	3351      	adds	r3, #81	@ 0x51
 800748e:	b2db      	uxtb	r3, r3
 8007490:	4931      	ldr	r1, [pc, #196]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007492:	f7ff fdad 	bl	8006ff0 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	01db      	lsls	r3, r3, #7
 800749a:	3351      	adds	r3, #81	@ 0x51
 800749c:	4a2e      	ldr	r2, [pc, #184]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800749e:	2120      	movs	r1, #32
 80074a0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Yaw.Angle_Error_Sum, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 80074a2:	4b2e      	ldr	r3, [pc, #184]	@ (800755c <uSD_Card_SendData_To_Buffer+0x2b8>)
 80074a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074a8:	b218      	sxth	r0, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	01db      	lsls	r3, r3, #7
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	3352      	adds	r3, #82	@ 0x52
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	01db      	lsls	r3, r3, #7
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	335a      	adds	r3, #90	@ 0x5a
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	4925      	ldr	r1, [pc, #148]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80074c4:	f7ff fd94 	bl	8006ff0 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	01db      	lsls	r3, r3, #7
 80074cc:	335a      	adds	r3, #90	@ 0x5a
 80074ce:	4a22      	ldr	r2, [pc, #136]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80074d0:	2120      	movs	r1, #32
 80074d2:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 80074d4:	4b22      	ldr	r3, [pc, #136]	@ (8007560 <uSD_Card_SendData_To_Buffer+0x2bc>)
 80074d6:	edd3 7a00 	vldr	s15, [r3]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	01db      	lsls	r3, r3, #7
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	335b      	adds	r3, #91	@ 0x5b
 80074e4:	b2d9      	uxtb	r1, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	01db      	lsls	r3, r3, #7
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	3362      	adds	r3, #98	@ 0x62
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	4818      	ldr	r0, [pc, #96]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80074f6:	eeb0 0a67 	vmov.f32	s0, s15
 80074fa:	f7ff fdd8 	bl	80070ae <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	01db      	lsls	r3, r3, #7
 8007502:	3362      	adds	r3, #98	@ 0x62
 8007504:	4a14      	ldr	r2, [pc, #80]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007506:	2120      	movs	r1, #32
 8007508:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 800750a:	4b15      	ldr	r3, [pc, #84]	@ (8007560 <uSD_Card_SendData_To_Buffer+0x2bc>)
 800750c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	01db      	lsls	r3, r3, #7
 8007516:	b2db      	uxtb	r3, r3
 8007518:	3363      	adds	r3, #99	@ 0x63
 800751a:	b2d9      	uxtb	r1, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	b2db      	uxtb	r3, r3
 8007520:	01db      	lsls	r3, r3, #7
 8007522:	b2db      	uxtb	r3, r3
 8007524:	336a      	adds	r3, #106	@ 0x6a
 8007526:	b2db      	uxtb	r3, r3
 8007528:	461a      	mov	r2, r3
 800752a:	480b      	ldr	r0, [pc, #44]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800752c:	eeb0 0a67 	vmov.f32	s0, s15
 8007530:	f7ff fdbd 	bl	80070ae <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	01db      	lsls	r3, r3, #7
 8007538:	336a      	adds	r3, #106	@ 0x6a
 800753a:	4a07      	ldr	r2, [pc, #28]	@ (8007558 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800753c:	2120      	movs	r1, #32
 800753e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007540:	4b07      	ldr	r3, [pc, #28]	@ (8007560 <uSD_Card_SendData_To_Buffer+0x2bc>)
 8007542:	edd3 7a02 	vldr	s15, [r3, #8]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	01db      	lsls	r3, r3, #7
 800754c:	b2db      	uxtb	r3, r3
 800754e:	336b      	adds	r3, #107	@ 0x6b
 8007550:	e008      	b.n	8007564 <uSD_Card_SendData_To_Buffer+0x2c0>
 8007552:	bf00      	nop
 8007554:	000041e0 	.word	0x000041e0
 8007558:	24002f28 	.word	0x24002f28
 800755c:	00000158 	.word	0x00000158
 8007560:	00000054 	.word	0x00000054
 8007564:	b2d9      	uxtb	r1, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	b2db      	uxtb	r3, r3
 800756a:	01db      	lsls	r3, r3, #7
 800756c:	b2db      	uxtb	r3, r3
 800756e:	3372      	adds	r3, #114	@ 0x72
 8007570:	b2db      	uxtb	r3, r3
 8007572:	461a      	mov	r2, r3
 8007574:	482e      	ldr	r0, [pc, #184]	@ (8007630 <uSD_Card_SendData_To_Buffer+0x38c>)
 8007576:	eeb0 0a67 	vmov.f32	s0, s15
 800757a:	f7ff fd98 	bl	80070ae <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	01db      	lsls	r3, r3, #7
 8007582:	3372      	adds	r3, #114	@ 0x72
 8007584:	4a2a      	ldr	r2, [pc, #168]	@ (8007630 <uSD_Card_SendData_To_Buffer+0x38c>)
 8007586:	2120      	movs	r1, #32
 8007588:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 800758a:	4b2a      	ldr	r3, [pc, #168]	@ (8007634 <uSD_Card_SendData_To_Buffer+0x390>)
 800758c:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8007590:	b218      	sxth	r0, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	b2db      	uxtb	r3, r3
 8007596:	01db      	lsls	r3, r3, #7
 8007598:	b2db      	uxtb	r3, r3
 800759a:	3373      	adds	r3, #115	@ 0x73
 800759c:	b2da      	uxtb	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	01db      	lsls	r3, r3, #7
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	3377      	adds	r3, #119	@ 0x77
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	4921      	ldr	r1, [pc, #132]	@ (8007630 <uSD_Card_SendData_To_Buffer+0x38c>)
 80075ac:	f7ff fd20 	bl	8006ff0 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	01db      	lsls	r3, r3, #7
 80075b4:	3377      	adds	r3, #119	@ 0x77
 80075b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007630 <uSD_Card_SendData_To_Buffer+0x38c>)
 80075b8:	2120      	movs	r1, #32
 80075ba:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 80075bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007634 <uSD_Card_SendData_To_Buffer+0x390>)
 80075be:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 80075c2:	b218      	sxth	r0, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	01db      	lsls	r3, r3, #7
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	3378      	adds	r3, #120	@ 0x78
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	01db      	lsls	r3, r3, #7
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	337a      	adds	r3, #122	@ 0x7a
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	4914      	ldr	r1, [pc, #80]	@ (8007630 <uSD_Card_SendData_To_Buffer+0x38c>)
 80075de:	f7ff fd07 	bl	8006ff0 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	01db      	lsls	r3, r3, #7
 80075e6:	337a      	adds	r3, #122	@ 0x7a
 80075e8:	4a11      	ldr	r2, [pc, #68]	@ (8007630 <uSD_Card_SendData_To_Buffer+0x38c>)
 80075ea:	2120      	movs	r1, #32
 80075ec:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(HMC5883L.Directions.Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 80075ee:	4b12      	ldr	r3, [pc, #72]	@ (8007638 <uSD_Card_SendData_To_Buffer+0x394>)
 80075f0:	edd3 7a00 	vldr	s15, [r3]
 80075f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075f8:	ee17 3a90 	vmov	r3, s15
 80075fc:	b218      	sxth	r0, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	b2db      	uxtb	r3, r3
 8007602:	01db      	lsls	r3, r3, #7
 8007604:	b2db      	uxtb	r3, r3
 8007606:	337b      	adds	r3, #123	@ 0x7b
 8007608:	b2da      	uxtb	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	01db      	lsls	r3, r3, #7
 8007610:	b2db      	uxtb	r3, r3
 8007612:	337f      	adds	r3, #127	@ 0x7f
 8007614:	b2db      	uxtb	r3, r3
 8007616:	4906      	ldr	r1, [pc, #24]	@ (8007630 <uSD_Card_SendData_To_Buffer+0x38c>)
 8007618:	f7ff fcea 	bl	8006ff0 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3301      	adds	r3, #1
 8007620:	01db      	lsls	r3, r3, #7
 8007622:	4a03      	ldr	r2, [pc, #12]	@ (8007630 <uSD_Card_SendData_To_Buffer+0x38c>)
 8007624:	210a      	movs	r1, #10
 8007626:	54d1      	strb	r1, [r2, r3]
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	24002f28 	.word	0x24002f28
 8007634:	00000158 	.word	0x00000158
 8007638:	00004164 	.word	0x00004164

0800763c <Stack_Push>:

void Stack_Push(float data){
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 8007646:	4b22      	ldr	r3, [pc, #136]	@ (80076d0 <Stack_Push+0x94>)
 8007648:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800764c:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007650:	3301      	adds	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	4b1e      	ldr	r3, [pc, #120]	@ (80076d0 <Stack_Push+0x94>)
 8007656:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800765a:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 800765e:	4b1c      	ldr	r3, [pc, #112]	@ (80076d0 <Stack_Push+0x94>)
 8007660:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007664:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007668:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800766c:	d105      	bne.n	800767a <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 800766e:	4b18      	ldr	r3, [pc, #96]	@ (80076d0 <Stack_Push+0x94>)
 8007670:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007674:	2200      	movs	r2, #0
 8007676:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 800767a:	4b15      	ldr	r3, [pc, #84]	@ (80076d0 <Stack_Push+0x94>)
 800767c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007680:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007684:	4a12      	ldr	r2, [pc, #72]	@ (80076d0 <Stack_Push+0x94>)
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 800768e:	4b10      	ldr	r3, [pc, #64]	@ (80076d0 <Stack_Push+0x94>)
 8007690:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007694:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007698:	3301      	adds	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	4b0c      	ldr	r3, [pc, #48]	@ (80076d0 <Stack_Push+0x94>)
 800769e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80076a2:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 80076a6:	4b0a      	ldr	r3, [pc, #40]	@ (80076d0 <Stack_Push+0x94>)
 80076a8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80076ac:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80076b0:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80076b4:	d105      	bne.n	80076c2 <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 80076b6:	4b06      	ldr	r3, [pc, #24]	@ (80076d0 <Stack_Push+0x94>)
 80076b8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80076bc:	2200      	movs	r2, #0
 80076be:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	000002b8 	.word	0x000002b8

080076d4 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
	MYDRON.PID_Rool.Status = 2;
 80076d8:	4b05      	ldr	r3, [pc, #20]	@ (80076f0 <ROOL_MAX_VAL+0x1c>)
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
	return 5000;
 80076e0:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	00000158 	.word	0x00000158

080076f4 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 80076f4:	b480      	push	{r7}
 80076f6:	af00      	add	r7, sp, #0
	MYDRON.PID_Rool.Status = 1;
 80076f8:	4b04      	ldr	r3, [pc, #16]	@ (800770c <ROOL_MIN_VAL+0x18>)
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
	return -5000;
 8007700:	4b03      	ldr	r3, [pc, #12]	@ (8007710 <ROOL_MIN_VAL+0x1c>)
}
 8007702:	4618      	mov	r0, r3
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	00000158 	.word	0x00000158
 8007710:	ffffec78 	.word	0xffffec78

08007714 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007714:	b480      	push	{r7}
 8007716:	af00      	add	r7, sp, #0
	MYDRON.PID_Pitch.Status = 2;
 8007718:	4b05      	ldr	r3, [pc, #20]	@ (8007730 <PITCH_MAX_VAL+0x1c>)
 800771a:	2202      	movs	r2, #2
 800771c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	return 5000;
 8007720:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007724:	4618      	mov	r0, r3
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	00000158 	.word	0x00000158

08007734 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 8007734:	b480      	push	{r7}
 8007736:	af00      	add	r7, sp, #0
	MYDRON.PID_Pitch.Status = 1;
 8007738:	4b04      	ldr	r3, [pc, #16]	@ (800774c <PITCH_MIN_VAL+0x18>)
 800773a:	2201      	movs	r2, #1
 800773c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	return -5000;
 8007740:	4b03      	ldr	r3, [pc, #12]	@ (8007750 <PITCH_MIN_VAL+0x1c>)
}
 8007742:	4618      	mov	r0, r3
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	00000158 	.word	0x00000158
 8007750:	ffffec78 	.word	0xffffec78

08007754 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 8007754:	b480      	push	{r7}
 8007756:	af00      	add	r7, sp, #0
	MYDRON.PID_Yaw.Status = 2;
 8007758:	4b05      	ldr	r3, [pc, #20]	@ (8007770 <YAW_MAX_VAL+0x1c>)
 800775a:	2202      	movs	r2, #2
 800775c:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
	return 5000;
 8007760:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007764:	4618      	mov	r0, r3
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	00000158 	.word	0x00000158

08007774 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007774:	b480      	push	{r7}
 8007776:	af00      	add	r7, sp, #0
	MYDRON.PID_Yaw.Status = 1;
 8007778:	4b04      	ldr	r3, [pc, #16]	@ (800778c <YAW_MIN_VAL+0x18>)
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
	return -5000;
 8007780:	4b03      	ldr	r3, [pc, #12]	@ (8007790 <YAW_MIN_VAL+0x1c>)
}
 8007782:	4618      	mov	r0, r3
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	00000158 	.word	0x00000158
 8007790:	ffffec78 	.word	0xffffec78

08007794 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
	MYDRON.PID_Rool.Status = 0;
 8007798:	4b08      	ldr	r3, [pc, #32]	@ (80077bc <ROOL_GOOD_VAL+0x28>)
 800779a:	2200      	movs	r2, #0
 800779c:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
	return MYDRON.PID_Rool.Angular_Rate_Value;
 80077a0:	4b06      	ldr	r3, [pc, #24]	@ (80077bc <ROOL_GOOD_VAL+0x28>)
 80077a2:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 80077a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077aa:	ee17 3a90 	vmov	r3, s15
 80077ae:	b21b      	sxth	r3, r3
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	00000158 	.word	0x00000158

080077c0 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
	MYDRON.PID_Pitch.Status = 0;
 80077c4:	4b08      	ldr	r3, [pc, #32]	@ (80077e8 <PITCH_GOOD_VAL+0x28>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	return MYDRON.PID_Pitch.Angular_Rate_Value;
 80077cc:	4b06      	ldr	r3, [pc, #24]	@ (80077e8 <PITCH_GOOD_VAL+0x28>)
 80077ce:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80077d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077d6:	ee17 3a90 	vmov	r3, s15
 80077da:	b21b      	sxth	r3, r3
}
 80077dc:	4618      	mov	r0, r3
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	00000158 	.word	0x00000158

080077ec <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
	MYDRON.PID_Yaw.Status = 0;
 80077f0:	4b08      	ldr	r3, [pc, #32]	@ (8007814 <YAW_GOOD_VAL+0x28>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
	return MYDRON.PID_Yaw.Angular_Rate_Value;
 80077f8:	4b06      	ldr	r3, [pc, #24]	@ (8007814 <YAW_GOOD_VAL+0x28>)
 80077fa:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 80077fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007802:	ee17 3a90 	vmov	r3, s15
 8007806:	b21b      	sxth	r3, r3
}
 8007808:	4618      	mov	r0, r3
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	00000158 	.word	0x00000158

08007818 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800781e:	463b      	mov	r3, r7
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	605a      	str	r2, [r3, #4]
 8007826:	609a      	str	r2, [r3, #8]
 8007828:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800782a:	f003 f88f 	bl	800a94c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800782e:	2301      	movs	r3, #1
 8007830:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007832:	2300      	movs	r3, #0
 8007834:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007836:	2300      	movs	r3, #0
 8007838:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800783a:	231f      	movs	r3, #31
 800783c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800783e:	2387      	movs	r3, #135	@ 0x87
 8007840:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007842:	2300      	movs	r3, #0
 8007844:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007846:	2300      	movs	r3, #0
 8007848:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800784a:	2301      	movs	r3, #1
 800784c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800784e:	2301      	movs	r3, #1
 8007850:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007852:	2300      	movs	r3, #0
 8007854:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007856:	2300      	movs	r3, #0
 8007858:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800785a:	463b      	mov	r3, r7
 800785c:	4618      	mov	r0, r3
 800785e:	f003 f8ad 	bl	800a9bc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007862:	2004      	movs	r0, #4
 8007864:	f003 f88a 	bl	800a97c <HAL_MPU_Enable>

}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007874:	b672      	cpsid	i
}
 8007876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007878:	bf00      	nop
 800787a:	e7fd      	b.n	8007878 <Error_Handler+0x8>

0800787c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007880:	4b27      	ldr	r3, [pc, #156]	@ (8007920 <MX_SPI1_Init+0xa4>)
 8007882:	4a28      	ldr	r2, [pc, #160]	@ (8007924 <MX_SPI1_Init+0xa8>)
 8007884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007886:	4b26      	ldr	r3, [pc, #152]	@ (8007920 <MX_SPI1_Init+0xa4>)
 8007888:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800788c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800788e:	4b24      	ldr	r3, [pc, #144]	@ (8007920 <MX_SPI1_Init+0xa4>)
 8007890:	2200      	movs	r2, #0
 8007892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007894:	4b22      	ldr	r3, [pc, #136]	@ (8007920 <MX_SPI1_Init+0xa4>)
 8007896:	2207      	movs	r2, #7
 8007898:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800789a:	4b21      	ldr	r3, [pc, #132]	@ (8007920 <MX_SPI1_Init+0xa4>)
 800789c:	2200      	movs	r2, #0
 800789e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80078a0:	4b1f      	ldr	r3, [pc, #124]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80078a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80078ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80078ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078b0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80078b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80078b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80078bc:	4b18      	ldr	r3, [pc, #96]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078be:	2200      	movs	r2, #0
 80078c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078c2:	4b17      	ldr	r3, [pc, #92]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80078c8:	4b15      	ldr	r3, [pc, #84]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80078ce:	4b14      	ldr	r3, [pc, #80]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80078d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80078d6:	4b12      	ldr	r3, [pc, #72]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078d8:	2200      	movs	r2, #0
 80078da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80078dc:	4b10      	ldr	r3, [pc, #64]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078de:	2200      	movs	r2, #0
 80078e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80078e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80078e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80078ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80078f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80078fa:	4b09      	ldr	r3, [pc, #36]	@ (8007920 <MX_SPI1_Init+0xa4>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007900:	4b07      	ldr	r3, [pc, #28]	@ (8007920 <MX_SPI1_Init+0xa4>)
 8007902:	2200      	movs	r2, #0
 8007904:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007906:	4b06      	ldr	r3, [pc, #24]	@ (8007920 <MX_SPI1_Init+0xa4>)
 8007908:	2200      	movs	r2, #0
 800790a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800790c:	4804      	ldr	r0, [pc, #16]	@ (8007920 <MX_SPI1_Init+0xa4>)
 800790e:	f00c f8d5 	bl	8013abc <HAL_SPI_Init>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8007918:	f7ff ffaa 	bl	8007870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800791c:	bf00      	nop
 800791e:	bd80      	pop	{r7, pc}
 8007920:	240001ec 	.word	0x240001ec
 8007924:	40013000 	.word	0x40013000

08007928 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800792c:	4b27      	ldr	r3, [pc, #156]	@ (80079cc <MX_SPI2_Init+0xa4>)
 800792e:	4a28      	ldr	r2, [pc, #160]	@ (80079d0 <MX_SPI2_Init+0xa8>)
 8007930:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007932:	4b26      	ldr	r3, [pc, #152]	@ (80079cc <MX_SPI2_Init+0xa4>)
 8007934:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007938:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800793a:	4b24      	ldr	r3, [pc, #144]	@ (80079cc <MX_SPI2_Init+0xa4>)
 800793c:	2200      	movs	r2, #0
 800793e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007940:	4b22      	ldr	r3, [pc, #136]	@ (80079cc <MX_SPI2_Init+0xa4>)
 8007942:	2207      	movs	r2, #7
 8007944:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007946:	4b21      	ldr	r3, [pc, #132]	@ (80079cc <MX_SPI2_Init+0xa4>)
 8007948:	2200      	movs	r2, #0
 800794a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800794c:	4b1f      	ldr	r3, [pc, #124]	@ (80079cc <MX_SPI2_Init+0xa4>)
 800794e:	2200      	movs	r2, #0
 8007950:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007952:	4b1e      	ldr	r3, [pc, #120]	@ (80079cc <MX_SPI2_Init+0xa4>)
 8007954:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007958:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800795a:	4b1c      	ldr	r3, [pc, #112]	@ (80079cc <MX_SPI2_Init+0xa4>)
 800795c:	2200      	movs	r2, #0
 800795e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007960:	4b1a      	ldr	r3, [pc, #104]	@ (80079cc <MX_SPI2_Init+0xa4>)
 8007962:	2200      	movs	r2, #0
 8007964:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007966:	4b19      	ldr	r3, [pc, #100]	@ (80079cc <MX_SPI2_Init+0xa4>)
 8007968:	2200      	movs	r2, #0
 800796a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800796c:	4b17      	ldr	r3, [pc, #92]	@ (80079cc <MX_SPI2_Init+0xa4>)
 800796e:	2200      	movs	r2, #0
 8007970:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007972:	4b16      	ldr	r3, [pc, #88]	@ (80079cc <MX_SPI2_Init+0xa4>)
 8007974:	2200      	movs	r2, #0
 8007976:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007978:	4b14      	ldr	r3, [pc, #80]	@ (80079cc <MX_SPI2_Init+0xa4>)
 800797a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800797e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007980:	4b12      	ldr	r3, [pc, #72]	@ (80079cc <MX_SPI2_Init+0xa4>)
 8007982:	2200      	movs	r2, #0
 8007984:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007986:	4b11      	ldr	r3, [pc, #68]	@ (80079cc <MX_SPI2_Init+0xa4>)
 8007988:	2200      	movs	r2, #0
 800798a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800798c:	4b0f      	ldr	r3, [pc, #60]	@ (80079cc <MX_SPI2_Init+0xa4>)
 800798e:	2200      	movs	r2, #0
 8007990:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007992:	4b0e      	ldr	r3, [pc, #56]	@ (80079cc <MX_SPI2_Init+0xa4>)
 8007994:	2200      	movs	r2, #0
 8007996:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007998:	4b0c      	ldr	r3, [pc, #48]	@ (80079cc <MX_SPI2_Init+0xa4>)
 800799a:	2200      	movs	r2, #0
 800799c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800799e:	4b0b      	ldr	r3, [pc, #44]	@ (80079cc <MX_SPI2_Init+0xa4>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80079a4:	4b09      	ldr	r3, [pc, #36]	@ (80079cc <MX_SPI2_Init+0xa4>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80079aa:	4b08      	ldr	r3, [pc, #32]	@ (80079cc <MX_SPI2_Init+0xa4>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80079b0:	4b06      	ldr	r3, [pc, #24]	@ (80079cc <MX_SPI2_Init+0xa4>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80079b6:	4805      	ldr	r0, [pc, #20]	@ (80079cc <MX_SPI2_Init+0xa4>)
 80079b8:	f00c f880 	bl	8013abc <HAL_SPI_Init>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80079c2:	f7ff ff55 	bl	8007870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80079c6:	bf00      	nop
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	24000274 	.word	0x24000274
 80079d0:	40003800 	.word	0x40003800

080079d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08c      	sub	sp, #48	@ 0x30
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079dc:	f107 031c 	add.w	r3, r7, #28
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	605a      	str	r2, [r3, #4]
 80079e6:	609a      	str	r2, [r3, #8]
 80079e8:	60da      	str	r2, [r3, #12]
 80079ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a60      	ldr	r2, [pc, #384]	@ (8007b74 <HAL_SPI_MspInit+0x1a0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d136      	bne.n	8007a64 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80079f6:	4b60      	ldr	r3, [pc, #384]	@ (8007b78 <HAL_SPI_MspInit+0x1a4>)
 80079f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079fc:	4a5e      	ldr	r2, [pc, #376]	@ (8007b78 <HAL_SPI_MspInit+0x1a4>)
 80079fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007a06:	4b5c      	ldr	r3, [pc, #368]	@ (8007b78 <HAL_SPI_MspInit+0x1a4>)
 8007a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a10:	61bb      	str	r3, [r7, #24]
 8007a12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a14:	4b58      	ldr	r3, [pc, #352]	@ (8007b78 <HAL_SPI_MspInit+0x1a4>)
 8007a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a1a:	4a57      	ldr	r2, [pc, #348]	@ (8007b78 <HAL_SPI_MspInit+0x1a4>)
 8007a1c:	f043 0302 	orr.w	r3, r3, #2
 8007a20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a24:	4b54      	ldr	r3, [pc, #336]	@ (8007b78 <HAL_SPI_MspInit+0x1a4>)
 8007a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB4(NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8007a32:	2338      	movs	r3, #56	@ 0x38
 8007a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a36:	2302      	movs	r3, #2
 8007a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007a42:	2305      	movs	r3, #5
 8007a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a46:	f107 031c 	add.w	r3, r7, #28
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	484b      	ldr	r0, [pc, #300]	@ (8007b7c <HAL_SPI_MspInit+0x1a8>)
 8007a4e:	f005 fe47 	bl	800d6e0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8007a52:	2200      	movs	r2, #0
 8007a54:	2100      	movs	r1, #0
 8007a56:	2023      	movs	r0, #35	@ 0x23
 8007a58:	f002 ff43 	bl	800a8e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007a5c:	2023      	movs	r0, #35	@ 0x23
 8007a5e:	f002 ff5a 	bl	800a916 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007a62:	e082      	b.n	8007b6a <HAL_SPI_MspInit+0x196>
  else if(spiHandle->Instance==SPI2)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a45      	ldr	r2, [pc, #276]	@ (8007b80 <HAL_SPI_MspInit+0x1ac>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d17d      	bne.n	8007b6a <HAL_SPI_MspInit+0x196>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007a6e:	4b42      	ldr	r3, [pc, #264]	@ (8007b78 <HAL_SPI_MspInit+0x1a4>)
 8007a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a74:	4a40      	ldr	r2, [pc, #256]	@ (8007b78 <HAL_SPI_MspInit+0x1a4>)
 8007a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b78 <HAL_SPI_MspInit+0x1a4>)
 8007a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a88:	613b      	str	r3, [r7, #16]
 8007a8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8007b78 <HAL_SPI_MspInit+0x1a4>)
 8007a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a92:	4a39      	ldr	r2, [pc, #228]	@ (8007b78 <HAL_SPI_MspInit+0x1a4>)
 8007a94:	f043 0302 	orr.w	r3, r3, #2
 8007a98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a9c:	4b36      	ldr	r3, [pc, #216]	@ (8007b78 <HAL_SPI_MspInit+0x1a4>)
 8007a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007aaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007abc:	2305      	movs	r3, #5
 8007abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ac0:	f107 031c 	add.w	r3, r7, #28
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	482d      	ldr	r0, [pc, #180]	@ (8007b7c <HAL_SPI_MspInit+0x1a8>)
 8007ac8:	f005 fe0a 	bl	800d6e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007acc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8007ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007ada:	2301      	movs	r3, #1
 8007adc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007ade:	2305      	movs	r3, #5
 8007ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ae2:	f107 031c 	add.w	r3, r7, #28
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4824      	ldr	r0, [pc, #144]	@ (8007b7c <HAL_SPI_MspInit+0x1a8>)
 8007aea:	f005 fdf9 	bl	800d6e0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream0;
 8007aee:	4b25      	ldr	r3, [pc, #148]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007af0:	4a25      	ldr	r2, [pc, #148]	@ (8007b88 <HAL_SPI_MspInit+0x1b4>)
 8007af2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8007af4:	4b23      	ldr	r3, [pc, #140]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007af6:	2228      	movs	r2, #40	@ 0x28
 8007af8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007afa:	4b22      	ldr	r3, [pc, #136]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007afc:	2240      	movs	r2, #64	@ 0x40
 8007afe:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b00:	4b20      	ldr	r3, [pc, #128]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007b06:	4b1f      	ldr	r3, [pc, #124]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007b08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007b0c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007b14:	4b1b      	ldr	r3, [pc, #108]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8007b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007b20:	4b18      	ldr	r3, [pc, #96]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007b26:	4b17      	ldr	r3, [pc, #92]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007b28:	2204      	movs	r2, #4
 8007b2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007b2c:	4b15      	ldr	r3, [pc, #84]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007b2e:	2203      	movs	r2, #3
 8007b30:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007b32:	4b14      	ldr	r3, [pc, #80]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007b38:	4b12      	ldr	r3, [pc, #72]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007b3e:	4811      	ldr	r0, [pc, #68]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007b40:	f002 ff7c 	bl	800aa3c <HAL_DMA_Init>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <HAL_SPI_MspInit+0x17a>
      Error_Handler();
 8007b4a:	f7ff fe91 	bl	8007870 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a0c      	ldr	r2, [pc, #48]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007b52:	679a      	str	r2, [r3, #120]	@ 0x78
 8007b54:	4a0b      	ldr	r2, [pc, #44]	@ (8007b84 <HAL_SPI_MspInit+0x1b0>)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	2024      	movs	r0, #36	@ 0x24
 8007b60:	f002 febf 	bl	800a8e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007b64:	2024      	movs	r0, #36	@ 0x24
 8007b66:	f002 fed6 	bl	800a916 <HAL_NVIC_EnableIRQ>
}
 8007b6a:	bf00      	nop
 8007b6c:	3730      	adds	r7, #48	@ 0x30
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	40013000 	.word	0x40013000
 8007b78:	58024400 	.word	0x58024400
 8007b7c:	58020400 	.word	0x58020400
 8007b80:	40003800 	.word	0x40003800
 8007b84:	240002fc 	.word	0x240002fc
 8007b88:	40020010 	.word	0x40020010

08007b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b92:	4b0a      	ldr	r3, [pc, #40]	@ (8007bbc <HAL_MspInit+0x30>)
 8007b94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b98:	4a08      	ldr	r2, [pc, #32]	@ (8007bbc <HAL_MspInit+0x30>)
 8007b9a:	f043 0302 	orr.w	r3, r3, #2
 8007b9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007ba2:	4b06      	ldr	r3, [pc, #24]	@ (8007bbc <HAL_MspInit+0x30>)
 8007ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	607b      	str	r3, [r7, #4]
 8007bae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	58024400 	.word	0x58024400

08007bc0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf4 <SDTimer_Handler+0x34>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d004      	beq.n	8007bd6 <SDTimer_Handler+0x16>
    Timer1--;
 8007bcc:	4b09      	ldr	r3, [pc, #36]	@ (8007bf4 <SDTimer_Handler+0x34>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	4a08      	ldr	r2, [pc, #32]	@ (8007bf4 <SDTimer_Handler+0x34>)
 8007bd4:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 8007bd6:	4b08      	ldr	r3, [pc, #32]	@ (8007bf8 <SDTimer_Handler+0x38>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d004      	beq.n	8007be8 <SDTimer_Handler+0x28>
    Timer2--;
 8007bde:	4b06      	ldr	r3, [pc, #24]	@ (8007bf8 <SDTimer_Handler+0x38>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	4a04      	ldr	r2, [pc, #16]	@ (8007bf8 <SDTimer_Handler+0x38>)
 8007be6:	6013      	str	r3, [r2, #0]
}
 8007be8:	bf00      	nop
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	24000378 	.word	0x24000378
 8007bf8:	2400037c 	.word	0x2400037c

08007bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 8007c00:	2200      	movs	r2, #0
 8007c02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c06:	480a      	ldr	r0, [pc, #40]	@ (8007c30 <NMI_Handler+0x34>)
 8007c08:	f005 ff2a 	bl	800da60 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007c12:	4808      	ldr	r0, [pc, #32]	@ (8007c34 <NMI_Handler+0x38>)
 8007c14:	f005 ff24 	bl	800da60 <HAL_GPIO_WritePin>
	LED_R_1;
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c1e:	4805      	ldr	r0, [pc, #20]	@ (8007c34 <NMI_Handler+0x38>)
 8007c20:	f005 ff1e 	bl	800da60 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 8007c24:	4804      	ldr	r0, [pc, #16]	@ (8007c38 <NMI_Handler+0x3c>)
 8007c26:	f015 fbfd 	bl	801d424 <f_close>
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007c2a:	bf00      	nop
 8007c2c:	e7fd      	b.n	8007c2a <NMI_Handler+0x2e>
 8007c2e:	bf00      	nop
 8007c30:	58021000 	.word	0x58021000
 8007c34:	58020400 	.word	0x58020400
 8007c38:	24001ef0 	.word	0x24001ef0

08007c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 8007c40:	2201      	movs	r2, #1
 8007c42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c46:	480a      	ldr	r0, [pc, #40]	@ (8007c70 <HardFault_Handler+0x34>)
 8007c48:	f005 ff0a 	bl	800da60 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007c52:	4808      	ldr	r0, [pc, #32]	@ (8007c74 <HardFault_Handler+0x38>)
 8007c54:	f005 ff04 	bl	800da60 <HAL_GPIO_WritePin>
	LED_R_1;
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c5e:	4805      	ldr	r0, [pc, #20]	@ (8007c74 <HardFault_Handler+0x38>)
 8007c60:	f005 fefe 	bl	800da60 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007c64:	4804      	ldr	r0, [pc, #16]	@ (8007c78 <HardFault_Handler+0x3c>)
 8007c66:	f015 fbdd 	bl	801d424 <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c6a:	bf00      	nop
 8007c6c:	e7fd      	b.n	8007c6a <HardFault_Handler+0x2e>
 8007c6e:	bf00      	nop
 8007c70:	58021000 	.word	0x58021000
 8007c74:	58020400 	.word	0x58020400
 8007c78:	24001ef0 	.word	0x24001ef0

08007c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 8007c80:	2200      	movs	r2, #0
 8007c82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c86:	480a      	ldr	r0, [pc, #40]	@ (8007cb0 <MemManage_Handler+0x34>)
 8007c88:	f005 feea 	bl	800da60 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007c92:	4808      	ldr	r0, [pc, #32]	@ (8007cb4 <MemManage_Handler+0x38>)
 8007c94:	f005 fee4 	bl	800da60 <HAL_GPIO_WritePin>
	LED_R_1;
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c9e:	4805      	ldr	r0, [pc, #20]	@ (8007cb4 <MemManage_Handler+0x38>)
 8007ca0:	f005 fede 	bl	800da60 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007ca4:	4804      	ldr	r0, [pc, #16]	@ (8007cb8 <MemManage_Handler+0x3c>)
 8007ca6:	f015 fbbd 	bl	801d424 <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007caa:	bf00      	nop
 8007cac:	e7fd      	b.n	8007caa <MemManage_Handler+0x2e>
 8007cae:	bf00      	nop
 8007cb0:	58021000 	.word	0x58021000
 8007cb4:	58020400 	.word	0x58020400
 8007cb8:	24001ef0 	.word	0x24001ef0

08007cbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007cc6:	480a      	ldr	r0, [pc, #40]	@ (8007cf0 <BusFault_Handler+0x34>)
 8007cc8:	f005 feca 	bl	800da60 <HAL_GPIO_WritePin>
	LED_Y_1;
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007cd2:	4808      	ldr	r0, [pc, #32]	@ (8007cf4 <BusFault_Handler+0x38>)
 8007cd4:	f005 fec4 	bl	800da60 <HAL_GPIO_WritePin>
	LED_R_1;
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007cde:	4805      	ldr	r0, [pc, #20]	@ (8007cf4 <BusFault_Handler+0x38>)
 8007ce0:	f005 febe 	bl	800da60 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007ce4:	4804      	ldr	r0, [pc, #16]	@ (8007cf8 <BusFault_Handler+0x3c>)
 8007ce6:	f015 fb9d 	bl	801d424 <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <BusFault_Handler+0x2e>
 8007cee:	bf00      	nop
 8007cf0:	58021000 	.word	0x58021000
 8007cf4:	58020400 	.word	0x58020400
 8007cf8:	24001ef0 	.word	0x24001ef0

08007cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 8007d00:	2200      	movs	r2, #0
 8007d02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d06:	480a      	ldr	r0, [pc, #40]	@ (8007d30 <UsageFault_Handler+0x34>)
 8007d08:	f005 feaa 	bl	800da60 <HAL_GPIO_WritePin>
	LED_Y_1;
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007d12:	4808      	ldr	r0, [pc, #32]	@ (8007d34 <UsageFault_Handler+0x38>)
 8007d14:	f005 fea4 	bl	800da60 <HAL_GPIO_WritePin>
	LED_R_1;
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007d1e:	4805      	ldr	r0, [pc, #20]	@ (8007d34 <UsageFault_Handler+0x38>)
 8007d20:	f005 fe9e 	bl	800da60 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007d24:	4804      	ldr	r0, [pc, #16]	@ (8007d38 <UsageFault_Handler+0x3c>)
 8007d26:	f015 fb7d 	bl	801d424 <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d2a:	bf00      	nop
 8007d2c:	e7fd      	b.n	8007d2a <UsageFault_Handler+0x2e>
 8007d2e:	bf00      	nop
 8007d30:	58021000 	.word	0x58021000
 8007d34:	58020400 	.word	0x58020400
 8007d38:	24001ef0 	.word	0x24001ef0

08007d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007d40:	bf00      	nop
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d4e:	bf00      	nop
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d5c:	bf00      	nop
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
	...

08007d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8007d6c:	4b08      	ldr	r3, [pc, #32]	@ (8007d90 <SysTick_Handler+0x28>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3301      	adds	r3, #1
 8007d72:	4a07      	ldr	r2, [pc, #28]	@ (8007d90 <SysTick_Handler+0x28>)
 8007d74:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8007d76:	4b06      	ldr	r3, [pc, #24]	@ (8007d90 <SysTick_Handler+0x28>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b09      	cmp	r3, #9
 8007d7c:	d904      	bls.n	8007d88 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 8007d7e:	4b04      	ldr	r3, [pc, #16]	@ (8007d90 <SysTick_Handler+0x28>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8007d84:	f7ff ff1c 	bl	8007bc0 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d88:	f000 fd0e 	bl	80087a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007d8c:	bf00      	nop
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	24000374 	.word	0x24000374

08007d94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8007d98:	4802      	ldr	r0, [pc, #8]	@ (8007da4 <DMA1_Stream0_IRQHandler+0x10>)
 8007d9a:	f004 f975 	bl	800c088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007d9e:	bf00      	nop
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	240002fc 	.word	0x240002fc

08007da8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8007dac:	4802      	ldr	r0, [pc, #8]	@ (8007db8 <ADC_IRQHandler+0x10>)
 8007dae:	f001 fb49 	bl	8009444 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007db2:	bf00      	nop
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	240000ac 	.word	0x240000ac

08007dbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007dc0:	4802      	ldr	r0, [pc, #8]	@ (8007dcc <TIM2_IRQHandler+0x10>)
 8007dc2:	f00e f956 	bl	8016072 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007dc6:	bf00      	nop
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	240003cc 	.word	0x240003cc

08007dd0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007dd4:	4802      	ldr	r0, [pc, #8]	@ (8007de0 <SPI1_IRQHandler+0x10>)
 8007dd6:	f00d f9c5 	bl	8015164 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007dda:	bf00      	nop
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	240001ec 	.word	0x240001ec

08007de4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007de8:	4802      	ldr	r0, [pc, #8]	@ (8007df4 <SPI2_IRQHandler+0x10>)
 8007dea:	f00d f9bb 	bl	8015164 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8007dee:	bf00      	nop
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	24000274 	.word	0x24000274

08007df8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007dfc:	4802      	ldr	r0, [pc, #8]	@ (8007e08 <USART1_IRQHandler+0x10>)
 8007dfe:	f00f fd8f 	bl	8017920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007e02:	bf00      	nop
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	240004b0 	.word	0x240004b0

08007e0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8007e10:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007e14:	f005 fe3d 	bl	800da92 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007e18:	bf00      	nop
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007e20:	4802      	ldr	r0, [pc, #8]	@ (8007e2c <DMA2_Stream0_IRQHandler+0x10>)
 8007e22:	f004 f931 	bl	800c088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007e26:	bf00      	nop
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	2400011c 	.word	0x2400011c

08007e30 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8007e34:	4802      	ldr	r0, [pc, #8]	@ (8007e40 <I2C5_EV_IRQHandler+0x10>)
 8007e36:	f006 fa21 	bl	800e27c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8007e3a:	bf00      	nop
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	24000198 	.word	0x24000198

08007e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007e48:	4b32      	ldr	r3, [pc, #200]	@ (8007f14 <SystemInit+0xd0>)
 8007e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e4e:	4a31      	ldr	r2, [pc, #196]	@ (8007f14 <SystemInit+0xd0>)
 8007e50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007e54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007e58:	4b2f      	ldr	r3, [pc, #188]	@ (8007f18 <SystemInit+0xd4>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 030f 	and.w	r3, r3, #15
 8007e60:	2b06      	cmp	r3, #6
 8007e62:	d807      	bhi.n	8007e74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007e64:	4b2c      	ldr	r3, [pc, #176]	@ (8007f18 <SystemInit+0xd4>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f023 030f 	bic.w	r3, r3, #15
 8007e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8007f18 <SystemInit+0xd4>)
 8007e6e:	f043 0307 	orr.w	r3, r3, #7
 8007e72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007e74:	4b29      	ldr	r3, [pc, #164]	@ (8007f1c <SystemInit+0xd8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a28      	ldr	r2, [pc, #160]	@ (8007f1c <SystemInit+0xd8>)
 8007e7a:	f043 0301 	orr.w	r3, r3, #1
 8007e7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007e80:	4b26      	ldr	r3, [pc, #152]	@ (8007f1c <SystemInit+0xd8>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007e86:	4b25      	ldr	r3, [pc, #148]	@ (8007f1c <SystemInit+0xd8>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	4924      	ldr	r1, [pc, #144]	@ (8007f1c <SystemInit+0xd8>)
 8007e8c:	4b24      	ldr	r3, [pc, #144]	@ (8007f20 <SystemInit+0xdc>)
 8007e8e:	4013      	ands	r3, r2
 8007e90:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007e92:	4b21      	ldr	r3, [pc, #132]	@ (8007f18 <SystemInit+0xd4>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0308 	and.w	r3, r3, #8
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d007      	beq.n	8007eae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007f18 <SystemInit+0xd4>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f023 030f 	bic.w	r3, r3, #15
 8007ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8007f18 <SystemInit+0xd4>)
 8007ea8:	f043 0307 	orr.w	r3, r3, #7
 8007eac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007eae:	4b1b      	ldr	r3, [pc, #108]	@ (8007f1c <SystemInit+0xd8>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007eb4:	4b19      	ldr	r3, [pc, #100]	@ (8007f1c <SystemInit+0xd8>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007eba:	4b18      	ldr	r3, [pc, #96]	@ (8007f1c <SystemInit+0xd8>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007ec0:	4b16      	ldr	r3, [pc, #88]	@ (8007f1c <SystemInit+0xd8>)
 8007ec2:	4a18      	ldr	r2, [pc, #96]	@ (8007f24 <SystemInit+0xe0>)
 8007ec4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007ec6:	4b15      	ldr	r3, [pc, #84]	@ (8007f1c <SystemInit+0xd8>)
 8007ec8:	4a17      	ldr	r2, [pc, #92]	@ (8007f28 <SystemInit+0xe4>)
 8007eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007ecc:	4b13      	ldr	r3, [pc, #76]	@ (8007f1c <SystemInit+0xd8>)
 8007ece:	4a17      	ldr	r2, [pc, #92]	@ (8007f2c <SystemInit+0xe8>)
 8007ed0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007ed2:	4b12      	ldr	r3, [pc, #72]	@ (8007f1c <SystemInit+0xd8>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007ed8:	4b10      	ldr	r3, [pc, #64]	@ (8007f1c <SystemInit+0xd8>)
 8007eda:	4a14      	ldr	r2, [pc, #80]	@ (8007f2c <SystemInit+0xe8>)
 8007edc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007ede:	4b0f      	ldr	r3, [pc, #60]	@ (8007f1c <SystemInit+0xd8>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8007f1c <SystemInit+0xd8>)
 8007ee6:	4a11      	ldr	r2, [pc, #68]	@ (8007f2c <SystemInit+0xe8>)
 8007ee8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007eea:	4b0c      	ldr	r3, [pc, #48]	@ (8007f1c <SystemInit+0xd8>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8007f1c <SystemInit+0xd8>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a09      	ldr	r2, [pc, #36]	@ (8007f1c <SystemInit+0xd8>)
 8007ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007efa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007efc:	4b07      	ldr	r3, [pc, #28]	@ (8007f1c <SystemInit+0xd8>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8007f02:	4b0b      	ldr	r3, [pc, #44]	@ (8007f30 <SystemInit+0xec>)
 8007f04:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8007f08:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8007f0a:	bf00      	nop
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	e000ed00 	.word	0xe000ed00
 8007f18:	52002000 	.word	0x52002000
 8007f1c:	58024400 	.word	0x58024400
 8007f20:	eaf6ed7f 	.word	0xeaf6ed7f
 8007f24:	02020200 	.word	0x02020200
 8007f28:	01ff0000 	.word	0x01ff0000
 8007f2c:	01010280 	.word	0x01010280
 8007f30:	52004000 	.word	0x52004000

08007f34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b098      	sub	sp, #96	@ 0x60
 8007f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f3a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007f3e:	2200      	movs	r2, #0
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	605a      	str	r2, [r3, #4]
 8007f44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007f46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	605a      	str	r2, [r3, #4]
 8007f50:	609a      	str	r2, [r3, #8]
 8007f52:	60da      	str	r2, [r3, #12]
 8007f54:	611a      	str	r2, [r3, #16]
 8007f56:	615a      	str	r2, [r3, #20]
 8007f58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007f5a:	1d3b      	adds	r3, r7, #4
 8007f5c:	2234      	movs	r2, #52	@ 0x34
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f015 fc57 	bl	801d814 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007f66:	4b45      	ldr	r3, [pc, #276]	@ (800807c <MX_TIM1_Init+0x148>)
 8007f68:	4a45      	ldr	r2, [pc, #276]	@ (8008080 <MX_TIM1_Init+0x14c>)
 8007f6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8007f6c:	4b43      	ldr	r3, [pc, #268]	@ (800807c <MX_TIM1_Init+0x148>)
 8007f6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007f72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f74:	4b41      	ldr	r3, [pc, #260]	@ (800807c <MX_TIM1_Init+0x148>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8007f7a:	4b40      	ldr	r3, [pc, #256]	@ (800807c <MX_TIM1_Init+0x148>)
 8007f7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f82:	4b3e      	ldr	r3, [pc, #248]	@ (800807c <MX_TIM1_Init+0x148>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007f88:	4b3c      	ldr	r3, [pc, #240]	@ (800807c <MX_TIM1_Init+0x148>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800807c <MX_TIM1_Init+0x148>)
 8007f90:	2280      	movs	r2, #128	@ 0x80
 8007f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007f94:	4839      	ldr	r0, [pc, #228]	@ (800807c <MX_TIM1_Init+0x148>)
 8007f96:	f00d fea1 	bl	8015cdc <HAL_TIM_PWM_Init>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8007fa0:	f7ff fc66 	bl	8007870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007fac:	2300      	movs	r3, #0
 8007fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007fb0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	4831      	ldr	r0, [pc, #196]	@ (800807c <MX_TIM1_Init+0x148>)
 8007fb8:	f00f f9ae 	bl	8017318 <HAL_TIMEx_MasterConfigSynchronization>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007fc2:	f7ff fc55 	bl	8007870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007fc6:	2360      	movs	r3, #96	@ 0x60
 8007fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007fe2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007fe6:	2204      	movs	r2, #4
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4824      	ldr	r0, [pc, #144]	@ (800807c <MX_TIM1_Init+0x148>)
 8007fec:	f00e f9e4 	bl	80163b8 <HAL_TIM_PWM_ConfigChannel>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8007ff6:	f7ff fc3b 	bl	8007870 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007ffa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007ffe:	2208      	movs	r2, #8
 8008000:	4619      	mov	r1, r3
 8008002:	481e      	ldr	r0, [pc, #120]	@ (800807c <MX_TIM1_Init+0x148>)
 8008004:	f00e f9d8 	bl	80163b8 <HAL_TIM_PWM_ConfigChannel>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 800800e:	f7ff fc2f 	bl	8007870 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008012:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008016:	220c      	movs	r2, #12
 8008018:	4619      	mov	r1, r3
 800801a:	4818      	ldr	r0, [pc, #96]	@ (800807c <MX_TIM1_Init+0x148>)
 800801c:	f00e f9cc 	bl	80163b8 <HAL_TIM_PWM_ConfigChannel>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008026:	f7ff fc23 	bl	8007870 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800802a:	2300      	movs	r3, #0
 800802c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800802e:	2300      	movs	r3, #0
 8008030:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008036:	2300      	movs	r3, #0
 8008038:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800803a:	2300      	movs	r3, #0
 800803c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800803e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008042:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008048:	2300      	movs	r3, #0
 800804a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800804c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008050:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008056:	2300      	movs	r3, #0
 8008058:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800805a:	1d3b      	adds	r3, r7, #4
 800805c:	4619      	mov	r1, r3
 800805e:	4807      	ldr	r0, [pc, #28]	@ (800807c <MX_TIM1_Init+0x148>)
 8008060:	f00f f9f6 	bl	8017450 <HAL_TIMEx_ConfigBreakDeadTime>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800806a:	f7ff fc01 	bl	8007870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800806e:	4803      	ldr	r0, [pc, #12]	@ (800807c <MX_TIM1_Init+0x148>)
 8008070:	f000 f9da 	bl	8008428 <HAL_TIM_MspPostInit>

}
 8008074:	bf00      	nop
 8008076:	3760      	adds	r7, #96	@ 0x60
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	24000380 	.word	0x24000380
 8008080:	40010000 	.word	0x40010000

08008084 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800808a:	f107 0314 	add.w	r3, r7, #20
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	605a      	str	r2, [r3, #4]
 8008094:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008096:	1d3b      	adds	r3, r7, #4
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	605a      	str	r2, [r3, #4]
 800809e:	609a      	str	r2, [r3, #8]
 80080a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80080a2:	4b21      	ldr	r3, [pc, #132]	@ (8008128 <MX_TIM2_Init+0xa4>)
 80080a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80080a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 80080aa:	4b1f      	ldr	r3, [pc, #124]	@ (8008128 <MX_TIM2_Init+0xa4>)
 80080ac:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80080b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008128 <MX_TIM2_Init+0xa4>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80080b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008128 <MX_TIM2_Init+0xa4>)
 80080ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80080be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080c0:	4b19      	ldr	r3, [pc, #100]	@ (8008128 <MX_TIM2_Init+0xa4>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80080c6:	4b18      	ldr	r3, [pc, #96]	@ (8008128 <MX_TIM2_Init+0xa4>)
 80080c8:	2280      	movs	r2, #128	@ 0x80
 80080ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80080cc:	4816      	ldr	r0, [pc, #88]	@ (8008128 <MX_TIM2_Init+0xa4>)
 80080ce:	f00d ff79 	bl	8015fc4 <HAL_TIM_IC_Init>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80080d8:	f7ff fbca 	bl	8007870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080dc:	2300      	movs	r3, #0
 80080de:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080e0:	2300      	movs	r3, #0
 80080e2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80080e4:	f107 0314 	add.w	r3, r7, #20
 80080e8:	4619      	mov	r1, r3
 80080ea:	480f      	ldr	r0, [pc, #60]	@ (8008128 <MX_TIM2_Init+0xa4>)
 80080ec:	f00f f914 	bl	8017318 <HAL_TIMEx_MasterConfigSynchronization>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80080f6:	f7ff fbbb 	bl	8007870 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80080fa:	2300      	movs	r3, #0
 80080fc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80080fe:	2301      	movs	r3, #1
 8008100:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800810a:	1d3b      	adds	r3, r7, #4
 800810c:	2200      	movs	r2, #0
 800810e:	4619      	mov	r1, r3
 8008110:	4805      	ldr	r0, [pc, #20]	@ (8008128 <MX_TIM2_Init+0xa4>)
 8008112:	f00e f8b5 	bl	8016280 <HAL_TIM_IC_ConfigChannel>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800811c:	f7ff fba8 	bl	8007870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008120:	bf00      	nop
 8008122:	3720      	adds	r7, #32
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	240003cc 	.word	0x240003cc

0800812c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08a      	sub	sp, #40	@ 0x28
 8008130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008132:	f107 031c 	add.w	r3, r7, #28
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	605a      	str	r2, [r3, #4]
 800813c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800813e:	463b      	mov	r3, r7
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	605a      	str	r2, [r3, #4]
 8008146:	609a      	str	r2, [r3, #8]
 8008148:	60da      	str	r2, [r3, #12]
 800814a:	611a      	str	r2, [r3, #16]
 800814c:	615a      	str	r2, [r3, #20]
 800814e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008150:	4b32      	ldr	r3, [pc, #200]	@ (800821c <MX_TIM3_Init+0xf0>)
 8008152:	4a33      	ldr	r2, [pc, #204]	@ (8008220 <MX_TIM3_Init+0xf4>)
 8008154:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008156:	4b31      	ldr	r3, [pc, #196]	@ (800821c <MX_TIM3_Init+0xf0>)
 8008158:	221c      	movs	r2, #28
 800815a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800815c:	4b2f      	ldr	r3, [pc, #188]	@ (800821c <MX_TIM3_Init+0xf0>)
 800815e:	2200      	movs	r2, #0
 8008160:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008162:	4b2e      	ldr	r3, [pc, #184]	@ (800821c <MX_TIM3_Init+0xf0>)
 8008164:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008168:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800816a:	4b2c      	ldr	r3, [pc, #176]	@ (800821c <MX_TIM3_Init+0xf0>)
 800816c:	2200      	movs	r2, #0
 800816e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008170:	4b2a      	ldr	r3, [pc, #168]	@ (800821c <MX_TIM3_Init+0xf0>)
 8008172:	2200      	movs	r2, #0
 8008174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008176:	4829      	ldr	r0, [pc, #164]	@ (800821c <MX_TIM3_Init+0xf0>)
 8008178:	f00d fdb0 	bl	8015cdc <HAL_TIM_PWM_Init>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008182:	f7ff fb75 	bl	8007870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008186:	2300      	movs	r3, #0
 8008188:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800818a:	2300      	movs	r3, #0
 800818c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800818e:	f107 031c 	add.w	r3, r7, #28
 8008192:	4619      	mov	r1, r3
 8008194:	4821      	ldr	r0, [pc, #132]	@ (800821c <MX_TIM3_Init+0xf0>)
 8008196:	f00f f8bf 	bl	8017318 <HAL_TIMEx_MasterConfigSynchronization>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80081a0:	f7ff fb66 	bl	8007870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80081a4:	2360      	movs	r3, #96	@ 0x60
 80081a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80081b0:	2300      	movs	r3, #0
 80081b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80081b4:	463b      	mov	r3, r7
 80081b6:	2200      	movs	r2, #0
 80081b8:	4619      	mov	r1, r3
 80081ba:	4818      	ldr	r0, [pc, #96]	@ (800821c <MX_TIM3_Init+0xf0>)
 80081bc:	f00e f8fc 	bl	80163b8 <HAL_TIM_PWM_ConfigChannel>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80081c6:	f7ff fb53 	bl	8007870 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80081ca:	463b      	mov	r3, r7
 80081cc:	2204      	movs	r2, #4
 80081ce:	4619      	mov	r1, r3
 80081d0:	4812      	ldr	r0, [pc, #72]	@ (800821c <MX_TIM3_Init+0xf0>)
 80081d2:	f00e f8f1 	bl	80163b8 <HAL_TIM_PWM_ConfigChannel>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80081dc:	f7ff fb48 	bl	8007870 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80081e0:	463b      	mov	r3, r7
 80081e2:	2208      	movs	r2, #8
 80081e4:	4619      	mov	r1, r3
 80081e6:	480d      	ldr	r0, [pc, #52]	@ (800821c <MX_TIM3_Init+0xf0>)
 80081e8:	f00e f8e6 	bl	80163b8 <HAL_TIM_PWM_ConfigChannel>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80081f2:	f7ff fb3d 	bl	8007870 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80081f6:	463b      	mov	r3, r7
 80081f8:	220c      	movs	r2, #12
 80081fa:	4619      	mov	r1, r3
 80081fc:	4807      	ldr	r0, [pc, #28]	@ (800821c <MX_TIM3_Init+0xf0>)
 80081fe:	f00e f8db 	bl	80163b8 <HAL_TIM_PWM_ConfigChannel>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008208:	f7ff fb32 	bl	8007870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800820c:	4803      	ldr	r0, [pc, #12]	@ (800821c <MX_TIM3_Init+0xf0>)
 800820e:	f000 f90b 	bl	8008428 <HAL_TIM_MspPostInit>

}
 8008212:	bf00      	nop
 8008214:	3728      	adds	r7, #40	@ 0x28
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	24000418 	.word	0x24000418
 8008220:	40000400 	.word	0x40000400

08008224 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800822a:	f107 0310 	add.w	r3, r7, #16
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	605a      	str	r2, [r3, #4]
 8008234:	609a      	str	r2, [r3, #8]
 8008236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008238:	1d3b      	adds	r3, r7, #4
 800823a:	2200      	movs	r2, #0
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	605a      	str	r2, [r3, #4]
 8008240:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008242:	4b21      	ldr	r3, [pc, #132]	@ (80082c8 <MX_TIM8_Init+0xa4>)
 8008244:	4a21      	ldr	r2, [pc, #132]	@ (80082cc <MX_TIM8_Init+0xa8>)
 8008246:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008248:	4b1f      	ldr	r3, [pc, #124]	@ (80082c8 <MX_TIM8_Init+0xa4>)
 800824a:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 800824e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008250:	4b1d      	ldr	r3, [pc, #116]	@ (80082c8 <MX_TIM8_Init+0xa4>)
 8008252:	2200      	movs	r2, #0
 8008254:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8008256:	4b1c      	ldr	r3, [pc, #112]	@ (80082c8 <MX_TIM8_Init+0xa4>)
 8008258:	f242 720f 	movw	r2, #9999	@ 0x270f
 800825c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800825e:	4b1a      	ldr	r3, [pc, #104]	@ (80082c8 <MX_TIM8_Init+0xa4>)
 8008260:	2200      	movs	r2, #0
 8008262:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008264:	4b18      	ldr	r3, [pc, #96]	@ (80082c8 <MX_TIM8_Init+0xa4>)
 8008266:	2200      	movs	r2, #0
 8008268:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800826a:	4b17      	ldr	r3, [pc, #92]	@ (80082c8 <MX_TIM8_Init+0xa4>)
 800826c:	2200      	movs	r2, #0
 800826e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008270:	4815      	ldr	r0, [pc, #84]	@ (80082c8 <MX_TIM8_Init+0xa4>)
 8008272:	f00d fbd8 	bl	8015a26 <HAL_TIM_Base_Init>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 800827c:	f7ff faf8 	bl	8007870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008284:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008286:	f107 0310 	add.w	r3, r7, #16
 800828a:	4619      	mov	r1, r3
 800828c:	480e      	ldr	r0, [pc, #56]	@ (80082c8 <MX_TIM8_Init+0xa4>)
 800828e:	f00e f9a7 	bl	80165e0 <HAL_TIM_ConfigClockSource>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8008298:	f7ff faea 	bl	8007870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800829c:	2320      	movs	r3, #32
 800829e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80082a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80082a4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80082aa:	1d3b      	adds	r3, r7, #4
 80082ac:	4619      	mov	r1, r3
 80082ae:	4806      	ldr	r0, [pc, #24]	@ (80082c8 <MX_TIM8_Init+0xa4>)
 80082b0:	f00f f832 	bl	8017318 <HAL_TIMEx_MasterConfigSynchronization>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80082ba:	f7ff fad9 	bl	8007870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80082be:	bf00      	nop
 80082c0:	3720      	adds	r7, #32
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	24000464 	.word	0x24000464
 80082cc:	40010400 	.word	0x40010400

080082d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a16      	ldr	r2, [pc, #88]	@ (8008338 <HAL_TIM_PWM_MspInit+0x68>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d10f      	bne.n	8008302 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80082e2:	4b16      	ldr	r3, [pc, #88]	@ (800833c <HAL_TIM_PWM_MspInit+0x6c>)
 80082e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082e8:	4a14      	ldr	r2, [pc, #80]	@ (800833c <HAL_TIM_PWM_MspInit+0x6c>)
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80082f2:	4b12      	ldr	r3, [pc, #72]	@ (800833c <HAL_TIM_PWM_MspInit+0x6c>)
 80082f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	60fb      	str	r3, [r7, #12]
 80082fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008300:	e013      	b.n	800832a <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a0e      	ldr	r2, [pc, #56]	@ (8008340 <HAL_TIM_PWM_MspInit+0x70>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d10e      	bne.n	800832a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800830c:	4b0b      	ldr	r3, [pc, #44]	@ (800833c <HAL_TIM_PWM_MspInit+0x6c>)
 800830e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008312:	4a0a      	ldr	r2, [pc, #40]	@ (800833c <HAL_TIM_PWM_MspInit+0x6c>)
 8008314:	f043 0302 	orr.w	r3, r3, #2
 8008318:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800831c:	4b07      	ldr	r3, [pc, #28]	@ (800833c <HAL_TIM_PWM_MspInit+0x6c>)
 800831e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	60bb      	str	r3, [r7, #8]
 8008328:	68bb      	ldr	r3, [r7, #8]
}
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	40010000 	.word	0x40010000
 800833c:	58024400 	.word	0x58024400
 8008340:	40000400 	.word	0x40000400

08008344 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08a      	sub	sp, #40	@ 0x28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800834c:	f107 0314 	add.w	r3, r7, #20
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	605a      	str	r2, [r3, #4]
 8008356:	609a      	str	r2, [r3, #8]
 8008358:	60da      	str	r2, [r3, #12]
 800835a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008364:	d135      	bne.n	80083d2 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008366:	4b1d      	ldr	r3, [pc, #116]	@ (80083dc <HAL_TIM_IC_MspInit+0x98>)
 8008368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800836c:	4a1b      	ldr	r2, [pc, #108]	@ (80083dc <HAL_TIM_IC_MspInit+0x98>)
 800836e:	f043 0301 	orr.w	r3, r3, #1
 8008372:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008376:	4b19      	ldr	r3, [pc, #100]	@ (80083dc <HAL_TIM_IC_MspInit+0x98>)
 8008378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	613b      	str	r3, [r7, #16]
 8008382:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008384:	4b15      	ldr	r3, [pc, #84]	@ (80083dc <HAL_TIM_IC_MspInit+0x98>)
 8008386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800838a:	4a14      	ldr	r2, [pc, #80]	@ (80083dc <HAL_TIM_IC_MspInit+0x98>)
 800838c:	f043 0301 	orr.w	r3, r3, #1
 8008390:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008394:	4b11      	ldr	r3, [pc, #68]	@ (80083dc <HAL_TIM_IC_MspInit+0x98>)
 8008396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80083a2:	2301      	movs	r3, #1
 80083a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083a6:	2302      	movs	r3, #2
 80083a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083aa:	2300      	movs	r3, #0
 80083ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083ae:	2300      	movs	r3, #0
 80083b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80083b2:	2301      	movs	r3, #1
 80083b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083b6:	f107 0314 	add.w	r3, r7, #20
 80083ba:	4619      	mov	r1, r3
 80083bc:	4808      	ldr	r0, [pc, #32]	@ (80083e0 <HAL_TIM_IC_MspInit+0x9c>)
 80083be:	f005 f98f 	bl	800d6e0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80083c2:	2200      	movs	r2, #0
 80083c4:	2101      	movs	r1, #1
 80083c6:	201c      	movs	r0, #28
 80083c8:	f002 fa8b 	bl	800a8e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80083cc:	201c      	movs	r0, #28
 80083ce:	f002 faa2 	bl	800a916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80083d2:	bf00      	nop
 80083d4:	3728      	adds	r7, #40	@ 0x28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	58024400 	.word	0x58024400
 80083e0:	58020000 	.word	0x58020000

080083e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a0b      	ldr	r2, [pc, #44]	@ (8008420 <HAL_TIM_Base_MspInit+0x3c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d10e      	bne.n	8008414 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80083f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008424 <HAL_TIM_Base_MspInit+0x40>)
 80083f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083fc:	4a09      	ldr	r2, [pc, #36]	@ (8008424 <HAL_TIM_Base_MspInit+0x40>)
 80083fe:	f043 0302 	orr.w	r3, r3, #2
 8008402:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008406:	4b07      	ldr	r3, [pc, #28]	@ (8008424 <HAL_TIM_Base_MspInit+0x40>)
 8008408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	60fb      	str	r3, [r7, #12]
 8008412:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008414:	bf00      	nop
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	40010400 	.word	0x40010400
 8008424:	58024400 	.word	0x58024400

08008428 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08a      	sub	sp, #40	@ 0x28
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008430:	f107 0314 	add.w	r3, r7, #20
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	605a      	str	r2, [r3, #4]
 800843a:	609a      	str	r2, [r3, #8]
 800843c:	60da      	str	r2, [r3, #12]
 800843e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a26      	ldr	r2, [pc, #152]	@ (80084e0 <HAL_TIM_MspPostInit+0xb8>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d120      	bne.n	800848c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800844a:	4b26      	ldr	r3, [pc, #152]	@ (80084e4 <HAL_TIM_MspPostInit+0xbc>)
 800844c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008450:	4a24      	ldr	r2, [pc, #144]	@ (80084e4 <HAL_TIM_MspPostInit+0xbc>)
 8008452:	f043 0310 	orr.w	r3, r3, #16
 8008456:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800845a:	4b22      	ldr	r3, [pc, #136]	@ (80084e4 <HAL_TIM_MspPostInit+0xbc>)
 800845c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008460:	f003 0310 	and.w	r3, r3, #16
 8008464:	613b      	str	r3, [r7, #16]
 8008466:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8008468:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800846c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800846e:	2302      	movs	r3, #2
 8008470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008472:	2300      	movs	r3, #0
 8008474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008476:	2300      	movs	r3, #0
 8008478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800847a:	2301      	movs	r3, #1
 800847c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800847e:	f107 0314 	add.w	r3, r7, #20
 8008482:	4619      	mov	r1, r3
 8008484:	4818      	ldr	r0, [pc, #96]	@ (80084e8 <HAL_TIM_MspPostInit+0xc0>)
 8008486:	f005 f92b 	bl	800d6e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800848a:	e024      	b.n	80084d6 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a16      	ldr	r2, [pc, #88]	@ (80084ec <HAL_TIM_MspPostInit+0xc4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d11f      	bne.n	80084d6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008496:	4b13      	ldr	r3, [pc, #76]	@ (80084e4 <HAL_TIM_MspPostInit+0xbc>)
 8008498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800849c:	4a11      	ldr	r2, [pc, #68]	@ (80084e4 <HAL_TIM_MspPostInit+0xbc>)
 800849e:	f043 0304 	orr.w	r3, r3, #4
 80084a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80084a6:	4b0f      	ldr	r3, [pc, #60]	@ (80084e4 <HAL_TIM_MspPostInit+0xbc>)
 80084a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80084b4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80084b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ba:	2302      	movs	r3, #2
 80084bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084c2:	2300      	movs	r3, #0
 80084c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80084c6:	2302      	movs	r3, #2
 80084c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084ca:	f107 0314 	add.w	r3, r7, #20
 80084ce:	4619      	mov	r1, r3
 80084d0:	4807      	ldr	r0, [pc, #28]	@ (80084f0 <HAL_TIM_MspPostInit+0xc8>)
 80084d2:	f005 f905 	bl	800d6e0 <HAL_GPIO_Init>
}
 80084d6:	bf00      	nop
 80084d8:	3728      	adds	r7, #40	@ 0x28
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	40010000 	.word	0x40010000
 80084e4:	58024400 	.word	0x58024400
 80084e8:	58021000 	.word	0x58021000
 80084ec:	40000400 	.word	0x40000400
 80084f0:	58020800 	.word	0x58020800

080084f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80084f8:	4b22      	ldr	r3, [pc, #136]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 80084fa:	4a23      	ldr	r2, [pc, #140]	@ (8008588 <MX_USART1_UART_Init+0x94>)
 80084fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80084fe:	4b21      	ldr	r3, [pc, #132]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 8008500:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008506:	4b1f      	ldr	r3, [pc, #124]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 8008508:	2200      	movs	r2, #0
 800850a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800850c:	4b1d      	ldr	r3, [pc, #116]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 800850e:	2200      	movs	r2, #0
 8008510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008512:	4b1c      	ldr	r3, [pc, #112]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 8008514:	2200      	movs	r2, #0
 8008516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008518:	4b1a      	ldr	r3, [pc, #104]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 800851a:	220c      	movs	r2, #12
 800851c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800851e:	4b19      	ldr	r3, [pc, #100]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 8008520:	2200      	movs	r2, #0
 8008522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008524:	4b17      	ldr	r3, [pc, #92]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 8008526:	2200      	movs	r2, #0
 8008528:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800852a:	4b16      	ldr	r3, [pc, #88]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 800852c:	2200      	movs	r2, #0
 800852e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008530:	4b14      	ldr	r3, [pc, #80]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 8008532:	2200      	movs	r2, #0
 8008534:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008536:	4b13      	ldr	r3, [pc, #76]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 8008538:	2200      	movs	r2, #0
 800853a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800853c:	4811      	ldr	r0, [pc, #68]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 800853e:	f00f f831 	bl	80175a4 <HAL_UART_Init>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008548:	f7ff f992 	bl	8007870 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800854c:	2100      	movs	r1, #0
 800854e:	480d      	ldr	r0, [pc, #52]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 8008550:	f011 fee1 	bl	801a316 <HAL_UARTEx_SetTxFifoThreshold>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800855a:	f7ff f989 	bl	8007870 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800855e:	2100      	movs	r1, #0
 8008560:	4808      	ldr	r0, [pc, #32]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 8008562:	f011 ff16 	bl	801a392 <HAL_UARTEx_SetRxFifoThreshold>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800856c:	f7ff f980 	bl	8007870 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008570:	4804      	ldr	r0, [pc, #16]	@ (8008584 <MX_USART1_UART_Init+0x90>)
 8008572:	f011 fe97 	bl	801a2a4 <HAL_UARTEx_DisableFifoMode>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800857c:	f7ff f978 	bl	8007870 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008580:	bf00      	nop
 8008582:	bd80      	pop	{r7, pc}
 8008584:	240004b0 	.word	0x240004b0
 8008588:	40011000 	.word	0x40011000

0800858c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b0b8      	sub	sp, #224	@ 0xe0
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008594:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	609a      	str	r2, [r3, #8]
 80085a0:	60da      	str	r2, [r3, #12]
 80085a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80085a4:	f107 0310 	add.w	r3, r7, #16
 80085a8:	22b8      	movs	r2, #184	@ 0xb8
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f015 f931 	bl	801d814 <memset>
  if(uartHandle->Instance==USART1)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a2b      	ldr	r2, [pc, #172]	@ (8008664 <HAL_UART_MspInit+0xd8>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d14e      	bne.n	800865a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80085bc:	f04f 0201 	mov.w	r2, #1
 80085c0:	f04f 0300 	mov.w	r3, #0
 80085c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80085c8:	2300      	movs	r3, #0
 80085ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80085ce:	f107 0310 	add.w	r3, r7, #16
 80085d2:	4618      	mov	r0, r3
 80085d4:	f008 fe8c 	bl	80112f0 <HAL_RCCEx_PeriphCLKConfig>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80085de:	f7ff f947 	bl	8007870 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80085e2:	4b21      	ldr	r3, [pc, #132]	@ (8008668 <HAL_UART_MspInit+0xdc>)
 80085e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085e8:	4a1f      	ldr	r2, [pc, #124]	@ (8008668 <HAL_UART_MspInit+0xdc>)
 80085ea:	f043 0310 	orr.w	r3, r3, #16
 80085ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80085f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008668 <HAL_UART_MspInit+0xdc>)
 80085f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008600:	4b19      	ldr	r3, [pc, #100]	@ (8008668 <HAL_UART_MspInit+0xdc>)
 8008602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008606:	4a18      	ldr	r2, [pc, #96]	@ (8008668 <HAL_UART_MspInit+0xdc>)
 8008608:	f043 0301 	orr.w	r3, r3, #1
 800860c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008610:	4b15      	ldr	r3, [pc, #84]	@ (8008668 <HAL_UART_MspInit+0xdc>)
 8008612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	60bb      	str	r3, [r7, #8]
 800861c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800861e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008622:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008626:	2302      	movs	r3, #2
 8008628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800862c:	2300      	movs	r3, #0
 800862e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008632:	2300      	movs	r3, #0
 8008634:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008638:	2307      	movs	r3, #7
 800863a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800863e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008642:	4619      	mov	r1, r3
 8008644:	4809      	ldr	r0, [pc, #36]	@ (800866c <HAL_UART_MspInit+0xe0>)
 8008646:	f005 f84b 	bl	800d6e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800864a:	2200      	movs	r2, #0
 800864c:	2100      	movs	r1, #0
 800864e:	2025      	movs	r0, #37	@ 0x25
 8008650:	f002 f947 	bl	800a8e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008654:	2025      	movs	r0, #37	@ 0x25
 8008656:	f002 f95e 	bl	800a916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800865a:	bf00      	nop
 800865c:	37e0      	adds	r7, #224	@ 0xe0
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	40011000 	.word	0x40011000
 8008668:	58024400 	.word	0x58024400
 800866c:	58020000 	.word	0x58020000

08008670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008670:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80086a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008674:	f7ff fbe6 	bl	8007e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008678:	480c      	ldr	r0, [pc, #48]	@ (80086ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800867a:	490d      	ldr	r1, [pc, #52]	@ (80086b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800867c:	4a0d      	ldr	r2, [pc, #52]	@ (80086b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800867e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008680:	e002      	b.n	8008688 <LoopCopyDataInit>

08008682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008686:	3304      	adds	r3, #4

08008688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800868a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800868c:	d3f9      	bcc.n	8008682 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800868e:	4a0a      	ldr	r2, [pc, #40]	@ (80086b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008690:	4c0a      	ldr	r4, [pc, #40]	@ (80086bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8008692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008694:	e001      	b.n	800869a <LoopFillZerobss>

08008696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008698:	3204      	adds	r2, #4

0800869a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800869a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800869c:	d3fb      	bcc.n	8008696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800869e:	f015 f8c7 	bl	801d830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80086a2:	f7fc f9f9 	bl	8004a98 <main>
  bx  lr
 80086a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80086a8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80086ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80086b0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80086b4:	080200a0 	.word	0x080200a0
  ldr r2, =_sbss
 80086b8:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80086bc:	240008ac 	.word	0x240008ac

080086c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80086c0:	e7fe      	b.n	80086c0 <ADC3_IRQHandler>
	...

080086c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80086ca:	2003      	movs	r0, #3
 80086cc:	f002 f8fe 	bl	800a8cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80086d0:	f008 fc38 	bl	8010f44 <HAL_RCC_GetSysClockFreq>
 80086d4:	4602      	mov	r2, r0
 80086d6:	4b15      	ldr	r3, [pc, #84]	@ (800872c <HAL_Init+0x68>)
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	0a1b      	lsrs	r3, r3, #8
 80086dc:	f003 030f 	and.w	r3, r3, #15
 80086e0:	4913      	ldr	r1, [pc, #76]	@ (8008730 <HAL_Init+0x6c>)
 80086e2:	5ccb      	ldrb	r3, [r1, r3]
 80086e4:	f003 031f 	and.w	r3, r3, #31
 80086e8:	fa22 f303 	lsr.w	r3, r2, r3
 80086ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80086ee:	4b0f      	ldr	r3, [pc, #60]	@ (800872c <HAL_Init+0x68>)
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	f003 030f 	and.w	r3, r3, #15
 80086f6:	4a0e      	ldr	r2, [pc, #56]	@ (8008730 <HAL_Init+0x6c>)
 80086f8:	5cd3      	ldrb	r3, [r2, r3]
 80086fa:	f003 031f 	and.w	r3, r3, #31
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	fa22 f303 	lsr.w	r3, r2, r3
 8008704:	4a0b      	ldr	r2, [pc, #44]	@ (8008734 <HAL_Init+0x70>)
 8008706:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008708:	4a0b      	ldr	r2, [pc, #44]	@ (8008738 <HAL_Init+0x74>)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800870e:	200f      	movs	r0, #15
 8008710:	f000 f814 	bl	800873c <HAL_InitTick>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e002      	b.n	8008724 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800871e:	f7ff fa35 	bl	8007b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	58024400 	.word	0x58024400
 8008730:	0801e2e8 	.word	0x0801e2e8
 8008734:	24000008 	.word	0x24000008
 8008738:	24000004 	.word	0x24000004

0800873c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8008744:	4b15      	ldr	r3, [pc, #84]	@ (800879c <HAL_InitTick+0x60>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e021      	b.n	8008794 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008750:	4b13      	ldr	r3, [pc, #76]	@ (80087a0 <HAL_InitTick+0x64>)
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	4b11      	ldr	r3, [pc, #68]	@ (800879c <HAL_InitTick+0x60>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	4619      	mov	r1, r3
 800875a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800875e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008762:	fbb2 f3f3 	udiv	r3, r2, r3
 8008766:	4618      	mov	r0, r3
 8008768:	f002 f8e3 	bl	800a932 <HAL_SYSTICK_Config>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e00e      	b.n	8008794 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b0f      	cmp	r3, #15
 800877a:	d80a      	bhi.n	8008792 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800877c:	2200      	movs	r2, #0
 800877e:	6879      	ldr	r1, [r7, #4]
 8008780:	f04f 30ff 	mov.w	r0, #4294967295
 8008784:	f002 f8ad 	bl	800a8e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008788:	4a06      	ldr	r2, [pc, #24]	@ (80087a4 <HAL_InitTick+0x68>)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	e000      	b.n	8008794 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	24000010 	.word	0x24000010
 80087a0:	24000004 	.word	0x24000004
 80087a4:	2400000c 	.word	0x2400000c

080087a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80087ac:	4b06      	ldr	r3, [pc, #24]	@ (80087c8 <HAL_IncTick+0x20>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	4b06      	ldr	r3, [pc, #24]	@ (80087cc <HAL_IncTick+0x24>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4413      	add	r3, r2
 80087b8:	4a04      	ldr	r2, [pc, #16]	@ (80087cc <HAL_IncTick+0x24>)
 80087ba:	6013      	str	r3, [r2, #0]
}
 80087bc:	bf00      	nop
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	24000010 	.word	0x24000010
 80087cc:	24000544 	.word	0x24000544

080087d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087d0:	b480      	push	{r7}
 80087d2:	af00      	add	r7, sp, #0
  return uwTick;
 80087d4:	4b03      	ldr	r3, [pc, #12]	@ (80087e4 <HAL_GetTick+0x14>)
 80087d6:	681b      	ldr	r3, [r3, #0]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	24000544 	.word	0x24000544

080087e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80087f0:	f7ff ffee 	bl	80087d0 <HAL_GetTick>
 80087f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008800:	d005      	beq.n	800880e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008802:	4b0a      	ldr	r3, [pc, #40]	@ (800882c <HAL_Delay+0x44>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800880e:	bf00      	nop
 8008810:	f7ff ffde 	bl	80087d0 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	429a      	cmp	r2, r3
 800881e:	d8f7      	bhi.n	8008810 <HAL_Delay+0x28>
  {
  }
}
 8008820:	bf00      	nop
 8008822:	bf00      	nop
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	24000010 	.word	0x24000010

08008830 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	431a      	orrs	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	609a      	str	r2, [r3, #8]
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	609a      	str	r2, [r3, #8]
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800888c:	4618      	mov	r0, r3
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a18      	ldr	r2, [pc, #96]	@ (8008908 <LL_ADC_SetChannelPreselection+0x70>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d027      	beq.n	80088fa <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d107      	bne.n	80088c4 <LL_ADC_SetChannelPreselection+0x2c>
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	0e9b      	lsrs	r3, r3, #26
 80088b8:	f003 031f 	and.w	r3, r3, #31
 80088bc:	2201      	movs	r2, #1
 80088be:	fa02 f303 	lsl.w	r3, r2, r3
 80088c2:	e015      	b.n	80088f0 <LL_ADC_SetChannelPreselection+0x58>
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	fa93 f3a3 	rbit	r3, r3
 80088ce:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 80088da:	2320      	movs	r3, #32
 80088dc:	e003      	b.n	80088e6 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	fab3 f383 	clz	r3, r3
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	f003 031f 	and.w	r3, r3, #31
 80088ea:	2201      	movs	r2, #1
 80088ec:	fa02 f303 	lsl.w	r3, r2, r3
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	69d2      	ldr	r2, [r2, #28]
 80088f4:	431a      	orrs	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80088fa:	bf00      	nop
 80088fc:	371c      	adds	r7, #28
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	58026000 	.word	0x58026000

0800890c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800890c:	b480      	push	{r7}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3360      	adds	r3, #96	@ 0x60
 800891e:	461a      	mov	r2, r3
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4a10      	ldr	r2, [pc, #64]	@ (800896c <LL_ADC_SetOffset+0x60>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d10b      	bne.n	8008948 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	4313      	orrs	r3, r2
 800893e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8008946:	e00b      	b.n	8008960 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	430b      	orrs	r3, r1
 800895a:	431a      	orrs	r2, r3
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	601a      	str	r2, [r3, #0]
}
 8008960:	bf00      	nop
 8008962:	371c      	adds	r7, #28
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	58026000 	.word	0x58026000

08008970 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	3360      	adds	r3, #96	@ 0x60
 800897e:	461a      	mov	r2, r3
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f003 031f 	and.w	r3, r3, #31
 80089b6:	6879      	ldr	r1, [r7, #4]
 80089b8:	fa01 f303 	lsl.w	r3, r1, r3
 80089bc:	431a      	orrs	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	611a      	str	r2, [r3, #16]
}
 80089c2:	bf00      	nop
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
	...

080089d0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4a0c      	ldr	r2, [pc, #48]	@ (8008a10 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d00e      	beq.n	8008a02 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	3360      	adds	r3, #96	@ 0x60
 80089e8:	461a      	mov	r2, r3
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	431a      	orrs	r2, r3
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	601a      	str	r2, [r3, #0]
  }
}
 8008a02:	bf00      	nop
 8008a04:	371c      	adds	r7, #28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	58026000 	.word	0x58026000

08008a14 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4a0c      	ldr	r2, [pc, #48]	@ (8008a54 <LL_ADC_SetOffsetSaturation+0x40>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d10e      	bne.n	8008a46 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3360      	adds	r3, #96	@ 0x60
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	431a      	orrs	r2, r3
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8008a46:	bf00      	nop
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	58026000 	.word	0x58026000

08008a58 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4a0c      	ldr	r2, [pc, #48]	@ (8008a98 <LL_ADC_SetOffsetSign+0x40>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d10e      	bne.n	8008a8a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3360      	adds	r3, #96	@ 0x60
 8008a70:	461a      	mov	r2, r3
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	431a      	orrs	r2, r3
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8008a8a:	bf00      	nop
 8008a8c:	371c      	adds	r7, #28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	58026000 	.word	0x58026000

08008a9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3360      	adds	r3, #96	@ 0x60
 8008aac:	461a      	mov	r2, r3
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8008aec <LL_ADC_SetOffsetState+0x50>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d108      	bne.n	8008ad0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8008ace:	e007      	b.n	8008ae0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	431a      	orrs	r2, r3
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	601a      	str	r2, [r3, #0]
}
 8008ae0:	bf00      	nop
 8008ae2:	371c      	adds	r7, #28
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	58026000 	.word	0x58026000

08008af0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008b04:	2301      	movs	r3, #1
 8008b06:	e000      	b.n	8008b0a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b087      	sub	sp, #28
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3330      	adds	r3, #48	@ 0x30
 8008b26:	461a      	mov	r2, r3
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	0a1b      	lsrs	r3, r3, #8
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	f003 030c 	and.w	r3, r3, #12
 8008b32:	4413      	add	r3, r2
 8008b34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	f003 031f 	and.w	r3, r3, #31
 8008b40:	211f      	movs	r1, #31
 8008b42:	fa01 f303 	lsl.w	r3, r1, r3
 8008b46:	43db      	mvns	r3, r3
 8008b48:	401a      	ands	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	0e9b      	lsrs	r3, r3, #26
 8008b4e:	f003 011f 	and.w	r1, r3, #31
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f003 031f 	and.w	r3, r3, #31
 8008b58:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008b62:	bf00      	nop
 8008b64:	371c      	adds	r7, #28
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b083      	sub	sp, #12
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f023 0203 	bic.w	r2, r3, #3
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	431a      	orrs	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	60da      	str	r2, [r3, #12]
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	f043 0201 	orr.w	r2, r3, #1
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	60da      	str	r2, [r3, #12]
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a08      	ldr	r2, [pc, #32]	@ (8008be4 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d107      	bne.n	8008bd6 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f023 0203 	bic.w	r2, r3, #3
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	60da      	str	r2, [r3, #12]
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	58026000 	.word	0x58026000

08008be8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bf4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e000      	b.n	8008c02 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b087      	sub	sp, #28
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3314      	adds	r3, #20
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	0e5b      	lsrs	r3, r3, #25
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	f003 0304 	and.w	r3, r3, #4
 8008c2a:	4413      	add	r3, r2
 8008c2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	0d1b      	lsrs	r3, r3, #20
 8008c36:	f003 031f 	and.w	r3, r3, #31
 8008c3a:	2107      	movs	r1, #7
 8008c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c40:	43db      	mvns	r3, r3
 8008c42:	401a      	ands	r2, r3
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	0d1b      	lsrs	r3, r3, #20
 8008c48:	f003 031f 	and.w	r3, r3, #31
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c52:	431a      	orrs	r2, r3
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008c58:	bf00      	nop
 8008c5a:	371c      	adds	r7, #28
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4a1a      	ldr	r2, [pc, #104]	@ (8008cdc <LL_ADC_SetChannelSingleDiff+0x78>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d115      	bne.n	8008ca4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c84:	43db      	mvns	r3, r3
 8008c86:	401a      	ands	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f003 0318 	and.w	r3, r3, #24
 8008c8e:	4914      	ldr	r1, [pc, #80]	@ (8008ce0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008c90:	40d9      	lsrs	r1, r3
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	400b      	ands	r3, r1
 8008c96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8008ca2:	e014      	b.n	8008cce <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cb0:	43db      	mvns	r3, r3
 8008cb2:	401a      	ands	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f003 0318 	and.w	r3, r3, #24
 8008cba:	4909      	ldr	r1, [pc, #36]	@ (8008ce0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008cbc:	40d9      	lsrs	r1, r3
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	400b      	ands	r3, r1
 8008cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8008cce:	bf00      	nop
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	58026000 	.word	0x58026000
 8008ce0:	000fffff 	.word	0x000fffff

08008ce4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f003 031f 	and.w	r3, r3, #31
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	4b04      	ldr	r3, [pc, #16]	@ (8008d3c <LL_ADC_DisableDeepPowerDown+0x20>)
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	6093      	str	r3, [r2, #8]
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	5fffffc0 	.word	0x5fffffc0

08008d40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d54:	d101      	bne.n	8008d5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008d56:	2301      	movs	r3, #1
 8008d58:	e000      	b.n	8008d5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	4b05      	ldr	r3, [pc, #20]	@ (8008d8c <LL_ADC_EnableInternalRegulator+0x24>)
 8008d76:	4013      	ands	r3, r2
 8008d78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	6fffffc0 	.word	0x6fffffc0

08008d90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008da0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008da4:	d101      	bne.n	8008daa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e000      	b.n	8008dac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689a      	ldr	r2, [r3, #8]
 8008dc4:	4b05      	ldr	r3, [pc, #20]	@ (8008ddc <LL_ADC_Enable+0x24>)
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	f043 0201 	orr.w	r2, r3, #1
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	7fffffc0 	.word	0x7fffffc0

08008de0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d101      	bne.n	8008df8 <LL_ADC_IsEnabled+0x18>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e000      	b.n	8008dfa <LL_ADC_IsEnabled+0x1a>
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
	...

08008e08 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689a      	ldr	r2, [r3, #8]
 8008e14:	4b05      	ldr	r3, [pc, #20]	@ (8008e2c <LL_ADC_REG_StartConversion+0x24>)
 8008e16:	4013      	ands	r3, r2
 8008e18:	f043 0204 	orr.w	r2, r3, #4
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	7fffffc0 	.word	0x7fffffc0

08008e30 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b04      	cmp	r3, #4
 8008e42:	d101      	bne.n	8008e48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008e44:	2301      	movs	r3, #1
 8008e46:	e000      	b.n	8008e4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b083      	sub	sp, #12
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f003 0308 	and.w	r3, r3, #8
 8008e66:	2b08      	cmp	r3, #8
 8008e68:	d101      	bne.n	8008e6e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e000      	b.n	8008e70 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008e7c:	b590      	push	{r4, r7, lr}
 8008e7e:	b089      	sub	sp, #36	@ 0x24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e1ee      	b.n	8009274 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d109      	bne.n	8008eb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f7fa fc17 	bl	80036d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff ff3f 	bl	8008d40 <LL_ADC_IsDeepPowerDownEnabled>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d004      	beq.n	8008ed2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7ff ff25 	bl	8008d1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff ff5a 	bl	8008d90 <LL_ADC_IsInternalRegulatorEnabled>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d114      	bne.n	8008f0c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff ff3e 	bl	8008d68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008eec:	4b8e      	ldr	r3, [pc, #568]	@ (8009128 <HAL_ADC_Init+0x2ac>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	099b      	lsrs	r3, r3, #6
 8008ef2:	4a8e      	ldr	r2, [pc, #568]	@ (800912c <HAL_ADC_Init+0x2b0>)
 8008ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef8:	099b      	lsrs	r3, r3, #6
 8008efa:	3301      	adds	r3, #1
 8008efc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008efe:	e002      	b.n	8008f06 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	3b01      	subs	r3, #1
 8008f04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1f9      	bne.n	8008f00 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7ff ff3d 	bl	8008d90 <LL_ADC_IsInternalRegulatorEnabled>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10d      	bne.n	8008f38 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f20:	f043 0210 	orr.w	r2, r3, #16
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f2c:	f043 0201 	orr.w	r2, r3, #1
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7ff ff77 	bl	8008e30 <LL_ADC_REG_IsConversionOngoing>
 8008f42:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f48:	f003 0310 	and.w	r3, r3, #16
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f040 8188 	bne.w	8009262 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f040 8184 	bne.w	8009262 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f5e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8008f62:	f043 0202 	orr.w	r2, r3, #2
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7ff ff36 	bl	8008de0 <LL_ADC_IsEnabled>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d136      	bne.n	8008fe8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a6c      	ldr	r2, [pc, #432]	@ (8009130 <HAL_ADC_Init+0x2b4>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d004      	beq.n	8008f8e <HAL_ADC_Init+0x112>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a6a      	ldr	r2, [pc, #424]	@ (8009134 <HAL_ADC_Init+0x2b8>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d10e      	bne.n	8008fac <HAL_ADC_Init+0x130>
 8008f8e:	4868      	ldr	r0, [pc, #416]	@ (8009130 <HAL_ADC_Init+0x2b4>)
 8008f90:	f7ff ff26 	bl	8008de0 <LL_ADC_IsEnabled>
 8008f94:	4604      	mov	r4, r0
 8008f96:	4867      	ldr	r0, [pc, #412]	@ (8009134 <HAL_ADC_Init+0x2b8>)
 8008f98:	f7ff ff22 	bl	8008de0 <LL_ADC_IsEnabled>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	4323      	orrs	r3, r4
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	bf0c      	ite	eq
 8008fa4:	2301      	moveq	r3, #1
 8008fa6:	2300      	movne	r3, #0
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	e008      	b.n	8008fbe <HAL_ADC_Init+0x142>
 8008fac:	4862      	ldr	r0, [pc, #392]	@ (8009138 <HAL_ADC_Init+0x2bc>)
 8008fae:	f7ff ff17 	bl	8008de0 <LL_ADC_IsEnabled>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	bf0c      	ite	eq
 8008fb8:	2301      	moveq	r3, #1
 8008fba:	2300      	movne	r3, #0
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d012      	beq.n	8008fe8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a5a      	ldr	r2, [pc, #360]	@ (8009130 <HAL_ADC_Init+0x2b4>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d004      	beq.n	8008fd6 <HAL_ADC_Init+0x15a>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a58      	ldr	r2, [pc, #352]	@ (8009134 <HAL_ADC_Init+0x2b8>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d101      	bne.n	8008fda <HAL_ADC_Init+0x15e>
 8008fd6:	4a59      	ldr	r2, [pc, #356]	@ (800913c <HAL_ADC_Init+0x2c0>)
 8008fd8:	e000      	b.n	8008fdc <HAL_ADC_Init+0x160>
 8008fda:	4a59      	ldr	r2, [pc, #356]	@ (8009140 <HAL_ADC_Init+0x2c4>)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f7ff fc24 	bl	8008830 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a52      	ldr	r2, [pc, #328]	@ (8009138 <HAL_ADC_Init+0x2bc>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d129      	bne.n	8009046 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	7e5b      	ldrb	r3, [r3, #25]
 8008ff6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008ffc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8009002:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	2b08      	cmp	r3, #8
 800900a:	d013      	beq.n	8009034 <HAL_ADC_Init+0x1b8>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	2b0c      	cmp	r3, #12
 8009012:	d00d      	beq.n	8009030 <HAL_ADC_Init+0x1b4>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	2b1c      	cmp	r3, #28
 800901a:	d007      	beq.n	800902c <HAL_ADC_Init+0x1b0>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	2b18      	cmp	r3, #24
 8009022:	d101      	bne.n	8009028 <HAL_ADC_Init+0x1ac>
 8009024:	2318      	movs	r3, #24
 8009026:	e006      	b.n	8009036 <HAL_ADC_Init+0x1ba>
 8009028:	2300      	movs	r3, #0
 800902a:	e004      	b.n	8009036 <HAL_ADC_Init+0x1ba>
 800902c:	2310      	movs	r3, #16
 800902e:	e002      	b.n	8009036 <HAL_ADC_Init+0x1ba>
 8009030:	2308      	movs	r3, #8
 8009032:	e000      	b.n	8009036 <HAL_ADC_Init+0x1ba>
 8009034:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8009036:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800903e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009040:	4313      	orrs	r3, r2
 8009042:	61bb      	str	r3, [r7, #24]
 8009044:	e00e      	b.n	8009064 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	7e5b      	ldrb	r3, [r3, #25]
 800904a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009050:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8009056:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800905e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009060:	4313      	orrs	r3, r2
 8009062:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d106      	bne.n	800907c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009072:	3b01      	subs	r3, #1
 8009074:	045b      	lsls	r3, r3, #17
 8009076:	69ba      	ldr	r2, [r7, #24]
 8009078:	4313      	orrs	r3, r2
 800907a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009080:	2b00      	cmp	r3, #0
 8009082:	d009      	beq.n	8009098 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009088:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009090:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009092:	69ba      	ldr	r2, [r7, #24]
 8009094:	4313      	orrs	r3, r2
 8009096:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a26      	ldr	r2, [pc, #152]	@ (8009138 <HAL_ADC_Init+0x2bc>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d115      	bne.n	80090ce <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68da      	ldr	r2, [r3, #12]
 80090a8:	4b26      	ldr	r3, [pc, #152]	@ (8009144 <HAL_ADC_Init+0x2c8>)
 80090aa:	4013      	ands	r3, r2
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	6812      	ldr	r2, [r2, #0]
 80090b0:	69b9      	ldr	r1, [r7, #24]
 80090b2:	430b      	orrs	r3, r1
 80090b4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	611a      	str	r2, [r3, #16]
 80090cc:	e009      	b.n	80090e2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	4b1c      	ldr	r3, [pc, #112]	@ (8009148 <HAL_ADC_Init+0x2cc>)
 80090d6:	4013      	ands	r3, r2
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	6812      	ldr	r2, [r2, #0]
 80090dc:	69b9      	ldr	r1, [r7, #24]
 80090de:	430b      	orrs	r3, r1
 80090e0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff fea2 	bl	8008e30 <LL_ADC_REG_IsConversionOngoing>
 80090ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7ff feaf 	bl	8008e56 <LL_ADC_INJ_IsConversionOngoing>
 80090f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f040 808e 	bne.w	800921e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	f040 808a 	bne.w	800921e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a0a      	ldr	r2, [pc, #40]	@ (8009138 <HAL_ADC_Init+0x2bc>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d11b      	bne.n	800914c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	7e1b      	ldrb	r3, [r3, #24]
 8009118:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009120:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8009122:	4313      	orrs	r3, r2
 8009124:	61bb      	str	r3, [r7, #24]
 8009126:	e018      	b.n	800915a <HAL_ADC_Init+0x2de>
 8009128:	24000004 	.word	0x24000004
 800912c:	053e2d63 	.word	0x053e2d63
 8009130:	40022000 	.word	0x40022000
 8009134:	40022100 	.word	0x40022100
 8009138:	58026000 	.word	0x58026000
 800913c:	40022300 	.word	0x40022300
 8009140:	58026300 	.word	0x58026300
 8009144:	fff04007 	.word	0xfff04007
 8009148:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	7e1b      	ldrb	r3, [r3, #24]
 8009150:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8009156:	4313      	orrs	r3, r2
 8009158:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	4b46      	ldr	r3, [pc, #280]	@ (800927c <HAL_ADC_Init+0x400>)
 8009162:	4013      	ands	r3, r2
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	6812      	ldr	r2, [r2, #0]
 8009168:	69b9      	ldr	r1, [r7, #24]
 800916a:	430b      	orrs	r3, r1
 800916c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009174:	2b01      	cmp	r3, #1
 8009176:	d137      	bne.n	80091e8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800917c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a3f      	ldr	r2, [pc, #252]	@ (8009280 <HAL_ADC_Init+0x404>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d116      	bne.n	80091b6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	691a      	ldr	r2, [r3, #16]
 800918e:	4b3d      	ldr	r3, [pc, #244]	@ (8009284 <HAL_ADC_Init+0x408>)
 8009190:	4013      	ands	r3, r2
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800919a:	4311      	orrs	r1, r2
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80091a0:	4311      	orrs	r1, r2
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80091a6:	430a      	orrs	r2, r1
 80091a8:	431a      	orrs	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f042 0201 	orr.w	r2, r2, #1
 80091b2:	611a      	str	r2, [r3, #16]
 80091b4:	e020      	b.n	80091f8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	691a      	ldr	r2, [r3, #16]
 80091bc:	4b32      	ldr	r3, [pc, #200]	@ (8009288 <HAL_ADC_Init+0x40c>)
 80091be:	4013      	ands	r3, r2
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80091c4:	3a01      	subs	r2, #1
 80091c6:	0411      	lsls	r1, r2, #16
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80091cc:	4311      	orrs	r1, r2
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80091d2:	4311      	orrs	r1, r2
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80091d8:	430a      	orrs	r2, r1
 80091da:	431a      	orrs	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f042 0201 	orr.w	r2, r2, #1
 80091e4:	611a      	str	r2, [r3, #16]
 80091e6:	e007      	b.n	80091f8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	691a      	ldr	r2, [r3, #16]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f022 0201 	bic.w	r2, r2, #1
 80091f6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	430a      	orrs	r2, r1
 800920c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a1b      	ldr	r2, [pc, #108]	@ (8009280 <HAL_ADC_Init+0x404>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d002      	beq.n	800921e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f001 f967 	bl	800a4ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d10c      	bne.n	8009240 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922c:	f023 010f 	bic.w	r1, r3, #15
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	69db      	ldr	r3, [r3, #28]
 8009234:	1e5a      	subs	r2, r3, #1
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	631a      	str	r2, [r3, #48]	@ 0x30
 800923e:	e007      	b.n	8009250 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 020f 	bic.w	r2, r2, #15
 800924e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009254:	f023 0303 	bic.w	r3, r3, #3
 8009258:	f043 0201 	orr.w	r2, r3, #1
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	661a      	str	r2, [r3, #96]	@ 0x60
 8009260:	e007      	b.n	8009272 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009266:	f043 0210 	orr.w	r2, r3, #16
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009272:	7ffb      	ldrb	r3, [r7, #31]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3724      	adds	r7, #36	@ 0x24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd90      	pop	{r4, r7, pc}
 800927c:	ffffbffc 	.word	0xffffbffc
 8009280:	58026000 	.word	0x58026000
 8009284:	fc00f81f 	.word	0xfc00f81f
 8009288:	fc00f81e 	.word	0xfc00f81e

0800928c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a60      	ldr	r2, [pc, #384]	@ (8009420 <HAL_ADC_Start_DMA+0x194>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d004      	beq.n	80092ac <HAL_ADC_Start_DMA+0x20>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a5f      	ldr	r2, [pc, #380]	@ (8009424 <HAL_ADC_Start_DMA+0x198>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d101      	bne.n	80092b0 <HAL_ADC_Start_DMA+0x24>
 80092ac:	4b5e      	ldr	r3, [pc, #376]	@ (8009428 <HAL_ADC_Start_DMA+0x19c>)
 80092ae:	e000      	b.n	80092b2 <HAL_ADC_Start_DMA+0x26>
 80092b0:	4b5e      	ldr	r3, [pc, #376]	@ (800942c <HAL_ADC_Start_DMA+0x1a0>)
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7ff fd16 	bl	8008ce4 <LL_ADC_GetMultimode>
 80092b8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4618      	mov	r0, r3
 80092c0:	f7ff fdb6 	bl	8008e30 <LL_ADC_REG_IsConversionOngoing>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f040 80a2 	bne.w	8009410 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d101      	bne.n	80092da <HAL_ADC_Start_DMA+0x4e>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e09d      	b.n	8009416 <HAL_ADC_Start_DMA+0x18a>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d006      	beq.n	80092f6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	2b05      	cmp	r3, #5
 80092ec:	d003      	beq.n	80092f6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	2b09      	cmp	r3, #9
 80092f2:	f040 8086 	bne.w	8009402 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 ffda 	bl	800a2b0 <ADC_Enable>
 80092fc:	4603      	mov	r3, r0
 80092fe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009300:	7dfb      	ldrb	r3, [r7, #23]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d178      	bne.n	80093f8 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800930a:	4b49      	ldr	r3, [pc, #292]	@ (8009430 <HAL_ADC_Start_DMA+0x1a4>)
 800930c:	4013      	ands	r3, r2
 800930e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a42      	ldr	r2, [pc, #264]	@ (8009424 <HAL_ADC_Start_DMA+0x198>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d002      	beq.n	8009326 <HAL_ADC_Start_DMA+0x9a>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	e000      	b.n	8009328 <HAL_ADC_Start_DMA+0x9c>
 8009326:	4b3e      	ldr	r3, [pc, #248]	@ (8009420 <HAL_ADC_Start_DMA+0x194>)
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	6812      	ldr	r2, [r2, #0]
 800932c:	4293      	cmp	r3, r2
 800932e:	d002      	beq.n	8009336 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d105      	bne.n	8009342 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800933a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009346:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800934a:	2b00      	cmp	r3, #0
 800934c:	d006      	beq.n	800935c <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009352:	f023 0206 	bic.w	r2, r3, #6
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	665a      	str	r2, [r3, #100]	@ 0x64
 800935a:	e002      	b.n	8009362 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009366:	4a33      	ldr	r2, [pc, #204]	@ (8009434 <HAL_ADC_Start_DMA+0x1a8>)
 8009368:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800936e:	4a32      	ldr	r2, [pc, #200]	@ (8009438 <HAL_ADC_Start_DMA+0x1ac>)
 8009370:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009376:	4a31      	ldr	r2, [pc, #196]	@ (800943c <HAL_ADC_Start_DMA+0x1b0>)
 8009378:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	221c      	movs	r2, #28
 8009380:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f042 0210 	orr.w	r2, r2, #16
 8009398:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a28      	ldr	r2, [pc, #160]	@ (8009440 <HAL_ADC_Start_DMA+0x1b4>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d10f      	bne.n	80093c4 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	4619      	mov	r1, r3
 80093b2:	4610      	mov	r0, r2
 80093b4:	f7ff fbfe 	bl	8008bb4 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4618      	mov	r0, r3
 80093be:	f7ff fbe9 	bl	8008b94 <LL_ADC_EnableDMAReq>
 80093c2:	e007      	b.n	80093d4 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f7ff fbcd 	bl	8008b6e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3340      	adds	r3, #64	@ 0x40
 80093de:	4619      	mov	r1, r3
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f001 fe82 	bl	800b0ec <HAL_DMA_Start_IT>
 80093e8:	4603      	mov	r3, r0
 80093ea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7ff fd09 	bl	8008e08 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80093f6:	e00d      	b.n	8009414 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8009400:	e008      	b.n	8009414 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800940e:	e001      	b.n	8009414 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009410:	2302      	movs	r3, #2
 8009412:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009414:	7dfb      	ldrb	r3, [r7, #23]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	40022000 	.word	0x40022000
 8009424:	40022100 	.word	0x40022100
 8009428:	40022300 	.word	0x40022300
 800942c:	58026300 	.word	0x58026300
 8009430:	fffff0fe 	.word	0xfffff0fe
 8009434:	0800a3c5 	.word	0x0800a3c5
 8009438:	0800a49d 	.word	0x0800a49d
 800943c:	0800a4b9 	.word	0x0800a4b9
 8009440:	58026000 	.word	0x58026000

08009444 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08a      	sub	sp, #40	@ 0x28
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800944c:	2300      	movs	r3, #0
 800944e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a87      	ldr	r2, [pc, #540]	@ (8009684 <HAL_ADC_IRQHandler+0x240>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d004      	beq.n	8009474 <HAL_ADC_IRQHandler+0x30>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a86      	ldr	r2, [pc, #536]	@ (8009688 <HAL_ADC_IRQHandler+0x244>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d101      	bne.n	8009478 <HAL_ADC_IRQHandler+0x34>
 8009474:	4b85      	ldr	r3, [pc, #532]	@ (800968c <HAL_ADC_IRQHandler+0x248>)
 8009476:	e000      	b.n	800947a <HAL_ADC_IRQHandler+0x36>
 8009478:	4b85      	ldr	r3, [pc, #532]	@ (8009690 <HAL_ADC_IRQHandler+0x24c>)
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff fc32 	bl	8008ce4 <LL_ADC_GetMultimode>
 8009480:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	f003 0302 	and.w	r3, r3, #2
 8009488:	2b00      	cmp	r3, #0
 800948a:	d017      	beq.n	80094bc <HAL_ADC_IRQHandler+0x78>
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d012      	beq.n	80094bc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800949a:	f003 0310 	and.w	r3, r3, #16
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d105      	bne.n	80094ae <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094a6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f001 f932 	bl	800a718 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2202      	movs	r2, #2
 80094ba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	f003 0304 	and.w	r3, r3, #4
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d004      	beq.n	80094d0 <HAL_ADC_IRQHandler+0x8c>
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	f003 0304 	and.w	r3, r3, #4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10a      	bne.n	80094e6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 8083 	beq.w	80095e2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	f003 0308 	and.w	r3, r3, #8
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d07d      	beq.n	80095e2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094ea:	f003 0310 	and.w	r3, r3, #16
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d105      	bne.n	80094fe <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff faf4 	bl	8008af0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d062      	beq.n	80095d4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a5d      	ldr	r2, [pc, #372]	@ (8009688 <HAL_ADC_IRQHandler+0x244>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d002      	beq.n	800951e <HAL_ADC_IRQHandler+0xda>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	e000      	b.n	8009520 <HAL_ADC_IRQHandler+0xdc>
 800951e:	4b59      	ldr	r3, [pc, #356]	@ (8009684 <HAL_ADC_IRQHandler+0x240>)
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	6812      	ldr	r2, [r2, #0]
 8009524:	4293      	cmp	r3, r2
 8009526:	d008      	beq.n	800953a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d005      	beq.n	800953a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b05      	cmp	r3, #5
 8009532:	d002      	beq.n	800953a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	2b09      	cmp	r3, #9
 8009538:	d104      	bne.n	8009544 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	623b      	str	r3, [r7, #32]
 8009542:	e00c      	b.n	800955e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a4f      	ldr	r2, [pc, #316]	@ (8009688 <HAL_ADC_IRQHandler+0x244>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d002      	beq.n	8009554 <HAL_ADC_IRQHandler+0x110>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	e000      	b.n	8009556 <HAL_ADC_IRQHandler+0x112>
 8009554:	4b4b      	ldr	r3, [pc, #300]	@ (8009684 <HAL_ADC_IRQHandler+0x240>)
 8009556:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d135      	bne.n	80095d4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0308 	and.w	r3, r3, #8
 8009572:	2b08      	cmp	r3, #8
 8009574:	d12e      	bne.n	80095d4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4618      	mov	r0, r3
 800957c:	f7ff fc58 	bl	8008e30 <LL_ADC_REG_IsConversionOngoing>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d11a      	bne.n	80095bc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f022 020c 	bic.w	r2, r2, #12
 8009594:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800959a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d112      	bne.n	80095d4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095b2:	f043 0201 	orr.w	r2, r3, #1
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	661a      	str	r2, [r3, #96]	@ 0x60
 80095ba:	e00b      	b.n	80095d4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095c0:	f043 0210 	orr.w	r2, r3, #16
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095cc:	f043 0201 	orr.w	r2, r3, #1
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f96f 	bl	80098b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	220c      	movs	r2, #12
 80095e0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	f003 0320 	and.w	r3, r3, #32
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d004      	beq.n	80095f6 <HAL_ADC_IRQHandler+0x1b2>
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10b      	bne.n	800960e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f000 80a0 	beq.w	8009742 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 809a 	beq.w	8009742 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009612:	f003 0310 	and.w	r3, r3, #16
 8009616:	2b00      	cmp	r3, #0
 8009618:	d105      	bne.n	8009626 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800961e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff fadc 	bl	8008be8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009630:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff fa5a 	bl	8008af0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800963c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a11      	ldr	r2, [pc, #68]	@ (8009688 <HAL_ADC_IRQHandler+0x244>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d002      	beq.n	800964e <HAL_ADC_IRQHandler+0x20a>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	e000      	b.n	8009650 <HAL_ADC_IRQHandler+0x20c>
 800964e:	4b0d      	ldr	r3, [pc, #52]	@ (8009684 <HAL_ADC_IRQHandler+0x240>)
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	6812      	ldr	r2, [r2, #0]
 8009654:	4293      	cmp	r3, r2
 8009656:	d008      	beq.n	800966a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d005      	beq.n	800966a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b06      	cmp	r3, #6
 8009662:	d002      	beq.n	800966a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	2b07      	cmp	r3, #7
 8009668:	d104      	bne.n	8009674 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	623b      	str	r3, [r7, #32]
 8009672:	e014      	b.n	800969e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a03      	ldr	r2, [pc, #12]	@ (8009688 <HAL_ADC_IRQHandler+0x244>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d00a      	beq.n	8009694 <HAL_ADC_IRQHandler+0x250>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	e008      	b.n	8009696 <HAL_ADC_IRQHandler+0x252>
 8009684:	40022000 	.word	0x40022000
 8009688:	40022100 	.word	0x40022100
 800968c:	40022300 	.word	0x40022300
 8009690:	58026300 	.word	0x58026300
 8009694:	4b84      	ldr	r3, [pc, #528]	@ (80098a8 <HAL_ADC_IRQHandler+0x464>)
 8009696:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d047      	beq.n	8009734 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d007      	beq.n	80096be <HAL_ADC_IRQHandler+0x27a>
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d03f      	beq.n	8009734 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d13a      	bne.n	8009734 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c8:	2b40      	cmp	r3, #64	@ 0x40
 80096ca:	d133      	bne.n	8009734 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d12e      	bne.n	8009734 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4618      	mov	r0, r3
 80096dc:	f7ff fbbb 	bl	8008e56 <LL_ADC_INJ_IsConversionOngoing>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d11a      	bne.n	800971c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80096f4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800970a:	2b00      	cmp	r3, #0
 800970c:	d112      	bne.n	8009734 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009712:	f043 0201 	orr.w	r2, r3, #1
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	661a      	str	r2, [r3, #96]	@ 0x60
 800971a:	e00b      	b.n	8009734 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009720:	f043 0210 	orr.w	r2, r3, #16
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800972c:	f043 0201 	orr.w	r2, r3, #1
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 ffc7 	bl	800a6c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2260      	movs	r2, #96	@ 0x60
 8009740:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009748:	2b00      	cmp	r3, #0
 800974a:	d011      	beq.n	8009770 <HAL_ADC_IRQHandler+0x32c>
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00c      	beq.n	8009770 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800975a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f8bc 	bl	80098e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2280      	movs	r2, #128	@ 0x80
 800976e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009776:	2b00      	cmp	r3, #0
 8009778:	d012      	beq.n	80097a0 <HAL_ADC_IRQHandler+0x35c>
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00d      	beq.n	80097a0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009788:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 ffad 	bl	800a6f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800979e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d012      	beq.n	80097d0 <HAL_ADC_IRQHandler+0x38c>
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00d      	beq.n	80097d0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 ff9f 	bl	800a704 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	f003 0310 	and.w	r3, r3, #16
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d043      	beq.n	8009862 <HAL_ADC_IRQHandler+0x41e>
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d03e      	beq.n	8009862 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d102      	bne.n	80097f2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80097ec:	2301      	movs	r3, #1
 80097ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80097f0:	e021      	b.n	8009836 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d015      	beq.n	8009824 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a2a      	ldr	r2, [pc, #168]	@ (80098a8 <HAL_ADC_IRQHandler+0x464>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d004      	beq.n	800980c <HAL_ADC_IRQHandler+0x3c8>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a29      	ldr	r2, [pc, #164]	@ (80098ac <HAL_ADC_IRQHandler+0x468>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d101      	bne.n	8009810 <HAL_ADC_IRQHandler+0x3cc>
 800980c:	4b28      	ldr	r3, [pc, #160]	@ (80098b0 <HAL_ADC_IRQHandler+0x46c>)
 800980e:	e000      	b.n	8009812 <HAL_ADC_IRQHandler+0x3ce>
 8009810:	4b28      	ldr	r3, [pc, #160]	@ (80098b4 <HAL_ADC_IRQHandler+0x470>)
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff fa74 	bl	8008d00 <LL_ADC_GetMultiDMATransfer>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00b      	beq.n	8009836 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800981e:	2301      	movs	r3, #1
 8009820:	627b      	str	r3, [r7, #36]	@ 0x24
 8009822:	e008      	b.n	8009836 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	f003 0303 	and.w	r3, r3, #3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8009832:	2301      	movs	r3, #1
 8009834:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8009836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009838:	2b01      	cmp	r3, #1
 800983a:	d10e      	bne.n	800985a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009840:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800984c:	f043 0202 	orr.w	r2, r3, #2
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f84d 	bl	80098f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2210      	movs	r2, #16
 8009860:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009868:	2b00      	cmp	r3, #0
 800986a:	d018      	beq.n	800989e <HAL_ADC_IRQHandler+0x45a>
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009872:	2b00      	cmp	r3, #0
 8009874:	d013      	beq.n	800989e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800987a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009886:	f043 0208 	orr.w	r2, r3, #8
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009896:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 ff1f 	bl	800a6dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800989e:	bf00      	nop
 80098a0:	3728      	adds	r7, #40	@ 0x28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	40022000 	.word	0x40022000
 80098ac:	40022100 	.word	0x40022100
 80098b0:	40022300 	.word	0x40022300
 80098b4:	58026300 	.word	0x58026300

080098b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009908:	b590      	push	{r4, r7, lr}
 800990a:	b0a5      	sub	sp, #148	@ 0x94
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009922:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	4aa4      	ldr	r2, [pc, #656]	@ (8009bbc <HAL_ADC_ConfigChannel+0x2b4>)
 800992a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009932:	2b01      	cmp	r3, #1
 8009934:	d102      	bne.n	800993c <HAL_ADC_ConfigChannel+0x34>
 8009936:	2302      	movs	r3, #2
 8009938:	f000 bca2 	b.w	800a280 <HAL_ADC_ConfigChannel+0x978>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fa71 	bl	8008e30 <LL_ADC_REG_IsConversionOngoing>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	f040 8486 	bne.w	800a262 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	db31      	blt.n	80099c2 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a97      	ldr	r2, [pc, #604]	@ (8009bc0 <HAL_ADC_ConfigChannel+0x2b8>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d02c      	beq.n	80099c2 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009970:	2b00      	cmp	r3, #0
 8009972:	d108      	bne.n	8009986 <HAL_ADC_ConfigChannel+0x7e>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	0e9b      	lsrs	r3, r3, #26
 800997a:	f003 031f 	and.w	r3, r3, #31
 800997e:	2201      	movs	r2, #1
 8009980:	fa02 f303 	lsl.w	r3, r2, r3
 8009984:	e016      	b.n	80099b4 <HAL_ADC_ConfigChannel+0xac>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800998c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800998e:	fa93 f3a3 	rbit	r3, r3
 8009992:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8009994:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009996:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8009998:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800999e:	2320      	movs	r3, #32
 80099a0:	e003      	b.n	80099aa <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 80099a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099a4:	fab3 f383 	clz	r3, r3
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	f003 031f 	and.w	r3, r3, #31
 80099ae:	2201      	movs	r2, #1
 80099b0:	fa02 f303 	lsl.w	r3, r2, r3
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	6812      	ldr	r2, [r2, #0]
 80099b8:	69d1      	ldr	r1, [r2, #28]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	6812      	ldr	r2, [r2, #0]
 80099be:	430b      	orrs	r3, r1
 80099c0:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6818      	ldr	r0, [r3, #0]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	6859      	ldr	r1, [r3, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	f7ff f8a1 	bl	8008b16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff fa29 	bl	8008e30 <LL_ADC_REG_IsConversionOngoing>
 80099de:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7ff fa35 	bl	8008e56 <LL_ADC_INJ_IsConversionOngoing>
 80099ec:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80099f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f040 824a 	bne.w	8009e8e <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80099fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f040 8245 	bne.w	8009e8e <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	6819      	ldr	r1, [r3, #0]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	461a      	mov	r2, r3
 8009a12:	f7ff f8fc 	bl	8008c0e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a69      	ldr	r2, [pc, #420]	@ (8009bc0 <HAL_ADC_ConfigChannel+0x2b8>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d10d      	bne.n	8009a3c <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	695a      	ldr	r2, [r3, #20]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	08db      	lsrs	r3, r3, #3
 8009a2c:	f003 0303 	and.w	r3, r3, #3
 8009a30:	005b      	lsls	r3, r3, #1
 8009a32:	fa02 f303 	lsl.w	r3, r2, r3
 8009a36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a3a:	e032      	b.n	8009aa2 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009a3c:	4b61      	ldr	r3, [pc, #388]	@ (8009bc4 <HAL_ADC_ConfigChannel+0x2bc>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009a44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a48:	d10b      	bne.n	8009a62 <HAL_ADC_ConfigChannel+0x15a>
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	695a      	ldr	r2, [r3, #20]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	089b      	lsrs	r3, r3, #2
 8009a56:	f003 0307 	and.w	r3, r3, #7
 8009a5a:	005b      	lsls	r3, r3, #1
 8009a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a60:	e01d      	b.n	8009a9e <HAL_ADC_ConfigChannel+0x196>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	f003 0310 	and.w	r3, r3, #16
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10b      	bne.n	8009a88 <HAL_ADC_ConfigChannel+0x180>
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	695a      	ldr	r2, [r3, #20]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	089b      	lsrs	r3, r3, #2
 8009a7c:	f003 0307 	and.w	r3, r3, #7
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	fa02 f303 	lsl.w	r3, r2, r3
 8009a86:	e00a      	b.n	8009a9e <HAL_ADC_ConfigChannel+0x196>
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	695a      	ldr	r2, [r3, #20]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	089b      	lsrs	r3, r3, #2
 8009a94:	f003 0304 	and.w	r3, r3, #4
 8009a98:	005b      	lsls	r3, r3, #1
 8009a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d048      	beq.n	8009b3c <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6818      	ldr	r0, [r3, #0]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	6919      	ldr	r1, [r3, #16]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009aba:	f7fe ff27 	bl	800890c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8009bc0 <HAL_ADC_ConfigChannel+0x2b8>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d119      	bne.n	8009afc <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6818      	ldr	r0, [r3, #0]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	6919      	ldr	r1, [r3, #16]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	f7fe ffbf 	bl	8008a58 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6818      	ldr	r0, [r3, #0]
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	6919      	ldr	r1, [r3, #16]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d102      	bne.n	8009af2 <HAL_ADC_ConfigChannel+0x1ea>
 8009aec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009af0:	e000      	b.n	8009af4 <HAL_ADC_ConfigChannel+0x1ec>
 8009af2:	2300      	movs	r3, #0
 8009af4:	461a      	mov	r2, r3
 8009af6:	f7fe ff8d 	bl	8008a14 <LL_ADC_SetOffsetSaturation>
 8009afa:	e1c8      	b.n	8009e8e <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	6919      	ldr	r1, [r3, #16]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d102      	bne.n	8009b14 <HAL_ADC_ConfigChannel+0x20c>
 8009b0e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009b12:	e000      	b.n	8009b16 <HAL_ADC_ConfigChannel+0x20e>
 8009b14:	2300      	movs	r3, #0
 8009b16:	461a      	mov	r2, r3
 8009b18:	f7fe ff5a 	bl	80089d0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6818      	ldr	r0, [r3, #0]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	6919      	ldr	r1, [r3, #16]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	7e1b      	ldrb	r3, [r3, #24]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d102      	bne.n	8009b32 <HAL_ADC_ConfigChannel+0x22a>
 8009b2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009b30:	e000      	b.n	8009b34 <HAL_ADC_ConfigChannel+0x22c>
 8009b32:	2300      	movs	r3, #0
 8009b34:	461a      	mov	r2, r3
 8009b36:	f7fe ff31 	bl	800899c <LL_ADC_SetDataRightShift>
 8009b3a:	e1a8      	b.n	8009e8e <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a1f      	ldr	r2, [pc, #124]	@ (8009bc0 <HAL_ADC_ConfigChannel+0x2b8>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	f040 815b 	bne.w	8009dfe <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe ff0e 	bl	8008970 <LL_ADC_GetOffsetChannel>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <HAL_ADC_ConfigChannel+0x26c>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2100      	movs	r1, #0
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fe ff03 	bl	8008970 <LL_ADC_GetOffsetChannel>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	0e9b      	lsrs	r3, r3, #26
 8009b6e:	f003 021f 	and.w	r2, r3, #31
 8009b72:	e017      	b.n	8009ba4 <HAL_ADC_ConfigChannel+0x29c>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe fef8 	bl	8008970 <LL_ADC_GetOffsetChannel>
 8009b80:	4603      	mov	r3, r0
 8009b82:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b86:	fa93 f3a3 	rbit	r3, r3
 8009b8a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8009b8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8009b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8009b96:	2320      	movs	r3, #32
 8009b98:	e003      	b.n	8009ba2 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8009b9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b9c:	fab3 f383 	clz	r3, r3
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10b      	bne.n	8009bc8 <HAL_ADC_ConfigChannel+0x2c0>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	0e9b      	lsrs	r3, r3, #26
 8009bb6:	f003 031f 	and.w	r3, r3, #31
 8009bba:	e017      	b.n	8009bec <HAL_ADC_ConfigChannel+0x2e4>
 8009bbc:	47ff0000 	.word	0x47ff0000
 8009bc0:	58026000 	.word	0x58026000
 8009bc4:	5c001000 	.word	0x5c001000
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bd0:	fa93 f3a3 	rbit	r3, r3
 8009bd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8009bd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009bd8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8009bda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d101      	bne.n	8009be4 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8009be0:	2320      	movs	r3, #32
 8009be2:	e003      	b.n	8009bec <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8009be4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009be6:	fab3 f383 	clz	r3, r3
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d106      	bne.n	8009bfe <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fe ff4f 	bl	8008a9c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2101      	movs	r1, #1
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fe feb3 	bl	8008970 <LL_ADC_GetOffsetChannel>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10a      	bne.n	8009c2a <HAL_ADC_ConfigChannel+0x322>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2101      	movs	r1, #1
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fe fea8 	bl	8008970 <LL_ADC_GetOffsetChannel>
 8009c20:	4603      	mov	r3, r0
 8009c22:	0e9b      	lsrs	r3, r3, #26
 8009c24:	f003 021f 	and.w	r2, r3, #31
 8009c28:	e017      	b.n	8009c5a <HAL_ADC_ConfigChannel+0x352>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2101      	movs	r1, #1
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7fe fe9d 	bl	8008970 <LL_ADC_GetOffsetChannel>
 8009c36:	4603      	mov	r3, r0
 8009c38:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c3c:	fa93 f3a3 	rbit	r3, r3
 8009c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8009c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c44:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8009c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d101      	bne.n	8009c50 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8009c4c:	2320      	movs	r3, #32
 8009c4e:	e003      	b.n	8009c58 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8009c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c52:	fab3 f383 	clz	r3, r3
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d105      	bne.n	8009c72 <HAL_ADC_ConfigChannel+0x36a>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	0e9b      	lsrs	r3, r3, #26
 8009c6c:	f003 031f 	and.w	r3, r3, #31
 8009c70:	e011      	b.n	8009c96 <HAL_ADC_ConfigChannel+0x38e>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c7a:	fa93 f3a3 	rbit	r3, r3
 8009c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8009c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c82:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8009c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8009c8a:	2320      	movs	r3, #32
 8009c8c:	e003      	b.n	8009c96 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8009c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c90:	fab3 f383 	clz	r3, r3
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d106      	bne.n	8009ca8 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe fefa 	bl	8008a9c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2102      	movs	r1, #2
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fe5e 	bl	8008970 <LL_ADC_GetOffsetChannel>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10a      	bne.n	8009cd4 <HAL_ADC_ConfigChannel+0x3cc>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2102      	movs	r1, #2
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fe fe53 	bl	8008970 <LL_ADC_GetOffsetChannel>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	0e9b      	lsrs	r3, r3, #26
 8009cce:	f003 021f 	and.w	r2, r3, #31
 8009cd2:	e017      	b.n	8009d04 <HAL_ADC_ConfigChannel+0x3fc>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2102      	movs	r1, #2
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fe fe48 	bl	8008970 <LL_ADC_GetOffsetChannel>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce6:	fa93 f3a3 	rbit	r3, r3
 8009cea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8009cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8009cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d101      	bne.n	8009cfa <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8009cf6:	2320      	movs	r3, #32
 8009cf8:	e003      	b.n	8009d02 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8009cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cfc:	fab3 f383 	clz	r3, r3
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	461a      	mov	r2, r3
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d105      	bne.n	8009d1c <HAL_ADC_ConfigChannel+0x414>
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	0e9b      	lsrs	r3, r3, #26
 8009d16:	f003 031f 	and.w	r3, r3, #31
 8009d1a:	e011      	b.n	8009d40 <HAL_ADC_ConfigChannel+0x438>
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d24:	fa93 f3a3 	rbit	r3, r3
 8009d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8009d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8009d34:	2320      	movs	r3, #32
 8009d36:	e003      	b.n	8009d40 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8009d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3a:	fab3 f383 	clz	r3, r3
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d106      	bne.n	8009d52 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2102      	movs	r1, #2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fe fea5 	bl	8008a9c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2103      	movs	r1, #3
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fe fe09 	bl	8008970 <LL_ADC_GetOffsetChannel>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10a      	bne.n	8009d7e <HAL_ADC_ConfigChannel+0x476>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2103      	movs	r1, #3
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fe fdfe 	bl	8008970 <LL_ADC_GetOffsetChannel>
 8009d74:	4603      	mov	r3, r0
 8009d76:	0e9b      	lsrs	r3, r3, #26
 8009d78:	f003 021f 	and.w	r2, r3, #31
 8009d7c:	e017      	b.n	8009dae <HAL_ADC_ConfigChannel+0x4a6>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2103      	movs	r1, #3
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fe fdf3 	bl	8008970 <LL_ADC_GetOffsetChannel>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	fa93 f3a3 	rbit	r3, r3
 8009d94:	61fb      	str	r3, [r7, #28]
  return result;
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8009da0:	2320      	movs	r3, #32
 8009da2:	e003      	b.n	8009dac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8009da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da6:	fab3 f383 	clz	r3, r3
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	461a      	mov	r2, r3
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d105      	bne.n	8009dc6 <HAL_ADC_ConfigChannel+0x4be>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	0e9b      	lsrs	r3, r3, #26
 8009dc0:	f003 031f 	and.w	r3, r3, #31
 8009dc4:	e011      	b.n	8009dea <HAL_ADC_ConfigChannel+0x4e2>
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	fa93 f3a3 	rbit	r3, r3
 8009dd2:	613b      	str	r3, [r7, #16]
  return result;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8009dde:	2320      	movs	r3, #32
 8009de0:	e003      	b.n	8009dea <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	fab3 f383 	clz	r3, r3
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d14f      	bne.n	8009e8e <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2200      	movs	r2, #0
 8009df4:	2103      	movs	r1, #3
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe fe50 	bl	8008a9c <LL_ADC_SetOffsetState>
 8009dfc:	e047      	b.n	8009e8e <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	069b      	lsls	r3, r3, #26
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d107      	bne.n	8009e22 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009e20:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	069b      	lsls	r3, r3, #26
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d107      	bne.n	8009e46 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009e44:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	069b      	lsls	r3, r3, #26
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d107      	bne.n	8009e6a <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009e68:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	069b      	lsls	r3, r3, #26
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d107      	bne.n	8009e8e <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009e8c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fe ffa4 	bl	8008de0 <LL_ADC_IsEnabled>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f040 81ea 	bne.w	800a274 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6818      	ldr	r0, [r3, #0]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	6819      	ldr	r1, [r3, #0]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	461a      	mov	r2, r3
 8009eae:	f7fe fed9 	bl	8008c64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	4a7a      	ldr	r2, [pc, #488]	@ (800a0a0 <HAL_ADC_ConfigChannel+0x798>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	f040 80e0 	bne.w	800a07e <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4977      	ldr	r1, [pc, #476]	@ (800a0a4 <HAL_ADC_ConfigChannel+0x79c>)
 8009ec8:	428b      	cmp	r3, r1
 8009eca:	d147      	bne.n	8009f5c <HAL_ADC_ConfigChannel+0x654>
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4975      	ldr	r1, [pc, #468]	@ (800a0a8 <HAL_ADC_ConfigChannel+0x7a0>)
 8009ed2:	428b      	cmp	r3, r1
 8009ed4:	d040      	beq.n	8009f58 <HAL_ADC_ConfigChannel+0x650>
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4974      	ldr	r1, [pc, #464]	@ (800a0ac <HAL_ADC_ConfigChannel+0x7a4>)
 8009edc:	428b      	cmp	r3, r1
 8009ede:	d039      	beq.n	8009f54 <HAL_ADC_ConfigChannel+0x64c>
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4972      	ldr	r1, [pc, #456]	@ (800a0b0 <HAL_ADC_ConfigChannel+0x7a8>)
 8009ee6:	428b      	cmp	r3, r1
 8009ee8:	d032      	beq.n	8009f50 <HAL_ADC_ConfigChannel+0x648>
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4971      	ldr	r1, [pc, #452]	@ (800a0b4 <HAL_ADC_ConfigChannel+0x7ac>)
 8009ef0:	428b      	cmp	r3, r1
 8009ef2:	d02b      	beq.n	8009f4c <HAL_ADC_ConfigChannel+0x644>
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	496f      	ldr	r1, [pc, #444]	@ (800a0b8 <HAL_ADC_ConfigChannel+0x7b0>)
 8009efa:	428b      	cmp	r3, r1
 8009efc:	d024      	beq.n	8009f48 <HAL_ADC_ConfigChannel+0x640>
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	496e      	ldr	r1, [pc, #440]	@ (800a0bc <HAL_ADC_ConfigChannel+0x7b4>)
 8009f04:	428b      	cmp	r3, r1
 8009f06:	d01d      	beq.n	8009f44 <HAL_ADC_ConfigChannel+0x63c>
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	496c      	ldr	r1, [pc, #432]	@ (800a0c0 <HAL_ADC_ConfigChannel+0x7b8>)
 8009f0e:	428b      	cmp	r3, r1
 8009f10:	d016      	beq.n	8009f40 <HAL_ADC_ConfigChannel+0x638>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	496b      	ldr	r1, [pc, #428]	@ (800a0c4 <HAL_ADC_ConfigChannel+0x7bc>)
 8009f18:	428b      	cmp	r3, r1
 8009f1a:	d00f      	beq.n	8009f3c <HAL_ADC_ConfigChannel+0x634>
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4969      	ldr	r1, [pc, #420]	@ (800a0c8 <HAL_ADC_ConfigChannel+0x7c0>)
 8009f22:	428b      	cmp	r3, r1
 8009f24:	d008      	beq.n	8009f38 <HAL_ADC_ConfigChannel+0x630>
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4968      	ldr	r1, [pc, #416]	@ (800a0cc <HAL_ADC_ConfigChannel+0x7c4>)
 8009f2c:	428b      	cmp	r3, r1
 8009f2e:	d101      	bne.n	8009f34 <HAL_ADC_ConfigChannel+0x62c>
 8009f30:	4b67      	ldr	r3, [pc, #412]	@ (800a0d0 <HAL_ADC_ConfigChannel+0x7c8>)
 8009f32:	e0a0      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009f34:	2300      	movs	r3, #0
 8009f36:	e09e      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009f38:	4b66      	ldr	r3, [pc, #408]	@ (800a0d4 <HAL_ADC_ConfigChannel+0x7cc>)
 8009f3a:	e09c      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009f3c:	4b66      	ldr	r3, [pc, #408]	@ (800a0d8 <HAL_ADC_ConfigChannel+0x7d0>)
 8009f3e:	e09a      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009f40:	4b60      	ldr	r3, [pc, #384]	@ (800a0c4 <HAL_ADC_ConfigChannel+0x7bc>)
 8009f42:	e098      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009f44:	4b5e      	ldr	r3, [pc, #376]	@ (800a0c0 <HAL_ADC_ConfigChannel+0x7b8>)
 8009f46:	e096      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009f48:	4b64      	ldr	r3, [pc, #400]	@ (800a0dc <HAL_ADC_ConfigChannel+0x7d4>)
 8009f4a:	e094      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009f4c:	4b64      	ldr	r3, [pc, #400]	@ (800a0e0 <HAL_ADC_ConfigChannel+0x7d8>)
 8009f4e:	e092      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009f50:	4b64      	ldr	r3, [pc, #400]	@ (800a0e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8009f52:	e090      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009f54:	4b64      	ldr	r3, [pc, #400]	@ (800a0e8 <HAL_ADC_ConfigChannel+0x7e0>)
 8009f56:	e08e      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e08c      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4962      	ldr	r1, [pc, #392]	@ (800a0ec <HAL_ADC_ConfigChannel+0x7e4>)
 8009f62:	428b      	cmp	r3, r1
 8009f64:	d140      	bne.n	8009fe8 <HAL_ADC_ConfigChannel+0x6e0>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	494f      	ldr	r1, [pc, #316]	@ (800a0a8 <HAL_ADC_ConfigChannel+0x7a0>)
 8009f6c:	428b      	cmp	r3, r1
 8009f6e:	d039      	beq.n	8009fe4 <HAL_ADC_ConfigChannel+0x6dc>
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	494d      	ldr	r1, [pc, #308]	@ (800a0ac <HAL_ADC_ConfigChannel+0x7a4>)
 8009f76:	428b      	cmp	r3, r1
 8009f78:	d032      	beq.n	8009fe0 <HAL_ADC_ConfigChannel+0x6d8>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	494c      	ldr	r1, [pc, #304]	@ (800a0b0 <HAL_ADC_ConfigChannel+0x7a8>)
 8009f80:	428b      	cmp	r3, r1
 8009f82:	d02b      	beq.n	8009fdc <HAL_ADC_ConfigChannel+0x6d4>
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	494a      	ldr	r1, [pc, #296]	@ (800a0b4 <HAL_ADC_ConfigChannel+0x7ac>)
 8009f8a:	428b      	cmp	r3, r1
 8009f8c:	d024      	beq.n	8009fd8 <HAL_ADC_ConfigChannel+0x6d0>
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4949      	ldr	r1, [pc, #292]	@ (800a0b8 <HAL_ADC_ConfigChannel+0x7b0>)
 8009f94:	428b      	cmp	r3, r1
 8009f96:	d01d      	beq.n	8009fd4 <HAL_ADC_ConfigChannel+0x6cc>
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4947      	ldr	r1, [pc, #284]	@ (800a0bc <HAL_ADC_ConfigChannel+0x7b4>)
 8009f9e:	428b      	cmp	r3, r1
 8009fa0:	d016      	beq.n	8009fd0 <HAL_ADC_ConfigChannel+0x6c8>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4946      	ldr	r1, [pc, #280]	@ (800a0c0 <HAL_ADC_ConfigChannel+0x7b8>)
 8009fa8:	428b      	cmp	r3, r1
 8009faa:	d00f      	beq.n	8009fcc <HAL_ADC_ConfigChannel+0x6c4>
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4944      	ldr	r1, [pc, #272]	@ (800a0c4 <HAL_ADC_ConfigChannel+0x7bc>)
 8009fb2:	428b      	cmp	r3, r1
 8009fb4:	d008      	beq.n	8009fc8 <HAL_ADC_ConfigChannel+0x6c0>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4944      	ldr	r1, [pc, #272]	@ (800a0cc <HAL_ADC_ConfigChannel+0x7c4>)
 8009fbc:	428b      	cmp	r3, r1
 8009fbe:	d101      	bne.n	8009fc4 <HAL_ADC_ConfigChannel+0x6bc>
 8009fc0:	4b43      	ldr	r3, [pc, #268]	@ (800a0d0 <HAL_ADC_ConfigChannel+0x7c8>)
 8009fc2:	e058      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	e056      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009fc8:	4b43      	ldr	r3, [pc, #268]	@ (800a0d8 <HAL_ADC_ConfigChannel+0x7d0>)
 8009fca:	e054      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009fcc:	4b3d      	ldr	r3, [pc, #244]	@ (800a0c4 <HAL_ADC_ConfigChannel+0x7bc>)
 8009fce:	e052      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009fd0:	4b3b      	ldr	r3, [pc, #236]	@ (800a0c0 <HAL_ADC_ConfigChannel+0x7b8>)
 8009fd2:	e050      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009fd4:	4b41      	ldr	r3, [pc, #260]	@ (800a0dc <HAL_ADC_ConfigChannel+0x7d4>)
 8009fd6:	e04e      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009fd8:	4b41      	ldr	r3, [pc, #260]	@ (800a0e0 <HAL_ADC_ConfigChannel+0x7d8>)
 8009fda:	e04c      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009fdc:	4b41      	ldr	r3, [pc, #260]	@ (800a0e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8009fde:	e04a      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009fe0:	4b41      	ldr	r3, [pc, #260]	@ (800a0e8 <HAL_ADC_ConfigChannel+0x7e0>)
 8009fe2:	e048      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e046      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4940      	ldr	r1, [pc, #256]	@ (800a0f0 <HAL_ADC_ConfigChannel+0x7e8>)
 8009fee:	428b      	cmp	r3, r1
 8009ff0:	d140      	bne.n	800a074 <HAL_ADC_ConfigChannel+0x76c>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	492c      	ldr	r1, [pc, #176]	@ (800a0a8 <HAL_ADC_ConfigChannel+0x7a0>)
 8009ff8:	428b      	cmp	r3, r1
 8009ffa:	d039      	beq.n	800a070 <HAL_ADC_ConfigChannel+0x768>
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	492a      	ldr	r1, [pc, #168]	@ (800a0ac <HAL_ADC_ConfigChannel+0x7a4>)
 800a002:	428b      	cmp	r3, r1
 800a004:	d032      	beq.n	800a06c <HAL_ADC_ConfigChannel+0x764>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4929      	ldr	r1, [pc, #164]	@ (800a0b0 <HAL_ADC_ConfigChannel+0x7a8>)
 800a00c:	428b      	cmp	r3, r1
 800a00e:	d02b      	beq.n	800a068 <HAL_ADC_ConfigChannel+0x760>
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4927      	ldr	r1, [pc, #156]	@ (800a0b4 <HAL_ADC_ConfigChannel+0x7ac>)
 800a016:	428b      	cmp	r3, r1
 800a018:	d024      	beq.n	800a064 <HAL_ADC_ConfigChannel+0x75c>
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4926      	ldr	r1, [pc, #152]	@ (800a0b8 <HAL_ADC_ConfigChannel+0x7b0>)
 800a020:	428b      	cmp	r3, r1
 800a022:	d01d      	beq.n	800a060 <HAL_ADC_ConfigChannel+0x758>
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4924      	ldr	r1, [pc, #144]	@ (800a0bc <HAL_ADC_ConfigChannel+0x7b4>)
 800a02a:	428b      	cmp	r3, r1
 800a02c:	d016      	beq.n	800a05c <HAL_ADC_ConfigChannel+0x754>
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4923      	ldr	r1, [pc, #140]	@ (800a0c0 <HAL_ADC_ConfigChannel+0x7b8>)
 800a034:	428b      	cmp	r3, r1
 800a036:	d00f      	beq.n	800a058 <HAL_ADC_ConfigChannel+0x750>
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4926      	ldr	r1, [pc, #152]	@ (800a0d8 <HAL_ADC_ConfigChannel+0x7d0>)
 800a03e:	428b      	cmp	r3, r1
 800a040:	d008      	beq.n	800a054 <HAL_ADC_ConfigChannel+0x74c>
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	492b      	ldr	r1, [pc, #172]	@ (800a0f4 <HAL_ADC_ConfigChannel+0x7ec>)
 800a048:	428b      	cmp	r3, r1
 800a04a:	d101      	bne.n	800a050 <HAL_ADC_ConfigChannel+0x748>
 800a04c:	4b2a      	ldr	r3, [pc, #168]	@ (800a0f8 <HAL_ADC_ConfigChannel+0x7f0>)
 800a04e:	e012      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 800a050:	2300      	movs	r3, #0
 800a052:	e010      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 800a054:	4b27      	ldr	r3, [pc, #156]	@ (800a0f4 <HAL_ADC_ConfigChannel+0x7ec>)
 800a056:	e00e      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 800a058:	4b1a      	ldr	r3, [pc, #104]	@ (800a0c4 <HAL_ADC_ConfigChannel+0x7bc>)
 800a05a:	e00c      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 800a05c:	4b18      	ldr	r3, [pc, #96]	@ (800a0c0 <HAL_ADC_ConfigChannel+0x7b8>)
 800a05e:	e00a      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 800a060:	4b1e      	ldr	r3, [pc, #120]	@ (800a0dc <HAL_ADC_ConfigChannel+0x7d4>)
 800a062:	e008      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 800a064:	4b1e      	ldr	r3, [pc, #120]	@ (800a0e0 <HAL_ADC_ConfigChannel+0x7d8>)
 800a066:	e006      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 800a068:	4b1e      	ldr	r3, [pc, #120]	@ (800a0e4 <HAL_ADC_ConfigChannel+0x7dc>)
 800a06a:	e004      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 800a06c:	4b1e      	ldr	r3, [pc, #120]	@ (800a0e8 <HAL_ADC_ConfigChannel+0x7e0>)
 800a06e:	e002      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 800a070:	2301      	movs	r3, #1
 800a072:	e000      	b.n	800a076 <HAL_ADC_ConfigChannel+0x76e>
 800a074:	2300      	movs	r3, #0
 800a076:	4619      	mov	r1, r3
 800a078:	4610      	mov	r0, r2
 800a07a:	f7fe fc0d 	bl	8008898 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	f280 80f6 	bge.w	800a274 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a05      	ldr	r2, [pc, #20]	@ (800a0a4 <HAL_ADC_ConfigChannel+0x79c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d004      	beq.n	800a09c <HAL_ADC_ConfigChannel+0x794>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a15      	ldr	r2, [pc, #84]	@ (800a0ec <HAL_ADC_ConfigChannel+0x7e4>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d131      	bne.n	800a100 <HAL_ADC_ConfigChannel+0x7f8>
 800a09c:	4b17      	ldr	r3, [pc, #92]	@ (800a0fc <HAL_ADC_ConfigChannel+0x7f4>)
 800a09e:	e030      	b.n	800a102 <HAL_ADC_ConfigChannel+0x7fa>
 800a0a0:	47ff0000 	.word	0x47ff0000
 800a0a4:	40022000 	.word	0x40022000
 800a0a8:	04300002 	.word	0x04300002
 800a0ac:	08600004 	.word	0x08600004
 800a0b0:	0c900008 	.word	0x0c900008
 800a0b4:	10c00010 	.word	0x10c00010
 800a0b8:	14f00020 	.word	0x14f00020
 800a0bc:	2a000400 	.word	0x2a000400
 800a0c0:	2e300800 	.word	0x2e300800
 800a0c4:	32601000 	.word	0x32601000
 800a0c8:	43210000 	.word	0x43210000
 800a0cc:	4b840000 	.word	0x4b840000
 800a0d0:	4fb80000 	.word	0x4fb80000
 800a0d4:	47520000 	.word	0x47520000
 800a0d8:	36902000 	.word	0x36902000
 800a0dc:	25b00200 	.word	0x25b00200
 800a0e0:	21800100 	.word	0x21800100
 800a0e4:	1d500080 	.word	0x1d500080
 800a0e8:	19200040 	.word	0x19200040
 800a0ec:	40022100 	.word	0x40022100
 800a0f0:	58026000 	.word	0x58026000
 800a0f4:	3ac04000 	.word	0x3ac04000
 800a0f8:	3ef08000 	.word	0x3ef08000
 800a0fc:	40022300 	.word	0x40022300
 800a100:	4b61      	ldr	r3, [pc, #388]	@ (800a288 <HAL_ADC_ConfigChannel+0x980>)
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe fbba 	bl	800887c <LL_ADC_GetCommonPathInternalCh>
 800a108:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a5f      	ldr	r2, [pc, #380]	@ (800a28c <HAL_ADC_ConfigChannel+0x984>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d004      	beq.n	800a11e <HAL_ADC_ConfigChannel+0x816>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a5d      	ldr	r2, [pc, #372]	@ (800a290 <HAL_ADC_ConfigChannel+0x988>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d10e      	bne.n	800a13c <HAL_ADC_ConfigChannel+0x834>
 800a11e:	485b      	ldr	r0, [pc, #364]	@ (800a28c <HAL_ADC_ConfigChannel+0x984>)
 800a120:	f7fe fe5e 	bl	8008de0 <LL_ADC_IsEnabled>
 800a124:	4604      	mov	r4, r0
 800a126:	485a      	ldr	r0, [pc, #360]	@ (800a290 <HAL_ADC_ConfigChannel+0x988>)
 800a128:	f7fe fe5a 	bl	8008de0 <LL_ADC_IsEnabled>
 800a12c:	4603      	mov	r3, r0
 800a12e:	4323      	orrs	r3, r4
 800a130:	2b00      	cmp	r3, #0
 800a132:	bf0c      	ite	eq
 800a134:	2301      	moveq	r3, #1
 800a136:	2300      	movne	r3, #0
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	e008      	b.n	800a14e <HAL_ADC_ConfigChannel+0x846>
 800a13c:	4855      	ldr	r0, [pc, #340]	@ (800a294 <HAL_ADC_ConfigChannel+0x98c>)
 800a13e:	f7fe fe4f 	bl	8008de0 <LL_ADC_IsEnabled>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	bf0c      	ite	eq
 800a148:	2301      	moveq	r3, #1
 800a14a:	2300      	movne	r3, #0
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d07d      	beq.n	800a24e <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a50      	ldr	r2, [pc, #320]	@ (800a298 <HAL_ADC_ConfigChannel+0x990>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d130      	bne.n	800a1be <HAL_ADC_ConfigChannel+0x8b6>
 800a15c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a15e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d12b      	bne.n	800a1be <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a4a      	ldr	r2, [pc, #296]	@ (800a294 <HAL_ADC_ConfigChannel+0x98c>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	f040 8081 	bne.w	800a274 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a45      	ldr	r2, [pc, #276]	@ (800a28c <HAL_ADC_ConfigChannel+0x984>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d004      	beq.n	800a186 <HAL_ADC_ConfigChannel+0x87e>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a43      	ldr	r2, [pc, #268]	@ (800a290 <HAL_ADC_ConfigChannel+0x988>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d101      	bne.n	800a18a <HAL_ADC_ConfigChannel+0x882>
 800a186:	4a45      	ldr	r2, [pc, #276]	@ (800a29c <HAL_ADC_ConfigChannel+0x994>)
 800a188:	e000      	b.n	800a18c <HAL_ADC_ConfigChannel+0x884>
 800a18a:	4a3f      	ldr	r2, [pc, #252]	@ (800a288 <HAL_ADC_ConfigChannel+0x980>)
 800a18c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a18e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a192:	4619      	mov	r1, r3
 800a194:	4610      	mov	r0, r2
 800a196:	f7fe fb5e 	bl	8008856 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a19a:	4b41      	ldr	r3, [pc, #260]	@ (800a2a0 <HAL_ADC_ConfigChannel+0x998>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	099b      	lsrs	r3, r3, #6
 800a1a0:	4a40      	ldr	r2, [pc, #256]	@ (800a2a4 <HAL_ADC_ConfigChannel+0x99c>)
 800a1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a6:	099b      	lsrs	r3, r3, #6
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	005b      	lsls	r3, r3, #1
 800a1ac:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800a1ae:	e002      	b.n	800a1b6 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1f9      	bne.n	800a1b0 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a1bc:	e05a      	b.n	800a274 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a39      	ldr	r2, [pc, #228]	@ (800a2a8 <HAL_ADC_ConfigChannel+0x9a0>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d11e      	bne.n	800a206 <HAL_ADC_ConfigChannel+0x8fe>
 800a1c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a1ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d119      	bne.n	800a206 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a2f      	ldr	r2, [pc, #188]	@ (800a294 <HAL_ADC_ConfigChannel+0x98c>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d14b      	bne.n	800a274 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a2a      	ldr	r2, [pc, #168]	@ (800a28c <HAL_ADC_ConfigChannel+0x984>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d004      	beq.n	800a1f0 <HAL_ADC_ConfigChannel+0x8e8>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a29      	ldr	r2, [pc, #164]	@ (800a290 <HAL_ADC_ConfigChannel+0x988>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d101      	bne.n	800a1f4 <HAL_ADC_ConfigChannel+0x8ec>
 800a1f0:	4a2a      	ldr	r2, [pc, #168]	@ (800a29c <HAL_ADC_ConfigChannel+0x994>)
 800a1f2:	e000      	b.n	800a1f6 <HAL_ADC_ConfigChannel+0x8ee>
 800a1f4:	4a24      	ldr	r2, [pc, #144]	@ (800a288 <HAL_ADC_ConfigChannel+0x980>)
 800a1f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a1f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4610      	mov	r0, r2
 800a200:	f7fe fb29 	bl	8008856 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a204:	e036      	b.n	800a274 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a28      	ldr	r2, [pc, #160]	@ (800a2ac <HAL_ADC_ConfigChannel+0x9a4>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d131      	bne.n	800a274 <HAL_ADC_ConfigChannel+0x96c>
 800a210:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a216:	2b00      	cmp	r3, #0
 800a218:	d12c      	bne.n	800a274 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a1d      	ldr	r2, [pc, #116]	@ (800a294 <HAL_ADC_ConfigChannel+0x98c>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d127      	bne.n	800a274 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a18      	ldr	r2, [pc, #96]	@ (800a28c <HAL_ADC_ConfigChannel+0x984>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d004      	beq.n	800a238 <HAL_ADC_ConfigChannel+0x930>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a17      	ldr	r2, [pc, #92]	@ (800a290 <HAL_ADC_ConfigChannel+0x988>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d101      	bne.n	800a23c <HAL_ADC_ConfigChannel+0x934>
 800a238:	4a18      	ldr	r2, [pc, #96]	@ (800a29c <HAL_ADC_ConfigChannel+0x994>)
 800a23a:	e000      	b.n	800a23e <HAL_ADC_ConfigChannel+0x936>
 800a23c:	4a12      	ldr	r2, [pc, #72]	@ (800a288 <HAL_ADC_ConfigChannel+0x980>)
 800a23e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a240:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a244:	4619      	mov	r1, r3
 800a246:	4610      	mov	r0, r2
 800a248:	f7fe fb05 	bl	8008856 <LL_ADC_SetCommonPathInternalCh>
 800a24c:	e012      	b.n	800a274 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a252:	f043 0220 	orr.w	r2, r3, #32
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a260:	e008      	b.n	800a274 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a266:	f043 0220 	orr.w	r2, r3, #32
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800a27c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800a280:	4618      	mov	r0, r3
 800a282:	3794      	adds	r7, #148	@ 0x94
 800a284:	46bd      	mov	sp, r7
 800a286:	bd90      	pop	{r4, r7, pc}
 800a288:	58026300 	.word	0x58026300
 800a28c:	40022000 	.word	0x40022000
 800a290:	40022100 	.word	0x40022100
 800a294:	58026000 	.word	0x58026000
 800a298:	c7520000 	.word	0xc7520000
 800a29c:	40022300 	.word	0x40022300
 800a2a0:	24000004 	.word	0x24000004
 800a2a4:	053e2d63 	.word	0x053e2d63
 800a2a8:	c3210000 	.word	0xc3210000
 800a2ac:	cb840000 	.word	0xcb840000

0800a2b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fe fd8f 	bl	8008de0 <LL_ADC_IsEnabled>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d16e      	bne.n	800a3a6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	689a      	ldr	r2, [r3, #8]
 800a2ce:	4b38      	ldr	r3, [pc, #224]	@ (800a3b0 <ADC_Enable+0x100>)
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00d      	beq.n	800a2f2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2da:	f043 0210 	orr.w	r2, r3, #16
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2e6:	f043 0201 	orr.w	r2, r3, #1
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e05a      	b.n	800a3a8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fe fd5e 	bl	8008db8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a2fc:	f7fe fa68 	bl	80087d0 <HAL_GetTick>
 800a300:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a2b      	ldr	r2, [pc, #172]	@ (800a3b4 <ADC_Enable+0x104>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d004      	beq.n	800a316 <ADC_Enable+0x66>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a29      	ldr	r2, [pc, #164]	@ (800a3b8 <ADC_Enable+0x108>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d101      	bne.n	800a31a <ADC_Enable+0x6a>
 800a316:	4b29      	ldr	r3, [pc, #164]	@ (800a3bc <ADC_Enable+0x10c>)
 800a318:	e000      	b.n	800a31c <ADC_Enable+0x6c>
 800a31a:	4b29      	ldr	r3, [pc, #164]	@ (800a3c0 <ADC_Enable+0x110>)
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fe fce1 	bl	8008ce4 <LL_ADC_GetMultimode>
 800a322:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a23      	ldr	r2, [pc, #140]	@ (800a3b8 <ADC_Enable+0x108>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d002      	beq.n	800a334 <ADC_Enable+0x84>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	e000      	b.n	800a336 <ADC_Enable+0x86>
 800a334:	4b1f      	ldr	r3, [pc, #124]	@ (800a3b4 <ADC_Enable+0x104>)
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	6812      	ldr	r2, [r2, #0]
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d02c      	beq.n	800a398 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d130      	bne.n	800a3a6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a344:	e028      	b.n	800a398 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fe fd48 	bl	8008de0 <LL_ADC_IsEnabled>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d104      	bne.n	800a360 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe fd2c 	bl	8008db8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a360:	f7fe fa36 	bl	80087d0 <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d914      	bls.n	800a398 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0301 	and.w	r3, r3, #1
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d00d      	beq.n	800a398 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a380:	f043 0210 	orr.w	r2, r3, #16
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a38c:	f043 0201 	orr.w	r2, r3, #1
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e007      	b.n	800a3a8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d1cf      	bne.n	800a346 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	8000003f 	.word	0x8000003f
 800a3b4:	40022000 	.word	0x40022000
 800a3b8:	40022100 	.word	0x40022100
 800a3bc:	40022300 	.word	0x40022300
 800a3c0:	58026300 	.word	0x58026300

0800a3c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d14b      	bne.n	800a476 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0308 	and.w	r3, r3, #8
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d021      	beq.n	800a43c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fe fb77 	bl	8008af0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d032      	beq.n	800a46e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a412:	2b00      	cmp	r3, #0
 800a414:	d12b      	bne.n	800a46e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a41a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a426:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d11f      	bne.n	800a46e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a432:	f043 0201 	orr.w	r2, r3, #1
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	661a      	str	r2, [r3, #96]	@ 0x60
 800a43a:	e018      	b.n	800a46e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	f003 0303 	and.w	r3, r3, #3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d111      	bne.n	800a46e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a44e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a45a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d105      	bne.n	800a46e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a466:	f043 0201 	orr.w	r2, r3, #1
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f7ff fa22 	bl	80098b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a474:	e00e      	b.n	800a494 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a47a:	f003 0310 	and.w	r3, r3, #16
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f7ff fa36 	bl	80098f4 <HAL_ADC_ErrorCallback>
}
 800a488:	e004      	b.n	800a494 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a48e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	4798      	blx	r3
}
 800a494:	bf00      	nop
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f7ff fa0e 	bl	80098cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a4b0:	bf00      	nop
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4d6:	f043 0204 	orr.w	r2, r3, #4
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f7ff fa08 	bl	80098f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a4e4:	bf00      	nop
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a6c      	ldr	r2, [pc, #432]	@ (800a6ac <ADC_ConfigureBoostMode+0x1c0>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d004      	beq.n	800a508 <ADC_ConfigureBoostMode+0x1c>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a6b      	ldr	r2, [pc, #428]	@ (800a6b0 <ADC_ConfigureBoostMode+0x1c4>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d109      	bne.n	800a51c <ADC_ConfigureBoostMode+0x30>
 800a508:	4b6a      	ldr	r3, [pc, #424]	@ (800a6b4 <ADC_ConfigureBoostMode+0x1c8>)
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a510:	2b00      	cmp	r3, #0
 800a512:	bf14      	ite	ne
 800a514:	2301      	movne	r3, #1
 800a516:	2300      	moveq	r3, #0
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	e008      	b.n	800a52e <ADC_ConfigureBoostMode+0x42>
 800a51c:	4b66      	ldr	r3, [pc, #408]	@ (800a6b8 <ADC_ConfigureBoostMode+0x1cc>)
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a524:	2b00      	cmp	r3, #0
 800a526:	bf14      	ite	ne
 800a528:	2301      	movne	r3, #1
 800a52a:	2300      	moveq	r3, #0
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d01c      	beq.n	800a56c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800a532:	f006 fe81 	bl	8011238 <HAL_RCC_GetHCLKFreq>
 800a536:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a540:	d010      	beq.n	800a564 <ADC_ConfigureBoostMode+0x78>
 800a542:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a546:	d873      	bhi.n	800a630 <ADC_ConfigureBoostMode+0x144>
 800a548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a54c:	d002      	beq.n	800a554 <ADC_ConfigureBoostMode+0x68>
 800a54e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a552:	d16d      	bne.n	800a630 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	0c1b      	lsrs	r3, r3, #16
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a560:	60fb      	str	r3, [r7, #12]
        break;
 800a562:	e068      	b.n	800a636 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	089b      	lsrs	r3, r3, #2
 800a568:	60fb      	str	r3, [r7, #12]
        break;
 800a56a:	e064      	b.n	800a636 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800a56c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a570:	f04f 0100 	mov.w	r1, #0
 800a574:	f008 f85c 	bl	8012630 <HAL_RCCEx_GetPeriphCLKFreq>
 800a578:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800a582:	d051      	beq.n	800a628 <ADC_ConfigureBoostMode+0x13c>
 800a584:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800a588:	d854      	bhi.n	800a634 <ADC_ConfigureBoostMode+0x148>
 800a58a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800a58e:	d047      	beq.n	800a620 <ADC_ConfigureBoostMode+0x134>
 800a590:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800a594:	d84e      	bhi.n	800a634 <ADC_ConfigureBoostMode+0x148>
 800a596:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800a59a:	d03d      	beq.n	800a618 <ADC_ConfigureBoostMode+0x12c>
 800a59c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800a5a0:	d848      	bhi.n	800a634 <ADC_ConfigureBoostMode+0x148>
 800a5a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5a6:	d033      	beq.n	800a610 <ADC_ConfigureBoostMode+0x124>
 800a5a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5ac:	d842      	bhi.n	800a634 <ADC_ConfigureBoostMode+0x148>
 800a5ae:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800a5b2:	d029      	beq.n	800a608 <ADC_ConfigureBoostMode+0x11c>
 800a5b4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800a5b8:	d83c      	bhi.n	800a634 <ADC_ConfigureBoostMode+0x148>
 800a5ba:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a5be:	d01a      	beq.n	800a5f6 <ADC_ConfigureBoostMode+0x10a>
 800a5c0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a5c4:	d836      	bhi.n	800a634 <ADC_ConfigureBoostMode+0x148>
 800a5c6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a5ca:	d014      	beq.n	800a5f6 <ADC_ConfigureBoostMode+0x10a>
 800a5cc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a5d0:	d830      	bhi.n	800a634 <ADC_ConfigureBoostMode+0x148>
 800a5d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5d6:	d00e      	beq.n	800a5f6 <ADC_ConfigureBoostMode+0x10a>
 800a5d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5dc:	d82a      	bhi.n	800a634 <ADC_ConfigureBoostMode+0x148>
 800a5de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a5e2:	d008      	beq.n	800a5f6 <ADC_ConfigureBoostMode+0x10a>
 800a5e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a5e8:	d824      	bhi.n	800a634 <ADC_ConfigureBoostMode+0x148>
 800a5ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5ee:	d002      	beq.n	800a5f6 <ADC_ConfigureBoostMode+0x10a>
 800a5f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a5f4:	d11e      	bne.n	800a634 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	0c9b      	lsrs	r3, r3, #18
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	fbb2 f3f3 	udiv	r3, r2, r3
 800a604:	60fb      	str	r3, [r7, #12]
        break;
 800a606:	e016      	b.n	800a636 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	091b      	lsrs	r3, r3, #4
 800a60c:	60fb      	str	r3, [r7, #12]
        break;
 800a60e:	e012      	b.n	800a636 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	095b      	lsrs	r3, r3, #5
 800a614:	60fb      	str	r3, [r7, #12]
        break;
 800a616:	e00e      	b.n	800a636 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	099b      	lsrs	r3, r3, #6
 800a61c:	60fb      	str	r3, [r7, #12]
        break;
 800a61e:	e00a      	b.n	800a636 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	09db      	lsrs	r3, r3, #7
 800a624:	60fb      	str	r3, [r7, #12]
        break;
 800a626:	e006      	b.n	800a636 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	0a1b      	lsrs	r3, r3, #8
 800a62c:	60fb      	str	r3, [r7, #12]
        break;
 800a62e:	e002      	b.n	800a636 <ADC_ConfigureBoostMode+0x14a>
        break;
 800a630:	bf00      	nop
 800a632:	e000      	b.n	800a636 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800a634:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	085b      	lsrs	r3, r3, #1
 800a63a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4a1f      	ldr	r2, [pc, #124]	@ (800a6bc <ADC_ConfigureBoostMode+0x1d0>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d808      	bhi.n	800a656 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689a      	ldr	r2, [r3, #8]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a652:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800a654:	e025      	b.n	800a6a2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	4a19      	ldr	r2, [pc, #100]	@ (800a6c0 <ADC_ConfigureBoostMode+0x1d4>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d80a      	bhi.n	800a674 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a670:	609a      	str	r2, [r3, #8]
}
 800a672:	e016      	b.n	800a6a2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4a13      	ldr	r2, [pc, #76]	@ (800a6c4 <ADC_ConfigureBoostMode+0x1d8>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d80a      	bhi.n	800a692 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a68e:	609a      	str	r2, [r3, #8]
}
 800a690:	e007      	b.n	800a6a2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800a6a0:	609a      	str	r2, [r3, #8]
}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	40022000 	.word	0x40022000
 800a6b0:	40022100 	.word	0x40022100
 800a6b4:	40022300 	.word	0x40022300
 800a6b8:	58026300 	.word	0x58026300
 800a6bc:	005f5e10 	.word	0x005f5e10
 800a6c0:	00bebc20 	.word	0x00bebc20
 800a6c4:	017d7840 	.word	0x017d7840

0800a6c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <__NVIC_SetPriorityGrouping>:
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f003 0307 	and.w	r3, r3, #7
 800a73a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a73c:	4b0b      	ldr	r3, [pc, #44]	@ (800a76c <__NVIC_SetPriorityGrouping+0x40>)
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a748:	4013      	ands	r3, r2
 800a74a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a754:	4b06      	ldr	r3, [pc, #24]	@ (800a770 <__NVIC_SetPriorityGrouping+0x44>)
 800a756:	4313      	orrs	r3, r2
 800a758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a75a:	4a04      	ldr	r2, [pc, #16]	@ (800a76c <__NVIC_SetPriorityGrouping+0x40>)
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	60d3      	str	r3, [r2, #12]
}
 800a760:	bf00      	nop
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	e000ed00 	.word	0xe000ed00
 800a770:	05fa0000 	.word	0x05fa0000

0800a774 <__NVIC_GetPriorityGrouping>:
{
 800a774:	b480      	push	{r7}
 800a776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a778:	4b04      	ldr	r3, [pc, #16]	@ (800a78c <__NVIC_GetPriorityGrouping+0x18>)
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	0a1b      	lsrs	r3, r3, #8
 800a77e:	f003 0307 	and.w	r3, r3, #7
}
 800a782:	4618      	mov	r0, r3
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	e000ed00 	.word	0xe000ed00

0800a790 <__NVIC_EnableIRQ>:
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	4603      	mov	r3, r0
 800a798:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a79a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	db0b      	blt.n	800a7ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a7a2:	88fb      	ldrh	r3, [r7, #6]
 800a7a4:	f003 021f 	and.w	r2, r3, #31
 800a7a8:	4907      	ldr	r1, [pc, #28]	@ (800a7c8 <__NVIC_EnableIRQ+0x38>)
 800a7aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7ae:	095b      	lsrs	r3, r3, #5
 800a7b0:	2001      	movs	r0, #1
 800a7b2:	fa00 f202 	lsl.w	r2, r0, r2
 800a7b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a7ba:	bf00      	nop
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	e000e100 	.word	0xe000e100

0800a7cc <__NVIC_SetPriority>:
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	6039      	str	r1, [r7, #0]
 800a7d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a7d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	db0a      	blt.n	800a7f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	490c      	ldr	r1, [pc, #48]	@ (800a818 <__NVIC_SetPriority+0x4c>)
 800a7e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7ea:	0112      	lsls	r2, r2, #4
 800a7ec:	b2d2      	uxtb	r2, r2
 800a7ee:	440b      	add	r3, r1
 800a7f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a7f4:	e00a      	b.n	800a80c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	4908      	ldr	r1, [pc, #32]	@ (800a81c <__NVIC_SetPriority+0x50>)
 800a7fc:	88fb      	ldrh	r3, [r7, #6]
 800a7fe:	f003 030f 	and.w	r3, r3, #15
 800a802:	3b04      	subs	r3, #4
 800a804:	0112      	lsls	r2, r2, #4
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	440b      	add	r3, r1
 800a80a:	761a      	strb	r2, [r3, #24]
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr
 800a818:	e000e100 	.word	0xe000e100
 800a81c:	e000ed00 	.word	0xe000ed00

0800a820 <NVIC_EncodePriority>:
{
 800a820:	b480      	push	{r7}
 800a822:	b089      	sub	sp, #36	@ 0x24
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f003 0307 	and.w	r3, r3, #7
 800a832:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	f1c3 0307 	rsb	r3, r3, #7
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	bf28      	it	cs
 800a83e:	2304      	movcs	r3, #4
 800a840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	3304      	adds	r3, #4
 800a846:	2b06      	cmp	r3, #6
 800a848:	d902      	bls.n	800a850 <NVIC_EncodePriority+0x30>
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	3b03      	subs	r3, #3
 800a84e:	e000      	b.n	800a852 <NVIC_EncodePriority+0x32>
 800a850:	2300      	movs	r3, #0
 800a852:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a854:	f04f 32ff 	mov.w	r2, #4294967295
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	fa02 f303 	lsl.w	r3, r2, r3
 800a85e:	43da      	mvns	r2, r3
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	401a      	ands	r2, r3
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a868:	f04f 31ff 	mov.w	r1, #4294967295
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	fa01 f303 	lsl.w	r3, r1, r3
 800a872:	43d9      	mvns	r1, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a878:	4313      	orrs	r3, r2
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3724      	adds	r7, #36	@ 0x24
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
	...

0800a888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	3b01      	subs	r3, #1
 800a894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a898:	d301      	bcc.n	800a89e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a89a:	2301      	movs	r3, #1
 800a89c:	e00f      	b.n	800a8be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a89e:	4a0a      	ldr	r2, [pc, #40]	@ (800a8c8 <SysTick_Config+0x40>)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a8a6:	210f      	movs	r1, #15
 800a8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ac:	f7ff ff8e 	bl	800a7cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a8b0:	4b05      	ldr	r3, [pc, #20]	@ (800a8c8 <SysTick_Config+0x40>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a8b6:	4b04      	ldr	r3, [pc, #16]	@ (800a8c8 <SysTick_Config+0x40>)
 800a8b8:	2207      	movs	r2, #7
 800a8ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	e000e010 	.word	0xe000e010

0800a8cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff ff29 	bl	800a72c <__NVIC_SetPriorityGrouping>
}
 800a8da:	bf00      	nop
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b086      	sub	sp, #24
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	60b9      	str	r1, [r7, #8]
 800a8ec:	607a      	str	r2, [r7, #4]
 800a8ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a8f0:	f7ff ff40 	bl	800a774 <__NVIC_GetPriorityGrouping>
 800a8f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	6978      	ldr	r0, [r7, #20]
 800a8fc:	f7ff ff90 	bl	800a820 <NVIC_EncodePriority>
 800a900:	4602      	mov	r2, r0
 800a902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a906:	4611      	mov	r1, r2
 800a908:	4618      	mov	r0, r3
 800a90a:	f7ff ff5f 	bl	800a7cc <__NVIC_SetPriority>
}
 800a90e:	bf00      	nop
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b082      	sub	sp, #8
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	4603      	mov	r3, r0
 800a91e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff ff33 	bl	800a790 <__NVIC_EnableIRQ>
}
 800a92a:	bf00      	nop
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b082      	sub	sp, #8
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f7ff ffa4 	bl	800a888 <SysTick_Config>
 800a940:	4603      	mov	r3, r0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
	...

0800a94c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800a950:	f3bf 8f5f 	dmb	sy
}
 800a954:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a956:	4b07      	ldr	r3, [pc, #28]	@ (800a974 <HAL_MPU_Disable+0x28>)
 800a958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a95a:	4a06      	ldr	r2, [pc, #24]	@ (800a974 <HAL_MPU_Disable+0x28>)
 800a95c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a960:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a962:	4b05      	ldr	r3, [pc, #20]	@ (800a978 <HAL_MPU_Disable+0x2c>)
 800a964:	2200      	movs	r2, #0
 800a966:	605a      	str	r2, [r3, #4]
}
 800a968:	bf00      	nop
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	e000ed00 	.word	0xe000ed00
 800a978:	e000ed90 	.word	0xe000ed90

0800a97c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a984:	4a0b      	ldr	r2, [pc, #44]	@ (800a9b4 <HAL_MPU_Enable+0x38>)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f043 0301 	orr.w	r3, r3, #1
 800a98c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a98e:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b8 <HAL_MPU_Enable+0x3c>)
 800a990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a992:	4a09      	ldr	r2, [pc, #36]	@ (800a9b8 <HAL_MPU_Enable+0x3c>)
 800a994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a998:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a99a:	f3bf 8f4f 	dsb	sy
}
 800a99e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a9a0:	f3bf 8f6f 	isb	sy
}
 800a9a4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a9a6:	bf00      	nop
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	e000ed90 	.word	0xe000ed90
 800a9b8:	e000ed00 	.word	0xe000ed00

0800a9bc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	785a      	ldrb	r2, [r3, #1]
 800a9c8:	4b1b      	ldr	r3, [pc, #108]	@ (800aa38 <HAL_MPU_ConfigRegion+0x7c>)
 800a9ca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800a9cc:	4b1a      	ldr	r3, [pc, #104]	@ (800aa38 <HAL_MPU_ConfigRegion+0x7c>)
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	4a19      	ldr	r2, [pc, #100]	@ (800aa38 <HAL_MPU_ConfigRegion+0x7c>)
 800a9d2:	f023 0301 	bic.w	r3, r3, #1
 800a9d6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800a9d8:	4a17      	ldr	r2, [pc, #92]	@ (800aa38 <HAL_MPU_ConfigRegion+0x7c>)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	7b1b      	ldrb	r3, [r3, #12]
 800a9e4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	7adb      	ldrb	r3, [r3, #11]
 800a9ea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a9ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	7a9b      	ldrb	r3, [r3, #10]
 800a9f2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a9f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	7b5b      	ldrb	r3, [r3, #13]
 800a9fa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a9fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	7b9b      	ldrb	r3, [r3, #14]
 800aa02:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800aa04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	7bdb      	ldrb	r3, [r3, #15]
 800aa0a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800aa0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	7a5b      	ldrb	r3, [r3, #9]
 800aa12:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800aa14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	7a1b      	ldrb	r3, [r3, #8]
 800aa1a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800aa1c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	7812      	ldrb	r2, [r2, #0]
 800aa22:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800aa24:	4a04      	ldr	r2, [pc, #16]	@ (800aa38 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800aa26:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800aa28:	6113      	str	r3, [r2, #16]
}
 800aa2a:	bf00      	nop
 800aa2c:	370c      	adds	r7, #12
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	e000ed90 	.word	0xe000ed90

0800aa3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800aa44:	f7fd fec4 	bl	80087d0 <HAL_GetTick>
 800aa48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e312      	b.n	800b07a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a66      	ldr	r2, [pc, #408]	@ (800abf4 <HAL_DMA_Init+0x1b8>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d04a      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a65      	ldr	r2, [pc, #404]	@ (800abf8 <HAL_DMA_Init+0x1bc>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d045      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a63      	ldr	r2, [pc, #396]	@ (800abfc <HAL_DMA_Init+0x1c0>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d040      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a62      	ldr	r2, [pc, #392]	@ (800ac00 <HAL_DMA_Init+0x1c4>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d03b      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a60      	ldr	r2, [pc, #384]	@ (800ac04 <HAL_DMA_Init+0x1c8>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d036      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a5f      	ldr	r2, [pc, #380]	@ (800ac08 <HAL_DMA_Init+0x1cc>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d031      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a5d      	ldr	r2, [pc, #372]	@ (800ac0c <HAL_DMA_Init+0x1d0>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d02c      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a5c      	ldr	r2, [pc, #368]	@ (800ac10 <HAL_DMA_Init+0x1d4>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d027      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a5a      	ldr	r2, [pc, #360]	@ (800ac14 <HAL_DMA_Init+0x1d8>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d022      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a59      	ldr	r2, [pc, #356]	@ (800ac18 <HAL_DMA_Init+0x1dc>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d01d      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a57      	ldr	r2, [pc, #348]	@ (800ac1c <HAL_DMA_Init+0x1e0>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d018      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a56      	ldr	r2, [pc, #344]	@ (800ac20 <HAL_DMA_Init+0x1e4>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d013      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a54      	ldr	r2, [pc, #336]	@ (800ac24 <HAL_DMA_Init+0x1e8>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d00e      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a53      	ldr	r2, [pc, #332]	@ (800ac28 <HAL_DMA_Init+0x1ec>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d009      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a51      	ldr	r2, [pc, #324]	@ (800ac2c <HAL_DMA_Init+0x1f0>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d004      	beq.n	800aaf4 <HAL_DMA_Init+0xb8>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a50      	ldr	r2, [pc, #320]	@ (800ac30 <HAL_DMA_Init+0x1f4>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d101      	bne.n	800aaf8 <HAL_DMA_Init+0xbc>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e000      	b.n	800aafa <HAL_DMA_Init+0xbe>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 813c 	beq.w	800ad78 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2202      	movs	r2, #2
 800ab04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a37      	ldr	r2, [pc, #220]	@ (800abf4 <HAL_DMA_Init+0x1b8>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d04a      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a36      	ldr	r2, [pc, #216]	@ (800abf8 <HAL_DMA_Init+0x1bc>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d045      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a34      	ldr	r2, [pc, #208]	@ (800abfc <HAL_DMA_Init+0x1c0>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d040      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a33      	ldr	r2, [pc, #204]	@ (800ac00 <HAL_DMA_Init+0x1c4>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d03b      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a31      	ldr	r2, [pc, #196]	@ (800ac04 <HAL_DMA_Init+0x1c8>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d036      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a30      	ldr	r2, [pc, #192]	@ (800ac08 <HAL_DMA_Init+0x1cc>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d031      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a2e      	ldr	r2, [pc, #184]	@ (800ac0c <HAL_DMA_Init+0x1d0>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d02c      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a2d      	ldr	r2, [pc, #180]	@ (800ac10 <HAL_DMA_Init+0x1d4>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d027      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a2b      	ldr	r2, [pc, #172]	@ (800ac14 <HAL_DMA_Init+0x1d8>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d022      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a2a      	ldr	r2, [pc, #168]	@ (800ac18 <HAL_DMA_Init+0x1dc>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d01d      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a28      	ldr	r2, [pc, #160]	@ (800ac1c <HAL_DMA_Init+0x1e0>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d018      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a27      	ldr	r2, [pc, #156]	@ (800ac20 <HAL_DMA_Init+0x1e4>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d013      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a25      	ldr	r2, [pc, #148]	@ (800ac24 <HAL_DMA_Init+0x1e8>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00e      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a24      	ldr	r2, [pc, #144]	@ (800ac28 <HAL_DMA_Init+0x1ec>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d009      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a22      	ldr	r2, [pc, #136]	@ (800ac2c <HAL_DMA_Init+0x1f0>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d004      	beq.n	800abb0 <HAL_DMA_Init+0x174>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a21      	ldr	r2, [pc, #132]	@ (800ac30 <HAL_DMA_Init+0x1f4>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d108      	bne.n	800abc2 <HAL_DMA_Init+0x186>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f022 0201 	bic.w	r2, r2, #1
 800abbe:	601a      	str	r2, [r3, #0]
 800abc0:	e007      	b.n	800abd2 <HAL_DMA_Init+0x196>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f022 0201 	bic.w	r2, r2, #1
 800abd0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800abd2:	e02f      	b.n	800ac34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800abd4:	f7fd fdfc 	bl	80087d0 <HAL_GetTick>
 800abd8:	4602      	mov	r2, r0
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	2b05      	cmp	r3, #5
 800abe0:	d928      	bls.n	800ac34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2220      	movs	r2, #32
 800abe6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2203      	movs	r2, #3
 800abec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e242      	b.n	800b07a <HAL_DMA_Init+0x63e>
 800abf4:	40020010 	.word	0x40020010
 800abf8:	40020028 	.word	0x40020028
 800abfc:	40020040 	.word	0x40020040
 800ac00:	40020058 	.word	0x40020058
 800ac04:	40020070 	.word	0x40020070
 800ac08:	40020088 	.word	0x40020088
 800ac0c:	400200a0 	.word	0x400200a0
 800ac10:	400200b8 	.word	0x400200b8
 800ac14:	40020410 	.word	0x40020410
 800ac18:	40020428 	.word	0x40020428
 800ac1c:	40020440 	.word	0x40020440
 800ac20:	40020458 	.word	0x40020458
 800ac24:	40020470 	.word	0x40020470
 800ac28:	40020488 	.word	0x40020488
 800ac2c:	400204a0 	.word	0x400204a0
 800ac30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1c8      	bne.n	800abd4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	4b83      	ldr	r3, [pc, #524]	@ (800ae5c <HAL_DMA_Init+0x420>)
 800ac4e:	4013      	ands	r3, r2
 800ac50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800ac5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ac72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a1b      	ldr	r3, [r3, #32]
 800ac78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac84:	2b04      	cmp	r3, #4
 800ac86:	d107      	bne.n	800ac98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac90:	4313      	orrs	r3, r2
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	2b28      	cmp	r3, #40	@ 0x28
 800ac9e:	d903      	bls.n	800aca8 <HAL_DMA_Init+0x26c>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	2b2e      	cmp	r3, #46	@ 0x2e
 800aca6:	d91f      	bls.n	800ace8 <HAL_DMA_Init+0x2ac>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	2b3e      	cmp	r3, #62	@ 0x3e
 800acae:	d903      	bls.n	800acb8 <HAL_DMA_Init+0x27c>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	2b42      	cmp	r3, #66	@ 0x42
 800acb6:	d917      	bls.n	800ace8 <HAL_DMA_Init+0x2ac>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	2b46      	cmp	r3, #70	@ 0x46
 800acbe:	d903      	bls.n	800acc8 <HAL_DMA_Init+0x28c>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	2b48      	cmp	r3, #72	@ 0x48
 800acc6:	d90f      	bls.n	800ace8 <HAL_DMA_Init+0x2ac>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	2b4e      	cmp	r3, #78	@ 0x4e
 800acce:	d903      	bls.n	800acd8 <HAL_DMA_Init+0x29c>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	2b52      	cmp	r3, #82	@ 0x52
 800acd6:	d907      	bls.n	800ace8 <HAL_DMA_Init+0x2ac>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	2b73      	cmp	r3, #115	@ 0x73
 800acde:	d905      	bls.n	800acec <HAL_DMA_Init+0x2b0>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	2b77      	cmp	r3, #119	@ 0x77
 800ace6:	d801      	bhi.n	800acec <HAL_DMA_Init+0x2b0>
 800ace8:	2301      	movs	r3, #1
 800acea:	e000      	b.n	800acee <HAL_DMA_Init+0x2b2>
 800acec:	2300      	movs	r3, #0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d003      	beq.n	800acfa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800acf8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	695b      	ldr	r3, [r3, #20]
 800ad08:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	f023 0307 	bic.w	r3, r3, #7
 800ad10:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	d117      	bne.n	800ad54 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00e      	beq.n	800ad54 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f002 fb48 	bl	800d3cc <DMA_CheckFifoParam>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d008      	beq.n	800ad54 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2240      	movs	r2, #64	@ 0x40
 800ad46:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e192      	b.n	800b07a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	697a      	ldr	r2, [r7, #20]
 800ad5a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f002 fa83 	bl	800d268 <DMA_CalcBaseAndBitshift>
 800ad62:	4603      	mov	r3, r0
 800ad64:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad6a:	f003 031f 	and.w	r3, r3, #31
 800ad6e:	223f      	movs	r2, #63	@ 0x3f
 800ad70:	409a      	lsls	r2, r3
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	609a      	str	r2, [r3, #8]
 800ad76:	e0c8      	b.n	800af0a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a38      	ldr	r2, [pc, #224]	@ (800ae60 <HAL_DMA_Init+0x424>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d022      	beq.n	800adc8 <HAL_DMA_Init+0x38c>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a37      	ldr	r2, [pc, #220]	@ (800ae64 <HAL_DMA_Init+0x428>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d01d      	beq.n	800adc8 <HAL_DMA_Init+0x38c>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a35      	ldr	r2, [pc, #212]	@ (800ae68 <HAL_DMA_Init+0x42c>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d018      	beq.n	800adc8 <HAL_DMA_Init+0x38c>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a34      	ldr	r2, [pc, #208]	@ (800ae6c <HAL_DMA_Init+0x430>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d013      	beq.n	800adc8 <HAL_DMA_Init+0x38c>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a32      	ldr	r2, [pc, #200]	@ (800ae70 <HAL_DMA_Init+0x434>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d00e      	beq.n	800adc8 <HAL_DMA_Init+0x38c>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a31      	ldr	r2, [pc, #196]	@ (800ae74 <HAL_DMA_Init+0x438>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d009      	beq.n	800adc8 <HAL_DMA_Init+0x38c>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a2f      	ldr	r2, [pc, #188]	@ (800ae78 <HAL_DMA_Init+0x43c>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d004      	beq.n	800adc8 <HAL_DMA_Init+0x38c>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a2e      	ldr	r2, [pc, #184]	@ (800ae7c <HAL_DMA_Init+0x440>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d101      	bne.n	800adcc <HAL_DMA_Init+0x390>
 800adc8:	2301      	movs	r3, #1
 800adca:	e000      	b.n	800adce <HAL_DMA_Init+0x392>
 800adcc:	2300      	movs	r3, #0
 800adce:	2b00      	cmp	r3, #0
 800add0:	f000 8092 	beq.w	800aef8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a21      	ldr	r2, [pc, #132]	@ (800ae60 <HAL_DMA_Init+0x424>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d021      	beq.n	800ae22 <HAL_DMA_Init+0x3e6>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a20      	ldr	r2, [pc, #128]	@ (800ae64 <HAL_DMA_Init+0x428>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d01c      	beq.n	800ae22 <HAL_DMA_Init+0x3e6>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a1e      	ldr	r2, [pc, #120]	@ (800ae68 <HAL_DMA_Init+0x42c>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d017      	beq.n	800ae22 <HAL_DMA_Init+0x3e6>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a1d      	ldr	r2, [pc, #116]	@ (800ae6c <HAL_DMA_Init+0x430>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d012      	beq.n	800ae22 <HAL_DMA_Init+0x3e6>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a1b      	ldr	r2, [pc, #108]	@ (800ae70 <HAL_DMA_Init+0x434>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d00d      	beq.n	800ae22 <HAL_DMA_Init+0x3e6>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a1a      	ldr	r2, [pc, #104]	@ (800ae74 <HAL_DMA_Init+0x438>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d008      	beq.n	800ae22 <HAL_DMA_Init+0x3e6>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a18      	ldr	r2, [pc, #96]	@ (800ae78 <HAL_DMA_Init+0x43c>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d003      	beq.n	800ae22 <HAL_DMA_Init+0x3e6>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a17      	ldr	r2, [pc, #92]	@ (800ae7c <HAL_DMA_Init+0x440>)
 800ae20:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2202      	movs	r2, #2
 800ae26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	4b10      	ldr	r3, [pc, #64]	@ (800ae80 <HAL_DMA_Init+0x444>)
 800ae3e:	4013      	ands	r3, r2
 800ae40:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	2b40      	cmp	r3, #64	@ 0x40
 800ae48:	d01c      	beq.n	800ae84 <HAL_DMA_Init+0x448>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	2b80      	cmp	r3, #128	@ 0x80
 800ae50:	d102      	bne.n	800ae58 <HAL_DMA_Init+0x41c>
 800ae52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ae56:	e016      	b.n	800ae86 <HAL_DMA_Init+0x44a>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	e014      	b.n	800ae86 <HAL_DMA_Init+0x44a>
 800ae5c:	fe10803f 	.word	0xfe10803f
 800ae60:	58025408 	.word	0x58025408
 800ae64:	5802541c 	.word	0x5802541c
 800ae68:	58025430 	.word	0x58025430
 800ae6c:	58025444 	.word	0x58025444
 800ae70:	58025458 	.word	0x58025458
 800ae74:	5802546c 	.word	0x5802546c
 800ae78:	58025480 	.word	0x58025480
 800ae7c:	58025494 	.word	0x58025494
 800ae80:	fffe000f 	.word	0xfffe000f
 800ae84:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	68d2      	ldr	r2, [r2, #12]
 800ae8a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ae8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800ae94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800ae9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	699b      	ldr	r3, [r3, #24]
 800aea2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800aea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	69db      	ldr	r3, [r3, #28]
 800aeaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800aeac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800aeb4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	697a      	ldr	r2, [r7, #20]
 800aec2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	461a      	mov	r2, r3
 800aeca:	4b6e      	ldr	r3, [pc, #440]	@ (800b084 <HAL_DMA_Init+0x648>)
 800aecc:	4413      	add	r3, r2
 800aece:	4a6e      	ldr	r2, [pc, #440]	@ (800b088 <HAL_DMA_Init+0x64c>)
 800aed0:	fba2 2303 	umull	r2, r3, r2, r3
 800aed4:	091b      	lsrs	r3, r3, #4
 800aed6:	009a      	lsls	r2, r3, #2
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f002 f9c3 	bl	800d268 <DMA_CalcBaseAndBitshift>
 800aee2:	4603      	mov	r3, r0
 800aee4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aeea:	f003 031f 	and.w	r3, r3, #31
 800aeee:	2201      	movs	r2, #1
 800aef0:	409a      	lsls	r2, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	605a      	str	r2, [r3, #4]
 800aef6:	e008      	b.n	800af0a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2240      	movs	r2, #64	@ 0x40
 800aefc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2203      	movs	r2, #3
 800af02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	e0b7      	b.n	800b07a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a5f      	ldr	r2, [pc, #380]	@ (800b08c <HAL_DMA_Init+0x650>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d072      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a5d      	ldr	r2, [pc, #372]	@ (800b090 <HAL_DMA_Init+0x654>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d06d      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a5c      	ldr	r2, [pc, #368]	@ (800b094 <HAL_DMA_Init+0x658>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d068      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a5a      	ldr	r2, [pc, #360]	@ (800b098 <HAL_DMA_Init+0x65c>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d063      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a59      	ldr	r2, [pc, #356]	@ (800b09c <HAL_DMA_Init+0x660>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d05e      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a57      	ldr	r2, [pc, #348]	@ (800b0a0 <HAL_DMA_Init+0x664>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d059      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a56      	ldr	r2, [pc, #344]	@ (800b0a4 <HAL_DMA_Init+0x668>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d054      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a54      	ldr	r2, [pc, #336]	@ (800b0a8 <HAL_DMA_Init+0x66c>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d04f      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a53      	ldr	r2, [pc, #332]	@ (800b0ac <HAL_DMA_Init+0x670>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d04a      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a51      	ldr	r2, [pc, #324]	@ (800b0b0 <HAL_DMA_Init+0x674>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d045      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a50      	ldr	r2, [pc, #320]	@ (800b0b4 <HAL_DMA_Init+0x678>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d040      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a4e      	ldr	r2, [pc, #312]	@ (800b0b8 <HAL_DMA_Init+0x67c>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d03b      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a4d      	ldr	r2, [pc, #308]	@ (800b0bc <HAL_DMA_Init+0x680>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d036      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a4b      	ldr	r2, [pc, #300]	@ (800b0c0 <HAL_DMA_Init+0x684>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d031      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a4a      	ldr	r2, [pc, #296]	@ (800b0c4 <HAL_DMA_Init+0x688>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d02c      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a48      	ldr	r2, [pc, #288]	@ (800b0c8 <HAL_DMA_Init+0x68c>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d027      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a47      	ldr	r2, [pc, #284]	@ (800b0cc <HAL_DMA_Init+0x690>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d022      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a45      	ldr	r2, [pc, #276]	@ (800b0d0 <HAL_DMA_Init+0x694>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d01d      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a44      	ldr	r2, [pc, #272]	@ (800b0d4 <HAL_DMA_Init+0x698>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d018      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a42      	ldr	r2, [pc, #264]	@ (800b0d8 <HAL_DMA_Init+0x69c>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d013      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a41      	ldr	r2, [pc, #260]	@ (800b0dc <HAL_DMA_Init+0x6a0>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d00e      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a3f      	ldr	r2, [pc, #252]	@ (800b0e0 <HAL_DMA_Init+0x6a4>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d009      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a3e      	ldr	r2, [pc, #248]	@ (800b0e4 <HAL_DMA_Init+0x6a8>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d004      	beq.n	800affa <HAL_DMA_Init+0x5be>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a3c      	ldr	r2, [pc, #240]	@ (800b0e8 <HAL_DMA_Init+0x6ac>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d101      	bne.n	800affe <HAL_DMA_Init+0x5c2>
 800affa:	2301      	movs	r3, #1
 800affc:	e000      	b.n	800b000 <HAL_DMA_Init+0x5c4>
 800affe:	2300      	movs	r3, #0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d032      	beq.n	800b06a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f002 fa5d 	bl	800d4c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	2b80      	cmp	r3, #128	@ 0x80
 800b010:	d102      	bne.n	800b018 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b020:	b2d2      	uxtb	r2, r2
 800b022:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b02c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d010      	beq.n	800b058 <HAL_DMA_Init+0x61c>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	2b08      	cmp	r3, #8
 800b03c:	d80c      	bhi.n	800b058 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f002 fada 	bl	800d5f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b054:	605a      	str	r2, [r3, #4]
 800b056:	e008      	b.n	800b06a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	a7fdabf8 	.word	0xa7fdabf8
 800b088:	cccccccd 	.word	0xcccccccd
 800b08c:	40020010 	.word	0x40020010
 800b090:	40020028 	.word	0x40020028
 800b094:	40020040 	.word	0x40020040
 800b098:	40020058 	.word	0x40020058
 800b09c:	40020070 	.word	0x40020070
 800b0a0:	40020088 	.word	0x40020088
 800b0a4:	400200a0 	.word	0x400200a0
 800b0a8:	400200b8 	.word	0x400200b8
 800b0ac:	40020410 	.word	0x40020410
 800b0b0:	40020428 	.word	0x40020428
 800b0b4:	40020440 	.word	0x40020440
 800b0b8:	40020458 	.word	0x40020458
 800b0bc:	40020470 	.word	0x40020470
 800b0c0:	40020488 	.word	0x40020488
 800b0c4:	400204a0 	.word	0x400204a0
 800b0c8:	400204b8 	.word	0x400204b8
 800b0cc:	58025408 	.word	0x58025408
 800b0d0:	5802541c 	.word	0x5802541c
 800b0d4:	58025430 	.word	0x58025430
 800b0d8:	58025444 	.word	0x58025444
 800b0dc:	58025458 	.word	0x58025458
 800b0e0:	5802546c 	.word	0x5802546c
 800b0e4:	58025480 	.word	0x58025480
 800b0e8:	58025494 	.word	0x58025494

0800b0ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	e226      	b.n	800b556 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d101      	bne.n	800b116 <HAL_DMA_Start_IT+0x2a>
 800b112:	2302      	movs	r3, #2
 800b114:	e21f      	b.n	800b556 <HAL_DMA_Start_IT+0x46a>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b01      	cmp	r3, #1
 800b128:	f040 820a 	bne.w	800b540 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2202      	movs	r2, #2
 800b130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a68      	ldr	r2, [pc, #416]	@ (800b2e0 <HAL_DMA_Start_IT+0x1f4>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d04a      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a66      	ldr	r2, [pc, #408]	@ (800b2e4 <HAL_DMA_Start_IT+0x1f8>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d045      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a65      	ldr	r2, [pc, #404]	@ (800b2e8 <HAL_DMA_Start_IT+0x1fc>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d040      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a63      	ldr	r2, [pc, #396]	@ (800b2ec <HAL_DMA_Start_IT+0x200>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d03b      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a62      	ldr	r2, [pc, #392]	@ (800b2f0 <HAL_DMA_Start_IT+0x204>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d036      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a60      	ldr	r2, [pc, #384]	@ (800b2f4 <HAL_DMA_Start_IT+0x208>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d031      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a5f      	ldr	r2, [pc, #380]	@ (800b2f8 <HAL_DMA_Start_IT+0x20c>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d02c      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a5d      	ldr	r2, [pc, #372]	@ (800b2fc <HAL_DMA_Start_IT+0x210>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d027      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a5c      	ldr	r2, [pc, #368]	@ (800b300 <HAL_DMA_Start_IT+0x214>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d022      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a5a      	ldr	r2, [pc, #360]	@ (800b304 <HAL_DMA_Start_IT+0x218>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d01d      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a59      	ldr	r2, [pc, #356]	@ (800b308 <HAL_DMA_Start_IT+0x21c>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d018      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a57      	ldr	r2, [pc, #348]	@ (800b30c <HAL_DMA_Start_IT+0x220>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d013      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a56      	ldr	r2, [pc, #344]	@ (800b310 <HAL_DMA_Start_IT+0x224>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d00e      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a54      	ldr	r2, [pc, #336]	@ (800b314 <HAL_DMA_Start_IT+0x228>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d009      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a53      	ldr	r2, [pc, #332]	@ (800b318 <HAL_DMA_Start_IT+0x22c>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d004      	beq.n	800b1da <HAL_DMA_Start_IT+0xee>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a51      	ldr	r2, [pc, #324]	@ (800b31c <HAL_DMA_Start_IT+0x230>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d108      	bne.n	800b1ec <HAL_DMA_Start_IT+0x100>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f022 0201 	bic.w	r2, r2, #1
 800b1e8:	601a      	str	r2, [r3, #0]
 800b1ea:	e007      	b.n	800b1fc <HAL_DMA_Start_IT+0x110>
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f022 0201 	bic.w	r2, r2, #1
 800b1fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	68b9      	ldr	r1, [r7, #8]
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f001 fe84 	bl	800cf10 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a34      	ldr	r2, [pc, #208]	@ (800b2e0 <HAL_DMA_Start_IT+0x1f4>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d04a      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a33      	ldr	r2, [pc, #204]	@ (800b2e4 <HAL_DMA_Start_IT+0x1f8>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d045      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a31      	ldr	r2, [pc, #196]	@ (800b2e8 <HAL_DMA_Start_IT+0x1fc>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d040      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a30      	ldr	r2, [pc, #192]	@ (800b2ec <HAL_DMA_Start_IT+0x200>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d03b      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a2e      	ldr	r2, [pc, #184]	@ (800b2f0 <HAL_DMA_Start_IT+0x204>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d036      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a2d      	ldr	r2, [pc, #180]	@ (800b2f4 <HAL_DMA_Start_IT+0x208>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d031      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a2b      	ldr	r2, [pc, #172]	@ (800b2f8 <HAL_DMA_Start_IT+0x20c>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d02c      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a2a      	ldr	r2, [pc, #168]	@ (800b2fc <HAL_DMA_Start_IT+0x210>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d027      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a28      	ldr	r2, [pc, #160]	@ (800b300 <HAL_DMA_Start_IT+0x214>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d022      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a27      	ldr	r2, [pc, #156]	@ (800b304 <HAL_DMA_Start_IT+0x218>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d01d      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a25      	ldr	r2, [pc, #148]	@ (800b308 <HAL_DMA_Start_IT+0x21c>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d018      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a24      	ldr	r2, [pc, #144]	@ (800b30c <HAL_DMA_Start_IT+0x220>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d013      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a22      	ldr	r2, [pc, #136]	@ (800b310 <HAL_DMA_Start_IT+0x224>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d00e      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a21      	ldr	r2, [pc, #132]	@ (800b314 <HAL_DMA_Start_IT+0x228>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d009      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a1f      	ldr	r2, [pc, #124]	@ (800b318 <HAL_DMA_Start_IT+0x22c>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d004      	beq.n	800b2a8 <HAL_DMA_Start_IT+0x1bc>
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4a1e      	ldr	r2, [pc, #120]	@ (800b31c <HAL_DMA_Start_IT+0x230>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d101      	bne.n	800b2ac <HAL_DMA_Start_IT+0x1c0>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e000      	b.n	800b2ae <HAL_DMA_Start_IT+0x1c2>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d036      	beq.n	800b320 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f023 021e 	bic.w	r2, r3, #30
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f042 0216 	orr.w	r2, r2, #22
 800b2c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d03e      	beq.n	800b34c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f042 0208 	orr.w	r2, r2, #8
 800b2dc:	601a      	str	r2, [r3, #0]
 800b2de:	e035      	b.n	800b34c <HAL_DMA_Start_IT+0x260>
 800b2e0:	40020010 	.word	0x40020010
 800b2e4:	40020028 	.word	0x40020028
 800b2e8:	40020040 	.word	0x40020040
 800b2ec:	40020058 	.word	0x40020058
 800b2f0:	40020070 	.word	0x40020070
 800b2f4:	40020088 	.word	0x40020088
 800b2f8:	400200a0 	.word	0x400200a0
 800b2fc:	400200b8 	.word	0x400200b8
 800b300:	40020410 	.word	0x40020410
 800b304:	40020428 	.word	0x40020428
 800b308:	40020440 	.word	0x40020440
 800b30c:	40020458 	.word	0x40020458
 800b310:	40020470 	.word	0x40020470
 800b314:	40020488 	.word	0x40020488
 800b318:	400204a0 	.word	0x400204a0
 800b31c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f023 020e 	bic.w	r2, r3, #14
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f042 020a 	orr.w	r2, r2, #10
 800b332:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d007      	beq.n	800b34c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f042 0204 	orr.w	r2, r2, #4
 800b34a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a83      	ldr	r2, [pc, #524]	@ (800b560 <HAL_DMA_Start_IT+0x474>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d072      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a82      	ldr	r2, [pc, #520]	@ (800b564 <HAL_DMA_Start_IT+0x478>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d06d      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a80      	ldr	r2, [pc, #512]	@ (800b568 <HAL_DMA_Start_IT+0x47c>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d068      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a7f      	ldr	r2, [pc, #508]	@ (800b56c <HAL_DMA_Start_IT+0x480>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d063      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a7d      	ldr	r2, [pc, #500]	@ (800b570 <HAL_DMA_Start_IT+0x484>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d05e      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a7c      	ldr	r2, [pc, #496]	@ (800b574 <HAL_DMA_Start_IT+0x488>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d059      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a7a      	ldr	r2, [pc, #488]	@ (800b578 <HAL_DMA_Start_IT+0x48c>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d054      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a79      	ldr	r2, [pc, #484]	@ (800b57c <HAL_DMA_Start_IT+0x490>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d04f      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a77      	ldr	r2, [pc, #476]	@ (800b580 <HAL_DMA_Start_IT+0x494>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d04a      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a76      	ldr	r2, [pc, #472]	@ (800b584 <HAL_DMA_Start_IT+0x498>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d045      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a74      	ldr	r2, [pc, #464]	@ (800b588 <HAL_DMA_Start_IT+0x49c>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d040      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a73      	ldr	r2, [pc, #460]	@ (800b58c <HAL_DMA_Start_IT+0x4a0>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d03b      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a71      	ldr	r2, [pc, #452]	@ (800b590 <HAL_DMA_Start_IT+0x4a4>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d036      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a70      	ldr	r2, [pc, #448]	@ (800b594 <HAL_DMA_Start_IT+0x4a8>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d031      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a6e      	ldr	r2, [pc, #440]	@ (800b598 <HAL_DMA_Start_IT+0x4ac>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d02c      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a6d      	ldr	r2, [pc, #436]	@ (800b59c <HAL_DMA_Start_IT+0x4b0>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d027      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a6b      	ldr	r2, [pc, #428]	@ (800b5a0 <HAL_DMA_Start_IT+0x4b4>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d022      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a6a      	ldr	r2, [pc, #424]	@ (800b5a4 <HAL_DMA_Start_IT+0x4b8>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d01d      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a68      	ldr	r2, [pc, #416]	@ (800b5a8 <HAL_DMA_Start_IT+0x4bc>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d018      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a67      	ldr	r2, [pc, #412]	@ (800b5ac <HAL_DMA_Start_IT+0x4c0>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d013      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a65      	ldr	r2, [pc, #404]	@ (800b5b0 <HAL_DMA_Start_IT+0x4c4>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d00e      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a64      	ldr	r2, [pc, #400]	@ (800b5b4 <HAL_DMA_Start_IT+0x4c8>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d009      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a62      	ldr	r2, [pc, #392]	@ (800b5b8 <HAL_DMA_Start_IT+0x4cc>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d004      	beq.n	800b43c <HAL_DMA_Start_IT+0x350>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a61      	ldr	r2, [pc, #388]	@ (800b5bc <HAL_DMA_Start_IT+0x4d0>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d101      	bne.n	800b440 <HAL_DMA_Start_IT+0x354>
 800b43c:	2301      	movs	r3, #1
 800b43e:	e000      	b.n	800b442 <HAL_DMA_Start_IT+0x356>
 800b440:	2300      	movs	r3, #0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d01a      	beq.n	800b47c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b450:	2b00      	cmp	r3, #0
 800b452:	d007      	beq.n	800b464 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b45e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b462:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d007      	beq.n	800b47c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b476:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b47a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a37      	ldr	r2, [pc, #220]	@ (800b560 <HAL_DMA_Start_IT+0x474>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d04a      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a36      	ldr	r2, [pc, #216]	@ (800b564 <HAL_DMA_Start_IT+0x478>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d045      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a34      	ldr	r2, [pc, #208]	@ (800b568 <HAL_DMA_Start_IT+0x47c>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d040      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a33      	ldr	r2, [pc, #204]	@ (800b56c <HAL_DMA_Start_IT+0x480>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d03b      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a31      	ldr	r2, [pc, #196]	@ (800b570 <HAL_DMA_Start_IT+0x484>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d036      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a30      	ldr	r2, [pc, #192]	@ (800b574 <HAL_DMA_Start_IT+0x488>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d031      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a2e      	ldr	r2, [pc, #184]	@ (800b578 <HAL_DMA_Start_IT+0x48c>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d02c      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a2d      	ldr	r2, [pc, #180]	@ (800b57c <HAL_DMA_Start_IT+0x490>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d027      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a2b      	ldr	r2, [pc, #172]	@ (800b580 <HAL_DMA_Start_IT+0x494>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d022      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a2a      	ldr	r2, [pc, #168]	@ (800b584 <HAL_DMA_Start_IT+0x498>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d01d      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a28      	ldr	r2, [pc, #160]	@ (800b588 <HAL_DMA_Start_IT+0x49c>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d018      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a27      	ldr	r2, [pc, #156]	@ (800b58c <HAL_DMA_Start_IT+0x4a0>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d013      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a25      	ldr	r2, [pc, #148]	@ (800b590 <HAL_DMA_Start_IT+0x4a4>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d00e      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a24      	ldr	r2, [pc, #144]	@ (800b594 <HAL_DMA_Start_IT+0x4a8>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d009      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a22      	ldr	r2, [pc, #136]	@ (800b598 <HAL_DMA_Start_IT+0x4ac>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d004      	beq.n	800b51c <HAL_DMA_Start_IT+0x430>
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a21      	ldr	r2, [pc, #132]	@ (800b59c <HAL_DMA_Start_IT+0x4b0>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d108      	bne.n	800b52e <HAL_DMA_Start_IT+0x442>
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f042 0201 	orr.w	r2, r2, #1
 800b52a:	601a      	str	r2, [r3, #0]
 800b52c:	e012      	b.n	800b554 <HAL_DMA_Start_IT+0x468>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f042 0201 	orr.w	r2, r2, #1
 800b53c:	601a      	str	r2, [r3, #0]
 800b53e:	e009      	b.n	800b554 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b546:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b554:	7dfb      	ldrb	r3, [r7, #23]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3718      	adds	r7, #24
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	40020010 	.word	0x40020010
 800b564:	40020028 	.word	0x40020028
 800b568:	40020040 	.word	0x40020040
 800b56c:	40020058 	.word	0x40020058
 800b570:	40020070 	.word	0x40020070
 800b574:	40020088 	.word	0x40020088
 800b578:	400200a0 	.word	0x400200a0
 800b57c:	400200b8 	.word	0x400200b8
 800b580:	40020410 	.word	0x40020410
 800b584:	40020428 	.word	0x40020428
 800b588:	40020440 	.word	0x40020440
 800b58c:	40020458 	.word	0x40020458
 800b590:	40020470 	.word	0x40020470
 800b594:	40020488 	.word	0x40020488
 800b598:	400204a0 	.word	0x400204a0
 800b59c:	400204b8 	.word	0x400204b8
 800b5a0:	58025408 	.word	0x58025408
 800b5a4:	5802541c 	.word	0x5802541c
 800b5a8:	58025430 	.word	0x58025430
 800b5ac:	58025444 	.word	0x58025444
 800b5b0:	58025458 	.word	0x58025458
 800b5b4:	5802546c 	.word	0x5802546c
 800b5b8:	58025480 	.word	0x58025480
 800b5bc:	58025494 	.word	0x58025494

0800b5c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800b5c8:	f7fd f902 	bl	80087d0 <HAL_GetTick>
 800b5cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e2dc      	b.n	800bb92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d008      	beq.n	800b5f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2280      	movs	r2, #128	@ 0x80
 800b5e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e2cd      	b.n	800bb92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a76      	ldr	r2, [pc, #472]	@ (800b7d4 <HAL_DMA_Abort+0x214>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d04a      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a74      	ldr	r2, [pc, #464]	@ (800b7d8 <HAL_DMA_Abort+0x218>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d045      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a73      	ldr	r2, [pc, #460]	@ (800b7dc <HAL_DMA_Abort+0x21c>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d040      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a71      	ldr	r2, [pc, #452]	@ (800b7e0 <HAL_DMA_Abort+0x220>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d03b      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a70      	ldr	r2, [pc, #448]	@ (800b7e4 <HAL_DMA_Abort+0x224>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d036      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a6e      	ldr	r2, [pc, #440]	@ (800b7e8 <HAL_DMA_Abort+0x228>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d031      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a6d      	ldr	r2, [pc, #436]	@ (800b7ec <HAL_DMA_Abort+0x22c>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d02c      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a6b      	ldr	r2, [pc, #428]	@ (800b7f0 <HAL_DMA_Abort+0x230>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d027      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a6a      	ldr	r2, [pc, #424]	@ (800b7f4 <HAL_DMA_Abort+0x234>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d022      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a68      	ldr	r2, [pc, #416]	@ (800b7f8 <HAL_DMA_Abort+0x238>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d01d      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a67      	ldr	r2, [pc, #412]	@ (800b7fc <HAL_DMA_Abort+0x23c>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d018      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a65      	ldr	r2, [pc, #404]	@ (800b800 <HAL_DMA_Abort+0x240>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d013      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a64      	ldr	r2, [pc, #400]	@ (800b804 <HAL_DMA_Abort+0x244>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d00e      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a62      	ldr	r2, [pc, #392]	@ (800b808 <HAL_DMA_Abort+0x248>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d009      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a61      	ldr	r2, [pc, #388]	@ (800b80c <HAL_DMA_Abort+0x24c>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d004      	beq.n	800b696 <HAL_DMA_Abort+0xd6>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a5f      	ldr	r2, [pc, #380]	@ (800b810 <HAL_DMA_Abort+0x250>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d101      	bne.n	800b69a <HAL_DMA_Abort+0xda>
 800b696:	2301      	movs	r3, #1
 800b698:	e000      	b.n	800b69c <HAL_DMA_Abort+0xdc>
 800b69a:	2300      	movs	r3, #0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d013      	beq.n	800b6c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f022 021e 	bic.w	r2, r2, #30
 800b6ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	695a      	ldr	r2, [r3, #20]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b6be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	617b      	str	r3, [r7, #20]
 800b6c6:	e00a      	b.n	800b6de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f022 020e 	bic.w	r2, r2, #14
 800b6d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a3c      	ldr	r2, [pc, #240]	@ (800b7d4 <HAL_DMA_Abort+0x214>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d072      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a3a      	ldr	r2, [pc, #232]	@ (800b7d8 <HAL_DMA_Abort+0x218>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d06d      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a39      	ldr	r2, [pc, #228]	@ (800b7dc <HAL_DMA_Abort+0x21c>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d068      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a37      	ldr	r2, [pc, #220]	@ (800b7e0 <HAL_DMA_Abort+0x220>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d063      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a36      	ldr	r2, [pc, #216]	@ (800b7e4 <HAL_DMA_Abort+0x224>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d05e      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a34      	ldr	r2, [pc, #208]	@ (800b7e8 <HAL_DMA_Abort+0x228>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d059      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a33      	ldr	r2, [pc, #204]	@ (800b7ec <HAL_DMA_Abort+0x22c>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d054      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a31      	ldr	r2, [pc, #196]	@ (800b7f0 <HAL_DMA_Abort+0x230>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d04f      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a30      	ldr	r2, [pc, #192]	@ (800b7f4 <HAL_DMA_Abort+0x234>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d04a      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a2e      	ldr	r2, [pc, #184]	@ (800b7f8 <HAL_DMA_Abort+0x238>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d045      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a2d      	ldr	r2, [pc, #180]	@ (800b7fc <HAL_DMA_Abort+0x23c>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d040      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a2b      	ldr	r2, [pc, #172]	@ (800b800 <HAL_DMA_Abort+0x240>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d03b      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a2a      	ldr	r2, [pc, #168]	@ (800b804 <HAL_DMA_Abort+0x244>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d036      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a28      	ldr	r2, [pc, #160]	@ (800b808 <HAL_DMA_Abort+0x248>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d031      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a27      	ldr	r2, [pc, #156]	@ (800b80c <HAL_DMA_Abort+0x24c>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d02c      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a25      	ldr	r2, [pc, #148]	@ (800b810 <HAL_DMA_Abort+0x250>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d027      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a24      	ldr	r2, [pc, #144]	@ (800b814 <HAL_DMA_Abort+0x254>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d022      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a22      	ldr	r2, [pc, #136]	@ (800b818 <HAL_DMA_Abort+0x258>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d01d      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a21      	ldr	r2, [pc, #132]	@ (800b81c <HAL_DMA_Abort+0x25c>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d018      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a1f      	ldr	r2, [pc, #124]	@ (800b820 <HAL_DMA_Abort+0x260>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d013      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a1e      	ldr	r2, [pc, #120]	@ (800b824 <HAL_DMA_Abort+0x264>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d00e      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a1c      	ldr	r2, [pc, #112]	@ (800b828 <HAL_DMA_Abort+0x268>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d009      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a1b      	ldr	r2, [pc, #108]	@ (800b82c <HAL_DMA_Abort+0x26c>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d004      	beq.n	800b7ce <HAL_DMA_Abort+0x20e>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a19      	ldr	r2, [pc, #100]	@ (800b830 <HAL_DMA_Abort+0x270>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d132      	bne.n	800b834 <HAL_DMA_Abort+0x274>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e031      	b.n	800b836 <HAL_DMA_Abort+0x276>
 800b7d2:	bf00      	nop
 800b7d4:	40020010 	.word	0x40020010
 800b7d8:	40020028 	.word	0x40020028
 800b7dc:	40020040 	.word	0x40020040
 800b7e0:	40020058 	.word	0x40020058
 800b7e4:	40020070 	.word	0x40020070
 800b7e8:	40020088 	.word	0x40020088
 800b7ec:	400200a0 	.word	0x400200a0
 800b7f0:	400200b8 	.word	0x400200b8
 800b7f4:	40020410 	.word	0x40020410
 800b7f8:	40020428 	.word	0x40020428
 800b7fc:	40020440 	.word	0x40020440
 800b800:	40020458 	.word	0x40020458
 800b804:	40020470 	.word	0x40020470
 800b808:	40020488 	.word	0x40020488
 800b80c:	400204a0 	.word	0x400204a0
 800b810:	400204b8 	.word	0x400204b8
 800b814:	58025408 	.word	0x58025408
 800b818:	5802541c 	.word	0x5802541c
 800b81c:	58025430 	.word	0x58025430
 800b820:	58025444 	.word	0x58025444
 800b824:	58025458 	.word	0x58025458
 800b828:	5802546c 	.word	0x5802546c
 800b82c:	58025480 	.word	0x58025480
 800b830:	58025494 	.word	0x58025494
 800b834:	2300      	movs	r3, #0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d007      	beq.n	800b84a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b844:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b848:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a6d      	ldr	r2, [pc, #436]	@ (800ba04 <HAL_DMA_Abort+0x444>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d04a      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a6b      	ldr	r2, [pc, #428]	@ (800ba08 <HAL_DMA_Abort+0x448>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d045      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a6a      	ldr	r2, [pc, #424]	@ (800ba0c <HAL_DMA_Abort+0x44c>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d040      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a68      	ldr	r2, [pc, #416]	@ (800ba10 <HAL_DMA_Abort+0x450>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d03b      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a67      	ldr	r2, [pc, #412]	@ (800ba14 <HAL_DMA_Abort+0x454>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d036      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a65      	ldr	r2, [pc, #404]	@ (800ba18 <HAL_DMA_Abort+0x458>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d031      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a64      	ldr	r2, [pc, #400]	@ (800ba1c <HAL_DMA_Abort+0x45c>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d02c      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a62      	ldr	r2, [pc, #392]	@ (800ba20 <HAL_DMA_Abort+0x460>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d027      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a61      	ldr	r2, [pc, #388]	@ (800ba24 <HAL_DMA_Abort+0x464>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d022      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a5f      	ldr	r2, [pc, #380]	@ (800ba28 <HAL_DMA_Abort+0x468>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d01d      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a5e      	ldr	r2, [pc, #376]	@ (800ba2c <HAL_DMA_Abort+0x46c>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d018      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a5c      	ldr	r2, [pc, #368]	@ (800ba30 <HAL_DMA_Abort+0x470>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d013      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a5b      	ldr	r2, [pc, #364]	@ (800ba34 <HAL_DMA_Abort+0x474>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d00e      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a59      	ldr	r2, [pc, #356]	@ (800ba38 <HAL_DMA_Abort+0x478>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d009      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a58      	ldr	r2, [pc, #352]	@ (800ba3c <HAL_DMA_Abort+0x47c>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d004      	beq.n	800b8ea <HAL_DMA_Abort+0x32a>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a56      	ldr	r2, [pc, #344]	@ (800ba40 <HAL_DMA_Abort+0x480>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d108      	bne.n	800b8fc <HAL_DMA_Abort+0x33c>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f022 0201 	bic.w	r2, r2, #1
 800b8f8:	601a      	str	r2, [r3, #0]
 800b8fa:	e007      	b.n	800b90c <HAL_DMA_Abort+0x34c>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f022 0201 	bic.w	r2, r2, #1
 800b90a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800b90c:	e013      	b.n	800b936 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b90e:	f7fc ff5f 	bl	80087d0 <HAL_GetTick>
 800b912:	4602      	mov	r2, r0
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	2b05      	cmp	r3, #5
 800b91a:	d90c      	bls.n	800b936 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2220      	movs	r2, #32
 800b920:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2203      	movs	r2, #3
 800b926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	e12d      	b.n	800bb92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 0301 	and.w	r3, r3, #1
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1e5      	bne.n	800b90e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a2f      	ldr	r2, [pc, #188]	@ (800ba04 <HAL_DMA_Abort+0x444>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d04a      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a2d      	ldr	r2, [pc, #180]	@ (800ba08 <HAL_DMA_Abort+0x448>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d045      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a2c      	ldr	r2, [pc, #176]	@ (800ba0c <HAL_DMA_Abort+0x44c>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d040      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a2a      	ldr	r2, [pc, #168]	@ (800ba10 <HAL_DMA_Abort+0x450>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d03b      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a29      	ldr	r2, [pc, #164]	@ (800ba14 <HAL_DMA_Abort+0x454>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d036      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a27      	ldr	r2, [pc, #156]	@ (800ba18 <HAL_DMA_Abort+0x458>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d031      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a26      	ldr	r2, [pc, #152]	@ (800ba1c <HAL_DMA_Abort+0x45c>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d02c      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a24      	ldr	r2, [pc, #144]	@ (800ba20 <HAL_DMA_Abort+0x460>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d027      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a23      	ldr	r2, [pc, #140]	@ (800ba24 <HAL_DMA_Abort+0x464>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d022      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a21      	ldr	r2, [pc, #132]	@ (800ba28 <HAL_DMA_Abort+0x468>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d01d      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a20      	ldr	r2, [pc, #128]	@ (800ba2c <HAL_DMA_Abort+0x46c>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d018      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a1e      	ldr	r2, [pc, #120]	@ (800ba30 <HAL_DMA_Abort+0x470>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d013      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a1d      	ldr	r2, [pc, #116]	@ (800ba34 <HAL_DMA_Abort+0x474>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d00e      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a1b      	ldr	r2, [pc, #108]	@ (800ba38 <HAL_DMA_Abort+0x478>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d009      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a1a      	ldr	r2, [pc, #104]	@ (800ba3c <HAL_DMA_Abort+0x47c>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d004      	beq.n	800b9e2 <HAL_DMA_Abort+0x422>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a18      	ldr	r2, [pc, #96]	@ (800ba40 <HAL_DMA_Abort+0x480>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d101      	bne.n	800b9e6 <HAL_DMA_Abort+0x426>
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e000      	b.n	800b9e8 <HAL_DMA_Abort+0x428>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d02b      	beq.n	800ba44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9f0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9f6:	f003 031f 	and.w	r3, r3, #31
 800b9fa:	223f      	movs	r2, #63	@ 0x3f
 800b9fc:	409a      	lsls	r2, r3
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	609a      	str	r2, [r3, #8]
 800ba02:	e02a      	b.n	800ba5a <HAL_DMA_Abort+0x49a>
 800ba04:	40020010 	.word	0x40020010
 800ba08:	40020028 	.word	0x40020028
 800ba0c:	40020040 	.word	0x40020040
 800ba10:	40020058 	.word	0x40020058
 800ba14:	40020070 	.word	0x40020070
 800ba18:	40020088 	.word	0x40020088
 800ba1c:	400200a0 	.word	0x400200a0
 800ba20:	400200b8 	.word	0x400200b8
 800ba24:	40020410 	.word	0x40020410
 800ba28:	40020428 	.word	0x40020428
 800ba2c:	40020440 	.word	0x40020440
 800ba30:	40020458 	.word	0x40020458
 800ba34:	40020470 	.word	0x40020470
 800ba38:	40020488 	.word	0x40020488
 800ba3c:	400204a0 	.word	0x400204a0
 800ba40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba4e:	f003 031f 	and.w	r3, r3, #31
 800ba52:	2201      	movs	r2, #1
 800ba54:	409a      	lsls	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a4f      	ldr	r2, [pc, #316]	@ (800bb9c <HAL_DMA_Abort+0x5dc>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d072      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a4d      	ldr	r2, [pc, #308]	@ (800bba0 <HAL_DMA_Abort+0x5e0>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d06d      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a4c      	ldr	r2, [pc, #304]	@ (800bba4 <HAL_DMA_Abort+0x5e4>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d068      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a4a      	ldr	r2, [pc, #296]	@ (800bba8 <HAL_DMA_Abort+0x5e8>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d063      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a49      	ldr	r2, [pc, #292]	@ (800bbac <HAL_DMA_Abort+0x5ec>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d05e      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a47      	ldr	r2, [pc, #284]	@ (800bbb0 <HAL_DMA_Abort+0x5f0>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d059      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a46      	ldr	r2, [pc, #280]	@ (800bbb4 <HAL_DMA_Abort+0x5f4>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d054      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a44      	ldr	r2, [pc, #272]	@ (800bbb8 <HAL_DMA_Abort+0x5f8>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d04f      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a43      	ldr	r2, [pc, #268]	@ (800bbbc <HAL_DMA_Abort+0x5fc>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d04a      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a41      	ldr	r2, [pc, #260]	@ (800bbc0 <HAL_DMA_Abort+0x600>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d045      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a40      	ldr	r2, [pc, #256]	@ (800bbc4 <HAL_DMA_Abort+0x604>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d040      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a3e      	ldr	r2, [pc, #248]	@ (800bbc8 <HAL_DMA_Abort+0x608>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d03b      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a3d      	ldr	r2, [pc, #244]	@ (800bbcc <HAL_DMA_Abort+0x60c>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d036      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a3b      	ldr	r2, [pc, #236]	@ (800bbd0 <HAL_DMA_Abort+0x610>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d031      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a3a      	ldr	r2, [pc, #232]	@ (800bbd4 <HAL_DMA_Abort+0x614>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d02c      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a38      	ldr	r2, [pc, #224]	@ (800bbd8 <HAL_DMA_Abort+0x618>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d027      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a37      	ldr	r2, [pc, #220]	@ (800bbdc <HAL_DMA_Abort+0x61c>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d022      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a35      	ldr	r2, [pc, #212]	@ (800bbe0 <HAL_DMA_Abort+0x620>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d01d      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a34      	ldr	r2, [pc, #208]	@ (800bbe4 <HAL_DMA_Abort+0x624>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d018      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a32      	ldr	r2, [pc, #200]	@ (800bbe8 <HAL_DMA_Abort+0x628>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d013      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a31      	ldr	r2, [pc, #196]	@ (800bbec <HAL_DMA_Abort+0x62c>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d00e      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a2f      	ldr	r2, [pc, #188]	@ (800bbf0 <HAL_DMA_Abort+0x630>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d009      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a2e      	ldr	r2, [pc, #184]	@ (800bbf4 <HAL_DMA_Abort+0x634>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d004      	beq.n	800bb4a <HAL_DMA_Abort+0x58a>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a2c      	ldr	r2, [pc, #176]	@ (800bbf8 <HAL_DMA_Abort+0x638>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d101      	bne.n	800bb4e <HAL_DMA_Abort+0x58e>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e000      	b.n	800bb50 <HAL_DMA_Abort+0x590>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d015      	beq.n	800bb80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bb5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00c      	beq.n	800bb80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bb7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3718      	adds	r7, #24
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	40020010 	.word	0x40020010
 800bba0:	40020028 	.word	0x40020028
 800bba4:	40020040 	.word	0x40020040
 800bba8:	40020058 	.word	0x40020058
 800bbac:	40020070 	.word	0x40020070
 800bbb0:	40020088 	.word	0x40020088
 800bbb4:	400200a0 	.word	0x400200a0
 800bbb8:	400200b8 	.word	0x400200b8
 800bbbc:	40020410 	.word	0x40020410
 800bbc0:	40020428 	.word	0x40020428
 800bbc4:	40020440 	.word	0x40020440
 800bbc8:	40020458 	.word	0x40020458
 800bbcc:	40020470 	.word	0x40020470
 800bbd0:	40020488 	.word	0x40020488
 800bbd4:	400204a0 	.word	0x400204a0
 800bbd8:	400204b8 	.word	0x400204b8
 800bbdc:	58025408 	.word	0x58025408
 800bbe0:	5802541c 	.word	0x5802541c
 800bbe4:	58025430 	.word	0x58025430
 800bbe8:	58025444 	.word	0x58025444
 800bbec:	58025458 	.word	0x58025458
 800bbf0:	5802546c 	.word	0x5802546c
 800bbf4:	58025480 	.word	0x58025480
 800bbf8:	58025494 	.word	0x58025494

0800bbfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d101      	bne.n	800bc0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e237      	b.n	800c07e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d004      	beq.n	800bc24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2280      	movs	r2, #128	@ 0x80
 800bc1e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e22c      	b.n	800c07e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a5c      	ldr	r2, [pc, #368]	@ (800bd9c <HAL_DMA_Abort_IT+0x1a0>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d04a      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a5b      	ldr	r2, [pc, #364]	@ (800bda0 <HAL_DMA_Abort_IT+0x1a4>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d045      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a59      	ldr	r2, [pc, #356]	@ (800bda4 <HAL_DMA_Abort_IT+0x1a8>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d040      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a58      	ldr	r2, [pc, #352]	@ (800bda8 <HAL_DMA_Abort_IT+0x1ac>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d03b      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a56      	ldr	r2, [pc, #344]	@ (800bdac <HAL_DMA_Abort_IT+0x1b0>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d036      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a55      	ldr	r2, [pc, #340]	@ (800bdb0 <HAL_DMA_Abort_IT+0x1b4>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d031      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a53      	ldr	r2, [pc, #332]	@ (800bdb4 <HAL_DMA_Abort_IT+0x1b8>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d02c      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a52      	ldr	r2, [pc, #328]	@ (800bdb8 <HAL_DMA_Abort_IT+0x1bc>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d027      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a50      	ldr	r2, [pc, #320]	@ (800bdbc <HAL_DMA_Abort_IT+0x1c0>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d022      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a4f      	ldr	r2, [pc, #316]	@ (800bdc0 <HAL_DMA_Abort_IT+0x1c4>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d01d      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a4d      	ldr	r2, [pc, #308]	@ (800bdc4 <HAL_DMA_Abort_IT+0x1c8>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d018      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a4c      	ldr	r2, [pc, #304]	@ (800bdc8 <HAL_DMA_Abort_IT+0x1cc>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d013      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a4a      	ldr	r2, [pc, #296]	@ (800bdcc <HAL_DMA_Abort_IT+0x1d0>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d00e      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a49      	ldr	r2, [pc, #292]	@ (800bdd0 <HAL_DMA_Abort_IT+0x1d4>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d009      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a47      	ldr	r2, [pc, #284]	@ (800bdd4 <HAL_DMA_Abort_IT+0x1d8>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d004      	beq.n	800bcc4 <HAL_DMA_Abort_IT+0xc8>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a46      	ldr	r2, [pc, #280]	@ (800bdd8 <HAL_DMA_Abort_IT+0x1dc>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d101      	bne.n	800bcc8 <HAL_DMA_Abort_IT+0xcc>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e000      	b.n	800bcca <HAL_DMA_Abort_IT+0xce>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f000 8086 	beq.w	800bddc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2204      	movs	r2, #4
 800bcd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a2f      	ldr	r2, [pc, #188]	@ (800bd9c <HAL_DMA_Abort_IT+0x1a0>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d04a      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a2e      	ldr	r2, [pc, #184]	@ (800bda0 <HAL_DMA_Abort_IT+0x1a4>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d045      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a2c      	ldr	r2, [pc, #176]	@ (800bda4 <HAL_DMA_Abort_IT+0x1a8>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d040      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a2b      	ldr	r2, [pc, #172]	@ (800bda8 <HAL_DMA_Abort_IT+0x1ac>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d03b      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a29      	ldr	r2, [pc, #164]	@ (800bdac <HAL_DMA_Abort_IT+0x1b0>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d036      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a28      	ldr	r2, [pc, #160]	@ (800bdb0 <HAL_DMA_Abort_IT+0x1b4>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d031      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a26      	ldr	r2, [pc, #152]	@ (800bdb4 <HAL_DMA_Abort_IT+0x1b8>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d02c      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a25      	ldr	r2, [pc, #148]	@ (800bdb8 <HAL_DMA_Abort_IT+0x1bc>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d027      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a23      	ldr	r2, [pc, #140]	@ (800bdbc <HAL_DMA_Abort_IT+0x1c0>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d022      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a22      	ldr	r2, [pc, #136]	@ (800bdc0 <HAL_DMA_Abort_IT+0x1c4>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d01d      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a20      	ldr	r2, [pc, #128]	@ (800bdc4 <HAL_DMA_Abort_IT+0x1c8>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d018      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a1f      	ldr	r2, [pc, #124]	@ (800bdc8 <HAL_DMA_Abort_IT+0x1cc>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d013      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a1d      	ldr	r2, [pc, #116]	@ (800bdcc <HAL_DMA_Abort_IT+0x1d0>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d00e      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a1c      	ldr	r2, [pc, #112]	@ (800bdd0 <HAL_DMA_Abort_IT+0x1d4>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d009      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a1a      	ldr	r2, [pc, #104]	@ (800bdd4 <HAL_DMA_Abort_IT+0x1d8>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d004      	beq.n	800bd78 <HAL_DMA_Abort_IT+0x17c>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a19      	ldr	r2, [pc, #100]	@ (800bdd8 <HAL_DMA_Abort_IT+0x1dc>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d108      	bne.n	800bd8a <HAL_DMA_Abort_IT+0x18e>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f022 0201 	bic.w	r2, r2, #1
 800bd86:	601a      	str	r2, [r3, #0]
 800bd88:	e178      	b.n	800c07c <HAL_DMA_Abort_IT+0x480>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f022 0201 	bic.w	r2, r2, #1
 800bd98:	601a      	str	r2, [r3, #0]
 800bd9a:	e16f      	b.n	800c07c <HAL_DMA_Abort_IT+0x480>
 800bd9c:	40020010 	.word	0x40020010
 800bda0:	40020028 	.word	0x40020028
 800bda4:	40020040 	.word	0x40020040
 800bda8:	40020058 	.word	0x40020058
 800bdac:	40020070 	.word	0x40020070
 800bdb0:	40020088 	.word	0x40020088
 800bdb4:	400200a0 	.word	0x400200a0
 800bdb8:	400200b8 	.word	0x400200b8
 800bdbc:	40020410 	.word	0x40020410
 800bdc0:	40020428 	.word	0x40020428
 800bdc4:	40020440 	.word	0x40020440
 800bdc8:	40020458 	.word	0x40020458
 800bdcc:	40020470 	.word	0x40020470
 800bdd0:	40020488 	.word	0x40020488
 800bdd4:	400204a0 	.word	0x400204a0
 800bdd8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f022 020e 	bic.w	r2, r2, #14
 800bdea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a6c      	ldr	r2, [pc, #432]	@ (800bfa4 <HAL_DMA_Abort_IT+0x3a8>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d04a      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a6b      	ldr	r2, [pc, #428]	@ (800bfa8 <HAL_DMA_Abort_IT+0x3ac>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d045      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a69      	ldr	r2, [pc, #420]	@ (800bfac <HAL_DMA_Abort_IT+0x3b0>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d040      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a68      	ldr	r2, [pc, #416]	@ (800bfb0 <HAL_DMA_Abort_IT+0x3b4>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d03b      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a66      	ldr	r2, [pc, #408]	@ (800bfb4 <HAL_DMA_Abort_IT+0x3b8>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d036      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a65      	ldr	r2, [pc, #404]	@ (800bfb8 <HAL_DMA_Abort_IT+0x3bc>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d031      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a63      	ldr	r2, [pc, #396]	@ (800bfbc <HAL_DMA_Abort_IT+0x3c0>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d02c      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a62      	ldr	r2, [pc, #392]	@ (800bfc0 <HAL_DMA_Abort_IT+0x3c4>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d027      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a60      	ldr	r2, [pc, #384]	@ (800bfc4 <HAL_DMA_Abort_IT+0x3c8>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d022      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a5f      	ldr	r2, [pc, #380]	@ (800bfc8 <HAL_DMA_Abort_IT+0x3cc>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d01d      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a5d      	ldr	r2, [pc, #372]	@ (800bfcc <HAL_DMA_Abort_IT+0x3d0>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d018      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a5c      	ldr	r2, [pc, #368]	@ (800bfd0 <HAL_DMA_Abort_IT+0x3d4>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d013      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a5a      	ldr	r2, [pc, #360]	@ (800bfd4 <HAL_DMA_Abort_IT+0x3d8>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d00e      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a59      	ldr	r2, [pc, #356]	@ (800bfd8 <HAL_DMA_Abort_IT+0x3dc>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d009      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a57      	ldr	r2, [pc, #348]	@ (800bfdc <HAL_DMA_Abort_IT+0x3e0>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d004      	beq.n	800be8c <HAL_DMA_Abort_IT+0x290>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a56      	ldr	r2, [pc, #344]	@ (800bfe0 <HAL_DMA_Abort_IT+0x3e4>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d108      	bne.n	800be9e <HAL_DMA_Abort_IT+0x2a2>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f022 0201 	bic.w	r2, r2, #1
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	e007      	b.n	800beae <HAL_DMA_Abort_IT+0x2b2>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f022 0201 	bic.w	r2, r2, #1
 800beac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a3c      	ldr	r2, [pc, #240]	@ (800bfa4 <HAL_DMA_Abort_IT+0x3a8>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d072      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a3a      	ldr	r2, [pc, #232]	@ (800bfa8 <HAL_DMA_Abort_IT+0x3ac>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d06d      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a39      	ldr	r2, [pc, #228]	@ (800bfac <HAL_DMA_Abort_IT+0x3b0>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d068      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a37      	ldr	r2, [pc, #220]	@ (800bfb0 <HAL_DMA_Abort_IT+0x3b4>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d063      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a36      	ldr	r2, [pc, #216]	@ (800bfb4 <HAL_DMA_Abort_IT+0x3b8>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d05e      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a34      	ldr	r2, [pc, #208]	@ (800bfb8 <HAL_DMA_Abort_IT+0x3bc>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d059      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a33      	ldr	r2, [pc, #204]	@ (800bfbc <HAL_DMA_Abort_IT+0x3c0>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d054      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a31      	ldr	r2, [pc, #196]	@ (800bfc0 <HAL_DMA_Abort_IT+0x3c4>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d04f      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a30      	ldr	r2, [pc, #192]	@ (800bfc4 <HAL_DMA_Abort_IT+0x3c8>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d04a      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a2e      	ldr	r2, [pc, #184]	@ (800bfc8 <HAL_DMA_Abort_IT+0x3cc>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d045      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a2d      	ldr	r2, [pc, #180]	@ (800bfcc <HAL_DMA_Abort_IT+0x3d0>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d040      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a2b      	ldr	r2, [pc, #172]	@ (800bfd0 <HAL_DMA_Abort_IT+0x3d4>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d03b      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a2a      	ldr	r2, [pc, #168]	@ (800bfd4 <HAL_DMA_Abort_IT+0x3d8>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d036      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a28      	ldr	r2, [pc, #160]	@ (800bfd8 <HAL_DMA_Abort_IT+0x3dc>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d031      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a27      	ldr	r2, [pc, #156]	@ (800bfdc <HAL_DMA_Abort_IT+0x3e0>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d02c      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a25      	ldr	r2, [pc, #148]	@ (800bfe0 <HAL_DMA_Abort_IT+0x3e4>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d027      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a24      	ldr	r2, [pc, #144]	@ (800bfe4 <HAL_DMA_Abort_IT+0x3e8>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d022      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a22      	ldr	r2, [pc, #136]	@ (800bfe8 <HAL_DMA_Abort_IT+0x3ec>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d01d      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a21      	ldr	r2, [pc, #132]	@ (800bfec <HAL_DMA_Abort_IT+0x3f0>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d018      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a1f      	ldr	r2, [pc, #124]	@ (800bff0 <HAL_DMA_Abort_IT+0x3f4>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d013      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a1e      	ldr	r2, [pc, #120]	@ (800bff4 <HAL_DMA_Abort_IT+0x3f8>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d00e      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a1c      	ldr	r2, [pc, #112]	@ (800bff8 <HAL_DMA_Abort_IT+0x3fc>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d009      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a1b      	ldr	r2, [pc, #108]	@ (800bffc <HAL_DMA_Abort_IT+0x400>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d004      	beq.n	800bf9e <HAL_DMA_Abort_IT+0x3a2>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a19      	ldr	r2, [pc, #100]	@ (800c000 <HAL_DMA_Abort_IT+0x404>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d132      	bne.n	800c004 <HAL_DMA_Abort_IT+0x408>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e031      	b.n	800c006 <HAL_DMA_Abort_IT+0x40a>
 800bfa2:	bf00      	nop
 800bfa4:	40020010 	.word	0x40020010
 800bfa8:	40020028 	.word	0x40020028
 800bfac:	40020040 	.word	0x40020040
 800bfb0:	40020058 	.word	0x40020058
 800bfb4:	40020070 	.word	0x40020070
 800bfb8:	40020088 	.word	0x40020088
 800bfbc:	400200a0 	.word	0x400200a0
 800bfc0:	400200b8 	.word	0x400200b8
 800bfc4:	40020410 	.word	0x40020410
 800bfc8:	40020428 	.word	0x40020428
 800bfcc:	40020440 	.word	0x40020440
 800bfd0:	40020458 	.word	0x40020458
 800bfd4:	40020470 	.word	0x40020470
 800bfd8:	40020488 	.word	0x40020488
 800bfdc:	400204a0 	.word	0x400204a0
 800bfe0:	400204b8 	.word	0x400204b8
 800bfe4:	58025408 	.word	0x58025408
 800bfe8:	5802541c 	.word	0x5802541c
 800bfec:	58025430 	.word	0x58025430
 800bff0:	58025444 	.word	0x58025444
 800bff4:	58025458 	.word	0x58025458
 800bff8:	5802546c 	.word	0x5802546c
 800bffc:	58025480 	.word	0x58025480
 800c000:	58025494 	.word	0x58025494
 800c004:	2300      	movs	r3, #0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d028      	beq.n	800c05c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c014:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c018:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c01e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c024:	f003 031f 	and.w	r3, r3, #31
 800c028:	2201      	movs	r2, #1
 800c02a:	409a      	lsls	r2, r3
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c038:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00c      	beq.n	800c05c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c04c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c050:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c05a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c070:	2b00      	cmp	r3, #0
 800c072:	d003      	beq.n	800c07c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop

0800c088 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b08a      	sub	sp, #40	@ 0x28
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800c090:	2300      	movs	r3, #0
 800c092:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c094:	4b67      	ldr	r3, [pc, #412]	@ (800c234 <HAL_DMA_IRQHandler+0x1ac>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a67      	ldr	r2, [pc, #412]	@ (800c238 <HAL_DMA_IRQHandler+0x1b0>)
 800c09a:	fba2 2303 	umull	r2, r3, r2, r3
 800c09e:	0a9b      	lsrs	r3, r3, #10
 800c0a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800c0ae:	6a3b      	ldr	r3, [r7, #32]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a5f      	ldr	r2, [pc, #380]	@ (800c23c <HAL_DMA_IRQHandler+0x1b4>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d04a      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a5d      	ldr	r2, [pc, #372]	@ (800c240 <HAL_DMA_IRQHandler+0x1b8>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d045      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a5c      	ldr	r2, [pc, #368]	@ (800c244 <HAL_DMA_IRQHandler+0x1bc>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d040      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a5a      	ldr	r2, [pc, #360]	@ (800c248 <HAL_DMA_IRQHandler+0x1c0>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d03b      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a59      	ldr	r2, [pc, #356]	@ (800c24c <HAL_DMA_IRQHandler+0x1c4>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d036      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a57      	ldr	r2, [pc, #348]	@ (800c250 <HAL_DMA_IRQHandler+0x1c8>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d031      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a56      	ldr	r2, [pc, #344]	@ (800c254 <HAL_DMA_IRQHandler+0x1cc>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d02c      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a54      	ldr	r2, [pc, #336]	@ (800c258 <HAL_DMA_IRQHandler+0x1d0>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d027      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a53      	ldr	r2, [pc, #332]	@ (800c25c <HAL_DMA_IRQHandler+0x1d4>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d022      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a51      	ldr	r2, [pc, #324]	@ (800c260 <HAL_DMA_IRQHandler+0x1d8>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d01d      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a50      	ldr	r2, [pc, #320]	@ (800c264 <HAL_DMA_IRQHandler+0x1dc>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d018      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a4e      	ldr	r2, [pc, #312]	@ (800c268 <HAL_DMA_IRQHandler+0x1e0>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d013      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a4d      	ldr	r2, [pc, #308]	@ (800c26c <HAL_DMA_IRQHandler+0x1e4>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d00e      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a4b      	ldr	r2, [pc, #300]	@ (800c270 <HAL_DMA_IRQHandler+0x1e8>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d009      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a4a      	ldr	r2, [pc, #296]	@ (800c274 <HAL_DMA_IRQHandler+0x1ec>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d004      	beq.n	800c15a <HAL_DMA_IRQHandler+0xd2>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a48      	ldr	r2, [pc, #288]	@ (800c278 <HAL_DMA_IRQHandler+0x1f0>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d101      	bne.n	800c15e <HAL_DMA_IRQHandler+0xd6>
 800c15a:	2301      	movs	r3, #1
 800c15c:	e000      	b.n	800c160 <HAL_DMA_IRQHandler+0xd8>
 800c15e:	2300      	movs	r3, #0
 800c160:	2b00      	cmp	r3, #0
 800c162:	f000 842b 	beq.w	800c9bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c16a:	f003 031f 	and.w	r3, r3, #31
 800c16e:	2208      	movs	r2, #8
 800c170:	409a      	lsls	r2, r3
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	4013      	ands	r3, r2
 800c176:	2b00      	cmp	r3, #0
 800c178:	f000 80a2 	beq.w	800c2c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a2e      	ldr	r2, [pc, #184]	@ (800c23c <HAL_DMA_IRQHandler+0x1b4>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d04a      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a2d      	ldr	r2, [pc, #180]	@ (800c240 <HAL_DMA_IRQHandler+0x1b8>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d045      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a2b      	ldr	r2, [pc, #172]	@ (800c244 <HAL_DMA_IRQHandler+0x1bc>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d040      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a2a      	ldr	r2, [pc, #168]	@ (800c248 <HAL_DMA_IRQHandler+0x1c0>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d03b      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a28      	ldr	r2, [pc, #160]	@ (800c24c <HAL_DMA_IRQHandler+0x1c4>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d036      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a27      	ldr	r2, [pc, #156]	@ (800c250 <HAL_DMA_IRQHandler+0x1c8>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d031      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a25      	ldr	r2, [pc, #148]	@ (800c254 <HAL_DMA_IRQHandler+0x1cc>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d02c      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a24      	ldr	r2, [pc, #144]	@ (800c258 <HAL_DMA_IRQHandler+0x1d0>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d027      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a22      	ldr	r2, [pc, #136]	@ (800c25c <HAL_DMA_IRQHandler+0x1d4>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d022      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a21      	ldr	r2, [pc, #132]	@ (800c260 <HAL_DMA_IRQHandler+0x1d8>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d01d      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a1f      	ldr	r2, [pc, #124]	@ (800c264 <HAL_DMA_IRQHandler+0x1dc>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d018      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a1e      	ldr	r2, [pc, #120]	@ (800c268 <HAL_DMA_IRQHandler+0x1e0>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d013      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a1c      	ldr	r2, [pc, #112]	@ (800c26c <HAL_DMA_IRQHandler+0x1e4>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d00e      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a1b      	ldr	r2, [pc, #108]	@ (800c270 <HAL_DMA_IRQHandler+0x1e8>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d009      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a19      	ldr	r2, [pc, #100]	@ (800c274 <HAL_DMA_IRQHandler+0x1ec>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d004      	beq.n	800c21c <HAL_DMA_IRQHandler+0x194>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a18      	ldr	r2, [pc, #96]	@ (800c278 <HAL_DMA_IRQHandler+0x1f0>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d12f      	bne.n	800c27c <HAL_DMA_IRQHandler+0x1f4>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f003 0304 	and.w	r3, r3, #4
 800c226:	2b00      	cmp	r3, #0
 800c228:	bf14      	ite	ne
 800c22a:	2301      	movne	r3, #1
 800c22c:	2300      	moveq	r3, #0
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	e02e      	b.n	800c290 <HAL_DMA_IRQHandler+0x208>
 800c232:	bf00      	nop
 800c234:	24000004 	.word	0x24000004
 800c238:	1b4e81b5 	.word	0x1b4e81b5
 800c23c:	40020010 	.word	0x40020010
 800c240:	40020028 	.word	0x40020028
 800c244:	40020040 	.word	0x40020040
 800c248:	40020058 	.word	0x40020058
 800c24c:	40020070 	.word	0x40020070
 800c250:	40020088 	.word	0x40020088
 800c254:	400200a0 	.word	0x400200a0
 800c258:	400200b8 	.word	0x400200b8
 800c25c:	40020410 	.word	0x40020410
 800c260:	40020428 	.word	0x40020428
 800c264:	40020440 	.word	0x40020440
 800c268:	40020458 	.word	0x40020458
 800c26c:	40020470 	.word	0x40020470
 800c270:	40020488 	.word	0x40020488
 800c274:	400204a0 	.word	0x400204a0
 800c278:	400204b8 	.word	0x400204b8
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f003 0308 	and.w	r3, r3, #8
 800c286:	2b00      	cmp	r3, #0
 800c288:	bf14      	ite	ne
 800c28a:	2301      	movne	r3, #1
 800c28c:	2300      	moveq	r3, #0
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	2b00      	cmp	r3, #0
 800c292:	d015      	beq.n	800c2c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f022 0204 	bic.w	r2, r2, #4
 800c2a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2a8:	f003 031f 	and.w	r3, r3, #31
 800c2ac:	2208      	movs	r2, #8
 800c2ae:	409a      	lsls	r2, r3
 800c2b0:	6a3b      	ldr	r3, [r7, #32]
 800c2b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2b8:	f043 0201 	orr.w	r2, r3, #1
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2c4:	f003 031f 	and.w	r3, r3, #31
 800c2c8:	69ba      	ldr	r2, [r7, #24]
 800c2ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c2ce:	f003 0301 	and.w	r3, r3, #1
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d06e      	beq.n	800c3b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a69      	ldr	r2, [pc, #420]	@ (800c480 <HAL_DMA_IRQHandler+0x3f8>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d04a      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a67      	ldr	r2, [pc, #412]	@ (800c484 <HAL_DMA_IRQHandler+0x3fc>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d045      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a66      	ldr	r2, [pc, #408]	@ (800c488 <HAL_DMA_IRQHandler+0x400>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d040      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a64      	ldr	r2, [pc, #400]	@ (800c48c <HAL_DMA_IRQHandler+0x404>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d03b      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a63      	ldr	r2, [pc, #396]	@ (800c490 <HAL_DMA_IRQHandler+0x408>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d036      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a61      	ldr	r2, [pc, #388]	@ (800c494 <HAL_DMA_IRQHandler+0x40c>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d031      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a60      	ldr	r2, [pc, #384]	@ (800c498 <HAL_DMA_IRQHandler+0x410>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d02c      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a5e      	ldr	r2, [pc, #376]	@ (800c49c <HAL_DMA_IRQHandler+0x414>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d027      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a5d      	ldr	r2, [pc, #372]	@ (800c4a0 <HAL_DMA_IRQHandler+0x418>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d022      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a5b      	ldr	r2, [pc, #364]	@ (800c4a4 <HAL_DMA_IRQHandler+0x41c>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d01d      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a5a      	ldr	r2, [pc, #360]	@ (800c4a8 <HAL_DMA_IRQHandler+0x420>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d018      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a58      	ldr	r2, [pc, #352]	@ (800c4ac <HAL_DMA_IRQHandler+0x424>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d013      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a57      	ldr	r2, [pc, #348]	@ (800c4b0 <HAL_DMA_IRQHandler+0x428>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d00e      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a55      	ldr	r2, [pc, #340]	@ (800c4b4 <HAL_DMA_IRQHandler+0x42c>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d009      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a54      	ldr	r2, [pc, #336]	@ (800c4b8 <HAL_DMA_IRQHandler+0x430>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d004      	beq.n	800c376 <HAL_DMA_IRQHandler+0x2ee>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a52      	ldr	r2, [pc, #328]	@ (800c4bc <HAL_DMA_IRQHandler+0x434>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d10a      	bne.n	800c38c <HAL_DMA_IRQHandler+0x304>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	695b      	ldr	r3, [r3, #20]
 800c37c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c380:	2b00      	cmp	r3, #0
 800c382:	bf14      	ite	ne
 800c384:	2301      	movne	r3, #1
 800c386:	2300      	moveq	r3, #0
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	e003      	b.n	800c394 <HAL_DMA_IRQHandler+0x30c>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2300      	movs	r3, #0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00d      	beq.n	800c3b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c39c:	f003 031f 	and.w	r3, r3, #31
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	409a      	lsls	r2, r3
 800c3a4:	6a3b      	ldr	r3, [r7, #32]
 800c3a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3ac:	f043 0202 	orr.w	r2, r3, #2
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3b8:	f003 031f 	and.w	r3, r3, #31
 800c3bc:	2204      	movs	r2, #4
 800c3be:	409a      	lsls	r2, r3
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f000 808f 	beq.w	800c4e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a2c      	ldr	r2, [pc, #176]	@ (800c480 <HAL_DMA_IRQHandler+0x3f8>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d04a      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a2a      	ldr	r2, [pc, #168]	@ (800c484 <HAL_DMA_IRQHandler+0x3fc>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d045      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a29      	ldr	r2, [pc, #164]	@ (800c488 <HAL_DMA_IRQHandler+0x400>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d040      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a27      	ldr	r2, [pc, #156]	@ (800c48c <HAL_DMA_IRQHandler+0x404>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d03b      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a26      	ldr	r2, [pc, #152]	@ (800c490 <HAL_DMA_IRQHandler+0x408>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d036      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a24      	ldr	r2, [pc, #144]	@ (800c494 <HAL_DMA_IRQHandler+0x40c>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d031      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a23      	ldr	r2, [pc, #140]	@ (800c498 <HAL_DMA_IRQHandler+0x410>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d02c      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a21      	ldr	r2, [pc, #132]	@ (800c49c <HAL_DMA_IRQHandler+0x414>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d027      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a20      	ldr	r2, [pc, #128]	@ (800c4a0 <HAL_DMA_IRQHandler+0x418>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d022      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a1e      	ldr	r2, [pc, #120]	@ (800c4a4 <HAL_DMA_IRQHandler+0x41c>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d01d      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a1d      	ldr	r2, [pc, #116]	@ (800c4a8 <HAL_DMA_IRQHandler+0x420>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d018      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a1b      	ldr	r2, [pc, #108]	@ (800c4ac <HAL_DMA_IRQHandler+0x424>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d013      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a1a      	ldr	r2, [pc, #104]	@ (800c4b0 <HAL_DMA_IRQHandler+0x428>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d00e      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a18      	ldr	r2, [pc, #96]	@ (800c4b4 <HAL_DMA_IRQHandler+0x42c>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d009      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a17      	ldr	r2, [pc, #92]	@ (800c4b8 <HAL_DMA_IRQHandler+0x430>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d004      	beq.n	800c46a <HAL_DMA_IRQHandler+0x3e2>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a15      	ldr	r2, [pc, #84]	@ (800c4bc <HAL_DMA_IRQHandler+0x434>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d12a      	bne.n	800c4c0 <HAL_DMA_IRQHandler+0x438>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f003 0302 	and.w	r3, r3, #2
 800c474:	2b00      	cmp	r3, #0
 800c476:	bf14      	ite	ne
 800c478:	2301      	movne	r3, #1
 800c47a:	2300      	moveq	r3, #0
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	e023      	b.n	800c4c8 <HAL_DMA_IRQHandler+0x440>
 800c480:	40020010 	.word	0x40020010
 800c484:	40020028 	.word	0x40020028
 800c488:	40020040 	.word	0x40020040
 800c48c:	40020058 	.word	0x40020058
 800c490:	40020070 	.word	0x40020070
 800c494:	40020088 	.word	0x40020088
 800c498:	400200a0 	.word	0x400200a0
 800c49c:	400200b8 	.word	0x400200b8
 800c4a0:	40020410 	.word	0x40020410
 800c4a4:	40020428 	.word	0x40020428
 800c4a8:	40020440 	.word	0x40020440
 800c4ac:	40020458 	.word	0x40020458
 800c4b0:	40020470 	.word	0x40020470
 800c4b4:	40020488 	.word	0x40020488
 800c4b8:	400204a0 	.word	0x400204a0
 800c4bc:	400204b8 	.word	0x400204b8
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00d      	beq.n	800c4e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4d0:	f003 031f 	and.w	r3, r3, #31
 800c4d4:	2204      	movs	r2, #4
 800c4d6:	409a      	lsls	r2, r3
 800c4d8:	6a3b      	ldr	r3, [r7, #32]
 800c4da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4e0:	f043 0204 	orr.w	r2, r3, #4
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4ec:	f003 031f 	and.w	r3, r3, #31
 800c4f0:	2210      	movs	r2, #16
 800c4f2:	409a      	lsls	r2, r3
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 80a6 	beq.w	800c64a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a85      	ldr	r2, [pc, #532]	@ (800c718 <HAL_DMA_IRQHandler+0x690>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d04a      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a83      	ldr	r2, [pc, #524]	@ (800c71c <HAL_DMA_IRQHandler+0x694>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d045      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a82      	ldr	r2, [pc, #520]	@ (800c720 <HAL_DMA_IRQHandler+0x698>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d040      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a80      	ldr	r2, [pc, #512]	@ (800c724 <HAL_DMA_IRQHandler+0x69c>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d03b      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a7f      	ldr	r2, [pc, #508]	@ (800c728 <HAL_DMA_IRQHandler+0x6a0>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d036      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a7d      	ldr	r2, [pc, #500]	@ (800c72c <HAL_DMA_IRQHandler+0x6a4>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d031      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a7c      	ldr	r2, [pc, #496]	@ (800c730 <HAL_DMA_IRQHandler+0x6a8>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d02c      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a7a      	ldr	r2, [pc, #488]	@ (800c734 <HAL_DMA_IRQHandler+0x6ac>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d027      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4a79      	ldr	r2, [pc, #484]	@ (800c738 <HAL_DMA_IRQHandler+0x6b0>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d022      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a77      	ldr	r2, [pc, #476]	@ (800c73c <HAL_DMA_IRQHandler+0x6b4>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d01d      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a76      	ldr	r2, [pc, #472]	@ (800c740 <HAL_DMA_IRQHandler+0x6b8>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d018      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a74      	ldr	r2, [pc, #464]	@ (800c744 <HAL_DMA_IRQHandler+0x6bc>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d013      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a73      	ldr	r2, [pc, #460]	@ (800c748 <HAL_DMA_IRQHandler+0x6c0>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d00e      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4a71      	ldr	r2, [pc, #452]	@ (800c74c <HAL_DMA_IRQHandler+0x6c4>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d009      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a70      	ldr	r2, [pc, #448]	@ (800c750 <HAL_DMA_IRQHandler+0x6c8>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d004      	beq.n	800c59e <HAL_DMA_IRQHandler+0x516>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a6e      	ldr	r2, [pc, #440]	@ (800c754 <HAL_DMA_IRQHandler+0x6cc>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d10a      	bne.n	800c5b4 <HAL_DMA_IRQHandler+0x52c>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 0308 	and.w	r3, r3, #8
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	bf14      	ite	ne
 800c5ac:	2301      	movne	r3, #1
 800c5ae:	2300      	moveq	r3, #0
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	e009      	b.n	800c5c8 <HAL_DMA_IRQHandler+0x540>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f003 0304 	and.w	r3, r3, #4
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	bf14      	ite	ne
 800c5c2:	2301      	movne	r3, #1
 800c5c4:	2300      	moveq	r3, #0
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d03e      	beq.n	800c64a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5d0:	f003 031f 	and.w	r3, r3, #31
 800c5d4:	2210      	movs	r2, #16
 800c5d6:	409a      	lsls	r2, r3
 800c5d8:	6a3b      	ldr	r3, [r7, #32]
 800c5da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d018      	beq.n	800c61c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d108      	bne.n	800c60a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d024      	beq.n	800c64a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	4798      	blx	r3
 800c608:	e01f      	b.n	800c64a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d01b      	beq.n	800c64a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	4798      	blx	r3
 800c61a:	e016      	b.n	800c64a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c626:	2b00      	cmp	r3, #0
 800c628:	d107      	bne.n	800c63a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f022 0208 	bic.w	r2, r2, #8
 800c638:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d003      	beq.n	800c64a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c64e:	f003 031f 	and.w	r3, r3, #31
 800c652:	2220      	movs	r2, #32
 800c654:	409a      	lsls	r2, r3
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	4013      	ands	r3, r2
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f000 8110 	beq.w	800c880 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a2c      	ldr	r2, [pc, #176]	@ (800c718 <HAL_DMA_IRQHandler+0x690>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d04a      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a2b      	ldr	r2, [pc, #172]	@ (800c71c <HAL_DMA_IRQHandler+0x694>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d045      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a29      	ldr	r2, [pc, #164]	@ (800c720 <HAL_DMA_IRQHandler+0x698>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d040      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a28      	ldr	r2, [pc, #160]	@ (800c724 <HAL_DMA_IRQHandler+0x69c>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d03b      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a26      	ldr	r2, [pc, #152]	@ (800c728 <HAL_DMA_IRQHandler+0x6a0>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d036      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a25      	ldr	r2, [pc, #148]	@ (800c72c <HAL_DMA_IRQHandler+0x6a4>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d031      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a23      	ldr	r2, [pc, #140]	@ (800c730 <HAL_DMA_IRQHandler+0x6a8>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d02c      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a22      	ldr	r2, [pc, #136]	@ (800c734 <HAL_DMA_IRQHandler+0x6ac>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d027      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a20      	ldr	r2, [pc, #128]	@ (800c738 <HAL_DMA_IRQHandler+0x6b0>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d022      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4a1f      	ldr	r2, [pc, #124]	@ (800c73c <HAL_DMA_IRQHandler+0x6b4>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d01d      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c740 <HAL_DMA_IRQHandler+0x6b8>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d018      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a1c      	ldr	r2, [pc, #112]	@ (800c744 <HAL_DMA_IRQHandler+0x6bc>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d013      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a1a      	ldr	r2, [pc, #104]	@ (800c748 <HAL_DMA_IRQHandler+0x6c0>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d00e      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a19      	ldr	r2, [pc, #100]	@ (800c74c <HAL_DMA_IRQHandler+0x6c4>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d009      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a17      	ldr	r2, [pc, #92]	@ (800c750 <HAL_DMA_IRQHandler+0x6c8>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d004      	beq.n	800c700 <HAL_DMA_IRQHandler+0x678>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a16      	ldr	r2, [pc, #88]	@ (800c754 <HAL_DMA_IRQHandler+0x6cc>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d12b      	bne.n	800c758 <HAL_DMA_IRQHandler+0x6d0>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f003 0310 	and.w	r3, r3, #16
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	bf14      	ite	ne
 800c70e:	2301      	movne	r3, #1
 800c710:	2300      	moveq	r3, #0
 800c712:	b2db      	uxtb	r3, r3
 800c714:	e02a      	b.n	800c76c <HAL_DMA_IRQHandler+0x6e4>
 800c716:	bf00      	nop
 800c718:	40020010 	.word	0x40020010
 800c71c:	40020028 	.word	0x40020028
 800c720:	40020040 	.word	0x40020040
 800c724:	40020058 	.word	0x40020058
 800c728:	40020070 	.word	0x40020070
 800c72c:	40020088 	.word	0x40020088
 800c730:	400200a0 	.word	0x400200a0
 800c734:	400200b8 	.word	0x400200b8
 800c738:	40020410 	.word	0x40020410
 800c73c:	40020428 	.word	0x40020428
 800c740:	40020440 	.word	0x40020440
 800c744:	40020458 	.word	0x40020458
 800c748:	40020470 	.word	0x40020470
 800c74c:	40020488 	.word	0x40020488
 800c750:	400204a0 	.word	0x400204a0
 800c754:	400204b8 	.word	0x400204b8
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f003 0302 	and.w	r3, r3, #2
 800c762:	2b00      	cmp	r3, #0
 800c764:	bf14      	ite	ne
 800c766:	2301      	movne	r3, #1
 800c768:	2300      	moveq	r3, #0
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f000 8087 	beq.w	800c880 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c776:	f003 031f 	and.w	r3, r3, #31
 800c77a:	2220      	movs	r2, #32
 800c77c:	409a      	lsls	r2, r3
 800c77e:	6a3b      	ldr	r3, [r7, #32]
 800c780:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	2b04      	cmp	r3, #4
 800c78c:	d139      	bne.n	800c802 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f022 0216 	bic.w	r2, r2, #22
 800c79c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	695a      	ldr	r2, [r3, #20]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c7ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d103      	bne.n	800c7be <HAL_DMA_IRQHandler+0x736>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d007      	beq.n	800c7ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f022 0208 	bic.w	r2, r2, #8
 800c7cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7d2:	f003 031f 	and.w	r3, r3, #31
 800c7d6:	223f      	movs	r2, #63	@ 0x3f
 800c7d8:	409a      	lsls	r2, r3
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 834a 	beq.w	800ce8c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	4798      	blx	r3
          }
          return;
 800c800:	e344      	b.n	800ce8c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d018      	beq.n	800c842 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d108      	bne.n	800c830 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c822:	2b00      	cmp	r3, #0
 800c824:	d02c      	beq.n	800c880 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	4798      	blx	r3
 800c82e:	e027      	b.n	800c880 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c834:	2b00      	cmp	r3, #0
 800c836:	d023      	beq.n	800c880 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	4798      	blx	r3
 800c840:	e01e      	b.n	800c880 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10f      	bne.n	800c870 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f022 0210 	bic.w	r2, r2, #16
 800c85e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c874:	2b00      	cmp	r3, #0
 800c876:	d003      	beq.n	800c880 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 8306 	beq.w	800ce96 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	2b00      	cmp	r3, #0
 800c894:	f000 8088 	beq.w	800c9a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2204      	movs	r2, #4
 800c89c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a7a      	ldr	r2, [pc, #488]	@ (800ca90 <HAL_DMA_IRQHandler+0xa08>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d04a      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a79      	ldr	r2, [pc, #484]	@ (800ca94 <HAL_DMA_IRQHandler+0xa0c>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d045      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a77      	ldr	r2, [pc, #476]	@ (800ca98 <HAL_DMA_IRQHandler+0xa10>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d040      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a76      	ldr	r2, [pc, #472]	@ (800ca9c <HAL_DMA_IRQHandler+0xa14>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d03b      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a74      	ldr	r2, [pc, #464]	@ (800caa0 <HAL_DMA_IRQHandler+0xa18>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d036      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a73      	ldr	r2, [pc, #460]	@ (800caa4 <HAL_DMA_IRQHandler+0xa1c>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d031      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a71      	ldr	r2, [pc, #452]	@ (800caa8 <HAL_DMA_IRQHandler+0xa20>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d02c      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a70      	ldr	r2, [pc, #448]	@ (800caac <HAL_DMA_IRQHandler+0xa24>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d027      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a6e      	ldr	r2, [pc, #440]	@ (800cab0 <HAL_DMA_IRQHandler+0xa28>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d022      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a6d      	ldr	r2, [pc, #436]	@ (800cab4 <HAL_DMA_IRQHandler+0xa2c>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d01d      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a6b      	ldr	r2, [pc, #428]	@ (800cab8 <HAL_DMA_IRQHandler+0xa30>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d018      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a6a      	ldr	r2, [pc, #424]	@ (800cabc <HAL_DMA_IRQHandler+0xa34>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d013      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a68      	ldr	r2, [pc, #416]	@ (800cac0 <HAL_DMA_IRQHandler+0xa38>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d00e      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a67      	ldr	r2, [pc, #412]	@ (800cac4 <HAL_DMA_IRQHandler+0xa3c>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d009      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a65      	ldr	r2, [pc, #404]	@ (800cac8 <HAL_DMA_IRQHandler+0xa40>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d004      	beq.n	800c940 <HAL_DMA_IRQHandler+0x8b8>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a64      	ldr	r2, [pc, #400]	@ (800cacc <HAL_DMA_IRQHandler+0xa44>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d108      	bne.n	800c952 <HAL_DMA_IRQHandler+0x8ca>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f022 0201 	bic.w	r2, r2, #1
 800c94e:	601a      	str	r2, [r3, #0]
 800c950:	e007      	b.n	800c962 <HAL_DMA_IRQHandler+0x8da>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f022 0201 	bic.w	r2, r2, #1
 800c960:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3301      	adds	r3, #1
 800c966:	60fb      	str	r3, [r7, #12]
 800c968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d307      	bcc.n	800c97e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f003 0301 	and.w	r3, r3, #1
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1f2      	bne.n	800c962 <HAL_DMA_IRQHandler+0x8da>
 800c97c:	e000      	b.n	800c980 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800c97e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f003 0301 	and.w	r3, r3, #1
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d004      	beq.n	800c998 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2203      	movs	r2, #3
 800c992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800c996:	e003      	b.n	800c9a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f000 8272 	beq.w	800ce96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	4798      	blx	r3
 800c9ba:	e26c      	b.n	800ce96 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a43      	ldr	r2, [pc, #268]	@ (800cad0 <HAL_DMA_IRQHandler+0xa48>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d022      	beq.n	800ca0c <HAL_DMA_IRQHandler+0x984>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a42      	ldr	r2, [pc, #264]	@ (800cad4 <HAL_DMA_IRQHandler+0xa4c>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d01d      	beq.n	800ca0c <HAL_DMA_IRQHandler+0x984>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a40      	ldr	r2, [pc, #256]	@ (800cad8 <HAL_DMA_IRQHandler+0xa50>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d018      	beq.n	800ca0c <HAL_DMA_IRQHandler+0x984>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a3f      	ldr	r2, [pc, #252]	@ (800cadc <HAL_DMA_IRQHandler+0xa54>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d013      	beq.n	800ca0c <HAL_DMA_IRQHandler+0x984>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a3d      	ldr	r2, [pc, #244]	@ (800cae0 <HAL_DMA_IRQHandler+0xa58>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d00e      	beq.n	800ca0c <HAL_DMA_IRQHandler+0x984>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a3c      	ldr	r2, [pc, #240]	@ (800cae4 <HAL_DMA_IRQHandler+0xa5c>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d009      	beq.n	800ca0c <HAL_DMA_IRQHandler+0x984>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a3a      	ldr	r2, [pc, #232]	@ (800cae8 <HAL_DMA_IRQHandler+0xa60>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d004      	beq.n	800ca0c <HAL_DMA_IRQHandler+0x984>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a39      	ldr	r2, [pc, #228]	@ (800caec <HAL_DMA_IRQHandler+0xa64>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d101      	bne.n	800ca10 <HAL_DMA_IRQHandler+0x988>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e000      	b.n	800ca12 <HAL_DMA_IRQHandler+0x98a>
 800ca10:	2300      	movs	r3, #0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f000 823f 	beq.w	800ce96 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca24:	f003 031f 	and.w	r3, r3, #31
 800ca28:	2204      	movs	r2, #4
 800ca2a:	409a      	lsls	r2, r3
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	4013      	ands	r3, r2
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f000 80cd 	beq.w	800cbd0 <HAL_DMA_IRQHandler+0xb48>
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	f003 0304 	and.w	r3, r3, #4
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f000 80c7 	beq.w	800cbd0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca46:	f003 031f 	and.w	r3, r3, #31
 800ca4a:	2204      	movs	r2, #4
 800ca4c:	409a      	lsls	r2, r3
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d049      	beq.n	800caf0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d109      	bne.n	800ca7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	f000 8210 	beq.w	800ce90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ca78:	e20a      	b.n	800ce90 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f000 8206 	beq.w	800ce90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ca8c:	e200      	b.n	800ce90 <HAL_DMA_IRQHandler+0xe08>
 800ca8e:	bf00      	nop
 800ca90:	40020010 	.word	0x40020010
 800ca94:	40020028 	.word	0x40020028
 800ca98:	40020040 	.word	0x40020040
 800ca9c:	40020058 	.word	0x40020058
 800caa0:	40020070 	.word	0x40020070
 800caa4:	40020088 	.word	0x40020088
 800caa8:	400200a0 	.word	0x400200a0
 800caac:	400200b8 	.word	0x400200b8
 800cab0:	40020410 	.word	0x40020410
 800cab4:	40020428 	.word	0x40020428
 800cab8:	40020440 	.word	0x40020440
 800cabc:	40020458 	.word	0x40020458
 800cac0:	40020470 	.word	0x40020470
 800cac4:	40020488 	.word	0x40020488
 800cac8:	400204a0 	.word	0x400204a0
 800cacc:	400204b8 	.word	0x400204b8
 800cad0:	58025408 	.word	0x58025408
 800cad4:	5802541c 	.word	0x5802541c
 800cad8:	58025430 	.word	0x58025430
 800cadc:	58025444 	.word	0x58025444
 800cae0:	58025458 	.word	0x58025458
 800cae4:	5802546c 	.word	0x5802546c
 800cae8:	58025480 	.word	0x58025480
 800caec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	f003 0320 	and.w	r3, r3, #32
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d160      	bne.n	800cbbc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a7f      	ldr	r2, [pc, #508]	@ (800ccfc <HAL_DMA_IRQHandler+0xc74>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d04a      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a7d      	ldr	r2, [pc, #500]	@ (800cd00 <HAL_DMA_IRQHandler+0xc78>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d045      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	4a7c      	ldr	r2, [pc, #496]	@ (800cd04 <HAL_DMA_IRQHandler+0xc7c>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d040      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a7a      	ldr	r2, [pc, #488]	@ (800cd08 <HAL_DMA_IRQHandler+0xc80>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d03b      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a79      	ldr	r2, [pc, #484]	@ (800cd0c <HAL_DMA_IRQHandler+0xc84>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d036      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a77      	ldr	r2, [pc, #476]	@ (800cd10 <HAL_DMA_IRQHandler+0xc88>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d031      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a76      	ldr	r2, [pc, #472]	@ (800cd14 <HAL_DMA_IRQHandler+0xc8c>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d02c      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a74      	ldr	r2, [pc, #464]	@ (800cd18 <HAL_DMA_IRQHandler+0xc90>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d027      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4a73      	ldr	r2, [pc, #460]	@ (800cd1c <HAL_DMA_IRQHandler+0xc94>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d022      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a71      	ldr	r2, [pc, #452]	@ (800cd20 <HAL_DMA_IRQHandler+0xc98>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d01d      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a70      	ldr	r2, [pc, #448]	@ (800cd24 <HAL_DMA_IRQHandler+0xc9c>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d018      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a6e      	ldr	r2, [pc, #440]	@ (800cd28 <HAL_DMA_IRQHandler+0xca0>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d013      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a6d      	ldr	r2, [pc, #436]	@ (800cd2c <HAL_DMA_IRQHandler+0xca4>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d00e      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a6b      	ldr	r2, [pc, #428]	@ (800cd30 <HAL_DMA_IRQHandler+0xca8>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d009      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a6a      	ldr	r2, [pc, #424]	@ (800cd34 <HAL_DMA_IRQHandler+0xcac>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d004      	beq.n	800cb9a <HAL_DMA_IRQHandler+0xb12>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a68      	ldr	r2, [pc, #416]	@ (800cd38 <HAL_DMA_IRQHandler+0xcb0>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d108      	bne.n	800cbac <HAL_DMA_IRQHandler+0xb24>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f022 0208 	bic.w	r2, r2, #8
 800cba8:	601a      	str	r2, [r3, #0]
 800cbaa:	e007      	b.n	800cbbc <HAL_DMA_IRQHandler+0xb34>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f022 0204 	bic.w	r2, r2, #4
 800cbba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f000 8165 	beq.w	800ce90 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cbce:	e15f      	b.n	800ce90 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbd4:	f003 031f 	and.w	r3, r3, #31
 800cbd8:	2202      	movs	r2, #2
 800cbda:	409a      	lsls	r2, r3
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	4013      	ands	r3, r2
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	f000 80c5 	beq.w	800cd70 <HAL_DMA_IRQHandler+0xce8>
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	f003 0302 	and.w	r3, r3, #2
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 80bf 	beq.w	800cd70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbf6:	f003 031f 	and.w	r3, r3, #31
 800cbfa:	2202      	movs	r2, #2
 800cbfc:	409a      	lsls	r2, r3
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d018      	beq.n	800cc3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d109      	bne.n	800cc2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f000 813a 	beq.w	800ce94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cc28:	e134      	b.n	800ce94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f000 8130 	beq.w	800ce94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cc3c:	e12a      	b.n	800ce94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	f003 0320 	and.w	r3, r3, #32
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	f040 8089 	bne.w	800cd5c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a2b      	ldr	r2, [pc, #172]	@ (800ccfc <HAL_DMA_IRQHandler+0xc74>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d04a      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a29      	ldr	r2, [pc, #164]	@ (800cd00 <HAL_DMA_IRQHandler+0xc78>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d045      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a28      	ldr	r2, [pc, #160]	@ (800cd04 <HAL_DMA_IRQHandler+0xc7c>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d040      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a26      	ldr	r2, [pc, #152]	@ (800cd08 <HAL_DMA_IRQHandler+0xc80>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d03b      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a25      	ldr	r2, [pc, #148]	@ (800cd0c <HAL_DMA_IRQHandler+0xc84>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d036      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a23      	ldr	r2, [pc, #140]	@ (800cd10 <HAL_DMA_IRQHandler+0xc88>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d031      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a22      	ldr	r2, [pc, #136]	@ (800cd14 <HAL_DMA_IRQHandler+0xc8c>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d02c      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a20      	ldr	r2, [pc, #128]	@ (800cd18 <HAL_DMA_IRQHandler+0xc90>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d027      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a1f      	ldr	r2, [pc, #124]	@ (800cd1c <HAL_DMA_IRQHandler+0xc94>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d022      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a1d      	ldr	r2, [pc, #116]	@ (800cd20 <HAL_DMA_IRQHandler+0xc98>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d01d      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a1c      	ldr	r2, [pc, #112]	@ (800cd24 <HAL_DMA_IRQHandler+0xc9c>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d018      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a1a      	ldr	r2, [pc, #104]	@ (800cd28 <HAL_DMA_IRQHandler+0xca0>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d013      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a19      	ldr	r2, [pc, #100]	@ (800cd2c <HAL_DMA_IRQHandler+0xca4>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d00e      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a17      	ldr	r2, [pc, #92]	@ (800cd30 <HAL_DMA_IRQHandler+0xca8>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d009      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a16      	ldr	r2, [pc, #88]	@ (800cd34 <HAL_DMA_IRQHandler+0xcac>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d004      	beq.n	800ccea <HAL_DMA_IRQHandler+0xc62>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a14      	ldr	r2, [pc, #80]	@ (800cd38 <HAL_DMA_IRQHandler+0xcb0>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d128      	bne.n	800cd3c <HAL_DMA_IRQHandler+0xcb4>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f022 0214 	bic.w	r2, r2, #20
 800ccf8:	601a      	str	r2, [r3, #0]
 800ccfa:	e027      	b.n	800cd4c <HAL_DMA_IRQHandler+0xcc4>
 800ccfc:	40020010 	.word	0x40020010
 800cd00:	40020028 	.word	0x40020028
 800cd04:	40020040 	.word	0x40020040
 800cd08:	40020058 	.word	0x40020058
 800cd0c:	40020070 	.word	0x40020070
 800cd10:	40020088 	.word	0x40020088
 800cd14:	400200a0 	.word	0x400200a0
 800cd18:	400200b8 	.word	0x400200b8
 800cd1c:	40020410 	.word	0x40020410
 800cd20:	40020428 	.word	0x40020428
 800cd24:	40020440 	.word	0x40020440
 800cd28:	40020458 	.word	0x40020458
 800cd2c:	40020470 	.word	0x40020470
 800cd30:	40020488 	.word	0x40020488
 800cd34:	400204a0 	.word	0x400204a0
 800cd38:	400204b8 	.word	0x400204b8
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f022 020a 	bic.w	r2, r2, #10
 800cd4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 8097 	beq.w	800ce94 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cd6e:	e091      	b.n	800ce94 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd74:	f003 031f 	and.w	r3, r3, #31
 800cd78:	2208      	movs	r2, #8
 800cd7a:	409a      	lsls	r2, r3
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	4013      	ands	r3, r2
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f000 8088 	beq.w	800ce96 <HAL_DMA_IRQHandler+0xe0e>
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	f003 0308 	and.w	r3, r3, #8
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f000 8082 	beq.w	800ce96 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4a41      	ldr	r2, [pc, #260]	@ (800ce9c <HAL_DMA_IRQHandler+0xe14>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d04a      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a3f      	ldr	r2, [pc, #252]	@ (800cea0 <HAL_DMA_IRQHandler+0xe18>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d045      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a3e      	ldr	r2, [pc, #248]	@ (800cea4 <HAL_DMA_IRQHandler+0xe1c>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d040      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a3c      	ldr	r2, [pc, #240]	@ (800cea8 <HAL_DMA_IRQHandler+0xe20>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d03b      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a3b      	ldr	r2, [pc, #236]	@ (800ceac <HAL_DMA_IRQHandler+0xe24>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d036      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a39      	ldr	r2, [pc, #228]	@ (800ceb0 <HAL_DMA_IRQHandler+0xe28>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d031      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a38      	ldr	r2, [pc, #224]	@ (800ceb4 <HAL_DMA_IRQHandler+0xe2c>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d02c      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a36      	ldr	r2, [pc, #216]	@ (800ceb8 <HAL_DMA_IRQHandler+0xe30>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d027      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a35      	ldr	r2, [pc, #212]	@ (800cebc <HAL_DMA_IRQHandler+0xe34>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d022      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a33      	ldr	r2, [pc, #204]	@ (800cec0 <HAL_DMA_IRQHandler+0xe38>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d01d      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4a32      	ldr	r2, [pc, #200]	@ (800cec4 <HAL_DMA_IRQHandler+0xe3c>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d018      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a30      	ldr	r2, [pc, #192]	@ (800cec8 <HAL_DMA_IRQHandler+0xe40>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d013      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a2f      	ldr	r2, [pc, #188]	@ (800cecc <HAL_DMA_IRQHandler+0xe44>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d00e      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a2d      	ldr	r2, [pc, #180]	@ (800ced0 <HAL_DMA_IRQHandler+0xe48>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d009      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a2c      	ldr	r2, [pc, #176]	@ (800ced4 <HAL_DMA_IRQHandler+0xe4c>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d004      	beq.n	800ce32 <HAL_DMA_IRQHandler+0xdaa>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a2a      	ldr	r2, [pc, #168]	@ (800ced8 <HAL_DMA_IRQHandler+0xe50>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d108      	bne.n	800ce44 <HAL_DMA_IRQHandler+0xdbc>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f022 021c 	bic.w	r2, r2, #28
 800ce40:	601a      	str	r2, [r3, #0]
 800ce42:	e007      	b.n	800ce54 <HAL_DMA_IRQHandler+0xdcc>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f022 020e 	bic.w	r2, r2, #14
 800ce52:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce58:	f003 031f 	and.w	r3, r3, #31
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	409a      	lsls	r2, r3
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d009      	beq.n	800ce96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	4798      	blx	r3
 800ce8a:	e004      	b.n	800ce96 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800ce8c:	bf00      	nop
 800ce8e:	e002      	b.n	800ce96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ce90:	bf00      	nop
 800ce92:	e000      	b.n	800ce96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ce94:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ce96:	3728      	adds	r7, #40	@ 0x28
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	40020010 	.word	0x40020010
 800cea0:	40020028 	.word	0x40020028
 800cea4:	40020040 	.word	0x40020040
 800cea8:	40020058 	.word	0x40020058
 800ceac:	40020070 	.word	0x40020070
 800ceb0:	40020088 	.word	0x40020088
 800ceb4:	400200a0 	.word	0x400200a0
 800ceb8:	400200b8 	.word	0x400200b8
 800cebc:	40020410 	.word	0x40020410
 800cec0:	40020428 	.word	0x40020428
 800cec4:	40020440 	.word	0x40020440
 800cec8:	40020458 	.word	0x40020458
 800cecc:	40020470 	.word	0x40020470
 800ced0:	40020488 	.word	0x40020488
 800ced4:	400204a0 	.word	0x400204a0
 800ced8:	400204b8 	.word	0x400204b8

0800cedc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ceea:	b2db      	uxtb	r3, r3
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b087      	sub	sp, #28
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
 800cf1c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf22:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf28:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a7f      	ldr	r2, [pc, #508]	@ (800d12c <DMA_SetConfig+0x21c>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d072      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a7d      	ldr	r2, [pc, #500]	@ (800d130 <DMA_SetConfig+0x220>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d06d      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a7c      	ldr	r2, [pc, #496]	@ (800d134 <DMA_SetConfig+0x224>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d068      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a7a      	ldr	r2, [pc, #488]	@ (800d138 <DMA_SetConfig+0x228>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d063      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a79      	ldr	r2, [pc, #484]	@ (800d13c <DMA_SetConfig+0x22c>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d05e      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a77      	ldr	r2, [pc, #476]	@ (800d140 <DMA_SetConfig+0x230>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d059      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4a76      	ldr	r2, [pc, #472]	@ (800d144 <DMA_SetConfig+0x234>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d054      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a74      	ldr	r2, [pc, #464]	@ (800d148 <DMA_SetConfig+0x238>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d04f      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4a73      	ldr	r2, [pc, #460]	@ (800d14c <DMA_SetConfig+0x23c>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d04a      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a71      	ldr	r2, [pc, #452]	@ (800d150 <DMA_SetConfig+0x240>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d045      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4a70      	ldr	r2, [pc, #448]	@ (800d154 <DMA_SetConfig+0x244>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d040      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a6e      	ldr	r2, [pc, #440]	@ (800d158 <DMA_SetConfig+0x248>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d03b      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a6d      	ldr	r2, [pc, #436]	@ (800d15c <DMA_SetConfig+0x24c>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d036      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a6b      	ldr	r2, [pc, #428]	@ (800d160 <DMA_SetConfig+0x250>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d031      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a6a      	ldr	r2, [pc, #424]	@ (800d164 <DMA_SetConfig+0x254>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d02c      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4a68      	ldr	r2, [pc, #416]	@ (800d168 <DMA_SetConfig+0x258>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d027      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a67      	ldr	r2, [pc, #412]	@ (800d16c <DMA_SetConfig+0x25c>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d022      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a65      	ldr	r2, [pc, #404]	@ (800d170 <DMA_SetConfig+0x260>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d01d      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4a64      	ldr	r2, [pc, #400]	@ (800d174 <DMA_SetConfig+0x264>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d018      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a62      	ldr	r2, [pc, #392]	@ (800d178 <DMA_SetConfig+0x268>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d013      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4a61      	ldr	r2, [pc, #388]	@ (800d17c <DMA_SetConfig+0x26c>)
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d00e      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a5f      	ldr	r2, [pc, #380]	@ (800d180 <DMA_SetConfig+0x270>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d009      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a5e      	ldr	r2, [pc, #376]	@ (800d184 <DMA_SetConfig+0x274>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d004      	beq.n	800d01a <DMA_SetConfig+0x10a>
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a5c      	ldr	r2, [pc, #368]	@ (800d188 <DMA_SetConfig+0x278>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d101      	bne.n	800d01e <DMA_SetConfig+0x10e>
 800d01a:	2301      	movs	r3, #1
 800d01c:	e000      	b.n	800d020 <DMA_SetConfig+0x110>
 800d01e:	2300      	movs	r3, #0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d00d      	beq.n	800d040 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d02c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d032:	2b00      	cmp	r3, #0
 800d034:	d004      	beq.n	800d040 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800d03e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a39      	ldr	r2, [pc, #228]	@ (800d12c <DMA_SetConfig+0x21c>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d04a      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4a38      	ldr	r2, [pc, #224]	@ (800d130 <DMA_SetConfig+0x220>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d045      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a36      	ldr	r2, [pc, #216]	@ (800d134 <DMA_SetConfig+0x224>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d040      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4a35      	ldr	r2, [pc, #212]	@ (800d138 <DMA_SetConfig+0x228>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d03b      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a33      	ldr	r2, [pc, #204]	@ (800d13c <DMA_SetConfig+0x22c>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d036      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a32      	ldr	r2, [pc, #200]	@ (800d140 <DMA_SetConfig+0x230>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d031      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a30      	ldr	r2, [pc, #192]	@ (800d144 <DMA_SetConfig+0x234>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d02c      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a2f      	ldr	r2, [pc, #188]	@ (800d148 <DMA_SetConfig+0x238>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d027      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a2d      	ldr	r2, [pc, #180]	@ (800d14c <DMA_SetConfig+0x23c>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d022      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a2c      	ldr	r2, [pc, #176]	@ (800d150 <DMA_SetConfig+0x240>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d01d      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a2a      	ldr	r2, [pc, #168]	@ (800d154 <DMA_SetConfig+0x244>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d018      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a29      	ldr	r2, [pc, #164]	@ (800d158 <DMA_SetConfig+0x248>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d013      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a27      	ldr	r2, [pc, #156]	@ (800d15c <DMA_SetConfig+0x24c>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d00e      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4a26      	ldr	r2, [pc, #152]	@ (800d160 <DMA_SetConfig+0x250>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d009      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a24      	ldr	r2, [pc, #144]	@ (800d164 <DMA_SetConfig+0x254>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d004      	beq.n	800d0e0 <DMA_SetConfig+0x1d0>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a23      	ldr	r2, [pc, #140]	@ (800d168 <DMA_SetConfig+0x258>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d101      	bne.n	800d0e4 <DMA_SetConfig+0x1d4>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e000      	b.n	800d0e6 <DMA_SetConfig+0x1d6>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d059      	beq.n	800d19e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0ee:	f003 031f 	and.w	r3, r3, #31
 800d0f2:	223f      	movs	r2, #63	@ 0x3f
 800d0f4:	409a      	lsls	r2, r3
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d108:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	689b      	ldr	r3, [r3, #8]
 800d116:	2b40      	cmp	r3, #64	@ 0x40
 800d118:	d138      	bne.n	800d18c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800d12a:	e086      	b.n	800d23a <DMA_SetConfig+0x32a>
 800d12c:	40020010 	.word	0x40020010
 800d130:	40020028 	.word	0x40020028
 800d134:	40020040 	.word	0x40020040
 800d138:	40020058 	.word	0x40020058
 800d13c:	40020070 	.word	0x40020070
 800d140:	40020088 	.word	0x40020088
 800d144:	400200a0 	.word	0x400200a0
 800d148:	400200b8 	.word	0x400200b8
 800d14c:	40020410 	.word	0x40020410
 800d150:	40020428 	.word	0x40020428
 800d154:	40020440 	.word	0x40020440
 800d158:	40020458 	.word	0x40020458
 800d15c:	40020470 	.word	0x40020470
 800d160:	40020488 	.word	0x40020488
 800d164:	400204a0 	.word	0x400204a0
 800d168:	400204b8 	.word	0x400204b8
 800d16c:	58025408 	.word	0x58025408
 800d170:	5802541c 	.word	0x5802541c
 800d174:	58025430 	.word	0x58025430
 800d178:	58025444 	.word	0x58025444
 800d17c:	58025458 	.word	0x58025458
 800d180:	5802546c 	.word	0x5802546c
 800d184:	58025480 	.word	0x58025480
 800d188:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	68ba      	ldr	r2, [r7, #8]
 800d192:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	60da      	str	r2, [r3, #12]
}
 800d19c:	e04d      	b.n	800d23a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a29      	ldr	r2, [pc, #164]	@ (800d248 <DMA_SetConfig+0x338>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d022      	beq.n	800d1ee <DMA_SetConfig+0x2de>
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a27      	ldr	r2, [pc, #156]	@ (800d24c <DMA_SetConfig+0x33c>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d01d      	beq.n	800d1ee <DMA_SetConfig+0x2de>
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a26      	ldr	r2, [pc, #152]	@ (800d250 <DMA_SetConfig+0x340>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d018      	beq.n	800d1ee <DMA_SetConfig+0x2de>
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a24      	ldr	r2, [pc, #144]	@ (800d254 <DMA_SetConfig+0x344>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d013      	beq.n	800d1ee <DMA_SetConfig+0x2de>
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a23      	ldr	r2, [pc, #140]	@ (800d258 <DMA_SetConfig+0x348>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d00e      	beq.n	800d1ee <DMA_SetConfig+0x2de>
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a21      	ldr	r2, [pc, #132]	@ (800d25c <DMA_SetConfig+0x34c>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d009      	beq.n	800d1ee <DMA_SetConfig+0x2de>
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a20      	ldr	r2, [pc, #128]	@ (800d260 <DMA_SetConfig+0x350>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d004      	beq.n	800d1ee <DMA_SetConfig+0x2de>
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a1e      	ldr	r2, [pc, #120]	@ (800d264 <DMA_SetConfig+0x354>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d101      	bne.n	800d1f2 <DMA_SetConfig+0x2e2>
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e000      	b.n	800d1f4 <DMA_SetConfig+0x2e4>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d020      	beq.n	800d23a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1fc:	f003 031f 	and.w	r3, r3, #31
 800d200:	2201      	movs	r2, #1
 800d202:	409a      	lsls	r2, r3
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	683a      	ldr	r2, [r7, #0]
 800d20e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	2b40      	cmp	r3, #64	@ 0x40
 800d216:	d108      	bne.n	800d22a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	68ba      	ldr	r2, [r7, #8]
 800d226:	60da      	str	r2, [r3, #12]
}
 800d228:	e007      	b.n	800d23a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	68ba      	ldr	r2, [r7, #8]
 800d230:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	60da      	str	r2, [r3, #12]
}
 800d23a:	bf00      	nop
 800d23c:	371c      	adds	r7, #28
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	58025408 	.word	0x58025408
 800d24c:	5802541c 	.word	0x5802541c
 800d250:	58025430 	.word	0x58025430
 800d254:	58025444 	.word	0x58025444
 800d258:	58025458 	.word	0x58025458
 800d25c:	5802546c 	.word	0x5802546c
 800d260:	58025480 	.word	0x58025480
 800d264:	58025494 	.word	0x58025494

0800d268 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d268:	b480      	push	{r7}
 800d26a:	b085      	sub	sp, #20
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a42      	ldr	r2, [pc, #264]	@ (800d380 <DMA_CalcBaseAndBitshift+0x118>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d04a      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a41      	ldr	r2, [pc, #260]	@ (800d384 <DMA_CalcBaseAndBitshift+0x11c>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d045      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a3f      	ldr	r2, [pc, #252]	@ (800d388 <DMA_CalcBaseAndBitshift+0x120>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d040      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a3e      	ldr	r2, [pc, #248]	@ (800d38c <DMA_CalcBaseAndBitshift+0x124>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d03b      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a3c      	ldr	r2, [pc, #240]	@ (800d390 <DMA_CalcBaseAndBitshift+0x128>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d036      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a3b      	ldr	r2, [pc, #236]	@ (800d394 <DMA_CalcBaseAndBitshift+0x12c>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d031      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a39      	ldr	r2, [pc, #228]	@ (800d398 <DMA_CalcBaseAndBitshift+0x130>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d02c      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a38      	ldr	r2, [pc, #224]	@ (800d39c <DMA_CalcBaseAndBitshift+0x134>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d027      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a36      	ldr	r2, [pc, #216]	@ (800d3a0 <DMA_CalcBaseAndBitshift+0x138>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d022      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a35      	ldr	r2, [pc, #212]	@ (800d3a4 <DMA_CalcBaseAndBitshift+0x13c>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d01d      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a33      	ldr	r2, [pc, #204]	@ (800d3a8 <DMA_CalcBaseAndBitshift+0x140>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d018      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4a32      	ldr	r2, [pc, #200]	@ (800d3ac <DMA_CalcBaseAndBitshift+0x144>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d013      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a30      	ldr	r2, [pc, #192]	@ (800d3b0 <DMA_CalcBaseAndBitshift+0x148>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d00e      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a2f      	ldr	r2, [pc, #188]	@ (800d3b4 <DMA_CalcBaseAndBitshift+0x14c>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d009      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a2d      	ldr	r2, [pc, #180]	@ (800d3b8 <DMA_CalcBaseAndBitshift+0x150>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d004      	beq.n	800d310 <DMA_CalcBaseAndBitshift+0xa8>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a2c      	ldr	r2, [pc, #176]	@ (800d3bc <DMA_CalcBaseAndBitshift+0x154>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d101      	bne.n	800d314 <DMA_CalcBaseAndBitshift+0xac>
 800d310:	2301      	movs	r3, #1
 800d312:	e000      	b.n	800d316 <DMA_CalcBaseAndBitshift+0xae>
 800d314:	2300      	movs	r3, #0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d024      	beq.n	800d364 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	3b10      	subs	r3, #16
 800d322:	4a27      	ldr	r2, [pc, #156]	@ (800d3c0 <DMA_CalcBaseAndBitshift+0x158>)
 800d324:	fba2 2303 	umull	r2, r3, r2, r3
 800d328:	091b      	lsrs	r3, r3, #4
 800d32a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f003 0307 	and.w	r3, r3, #7
 800d332:	4a24      	ldr	r2, [pc, #144]	@ (800d3c4 <DMA_CalcBaseAndBitshift+0x15c>)
 800d334:	5cd3      	ldrb	r3, [r2, r3]
 800d336:	461a      	mov	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2b03      	cmp	r3, #3
 800d340:	d908      	bls.n	800d354 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	4b1f      	ldr	r3, [pc, #124]	@ (800d3c8 <DMA_CalcBaseAndBitshift+0x160>)
 800d34a:	4013      	ands	r3, r2
 800d34c:	1d1a      	adds	r2, r3, #4
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	659a      	str	r2, [r3, #88]	@ 0x58
 800d352:	e00d      	b.n	800d370 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	461a      	mov	r2, r3
 800d35a:	4b1b      	ldr	r3, [pc, #108]	@ (800d3c8 <DMA_CalcBaseAndBitshift+0x160>)
 800d35c:	4013      	ands	r3, r2
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	6593      	str	r3, [r2, #88]	@ 0x58
 800d362:	e005      	b.n	800d370 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800d374:	4618      	mov	r0, r3
 800d376:	3714      	adds	r7, #20
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr
 800d380:	40020010 	.word	0x40020010
 800d384:	40020028 	.word	0x40020028
 800d388:	40020040 	.word	0x40020040
 800d38c:	40020058 	.word	0x40020058
 800d390:	40020070 	.word	0x40020070
 800d394:	40020088 	.word	0x40020088
 800d398:	400200a0 	.word	0x400200a0
 800d39c:	400200b8 	.word	0x400200b8
 800d3a0:	40020410 	.word	0x40020410
 800d3a4:	40020428 	.word	0x40020428
 800d3a8:	40020440 	.word	0x40020440
 800d3ac:	40020458 	.word	0x40020458
 800d3b0:	40020470 	.word	0x40020470
 800d3b4:	40020488 	.word	0x40020488
 800d3b8:	400204a0 	.word	0x400204a0
 800d3bc:	400204b8 	.word	0x400204b8
 800d3c0:	aaaaaaab 	.word	0xaaaaaaab
 800d3c4:	0801e2f8 	.word	0x0801e2f8
 800d3c8:	fffffc00 	.word	0xfffffc00

0800d3cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b085      	sub	sp, #20
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	699b      	ldr	r3, [r3, #24]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d120      	bne.n	800d422 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e4:	2b03      	cmp	r3, #3
 800d3e6:	d858      	bhi.n	800d49a <DMA_CheckFifoParam+0xce>
 800d3e8:	a201      	add	r2, pc, #4	@ (adr r2, 800d3f0 <DMA_CheckFifoParam+0x24>)
 800d3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ee:	bf00      	nop
 800d3f0:	0800d401 	.word	0x0800d401
 800d3f4:	0800d413 	.word	0x0800d413
 800d3f8:	0800d401 	.word	0x0800d401
 800d3fc:	0800d49b 	.word	0x0800d49b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d404:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d048      	beq.n	800d49e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800d40c:	2301      	movs	r3, #1
 800d40e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d410:	e045      	b.n	800d49e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d416:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d41a:	d142      	bne.n	800d4a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800d41c:	2301      	movs	r3, #1
 800d41e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d420:	e03f      	b.n	800d4a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	699b      	ldr	r3, [r3, #24]
 800d426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d42a:	d123      	bne.n	800d474 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d430:	2b03      	cmp	r3, #3
 800d432:	d838      	bhi.n	800d4a6 <DMA_CheckFifoParam+0xda>
 800d434:	a201      	add	r2, pc, #4	@ (adr r2, 800d43c <DMA_CheckFifoParam+0x70>)
 800d436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d43a:	bf00      	nop
 800d43c:	0800d44d 	.word	0x0800d44d
 800d440:	0800d453 	.word	0x0800d453
 800d444:	0800d44d 	.word	0x0800d44d
 800d448:	0800d465 	.word	0x0800d465
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800d44c:	2301      	movs	r3, #1
 800d44e:	73fb      	strb	r3, [r7, #15]
        break;
 800d450:	e030      	b.n	800d4b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d456:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d025      	beq.n	800d4aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800d45e:	2301      	movs	r3, #1
 800d460:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d462:	e022      	b.n	800d4aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d468:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d46c:	d11f      	bne.n	800d4ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800d46e:	2301      	movs	r3, #1
 800d470:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d472:	e01c      	b.n	800d4ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d478:	2b02      	cmp	r3, #2
 800d47a:	d902      	bls.n	800d482 <DMA_CheckFifoParam+0xb6>
 800d47c:	2b03      	cmp	r3, #3
 800d47e:	d003      	beq.n	800d488 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800d480:	e018      	b.n	800d4b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	73fb      	strb	r3, [r7, #15]
        break;
 800d486:	e015      	b.n	800d4b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d48c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d490:	2b00      	cmp	r3, #0
 800d492:	d00e      	beq.n	800d4b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800d494:	2301      	movs	r3, #1
 800d496:	73fb      	strb	r3, [r7, #15]
    break;
 800d498:	e00b      	b.n	800d4b2 <DMA_CheckFifoParam+0xe6>
        break;
 800d49a:	bf00      	nop
 800d49c:	e00a      	b.n	800d4b4 <DMA_CheckFifoParam+0xe8>
        break;
 800d49e:	bf00      	nop
 800d4a0:	e008      	b.n	800d4b4 <DMA_CheckFifoParam+0xe8>
        break;
 800d4a2:	bf00      	nop
 800d4a4:	e006      	b.n	800d4b4 <DMA_CheckFifoParam+0xe8>
        break;
 800d4a6:	bf00      	nop
 800d4a8:	e004      	b.n	800d4b4 <DMA_CheckFifoParam+0xe8>
        break;
 800d4aa:	bf00      	nop
 800d4ac:	e002      	b.n	800d4b4 <DMA_CheckFifoParam+0xe8>
        break;
 800d4ae:	bf00      	nop
 800d4b0:	e000      	b.n	800d4b4 <DMA_CheckFifoParam+0xe8>
    break;
 800d4b2:	bf00      	nop
    }
  }

  return status;
 800d4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3714      	adds	r7, #20
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop

0800d4c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	4a38      	ldr	r2, [pc, #224]	@ (800d5b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d022      	beq.n	800d522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a36      	ldr	r2, [pc, #216]	@ (800d5bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d01d      	beq.n	800d522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4a35      	ldr	r2, [pc, #212]	@ (800d5c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d018      	beq.n	800d522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a33      	ldr	r2, [pc, #204]	@ (800d5c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d013      	beq.n	800d522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4a32      	ldr	r2, [pc, #200]	@ (800d5c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d00e      	beq.n	800d522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a30      	ldr	r2, [pc, #192]	@ (800d5cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d009      	beq.n	800d522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a2f      	ldr	r2, [pc, #188]	@ (800d5d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d004      	beq.n	800d522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a2d      	ldr	r2, [pc, #180]	@ (800d5d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d101      	bne.n	800d526 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800d522:	2301      	movs	r3, #1
 800d524:	e000      	b.n	800d528 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800d526:	2300      	movs	r3, #0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d01a      	beq.n	800d562 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	b2db      	uxtb	r3, r3
 800d532:	3b08      	subs	r3, #8
 800d534:	4a28      	ldr	r2, [pc, #160]	@ (800d5d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800d536:	fba2 2303 	umull	r2, r3, r2, r3
 800d53a:	091b      	lsrs	r3, r3, #4
 800d53c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	4b26      	ldr	r3, [pc, #152]	@ (800d5dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800d542:	4413      	add	r3, r2
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	461a      	mov	r2, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	4a24      	ldr	r2, [pc, #144]	@ (800d5e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800d550:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f003 031f 	and.w	r3, r3, #31
 800d558:	2201      	movs	r2, #1
 800d55a:	409a      	lsls	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800d560:	e024      	b.n	800d5ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	b2db      	uxtb	r3, r3
 800d568:	3b10      	subs	r3, #16
 800d56a:	4a1e      	ldr	r2, [pc, #120]	@ (800d5e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800d56c:	fba2 2303 	umull	r2, r3, r2, r3
 800d570:	091b      	lsrs	r3, r3, #4
 800d572:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	4a1c      	ldr	r2, [pc, #112]	@ (800d5e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d806      	bhi.n	800d58a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	4a1b      	ldr	r2, [pc, #108]	@ (800d5ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d902      	bls.n	800d58a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	3308      	adds	r3, #8
 800d588:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800d58a:	68fa      	ldr	r2, [r7, #12]
 800d58c:	4b18      	ldr	r3, [pc, #96]	@ (800d5f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800d58e:	4413      	add	r3, r2
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	461a      	mov	r2, r3
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4a16      	ldr	r2, [pc, #88]	@ (800d5f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800d59c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f003 031f 	and.w	r3, r3, #31
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	409a      	lsls	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d5ac:	bf00      	nop
 800d5ae:	3714      	adds	r7, #20
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr
 800d5b8:	58025408 	.word	0x58025408
 800d5bc:	5802541c 	.word	0x5802541c
 800d5c0:	58025430 	.word	0x58025430
 800d5c4:	58025444 	.word	0x58025444
 800d5c8:	58025458 	.word	0x58025458
 800d5cc:	5802546c 	.word	0x5802546c
 800d5d0:	58025480 	.word	0x58025480
 800d5d4:	58025494 	.word	0x58025494
 800d5d8:	cccccccd 	.word	0xcccccccd
 800d5dc:	16009600 	.word	0x16009600
 800d5e0:	58025880 	.word	0x58025880
 800d5e4:	aaaaaaab 	.word	0xaaaaaaab
 800d5e8:	400204b8 	.word	0x400204b8
 800d5ec:	4002040f 	.word	0x4002040f
 800d5f0:	10008200 	.word	0x10008200
 800d5f4:	40020880 	.word	0x40020880

0800d5f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	b2db      	uxtb	r3, r3
 800d606:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d04a      	beq.n	800d6a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2b08      	cmp	r3, #8
 800d612:	d847      	bhi.n	800d6a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a25      	ldr	r2, [pc, #148]	@ (800d6b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d022      	beq.n	800d664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4a24      	ldr	r2, [pc, #144]	@ (800d6b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d01d      	beq.n	800d664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a22      	ldr	r2, [pc, #136]	@ (800d6b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d018      	beq.n	800d664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4a21      	ldr	r2, [pc, #132]	@ (800d6bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d013      	beq.n	800d664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a1f      	ldr	r2, [pc, #124]	@ (800d6c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d00e      	beq.n	800d664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a1e      	ldr	r2, [pc, #120]	@ (800d6c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d009      	beq.n	800d664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a1c      	ldr	r2, [pc, #112]	@ (800d6c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d004      	beq.n	800d664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a1b      	ldr	r2, [pc, #108]	@ (800d6cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d101      	bne.n	800d668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800d664:	2301      	movs	r3, #1
 800d666:	e000      	b.n	800d66a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800d668:	2300      	movs	r3, #0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d00a      	beq.n	800d684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	4b17      	ldr	r3, [pc, #92]	@ (800d6d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800d672:	4413      	add	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	461a      	mov	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	4a15      	ldr	r2, [pc, #84]	@ (800d6d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800d680:	671a      	str	r2, [r3, #112]	@ 0x70
 800d682:	e009      	b.n	800d698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	4b14      	ldr	r3, [pc, #80]	@ (800d6d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800d688:	4413      	add	r3, r2
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	461a      	mov	r2, r3
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4a11      	ldr	r2, [pc, #68]	@ (800d6dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800d696:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	3b01      	subs	r3, #1
 800d69c:	2201      	movs	r2, #1
 800d69e:	409a      	lsls	r2, r3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800d6a4:	bf00      	nop
 800d6a6:	3714      	adds	r7, #20
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr
 800d6b0:	58025408 	.word	0x58025408
 800d6b4:	5802541c 	.word	0x5802541c
 800d6b8:	58025430 	.word	0x58025430
 800d6bc:	58025444 	.word	0x58025444
 800d6c0:	58025458 	.word	0x58025458
 800d6c4:	5802546c 	.word	0x5802546c
 800d6c8:	58025480 	.word	0x58025480
 800d6cc:	58025494 	.word	0x58025494
 800d6d0:	1600963f 	.word	0x1600963f
 800d6d4:	58025940 	.word	0x58025940
 800d6d8:	1000823f 	.word	0x1000823f
 800d6dc:	40020940 	.word	0x40020940

0800d6e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b089      	sub	sp, #36	@ 0x24
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d6ee:	4b86      	ldr	r3, [pc, #536]	@ (800d908 <HAL_GPIO_Init+0x228>)
 800d6f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d6f2:	e18c      	b.n	800da0e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	2101      	movs	r1, #1
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	fa01 f303 	lsl.w	r3, r1, r3
 800d700:	4013      	ands	r3, r2
 800d702:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	2b00      	cmp	r3, #0
 800d708:	f000 817e 	beq.w	800da08 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	f003 0303 	and.w	r3, r3, #3
 800d714:	2b01      	cmp	r3, #1
 800d716:	d005      	beq.n	800d724 <HAL_GPIO_Init+0x44>
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	f003 0303 	and.w	r3, r3, #3
 800d720:	2b02      	cmp	r3, #2
 800d722:	d130      	bne.n	800d786 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	689b      	ldr	r3, [r3, #8]
 800d728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	005b      	lsls	r3, r3, #1
 800d72e:	2203      	movs	r2, #3
 800d730:	fa02 f303 	lsl.w	r3, r2, r3
 800d734:	43db      	mvns	r3, r3
 800d736:	69ba      	ldr	r2, [r7, #24]
 800d738:	4013      	ands	r3, r2
 800d73a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	68da      	ldr	r2, [r3, #12]
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	005b      	lsls	r3, r3, #1
 800d744:	fa02 f303 	lsl.w	r3, r2, r3
 800d748:	69ba      	ldr	r2, [r7, #24]
 800d74a:	4313      	orrs	r3, r2
 800d74c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	69ba      	ldr	r2, [r7, #24]
 800d752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d75a:	2201      	movs	r2, #1
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	fa02 f303 	lsl.w	r3, r2, r3
 800d762:	43db      	mvns	r3, r3
 800d764:	69ba      	ldr	r2, [r7, #24]
 800d766:	4013      	ands	r3, r2
 800d768:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	091b      	lsrs	r3, r3, #4
 800d770:	f003 0201 	and.w	r2, r3, #1
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	fa02 f303 	lsl.w	r3, r2, r3
 800d77a:	69ba      	ldr	r2, [r7, #24]
 800d77c:	4313      	orrs	r3, r2
 800d77e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	69ba      	ldr	r2, [r7, #24]
 800d784:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	f003 0303 	and.w	r3, r3, #3
 800d78e:	2b03      	cmp	r3, #3
 800d790:	d017      	beq.n	800d7c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	68db      	ldr	r3, [r3, #12]
 800d796:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d798:	69fb      	ldr	r3, [r7, #28]
 800d79a:	005b      	lsls	r3, r3, #1
 800d79c:	2203      	movs	r2, #3
 800d79e:	fa02 f303 	lsl.w	r3, r2, r3
 800d7a2:	43db      	mvns	r3, r3
 800d7a4:	69ba      	ldr	r2, [r7, #24]
 800d7a6:	4013      	ands	r3, r2
 800d7a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	689a      	ldr	r2, [r3, #8]
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	005b      	lsls	r3, r3, #1
 800d7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7b6:	69ba      	ldr	r2, [r7, #24]
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	69ba      	ldr	r2, [r7, #24]
 800d7c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	f003 0303 	and.w	r3, r3, #3
 800d7ca:	2b02      	cmp	r3, #2
 800d7cc:	d123      	bne.n	800d816 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	08da      	lsrs	r2, r3, #3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	3208      	adds	r2, #8
 800d7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	f003 0307 	and.w	r3, r3, #7
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	220f      	movs	r2, #15
 800d7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ea:	43db      	mvns	r3, r3
 800d7ec:	69ba      	ldr	r2, [r7, #24]
 800d7ee:	4013      	ands	r3, r2
 800d7f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	691a      	ldr	r2, [r3, #16]
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	f003 0307 	and.w	r3, r3, #7
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d802:	69ba      	ldr	r2, [r7, #24]
 800d804:	4313      	orrs	r3, r2
 800d806:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	08da      	lsrs	r2, r3, #3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	3208      	adds	r2, #8
 800d810:	69b9      	ldr	r1, [r7, #24]
 800d812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	005b      	lsls	r3, r3, #1
 800d820:	2203      	movs	r2, #3
 800d822:	fa02 f303 	lsl.w	r3, r2, r3
 800d826:	43db      	mvns	r3, r3
 800d828:	69ba      	ldr	r2, [r7, #24]
 800d82a:	4013      	ands	r3, r2
 800d82c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	f003 0203 	and.w	r2, r3, #3
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	005b      	lsls	r3, r3, #1
 800d83a:	fa02 f303 	lsl.w	r3, r2, r3
 800d83e:	69ba      	ldr	r2, [r7, #24]
 800d840:	4313      	orrs	r3, r2
 800d842:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	69ba      	ldr	r2, [r7, #24]
 800d848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d852:	2b00      	cmp	r3, #0
 800d854:	f000 80d8 	beq.w	800da08 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d858:	4b2c      	ldr	r3, [pc, #176]	@ (800d90c <HAL_GPIO_Init+0x22c>)
 800d85a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d85e:	4a2b      	ldr	r2, [pc, #172]	@ (800d90c <HAL_GPIO_Init+0x22c>)
 800d860:	f043 0302 	orr.w	r3, r3, #2
 800d864:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800d868:	4b28      	ldr	r3, [pc, #160]	@ (800d90c <HAL_GPIO_Init+0x22c>)
 800d86a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d86e:	f003 0302 	and.w	r3, r3, #2
 800d872:	60fb      	str	r3, [r7, #12]
 800d874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d876:	4a26      	ldr	r2, [pc, #152]	@ (800d910 <HAL_GPIO_Init+0x230>)
 800d878:	69fb      	ldr	r3, [r7, #28]
 800d87a:	089b      	lsrs	r3, r3, #2
 800d87c:	3302      	adds	r3, #2
 800d87e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	f003 0303 	and.w	r3, r3, #3
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	220f      	movs	r2, #15
 800d88e:	fa02 f303 	lsl.w	r3, r2, r3
 800d892:	43db      	mvns	r3, r3
 800d894:	69ba      	ldr	r2, [r7, #24]
 800d896:	4013      	ands	r3, r2
 800d898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4a1d      	ldr	r2, [pc, #116]	@ (800d914 <HAL_GPIO_Init+0x234>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d04a      	beq.n	800d938 <HAL_GPIO_Init+0x258>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a1c      	ldr	r2, [pc, #112]	@ (800d918 <HAL_GPIO_Init+0x238>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d02b      	beq.n	800d902 <HAL_GPIO_Init+0x222>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a1b      	ldr	r2, [pc, #108]	@ (800d91c <HAL_GPIO_Init+0x23c>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d025      	beq.n	800d8fe <HAL_GPIO_Init+0x21e>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4a1a      	ldr	r2, [pc, #104]	@ (800d920 <HAL_GPIO_Init+0x240>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d01f      	beq.n	800d8fa <HAL_GPIO_Init+0x21a>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4a19      	ldr	r2, [pc, #100]	@ (800d924 <HAL_GPIO_Init+0x244>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d019      	beq.n	800d8f6 <HAL_GPIO_Init+0x216>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4a18      	ldr	r2, [pc, #96]	@ (800d928 <HAL_GPIO_Init+0x248>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d013      	beq.n	800d8f2 <HAL_GPIO_Init+0x212>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4a17      	ldr	r2, [pc, #92]	@ (800d92c <HAL_GPIO_Init+0x24c>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d00d      	beq.n	800d8ee <HAL_GPIO_Init+0x20e>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	4a16      	ldr	r2, [pc, #88]	@ (800d930 <HAL_GPIO_Init+0x250>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d007      	beq.n	800d8ea <HAL_GPIO_Init+0x20a>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4a15      	ldr	r2, [pc, #84]	@ (800d934 <HAL_GPIO_Init+0x254>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d101      	bne.n	800d8e6 <HAL_GPIO_Init+0x206>
 800d8e2:	2309      	movs	r3, #9
 800d8e4:	e029      	b.n	800d93a <HAL_GPIO_Init+0x25a>
 800d8e6:	230a      	movs	r3, #10
 800d8e8:	e027      	b.n	800d93a <HAL_GPIO_Init+0x25a>
 800d8ea:	2307      	movs	r3, #7
 800d8ec:	e025      	b.n	800d93a <HAL_GPIO_Init+0x25a>
 800d8ee:	2306      	movs	r3, #6
 800d8f0:	e023      	b.n	800d93a <HAL_GPIO_Init+0x25a>
 800d8f2:	2305      	movs	r3, #5
 800d8f4:	e021      	b.n	800d93a <HAL_GPIO_Init+0x25a>
 800d8f6:	2304      	movs	r3, #4
 800d8f8:	e01f      	b.n	800d93a <HAL_GPIO_Init+0x25a>
 800d8fa:	2303      	movs	r3, #3
 800d8fc:	e01d      	b.n	800d93a <HAL_GPIO_Init+0x25a>
 800d8fe:	2302      	movs	r3, #2
 800d900:	e01b      	b.n	800d93a <HAL_GPIO_Init+0x25a>
 800d902:	2301      	movs	r3, #1
 800d904:	e019      	b.n	800d93a <HAL_GPIO_Init+0x25a>
 800d906:	bf00      	nop
 800d908:	58000080 	.word	0x58000080
 800d90c:	58024400 	.word	0x58024400
 800d910:	58000400 	.word	0x58000400
 800d914:	58020000 	.word	0x58020000
 800d918:	58020400 	.word	0x58020400
 800d91c:	58020800 	.word	0x58020800
 800d920:	58020c00 	.word	0x58020c00
 800d924:	58021000 	.word	0x58021000
 800d928:	58021400 	.word	0x58021400
 800d92c:	58021800 	.word	0x58021800
 800d930:	58021c00 	.word	0x58021c00
 800d934:	58022400 	.word	0x58022400
 800d938:	2300      	movs	r3, #0
 800d93a:	69fa      	ldr	r2, [r7, #28]
 800d93c:	f002 0203 	and.w	r2, r2, #3
 800d940:	0092      	lsls	r2, r2, #2
 800d942:	4093      	lsls	r3, r2
 800d944:	69ba      	ldr	r2, [r7, #24]
 800d946:	4313      	orrs	r3, r2
 800d948:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d94a:	4938      	ldr	r1, [pc, #224]	@ (800da2c <HAL_GPIO_Init+0x34c>)
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	089b      	lsrs	r3, r3, #2
 800d950:	3302      	adds	r3, #2
 800d952:	69ba      	ldr	r2, [r7, #24]
 800d954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	43db      	mvns	r3, r3
 800d964:	69ba      	ldr	r2, [r7, #24]
 800d966:	4013      	ands	r3, r2
 800d968:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d972:	2b00      	cmp	r3, #0
 800d974:	d003      	beq.n	800d97e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800d976:	69ba      	ldr	r2, [r7, #24]
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800d97e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	43db      	mvns	r3, r3
 800d992:	69ba      	ldr	r2, [r7, #24]
 800d994:	4013      	ands	r3, r2
 800d996:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d003      	beq.n	800d9ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800d9a4:	69ba      	ldr	r2, [r7, #24]
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800d9ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	43db      	mvns	r3, r3
 800d9be:	69ba      	ldr	r2, [r7, #24]
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d003      	beq.n	800d9d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800d9d0:	69ba      	ldr	r2, [r7, #24]
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	69ba      	ldr	r2, [r7, #24]
 800d9dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	43db      	mvns	r3, r3
 800d9e8:	69ba      	ldr	r2, [r7, #24]
 800d9ea:	4013      	ands	r3, r2
 800d9ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d003      	beq.n	800da02 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800d9fa:	69ba      	ldr	r2, [r7, #24]
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	4313      	orrs	r3, r2
 800da00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	69ba      	ldr	r2, [r7, #24]
 800da06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	3301      	adds	r3, #1
 800da0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	69fb      	ldr	r3, [r7, #28]
 800da14:	fa22 f303 	lsr.w	r3, r2, r3
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f47f ae6b 	bne.w	800d6f4 <HAL_GPIO_Init+0x14>
  }
}
 800da1e:	bf00      	nop
 800da20:	bf00      	nop
 800da22:	3724      	adds	r7, #36	@ 0x24
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr
 800da2c:	58000400 	.word	0x58000400

0800da30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800da30:	b480      	push	{r7}
 800da32:	b085      	sub	sp, #20
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	460b      	mov	r3, r1
 800da3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	691a      	ldr	r2, [r3, #16]
 800da40:	887b      	ldrh	r3, [r7, #2]
 800da42:	4013      	ands	r3, r2
 800da44:	2b00      	cmp	r3, #0
 800da46:	d002      	beq.n	800da4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800da48:	2301      	movs	r3, #1
 800da4a:	73fb      	strb	r3, [r7, #15]
 800da4c:	e001      	b.n	800da52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800da4e:	2300      	movs	r3, #0
 800da50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800da52:	7bfb      	ldrb	r3, [r7, #15]
}
 800da54:	4618      	mov	r0, r3
 800da56:	3714      	adds	r7, #20
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	460b      	mov	r3, r1
 800da6a:	807b      	strh	r3, [r7, #2]
 800da6c:	4613      	mov	r3, r2
 800da6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800da70:	787b      	ldrb	r3, [r7, #1]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d003      	beq.n	800da7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800da76:	887a      	ldrh	r2, [r7, #2]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800da7c:	e003      	b.n	800da86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800da7e:	887b      	ldrh	r3, [r7, #2]
 800da80:	041a      	lsls	r2, r3, #16
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	619a      	str	r2, [r3, #24]
}
 800da86:	bf00      	nop
 800da88:	370c      	adds	r7, #12
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr

0800da92 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b082      	sub	sp, #8
 800da96:	af00      	add	r7, sp, #0
 800da98:	4603      	mov	r3, r0
 800da9a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800da9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800daa0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800daa4:	88fb      	ldrh	r3, [r7, #6]
 800daa6:	4013      	ands	r3, r2
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d008      	beq.n	800dabe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800daac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dab0:	88fb      	ldrh	r3, [r7, #6]
 800dab2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800dab6:	88fb      	ldrh	r3, [r7, #6]
 800dab8:	4618      	mov	r0, r3
 800daba:	f7f8 f979 	bl	8005db0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800dabe:	bf00      	nop
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
	...

0800dac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d101      	bne.n	800dada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800dad6:	2301      	movs	r3, #1
 800dad8:	e08b      	b.n	800dbf2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d106      	bne.n	800daf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7f6 ff4a 	bl	8004988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2224      	movs	r2, #36	@ 0x24
 800daf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f022 0201 	bic.w	r2, r2, #1
 800db0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	685a      	ldr	r2, [r3, #4]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800db18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	689a      	ldr	r2, [r3, #8]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800db28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d107      	bne.n	800db42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	689a      	ldr	r2, [r3, #8]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800db3e:	609a      	str	r2, [r3, #8]
 800db40:	e006      	b.n	800db50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	689a      	ldr	r2, [r3, #8]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800db4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	2b02      	cmp	r3, #2
 800db56:	d108      	bne.n	800db6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	685a      	ldr	r2, [r3, #4]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800db66:	605a      	str	r2, [r3, #4]
 800db68:	e007      	b.n	800db7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	685a      	ldr	r2, [r3, #4]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800db78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	6859      	ldr	r1, [r3, #4]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	4b1d      	ldr	r3, [pc, #116]	@ (800dbfc <HAL_I2C_Init+0x134>)
 800db86:	430b      	orrs	r3, r1
 800db88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	68da      	ldr	r2, [r3, #12]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800db98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	691a      	ldr	r2, [r3, #16]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	695b      	ldr	r3, [r3, #20]
 800dba2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	699b      	ldr	r3, [r3, #24]
 800dbaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	430a      	orrs	r2, r1
 800dbb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	69d9      	ldr	r1, [r3, #28]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a1a      	ldr	r2, [r3, #32]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	430a      	orrs	r2, r1
 800dbc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f042 0201 	orr.w	r2, r2, #1
 800dbd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2220      	movs	r2, #32
 800dbde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3708      	adds	r7, #8
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	02008000 	.word	0x02008000

0800dc00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b088      	sub	sp, #32
 800dc04:	af02      	add	r7, sp, #8
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	4608      	mov	r0, r1
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	4603      	mov	r3, r0
 800dc10:	817b      	strh	r3, [r7, #10]
 800dc12:	460b      	mov	r3, r1
 800dc14:	813b      	strh	r3, [r7, #8]
 800dc16:	4613      	mov	r3, r2
 800dc18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	2b20      	cmp	r3, #32
 800dc24:	f040 80f9 	bne.w	800de1a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc28:	6a3b      	ldr	r3, [r7, #32]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d002      	beq.n	800dc34 <HAL_I2C_Mem_Write+0x34>
 800dc2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d105      	bne.n	800dc40 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc3a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	e0ed      	b.n	800de1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d101      	bne.n	800dc4e <HAL_I2C_Mem_Write+0x4e>
 800dc4a:	2302      	movs	r3, #2
 800dc4c:	e0e6      	b.n	800de1c <HAL_I2C_Mem_Write+0x21c>
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2201      	movs	r2, #1
 800dc52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dc56:	f7fa fdbb 	bl	80087d0 <HAL_GetTick>
 800dc5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	9300      	str	r3, [sp, #0]
 800dc60:	2319      	movs	r3, #25
 800dc62:	2201      	movs	r2, #1
 800dc64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800dc68:	68f8      	ldr	r0, [r7, #12]
 800dc6a:	f002 f80e 	bl	800fc8a <I2C_WaitOnFlagUntilTimeout>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800dc74:	2301      	movs	r3, #1
 800dc76:	e0d1      	b.n	800de1c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2221      	movs	r2, #33	@ 0x21
 800dc7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2240      	movs	r2, #64	@ 0x40
 800dc84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6a3a      	ldr	r2, [r7, #32]
 800dc92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dc98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dca0:	88f8      	ldrh	r0, [r7, #6]
 800dca2:	893a      	ldrh	r2, [r7, #8]
 800dca4:	8979      	ldrh	r1, [r7, #10]
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	9301      	str	r3, [sp, #4]
 800dcaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcac:	9300      	str	r3, [sp, #0]
 800dcae:	4603      	mov	r3, r0
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f001 f95b 	bl	800ef6c <I2C_RequestMemoryWrite>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d005      	beq.n	800dcc8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	e0a9      	b.n	800de1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	2bff      	cmp	r3, #255	@ 0xff
 800dcd0:	d90e      	bls.n	800dcf0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	22ff      	movs	r2, #255	@ 0xff
 800dcd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	8979      	ldrh	r1, [r7, #10]
 800dce0:	2300      	movs	r3, #0
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f002 f991 	bl	8010010 <I2C_TransferConfig>
 800dcee:	e00f      	b.n	800dd10 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcf4:	b29a      	uxth	r2, r3
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcfe:	b2da      	uxtb	r2, r3
 800dd00:	8979      	ldrh	r1, [r7, #10]
 800dd02:	2300      	movs	r3, #0
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f002 f980 	bl	8010010 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dd10:	697a      	ldr	r2, [r7, #20]
 800dd12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f002 f811 	bl	800fd3c <I2C_WaitOnTXISFlagUntilTimeout>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d001      	beq.n	800dd24 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800dd20:	2301      	movs	r3, #1
 800dd22:	e07b      	b.n	800de1c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd28:	781a      	ldrb	r2, [r3, #0]
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd34:	1c5a      	adds	r2, r3, #1
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	3b01      	subs	r3, #1
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd4c:	3b01      	subs	r3, #1
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d034      	beq.n	800ddc8 <HAL_I2C_Mem_Write+0x1c8>
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d130      	bne.n	800ddc8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	2180      	movs	r1, #128	@ 0x80
 800dd70:	68f8      	ldr	r0, [r7, #12]
 800dd72:	f001 ff8a 	bl	800fc8a <I2C_WaitOnFlagUntilTimeout>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d001      	beq.n	800dd80 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	e04d      	b.n	800de1c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	2bff      	cmp	r3, #255	@ 0xff
 800dd88:	d90e      	bls.n	800dda8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	22ff      	movs	r2, #255	@ 0xff
 800dd8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	8979      	ldrh	r1, [r7, #10]
 800dd98:	2300      	movs	r3, #0
 800dd9a:	9300      	str	r3, [sp, #0]
 800dd9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f002 f935 	bl	8010010 <I2C_TransferConfig>
 800dda6:	e00f      	b.n	800ddc8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ddac:	b29a      	uxth	r2, r3
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	8979      	ldrh	r1, [r7, #10]
 800ddba:	2300      	movs	r3, #0
 800ddbc:	9300      	str	r3, [sp, #0]
 800ddbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ddc2:	68f8      	ldr	r0, [r7, #12]
 800ddc4:	f002 f924 	bl	8010010 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d19e      	bne.n	800dd10 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ddd2:	697a      	ldr	r2, [r7, #20]
 800ddd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	f001 fff7 	bl	800fdca <I2C_WaitOnSTOPFlagUntilTimeout>
 800dddc:	4603      	mov	r3, r0
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d001      	beq.n	800dde6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800dde2:	2301      	movs	r3, #1
 800dde4:	e01a      	b.n	800de1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2220      	movs	r2, #32
 800ddec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	6859      	ldr	r1, [r3, #4]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	4b0a      	ldr	r3, [pc, #40]	@ (800de24 <HAL_I2C_Mem_Write+0x224>)
 800ddfa:	400b      	ands	r3, r1
 800ddfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2220      	movs	r2, #32
 800de02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2200      	movs	r2, #0
 800de0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2200      	movs	r2, #0
 800de12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800de16:	2300      	movs	r3, #0
 800de18:	e000      	b.n	800de1c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800de1a:	2302      	movs	r3, #2
  }
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3718      	adds	r7, #24
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	fe00e800 	.word	0xfe00e800

0800de28 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b088      	sub	sp, #32
 800de2c:	af02      	add	r7, sp, #8
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	4608      	mov	r0, r1
 800de32:	4611      	mov	r1, r2
 800de34:	461a      	mov	r2, r3
 800de36:	4603      	mov	r3, r0
 800de38:	817b      	strh	r3, [r7, #10]
 800de3a:	460b      	mov	r3, r1
 800de3c:	813b      	strh	r3, [r7, #8]
 800de3e:	4613      	mov	r3, r2
 800de40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	2b20      	cmp	r3, #32
 800de4c:	f040 80fd 	bne.w	800e04a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800de50:	6a3b      	ldr	r3, [r7, #32]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d002      	beq.n	800de5c <HAL_I2C_Mem_Read+0x34>
 800de56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d105      	bne.n	800de68 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de62:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800de64:	2301      	movs	r3, #1
 800de66:	e0f1      	b.n	800e04c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d101      	bne.n	800de76 <HAL_I2C_Mem_Read+0x4e>
 800de72:	2302      	movs	r3, #2
 800de74:	e0ea      	b.n	800e04c <HAL_I2C_Mem_Read+0x224>
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2201      	movs	r2, #1
 800de7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800de7e:	f7fa fca7 	bl	80087d0 <HAL_GetTick>
 800de82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	2319      	movs	r3, #25
 800de8a:	2201      	movs	r2, #1
 800de8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f001 fefa 	bl	800fc8a <I2C_WaitOnFlagUntilTimeout>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d001      	beq.n	800dea0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800de9c:	2301      	movs	r3, #1
 800de9e:	e0d5      	b.n	800e04c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2222      	movs	r2, #34	@ 0x22
 800dea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2240      	movs	r2, #64	@ 0x40
 800deac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2200      	movs	r2, #0
 800deb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6a3a      	ldr	r2, [r7, #32]
 800deba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2200      	movs	r2, #0
 800dec6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dec8:	88f8      	ldrh	r0, [r7, #6]
 800deca:	893a      	ldrh	r2, [r7, #8]
 800decc:	8979      	ldrh	r1, [r7, #10]
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	9301      	str	r3, [sp, #4]
 800ded2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded4:	9300      	str	r3, [sp, #0]
 800ded6:	4603      	mov	r3, r0
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f001 f89b 	bl	800f014 <I2C_RequestMemoryRead>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d005      	beq.n	800def0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2200      	movs	r2, #0
 800dee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800deec:	2301      	movs	r3, #1
 800deee:	e0ad      	b.n	800e04c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800def4:	b29b      	uxth	r3, r3
 800def6:	2bff      	cmp	r3, #255	@ 0xff
 800def8:	d90e      	bls.n	800df18 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	22ff      	movs	r2, #255	@ 0xff
 800defe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df04:	b2da      	uxtb	r2, r3
 800df06:	8979      	ldrh	r1, [r7, #10]
 800df08:	4b52      	ldr	r3, [pc, #328]	@ (800e054 <HAL_I2C_Mem_Read+0x22c>)
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800df10:	68f8      	ldr	r0, [r7, #12]
 800df12:	f002 f87d 	bl	8010010 <I2C_TransferConfig>
 800df16:	e00f      	b.n	800df38 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df26:	b2da      	uxtb	r2, r3
 800df28:	8979      	ldrh	r1, [r7, #10]
 800df2a:	4b4a      	ldr	r3, [pc, #296]	@ (800e054 <HAL_I2C_Mem_Read+0x22c>)
 800df2c:	9300      	str	r3, [sp, #0]
 800df2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f002 f86c 	bl	8010010 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df3e:	2200      	movs	r2, #0
 800df40:	2104      	movs	r1, #4
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f001 fea1 	bl	800fc8a <I2C_WaitOnFlagUntilTimeout>
 800df48:	4603      	mov	r3, r0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d001      	beq.n	800df52 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	e07c      	b.n	800e04c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df5c:	b2d2      	uxtb	r2, r2
 800df5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df64:	1c5a      	adds	r2, r3, #1
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df6e:	3b01      	subs	r3, #1
 800df70:	b29a      	uxth	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	3b01      	subs	r3, #1
 800df7e:	b29a      	uxth	r2, r3
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df88:	b29b      	uxth	r3, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d034      	beq.n	800dff8 <HAL_I2C_Mem_Read+0x1d0>
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df92:	2b00      	cmp	r3, #0
 800df94:	d130      	bne.n	800dff8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	9300      	str	r3, [sp, #0]
 800df9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df9c:	2200      	movs	r2, #0
 800df9e:	2180      	movs	r1, #128	@ 0x80
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f001 fe72 	bl	800fc8a <I2C_WaitOnFlagUntilTimeout>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d001      	beq.n	800dfb0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800dfac:	2301      	movs	r3, #1
 800dfae:	e04d      	b.n	800e04c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	2bff      	cmp	r3, #255	@ 0xff
 800dfb8:	d90e      	bls.n	800dfd8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	22ff      	movs	r2, #255	@ 0xff
 800dfbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfc4:	b2da      	uxtb	r2, r3
 800dfc6:	8979      	ldrh	r1, [r7, #10]
 800dfc8:	2300      	movs	r3, #0
 800dfca:	9300      	str	r3, [sp, #0]
 800dfcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	f002 f81d 	bl	8010010 <I2C_TransferConfig>
 800dfd6:	e00f      	b.n	800dff8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfe6:	b2da      	uxtb	r2, r3
 800dfe8:	8979      	ldrh	r1, [r7, #10]
 800dfea:	2300      	movs	r3, #0
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f002 f80c 	bl	8010010 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d19a      	bne.n	800df38 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e002:	697a      	ldr	r2, [r7, #20]
 800e004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f001 fedf 	bl	800fdca <I2C_WaitOnSTOPFlagUntilTimeout>
 800e00c:	4603      	mov	r3, r0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d001      	beq.n	800e016 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	e01a      	b.n	800e04c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	2220      	movs	r2, #32
 800e01c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	6859      	ldr	r1, [r3, #4]
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	4b0b      	ldr	r3, [pc, #44]	@ (800e058 <HAL_I2C_Mem_Read+0x230>)
 800e02a:	400b      	ands	r3, r1
 800e02c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2220      	movs	r2, #32
 800e032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2200      	movs	r2, #0
 800e03a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2200      	movs	r2, #0
 800e042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e046:	2300      	movs	r3, #0
 800e048:	e000      	b.n	800e04c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e04a:	2302      	movs	r3, #2
  }
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3718      	adds	r7, #24
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	80002400 	.word	0x80002400
 800e058:	fe00e800 	.word	0xfe00e800

0800e05c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b086      	sub	sp, #24
 800e060:	af02      	add	r7, sp, #8
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	4608      	mov	r0, r1
 800e066:	4611      	mov	r1, r2
 800e068:	461a      	mov	r2, r3
 800e06a:	4603      	mov	r3, r0
 800e06c:	817b      	strh	r3, [r7, #10]
 800e06e:	460b      	mov	r3, r1
 800e070:	813b      	strh	r3, [r7, #8]
 800e072:	4613      	mov	r3, r2
 800e074:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	2b20      	cmp	r3, #32
 800e080:	d16a      	bne.n	800e158 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <HAL_I2C_Mem_Write_IT+0x32>
 800e088:	8bbb      	ldrh	r3, [r7, #28]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d105      	bne.n	800e09a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e094:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e096:	2301      	movs	r3, #1
 800e098:	e05f      	b.n	800e15a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	699b      	ldr	r3, [r3, #24]
 800e0a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e0a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e0a8:	d101      	bne.n	800e0ae <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800e0aa:	2302      	movs	r3, #2
 800e0ac:	e055      	b.n	800e15a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d101      	bne.n	800e0bc <HAL_I2C_Mem_Write_IT+0x60>
 800e0b8:	2302      	movs	r3, #2
 800e0ba:	e04e      	b.n	800e15a <HAL_I2C_Mem_Write_IT+0xfe>
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2221      	movs	r2, #33	@ 0x21
 800e0c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2240      	movs	r2, #64	@ 0x40
 800e0d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	69ba      	ldr	r2, [r7, #24]
 800e0e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	8bba      	ldrh	r2, [r7, #28]
 800e0ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	4a1d      	ldr	r2, [pc, #116]	@ (800e164 <HAL_I2C_Mem_Write_IT+0x108>)
 800e0f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e168 <HAL_I2C_Mem_Write_IT+0x10c>)
 800e0f6:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800e0f8:	897a      	ldrh	r2, [r7, #10]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e0fe:	88fb      	ldrh	r3, [r7, #6]
 800e100:	2b01      	cmp	r3, #1
 800e102:	d109      	bne.n	800e118 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e104:	893b      	ldrh	r3, [r7, #8]
 800e106:	b2da      	uxtb	r2, r3
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f04f 32ff 	mov.w	r2, #4294967295
 800e114:	651a      	str	r2, [r3, #80]	@ 0x50
 800e116:	e00b      	b.n	800e130 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e118:	893b      	ldrh	r3, [r7, #8]
 800e11a:	0a1b      	lsrs	r3, r3, #8
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	b2da      	uxtb	r2, r3
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800e126:	893b      	ldrh	r3, [r7, #8]
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	461a      	mov	r2, r3
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e130:	88fb      	ldrh	r3, [r7, #6]
 800e132:	b2da      	uxtb	r2, r3
 800e134:	8979      	ldrh	r1, [r7, #10]
 800e136:	4b0d      	ldr	r3, [pc, #52]	@ (800e16c <HAL_I2C_Mem_Write_IT+0x110>)
 800e138:	9300      	str	r3, [sp, #0]
 800e13a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e13e:	68f8      	ldr	r0, [r7, #12]
 800e140:	f001 ff66 	bl	8010010 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2200      	movs	r2, #0
 800e148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e14c:	2101      	movs	r1, #1
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	f001 ff90 	bl	8010074 <I2C_Enable_IRQ>

    return HAL_OK;
 800e154:	2300      	movs	r3, #0
 800e156:	e000      	b.n	800e15a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800e158:	2302      	movs	r3, #2
  }
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	ffff0000 	.word	0xffff0000
 800e168:	0800e359 	.word	0x0800e359
 800e16c:	80002000 	.word	0x80002000

0800e170 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af02      	add	r7, sp, #8
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	4608      	mov	r0, r1
 800e17a:	4611      	mov	r1, r2
 800e17c:	461a      	mov	r2, r3
 800e17e:	4603      	mov	r3, r0
 800e180:	817b      	strh	r3, [r7, #10]
 800e182:	460b      	mov	r3, r1
 800e184:	813b      	strh	r3, [r7, #8]
 800e186:	4613      	mov	r3, r2
 800e188:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e190:	b2db      	uxtb	r3, r3
 800e192:	2b20      	cmp	r3, #32
 800e194:	d166      	bne.n	800e264 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d002      	beq.n	800e1a2 <HAL_I2C_Mem_Read_IT+0x32>
 800e19c:	8bbb      	ldrh	r3, [r7, #28]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d105      	bne.n	800e1ae <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e1a8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e05b      	b.n	800e266 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	699b      	ldr	r3, [r3, #24]
 800e1b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e1b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e1bc:	d101      	bne.n	800e1c2 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800e1be:	2302      	movs	r3, #2
 800e1c0:	e051      	b.n	800e266 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d101      	bne.n	800e1d0 <HAL_I2C_Mem_Read_IT+0x60>
 800e1cc:	2302      	movs	r3, #2
 800e1ce:	e04a      	b.n	800e266 <HAL_I2C_Mem_Read_IT+0xf6>
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2222      	movs	r2, #34	@ 0x22
 800e1dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2240      	movs	r2, #64	@ 0x40
 800e1e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	69ba      	ldr	r2, [r7, #24]
 800e1f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	8bba      	ldrh	r2, [r7, #28]
 800e1f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	4a1c      	ldr	r2, [pc, #112]	@ (800e270 <HAL_I2C_Mem_Read_IT+0x100>)
 800e1fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	4a1c      	ldr	r2, [pc, #112]	@ (800e274 <HAL_I2C_Mem_Read_IT+0x104>)
 800e204:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800e206:	897a      	ldrh	r2, [r7, #10]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e20c:	88fb      	ldrh	r3, [r7, #6]
 800e20e:	2b01      	cmp	r3, #1
 800e210:	d109      	bne.n	800e226 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e212:	893b      	ldrh	r3, [r7, #8]
 800e214:	b2da      	uxtb	r2, r3
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f04f 32ff 	mov.w	r2, #4294967295
 800e222:	651a      	str	r2, [r3, #80]	@ 0x50
 800e224:	e00b      	b.n	800e23e <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e226:	893b      	ldrh	r3, [r7, #8]
 800e228:	0a1b      	lsrs	r3, r3, #8
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800e234:	893b      	ldrh	r3, [r7, #8]
 800e236:	b2db      	uxtb	r3, r3
 800e238:	461a      	mov	r2, r3
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e23e:	88fb      	ldrh	r3, [r7, #6]
 800e240:	b2da      	uxtb	r2, r3
 800e242:	8979      	ldrh	r1, [r7, #10]
 800e244:	4b0c      	ldr	r3, [pc, #48]	@ (800e278 <HAL_I2C_Mem_Read_IT+0x108>)
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	2300      	movs	r3, #0
 800e24a:	68f8      	ldr	r0, [r7, #12]
 800e24c:	f001 fee0 	bl	8010010 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2200      	movs	r2, #0
 800e254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e258:	2101      	movs	r1, #1
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	f001 ff0a 	bl	8010074 <I2C_Enable_IRQ>

    return HAL_OK;
 800e260:	2300      	movs	r3, #0
 800e262:	e000      	b.n	800e266 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800e264:	2302      	movs	r3, #2
  }
}
 800e266:	4618      	mov	r0, r3
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	ffff0000 	.word	0xffff0000
 800e274:	0800e359 	.word	0x0800e359
 800e278:	80002000 	.word	0x80002000

0800e27c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	699b      	ldr	r3, [r3, #24]
 800e28a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d005      	beq.n	800e2a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	68f9      	ldr	r1, [r7, #12]
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	4798      	blx	r3
  }
}
 800e2a8:	bf00      	nop
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b083      	sub	sp, #12
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800e2b8:	bf00      	nop
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800e2cc:	bf00      	nop
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr

0800e2d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b083      	sub	sp, #12
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800e2e0:	bf00      	nop
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b083      	sub	sp, #12
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800e2f4:	bf00      	nop
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	460b      	mov	r3, r1
 800e30a:	70fb      	strb	r3, [r7, #3]
 800e30c:	4613      	mov	r3, r2
 800e30e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800e310:	bf00      	nop
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800e324:	bf00      	nop
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800e338:	bf00      	nop
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800e34c:	bf00      	nop
 800e34e:	370c      	adds	r7, #12
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b088      	sub	sp, #32
 800e35c:	af02      	add	r7, sp, #8
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800e364:	4b8d      	ldr	r3, [pc, #564]	@ (800e59c <I2C_Mem_ISR_IT+0x244>)
 800e366:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e372:	2b01      	cmp	r3, #1
 800e374:	d101      	bne.n	800e37a <I2C_Mem_ISR_IT+0x22>
 800e376:	2302      	movs	r3, #2
 800e378:	e10c      	b.n	800e594 <I2C_Mem_ISR_IT+0x23c>
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2201      	movs	r2, #1
 800e37e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	f003 0310 	and.w	r3, r3, #16
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d012      	beq.n	800e3b2 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e392:	2b00      	cmp	r3, #0
 800e394:	d00d      	beq.n	800e3b2 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2210      	movs	r2, #16
 800e39c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3a2:	f043 0204 	orr.w	r2, r3, #4
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	f001 fc2b 	bl	800fc06 <I2C_Flush_TXDR>
 800e3b0:	e0dd      	b.n	800e56e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	f003 0304 	and.w	r3, r3, #4
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d022      	beq.n	800e402 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d01d      	beq.n	800e402 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	f023 0304 	bic.w	r3, r3, #4
 800e3cc:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3d8:	b2d2      	uxtb	r2, r2
 800e3da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3e0:	1c5a      	adds	r2, r3, #1
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	3b01      	subs	r3, #1
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e400:	e0b5      	b.n	800e56e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	f003 0302 	and.w	r3, r3, #2
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d02c      	beq.n	800e466 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e412:	2b00      	cmp	r3, #0
 800e414:	d027      	beq.n	800e466 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e41e:	d118      	bne.n	800e452 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e424:	781a      	ldrb	r2, [r3, #0]
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e430:	1c5a      	adds	r2, r3, #1
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e43a:	3b01      	subs	r3, #1
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e446:	b29b      	uxth	r3, r3
 800e448:	3b01      	subs	r3, #1
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800e450:	e08d      	b.n	800e56e <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	68fa      	ldr	r2, [r7, #12]
 800e458:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e45a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f04f 32ff 	mov.w	r2, #4294967295
 800e462:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800e464:	e083      	b.n	800e56e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d03c      	beq.n	800e4ea <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800e476:	2b00      	cmp	r3, #0
 800e478:	d037      	beq.n	800e4ea <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e47e:	b29b      	uxth	r3, r3
 800e480:	2b00      	cmp	r3, #0
 800e482:	d02c      	beq.n	800e4de <I2C_Mem_ISR_IT+0x186>
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d128      	bne.n	800e4de <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e490:	b29b      	uxth	r3, r3
 800e492:	2bff      	cmp	r3, #255	@ 0xff
 800e494:	d910      	bls.n	800e4b8 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	22ff      	movs	r2, #255	@ 0xff
 800e49a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4a0:	b299      	uxth	r1, r3
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4a6:	b2da      	uxtb	r2, r3
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	9300      	str	r3, [sp, #0]
 800e4ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f001 fdad 	bl	8010010 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e4b6:	e017      	b.n	800e4e8 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4bc:	b29a      	uxth	r2, r3
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4c6:	b299      	uxth	r1, r3
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4cc:	b2da      	uxtb	r2, r3
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e4d6:	68f8      	ldr	r0, [r7, #12]
 800e4d8:	f001 fd9a 	bl	8010010 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e4dc:	e004      	b.n	800e4e8 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e4de:	2140      	movs	r1, #64	@ 0x40
 800e4e0:	68f8      	ldr	r0, [r7, #12]
 800e4e2:	f001 fa79 	bl	800f9d8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e4e6:	e042      	b.n	800e56e <I2C_Mem_ISR_IT+0x216>
 800e4e8:	e041      	b.n	800e56e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d03c      	beq.n	800e56e <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d037      	beq.n	800e56e <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e4fe:	2101      	movs	r1, #1
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	f001 fe3b 	bl	801017c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e506:	2102      	movs	r1, #2
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f001 fdb3 	bl	8010074 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e514:	b2db      	uxtb	r3, r3
 800e516:	2b22      	cmp	r3, #34	@ 0x22
 800e518:	d101      	bne.n	800e51e <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800e51a:	4b21      	ldr	r3, [pc, #132]	@ (800e5a0 <I2C_Mem_ISR_IT+0x248>)
 800e51c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e522:	b29b      	uxth	r3, r3
 800e524:	2bff      	cmp	r3, #255	@ 0xff
 800e526:	d910      	bls.n	800e54a <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	22ff      	movs	r2, #255	@ 0xff
 800e52c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e532:	b299      	uxth	r1, r3
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e538:	b2da      	uxtb	r2, r3
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	9300      	str	r3, [sp, #0]
 800e53e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e542:	68f8      	ldr	r0, [r7, #12]
 800e544:	f001 fd64 	bl	8010010 <I2C_TransferConfig>
 800e548:	e011      	b.n	800e56e <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e54e:	b29a      	uxth	r2, r3
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e558:	b299      	uxth	r1, r3
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e55e:	b2da      	uxtb	r2, r3
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e568:	68f8      	ldr	r0, [r7, #12]
 800e56a:	f001 fd51 	bl	8010010 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	f003 0320 	and.w	r3, r3, #32
 800e574:	2b00      	cmp	r3, #0
 800e576:	d008      	beq.n	800e58a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d003      	beq.n	800e58a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800e582:	6939      	ldr	r1, [r7, #16]
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f000 feb7 	bl	800f2f8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2200      	movs	r2, #0
 800e58e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e592:	2300      	movs	r3, #0
}
 800e594:	4618      	mov	r0, r3
 800e596:	3718      	adds	r7, #24
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	80002000 	.word	0x80002000
 800e5a0:	80002400 	.word	0x80002400

0800e5a4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b086      	sub	sp, #24
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d101      	bne.n	800e5c8 <I2C_Slave_ISR_IT+0x24>
 800e5c4:	2302      	movs	r3, #2
 800e5c6:	e0e2      	b.n	800e78e <I2C_Slave_ISR_IT+0x1ea>
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	f003 0320 	and.w	r3, r3, #32
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d009      	beq.n	800e5ee <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d004      	beq.n	800e5ee <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800e5e4:	6939      	ldr	r1, [r7, #16]
 800e5e6:	68f8      	ldr	r0, [r7, #12]
 800e5e8:	f000 ff4e 	bl	800f488 <I2C_ITSlaveCplt>
 800e5ec:	e0ca      	b.n	800e784 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	f003 0310 	and.w	r3, r3, #16
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d04b      	beq.n	800e690 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d046      	beq.n	800e690 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e606:	b29b      	uxth	r3, r3
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d128      	bne.n	800e65e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e612:	b2db      	uxtb	r3, r3
 800e614:	2b28      	cmp	r3, #40	@ 0x28
 800e616:	d108      	bne.n	800e62a <I2C_Slave_ISR_IT+0x86>
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e61e:	d104      	bne.n	800e62a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800e620:	6939      	ldr	r1, [r7, #16]
 800e622:	68f8      	ldr	r0, [r7, #12]
 800e624:	f001 f984 	bl	800f930 <I2C_ITListenCplt>
 800e628:	e031      	b.n	800e68e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e630:	b2db      	uxtb	r3, r3
 800e632:	2b29      	cmp	r3, #41	@ 0x29
 800e634:	d10e      	bne.n	800e654 <I2C_Slave_ISR_IT+0xb0>
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e63c:	d00a      	beq.n	800e654 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	2210      	movs	r2, #16
 800e644:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f001 fadd 	bl	800fc06 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f000 fdf6 	bl	800f23e <I2C_ITSlaveSeqCplt>
 800e652:	e01c      	b.n	800e68e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	2210      	movs	r2, #16
 800e65a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800e65c:	e08f      	b.n	800e77e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2210      	movs	r2, #16
 800e664:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e66a:	f043 0204 	orr.w	r2, r3, #4
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d003      	beq.n	800e680 <I2C_Slave_ISR_IT+0xdc>
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e67e:	d17e      	bne.n	800e77e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e684:	4619      	mov	r1, r3
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f001 f9a6 	bl	800f9d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800e68c:	e077      	b.n	800e77e <I2C_Slave_ISR_IT+0x1da>
 800e68e:	e076      	b.n	800e77e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	f003 0304 	and.w	r3, r3, #4
 800e696:	2b00      	cmp	r3, #0
 800e698:	d02f      	beq.n	800e6fa <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d02a      	beq.n	800e6fa <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d018      	beq.n	800e6e0 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6b8:	b2d2      	uxtb	r2, r2
 800e6ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6c0:	1c5a      	adds	r2, r3, #1
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6ca:	3b01      	subs	r3, #1
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	3b01      	subs	r3, #1
 800e6da:	b29a      	uxth	r2, r3
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d14b      	bne.n	800e782 <I2C_Slave_ISR_IT+0x1de>
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e6f0:	d047      	beq.n	800e782 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800e6f2:	68f8      	ldr	r0, [r7, #12]
 800e6f4:	f000 fda3 	bl	800f23e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800e6f8:	e043      	b.n	800e782 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	f003 0308 	and.w	r3, r3, #8
 800e700:	2b00      	cmp	r3, #0
 800e702:	d009      	beq.n	800e718 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d004      	beq.n	800e718 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800e70e:	6939      	ldr	r1, [r7, #16]
 800e710:	68f8      	ldr	r0, [r7, #12]
 800e712:	f000 fcd3 	bl	800f0bc <I2C_ITAddrCplt>
 800e716:	e035      	b.n	800e784 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	f003 0302 	and.w	r3, r3, #2
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d030      	beq.n	800e784 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d02b      	beq.n	800e784 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e730:	b29b      	uxth	r3, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	d018      	beq.n	800e768 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e73a:	781a      	ldrb	r2, [r3, #0]
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e746:	1c5a      	adds	r2, r3, #1
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e750:	b29b      	uxth	r3, r3
 800e752:	3b01      	subs	r3, #1
 800e754:	b29a      	uxth	r2, r3
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e75e:	3b01      	subs	r3, #1
 800e760:	b29a      	uxth	r2, r3
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e766:	e00d      	b.n	800e784 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e76e:	d002      	beq.n	800e776 <I2C_Slave_ISR_IT+0x1d2>
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d106      	bne.n	800e784 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f000 fd61 	bl	800f23e <I2C_ITSlaveSeqCplt>
 800e77c:	e002      	b.n	800e784 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800e77e:	bf00      	nop
 800e780:	e000      	b.n	800e784 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800e782:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2200      	movs	r2, #0
 800e788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e78c:	2300      	movs	r3, #0
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3718      	adds	r7, #24
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800e796:	b580      	push	{r7, lr}
 800e798:	b088      	sub	sp, #32
 800e79a:	af02      	add	r7, sp, #8
 800e79c:	60f8      	str	r0, [r7, #12]
 800e79e:	60b9      	str	r1, [r7, #8]
 800e7a0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d101      	bne.n	800e7b0 <I2C_Master_ISR_DMA+0x1a>
 800e7ac:	2302      	movs	r3, #2
 800e7ae:	e0d9      	b.n	800e964 <I2C_Master_ISR_DMA+0x1ce>
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	f003 0310 	and.w	r3, r3, #16
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d016      	beq.n	800e7f0 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d011      	beq.n	800e7f0 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	2210      	movs	r2, #16
 800e7d2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7d8:	f043 0204 	orr.w	r2, r3, #4
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e7e0:	2120      	movs	r1, #32
 800e7e2:	68f8      	ldr	r0, [r7, #12]
 800e7e4:	f001 fc46 	bl	8010074 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f001 fa0c 	bl	800fc06 <I2C_Flush_TXDR>
 800e7ee:	e0b4      	b.n	800e95a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d071      	beq.n	800e8de <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e800:	2b00      	cmp	r3, #0
 800e802:	d06c      	beq.n	800e8de <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e812:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e818:	b29b      	uxth	r3, r3
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d04e      	beq.n	800e8bc <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	b29b      	uxth	r3, r3
 800e826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e82a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e830:	b29b      	uxth	r3, r3
 800e832:	2bff      	cmp	r3, #255	@ 0xff
 800e834:	d906      	bls.n	800e844 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	22ff      	movs	r2, #255	@ 0xff
 800e83a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800e83c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e840:	617b      	str	r3, [r7, #20]
 800e842:	e010      	b.n	800e866 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e848:	b29a      	uxth	r2, r3
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e852:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e856:	d003      	beq.n	800e860 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e85c:	617b      	str	r3, [r7, #20]
 800e85e:	e002      	b.n	800e866 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800e860:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e864:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e86a:	b2da      	uxtb	r2, r3
 800e86c:	8a79      	ldrh	r1, [r7, #18]
 800e86e:	2300      	movs	r3, #0
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f001 fbcb 	bl	8010010 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e87e:	b29a      	uxth	r2, r3
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e884:	1ad3      	subs	r3, r2, r3
 800e886:	b29a      	uxth	r2, r3
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e892:	b2db      	uxtb	r3, r3
 800e894:	2b22      	cmp	r3, #34	@ 0x22
 800e896:	d108      	bne.n	800e8aa <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e8a6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e8a8:	e057      	b.n	800e95a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e8b8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e8ba:	e04e      	b.n	800e95a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e8c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e8ca:	d003      	beq.n	800e8d4 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f000 fc79 	bl	800f1c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800e8d2:	e042      	b.n	800e95a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e8d4:	2140      	movs	r1, #64	@ 0x40
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f001 f87e 	bl	800f9d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800e8dc:	e03d      	b.n	800e95a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d028      	beq.n	800e93a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d023      	beq.n	800e93a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d119      	bne.n	800e930 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e906:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e90a:	d025      	beq.n	800e958 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e910:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e914:	d108      	bne.n	800e928 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	685a      	ldr	r2, [r3, #4]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e924:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800e926:	e017      	b.n	800e958 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800e928:	68f8      	ldr	r0, [r7, #12]
 800e92a:	f000 fc4b 	bl	800f1c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800e92e:	e013      	b.n	800e958 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e930:	2140      	movs	r1, #64	@ 0x40
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f001 f850 	bl	800f9d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800e938:	e00e      	b.n	800e958 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	f003 0320 	and.w	r3, r3, #32
 800e940:	2b00      	cmp	r3, #0
 800e942:	d00a      	beq.n	800e95a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d005      	beq.n	800e95a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800e94e:	68b9      	ldr	r1, [r7, #8]
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f000 fcd1 	bl	800f2f8 <I2C_ITMasterCplt>
 800e956:	e000      	b.n	800e95a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800e958:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e962:	2300      	movs	r3, #0
}
 800e964:	4618      	mov	r0, r3
 800e966:	3718      	adds	r7, #24
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b088      	sub	sp, #32
 800e970:	af02      	add	r7, sp, #8
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800e978:	4b8d      	ldr	r3, [pc, #564]	@ (800ebb0 <I2C_Mem_ISR_DMA+0x244>)
 800e97a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e982:	2b01      	cmp	r3, #1
 800e984:	d101      	bne.n	800e98a <I2C_Mem_ISR_DMA+0x1e>
 800e986:	2302      	movs	r3, #2
 800e988:	e10e      	b.n	800eba8 <I2C_Mem_ISR_DMA+0x23c>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2201      	movs	r2, #1
 800e98e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	f003 0310 	and.w	r3, r3, #16
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d016      	beq.n	800e9ca <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d011      	beq.n	800e9ca <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2210      	movs	r2, #16
 800e9ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9b2:	f043 0204 	orr.w	r2, r3, #4
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e9ba:	2120      	movs	r1, #32
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f001 fb59 	bl	8010074 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f001 f91f 	bl	800fc06 <I2C_Flush_TXDR>
 800e9c8:	e0e9      	b.n	800eb9e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	f003 0302 	and.w	r3, r3, #2
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d00e      	beq.n	800e9f2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d009      	beq.n	800e9f2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e9e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ee:	651a      	str	r2, [r3, #80]	@ 0x50
 800e9f0:	e0d5      	b.n	800eb9e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d05f      	beq.n	800eabc <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d05a      	beq.n	800eabc <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ea06:	2101      	movs	r1, #1
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f001 fbb7 	bl	801017c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ea0e:	2110      	movs	r1, #16
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f001 fb2f 	bl	8010074 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d048      	beq.n	800eab2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	2bff      	cmp	r3, #255	@ 0xff
 800ea28:	d910      	bls.n	800ea4c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	22ff      	movs	r2, #255	@ 0xff
 800ea2e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea34:	b299      	uxth	r1, r3
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea3a:	b2da      	uxtb	r2, r3
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	9300      	str	r3, [sp, #0]
 800ea40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	f001 fae3 	bl	8010010 <I2C_TransferConfig>
 800ea4a:	e011      	b.n	800ea70 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea50:	b29a      	uxth	r2, r3
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea5a:	b299      	uxth	r1, r3
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea60:	b2da      	uxtb	r2, r3
 800ea62:	2300      	movs	r3, #0
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f001 fad0 	bl	8010010 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea7a:	1ad3      	subs	r3, r2, r3
 800ea7c:	b29a      	uxth	r2, r3
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	2b22      	cmp	r3, #34	@ 0x22
 800ea8c:	d108      	bne.n	800eaa0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ea9c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ea9e:	e07e      	b.n	800eb9e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eaae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800eab0:	e075      	b.n	800eb9e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800eab2:	2140      	movs	r1, #64	@ 0x40
 800eab4:	68f8      	ldr	r0, [r7, #12]
 800eab6:	f000 ff8f 	bl	800f9d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800eaba:	e070      	b.n	800eb9e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d05d      	beq.n	800eb82 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d058      	beq.n	800eb82 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ead0:	2101      	movs	r1, #1
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f001 fb52 	bl	801017c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ead8:	2110      	movs	r1, #16
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f001 faca 	bl	8010074 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	2b22      	cmp	r3, #34	@ 0x22
 800eaea:	d101      	bne.n	800eaf0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800eaec:	4b31      	ldr	r3, [pc, #196]	@ (800ebb4 <I2C_Mem_ISR_DMA+0x248>)
 800eaee:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	2bff      	cmp	r3, #255	@ 0xff
 800eaf8:	d910      	bls.n	800eb1c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	22ff      	movs	r2, #255	@ 0xff
 800eafe:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb04:	b299      	uxth	r1, r3
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb0a:	b2da      	uxtb	r2, r3
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	9300      	str	r3, [sp, #0]
 800eb10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f001 fa7b 	bl	8010010 <I2C_TransferConfig>
 800eb1a:	e011      	b.n	800eb40 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb20:	b29a      	uxth	r2, r3
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb2a:	b299      	uxth	r1, r3
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	9300      	str	r3, [sp, #0]
 800eb36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eb3a:	68f8      	ldr	r0, [r7, #12]
 800eb3c:	f001 fa68 	bl	8010010 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb44:	b29a      	uxth	r2, r3
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb4a:	1ad3      	subs	r3, r2, r3
 800eb4c:	b29a      	uxth	r2, r3
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	2b22      	cmp	r3, #34	@ 0x22
 800eb5c:	d108      	bne.n	800eb70 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800eb6c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800eb6e:	e016      	b.n	800eb9e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	681a      	ldr	r2, [r3, #0]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eb7e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800eb80:	e00d      	b.n	800eb9e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	f003 0320 	and.w	r3, r3, #32
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d008      	beq.n	800eb9e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d003      	beq.n	800eb9e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800eb96:	68b9      	ldr	r1, [r7, #8]
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f000 fbad 	bl	800f2f8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2200      	movs	r2, #0
 800eba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800eba6:	2300      	movs	r3, #0
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3718      	adds	r7, #24
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	80002000 	.word	0x80002000
 800ebb4:	80002400 	.word	0x80002400

0800ebb8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b088      	sub	sp, #32
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebc8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d101      	bne.n	800ebdc <I2C_Slave_ISR_DMA+0x24>
 800ebd8:	2302      	movs	r3, #2
 800ebda:	e1c2      	b.n	800ef62 <I2C_Slave_ISR_DMA+0x3aa>
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	f003 0320 	and.w	r3, r3, #32
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d009      	beq.n	800ec02 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d004      	beq.n	800ec02 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800ebf8:	68b9      	ldr	r1, [r7, #8]
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f000 fc44 	bl	800f488 <I2C_ITSlaveCplt>
 800ec00:	e1aa      	b.n	800ef58 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	f003 0310 	and.w	r3, r3, #16
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	f000 8197 	beq.w	800ef3c <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	f000 8191 	beq.w	800ef3c <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d105      	bne.n	800ec30 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	f000 817f 	beq.w	800ef2e <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d07b      	beq.n	800ed30 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d076      	beq.n	800ed30 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a74      	ldr	r2, [pc, #464]	@ (800ee1c <I2C_Slave_ISR_DMA+0x264>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d059      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4a72      	ldr	r2, [pc, #456]	@ (800ee20 <I2C_Slave_ISR_DMA+0x268>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d053      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4a70      	ldr	r2, [pc, #448]	@ (800ee24 <I2C_Slave_ISR_DMA+0x26c>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d04d      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a6e      	ldr	r2, [pc, #440]	@ (800ee28 <I2C_Slave_ISR_DMA+0x270>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d047      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4a6c      	ldr	r2, [pc, #432]	@ (800ee2c <I2C_Slave_ISR_DMA+0x274>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d041      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4a6a      	ldr	r2, [pc, #424]	@ (800ee30 <I2C_Slave_ISR_DMA+0x278>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d03b      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4a68      	ldr	r2, [pc, #416]	@ (800ee34 <I2C_Slave_ISR_DMA+0x27c>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d035      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	4a66      	ldr	r2, [pc, #408]	@ (800ee38 <I2C_Slave_ISR_DMA+0x280>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d02f      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a64      	ldr	r2, [pc, #400]	@ (800ee3c <I2C_Slave_ISR_DMA+0x284>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d029      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a62      	ldr	r2, [pc, #392]	@ (800ee40 <I2C_Slave_ISR_DMA+0x288>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d023      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a60      	ldr	r2, [pc, #384]	@ (800ee44 <I2C_Slave_ISR_DMA+0x28c>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d01d      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4a5e      	ldr	r2, [pc, #376]	@ (800ee48 <I2C_Slave_ISR_DMA+0x290>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d017      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4a5c      	ldr	r2, [pc, #368]	@ (800ee4c <I2C_Slave_ISR_DMA+0x294>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d011      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4a5a      	ldr	r2, [pc, #360]	@ (800ee50 <I2C_Slave_ISR_DMA+0x298>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d00b      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a58      	ldr	r2, [pc, #352]	@ (800ee54 <I2C_Slave_ISR_DMA+0x29c>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d005      	beq.n	800ed02 <I2C_Slave_ISR_DMA+0x14a>
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4a56      	ldr	r2, [pc, #344]	@ (800ee58 <I2C_Slave_ISR_DMA+0x2a0>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d109      	bne.n	800ed16 <I2C_Slave_ISR_DMA+0x15e>
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	bf0c      	ite	eq
 800ed0e:	2301      	moveq	r3, #1
 800ed10:	2300      	movne	r3, #0
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	e008      	b.n	800ed28 <I2C_Slave_ISR_DMA+0x170>
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	bf0c      	ite	eq
 800ed22:	2301      	moveq	r3, #1
 800ed24:	2300      	movne	r3, #0
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d001      	beq.n	800ed30 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f000 809e 	beq.w	800ee76 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f000 8098 	beq.w	800ee76 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a33      	ldr	r2, [pc, #204]	@ (800ee1c <I2C_Slave_ISR_DMA+0x264>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d059      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4a31      	ldr	r2, [pc, #196]	@ (800ee20 <I2C_Slave_ISR_DMA+0x268>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d053      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a2f      	ldr	r2, [pc, #188]	@ (800ee24 <I2C_Slave_ISR_DMA+0x26c>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d04d      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a2d      	ldr	r2, [pc, #180]	@ (800ee28 <I2C_Slave_ISR_DMA+0x270>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d047      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a2b      	ldr	r2, [pc, #172]	@ (800ee2c <I2C_Slave_ISR_DMA+0x274>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d041      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a29      	ldr	r2, [pc, #164]	@ (800ee30 <I2C_Slave_ISR_DMA+0x278>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d03b      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a27      	ldr	r2, [pc, #156]	@ (800ee34 <I2C_Slave_ISR_DMA+0x27c>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d035      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a25      	ldr	r2, [pc, #148]	@ (800ee38 <I2C_Slave_ISR_DMA+0x280>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d02f      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4a23      	ldr	r2, [pc, #140]	@ (800ee3c <I2C_Slave_ISR_DMA+0x284>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d029      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a21      	ldr	r2, [pc, #132]	@ (800ee40 <I2C_Slave_ISR_DMA+0x288>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d023      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4a1f      	ldr	r2, [pc, #124]	@ (800ee44 <I2C_Slave_ISR_DMA+0x28c>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d01d      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a1d      	ldr	r2, [pc, #116]	@ (800ee48 <I2C_Slave_ISR_DMA+0x290>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d017      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	4a1b      	ldr	r2, [pc, #108]	@ (800ee4c <I2C_Slave_ISR_DMA+0x294>)
 800edde:	4293      	cmp	r3, r2
 800ede0:	d011      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4a19      	ldr	r2, [pc, #100]	@ (800ee50 <I2C_Slave_ISR_DMA+0x298>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d00b      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a17      	ldr	r2, [pc, #92]	@ (800ee54 <I2C_Slave_ISR_DMA+0x29c>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d005      	beq.n	800ee06 <I2C_Slave_ISR_DMA+0x24e>
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a15      	ldr	r2, [pc, #84]	@ (800ee58 <I2C_Slave_ISR_DMA+0x2a0>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d12a      	bne.n	800ee5c <I2C_Slave_ISR_DMA+0x2a4>
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	bf0c      	ite	eq
 800ee12:	2301      	moveq	r3, #1
 800ee14:	2300      	movne	r3, #0
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	e029      	b.n	800ee6e <I2C_Slave_ISR_DMA+0x2b6>
 800ee1a:	bf00      	nop
 800ee1c:	40020010 	.word	0x40020010
 800ee20:	40020028 	.word	0x40020028
 800ee24:	40020040 	.word	0x40020040
 800ee28:	40020058 	.word	0x40020058
 800ee2c:	40020070 	.word	0x40020070
 800ee30:	40020088 	.word	0x40020088
 800ee34:	400200a0 	.word	0x400200a0
 800ee38:	400200b8 	.word	0x400200b8
 800ee3c:	40020410 	.word	0x40020410
 800ee40:	40020428 	.word	0x40020428
 800ee44:	40020440 	.word	0x40020440
 800ee48:	40020458 	.word	0x40020458
 800ee4c:	40020470 	.word	0x40020470
 800ee50:	40020488 	.word	0x40020488
 800ee54:	400204a0 	.word	0x400204a0
 800ee58:	400204b8 	.word	0x400204b8
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	bf0c      	ite	eq
 800ee68:	2301      	moveq	r3, #1
 800ee6a:	2300      	movne	r3, #0
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d001      	beq.n	800ee76 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800ee72:	2301      	movs	r3, #1
 800ee74:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ee76:	69fb      	ldr	r3, [r7, #28]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d128      	bne.n	800eece <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	2b28      	cmp	r3, #40	@ 0x28
 800ee86:	d108      	bne.n	800ee9a <I2C_Slave_ISR_DMA+0x2e2>
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee8e:	d104      	bne.n	800ee9a <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ee90:	68b9      	ldr	r1, [r7, #8]
 800ee92:	68f8      	ldr	r0, [r7, #12]
 800ee94:	f000 fd4c 	bl	800f930 <I2C_ITListenCplt>
 800ee98:	e048      	b.n	800ef2c <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	2b29      	cmp	r3, #41	@ 0x29
 800eea4:	d10e      	bne.n	800eec4 <I2C_Slave_ISR_DMA+0x30c>
 800eea6:	69bb      	ldr	r3, [r7, #24]
 800eea8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800eeac:	d00a      	beq.n	800eec4 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	2210      	movs	r2, #16
 800eeb4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800eeb6:	68f8      	ldr	r0, [r7, #12]
 800eeb8:	f000 fea5 	bl	800fc06 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f000 f9be 	bl	800f23e <I2C_ITSlaveSeqCplt>
 800eec2:	e033      	b.n	800ef2c <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2210      	movs	r2, #16
 800eeca:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800eecc:	e034      	b.n	800ef38 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	2210      	movs	r2, #16
 800eed4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eeda:	f043 0204 	orr.w	r2, r3, #4
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eee8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d003      	beq.n	800eef8 <I2C_Slave_ISR_DMA+0x340>
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eef6:	d11f      	bne.n	800ef38 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800eef8:	7dfb      	ldrb	r3, [r7, #23]
 800eefa:	2b21      	cmp	r3, #33	@ 0x21
 800eefc:	d002      	beq.n	800ef04 <I2C_Slave_ISR_DMA+0x34c>
 800eefe:	7dfb      	ldrb	r3, [r7, #23]
 800ef00:	2b29      	cmp	r3, #41	@ 0x29
 800ef02:	d103      	bne.n	800ef0c <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2221      	movs	r2, #33	@ 0x21
 800ef08:	631a      	str	r2, [r3, #48]	@ 0x30
 800ef0a:	e008      	b.n	800ef1e <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ef0c:	7dfb      	ldrb	r3, [r7, #23]
 800ef0e:	2b22      	cmp	r3, #34	@ 0x22
 800ef10:	d002      	beq.n	800ef18 <I2C_Slave_ISR_DMA+0x360>
 800ef12:	7dfb      	ldrb	r3, [r7, #23]
 800ef14:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef16:	d102      	bne.n	800ef1e <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2222      	movs	r2, #34	@ 0x22
 800ef1c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef22:	4619      	mov	r1, r3
 800ef24:	68f8      	ldr	r0, [r7, #12]
 800ef26:	f000 fd57 	bl	800f9d8 <I2C_ITError>
      if (treatdmanack == 1U)
 800ef2a:	e005      	b.n	800ef38 <I2C_Slave_ISR_DMA+0x380>
 800ef2c:	e004      	b.n	800ef38 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2210      	movs	r2, #16
 800ef34:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ef36:	e00f      	b.n	800ef58 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800ef38:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ef3a:	e00d      	b.n	800ef58 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	f003 0308 	and.w	r3, r3, #8
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d008      	beq.n	800ef58 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d003      	beq.n	800ef58 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800ef50:	68b9      	ldr	r1, [r7, #8]
 800ef52:	68f8      	ldr	r0, [r7, #12]
 800ef54:	f000 f8b2 	bl	800f0bc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ef60:	2300      	movs	r3, #0
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3720      	adds	r7, #32
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop

0800ef6c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b086      	sub	sp, #24
 800ef70:	af02      	add	r7, sp, #8
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	4608      	mov	r0, r1
 800ef76:	4611      	mov	r1, r2
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	817b      	strh	r3, [r7, #10]
 800ef7e:	460b      	mov	r3, r1
 800ef80:	813b      	strh	r3, [r7, #8]
 800ef82:	4613      	mov	r3, r2
 800ef84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ef86:	88fb      	ldrh	r3, [r7, #6]
 800ef88:	b2da      	uxtb	r2, r3
 800ef8a:	8979      	ldrh	r1, [r7, #10]
 800ef8c:	4b20      	ldr	r3, [pc, #128]	@ (800f010 <I2C_RequestMemoryWrite+0xa4>)
 800ef8e:	9300      	str	r3, [sp, #0]
 800ef90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ef94:	68f8      	ldr	r0, [r7, #12]
 800ef96:	f001 f83b 	bl	8010010 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ef9a:	69fa      	ldr	r2, [r7, #28]
 800ef9c:	69b9      	ldr	r1, [r7, #24]
 800ef9e:	68f8      	ldr	r0, [r7, #12]
 800efa0:	f000 fecc 	bl	800fd3c <I2C_WaitOnTXISFlagUntilTimeout>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d001      	beq.n	800efae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800efaa:	2301      	movs	r3, #1
 800efac:	e02c      	b.n	800f008 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800efae:	88fb      	ldrh	r3, [r7, #6]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d105      	bne.n	800efc0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800efb4:	893b      	ldrh	r3, [r7, #8]
 800efb6:	b2da      	uxtb	r2, r3
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	629a      	str	r2, [r3, #40]	@ 0x28
 800efbe:	e015      	b.n	800efec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800efc0:	893b      	ldrh	r3, [r7, #8]
 800efc2:	0a1b      	lsrs	r3, r3, #8
 800efc4:	b29b      	uxth	r3, r3
 800efc6:	b2da      	uxtb	r2, r3
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800efce:	69fa      	ldr	r2, [r7, #28]
 800efd0:	69b9      	ldr	r1, [r7, #24]
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	f000 feb2 	bl	800fd3c <I2C_WaitOnTXISFlagUntilTimeout>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d001      	beq.n	800efe2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800efde:	2301      	movs	r3, #1
 800efe0:	e012      	b.n	800f008 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800efe2:	893b      	ldrh	r3, [r7, #8]
 800efe4:	b2da      	uxtb	r2, r3
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800efec:	69fb      	ldr	r3, [r7, #28]
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	2200      	movs	r2, #0
 800eff4:	2180      	movs	r1, #128	@ 0x80
 800eff6:	68f8      	ldr	r0, [r7, #12]
 800eff8:	f000 fe47 	bl	800fc8a <I2C_WaitOnFlagUntilTimeout>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d001      	beq.n	800f006 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800f002:	2301      	movs	r3, #1
 800f004:	e000      	b.n	800f008 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800f006:	2300      	movs	r3, #0
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3710      	adds	r7, #16
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}
 800f010:	80002000 	.word	0x80002000

0800f014 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b086      	sub	sp, #24
 800f018:	af02      	add	r7, sp, #8
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	4608      	mov	r0, r1
 800f01e:	4611      	mov	r1, r2
 800f020:	461a      	mov	r2, r3
 800f022:	4603      	mov	r3, r0
 800f024:	817b      	strh	r3, [r7, #10]
 800f026:	460b      	mov	r3, r1
 800f028:	813b      	strh	r3, [r7, #8]
 800f02a:	4613      	mov	r3, r2
 800f02c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800f02e:	88fb      	ldrh	r3, [r7, #6]
 800f030:	b2da      	uxtb	r2, r3
 800f032:	8979      	ldrh	r1, [r7, #10]
 800f034:	4b20      	ldr	r3, [pc, #128]	@ (800f0b8 <I2C_RequestMemoryRead+0xa4>)
 800f036:	9300      	str	r3, [sp, #0]
 800f038:	2300      	movs	r3, #0
 800f03a:	68f8      	ldr	r0, [r7, #12]
 800f03c:	f000 ffe8 	bl	8010010 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f040:	69fa      	ldr	r2, [r7, #28]
 800f042:	69b9      	ldr	r1, [r7, #24]
 800f044:	68f8      	ldr	r0, [r7, #12]
 800f046:	f000 fe79 	bl	800fd3c <I2C_WaitOnTXISFlagUntilTimeout>
 800f04a:	4603      	mov	r3, r0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d001      	beq.n	800f054 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800f050:	2301      	movs	r3, #1
 800f052:	e02c      	b.n	800f0ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f054:	88fb      	ldrh	r3, [r7, #6]
 800f056:	2b01      	cmp	r3, #1
 800f058:	d105      	bne.n	800f066 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f05a:	893b      	ldrh	r3, [r7, #8]
 800f05c:	b2da      	uxtb	r2, r3
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	629a      	str	r2, [r3, #40]	@ 0x28
 800f064:	e015      	b.n	800f092 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f066:	893b      	ldrh	r3, [r7, #8]
 800f068:	0a1b      	lsrs	r3, r3, #8
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	b2da      	uxtb	r2, r3
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f074:	69fa      	ldr	r2, [r7, #28]
 800f076:	69b9      	ldr	r1, [r7, #24]
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f000 fe5f 	bl	800fd3c <I2C_WaitOnTXISFlagUntilTimeout>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d001      	beq.n	800f088 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800f084:	2301      	movs	r3, #1
 800f086:	e012      	b.n	800f0ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f088:	893b      	ldrh	r3, [r7, #8]
 800f08a:	b2da      	uxtb	r2, r3
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800f092:	69fb      	ldr	r3, [r7, #28]
 800f094:	9300      	str	r3, [sp, #0]
 800f096:	69bb      	ldr	r3, [r7, #24]
 800f098:	2200      	movs	r2, #0
 800f09a:	2140      	movs	r1, #64	@ 0x40
 800f09c:	68f8      	ldr	r0, [r7, #12]
 800f09e:	f000 fdf4 	bl	800fc8a <I2C_WaitOnFlagUntilTimeout>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d001      	beq.n	800f0ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	e000      	b.n	800f0ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800f0ac:	2300      	movs	r3, #0
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	80002000 	.word	0x80002000

0800f0bc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800f0d2:	2b28      	cmp	r3, #40	@ 0x28
 800f0d4:	d16a      	bne.n	800f1ac <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	699b      	ldr	r3, [r3, #24]
 800f0dc:	0c1b      	lsrs	r3, r3, #16
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	f003 0301 	and.w	r3, r3, #1
 800f0e4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	699b      	ldr	r3, [r3, #24]
 800f0ec:	0c1b      	lsrs	r3, r3, #16
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f0f4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	689b      	ldr	r3, [r3, #8]
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f102:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f110:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	68db      	ldr	r3, [r3, #12]
 800f116:	2b02      	cmp	r3, #2
 800f118:	d138      	bne.n	800f18c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800f11a:	897b      	ldrh	r3, [r7, #10]
 800f11c:	09db      	lsrs	r3, r3, #7
 800f11e:	b29a      	uxth	r2, r3
 800f120:	89bb      	ldrh	r3, [r7, #12]
 800f122:	4053      	eors	r3, r2
 800f124:	b29b      	uxth	r3, r3
 800f126:	f003 0306 	and.w	r3, r3, #6
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d11c      	bne.n	800f168 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800f12e:	897b      	ldrh	r3, [r7, #10]
 800f130:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f136:	1c5a      	adds	r2, r3, #1
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f140:	2b02      	cmp	r3, #2
 800f142:	d13b      	bne.n	800f1bc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	2208      	movs	r2, #8
 800f150:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2200      	movs	r2, #0
 800f156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f15a:	89ba      	ldrh	r2, [r7, #12]
 800f15c:	7bfb      	ldrb	r3, [r7, #15]
 800f15e:	4619      	mov	r1, r3
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f7ff f8cd 	bl	800e300 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800f166:	e029      	b.n	800f1bc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800f168:	893b      	ldrh	r3, [r7, #8]
 800f16a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f16c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f001 f803 	bl	801017c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f17e:	89ba      	ldrh	r2, [r7, #12]
 800f180:	7bfb      	ldrb	r3, [r7, #15]
 800f182:	4619      	mov	r1, r3
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f7ff f8bb 	bl	800e300 <HAL_I2C_AddrCallback>
}
 800f18a:	e017      	b.n	800f1bc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f18c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 fff3 	bl	801017c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2200      	movs	r2, #0
 800f19a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f19e:	89ba      	ldrh	r2, [r7, #12]
 800f1a0:	7bfb      	ldrb	r3, [r7, #15]
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f7ff f8ab 	bl	800e300 <HAL_I2C_AddrCallback>
}
 800f1aa:	e007      	b.n	800f1bc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	2208      	movs	r2, #8
 800f1b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800f1bc:	bf00      	nop
 800f1be:	3710      	adds	r7, #16
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b082      	sub	sp, #8
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f1da:	b2db      	uxtb	r3, r3
 800f1dc:	2b21      	cmp	r3, #33	@ 0x21
 800f1de:	d115      	bne.n	800f20c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2220      	movs	r2, #32
 800f1e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2211      	movs	r2, #17
 800f1ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f1f4:	2101      	movs	r1, #1
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 ffc0 	bl	801017c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2200      	movs	r2, #0
 800f200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f7ff f853 	bl	800e2b0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f20a:	e014      	b.n	800f236 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2220      	movs	r2, #32
 800f210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2212      	movs	r2, #18
 800f218:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2200      	movs	r2, #0
 800f21e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f220:	2102      	movs	r1, #2
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 ffaa 	bl	801017c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2200      	movs	r2, #0
 800f22c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f7ff f847 	bl	800e2c4 <HAL_I2C_MasterRxCpltCallback>
}
 800f236:	bf00      	nop
 800f238:	3708      	adds	r7, #8
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800f23e:	b580      	push	{r7, lr}
 800f240:	b084      	sub	sp, #16
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2200      	movs	r2, #0
 800f252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d008      	beq.n	800f272 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f26e:	601a      	str	r2, [r3, #0]
 800f270:	e00c      	b.n	800f28c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d007      	beq.n	800f28c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f28a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f292:	b2db      	uxtb	r3, r3
 800f294:	2b29      	cmp	r3, #41	@ 0x29
 800f296:	d112      	bne.n	800f2be <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2228      	movs	r2, #40	@ 0x28
 800f29c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2221      	movs	r2, #33	@ 0x21
 800f2a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f2a6:	2101      	movs	r1, #1
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f000 ff67 	bl	801017c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7ff f80e 	bl	800e2d8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f2bc:	e017      	b.n	800f2ee <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2c8:	d111      	bne.n	800f2ee <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2228      	movs	r2, #40	@ 0x28
 800f2ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2222      	movs	r2, #34	@ 0x22
 800f2d6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f2d8:	2102      	movs	r1, #2
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 ff4e 	bl	801017c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f7fe ffff 	bl	800e2ec <HAL_I2C_SlaveRxCpltCallback>
}
 800f2ee:	bf00      	nop
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
	...

0800f2f8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b086      	sub	sp, #24
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	2220      	movs	r2, #32
 800f30c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f314:	b2db      	uxtb	r3, r3
 800f316:	2b21      	cmp	r3, #33	@ 0x21
 800f318:	d107      	bne.n	800f32a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f31a:	2101      	movs	r1, #1
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 ff2d 	bl	801017c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2211      	movs	r2, #17
 800f326:	631a      	str	r2, [r3, #48]	@ 0x30
 800f328:	e00c      	b.n	800f344 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f330:	b2db      	uxtb	r3, r3
 800f332:	2b22      	cmp	r3, #34	@ 0x22
 800f334:	d106      	bne.n	800f344 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f336:	2102      	movs	r1, #2
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f000 ff1f 	bl	801017c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2212      	movs	r2, #18
 800f342:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	6859      	ldr	r1, [r3, #4]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	4b4c      	ldr	r3, [pc, #304]	@ (800f480 <I2C_ITMasterCplt+0x188>)
 800f350:	400b      	ands	r3, r1
 800f352:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4a49      	ldr	r2, [pc, #292]	@ (800f484 <I2C_ITMasterCplt+0x18c>)
 800f35e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	f003 0310 	and.w	r3, r3, #16
 800f366:	2b00      	cmp	r3, #0
 800f368:	d009      	beq.n	800f37e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2210      	movs	r2, #16
 800f370:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f376:	f043 0204 	orr.w	r2, r3, #4
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f384:	b2db      	uxtb	r3, r3
 800f386:	2b60      	cmp	r3, #96	@ 0x60
 800f388:	d10a      	bne.n	800f3a0 <I2C_ITMasterCplt+0xa8>
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	f003 0304 	and.w	r3, r3, #4
 800f390:	2b00      	cmp	r3, #0
 800f392:	d005      	beq.n	800f3a0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f39a:	b2db      	uxtb	r3, r3
 800f39c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800f39e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 fc30 	bl	800fc06 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3aa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	2b60      	cmp	r3, #96	@ 0x60
 800f3b6:	d002      	beq.n	800f3be <I2C_ITMasterCplt+0xc6>
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d006      	beq.n	800f3cc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f000 fb07 	bl	800f9d8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f3ca:	e054      	b.n	800f476 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	2b21      	cmp	r3, #33	@ 0x21
 800f3d6:	d124      	bne.n	800f422 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2220      	movs	r2, #32
 800f3dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	2b40      	cmp	r3, #64	@ 0x40
 800f3f0:	d10b      	bne.n	800f40a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f7f6 fd5e 	bl	8005ec4 <HAL_I2C_MemTxCpltCallback>
}
 800f408:	e035      	b.n	800f476 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2200      	movs	r2, #0
 800f40e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2200      	movs	r2, #0
 800f416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7fe ff48 	bl	800e2b0 <HAL_I2C_MasterTxCpltCallback>
}
 800f420:	e029      	b.n	800f476 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	2b22      	cmp	r3, #34	@ 0x22
 800f42c:	d123      	bne.n	800f476 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2220      	movs	r2, #32
 800f432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2200      	movs	r2, #0
 800f43a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f442:	b2db      	uxtb	r3, r3
 800f444:	2b40      	cmp	r3, #64	@ 0x40
 800f446:	d10b      	bne.n	800f460 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f7f6 fd3d 	bl	8005ed8 <HAL_I2C_MemRxCpltCallback>
}
 800f45e:	e00a      	b.n	800f476 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2200      	movs	r2, #0
 800f464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2200      	movs	r2, #0
 800f46c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7fe ff27 	bl	800e2c4 <HAL_I2C_MasterRxCpltCallback>
}
 800f476:	bf00      	nop
 800f478:	3718      	adds	r7, #24
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	fe00e800 	.word	0xfe00e800
 800f484:	ffff0000 	.word	0xffff0000

0800f488 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b086      	sub	sp, #24
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4a2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f4aa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2220      	movs	r2, #32
 800f4b2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f4b4:	7afb      	ldrb	r3, [r7, #11]
 800f4b6:	2b21      	cmp	r3, #33	@ 0x21
 800f4b8:	d002      	beq.n	800f4c0 <I2C_ITSlaveCplt+0x38>
 800f4ba:	7afb      	ldrb	r3, [r7, #11]
 800f4bc:	2b29      	cmp	r3, #41	@ 0x29
 800f4be:	d108      	bne.n	800f4d2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800f4c0:	f248 0101 	movw	r1, #32769	@ 0x8001
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fe59 	bl	801017c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2221      	movs	r2, #33	@ 0x21
 800f4ce:	631a      	str	r2, [r3, #48]	@ 0x30
 800f4d0:	e019      	b.n	800f506 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f4d2:	7afb      	ldrb	r3, [r7, #11]
 800f4d4:	2b22      	cmp	r3, #34	@ 0x22
 800f4d6:	d002      	beq.n	800f4de <I2C_ITSlaveCplt+0x56>
 800f4d8:	7afb      	ldrb	r3, [r7, #11]
 800f4da:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4dc:	d108      	bne.n	800f4f0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800f4de:	f248 0102 	movw	r1, #32770	@ 0x8002
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 fe4a 	bl	801017c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2222      	movs	r2, #34	@ 0x22
 800f4ec:	631a      	str	r2, [r3, #48]	@ 0x30
 800f4ee:	e00a      	b.n	800f506 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800f4f0:	7afb      	ldrb	r3, [r7, #11]
 800f4f2:	2b28      	cmp	r3, #40	@ 0x28
 800f4f4:	d107      	bne.n	800f506 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800f4f6:	f248 0103 	movw	r1, #32771	@ 0x8003
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f000 fe3e 	bl	801017c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	685a      	ldr	r2, [r3, #4]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f514:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	6859      	ldr	r1, [r3, #4]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	4b7f      	ldr	r3, [pc, #508]	@ (800f720 <I2C_ITSlaveCplt+0x298>)
 800f522:	400b      	ands	r3, r1
 800f524:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fb6d 	bl	800fc06 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f532:	2b00      	cmp	r3, #0
 800f534:	d07a      	beq.n	800f62c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f544:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f000 8111 	beq.w	800f772 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4a73      	ldr	r2, [pc, #460]	@ (800f724 <I2C_ITSlaveCplt+0x29c>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d059      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	4a71      	ldr	r2, [pc, #452]	@ (800f728 <I2C_ITSlaveCplt+0x2a0>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d053      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	4a6f      	ldr	r2, [pc, #444]	@ (800f72c <I2C_ITSlaveCplt+0x2a4>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d04d      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4a6d      	ldr	r2, [pc, #436]	@ (800f730 <I2C_ITSlaveCplt+0x2a8>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d047      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	4a6b      	ldr	r2, [pc, #428]	@ (800f734 <I2C_ITSlaveCplt+0x2ac>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	d041      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	4a69      	ldr	r2, [pc, #420]	@ (800f738 <I2C_ITSlaveCplt+0x2b0>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d03b      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	4a67      	ldr	r2, [pc, #412]	@ (800f73c <I2C_ITSlaveCplt+0x2b4>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d035      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a65      	ldr	r2, [pc, #404]	@ (800f740 <I2C_ITSlaveCplt+0x2b8>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d02f      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	4a63      	ldr	r2, [pc, #396]	@ (800f744 <I2C_ITSlaveCplt+0x2bc>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d029      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4a61      	ldr	r2, [pc, #388]	@ (800f748 <I2C_ITSlaveCplt+0x2c0>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d023      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	4a5f      	ldr	r2, [pc, #380]	@ (800f74c <I2C_ITSlaveCplt+0x2c4>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d01d      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	4a5d      	ldr	r2, [pc, #372]	@ (800f750 <I2C_ITSlaveCplt+0x2c8>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d017      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	4a5b      	ldr	r2, [pc, #364]	@ (800f754 <I2C_ITSlaveCplt+0x2cc>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d011      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a59      	ldr	r2, [pc, #356]	@ (800f758 <I2C_ITSlaveCplt+0x2d0>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d00b      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	4a57      	ldr	r2, [pc, #348]	@ (800f75c <I2C_ITSlaveCplt+0x2d4>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d005      	beq.n	800f610 <I2C_ITSlaveCplt+0x188>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4a55      	ldr	r2, [pc, #340]	@ (800f760 <I2C_ITSlaveCplt+0x2d8>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d105      	bne.n	800f61c <I2C_ITSlaveCplt+0x194>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	b29b      	uxth	r3, r3
 800f61a:	e004      	b.n	800f626 <I2C_ITSlaveCplt+0x19e>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	b29b      	uxth	r3, r3
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800f62a:	e0a2      	b.n	800f772 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f632:	2b00      	cmp	r3, #0
 800f634:	f000 809d 	beq.w	800f772 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f646:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	f000 8090 	beq.w	800f772 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a32      	ldr	r2, [pc, #200]	@ (800f724 <I2C_ITSlaveCplt+0x29c>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d059      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	4a30      	ldr	r2, [pc, #192]	@ (800f728 <I2C_ITSlaveCplt+0x2a0>)
 800f666:	4293      	cmp	r3, r2
 800f668:	d053      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4a2e      	ldr	r2, [pc, #184]	@ (800f72c <I2C_ITSlaveCplt+0x2a4>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d04d      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	4a2c      	ldr	r2, [pc, #176]	@ (800f730 <I2C_ITSlaveCplt+0x2a8>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d047      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4a2a      	ldr	r2, [pc, #168]	@ (800f734 <I2C_ITSlaveCplt+0x2ac>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d041      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4a28      	ldr	r2, [pc, #160]	@ (800f738 <I2C_ITSlaveCplt+0x2b0>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d03b      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4a26      	ldr	r2, [pc, #152]	@ (800f73c <I2C_ITSlaveCplt+0x2b4>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d035      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a24      	ldr	r2, [pc, #144]	@ (800f740 <I2C_ITSlaveCplt+0x2b8>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d02f      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4a22      	ldr	r2, [pc, #136]	@ (800f744 <I2C_ITSlaveCplt+0x2bc>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d029      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4a20      	ldr	r2, [pc, #128]	@ (800f748 <I2C_ITSlaveCplt+0x2c0>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d023      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4a1e      	ldr	r2, [pc, #120]	@ (800f74c <I2C_ITSlaveCplt+0x2c4>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d01d      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a1c      	ldr	r2, [pc, #112]	@ (800f750 <I2C_ITSlaveCplt+0x2c8>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d017      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a1a      	ldr	r2, [pc, #104]	@ (800f754 <I2C_ITSlaveCplt+0x2cc>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d011      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a18      	ldr	r2, [pc, #96]	@ (800f758 <I2C_ITSlaveCplt+0x2d0>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d00b      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4a16      	ldr	r2, [pc, #88]	@ (800f75c <I2C_ITSlaveCplt+0x2d4>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d005      	beq.n	800f712 <I2C_ITSlaveCplt+0x28a>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a14      	ldr	r2, [pc, #80]	@ (800f760 <I2C_ITSlaveCplt+0x2d8>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d128      	bne.n	800f764 <I2C_ITSlaveCplt+0x2dc>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	e027      	b.n	800f76e <I2C_ITSlaveCplt+0x2e6>
 800f71e:	bf00      	nop
 800f720:	fe00e800 	.word	0xfe00e800
 800f724:	40020010 	.word	0x40020010
 800f728:	40020028 	.word	0x40020028
 800f72c:	40020040 	.word	0x40020040
 800f730:	40020058 	.word	0x40020058
 800f734:	40020070 	.word	0x40020070
 800f738:	40020088 	.word	0x40020088
 800f73c:	400200a0 	.word	0x400200a0
 800f740:	400200b8 	.word	0x400200b8
 800f744:	40020410 	.word	0x40020410
 800f748:	40020428 	.word	0x40020428
 800f74c:	40020440 	.word	0x40020440
 800f750:	40020458 	.word	0x40020458
 800f754:	40020470 	.word	0x40020470
 800f758:	40020488 	.word	0x40020488
 800f75c:	400204a0 	.word	0x400204a0
 800f760:	400204b8 	.word	0x400204b8
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	f003 0304 	and.w	r3, r3, #4
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d020      	beq.n	800f7be <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	f023 0304 	bic.w	r3, r3, #4
 800f782:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f78e:	b2d2      	uxtb	r2, r2
 800f790:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f796:	1c5a      	adds	r2, r3, #1
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d00c      	beq.n	800f7be <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7a8:	3b01      	subs	r3, #1
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	3b01      	subs	r3, #1
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d005      	beq.n	800f7d4 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7cc:	f043 0204 	orr.w	r2, r3, #4
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	f003 0310 	and.w	r3, r3, #16
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d049      	beq.n	800f872 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d044      	beq.n	800f872 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d128      	bne.n	800f844 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	2b28      	cmp	r3, #40	@ 0x28
 800f7fc:	d108      	bne.n	800f810 <I2C_ITSlaveCplt+0x388>
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f804:	d104      	bne.n	800f810 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f806:	6979      	ldr	r1, [r7, #20]
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 f891 	bl	800f930 <I2C_ITListenCplt>
 800f80e:	e030      	b.n	800f872 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f816:	b2db      	uxtb	r3, r3
 800f818:	2b29      	cmp	r3, #41	@ 0x29
 800f81a:	d10e      	bne.n	800f83a <I2C_ITSlaveCplt+0x3b2>
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f822:	d00a      	beq.n	800f83a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2210      	movs	r2, #16
 800f82a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f000 f9ea 	bl	800fc06 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f7ff fd03 	bl	800f23e <I2C_ITSlaveSeqCplt>
 800f838:	e01b      	b.n	800f872 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2210      	movs	r2, #16
 800f840:	61da      	str	r2, [r3, #28]
 800f842:	e016      	b.n	800f872 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	2210      	movs	r2, #16
 800f84a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f850:	f043 0204 	orr.w	r2, r3, #4
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d003      	beq.n	800f866 <I2C_ITSlaveCplt+0x3de>
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f864:	d105      	bne.n	800f872 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f86a:	4619      	mov	r1, r3
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f000 f8b3 	bl	800f9d8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2200      	movs	r2, #0
 800f876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2200      	movs	r2, #0
 800f87e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f884:	2b00      	cmp	r3, #0
 800f886:	d010      	beq.n	800f8aa <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f88c:	4619      	mov	r1, r3
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f000 f8a2 	bl	800f9d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	2b28      	cmp	r3, #40	@ 0x28
 800f89e:	d141      	bne.n	800f924 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800f8a0:	6979      	ldr	r1, [r7, #20]
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 f844 	bl	800f930 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f8a8:	e03c      	b.n	800f924 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f8b2:	d014      	beq.n	800f8de <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f7ff fcc2 	bl	800f23e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	4a1b      	ldr	r2, [pc, #108]	@ (800f92c <I2C_ITSlaveCplt+0x4a4>)
 800f8be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2220      	movs	r2, #32
 800f8c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f7fe fd20 	bl	800e31c <HAL_I2C_ListenCpltCallback>
}
 800f8dc:	e022      	b.n	800f924 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	2b22      	cmp	r3, #34	@ 0x22
 800f8e8:	d10e      	bne.n	800f908 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2220      	movs	r2, #32
 800f8ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7fe fcf3 	bl	800e2ec <HAL_I2C_SlaveRxCpltCallback>
}
 800f906:	e00d      	b.n	800f924 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2220      	movs	r2, #32
 800f90c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2200      	movs	r2, #0
 800f914:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2200      	movs	r2, #0
 800f91a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7fe fcda 	bl	800e2d8 <HAL_I2C_SlaveTxCpltCallback>
}
 800f924:	bf00      	nop
 800f926:	3718      	adds	r7, #24
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	ffff0000 	.word	0xffff0000

0800f930 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	4a25      	ldr	r2, [pc, #148]	@ (800f9d4 <I2C_ITListenCplt+0xa4>)
 800f93e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2200      	movs	r2, #0
 800f944:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2220      	movs	r2, #32
 800f94a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2200      	movs	r2, #0
 800f952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2200      	movs	r2, #0
 800f95a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	f003 0304 	and.w	r3, r3, #4
 800f962:	2b00      	cmp	r3, #0
 800f964:	d022      	beq.n	800f9ac <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f970:	b2d2      	uxtb	r2, r2
 800f972:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f978:	1c5a      	adds	r2, r3, #1
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f982:	2b00      	cmp	r3, #0
 800f984:	d012      	beq.n	800f9ac <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f98a:	3b01      	subs	r3, #1
 800f98c:	b29a      	uxth	r2, r3
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f996:	b29b      	uxth	r3, r3
 800f998:	3b01      	subs	r3, #1
 800f99a:	b29a      	uxth	r2, r3
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9a4:	f043 0204 	orr.w	r2, r3, #4
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800f9ac:	f248 0103 	movw	r1, #32771	@ 0x8003
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f000 fbe3 	bl	801017c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	2210      	movs	r2, #16
 800f9bc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f7fe fca8 	bl	800e31c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800f9cc:	bf00      	nop
 800f9ce:	3708      	adds	r7, #8
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	ffff0000 	.word	0xffff0000

0800f9d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b084      	sub	sp, #16
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f9e8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	4a6d      	ldr	r2, [pc, #436]	@ (800fbac <I2C_ITError+0x1d4>)
 800f9f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	431a      	orrs	r2, r3
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800fa0a:	7bfb      	ldrb	r3, [r7, #15]
 800fa0c:	2b28      	cmp	r3, #40	@ 0x28
 800fa0e:	d005      	beq.n	800fa1c <I2C_ITError+0x44>
 800fa10:	7bfb      	ldrb	r3, [r7, #15]
 800fa12:	2b29      	cmp	r3, #41	@ 0x29
 800fa14:	d002      	beq.n	800fa1c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800fa16:	7bfb      	ldrb	r3, [r7, #15]
 800fa18:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa1a:	d10b      	bne.n	800fa34 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800fa1c:	2103      	movs	r1, #3
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f000 fbac 	bl	801017c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2228      	movs	r2, #40	@ 0x28
 800fa28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4a60      	ldr	r2, [pc, #384]	@ (800fbb0 <I2C_ITError+0x1d8>)
 800fa30:	635a      	str	r2, [r3, #52]	@ 0x34
 800fa32:	e030      	b.n	800fa96 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800fa34:	f248 0103 	movw	r1, #32771	@ 0x8003
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f000 fb9f 	bl	801017c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f000 f8e1 	bl	800fc06 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	2b60      	cmp	r3, #96	@ 0x60
 800fa4e:	d01f      	beq.n	800fa90 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2220      	movs	r2, #32
 800fa54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	699b      	ldr	r3, [r3, #24]
 800fa5e:	f003 0320 	and.w	r3, r3, #32
 800fa62:	2b20      	cmp	r3, #32
 800fa64:	d114      	bne.n	800fa90 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	699b      	ldr	r3, [r3, #24]
 800fa6c:	f003 0310 	and.w	r3, r3, #16
 800fa70:	2b10      	cmp	r3, #16
 800fa72:	d109      	bne.n	800fa88 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	2210      	movs	r2, #16
 800fa7a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa80:	f043 0204 	orr.w	r2, r3, #4
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	2220      	movs	r2, #32
 800fa8e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2200      	movs	r2, #0
 800fa94:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa9a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d039      	beq.n	800fb18 <I2C_ITError+0x140>
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	2b11      	cmp	r3, #17
 800faa8:	d002      	beq.n	800fab0 <I2C_ITError+0xd8>
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	2b21      	cmp	r3, #33	@ 0x21
 800faae:	d133      	bne.n	800fb18 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800faba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fabe:	d107      	bne.n	800fad0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	681a      	ldr	r2, [r3, #0]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800face:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7fd fa01 	bl	800cedc <HAL_DMA_GetState>
 800fada:	4603      	mov	r3, r0
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d017      	beq.n	800fb10 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fae4:	4a33      	ldr	r2, [pc, #204]	@ (800fbb4 <I2C_ITError+0x1dc>)
 800fae6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2200      	movs	r2, #0
 800faec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7fc f881 	bl	800bbfc <HAL_DMA_Abort_IT>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d04d      	beq.n	800fb9c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb06:	687a      	ldr	r2, [r7, #4]
 800fb08:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800fb0a:	4610      	mov	r0, r2
 800fb0c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fb0e:	e045      	b.n	800fb9c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 f851 	bl	800fbb8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fb16:	e041      	b.n	800fb9c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d039      	beq.n	800fb94 <I2C_ITError+0x1bc>
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	2b12      	cmp	r3, #18
 800fb24:	d002      	beq.n	800fb2c <I2C_ITError+0x154>
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	2b22      	cmp	r3, #34	@ 0x22
 800fb2a:	d133      	bne.n	800fb94 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fb36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fb3a:	d107      	bne.n	800fb4c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	681a      	ldr	r2, [r3, #0]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fb4a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7fd f9c3 	bl	800cedc <HAL_DMA_GetState>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d017      	beq.n	800fb8c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb60:	4a14      	ldr	r2, [pc, #80]	@ (800fbb4 <I2C_ITError+0x1dc>)
 800fb62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7fc f843 	bl	800bbfc <HAL_DMA_Abort_IT>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d011      	beq.n	800fba0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb82:	687a      	ldr	r2, [r7, #4]
 800fb84:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800fb86:	4610      	mov	r0, r2
 800fb88:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fb8a:	e009      	b.n	800fba0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f000 f813 	bl	800fbb8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fb92:	e005      	b.n	800fba0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f000 f80f 	bl	800fbb8 <I2C_TreatErrorCallback>
  }
}
 800fb9a:	e002      	b.n	800fba2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fb9c:	bf00      	nop
 800fb9e:	e000      	b.n	800fba2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fba0:	bf00      	nop
}
 800fba2:	bf00      	nop
 800fba4:	3710      	adds	r7, #16
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	ffff0000 	.word	0xffff0000
 800fbb0:	0800e5a5 	.word	0x0800e5a5
 800fbb4:	0800fc4f 	.word	0x0800fc4f

0800fbb8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	2b60      	cmp	r3, #96	@ 0x60
 800fbca:	d10e      	bne.n	800fbea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2220      	movs	r2, #32
 800fbd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f7fe fbae 	bl	800e344 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fbe8:	e009      	b.n	800fbfe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f7fe fb99 	bl	800e330 <HAL_I2C_ErrorCallback>
}
 800fbfe:	bf00      	nop
 800fc00:	3708      	adds	r7, #8
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800fc06:	b480      	push	{r7}
 800fc08:	b083      	sub	sp, #12
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	699b      	ldr	r3, [r3, #24]
 800fc14:	f003 0302 	and.w	r3, r3, #2
 800fc18:	2b02      	cmp	r3, #2
 800fc1a:	d103      	bne.n	800fc24 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	2200      	movs	r2, #0
 800fc22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	699b      	ldr	r3, [r3, #24]
 800fc2a:	f003 0301 	and.w	r3, r3, #1
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d007      	beq.n	800fc42 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	699a      	ldr	r2, [r3, #24]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f042 0201 	orr.w	r2, r2, #1
 800fc40:	619a      	str	r2, [r3, #24]
  }
}
 800fc42:	bf00      	nop
 800fc44:	370c      	adds	r7, #12
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr

0800fc4e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800fc4e:	b580      	push	{r7, lr}
 800fc50:	b084      	sub	sp, #16
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc5a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d003      	beq.n	800fc6c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc68:	2200      	movs	r2, #0
 800fc6a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d003      	beq.n	800fc7c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc78:	2200      	movs	r2, #0
 800fc7a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800fc7c:	68f8      	ldr	r0, [r7, #12]
 800fc7e:	f7ff ff9b 	bl	800fbb8 <I2C_TreatErrorCallback>
}
 800fc82:	bf00      	nop
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b084      	sub	sp, #16
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	60f8      	str	r0, [r7, #12]
 800fc92:	60b9      	str	r1, [r7, #8]
 800fc94:	603b      	str	r3, [r7, #0]
 800fc96:	4613      	mov	r3, r2
 800fc98:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fc9a:	e03b      	b.n	800fd14 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fc9c:	69ba      	ldr	r2, [r7, #24]
 800fc9e:	6839      	ldr	r1, [r7, #0]
 800fca0:	68f8      	ldr	r0, [r7, #12]
 800fca2:	f000 f8d5 	bl	800fe50 <I2C_IsErrorOccurred>
 800fca6:	4603      	mov	r3, r0
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d001      	beq.n	800fcb0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800fcac:	2301      	movs	r3, #1
 800fcae:	e041      	b.n	800fd34 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcb6:	d02d      	beq.n	800fd14 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fcb8:	f7f8 fd8a 	bl	80087d0 <HAL_GetTick>
 800fcbc:	4602      	mov	r2, r0
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	1ad3      	subs	r3, r2, r3
 800fcc2:	683a      	ldr	r2, [r7, #0]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d302      	bcc.n	800fcce <I2C_WaitOnFlagUntilTimeout+0x44>
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d122      	bne.n	800fd14 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	699a      	ldr	r2, [r3, #24]
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	4013      	ands	r3, r2
 800fcd8:	68ba      	ldr	r2, [r7, #8]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	bf0c      	ite	eq
 800fcde:	2301      	moveq	r3, #1
 800fce0:	2300      	movne	r3, #0
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	461a      	mov	r2, r3
 800fce6:	79fb      	ldrb	r3, [r7, #7]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d113      	bne.n	800fd14 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcf0:	f043 0220 	orr.w	r2, r3, #32
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2220      	movs	r2, #32
 800fcfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	2200      	movs	r2, #0
 800fd04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800fd10:	2301      	movs	r3, #1
 800fd12:	e00f      	b.n	800fd34 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	699a      	ldr	r2, [r3, #24]
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	4013      	ands	r3, r2
 800fd1e:	68ba      	ldr	r2, [r7, #8]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	bf0c      	ite	eq
 800fd24:	2301      	moveq	r3, #1
 800fd26:	2300      	movne	r3, #0
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	79fb      	ldrb	r3, [r7, #7]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d0b4      	beq.n	800fc9c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd32:	2300      	movs	r3, #0
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3710      	adds	r7, #16
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}

0800fd3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800fd48:	e033      	b.n	800fdb2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd4a:	687a      	ldr	r2, [r7, #4]
 800fd4c:	68b9      	ldr	r1, [r7, #8]
 800fd4e:	68f8      	ldr	r0, [r7, #12]
 800fd50:	f000 f87e 	bl	800fe50 <I2C_IsErrorOccurred>
 800fd54:	4603      	mov	r3, r0
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d001      	beq.n	800fd5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	e031      	b.n	800fdc2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd64:	d025      	beq.n	800fdb2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd66:	f7f8 fd33 	bl	80087d0 <HAL_GetTick>
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	1ad3      	subs	r3, r2, r3
 800fd70:	68ba      	ldr	r2, [r7, #8]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d302      	bcc.n	800fd7c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d11a      	bne.n	800fdb2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	699b      	ldr	r3, [r3, #24]
 800fd82:	f003 0302 	and.w	r3, r3, #2
 800fd86:	2b02      	cmp	r3, #2
 800fd88:	d013      	beq.n	800fdb2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd8e:	f043 0220 	orr.w	r2, r3, #32
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2220      	movs	r2, #32
 800fd9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2200      	movs	r2, #0
 800fda2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800fdae:	2301      	movs	r3, #1
 800fdb0:	e007      	b.n	800fdc2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	699b      	ldr	r3, [r3, #24]
 800fdb8:	f003 0302 	and.w	r3, r3, #2
 800fdbc:	2b02      	cmp	r3, #2
 800fdbe:	d1c4      	bne.n	800fd4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800fdc0:	2300      	movs	r3, #0
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b084      	sub	sp, #16
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	60f8      	str	r0, [r7, #12]
 800fdd2:	60b9      	str	r1, [r7, #8]
 800fdd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fdd6:	e02f      	b.n	800fe38 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	68b9      	ldr	r1, [r7, #8]
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	f000 f837 	bl	800fe50 <I2C_IsErrorOccurred>
 800fde2:	4603      	mov	r3, r0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d001      	beq.n	800fdec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fde8:	2301      	movs	r3, #1
 800fdea:	e02d      	b.n	800fe48 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fdec:	f7f8 fcf0 	bl	80087d0 <HAL_GetTick>
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	1ad3      	subs	r3, r2, r3
 800fdf6:	68ba      	ldr	r2, [r7, #8]
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d302      	bcc.n	800fe02 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d11a      	bne.n	800fe38 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	699b      	ldr	r3, [r3, #24]
 800fe08:	f003 0320 	and.w	r3, r3, #32
 800fe0c:	2b20      	cmp	r3, #32
 800fe0e:	d013      	beq.n	800fe38 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe14:	f043 0220 	orr.w	r2, r3, #32
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2220      	movs	r2, #32
 800fe20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2200      	movs	r2, #0
 800fe28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800fe34:	2301      	movs	r3, #1
 800fe36:	e007      	b.n	800fe48 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	699b      	ldr	r3, [r3, #24]
 800fe3e:	f003 0320 	and.w	r3, r3, #32
 800fe42:	2b20      	cmp	r3, #32
 800fe44:	d1c8      	bne.n	800fdd8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800fe46:	2300      	movs	r3, #0
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3710      	adds	r7, #16
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b08a      	sub	sp, #40	@ 0x28
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	60f8      	str	r0, [r7, #12]
 800fe58:	60b9      	str	r1, [r7, #8]
 800fe5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	699b      	ldr	r3, [r3, #24]
 800fe68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800fe72:	69bb      	ldr	r3, [r7, #24]
 800fe74:	f003 0310 	and.w	r3, r3, #16
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d068      	beq.n	800ff4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	2210      	movs	r2, #16
 800fe82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800fe84:	e049      	b.n	800ff1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe8c:	d045      	beq.n	800ff1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800fe8e:	f7f8 fc9f 	bl	80087d0 <HAL_GetTick>
 800fe92:	4602      	mov	r2, r0
 800fe94:	69fb      	ldr	r3, [r7, #28]
 800fe96:	1ad3      	subs	r3, r2, r3
 800fe98:	68ba      	ldr	r2, [r7, #8]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d302      	bcc.n	800fea4 <I2C_IsErrorOccurred+0x54>
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d13a      	bne.n	800ff1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	685b      	ldr	r3, [r3, #4]
 800feaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800feae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800feb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	699b      	ldr	r3, [r3, #24]
 800febe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fec6:	d121      	bne.n	800ff0c <I2C_IsErrorOccurred+0xbc>
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fece:	d01d      	beq.n	800ff0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800fed0:	7cfb      	ldrb	r3, [r7, #19]
 800fed2:	2b20      	cmp	r3, #32
 800fed4:	d01a      	beq.n	800ff0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	685a      	ldr	r2, [r3, #4]
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fee4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800fee6:	f7f8 fc73 	bl	80087d0 <HAL_GetTick>
 800feea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800feec:	e00e      	b.n	800ff0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800feee:	f7f8 fc6f 	bl	80087d0 <HAL_GetTick>
 800fef2:	4602      	mov	r2, r0
 800fef4:	69fb      	ldr	r3, [r7, #28]
 800fef6:	1ad3      	subs	r3, r2, r3
 800fef8:	2b19      	cmp	r3, #25
 800fefa:	d907      	bls.n	800ff0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800fefc:	6a3b      	ldr	r3, [r7, #32]
 800fefe:	f043 0320 	orr.w	r3, r3, #32
 800ff02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ff04:	2301      	movs	r3, #1
 800ff06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800ff0a:	e006      	b.n	800ff1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	699b      	ldr	r3, [r3, #24]
 800ff12:	f003 0320 	and.w	r3, r3, #32
 800ff16:	2b20      	cmp	r3, #32
 800ff18:	d1e9      	bne.n	800feee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	699b      	ldr	r3, [r3, #24]
 800ff20:	f003 0320 	and.w	r3, r3, #32
 800ff24:	2b20      	cmp	r3, #32
 800ff26:	d003      	beq.n	800ff30 <I2C_IsErrorOccurred+0xe0>
 800ff28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d0aa      	beq.n	800fe86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ff30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d103      	bne.n	800ff40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2220      	movs	r2, #32
 800ff3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ff40:	6a3b      	ldr	r3, [r7, #32]
 800ff42:	f043 0304 	orr.w	r3, r3, #4
 800ff46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ff48:	2301      	movs	r3, #1
 800ff4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	699b      	ldr	r3, [r3, #24]
 800ff54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ff56:	69bb      	ldr	r3, [r7, #24]
 800ff58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d00b      	beq.n	800ff78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ff60:	6a3b      	ldr	r3, [r7, #32]
 800ff62:	f043 0301 	orr.w	r3, r3, #1
 800ff66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ff70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ff72:	2301      	movs	r3, #1
 800ff74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d00b      	beq.n	800ff9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ff82:	6a3b      	ldr	r3, [r7, #32]
 800ff84:	f043 0308 	orr.w	r3, r3, #8
 800ff88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ff92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ff94:	2301      	movs	r3, #1
 800ff96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ff9a:	69bb      	ldr	r3, [r7, #24]
 800ff9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d00b      	beq.n	800ffbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ffa4:	6a3b      	ldr	r3, [r7, #32]
 800ffa6:	f043 0302 	orr.w	r3, r3, #2
 800ffaa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ffb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ffbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d01c      	beq.n	800fffe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ffc4:	68f8      	ldr	r0, [r7, #12]
 800ffc6:	f7ff fe1e 	bl	800fc06 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	6859      	ldr	r1, [r3, #4]
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	4b0d      	ldr	r3, [pc, #52]	@ (801000c <I2C_IsErrorOccurred+0x1bc>)
 800ffd6:	400b      	ands	r3, r1
 800ffd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ffde:	6a3b      	ldr	r3, [r7, #32]
 800ffe0:	431a      	orrs	r2, r3
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	2220      	movs	r2, #32
 800ffea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	2200      	movs	r2, #0
 800fff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2200      	movs	r2, #0
 800fffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800fffe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010002:	4618      	mov	r0, r3
 8010004:	3728      	adds	r7, #40	@ 0x28
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	fe00e800 	.word	0xfe00e800

08010010 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010010:	b480      	push	{r7}
 8010012:	b087      	sub	sp, #28
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	607b      	str	r3, [r7, #4]
 801001a:	460b      	mov	r3, r1
 801001c:	817b      	strh	r3, [r7, #10]
 801001e:	4613      	mov	r3, r2
 8010020:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010022:	897b      	ldrh	r3, [r7, #10]
 8010024:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010028:	7a7b      	ldrb	r3, [r7, #9]
 801002a:	041b      	lsls	r3, r3, #16
 801002c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010030:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010036:	6a3b      	ldr	r3, [r7, #32]
 8010038:	4313      	orrs	r3, r2
 801003a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801003e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	685a      	ldr	r2, [r3, #4]
 8010046:	6a3b      	ldr	r3, [r7, #32]
 8010048:	0d5b      	lsrs	r3, r3, #21
 801004a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 801004e:	4b08      	ldr	r3, [pc, #32]	@ (8010070 <I2C_TransferConfig+0x60>)
 8010050:	430b      	orrs	r3, r1
 8010052:	43db      	mvns	r3, r3
 8010054:	ea02 0103 	and.w	r1, r2, r3
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	697a      	ldr	r2, [r7, #20]
 801005e:	430a      	orrs	r2, r1
 8010060:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010062:	bf00      	nop
 8010064:	371c      	adds	r7, #28
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop
 8010070:	03ff63ff 	.word	0x03ff63ff

08010074 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	460b      	mov	r3, r1
 801007e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010080:	2300      	movs	r3, #0
 8010082:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010088:	4a39      	ldr	r2, [pc, #228]	@ (8010170 <I2C_Enable_IRQ+0xfc>)
 801008a:	4293      	cmp	r3, r2
 801008c:	d032      	beq.n	80100f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010092:	4a38      	ldr	r2, [pc, #224]	@ (8010174 <I2C_Enable_IRQ+0x100>)
 8010094:	4293      	cmp	r3, r2
 8010096:	d02d      	beq.n	80100f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801009c:	4a36      	ldr	r2, [pc, #216]	@ (8010178 <I2C_Enable_IRQ+0x104>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d028      	beq.n	80100f4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80100a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	da03      	bge.n	80100b2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80100b0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80100b2:	887b      	ldrh	r3, [r7, #2]
 80100b4:	f003 0301 	and.w	r3, r3, #1
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d003      	beq.n	80100c4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80100c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80100c4:	887b      	ldrh	r3, [r7, #2]
 80100c6:	f003 0302 	and.w	r3, r3, #2
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d003      	beq.n	80100d6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80100d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80100d6:	887b      	ldrh	r3, [r7, #2]
 80100d8:	2b10      	cmp	r3, #16
 80100da:	d103      	bne.n	80100e4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80100e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80100e4:	887b      	ldrh	r3, [r7, #2]
 80100e6:	2b20      	cmp	r3, #32
 80100e8:	d133      	bne.n	8010152 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	f043 0320 	orr.w	r3, r3, #32
 80100f0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80100f2:	e02e      	b.n	8010152 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80100f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	da03      	bge.n	8010104 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010102:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010104:	887b      	ldrh	r3, [r7, #2]
 8010106:	f003 0301 	and.w	r3, r3, #1
 801010a:	2b00      	cmp	r3, #0
 801010c:	d003      	beq.n	8010116 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010114:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010116:	887b      	ldrh	r3, [r7, #2]
 8010118:	f003 0302 	and.w	r3, r3, #2
 801011c:	2b00      	cmp	r3, #0
 801011e:	d003      	beq.n	8010128 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010126:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010128:	887b      	ldrh	r3, [r7, #2]
 801012a:	2b10      	cmp	r3, #16
 801012c:	d103      	bne.n	8010136 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010134:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010136:	887b      	ldrh	r3, [r7, #2]
 8010138:	2b20      	cmp	r3, #32
 801013a:	d103      	bne.n	8010144 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010142:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010144:	887b      	ldrh	r3, [r7, #2]
 8010146:	2b40      	cmp	r3, #64	@ 0x40
 8010148:	d103      	bne.n	8010152 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010150:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	6819      	ldr	r1, [r3, #0]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	430a      	orrs	r2, r1
 8010160:	601a      	str	r2, [r3, #0]
}
 8010162:	bf00      	nop
 8010164:	3714      	adds	r7, #20
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr
 801016e:	bf00      	nop
 8010170:	0800e797 	.word	0x0800e797
 8010174:	0800ebb9 	.word	0x0800ebb9
 8010178:	0800e96d 	.word	0x0800e96d

0801017c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801017c:	b480      	push	{r7}
 801017e:	b085      	sub	sp, #20
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	460b      	mov	r3, r1
 8010186:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010188:	2300      	movs	r3, #0
 801018a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801018c:	887b      	ldrh	r3, [r7, #2]
 801018e:	f003 0301 	and.w	r3, r3, #1
 8010192:	2b00      	cmp	r3, #0
 8010194:	d00f      	beq.n	80101b6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 801019c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80101aa:	2b28      	cmp	r3, #40	@ 0x28
 80101ac:	d003      	beq.n	80101b6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80101b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80101b6:	887b      	ldrh	r3, [r7, #2]
 80101b8:	f003 0302 	and.w	r3, r3, #2
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d00f      	beq.n	80101e0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80101c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80101d4:	2b28      	cmp	r3, #40	@ 0x28
 80101d6:	d003      	beq.n	80101e0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80101de:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80101e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	da03      	bge.n	80101f0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80101ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80101f0:	887b      	ldrh	r3, [r7, #2]
 80101f2:	2b10      	cmp	r3, #16
 80101f4:	d103      	bne.n	80101fe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80101fc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80101fe:	887b      	ldrh	r3, [r7, #2]
 8010200:	2b20      	cmp	r3, #32
 8010202:	d103      	bne.n	801020c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f043 0320 	orr.w	r3, r3, #32
 801020a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801020c:	887b      	ldrh	r3, [r7, #2]
 801020e:	2b40      	cmp	r3, #64	@ 0x40
 8010210:	d103      	bne.n	801021a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010218:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	6819      	ldr	r1, [r3, #0]
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	43da      	mvns	r2, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	400a      	ands	r2, r1
 801022a:	601a      	str	r2, [r3, #0]
}
 801022c:	bf00      	nop
 801022e:	3714      	adds	r7, #20
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr

08010238 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010238:	b480      	push	{r7}
 801023a:	b083      	sub	sp, #12
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010248:	b2db      	uxtb	r3, r3
 801024a:	2b20      	cmp	r3, #32
 801024c:	d138      	bne.n	80102c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010254:	2b01      	cmp	r3, #1
 8010256:	d101      	bne.n	801025c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010258:	2302      	movs	r3, #2
 801025a:	e032      	b.n	80102c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2201      	movs	r2, #1
 8010260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2224      	movs	r2, #36	@ 0x24
 8010268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f022 0201 	bic.w	r2, r2, #1
 801027a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	681a      	ldr	r2, [r3, #0]
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801028a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	6819      	ldr	r1, [r3, #0]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	683a      	ldr	r2, [r7, #0]
 8010298:	430a      	orrs	r2, r1
 801029a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f042 0201 	orr.w	r2, r2, #1
 80102aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2220      	movs	r2, #32
 80102b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2200      	movs	r2, #0
 80102b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80102bc:	2300      	movs	r3, #0
 80102be:	e000      	b.n	80102c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80102c0:	2302      	movs	r3, #2
  }
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	370c      	adds	r7, #12
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr

080102ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80102ce:	b480      	push	{r7}
 80102d0:	b085      	sub	sp, #20
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	6078      	str	r0, [r7, #4]
 80102d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80102de:	b2db      	uxtb	r3, r3
 80102e0:	2b20      	cmp	r3, #32
 80102e2:	d139      	bne.n	8010358 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80102ea:	2b01      	cmp	r3, #1
 80102ec:	d101      	bne.n	80102f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80102ee:	2302      	movs	r3, #2
 80102f0:	e033      	b.n	801035a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2201      	movs	r2, #1
 80102f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2224      	movs	r2, #36	@ 0x24
 80102fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	f022 0201 	bic.w	r2, r2, #1
 8010310:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8010320:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	021b      	lsls	r3, r3, #8
 8010326:	68fa      	ldr	r2, [r7, #12]
 8010328:	4313      	orrs	r3, r2
 801032a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	68fa      	ldr	r2, [r7, #12]
 8010332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	f042 0201 	orr.w	r2, r2, #1
 8010342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2220      	movs	r2, #32
 8010348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2200      	movs	r2, #0
 8010350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010354:	2300      	movs	r3, #0
 8010356:	e000      	b.n	801035a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010358:	2302      	movs	r3, #2
  }
}
 801035a:	4618      	mov	r0, r3
 801035c:	3714      	adds	r7, #20
 801035e:	46bd      	mov	sp, r7
 8010360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010364:	4770      	bx	lr
	...

08010368 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8010368:	b480      	push	{r7}
 801036a:	b085      	sub	sp, #20
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010370:	4b0d      	ldr	r3, [pc, #52]	@ (80103a8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010372:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010376:	4a0c      	ldr	r2, [pc, #48]	@ (80103a8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010378:	f043 0302 	orr.w	r3, r3, #2
 801037c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010380:	4b09      	ldr	r3, [pc, #36]	@ (80103a8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010382:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010386:	f003 0302 	and.w	r3, r3, #2
 801038a:	60fb      	str	r3, [r7, #12]
 801038c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 801038e:	4b07      	ldr	r3, [pc, #28]	@ (80103ac <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010390:	685a      	ldr	r2, [r3, #4]
 8010392:	4906      	ldr	r1, [pc, #24]	@ (80103ac <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	4313      	orrs	r3, r2
 8010398:	604b      	str	r3, [r1, #4]
}
 801039a:	bf00      	nop
 801039c:	3714      	adds	r7, #20
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr
 80103a6:	bf00      	nop
 80103a8:	58024400 	.word	0x58024400
 80103ac:	58000400 	.word	0x58000400

080103b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b084      	sub	sp, #16
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80103b8:	4b19      	ldr	r3, [pc, #100]	@ (8010420 <HAL_PWREx_ConfigSupply+0x70>)
 80103ba:	68db      	ldr	r3, [r3, #12]
 80103bc:	f003 0304 	and.w	r3, r3, #4
 80103c0:	2b04      	cmp	r3, #4
 80103c2:	d00a      	beq.n	80103da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80103c4:	4b16      	ldr	r3, [pc, #88]	@ (8010420 <HAL_PWREx_ConfigSupply+0x70>)
 80103c6:	68db      	ldr	r3, [r3, #12]
 80103c8:	f003 0307 	and.w	r3, r3, #7
 80103cc:	687a      	ldr	r2, [r7, #4]
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d001      	beq.n	80103d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80103d2:	2301      	movs	r3, #1
 80103d4:	e01f      	b.n	8010416 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80103d6:	2300      	movs	r3, #0
 80103d8:	e01d      	b.n	8010416 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80103da:	4b11      	ldr	r3, [pc, #68]	@ (8010420 <HAL_PWREx_ConfigSupply+0x70>)
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	f023 0207 	bic.w	r2, r3, #7
 80103e2:	490f      	ldr	r1, [pc, #60]	@ (8010420 <HAL_PWREx_ConfigSupply+0x70>)
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4313      	orrs	r3, r2
 80103e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80103ea:	f7f8 f9f1 	bl	80087d0 <HAL_GetTick>
 80103ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80103f0:	e009      	b.n	8010406 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80103f2:	f7f8 f9ed 	bl	80087d0 <HAL_GetTick>
 80103f6:	4602      	mov	r2, r0
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	1ad3      	subs	r3, r2, r3
 80103fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010400:	d901      	bls.n	8010406 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8010402:	2301      	movs	r3, #1
 8010404:	e007      	b.n	8010416 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010406:	4b06      	ldr	r3, [pc, #24]	@ (8010420 <HAL_PWREx_ConfigSupply+0x70>)
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801040e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010412:	d1ee      	bne.n	80103f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8010414:	2300      	movs	r3, #0
}
 8010416:	4618      	mov	r0, r3
 8010418:	3710      	adds	r7, #16
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	58024800 	.word	0x58024800

08010424 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b08c      	sub	sp, #48	@ 0x30
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d101      	bne.n	8010436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010432:	2301      	movs	r3, #1
 8010434:	e3c8      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	f003 0301 	and.w	r3, r3, #1
 801043e:	2b00      	cmp	r3, #0
 8010440:	f000 8087 	beq.w	8010552 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010444:	4b88      	ldr	r3, [pc, #544]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 8010446:	691b      	ldr	r3, [r3, #16]
 8010448:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801044c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801044e:	4b86      	ldr	r3, [pc, #536]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 8010450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010452:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8010454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010456:	2b10      	cmp	r3, #16
 8010458:	d007      	beq.n	801046a <HAL_RCC_OscConfig+0x46>
 801045a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801045c:	2b18      	cmp	r3, #24
 801045e:	d110      	bne.n	8010482 <HAL_RCC_OscConfig+0x5e>
 8010460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010462:	f003 0303 	and.w	r3, r3, #3
 8010466:	2b02      	cmp	r3, #2
 8010468:	d10b      	bne.n	8010482 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801046a:	4b7f      	ldr	r3, [pc, #508]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010472:	2b00      	cmp	r3, #0
 8010474:	d06c      	beq.n	8010550 <HAL_RCC_OscConfig+0x12c>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d168      	bne.n	8010550 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801047e:	2301      	movs	r3, #1
 8010480:	e3a2      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801048a:	d106      	bne.n	801049a <HAL_RCC_OscConfig+0x76>
 801048c:	4b76      	ldr	r3, [pc, #472]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	4a75      	ldr	r2, [pc, #468]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 8010492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010496:	6013      	str	r3, [r2, #0]
 8010498:	e02e      	b.n	80104f8 <HAL_RCC_OscConfig+0xd4>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d10c      	bne.n	80104bc <HAL_RCC_OscConfig+0x98>
 80104a2:	4b71      	ldr	r3, [pc, #452]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	4a70      	ldr	r2, [pc, #448]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80104a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80104ac:	6013      	str	r3, [r2, #0]
 80104ae:	4b6e      	ldr	r3, [pc, #440]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	4a6d      	ldr	r2, [pc, #436]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80104b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80104b8:	6013      	str	r3, [r2, #0]
 80104ba:	e01d      	b.n	80104f8 <HAL_RCC_OscConfig+0xd4>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80104c4:	d10c      	bne.n	80104e0 <HAL_RCC_OscConfig+0xbc>
 80104c6:	4b68      	ldr	r3, [pc, #416]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	4a67      	ldr	r2, [pc, #412]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80104cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80104d0:	6013      	str	r3, [r2, #0]
 80104d2:	4b65      	ldr	r3, [pc, #404]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	4a64      	ldr	r2, [pc, #400]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80104d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80104dc:	6013      	str	r3, [r2, #0]
 80104de:	e00b      	b.n	80104f8 <HAL_RCC_OscConfig+0xd4>
 80104e0:	4b61      	ldr	r3, [pc, #388]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4a60      	ldr	r2, [pc, #384]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80104e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80104ea:	6013      	str	r3, [r2, #0]
 80104ec:	4b5e      	ldr	r3, [pc, #376]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	4a5d      	ldr	r2, [pc, #372]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80104f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80104f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d013      	beq.n	8010528 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010500:	f7f8 f966 	bl	80087d0 <HAL_GetTick>
 8010504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010506:	e008      	b.n	801051a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010508:	f7f8 f962 	bl	80087d0 <HAL_GetTick>
 801050c:	4602      	mov	r2, r0
 801050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010510:	1ad3      	subs	r3, r2, r3
 8010512:	2b64      	cmp	r3, #100	@ 0x64
 8010514:	d901      	bls.n	801051a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8010516:	2303      	movs	r3, #3
 8010518:	e356      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801051a:	4b53      	ldr	r3, [pc, #332]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010522:	2b00      	cmp	r3, #0
 8010524:	d0f0      	beq.n	8010508 <HAL_RCC_OscConfig+0xe4>
 8010526:	e014      	b.n	8010552 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010528:	f7f8 f952 	bl	80087d0 <HAL_GetTick>
 801052c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801052e:	e008      	b.n	8010542 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010530:	f7f8 f94e 	bl	80087d0 <HAL_GetTick>
 8010534:	4602      	mov	r2, r0
 8010536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010538:	1ad3      	subs	r3, r2, r3
 801053a:	2b64      	cmp	r3, #100	@ 0x64
 801053c:	d901      	bls.n	8010542 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801053e:	2303      	movs	r3, #3
 8010540:	e342      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010542:	4b49      	ldr	r3, [pc, #292]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1f0      	bne.n	8010530 <HAL_RCC_OscConfig+0x10c>
 801054e:	e000      	b.n	8010552 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	f003 0302 	and.w	r3, r3, #2
 801055a:	2b00      	cmp	r3, #0
 801055c:	f000 808c 	beq.w	8010678 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010560:	4b41      	ldr	r3, [pc, #260]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 8010562:	691b      	ldr	r3, [r3, #16]
 8010564:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010568:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801056a:	4b3f      	ldr	r3, [pc, #252]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 801056c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801056e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8010570:	6a3b      	ldr	r3, [r7, #32]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d007      	beq.n	8010586 <HAL_RCC_OscConfig+0x162>
 8010576:	6a3b      	ldr	r3, [r7, #32]
 8010578:	2b18      	cmp	r3, #24
 801057a:	d137      	bne.n	80105ec <HAL_RCC_OscConfig+0x1c8>
 801057c:	69fb      	ldr	r3, [r7, #28]
 801057e:	f003 0303 	and.w	r3, r3, #3
 8010582:	2b00      	cmp	r3, #0
 8010584:	d132      	bne.n	80105ec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010586:	4b38      	ldr	r3, [pc, #224]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f003 0304 	and.w	r3, r3, #4
 801058e:	2b00      	cmp	r3, #0
 8010590:	d005      	beq.n	801059e <HAL_RCC_OscConfig+0x17a>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d101      	bne.n	801059e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801059a:	2301      	movs	r3, #1
 801059c:	e314      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801059e:	4b32      	ldr	r3, [pc, #200]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	f023 0219 	bic.w	r2, r3, #25
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	68db      	ldr	r3, [r3, #12]
 80105aa:	492f      	ldr	r1, [pc, #188]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80105ac:	4313      	orrs	r3, r2
 80105ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80105b0:	f7f8 f90e 	bl	80087d0 <HAL_GetTick>
 80105b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80105b6:	e008      	b.n	80105ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80105b8:	f7f8 f90a 	bl	80087d0 <HAL_GetTick>
 80105bc:	4602      	mov	r2, r0
 80105be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c0:	1ad3      	subs	r3, r2, r3
 80105c2:	2b02      	cmp	r3, #2
 80105c4:	d901      	bls.n	80105ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80105c6:	2303      	movs	r3, #3
 80105c8:	e2fe      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80105ca:	4b27      	ldr	r3, [pc, #156]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	f003 0304 	and.w	r3, r3, #4
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d0f0      	beq.n	80105b8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80105d6:	4b24      	ldr	r3, [pc, #144]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80105d8:	685b      	ldr	r3, [r3, #4]
 80105da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	691b      	ldr	r3, [r3, #16]
 80105e2:	061b      	lsls	r3, r3, #24
 80105e4:	4920      	ldr	r1, [pc, #128]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80105e6:	4313      	orrs	r3, r2
 80105e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80105ea:	e045      	b.n	8010678 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d026      	beq.n	8010642 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80105f4:	4b1c      	ldr	r3, [pc, #112]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f023 0219 	bic.w	r2, r3, #25
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	68db      	ldr	r3, [r3, #12]
 8010600:	4919      	ldr	r1, [pc, #100]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 8010602:	4313      	orrs	r3, r2
 8010604:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010606:	f7f8 f8e3 	bl	80087d0 <HAL_GetTick>
 801060a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801060c:	e008      	b.n	8010620 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801060e:	f7f8 f8df 	bl	80087d0 <HAL_GetTick>
 8010612:	4602      	mov	r2, r0
 8010614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010616:	1ad3      	subs	r3, r2, r3
 8010618:	2b02      	cmp	r3, #2
 801061a:	d901      	bls.n	8010620 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 801061c:	2303      	movs	r3, #3
 801061e:	e2d3      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010620:	4b11      	ldr	r3, [pc, #68]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f003 0304 	and.w	r3, r3, #4
 8010628:	2b00      	cmp	r3, #0
 801062a:	d0f0      	beq.n	801060e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801062c:	4b0e      	ldr	r3, [pc, #56]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 801062e:	685b      	ldr	r3, [r3, #4]
 8010630:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	691b      	ldr	r3, [r3, #16]
 8010638:	061b      	lsls	r3, r3, #24
 801063a:	490b      	ldr	r1, [pc, #44]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 801063c:	4313      	orrs	r3, r2
 801063e:	604b      	str	r3, [r1, #4]
 8010640:	e01a      	b.n	8010678 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010642:	4b09      	ldr	r3, [pc, #36]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	4a08      	ldr	r2, [pc, #32]	@ (8010668 <HAL_RCC_OscConfig+0x244>)
 8010648:	f023 0301 	bic.w	r3, r3, #1
 801064c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801064e:	f7f8 f8bf 	bl	80087d0 <HAL_GetTick>
 8010652:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010654:	e00a      	b.n	801066c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010656:	f7f8 f8bb 	bl	80087d0 <HAL_GetTick>
 801065a:	4602      	mov	r2, r0
 801065c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801065e:	1ad3      	subs	r3, r2, r3
 8010660:	2b02      	cmp	r3, #2
 8010662:	d903      	bls.n	801066c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8010664:	2303      	movs	r3, #3
 8010666:	e2af      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
 8010668:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801066c:	4b96      	ldr	r3, [pc, #600]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f003 0304 	and.w	r3, r3, #4
 8010674:	2b00      	cmp	r3, #0
 8010676:	d1ee      	bne.n	8010656 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f003 0310 	and.w	r3, r3, #16
 8010680:	2b00      	cmp	r3, #0
 8010682:	d06a      	beq.n	801075a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010684:	4b90      	ldr	r3, [pc, #576]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 8010686:	691b      	ldr	r3, [r3, #16]
 8010688:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801068c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801068e:	4b8e      	ldr	r3, [pc, #568]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 8010690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010692:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010694:	69bb      	ldr	r3, [r7, #24]
 8010696:	2b08      	cmp	r3, #8
 8010698:	d007      	beq.n	80106aa <HAL_RCC_OscConfig+0x286>
 801069a:	69bb      	ldr	r3, [r7, #24]
 801069c:	2b18      	cmp	r3, #24
 801069e:	d11b      	bne.n	80106d8 <HAL_RCC_OscConfig+0x2b4>
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	f003 0303 	and.w	r3, r3, #3
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d116      	bne.n	80106d8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80106aa:	4b87      	ldr	r3, [pc, #540]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d005      	beq.n	80106c2 <HAL_RCC_OscConfig+0x29e>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	69db      	ldr	r3, [r3, #28]
 80106ba:	2b80      	cmp	r3, #128	@ 0x80
 80106bc:	d001      	beq.n	80106c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80106be:	2301      	movs	r3, #1
 80106c0:	e282      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80106c2:	4b81      	ldr	r3, [pc, #516]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6a1b      	ldr	r3, [r3, #32]
 80106ce:	061b      	lsls	r3, r3, #24
 80106d0:	497d      	ldr	r1, [pc, #500]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80106d2:	4313      	orrs	r3, r2
 80106d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80106d6:	e040      	b.n	801075a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	69db      	ldr	r3, [r3, #28]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d023      	beq.n	8010728 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80106e0:	4b79      	ldr	r3, [pc, #484]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	4a78      	ldr	r2, [pc, #480]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80106e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106ec:	f7f8 f870 	bl	80087d0 <HAL_GetTick>
 80106f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80106f2:	e008      	b.n	8010706 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80106f4:	f7f8 f86c 	bl	80087d0 <HAL_GetTick>
 80106f8:	4602      	mov	r2, r0
 80106fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106fc:	1ad3      	subs	r3, r2, r3
 80106fe:	2b02      	cmp	r3, #2
 8010700:	d901      	bls.n	8010706 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8010702:	2303      	movs	r3, #3
 8010704:	e260      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010706:	4b70      	ldr	r3, [pc, #448]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801070e:	2b00      	cmp	r3, #0
 8010710:	d0f0      	beq.n	80106f4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010712:	4b6d      	ldr	r3, [pc, #436]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 8010714:	68db      	ldr	r3, [r3, #12]
 8010716:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6a1b      	ldr	r3, [r3, #32]
 801071e:	061b      	lsls	r3, r3, #24
 8010720:	4969      	ldr	r1, [pc, #420]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 8010722:	4313      	orrs	r3, r2
 8010724:	60cb      	str	r3, [r1, #12]
 8010726:	e018      	b.n	801075a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8010728:	4b67      	ldr	r3, [pc, #412]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4a66      	ldr	r2, [pc, #408]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 801072e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010734:	f7f8 f84c 	bl	80087d0 <HAL_GetTick>
 8010738:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801073a:	e008      	b.n	801074e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801073c:	f7f8 f848 	bl	80087d0 <HAL_GetTick>
 8010740:	4602      	mov	r2, r0
 8010742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010744:	1ad3      	subs	r3, r2, r3
 8010746:	2b02      	cmp	r3, #2
 8010748:	d901      	bls.n	801074e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801074a:	2303      	movs	r3, #3
 801074c:	e23c      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801074e:	4b5e      	ldr	r3, [pc, #376]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010756:	2b00      	cmp	r3, #0
 8010758:	d1f0      	bne.n	801073c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	f003 0308 	and.w	r3, r3, #8
 8010762:	2b00      	cmp	r3, #0
 8010764:	d036      	beq.n	80107d4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	695b      	ldr	r3, [r3, #20]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d019      	beq.n	80107a2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801076e:	4b56      	ldr	r3, [pc, #344]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 8010770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010772:	4a55      	ldr	r2, [pc, #340]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 8010774:	f043 0301 	orr.w	r3, r3, #1
 8010778:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801077a:	f7f8 f829 	bl	80087d0 <HAL_GetTick>
 801077e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010780:	e008      	b.n	8010794 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010782:	f7f8 f825 	bl	80087d0 <HAL_GetTick>
 8010786:	4602      	mov	r2, r0
 8010788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801078a:	1ad3      	subs	r3, r2, r3
 801078c:	2b02      	cmp	r3, #2
 801078e:	d901      	bls.n	8010794 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8010790:	2303      	movs	r3, #3
 8010792:	e219      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010794:	4b4c      	ldr	r3, [pc, #304]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 8010796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010798:	f003 0302 	and.w	r3, r3, #2
 801079c:	2b00      	cmp	r3, #0
 801079e:	d0f0      	beq.n	8010782 <HAL_RCC_OscConfig+0x35e>
 80107a0:	e018      	b.n	80107d4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80107a2:	4b49      	ldr	r3, [pc, #292]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80107a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107a6:	4a48      	ldr	r2, [pc, #288]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80107a8:	f023 0301 	bic.w	r3, r3, #1
 80107ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80107ae:	f7f8 f80f 	bl	80087d0 <HAL_GetTick>
 80107b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80107b4:	e008      	b.n	80107c8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80107b6:	f7f8 f80b 	bl	80087d0 <HAL_GetTick>
 80107ba:	4602      	mov	r2, r0
 80107bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107be:	1ad3      	subs	r3, r2, r3
 80107c0:	2b02      	cmp	r3, #2
 80107c2:	d901      	bls.n	80107c8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80107c4:	2303      	movs	r3, #3
 80107c6:	e1ff      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80107c8:	4b3f      	ldr	r3, [pc, #252]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80107ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107cc:	f003 0302 	and.w	r3, r3, #2
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d1f0      	bne.n	80107b6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	f003 0320 	and.w	r3, r3, #32
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d036      	beq.n	801084e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	699b      	ldr	r3, [r3, #24]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d019      	beq.n	801081c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80107e8:	4b37      	ldr	r3, [pc, #220]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4a36      	ldr	r2, [pc, #216]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80107ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80107f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80107f4:	f7f7 ffec 	bl	80087d0 <HAL_GetTick>
 80107f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80107fa:	e008      	b.n	801080e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80107fc:	f7f7 ffe8 	bl	80087d0 <HAL_GetTick>
 8010800:	4602      	mov	r2, r0
 8010802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010804:	1ad3      	subs	r3, r2, r3
 8010806:	2b02      	cmp	r3, #2
 8010808:	d901      	bls.n	801080e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 801080a:	2303      	movs	r3, #3
 801080c:	e1dc      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801080e:	4b2e      	ldr	r3, [pc, #184]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010816:	2b00      	cmp	r3, #0
 8010818:	d0f0      	beq.n	80107fc <HAL_RCC_OscConfig+0x3d8>
 801081a:	e018      	b.n	801084e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801081c:	4b2a      	ldr	r3, [pc, #168]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	4a29      	ldr	r2, [pc, #164]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 8010822:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010826:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010828:	f7f7 ffd2 	bl	80087d0 <HAL_GetTick>
 801082c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801082e:	e008      	b.n	8010842 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010830:	f7f7 ffce 	bl	80087d0 <HAL_GetTick>
 8010834:	4602      	mov	r2, r0
 8010836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010838:	1ad3      	subs	r3, r2, r3
 801083a:	2b02      	cmp	r3, #2
 801083c:	d901      	bls.n	8010842 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 801083e:	2303      	movs	r3, #3
 8010840:	e1c2      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010842:	4b21      	ldr	r3, [pc, #132]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801084a:	2b00      	cmp	r3, #0
 801084c:	d1f0      	bne.n	8010830 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f003 0304 	and.w	r3, r3, #4
 8010856:	2b00      	cmp	r3, #0
 8010858:	f000 8086 	beq.w	8010968 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801085c:	4b1b      	ldr	r3, [pc, #108]	@ (80108cc <HAL_RCC_OscConfig+0x4a8>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	4a1a      	ldr	r2, [pc, #104]	@ (80108cc <HAL_RCC_OscConfig+0x4a8>)
 8010862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010868:	f7f7 ffb2 	bl	80087d0 <HAL_GetTick>
 801086c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801086e:	e008      	b.n	8010882 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010870:	f7f7 ffae 	bl	80087d0 <HAL_GetTick>
 8010874:	4602      	mov	r2, r0
 8010876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010878:	1ad3      	subs	r3, r2, r3
 801087a:	2b64      	cmp	r3, #100	@ 0x64
 801087c:	d901      	bls.n	8010882 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 801087e:	2303      	movs	r3, #3
 8010880:	e1a2      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010882:	4b12      	ldr	r3, [pc, #72]	@ (80108cc <HAL_RCC_OscConfig+0x4a8>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801088a:	2b00      	cmp	r3, #0
 801088c:	d0f0      	beq.n	8010870 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	689b      	ldr	r3, [r3, #8]
 8010892:	2b01      	cmp	r3, #1
 8010894:	d106      	bne.n	80108a4 <HAL_RCC_OscConfig+0x480>
 8010896:	4b0c      	ldr	r3, [pc, #48]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 8010898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801089a:	4a0b      	ldr	r2, [pc, #44]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 801089c:	f043 0301 	orr.w	r3, r3, #1
 80108a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80108a2:	e032      	b.n	801090a <HAL_RCC_OscConfig+0x4e6>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	689b      	ldr	r3, [r3, #8]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d111      	bne.n	80108d0 <HAL_RCC_OscConfig+0x4ac>
 80108ac:	4b06      	ldr	r3, [pc, #24]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80108ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108b0:	4a05      	ldr	r2, [pc, #20]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80108b2:	f023 0301 	bic.w	r3, r3, #1
 80108b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80108b8:	4b03      	ldr	r3, [pc, #12]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80108ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108bc:	4a02      	ldr	r2, [pc, #8]	@ (80108c8 <HAL_RCC_OscConfig+0x4a4>)
 80108be:	f023 0304 	bic.w	r3, r3, #4
 80108c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80108c4:	e021      	b.n	801090a <HAL_RCC_OscConfig+0x4e6>
 80108c6:	bf00      	nop
 80108c8:	58024400 	.word	0x58024400
 80108cc:	58024800 	.word	0x58024800
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	689b      	ldr	r3, [r3, #8]
 80108d4:	2b05      	cmp	r3, #5
 80108d6:	d10c      	bne.n	80108f2 <HAL_RCC_OscConfig+0x4ce>
 80108d8:	4b83      	ldr	r3, [pc, #524]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 80108da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108dc:	4a82      	ldr	r2, [pc, #520]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 80108de:	f043 0304 	orr.w	r3, r3, #4
 80108e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80108e4:	4b80      	ldr	r3, [pc, #512]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 80108e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108e8:	4a7f      	ldr	r2, [pc, #508]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 80108ea:	f043 0301 	orr.w	r3, r3, #1
 80108ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80108f0:	e00b      	b.n	801090a <HAL_RCC_OscConfig+0x4e6>
 80108f2:	4b7d      	ldr	r3, [pc, #500]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 80108f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108f6:	4a7c      	ldr	r2, [pc, #496]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 80108f8:	f023 0301 	bic.w	r3, r3, #1
 80108fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80108fe:	4b7a      	ldr	r3, [pc, #488]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010902:	4a79      	ldr	r2, [pc, #484]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010904:	f023 0304 	bic.w	r3, r3, #4
 8010908:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	689b      	ldr	r3, [r3, #8]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d015      	beq.n	801093e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010912:	f7f7 ff5d 	bl	80087d0 <HAL_GetTick>
 8010916:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010918:	e00a      	b.n	8010930 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801091a:	f7f7 ff59 	bl	80087d0 <HAL_GetTick>
 801091e:	4602      	mov	r2, r0
 8010920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010922:	1ad3      	subs	r3, r2, r3
 8010924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010928:	4293      	cmp	r3, r2
 801092a:	d901      	bls.n	8010930 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 801092c:	2303      	movs	r3, #3
 801092e:	e14b      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010930:	4b6d      	ldr	r3, [pc, #436]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010934:	f003 0302 	and.w	r3, r3, #2
 8010938:	2b00      	cmp	r3, #0
 801093a:	d0ee      	beq.n	801091a <HAL_RCC_OscConfig+0x4f6>
 801093c:	e014      	b.n	8010968 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801093e:	f7f7 ff47 	bl	80087d0 <HAL_GetTick>
 8010942:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010944:	e00a      	b.n	801095c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010946:	f7f7 ff43 	bl	80087d0 <HAL_GetTick>
 801094a:	4602      	mov	r2, r0
 801094c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801094e:	1ad3      	subs	r3, r2, r3
 8010950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010954:	4293      	cmp	r3, r2
 8010956:	d901      	bls.n	801095c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8010958:	2303      	movs	r3, #3
 801095a:	e135      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801095c:	4b62      	ldr	r3, [pc, #392]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 801095e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010960:	f003 0302 	and.w	r3, r3, #2
 8010964:	2b00      	cmp	r3, #0
 8010966:	d1ee      	bne.n	8010946 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801096c:	2b00      	cmp	r3, #0
 801096e:	f000 812a 	beq.w	8010bc6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8010972:	4b5d      	ldr	r3, [pc, #372]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010974:	691b      	ldr	r3, [r3, #16]
 8010976:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801097a:	2b18      	cmp	r3, #24
 801097c:	f000 80ba 	beq.w	8010af4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010984:	2b02      	cmp	r3, #2
 8010986:	f040 8095 	bne.w	8010ab4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801098a:	4b57      	ldr	r3, [pc, #348]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	4a56      	ldr	r2, [pc, #344]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010990:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010996:	f7f7 ff1b 	bl	80087d0 <HAL_GetTick>
 801099a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801099c:	e008      	b.n	80109b0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801099e:	f7f7 ff17 	bl	80087d0 <HAL_GetTick>
 80109a2:	4602      	mov	r2, r0
 80109a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a6:	1ad3      	subs	r3, r2, r3
 80109a8:	2b02      	cmp	r3, #2
 80109aa:	d901      	bls.n	80109b0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80109ac:	2303      	movs	r3, #3
 80109ae:	e10b      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80109b0:	4b4d      	ldr	r3, [pc, #308]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d1f0      	bne.n	801099e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80109bc:	4b4a      	ldr	r3, [pc, #296]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 80109be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80109c0:	4b4a      	ldr	r3, [pc, #296]	@ (8010aec <HAL_RCC_OscConfig+0x6c8>)
 80109c2:	4013      	ands	r3, r2
 80109c4:	687a      	ldr	r2, [r7, #4]
 80109c6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80109c8:	687a      	ldr	r2, [r7, #4]
 80109ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80109cc:	0112      	lsls	r2, r2, #4
 80109ce:	430a      	orrs	r2, r1
 80109d0:	4945      	ldr	r1, [pc, #276]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 80109d2:	4313      	orrs	r3, r2
 80109d4:	628b      	str	r3, [r1, #40]	@ 0x28
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109da:	3b01      	subs	r3, #1
 80109dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109e4:	3b01      	subs	r3, #1
 80109e6:	025b      	lsls	r3, r3, #9
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	431a      	orrs	r2, r3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109f0:	3b01      	subs	r3, #1
 80109f2:	041b      	lsls	r3, r3, #16
 80109f4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80109f8:	431a      	orrs	r2, r3
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109fe:	3b01      	subs	r3, #1
 8010a00:	061b      	lsls	r3, r3, #24
 8010a02:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010a06:	4938      	ldr	r1, [pc, #224]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a08:	4313      	orrs	r3, r2
 8010a0a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8010a0c:	4b36      	ldr	r3, [pc, #216]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a10:	4a35      	ldr	r2, [pc, #212]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a12:	f023 0301 	bic.w	r3, r3, #1
 8010a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010a18:	4b33      	ldr	r3, [pc, #204]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a1c:	4b34      	ldr	r3, [pc, #208]	@ (8010af0 <HAL_RCC_OscConfig+0x6cc>)
 8010a1e:	4013      	ands	r3, r2
 8010a20:	687a      	ldr	r2, [r7, #4]
 8010a22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8010a24:	00d2      	lsls	r2, r2, #3
 8010a26:	4930      	ldr	r1, [pc, #192]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a28:	4313      	orrs	r3, r2
 8010a2a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8010a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a30:	f023 020c 	bic.w	r2, r3, #12
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a38:	492b      	ldr	r1, [pc, #172]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a3a:	4313      	orrs	r3, r2
 8010a3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8010a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a42:	f023 0202 	bic.w	r2, r3, #2
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a4a:	4927      	ldr	r1, [pc, #156]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a4c:	4313      	orrs	r3, r2
 8010a4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8010a50:	4b25      	ldr	r3, [pc, #148]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a54:	4a24      	ldr	r2, [pc, #144]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010a5c:	4b22      	ldr	r3, [pc, #136]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a60:	4a21      	ldr	r2, [pc, #132]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8010a68:	4b1f      	ldr	r3, [pc, #124]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8010a74:	4b1c      	ldr	r3, [pc, #112]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a78:	4a1b      	ldr	r2, [pc, #108]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a7a:	f043 0301 	orr.w	r3, r3, #1
 8010a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010a80:	4b19      	ldr	r3, [pc, #100]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	4a18      	ldr	r2, [pc, #96]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a8c:	f7f7 fea0 	bl	80087d0 <HAL_GetTick>
 8010a90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010a92:	e008      	b.n	8010aa6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010a94:	f7f7 fe9c 	bl	80087d0 <HAL_GetTick>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	2b02      	cmp	r3, #2
 8010aa0:	d901      	bls.n	8010aa6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8010aa2:	2303      	movs	r3, #3
 8010aa4:	e090      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010aa6:	4b10      	ldr	r3, [pc, #64]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d0f0      	beq.n	8010a94 <HAL_RCC_OscConfig+0x670>
 8010ab2:	e088      	b.n	8010bc6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010ac0:	f7f7 fe86 	bl	80087d0 <HAL_GetTick>
 8010ac4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010ac6:	e008      	b.n	8010ada <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010ac8:	f7f7 fe82 	bl	80087d0 <HAL_GetTick>
 8010acc:	4602      	mov	r2, r0
 8010ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ad0:	1ad3      	subs	r3, r2, r3
 8010ad2:	2b02      	cmp	r3, #2
 8010ad4:	d901      	bls.n	8010ada <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8010ad6:	2303      	movs	r3, #3
 8010ad8:	e076      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010ada:	4b03      	ldr	r3, [pc, #12]	@ (8010ae8 <HAL_RCC_OscConfig+0x6c4>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d1f0      	bne.n	8010ac8 <HAL_RCC_OscConfig+0x6a4>
 8010ae6:	e06e      	b.n	8010bc6 <HAL_RCC_OscConfig+0x7a2>
 8010ae8:	58024400 	.word	0x58024400
 8010aec:	fffffc0c 	.word	0xfffffc0c
 8010af0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8010af4:	4b36      	ldr	r3, [pc, #216]	@ (8010bd0 <HAL_RCC_OscConfig+0x7ac>)
 8010af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010af8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8010afa:	4b35      	ldr	r3, [pc, #212]	@ (8010bd0 <HAL_RCC_OscConfig+0x7ac>)
 8010afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010afe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b04:	2b01      	cmp	r3, #1
 8010b06:	d031      	beq.n	8010b6c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010b08:	693b      	ldr	r3, [r7, #16]
 8010b0a:	f003 0203 	and.w	r2, r3, #3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d12a      	bne.n	8010b6c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	091b      	lsrs	r3, r3, #4
 8010b1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d122      	bne.n	8010b6c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b30:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d11a      	bne.n	8010b6c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	0a5b      	lsrs	r3, r3, #9
 8010b3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b42:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d111      	bne.n	8010b6c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	0c1b      	lsrs	r3, r3, #16
 8010b4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b54:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d108      	bne.n	8010b6c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	0e1b      	lsrs	r3, r3, #24
 8010b5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b66:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d001      	beq.n	8010b70 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	e02b      	b.n	8010bc8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8010b70:	4b17      	ldr	r3, [pc, #92]	@ (8010bd0 <HAL_RCC_OscConfig+0x7ac>)
 8010b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b74:	08db      	lsrs	r3, r3, #3
 8010b76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b7a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010b80:	693a      	ldr	r2, [r7, #16]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d01f      	beq.n	8010bc6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8010b86:	4b12      	ldr	r3, [pc, #72]	@ (8010bd0 <HAL_RCC_OscConfig+0x7ac>)
 8010b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b8a:	4a11      	ldr	r2, [pc, #68]	@ (8010bd0 <HAL_RCC_OscConfig+0x7ac>)
 8010b8c:	f023 0301 	bic.w	r3, r3, #1
 8010b90:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010b92:	f7f7 fe1d 	bl	80087d0 <HAL_GetTick>
 8010b96:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8010b98:	bf00      	nop
 8010b9a:	f7f7 fe19 	bl	80087d0 <HAL_GetTick>
 8010b9e:	4602      	mov	r2, r0
 8010ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d0f9      	beq.n	8010b9a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8010bd0 <HAL_RCC_OscConfig+0x7ac>)
 8010ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010baa:	4b0a      	ldr	r3, [pc, #40]	@ (8010bd4 <HAL_RCC_OscConfig+0x7b0>)
 8010bac:	4013      	ands	r3, r2
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8010bb2:	00d2      	lsls	r2, r2, #3
 8010bb4:	4906      	ldr	r1, [pc, #24]	@ (8010bd0 <HAL_RCC_OscConfig+0x7ac>)
 8010bb6:	4313      	orrs	r3, r2
 8010bb8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8010bba:	4b05      	ldr	r3, [pc, #20]	@ (8010bd0 <HAL_RCC_OscConfig+0x7ac>)
 8010bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bbe:	4a04      	ldr	r2, [pc, #16]	@ (8010bd0 <HAL_RCC_OscConfig+0x7ac>)
 8010bc0:	f043 0301 	orr.w	r3, r3, #1
 8010bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8010bc6:	2300      	movs	r3, #0
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3730      	adds	r7, #48	@ 0x30
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}
 8010bd0:	58024400 	.word	0x58024400
 8010bd4:	ffff0007 	.word	0xffff0007

08010bd8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b086      	sub	sp, #24
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d101      	bne.n	8010bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010be8:	2301      	movs	r3, #1
 8010bea:	e19c      	b.n	8010f26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010bec:	4b8a      	ldr	r3, [pc, #552]	@ (8010e18 <HAL_RCC_ClockConfig+0x240>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	f003 030f 	and.w	r3, r3, #15
 8010bf4:	683a      	ldr	r2, [r7, #0]
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	d910      	bls.n	8010c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010bfa:	4b87      	ldr	r3, [pc, #540]	@ (8010e18 <HAL_RCC_ClockConfig+0x240>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	f023 020f 	bic.w	r2, r3, #15
 8010c02:	4985      	ldr	r1, [pc, #532]	@ (8010e18 <HAL_RCC_ClockConfig+0x240>)
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	4313      	orrs	r3, r2
 8010c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010c0a:	4b83      	ldr	r3, [pc, #524]	@ (8010e18 <HAL_RCC_ClockConfig+0x240>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f003 030f 	and.w	r3, r3, #15
 8010c12:	683a      	ldr	r2, [r7, #0]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d001      	beq.n	8010c1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010c18:	2301      	movs	r3, #1
 8010c1a:	e184      	b.n	8010f26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f003 0304 	and.w	r3, r3, #4
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d010      	beq.n	8010c4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	691a      	ldr	r2, [r3, #16]
 8010c2c:	4b7b      	ldr	r3, [pc, #492]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010c2e:	699b      	ldr	r3, [r3, #24]
 8010c30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d908      	bls.n	8010c4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010c38:	4b78      	ldr	r3, [pc, #480]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010c3a:	699b      	ldr	r3, [r3, #24]
 8010c3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	691b      	ldr	r3, [r3, #16]
 8010c44:	4975      	ldr	r1, [pc, #468]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010c46:	4313      	orrs	r3, r2
 8010c48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	f003 0308 	and.w	r3, r3, #8
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d010      	beq.n	8010c78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	695a      	ldr	r2, [r3, #20]
 8010c5a:	4b70      	ldr	r3, [pc, #448]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010c5c:	69db      	ldr	r3, [r3, #28]
 8010c5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d908      	bls.n	8010c78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010c66:	4b6d      	ldr	r3, [pc, #436]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010c68:	69db      	ldr	r3, [r3, #28]
 8010c6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	695b      	ldr	r3, [r3, #20]
 8010c72:	496a      	ldr	r1, [pc, #424]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010c74:	4313      	orrs	r3, r2
 8010c76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	f003 0310 	and.w	r3, r3, #16
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d010      	beq.n	8010ca6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	699a      	ldr	r2, [r3, #24]
 8010c88:	4b64      	ldr	r3, [pc, #400]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010c8a:	69db      	ldr	r3, [r3, #28]
 8010c8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d908      	bls.n	8010ca6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010c94:	4b61      	ldr	r3, [pc, #388]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010c96:	69db      	ldr	r3, [r3, #28]
 8010c98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	699b      	ldr	r3, [r3, #24]
 8010ca0:	495e      	ldr	r1, [pc, #376]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010ca2:	4313      	orrs	r3, r2
 8010ca4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	f003 0320 	and.w	r3, r3, #32
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d010      	beq.n	8010cd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	69da      	ldr	r2, [r3, #28]
 8010cb6:	4b59      	ldr	r3, [pc, #356]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010cb8:	6a1b      	ldr	r3, [r3, #32]
 8010cba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d908      	bls.n	8010cd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8010cc2:	4b56      	ldr	r3, [pc, #344]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010cc4:	6a1b      	ldr	r3, [r3, #32]
 8010cc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	69db      	ldr	r3, [r3, #28]
 8010cce:	4953      	ldr	r1, [pc, #332]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010cd0:	4313      	orrs	r3, r2
 8010cd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	f003 0302 	and.w	r3, r3, #2
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d010      	beq.n	8010d02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	68da      	ldr	r2, [r3, #12]
 8010ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010ce6:	699b      	ldr	r3, [r3, #24]
 8010ce8:	f003 030f 	and.w	r3, r3, #15
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d908      	bls.n	8010d02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010cf2:	699b      	ldr	r3, [r3, #24]
 8010cf4:	f023 020f 	bic.w	r2, r3, #15
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	4947      	ldr	r1, [pc, #284]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010cfe:	4313      	orrs	r3, r2
 8010d00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	f003 0301 	and.w	r3, r3, #1
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d055      	beq.n	8010dba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8010d0e:	4b43      	ldr	r3, [pc, #268]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010d10:	699b      	ldr	r3, [r3, #24]
 8010d12:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	689b      	ldr	r3, [r3, #8]
 8010d1a:	4940      	ldr	r1, [pc, #256]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010d1c:	4313      	orrs	r3, r2
 8010d1e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	2b02      	cmp	r3, #2
 8010d26:	d107      	bne.n	8010d38 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010d28:	4b3c      	ldr	r3, [pc, #240]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d121      	bne.n	8010d78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010d34:	2301      	movs	r3, #1
 8010d36:	e0f6      	b.n	8010f26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	2b03      	cmp	r3, #3
 8010d3e:	d107      	bne.n	8010d50 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010d40:	4b36      	ldr	r3, [pc, #216]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d115      	bne.n	8010d78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e0ea      	b.n	8010f26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	2b01      	cmp	r3, #1
 8010d56:	d107      	bne.n	8010d68 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010d58:	4b30      	ldr	r3, [pc, #192]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d109      	bne.n	8010d78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010d64:	2301      	movs	r3, #1
 8010d66:	e0de      	b.n	8010f26 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010d68:	4b2c      	ldr	r3, [pc, #176]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f003 0304 	and.w	r3, r3, #4
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d101      	bne.n	8010d78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010d74:	2301      	movs	r3, #1
 8010d76:	e0d6      	b.n	8010f26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010d78:	4b28      	ldr	r3, [pc, #160]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010d7a:	691b      	ldr	r3, [r3, #16]
 8010d7c:	f023 0207 	bic.w	r2, r3, #7
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	4925      	ldr	r1, [pc, #148]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010d86:	4313      	orrs	r3, r2
 8010d88:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010d8a:	f7f7 fd21 	bl	80087d0 <HAL_GetTick>
 8010d8e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010d90:	e00a      	b.n	8010da8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010d92:	f7f7 fd1d 	bl	80087d0 <HAL_GetTick>
 8010d96:	4602      	mov	r2, r0
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	1ad3      	subs	r3, r2, r3
 8010d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010da0:	4293      	cmp	r3, r2
 8010da2:	d901      	bls.n	8010da8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8010da4:	2303      	movs	r3, #3
 8010da6:	e0be      	b.n	8010f26 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010da8:	4b1c      	ldr	r3, [pc, #112]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010daa:	691b      	ldr	r3, [r3, #16]
 8010dac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	00db      	lsls	r3, r3, #3
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d1eb      	bne.n	8010d92 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	f003 0302 	and.w	r3, r3, #2
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d010      	beq.n	8010de8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	68da      	ldr	r2, [r3, #12]
 8010dca:	4b14      	ldr	r3, [pc, #80]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010dcc:	699b      	ldr	r3, [r3, #24]
 8010dce:	f003 030f 	and.w	r3, r3, #15
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d208      	bcs.n	8010de8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010dd6:	4b11      	ldr	r3, [pc, #68]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010dd8:	699b      	ldr	r3, [r3, #24]
 8010dda:	f023 020f 	bic.w	r2, r3, #15
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	490e      	ldr	r1, [pc, #56]	@ (8010e1c <HAL_RCC_ClockConfig+0x244>)
 8010de4:	4313      	orrs	r3, r2
 8010de6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010de8:	4b0b      	ldr	r3, [pc, #44]	@ (8010e18 <HAL_RCC_ClockConfig+0x240>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f003 030f 	and.w	r3, r3, #15
 8010df0:	683a      	ldr	r2, [r7, #0]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d214      	bcs.n	8010e20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010df6:	4b08      	ldr	r3, [pc, #32]	@ (8010e18 <HAL_RCC_ClockConfig+0x240>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f023 020f 	bic.w	r2, r3, #15
 8010dfe:	4906      	ldr	r1, [pc, #24]	@ (8010e18 <HAL_RCC_ClockConfig+0x240>)
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	4313      	orrs	r3, r2
 8010e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010e06:	4b04      	ldr	r3, [pc, #16]	@ (8010e18 <HAL_RCC_ClockConfig+0x240>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f003 030f 	and.w	r3, r3, #15
 8010e0e:	683a      	ldr	r2, [r7, #0]
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d005      	beq.n	8010e20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8010e14:	2301      	movs	r3, #1
 8010e16:	e086      	b.n	8010f26 <HAL_RCC_ClockConfig+0x34e>
 8010e18:	52002000 	.word	0x52002000
 8010e1c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	f003 0304 	and.w	r3, r3, #4
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d010      	beq.n	8010e4e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	691a      	ldr	r2, [r3, #16]
 8010e30:	4b3f      	ldr	r3, [pc, #252]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010e32:	699b      	ldr	r3, [r3, #24]
 8010e34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d208      	bcs.n	8010e4e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010e3e:	699b      	ldr	r3, [r3, #24]
 8010e40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	691b      	ldr	r3, [r3, #16]
 8010e48:	4939      	ldr	r1, [pc, #228]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f003 0308 	and.w	r3, r3, #8
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d010      	beq.n	8010e7c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	695a      	ldr	r2, [r3, #20]
 8010e5e:	4b34      	ldr	r3, [pc, #208]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010e60:	69db      	ldr	r3, [r3, #28]
 8010e62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d208      	bcs.n	8010e7c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010e6a:	4b31      	ldr	r3, [pc, #196]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010e6c:	69db      	ldr	r3, [r3, #28]
 8010e6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	695b      	ldr	r3, [r3, #20]
 8010e76:	492e      	ldr	r1, [pc, #184]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010e78:	4313      	orrs	r3, r2
 8010e7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f003 0310 	and.w	r3, r3, #16
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d010      	beq.n	8010eaa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	699a      	ldr	r2, [r3, #24]
 8010e8c:	4b28      	ldr	r3, [pc, #160]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010e8e:	69db      	ldr	r3, [r3, #28]
 8010e90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d208      	bcs.n	8010eaa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010e98:	4b25      	ldr	r3, [pc, #148]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010e9a:	69db      	ldr	r3, [r3, #28]
 8010e9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	699b      	ldr	r3, [r3, #24]
 8010ea4:	4922      	ldr	r1, [pc, #136]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	f003 0320 	and.w	r3, r3, #32
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d010      	beq.n	8010ed8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	69da      	ldr	r2, [r3, #28]
 8010eba:	4b1d      	ldr	r3, [pc, #116]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010ebc:	6a1b      	ldr	r3, [r3, #32]
 8010ebe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d208      	bcs.n	8010ed8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8010ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010ec8:	6a1b      	ldr	r3, [r3, #32]
 8010eca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	69db      	ldr	r3, [r3, #28]
 8010ed2:	4917      	ldr	r1, [pc, #92]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010ed4:	4313      	orrs	r3, r2
 8010ed6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010ed8:	f000 f834 	bl	8010f44 <HAL_RCC_GetSysClockFreq>
 8010edc:	4602      	mov	r2, r0
 8010ede:	4b14      	ldr	r3, [pc, #80]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010ee0:	699b      	ldr	r3, [r3, #24]
 8010ee2:	0a1b      	lsrs	r3, r3, #8
 8010ee4:	f003 030f 	and.w	r3, r3, #15
 8010ee8:	4912      	ldr	r1, [pc, #72]	@ (8010f34 <HAL_RCC_ClockConfig+0x35c>)
 8010eea:	5ccb      	ldrb	r3, [r1, r3]
 8010eec:	f003 031f 	and.w	r3, r3, #31
 8010ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8010ef4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8010f30 <HAL_RCC_ClockConfig+0x358>)
 8010ef8:	699b      	ldr	r3, [r3, #24]
 8010efa:	f003 030f 	and.w	r3, r3, #15
 8010efe:	4a0d      	ldr	r2, [pc, #52]	@ (8010f34 <HAL_RCC_ClockConfig+0x35c>)
 8010f00:	5cd3      	ldrb	r3, [r2, r3]
 8010f02:	f003 031f 	and.w	r3, r3, #31
 8010f06:	693a      	ldr	r2, [r7, #16]
 8010f08:	fa22 f303 	lsr.w	r3, r2, r3
 8010f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8010f38 <HAL_RCC_ClockConfig+0x360>)
 8010f0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010f10:	4a0a      	ldr	r2, [pc, #40]	@ (8010f3c <HAL_RCC_ClockConfig+0x364>)
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8010f16:	4b0a      	ldr	r3, [pc, #40]	@ (8010f40 <HAL_RCC_ClockConfig+0x368>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7f7 fc0e 	bl	800873c <HAL_InitTick>
 8010f20:	4603      	mov	r3, r0
 8010f22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8010f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3718      	adds	r7, #24
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
 8010f2e:	bf00      	nop
 8010f30:	58024400 	.word	0x58024400
 8010f34:	0801e2e8 	.word	0x0801e2e8
 8010f38:	24000008 	.word	0x24000008
 8010f3c:	24000004 	.word	0x24000004
 8010f40:	2400000c 	.word	0x2400000c

08010f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010f44:	b480      	push	{r7}
 8010f46:	b089      	sub	sp, #36	@ 0x24
 8010f48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010f4a:	4bb3      	ldr	r3, [pc, #716]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010f4c:	691b      	ldr	r3, [r3, #16]
 8010f4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010f52:	2b18      	cmp	r3, #24
 8010f54:	f200 8155 	bhi.w	8011202 <HAL_RCC_GetSysClockFreq+0x2be>
 8010f58:	a201      	add	r2, pc, #4	@ (adr r2, 8010f60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8010f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f5e:	bf00      	nop
 8010f60:	08010fc5 	.word	0x08010fc5
 8010f64:	08011203 	.word	0x08011203
 8010f68:	08011203 	.word	0x08011203
 8010f6c:	08011203 	.word	0x08011203
 8010f70:	08011203 	.word	0x08011203
 8010f74:	08011203 	.word	0x08011203
 8010f78:	08011203 	.word	0x08011203
 8010f7c:	08011203 	.word	0x08011203
 8010f80:	08010feb 	.word	0x08010feb
 8010f84:	08011203 	.word	0x08011203
 8010f88:	08011203 	.word	0x08011203
 8010f8c:	08011203 	.word	0x08011203
 8010f90:	08011203 	.word	0x08011203
 8010f94:	08011203 	.word	0x08011203
 8010f98:	08011203 	.word	0x08011203
 8010f9c:	08011203 	.word	0x08011203
 8010fa0:	08010ff1 	.word	0x08010ff1
 8010fa4:	08011203 	.word	0x08011203
 8010fa8:	08011203 	.word	0x08011203
 8010fac:	08011203 	.word	0x08011203
 8010fb0:	08011203 	.word	0x08011203
 8010fb4:	08011203 	.word	0x08011203
 8010fb8:	08011203 	.word	0x08011203
 8010fbc:	08011203 	.word	0x08011203
 8010fc0:	08010ff7 	.word	0x08010ff7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fc4:	4b94      	ldr	r3, [pc, #592]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f003 0320 	and.w	r3, r3, #32
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d009      	beq.n	8010fe4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010fd0:	4b91      	ldr	r3, [pc, #580]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	08db      	lsrs	r3, r3, #3
 8010fd6:	f003 0303 	and.w	r3, r3, #3
 8010fda:	4a90      	ldr	r2, [pc, #576]	@ (801121c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8010fe0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8010fe2:	e111      	b.n	8011208 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8010fe4:	4b8d      	ldr	r3, [pc, #564]	@ (801121c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010fe6:	61bb      	str	r3, [r7, #24]
      break;
 8010fe8:	e10e      	b.n	8011208 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8010fea:	4b8d      	ldr	r3, [pc, #564]	@ (8011220 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010fec:	61bb      	str	r3, [r7, #24]
      break;
 8010fee:	e10b      	b.n	8011208 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8010ff0:	4b8c      	ldr	r3, [pc, #560]	@ (8011224 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8010ff2:	61bb      	str	r3, [r7, #24]
      break;
 8010ff4:	e108      	b.n	8011208 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010ff6:	4b88      	ldr	r3, [pc, #544]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ffa:	f003 0303 	and.w	r3, r3, #3
 8010ffe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011000:	4b85      	ldr	r3, [pc, #532]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011004:	091b      	lsrs	r3, r3, #4
 8011006:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801100a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801100c:	4b82      	ldr	r3, [pc, #520]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801100e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011010:	f003 0301 	and.w	r3, r3, #1
 8011014:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011016:	4b80      	ldr	r3, [pc, #512]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801101a:	08db      	lsrs	r3, r3, #3
 801101c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011020:	68fa      	ldr	r2, [r7, #12]
 8011022:	fb02 f303 	mul.w	r3, r2, r3
 8011026:	ee07 3a90 	vmov	s15, r3
 801102a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801102e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	2b00      	cmp	r3, #0
 8011036:	f000 80e1 	beq.w	80111fc <HAL_RCC_GetSysClockFreq+0x2b8>
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	2b02      	cmp	r3, #2
 801103e:	f000 8083 	beq.w	8011148 <HAL_RCC_GetSysClockFreq+0x204>
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	2b02      	cmp	r3, #2
 8011046:	f200 80a1 	bhi.w	801118c <HAL_RCC_GetSysClockFreq+0x248>
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d003      	beq.n	8011058 <HAL_RCC_GetSysClockFreq+0x114>
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	2b01      	cmp	r3, #1
 8011054:	d056      	beq.n	8011104 <HAL_RCC_GetSysClockFreq+0x1c0>
 8011056:	e099      	b.n	801118c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011058:	4b6f      	ldr	r3, [pc, #444]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	f003 0320 	and.w	r3, r3, #32
 8011060:	2b00      	cmp	r3, #0
 8011062:	d02d      	beq.n	80110c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011064:	4b6c      	ldr	r3, [pc, #432]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	08db      	lsrs	r3, r3, #3
 801106a:	f003 0303 	and.w	r3, r3, #3
 801106e:	4a6b      	ldr	r2, [pc, #428]	@ (801121c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011070:	fa22 f303 	lsr.w	r3, r2, r3
 8011074:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	ee07 3a90 	vmov	s15, r3
 801107c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	ee07 3a90 	vmov	s15, r3
 8011086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801108a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801108e:	4b62      	ldr	r3, [pc, #392]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011096:	ee07 3a90 	vmov	s15, r3
 801109a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801109e:	ed97 6a02 	vldr	s12, [r7, #8]
 80110a2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011228 <HAL_RCC_GetSysClockFreq+0x2e4>
 80110a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80110b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80110be:	e087      	b.n	80111d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	ee07 3a90 	vmov	s15, r3
 80110c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110ca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801122c <HAL_RCC_GetSysClockFreq+0x2e8>
 80110ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110d2:	4b51      	ldr	r3, [pc, #324]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80110d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110da:	ee07 3a90 	vmov	s15, r3
 80110de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80110e6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011228 <HAL_RCC_GetSysClockFreq+0x2e4>
 80110ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80110f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011102:	e065      	b.n	80111d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	ee07 3a90 	vmov	s15, r3
 801110a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801110e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011230 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011116:	4b40      	ldr	r3, [pc, #256]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801111a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801111e:	ee07 3a90 	vmov	s15, r3
 8011122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011126:	ed97 6a02 	vldr	s12, [r7, #8]
 801112a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011228 <HAL_RCC_GetSysClockFreq+0x2e4>
 801112e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801113a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801113e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011142:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011146:	e043      	b.n	80111d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	ee07 3a90 	vmov	s15, r3
 801114e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011152:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011234 <HAL_RCC_GetSysClockFreq+0x2f0>
 8011156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801115a:	4b2f      	ldr	r3, [pc, #188]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801115e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011162:	ee07 3a90 	vmov	s15, r3
 8011166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801116a:	ed97 6a02 	vldr	s12, [r7, #8]
 801116e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011228 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801117a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801117e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011186:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801118a:	e021      	b.n	80111d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	ee07 3a90 	vmov	s15, r3
 8011192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011196:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011230 <HAL_RCC_GetSysClockFreq+0x2ec>
 801119a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801119e:	4b1e      	ldr	r3, [pc, #120]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80111a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111a6:	ee07 3a90 	vmov	s15, r3
 80111aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80111b2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011228 <HAL_RCC_GetSysClockFreq+0x2e4>
 80111b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80111c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80111ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80111d0:	4b11      	ldr	r3, [pc, #68]	@ (8011218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80111d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111d4:	0a5b      	lsrs	r3, r3, #9
 80111d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80111da:	3301      	adds	r3, #1
 80111dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	ee07 3a90 	vmov	s15, r3
 80111e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80111e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80111ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111f4:	ee17 3a90 	vmov	r3, s15
 80111f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80111fa:	e005      	b.n	8011208 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80111fc:	2300      	movs	r3, #0
 80111fe:	61bb      	str	r3, [r7, #24]
      break;
 8011200:	e002      	b.n	8011208 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011202:	4b07      	ldr	r3, [pc, #28]	@ (8011220 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011204:	61bb      	str	r3, [r7, #24]
      break;
 8011206:	bf00      	nop
  }

  return sysclockfreq;
 8011208:	69bb      	ldr	r3, [r7, #24]
}
 801120a:	4618      	mov	r0, r3
 801120c:	3724      	adds	r7, #36	@ 0x24
 801120e:	46bd      	mov	sp, r7
 8011210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011214:	4770      	bx	lr
 8011216:	bf00      	nop
 8011218:	58024400 	.word	0x58024400
 801121c:	03d09000 	.word	0x03d09000
 8011220:	003d0900 	.word	0x003d0900
 8011224:	016e3600 	.word	0x016e3600
 8011228:	46000000 	.word	0x46000000
 801122c:	4c742400 	.word	0x4c742400
 8011230:	4a742400 	.word	0x4a742400
 8011234:	4bb71b00 	.word	0x4bb71b00

08011238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b082      	sub	sp, #8
 801123c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801123e:	f7ff fe81 	bl	8010f44 <HAL_RCC_GetSysClockFreq>
 8011242:	4602      	mov	r2, r0
 8011244:	4b10      	ldr	r3, [pc, #64]	@ (8011288 <HAL_RCC_GetHCLKFreq+0x50>)
 8011246:	699b      	ldr	r3, [r3, #24]
 8011248:	0a1b      	lsrs	r3, r3, #8
 801124a:	f003 030f 	and.w	r3, r3, #15
 801124e:	490f      	ldr	r1, [pc, #60]	@ (801128c <HAL_RCC_GetHCLKFreq+0x54>)
 8011250:	5ccb      	ldrb	r3, [r1, r3]
 8011252:	f003 031f 	and.w	r3, r3, #31
 8011256:	fa22 f303 	lsr.w	r3, r2, r3
 801125a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801125c:	4b0a      	ldr	r3, [pc, #40]	@ (8011288 <HAL_RCC_GetHCLKFreq+0x50>)
 801125e:	699b      	ldr	r3, [r3, #24]
 8011260:	f003 030f 	and.w	r3, r3, #15
 8011264:	4a09      	ldr	r2, [pc, #36]	@ (801128c <HAL_RCC_GetHCLKFreq+0x54>)
 8011266:	5cd3      	ldrb	r3, [r2, r3]
 8011268:	f003 031f 	and.w	r3, r3, #31
 801126c:	687a      	ldr	r2, [r7, #4]
 801126e:	fa22 f303 	lsr.w	r3, r2, r3
 8011272:	4a07      	ldr	r2, [pc, #28]	@ (8011290 <HAL_RCC_GetHCLKFreq+0x58>)
 8011274:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011276:	4a07      	ldr	r2, [pc, #28]	@ (8011294 <HAL_RCC_GetHCLKFreq+0x5c>)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801127c:	4b04      	ldr	r3, [pc, #16]	@ (8011290 <HAL_RCC_GetHCLKFreq+0x58>)
 801127e:	681b      	ldr	r3, [r3, #0]
}
 8011280:	4618      	mov	r0, r3
 8011282:	3708      	adds	r7, #8
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}
 8011288:	58024400 	.word	0x58024400
 801128c:	0801e2e8 	.word	0x0801e2e8
 8011290:	24000008 	.word	0x24000008
 8011294:	24000004 	.word	0x24000004

08011298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801129c:	f7ff ffcc 	bl	8011238 <HAL_RCC_GetHCLKFreq>
 80112a0:	4602      	mov	r2, r0
 80112a2:	4b06      	ldr	r3, [pc, #24]	@ (80112bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80112a4:	69db      	ldr	r3, [r3, #28]
 80112a6:	091b      	lsrs	r3, r3, #4
 80112a8:	f003 0307 	and.w	r3, r3, #7
 80112ac:	4904      	ldr	r1, [pc, #16]	@ (80112c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80112ae:	5ccb      	ldrb	r3, [r1, r3]
 80112b0:	f003 031f 	and.w	r3, r3, #31
 80112b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	bd80      	pop	{r7, pc}
 80112bc:	58024400 	.word	0x58024400
 80112c0:	0801e2e8 	.word	0x0801e2e8

080112c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80112c8:	f7ff ffb6 	bl	8011238 <HAL_RCC_GetHCLKFreq>
 80112cc:	4602      	mov	r2, r0
 80112ce:	4b06      	ldr	r3, [pc, #24]	@ (80112e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80112d0:	69db      	ldr	r3, [r3, #28]
 80112d2:	0a1b      	lsrs	r3, r3, #8
 80112d4:	f003 0307 	and.w	r3, r3, #7
 80112d8:	4904      	ldr	r1, [pc, #16]	@ (80112ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80112da:	5ccb      	ldrb	r3, [r1, r3]
 80112dc:	f003 031f 	and.w	r3, r3, #31
 80112e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	58024400 	.word	0x58024400
 80112ec:	0801e2e8 	.word	0x0801e2e8

080112f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80112f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80112f4:	b0c6      	sub	sp, #280	@ 0x118
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80112fc:	2300      	movs	r3, #0
 80112fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011302:	2300      	movs	r3, #0
 8011304:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011310:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8011314:	2500      	movs	r5, #0
 8011316:	ea54 0305 	orrs.w	r3, r4, r5
 801131a:	d049      	beq.n	80113b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801131c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011320:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011322:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011326:	d02f      	beq.n	8011388 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8011328:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801132c:	d828      	bhi.n	8011380 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801132e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011332:	d01a      	beq.n	801136a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8011334:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011338:	d822      	bhi.n	8011380 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801133a:	2b00      	cmp	r3, #0
 801133c:	d003      	beq.n	8011346 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801133e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011342:	d007      	beq.n	8011354 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011344:	e01c      	b.n	8011380 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011346:	4bab      	ldr	r3, [pc, #684]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801134a:	4aaa      	ldr	r2, [pc, #680]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011350:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011352:	e01a      	b.n	801138a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011358:	3308      	adds	r3, #8
 801135a:	2102      	movs	r1, #2
 801135c:	4618      	mov	r0, r3
 801135e:	f002 fa49 	bl	80137f4 <RCCEx_PLL2_Config>
 8011362:	4603      	mov	r3, r0
 8011364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011368:	e00f      	b.n	801138a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801136a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801136e:	3328      	adds	r3, #40	@ 0x28
 8011370:	2102      	movs	r1, #2
 8011372:	4618      	mov	r0, r3
 8011374:	f002 faf0 	bl	8013958 <RCCEx_PLL3_Config>
 8011378:	4603      	mov	r3, r0
 801137a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801137e:	e004      	b.n	801138a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011380:	2301      	movs	r3, #1
 8011382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011386:	e000      	b.n	801138a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8011388:	bf00      	nop
    }

    if (ret == HAL_OK)
 801138a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801138e:	2b00      	cmp	r3, #0
 8011390:	d10a      	bne.n	80113a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8011392:	4b98      	ldr	r3, [pc, #608]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011396:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801139a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801139e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113a0:	4a94      	ldr	r2, [pc, #592]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80113a2:	430b      	orrs	r3, r1
 80113a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80113a6:	e003      	b.n	80113b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80113a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80113ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80113b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80113b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80113bc:	f04f 0900 	mov.w	r9, #0
 80113c0:	ea58 0309 	orrs.w	r3, r8, r9
 80113c4:	d047      	beq.n	8011456 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80113c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80113ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80113cc:	2b04      	cmp	r3, #4
 80113ce:	d82a      	bhi.n	8011426 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80113d0:	a201      	add	r2, pc, #4	@ (adr r2, 80113d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80113d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d6:	bf00      	nop
 80113d8:	080113ed 	.word	0x080113ed
 80113dc:	080113fb 	.word	0x080113fb
 80113e0:	08011411 	.word	0x08011411
 80113e4:	0801142f 	.word	0x0801142f
 80113e8:	0801142f 	.word	0x0801142f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80113ec:	4b81      	ldr	r3, [pc, #516]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80113ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113f0:	4a80      	ldr	r2, [pc, #512]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80113f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80113f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80113f8:	e01a      	b.n	8011430 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80113fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80113fe:	3308      	adds	r3, #8
 8011400:	2100      	movs	r1, #0
 8011402:	4618      	mov	r0, r3
 8011404:	f002 f9f6 	bl	80137f4 <RCCEx_PLL2_Config>
 8011408:	4603      	mov	r3, r0
 801140a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801140e:	e00f      	b.n	8011430 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011414:	3328      	adds	r3, #40	@ 0x28
 8011416:	2100      	movs	r1, #0
 8011418:	4618      	mov	r0, r3
 801141a:	f002 fa9d 	bl	8013958 <RCCEx_PLL3_Config>
 801141e:	4603      	mov	r3, r0
 8011420:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011424:	e004      	b.n	8011430 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011426:	2301      	movs	r3, #1
 8011428:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801142c:	e000      	b.n	8011430 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801142e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011434:	2b00      	cmp	r3, #0
 8011436:	d10a      	bne.n	801144e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011438:	4b6e      	ldr	r3, [pc, #440]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801143a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801143c:	f023 0107 	bic.w	r1, r3, #7
 8011440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011446:	4a6b      	ldr	r2, [pc, #428]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011448:	430b      	orrs	r3, r1
 801144a:	6513      	str	r3, [r2, #80]	@ 0x50
 801144c:	e003      	b.n	8011456 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801144e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011452:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8011456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8011462:	f04f 0b00 	mov.w	fp, #0
 8011466:	ea5a 030b 	orrs.w	r3, sl, fp
 801146a:	d05b      	beq.n	8011524 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801146c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011470:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011474:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011478:	d03b      	beq.n	80114f2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 801147a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 801147e:	d834      	bhi.n	80114ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011480:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011484:	d037      	beq.n	80114f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8011486:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801148a:	d82e      	bhi.n	80114ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801148c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011490:	d033      	beq.n	80114fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8011492:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011496:	d828      	bhi.n	80114ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011498:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801149c:	d01a      	beq.n	80114d4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 801149e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80114a2:	d822      	bhi.n	80114ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d003      	beq.n	80114b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80114a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80114ac:	d007      	beq.n	80114be <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80114ae:	e01c      	b.n	80114ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80114b0:	4b50      	ldr	r3, [pc, #320]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80114b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114b4:	4a4f      	ldr	r2, [pc, #316]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80114b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80114ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80114bc:	e01e      	b.n	80114fc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80114be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80114c2:	3308      	adds	r3, #8
 80114c4:	2100      	movs	r1, #0
 80114c6:	4618      	mov	r0, r3
 80114c8:	f002 f994 	bl	80137f4 <RCCEx_PLL2_Config>
 80114cc:	4603      	mov	r3, r0
 80114ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80114d2:	e013      	b.n	80114fc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80114d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80114d8:	3328      	adds	r3, #40	@ 0x28
 80114da:	2100      	movs	r1, #0
 80114dc:	4618      	mov	r0, r3
 80114de:	f002 fa3b 	bl	8013958 <RCCEx_PLL3_Config>
 80114e2:	4603      	mov	r3, r0
 80114e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80114e8:	e008      	b.n	80114fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80114ea:	2301      	movs	r3, #1
 80114ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80114f0:	e004      	b.n	80114fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80114f2:	bf00      	nop
 80114f4:	e002      	b.n	80114fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80114f6:	bf00      	nop
 80114f8:	e000      	b.n	80114fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80114fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80114fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011500:	2b00      	cmp	r3, #0
 8011502:	d10b      	bne.n	801151c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011504:	4b3b      	ldr	r3, [pc, #236]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011508:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801150c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011510:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011514:	4a37      	ldr	r2, [pc, #220]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011516:	430b      	orrs	r3, r1
 8011518:	6593      	str	r3, [r2, #88]	@ 0x58
 801151a:	e003      	b.n	8011524 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801151c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011520:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8011524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801152c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8011530:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8011534:	2300      	movs	r3, #0
 8011536:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801153a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801153e:	460b      	mov	r3, r1
 8011540:	4313      	orrs	r3, r2
 8011542:	d05d      	beq.n	8011600 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8011544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011548:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801154c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011550:	d03b      	beq.n	80115ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8011552:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011556:	d834      	bhi.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011558:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801155c:	d037      	beq.n	80115ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
 801155e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011562:	d82e      	bhi.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011564:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011568:	d033      	beq.n	80115d2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 801156a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801156e:	d828      	bhi.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011570:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011574:	d01a      	beq.n	80115ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8011576:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801157a:	d822      	bhi.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801157c:	2b00      	cmp	r3, #0
 801157e:	d003      	beq.n	8011588 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011584:	d007      	beq.n	8011596 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8011586:	e01c      	b.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011588:	4b1a      	ldr	r3, [pc, #104]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801158a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801158c:	4a19      	ldr	r2, [pc, #100]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801158e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011594:	e01e      	b.n	80115d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801159a:	3308      	adds	r3, #8
 801159c:	2100      	movs	r1, #0
 801159e:	4618      	mov	r0, r3
 80115a0:	f002 f928 	bl	80137f4 <RCCEx_PLL2_Config>
 80115a4:	4603      	mov	r3, r0
 80115a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80115aa:	e013      	b.n	80115d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80115ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80115b0:	3328      	adds	r3, #40	@ 0x28
 80115b2:	2100      	movs	r1, #0
 80115b4:	4618      	mov	r0, r3
 80115b6:	f002 f9cf 	bl	8013958 <RCCEx_PLL3_Config>
 80115ba:	4603      	mov	r3, r0
 80115bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80115c0:	e008      	b.n	80115d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80115c2:	2301      	movs	r3, #1
 80115c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80115c8:	e004      	b.n	80115d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80115ca:	bf00      	nop
 80115cc:	e002      	b.n	80115d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80115ce:	bf00      	nop
 80115d0:	e000      	b.n	80115d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80115d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80115d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d10d      	bne.n	80115f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80115dc:	4b05      	ldr	r3, [pc, #20]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80115de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80115e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80115e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80115ec:	4a01      	ldr	r2, [pc, #4]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80115ee:	430b      	orrs	r3, r1
 80115f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80115f2:	e005      	b.n	8011600 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80115f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80115f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80115fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8011600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011608:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801160c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8011610:	2300      	movs	r3, #0
 8011612:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8011616:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801161a:	460b      	mov	r3, r1
 801161c:	4313      	orrs	r3, r2
 801161e:	d03a      	beq.n	8011696 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8011620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011626:	2b30      	cmp	r3, #48	@ 0x30
 8011628:	d01f      	beq.n	801166a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 801162a:	2b30      	cmp	r3, #48	@ 0x30
 801162c:	d819      	bhi.n	8011662 <HAL_RCCEx_PeriphCLKConfig+0x372>
 801162e:	2b20      	cmp	r3, #32
 8011630:	d00c      	beq.n	801164c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8011632:	2b20      	cmp	r3, #32
 8011634:	d815      	bhi.n	8011662 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8011636:	2b00      	cmp	r3, #0
 8011638:	d019      	beq.n	801166e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801163a:	2b10      	cmp	r3, #16
 801163c:	d111      	bne.n	8011662 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801163e:	4baa      	ldr	r3, [pc, #680]	@ (80118e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011642:	4aa9      	ldr	r2, [pc, #676]	@ (80118e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011648:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801164a:	e011      	b.n	8011670 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801164c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011650:	3308      	adds	r3, #8
 8011652:	2102      	movs	r1, #2
 8011654:	4618      	mov	r0, r3
 8011656:	f002 f8cd 	bl	80137f4 <RCCEx_PLL2_Config>
 801165a:	4603      	mov	r3, r0
 801165c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8011660:	e006      	b.n	8011670 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8011662:	2301      	movs	r3, #1
 8011664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011668:	e002      	b.n	8011670 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801166a:	bf00      	nop
 801166c:	e000      	b.n	8011670 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801166e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011670:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011674:	2b00      	cmp	r3, #0
 8011676:	d10a      	bne.n	801168e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8011678:	4b9b      	ldr	r3, [pc, #620]	@ (80118e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801167a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801167c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8011680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011686:	4a98      	ldr	r2, [pc, #608]	@ (80118e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011688:	430b      	orrs	r3, r1
 801168a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801168c:	e003      	b.n	8011696 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801168e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011692:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801169e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80116a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80116a6:	2300      	movs	r3, #0
 80116a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80116ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80116b0:	460b      	mov	r3, r1
 80116b2:	4313      	orrs	r3, r2
 80116b4:	d051      	beq.n	801175a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80116b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80116bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80116c0:	d035      	beq.n	801172e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80116c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80116c6:	d82e      	bhi.n	8011726 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80116c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80116cc:	d031      	beq.n	8011732 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80116ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80116d2:	d828      	bhi.n	8011726 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80116d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80116d8:	d01a      	beq.n	8011710 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80116da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80116de:	d822      	bhi.n	8011726 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d003      	beq.n	80116ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80116e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80116e8:	d007      	beq.n	80116fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80116ea:	e01c      	b.n	8011726 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80116ec:	4b7e      	ldr	r3, [pc, #504]	@ (80118e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80116ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116f0:	4a7d      	ldr	r2, [pc, #500]	@ (80118e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80116f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80116f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80116f8:	e01c      	b.n	8011734 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80116fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116fe:	3308      	adds	r3, #8
 8011700:	2100      	movs	r1, #0
 8011702:	4618      	mov	r0, r3
 8011704:	f002 f876 	bl	80137f4 <RCCEx_PLL2_Config>
 8011708:	4603      	mov	r3, r0
 801170a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801170e:	e011      	b.n	8011734 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011714:	3328      	adds	r3, #40	@ 0x28
 8011716:	2100      	movs	r1, #0
 8011718:	4618      	mov	r0, r3
 801171a:	f002 f91d 	bl	8013958 <RCCEx_PLL3_Config>
 801171e:	4603      	mov	r3, r0
 8011720:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8011724:	e006      	b.n	8011734 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011726:	2301      	movs	r3, #1
 8011728:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801172c:	e002      	b.n	8011734 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801172e:	bf00      	nop
 8011730:	e000      	b.n	8011734 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8011732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011734:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011738:	2b00      	cmp	r3, #0
 801173a:	d10a      	bne.n	8011752 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801173c:	4b6a      	ldr	r3, [pc, #424]	@ (80118e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801173e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011740:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8011744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801174a:	4a67      	ldr	r2, [pc, #412]	@ (80118e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801174c:	430b      	orrs	r3, r1
 801174e:	6513      	str	r3, [r2, #80]	@ 0x50
 8011750:	e003      	b.n	801175a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011752:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011756:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801175a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011762:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8011766:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801176a:	2300      	movs	r3, #0
 801176c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011770:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8011774:	460b      	mov	r3, r1
 8011776:	4313      	orrs	r3, r2
 8011778:	d053      	beq.n	8011822 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801177a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801177e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011784:	d033      	beq.n	80117ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8011786:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801178a:	d82c      	bhi.n	80117e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801178c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011790:	d02f      	beq.n	80117f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8011792:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011796:	d826      	bhi.n	80117e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011798:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801179c:	d02b      	beq.n	80117f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 801179e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80117a2:	d820      	bhi.n	80117e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80117a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80117a8:	d012      	beq.n	80117d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80117aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80117ae:	d81a      	bhi.n	80117e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d022      	beq.n	80117fa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80117b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80117b8:	d115      	bne.n	80117e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80117ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80117be:	3308      	adds	r3, #8
 80117c0:	2101      	movs	r1, #1
 80117c2:	4618      	mov	r0, r3
 80117c4:	f002 f816 	bl	80137f4 <RCCEx_PLL2_Config>
 80117c8:	4603      	mov	r3, r0
 80117ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80117ce:	e015      	b.n	80117fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80117d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80117d4:	3328      	adds	r3, #40	@ 0x28
 80117d6:	2101      	movs	r1, #1
 80117d8:	4618      	mov	r0, r3
 80117da:	f002 f8bd 	bl	8013958 <RCCEx_PLL3_Config>
 80117de:	4603      	mov	r3, r0
 80117e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80117e4:	e00a      	b.n	80117fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80117e6:	2301      	movs	r3, #1
 80117e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80117ec:	e006      	b.n	80117fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80117ee:	bf00      	nop
 80117f0:	e004      	b.n	80117fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80117f2:	bf00      	nop
 80117f4:	e002      	b.n	80117fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80117f6:	bf00      	nop
 80117f8:	e000      	b.n	80117fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80117fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80117fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011800:	2b00      	cmp	r3, #0
 8011802:	d10a      	bne.n	801181a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8011804:	4b38      	ldr	r3, [pc, #224]	@ (80118e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011808:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801180c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011812:	4a35      	ldr	r2, [pc, #212]	@ (80118e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011814:	430b      	orrs	r3, r1
 8011816:	6513      	str	r3, [r2, #80]	@ 0x50
 8011818:	e003      	b.n	8011822 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801181a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801181e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8011822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801182e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011832:	2300      	movs	r3, #0
 8011834:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8011838:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801183c:	460b      	mov	r3, r1
 801183e:	4313      	orrs	r3, r2
 8011840:	d058      	beq.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8011842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011846:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801184a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801184e:	d033      	beq.n	80118b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8011850:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011854:	d82c      	bhi.n	80118b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801185a:	d02f      	beq.n	80118bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 801185c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011860:	d826      	bhi.n	80118b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011862:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011866:	d02b      	beq.n	80118c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8011868:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801186c:	d820      	bhi.n	80118b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801186e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011872:	d012      	beq.n	801189a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8011874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011878:	d81a      	bhi.n	80118b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801187a:	2b00      	cmp	r3, #0
 801187c:	d022      	beq.n	80118c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801187e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011882:	d115      	bne.n	80118b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011888:	3308      	adds	r3, #8
 801188a:	2101      	movs	r1, #1
 801188c:	4618      	mov	r0, r3
 801188e:	f001 ffb1 	bl	80137f4 <RCCEx_PLL2_Config>
 8011892:	4603      	mov	r3, r0
 8011894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8011898:	e015      	b.n	80118c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801189a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801189e:	3328      	adds	r3, #40	@ 0x28
 80118a0:	2101      	movs	r1, #1
 80118a2:	4618      	mov	r0, r3
 80118a4:	f002 f858 	bl	8013958 <RCCEx_PLL3_Config>
 80118a8:	4603      	mov	r3, r0
 80118aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80118ae:	e00a      	b.n	80118c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80118b0:	2301      	movs	r3, #1
 80118b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80118b6:	e006      	b.n	80118c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80118b8:	bf00      	nop
 80118ba:	e004      	b.n	80118c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80118bc:	bf00      	nop
 80118be:	e002      	b.n	80118c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80118c0:	bf00      	nop
 80118c2:	e000      	b.n	80118c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80118c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80118c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d10e      	bne.n	80118ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80118ce:	4b06      	ldr	r3, [pc, #24]	@ (80118e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80118d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80118d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80118da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80118de:	4a02      	ldr	r2, [pc, #8]	@ (80118e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80118e0:	430b      	orrs	r3, r1
 80118e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80118e4:	e006      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80118e6:	bf00      	nop
 80118e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80118ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80118f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80118f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80118f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8011900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011904:	2300      	movs	r3, #0
 8011906:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801190a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801190e:	460b      	mov	r3, r1
 8011910:	4313      	orrs	r3, r2
 8011912:	d037      	beq.n	8011984 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8011914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801191a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801191e:	d00e      	beq.n	801193e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8011920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011924:	d816      	bhi.n	8011954 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8011926:	2b00      	cmp	r3, #0
 8011928:	d018      	beq.n	801195c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801192a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801192e:	d111      	bne.n	8011954 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011930:	4bc4      	ldr	r3, [pc, #784]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011934:	4ac3      	ldr	r2, [pc, #780]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801193a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801193c:	e00f      	b.n	801195e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801193e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011942:	3308      	adds	r3, #8
 8011944:	2101      	movs	r1, #1
 8011946:	4618      	mov	r0, r3
 8011948:	f001 ff54 	bl	80137f4 <RCCEx_PLL2_Config>
 801194c:	4603      	mov	r3, r0
 801194e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8011952:	e004      	b.n	801195e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011954:	2301      	movs	r3, #1
 8011956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801195a:	e000      	b.n	801195e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 801195c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801195e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011962:	2b00      	cmp	r3, #0
 8011964:	d10a      	bne.n	801197c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8011966:	4bb7      	ldr	r3, [pc, #732]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801196a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801196e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011974:	4ab3      	ldr	r2, [pc, #716]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011976:	430b      	orrs	r3, r1
 8011978:	6513      	str	r3, [r2, #80]	@ 0x50
 801197a:	e003      	b.n	8011984 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801197c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011980:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8011984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801198c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8011990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011994:	2300      	movs	r3, #0
 8011996:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801199a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801199e:	460b      	mov	r3, r1
 80119a0:	4313      	orrs	r3, r2
 80119a2:	d039      	beq.n	8011a18 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80119a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80119a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80119aa:	2b03      	cmp	r3, #3
 80119ac:	d81c      	bhi.n	80119e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80119ae:	a201      	add	r2, pc, #4	@ (adr r2, 80119b4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80119b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b4:	080119f1 	.word	0x080119f1
 80119b8:	080119c5 	.word	0x080119c5
 80119bc:	080119d3 	.word	0x080119d3
 80119c0:	080119f1 	.word	0x080119f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80119c4:	4b9f      	ldr	r3, [pc, #636]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80119c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119c8:	4a9e      	ldr	r2, [pc, #632]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80119ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80119ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80119d0:	e00f      	b.n	80119f2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80119d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80119d6:	3308      	adds	r3, #8
 80119d8:	2102      	movs	r1, #2
 80119da:	4618      	mov	r0, r3
 80119dc:	f001 ff0a 	bl	80137f4 <RCCEx_PLL2_Config>
 80119e0:	4603      	mov	r3, r0
 80119e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80119e6:	e004      	b.n	80119f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80119e8:	2301      	movs	r3, #1
 80119ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80119ee:	e000      	b.n	80119f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80119f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80119f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d10a      	bne.n	8011a10 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80119fa:	4b92      	ldr	r3, [pc, #584]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80119fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80119fe:	f023 0103 	bic.w	r1, r3, #3
 8011a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a08:	4a8e      	ldr	r2, [pc, #568]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011a0a:	430b      	orrs	r3, r1
 8011a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011a0e:	e003      	b.n	8011a18 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011a14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8011a24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011a28:	2300      	movs	r3, #0
 8011a2a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011a2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011a32:	460b      	mov	r3, r1
 8011a34:	4313      	orrs	r3, r2
 8011a36:	f000 8099 	beq.w	8011b6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011a3a:	4b83      	ldr	r3, [pc, #524]	@ (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	4a82      	ldr	r2, [pc, #520]	@ (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011a44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011a46:	f7f6 fec3 	bl	80087d0 <HAL_GetTick>
 8011a4a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011a4e:	e00b      	b.n	8011a68 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011a50:	f7f6 febe 	bl	80087d0 <HAL_GetTick>
 8011a54:	4602      	mov	r2, r0
 8011a56:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8011a5a:	1ad3      	subs	r3, r2, r3
 8011a5c:	2b64      	cmp	r3, #100	@ 0x64
 8011a5e:	d903      	bls.n	8011a68 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8011a60:	2303      	movs	r3, #3
 8011a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011a66:	e005      	b.n	8011a74 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011a68:	4b77      	ldr	r3, [pc, #476]	@ (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d0ed      	beq.n	8011a50 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8011a74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d173      	bne.n	8011b64 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011a7c:	4b71      	ldr	r3, [pc, #452]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011a7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011a88:	4053      	eors	r3, r2
 8011a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d015      	beq.n	8011abe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011a92:	4b6c      	ldr	r3, [pc, #432]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011a9a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011a9e:	4b69      	ldr	r3, [pc, #420]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011aa2:	4a68      	ldr	r2, [pc, #416]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011aa8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011aaa:	4b66      	ldr	r3, [pc, #408]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011aae:	4a65      	ldr	r2, [pc, #404]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011ab4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8011ab6:	4a63      	ldr	r2, [pc, #396]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011abc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8011abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ac2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011aca:	d118      	bne.n	8011afe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011acc:	f7f6 fe80 	bl	80087d0 <HAL_GetTick>
 8011ad0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011ad4:	e00d      	b.n	8011af2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011ad6:	f7f6 fe7b 	bl	80087d0 <HAL_GetTick>
 8011ada:	4602      	mov	r2, r0
 8011adc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8011ae0:	1ad2      	subs	r2, r2, r3
 8011ae2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d903      	bls.n	8011af2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8011aea:	2303      	movs	r3, #3
 8011aec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8011af0:	e005      	b.n	8011afe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011af2:	4b54      	ldr	r3, [pc, #336]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011af6:	f003 0302 	and.w	r3, r3, #2
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d0eb      	beq.n	8011ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8011afe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d129      	bne.n	8011b5a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011b12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011b16:	d10e      	bne.n	8011b36 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8011b18:	4b4a      	ldr	r3, [pc, #296]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011b1a:	691b      	ldr	r3, [r3, #16]
 8011b1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8011b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011b28:	091a      	lsrs	r2, r3, #4
 8011b2a:	4b48      	ldr	r3, [pc, #288]	@ (8011c4c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8011b2c:	4013      	ands	r3, r2
 8011b2e:	4a45      	ldr	r2, [pc, #276]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011b30:	430b      	orrs	r3, r1
 8011b32:	6113      	str	r3, [r2, #16]
 8011b34:	e005      	b.n	8011b42 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8011b36:	4b43      	ldr	r3, [pc, #268]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011b38:	691b      	ldr	r3, [r3, #16]
 8011b3a:	4a42      	ldr	r2, [pc, #264]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011b3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011b40:	6113      	str	r3, [r2, #16]
 8011b42:	4b40      	ldr	r3, [pc, #256]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011b44:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011b52:	4a3c      	ldr	r2, [pc, #240]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011b54:	430b      	orrs	r3, r1
 8011b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8011b58:	e008      	b.n	8011b6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011b5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011b5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8011b62:	e003      	b.n	8011b6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011b68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8011b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b74:	f002 0301 	and.w	r3, r2, #1
 8011b78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011b82:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8011b86:	460b      	mov	r3, r1
 8011b88:	4313      	orrs	r3, r2
 8011b8a:	f000 808f 	beq.w	8011cac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8011b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b94:	2b28      	cmp	r3, #40	@ 0x28
 8011b96:	d871      	bhi.n	8011c7c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8011b98:	a201      	add	r2, pc, #4	@ (adr r2, 8011ba0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8011b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b9e:	bf00      	nop
 8011ba0:	08011c85 	.word	0x08011c85
 8011ba4:	08011c7d 	.word	0x08011c7d
 8011ba8:	08011c7d 	.word	0x08011c7d
 8011bac:	08011c7d 	.word	0x08011c7d
 8011bb0:	08011c7d 	.word	0x08011c7d
 8011bb4:	08011c7d 	.word	0x08011c7d
 8011bb8:	08011c7d 	.word	0x08011c7d
 8011bbc:	08011c7d 	.word	0x08011c7d
 8011bc0:	08011c51 	.word	0x08011c51
 8011bc4:	08011c7d 	.word	0x08011c7d
 8011bc8:	08011c7d 	.word	0x08011c7d
 8011bcc:	08011c7d 	.word	0x08011c7d
 8011bd0:	08011c7d 	.word	0x08011c7d
 8011bd4:	08011c7d 	.word	0x08011c7d
 8011bd8:	08011c7d 	.word	0x08011c7d
 8011bdc:	08011c7d 	.word	0x08011c7d
 8011be0:	08011c67 	.word	0x08011c67
 8011be4:	08011c7d 	.word	0x08011c7d
 8011be8:	08011c7d 	.word	0x08011c7d
 8011bec:	08011c7d 	.word	0x08011c7d
 8011bf0:	08011c7d 	.word	0x08011c7d
 8011bf4:	08011c7d 	.word	0x08011c7d
 8011bf8:	08011c7d 	.word	0x08011c7d
 8011bfc:	08011c7d 	.word	0x08011c7d
 8011c00:	08011c85 	.word	0x08011c85
 8011c04:	08011c7d 	.word	0x08011c7d
 8011c08:	08011c7d 	.word	0x08011c7d
 8011c0c:	08011c7d 	.word	0x08011c7d
 8011c10:	08011c7d 	.word	0x08011c7d
 8011c14:	08011c7d 	.word	0x08011c7d
 8011c18:	08011c7d 	.word	0x08011c7d
 8011c1c:	08011c7d 	.word	0x08011c7d
 8011c20:	08011c85 	.word	0x08011c85
 8011c24:	08011c7d 	.word	0x08011c7d
 8011c28:	08011c7d 	.word	0x08011c7d
 8011c2c:	08011c7d 	.word	0x08011c7d
 8011c30:	08011c7d 	.word	0x08011c7d
 8011c34:	08011c7d 	.word	0x08011c7d
 8011c38:	08011c7d 	.word	0x08011c7d
 8011c3c:	08011c7d 	.word	0x08011c7d
 8011c40:	08011c85 	.word	0x08011c85
 8011c44:	58024400 	.word	0x58024400
 8011c48:	58024800 	.word	0x58024800
 8011c4c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c54:	3308      	adds	r3, #8
 8011c56:	2101      	movs	r1, #1
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f001 fdcb 	bl	80137f4 <RCCEx_PLL2_Config>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8011c64:	e00f      	b.n	8011c86 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c6a:	3328      	adds	r3, #40	@ 0x28
 8011c6c:	2101      	movs	r1, #1
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f001 fe72 	bl	8013958 <RCCEx_PLL3_Config>
 8011c74:	4603      	mov	r3, r0
 8011c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8011c7a:	e004      	b.n	8011c86 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011c82:	e000      	b.n	8011c86 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8011c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011c86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d10a      	bne.n	8011ca4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8011c8e:	4bbf      	ldr	r3, [pc, #764]	@ (8011f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c92:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8011c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011c9c:	4abb      	ldr	r2, [pc, #748]	@ (8011f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011c9e:	430b      	orrs	r3, r1
 8011ca0:	6553      	str	r3, [r2, #84]	@ 0x54
 8011ca2:	e003      	b.n	8011cac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ca8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8011cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb4:	f002 0302 	and.w	r3, r2, #2
 8011cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011cc2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	4313      	orrs	r3, r2
 8011cca:	d041      	beq.n	8011d50 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8011ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011cd2:	2b05      	cmp	r3, #5
 8011cd4:	d824      	bhi.n	8011d20 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8011cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8011cdc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8011cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cdc:	08011d29 	.word	0x08011d29
 8011ce0:	08011cf5 	.word	0x08011cf5
 8011ce4:	08011d0b 	.word	0x08011d0b
 8011ce8:	08011d29 	.word	0x08011d29
 8011cec:	08011d29 	.word	0x08011d29
 8011cf0:	08011d29 	.word	0x08011d29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cf8:	3308      	adds	r3, #8
 8011cfa:	2101      	movs	r1, #1
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f001 fd79 	bl	80137f4 <RCCEx_PLL2_Config>
 8011d02:	4603      	mov	r3, r0
 8011d04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8011d08:	e00f      	b.n	8011d2a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d0e:	3328      	adds	r3, #40	@ 0x28
 8011d10:	2101      	movs	r1, #1
 8011d12:	4618      	mov	r0, r3
 8011d14:	f001 fe20 	bl	8013958 <RCCEx_PLL3_Config>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8011d1e:	e004      	b.n	8011d2a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011d20:	2301      	movs	r3, #1
 8011d22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011d26:	e000      	b.n	8011d2a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8011d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d10a      	bne.n	8011d48 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8011d32:	4b96      	ldr	r3, [pc, #600]	@ (8011f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d36:	f023 0107 	bic.w	r1, r3, #7
 8011d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d40:	4a92      	ldr	r2, [pc, #584]	@ (8011f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011d42:	430b      	orrs	r3, r1
 8011d44:	6553      	str	r3, [r2, #84]	@ 0x54
 8011d46:	e003      	b.n	8011d50 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d58:	f002 0304 	and.w	r3, r2, #4
 8011d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011d60:	2300      	movs	r3, #0
 8011d62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011d66:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	4313      	orrs	r3, r2
 8011d6e:	d044      	beq.n	8011dfa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8011d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011d78:	2b05      	cmp	r3, #5
 8011d7a:	d825      	bhi.n	8011dc8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8011d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8011d84 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8011d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d82:	bf00      	nop
 8011d84:	08011dd1 	.word	0x08011dd1
 8011d88:	08011d9d 	.word	0x08011d9d
 8011d8c:	08011db3 	.word	0x08011db3
 8011d90:	08011dd1 	.word	0x08011dd1
 8011d94:	08011dd1 	.word	0x08011dd1
 8011d98:	08011dd1 	.word	0x08011dd1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011da0:	3308      	adds	r3, #8
 8011da2:	2101      	movs	r1, #1
 8011da4:	4618      	mov	r0, r3
 8011da6:	f001 fd25 	bl	80137f4 <RCCEx_PLL2_Config>
 8011daa:	4603      	mov	r3, r0
 8011dac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8011db0:	e00f      	b.n	8011dd2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011db6:	3328      	adds	r3, #40	@ 0x28
 8011db8:	2101      	movs	r1, #1
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f001 fdcc 	bl	8013958 <RCCEx_PLL3_Config>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8011dc6:	e004      	b.n	8011dd2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011dc8:	2301      	movs	r3, #1
 8011dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011dce:	e000      	b.n	8011dd2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8011dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011dd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d10b      	bne.n	8011df2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011dda:	4b6c      	ldr	r3, [pc, #432]	@ (8011f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011dde:	f023 0107 	bic.w	r1, r3, #7
 8011de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011dea:	4a68      	ldr	r2, [pc, #416]	@ (8011f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011dec:	430b      	orrs	r3, r1
 8011dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8011df0:	e003      	b.n	8011dfa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011df2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011df6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e02:	f002 0320 	and.w	r3, r2, #32
 8011e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011e10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8011e14:	460b      	mov	r3, r1
 8011e16:	4313      	orrs	r3, r2
 8011e18:	d055      	beq.n	8011ec6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8011e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011e26:	d033      	beq.n	8011e90 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8011e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011e2c:	d82c      	bhi.n	8011e88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8011e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e32:	d02f      	beq.n	8011e94 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8011e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e38:	d826      	bhi.n	8011e88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8011e3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011e3e:	d02b      	beq.n	8011e98 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8011e40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011e44:	d820      	bhi.n	8011e88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8011e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011e4a:	d012      	beq.n	8011e72 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8011e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011e50:	d81a      	bhi.n	8011e88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d022      	beq.n	8011e9c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8011e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011e5a:	d115      	bne.n	8011e88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e60:	3308      	adds	r3, #8
 8011e62:	2100      	movs	r1, #0
 8011e64:	4618      	mov	r0, r3
 8011e66:	f001 fcc5 	bl	80137f4 <RCCEx_PLL2_Config>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8011e70:	e015      	b.n	8011e9e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e76:	3328      	adds	r3, #40	@ 0x28
 8011e78:	2102      	movs	r1, #2
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f001 fd6c 	bl	8013958 <RCCEx_PLL3_Config>
 8011e80:	4603      	mov	r3, r0
 8011e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8011e86:	e00a      	b.n	8011e9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011e88:	2301      	movs	r3, #1
 8011e8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011e8e:	e006      	b.n	8011e9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8011e90:	bf00      	nop
 8011e92:	e004      	b.n	8011e9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8011e94:	bf00      	nop
 8011e96:	e002      	b.n	8011e9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8011e98:	bf00      	nop
 8011e9a:	e000      	b.n	8011e9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8011e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011e9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d10b      	bne.n	8011ebe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011ea6:	4b39      	ldr	r3, [pc, #228]	@ (8011f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011eaa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8011eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011eb6:	4a35      	ldr	r2, [pc, #212]	@ (8011f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011eb8:	430b      	orrs	r3, r1
 8011eba:	6553      	str	r3, [r2, #84]	@ 0x54
 8011ebc:	e003      	b.n	8011ec6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ebe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ec2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8011ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ece:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8011ed2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011edc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8011ee0:	460b      	mov	r3, r1
 8011ee2:	4313      	orrs	r3, r2
 8011ee4:	d058      	beq.n	8011f98 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8011ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011eee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8011ef2:	d033      	beq.n	8011f5c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8011ef4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8011ef8:	d82c      	bhi.n	8011f54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011efe:	d02f      	beq.n	8011f60 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8011f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011f04:	d826      	bhi.n	8011f54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011f06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011f0a:	d02b      	beq.n	8011f64 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8011f0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011f10:	d820      	bhi.n	8011f54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011f16:	d012      	beq.n	8011f3e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8011f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011f1c:	d81a      	bhi.n	8011f54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d022      	beq.n	8011f68 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8011f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011f26:	d115      	bne.n	8011f54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f2c:	3308      	adds	r3, #8
 8011f2e:	2100      	movs	r1, #0
 8011f30:	4618      	mov	r0, r3
 8011f32:	f001 fc5f 	bl	80137f4 <RCCEx_PLL2_Config>
 8011f36:	4603      	mov	r3, r0
 8011f38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8011f3c:	e015      	b.n	8011f6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f42:	3328      	adds	r3, #40	@ 0x28
 8011f44:	2102      	movs	r1, #2
 8011f46:	4618      	mov	r0, r3
 8011f48:	f001 fd06 	bl	8013958 <RCCEx_PLL3_Config>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8011f52:	e00a      	b.n	8011f6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011f54:	2301      	movs	r3, #1
 8011f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011f5a:	e006      	b.n	8011f6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8011f5c:	bf00      	nop
 8011f5e:	e004      	b.n	8011f6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8011f60:	bf00      	nop
 8011f62:	e002      	b.n	8011f6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8011f64:	bf00      	nop
 8011f66:	e000      	b.n	8011f6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8011f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011f6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d10e      	bne.n	8011f90 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011f72:	4b06      	ldr	r3, [pc, #24]	@ (8011f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f76:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8011f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011f82:	4a02      	ldr	r2, [pc, #8]	@ (8011f8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011f84:	430b      	orrs	r3, r1
 8011f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8011f88:	e006      	b.n	8011f98 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8011f8a:	bf00      	nop
 8011f8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8011f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8011fa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011fa8:	2300      	movs	r3, #0
 8011faa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011fae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	4313      	orrs	r3, r2
 8011fb6:	d055      	beq.n	8012064 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8011fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011fc0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8011fc4:	d033      	beq.n	801202e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8011fc6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8011fca:	d82c      	bhi.n	8012026 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011fd0:	d02f      	beq.n	8012032 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8011fd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011fd6:	d826      	bhi.n	8012026 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011fd8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8011fdc:	d02b      	beq.n	8012036 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8011fde:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8011fe2:	d820      	bhi.n	8012026 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011fe4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011fe8:	d012      	beq.n	8012010 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8011fea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011fee:	d81a      	bhi.n	8012026 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d022      	beq.n	801203a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8011ff4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011ff8:	d115      	bne.n	8012026 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ffe:	3308      	adds	r3, #8
 8012000:	2100      	movs	r1, #0
 8012002:	4618      	mov	r0, r3
 8012004:	f001 fbf6 	bl	80137f4 <RCCEx_PLL2_Config>
 8012008:	4603      	mov	r3, r0
 801200a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801200e:	e015      	b.n	801203c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012014:	3328      	adds	r3, #40	@ 0x28
 8012016:	2102      	movs	r1, #2
 8012018:	4618      	mov	r0, r3
 801201a:	f001 fc9d 	bl	8013958 <RCCEx_PLL3_Config>
 801201e:	4603      	mov	r3, r0
 8012020:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012024:	e00a      	b.n	801203c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012026:	2301      	movs	r3, #1
 8012028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801202c:	e006      	b.n	801203c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801202e:	bf00      	nop
 8012030:	e004      	b.n	801203c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012032:	bf00      	nop
 8012034:	e002      	b.n	801203c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012036:	bf00      	nop
 8012038:	e000      	b.n	801203c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801203a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801203c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012040:	2b00      	cmp	r3, #0
 8012042:	d10b      	bne.n	801205c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012044:	4ba0      	ldr	r3, [pc, #640]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012048:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801204c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012050:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012054:	4a9c      	ldr	r2, [pc, #624]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012056:	430b      	orrs	r3, r1
 8012058:	6593      	str	r3, [r2, #88]	@ 0x58
 801205a:	e003      	b.n	8012064 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801205c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8012064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206c:	f002 0308 	and.w	r3, r2, #8
 8012070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012074:	2300      	movs	r3, #0
 8012076:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801207a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801207e:	460b      	mov	r3, r1
 8012080:	4313      	orrs	r3, r2
 8012082:	d01e      	beq.n	80120c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8012084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801208c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012090:	d10c      	bne.n	80120ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012096:	3328      	adds	r3, #40	@ 0x28
 8012098:	2102      	movs	r1, #2
 801209a:	4618      	mov	r0, r3
 801209c:	f001 fc5c 	bl	8013958 <RCCEx_PLL3_Config>
 80120a0:	4603      	mov	r3, r0
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d002      	beq.n	80120ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80120a6:	2301      	movs	r3, #1
 80120a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80120ac:	4b86      	ldr	r3, [pc, #536]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80120ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80120b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80120b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80120bc:	4a82      	ldr	r2, [pc, #520]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80120be:	430b      	orrs	r3, r1
 80120c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80120c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ca:	f002 0310 	and.w	r3, r2, #16
 80120ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80120d2:	2300      	movs	r3, #0
 80120d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80120d8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80120dc:	460b      	mov	r3, r1
 80120de:	4313      	orrs	r3, r2
 80120e0:	d01e      	beq.n	8012120 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80120e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80120ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80120ee:	d10c      	bne.n	801210a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80120f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120f4:	3328      	adds	r3, #40	@ 0x28
 80120f6:	2102      	movs	r1, #2
 80120f8:	4618      	mov	r0, r3
 80120fa:	f001 fc2d 	bl	8013958 <RCCEx_PLL3_Config>
 80120fe:	4603      	mov	r3, r0
 8012100:	2b00      	cmp	r3, #0
 8012102:	d002      	beq.n	801210a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012104:	2301      	movs	r3, #1
 8012106:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801210a:	4b6f      	ldr	r3, [pc, #444]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801210c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801210e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801211a:	4a6b      	ldr	r2, [pc, #428]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801211c:	430b      	orrs	r3, r1
 801211e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012128:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801212c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801212e:	2300      	movs	r3, #0
 8012130:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012132:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012136:	460b      	mov	r3, r1
 8012138:	4313      	orrs	r3, r2
 801213a:	d03e      	beq.n	80121ba <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801213c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012140:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012148:	d022      	beq.n	8012190 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 801214a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801214e:	d81b      	bhi.n	8012188 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012150:	2b00      	cmp	r3, #0
 8012152:	d003      	beq.n	801215c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012158:	d00b      	beq.n	8012172 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 801215a:	e015      	b.n	8012188 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801215c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012160:	3308      	adds	r3, #8
 8012162:	2100      	movs	r1, #0
 8012164:	4618      	mov	r0, r3
 8012166:	f001 fb45 	bl	80137f4 <RCCEx_PLL2_Config>
 801216a:	4603      	mov	r3, r0
 801216c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012170:	e00f      	b.n	8012192 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012176:	3328      	adds	r3, #40	@ 0x28
 8012178:	2102      	movs	r1, #2
 801217a:	4618      	mov	r0, r3
 801217c:	f001 fbec 	bl	8013958 <RCCEx_PLL3_Config>
 8012180:	4603      	mov	r3, r0
 8012182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012186:	e004      	b.n	8012192 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012188:	2301      	movs	r3, #1
 801218a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801218e:	e000      	b.n	8012192 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012192:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012196:	2b00      	cmp	r3, #0
 8012198:	d10b      	bne.n	80121b2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801219a:	4b4b      	ldr	r3, [pc, #300]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801219e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80121a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80121aa:	4a47      	ldr	r2, [pc, #284]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80121ac:	430b      	orrs	r3, r1
 80121ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80121b0:	e003      	b.n	80121ba <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80121b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80121ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80121c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80121c8:	2300      	movs	r3, #0
 80121ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80121cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80121d0:	460b      	mov	r3, r1
 80121d2:	4313      	orrs	r3, r2
 80121d4:	d03b      	beq.n	801224e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80121d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80121de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80121e2:	d01f      	beq.n	8012224 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80121e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80121e8:	d818      	bhi.n	801221c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80121ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80121ee:	d003      	beq.n	80121f8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80121f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80121f4:	d007      	beq.n	8012206 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80121f6:	e011      	b.n	801221c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80121f8:	4b33      	ldr	r3, [pc, #204]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80121fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121fc:	4a32      	ldr	r2, [pc, #200]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80121fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012204:	e00f      	b.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801220a:	3328      	adds	r3, #40	@ 0x28
 801220c:	2101      	movs	r1, #1
 801220e:	4618      	mov	r0, r3
 8012210:	f001 fba2 	bl	8013958 <RCCEx_PLL3_Config>
 8012214:	4603      	mov	r3, r0
 8012216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 801221a:	e004      	b.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801221c:	2301      	movs	r3, #1
 801221e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012222:	e000      	b.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8012224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012226:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801222a:	2b00      	cmp	r3, #0
 801222c:	d10b      	bne.n	8012246 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801222e:	4b26      	ldr	r3, [pc, #152]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012232:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801223a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801223e:	4a22      	ldr	r2, [pc, #136]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012240:	430b      	orrs	r3, r1
 8012242:	6553      	str	r3, [r2, #84]	@ 0x54
 8012244:	e003      	b.n	801224e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012246:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801224a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801224e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012256:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801225a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801225c:	2300      	movs	r3, #0
 801225e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012260:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8012264:	460b      	mov	r3, r1
 8012266:	4313      	orrs	r3, r2
 8012268:	d034      	beq.n	80122d4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801226a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801226e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012270:	2b00      	cmp	r3, #0
 8012272:	d003      	beq.n	801227c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8012274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012278:	d007      	beq.n	801228a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 801227a:	e011      	b.n	80122a0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801227c:	4b12      	ldr	r3, [pc, #72]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012280:	4a11      	ldr	r2, [pc, #68]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012286:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012288:	e00e      	b.n	80122a8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801228a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801228e:	3308      	adds	r3, #8
 8012290:	2102      	movs	r1, #2
 8012292:	4618      	mov	r0, r3
 8012294:	f001 faae 	bl	80137f4 <RCCEx_PLL2_Config>
 8012298:	4603      	mov	r3, r0
 801229a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801229e:	e003      	b.n	80122a8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80122a0:	2301      	movs	r3, #1
 80122a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80122a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80122a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d10d      	bne.n	80122cc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80122b0:	4b05      	ldr	r3, [pc, #20]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80122b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80122b4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80122b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80122be:	4a02      	ldr	r2, [pc, #8]	@ (80122c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80122c0:	430b      	orrs	r3, r1
 80122c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80122c4:	e006      	b.n	80122d4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80122c6:	bf00      	nop
 80122c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80122d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80122e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80122e2:	2300      	movs	r3, #0
 80122e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80122e6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80122ea:	460b      	mov	r3, r1
 80122ec:	4313      	orrs	r3, r2
 80122ee:	d00c      	beq.n	801230a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80122f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122f4:	3328      	adds	r3, #40	@ 0x28
 80122f6:	2102      	movs	r1, #2
 80122f8:	4618      	mov	r0, r3
 80122fa:	f001 fb2d 	bl	8013958 <RCCEx_PLL3_Config>
 80122fe:	4603      	mov	r3, r0
 8012300:	2b00      	cmp	r3, #0
 8012302:	d002      	beq.n	801230a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8012304:	2301      	movs	r3, #1
 8012306:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801230a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012312:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8012316:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012318:	2300      	movs	r3, #0
 801231a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801231c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8012320:	460b      	mov	r3, r1
 8012322:	4313      	orrs	r3, r2
 8012324:	d036      	beq.n	8012394 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8012326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801232a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801232c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012330:	d018      	beq.n	8012364 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8012332:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012336:	d811      	bhi.n	801235c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801233c:	d014      	beq.n	8012368 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 801233e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012342:	d80b      	bhi.n	801235c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012344:	2b00      	cmp	r3, #0
 8012346:	d011      	beq.n	801236c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8012348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801234c:	d106      	bne.n	801235c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801234e:	4bb7      	ldr	r3, [pc, #732]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012352:	4ab6      	ldr	r2, [pc, #728]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012358:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801235a:	e008      	b.n	801236e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801235c:	2301      	movs	r3, #1
 801235e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012362:	e004      	b.n	801236e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012364:	bf00      	nop
 8012366:	e002      	b.n	801236e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012368:	bf00      	nop
 801236a:	e000      	b.n	801236e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801236c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801236e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012372:	2b00      	cmp	r3, #0
 8012374:	d10a      	bne.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8012376:	4bad      	ldr	r3, [pc, #692]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801237a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801237e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012384:	4aa9      	ldr	r2, [pc, #676]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012386:	430b      	orrs	r3, r1
 8012388:	6553      	str	r3, [r2, #84]	@ 0x54
 801238a:	e003      	b.n	8012394 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801238c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012390:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8012394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801239c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80123a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80123a2:	2300      	movs	r3, #0
 80123a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80123a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80123aa:	460b      	mov	r3, r1
 80123ac:	4313      	orrs	r3, r2
 80123ae:	d009      	beq.n	80123c4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80123b0:	4b9e      	ldr	r3, [pc, #632]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80123b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80123b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80123b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123be:	4a9b      	ldr	r2, [pc, #620]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80123c0:	430b      	orrs	r3, r1
 80123c2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80123c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123cc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80123d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80123d2:	2300      	movs	r3, #0
 80123d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80123d6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80123da:	460b      	mov	r3, r1
 80123dc:	4313      	orrs	r3, r2
 80123de:	d009      	beq.n	80123f4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80123e0:	4b92      	ldr	r3, [pc, #584]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80123e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80123e4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80123e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80123ee:	4a8f      	ldr	r2, [pc, #572]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80123f0:	430b      	orrs	r3, r1
 80123f2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80123f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8012400:	643b      	str	r3, [r7, #64]	@ 0x40
 8012402:	2300      	movs	r3, #0
 8012404:	647b      	str	r3, [r7, #68]	@ 0x44
 8012406:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801240a:	460b      	mov	r3, r1
 801240c:	4313      	orrs	r3, r2
 801240e:	d00e      	beq.n	801242e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012410:	4b86      	ldr	r3, [pc, #536]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012412:	691b      	ldr	r3, [r3, #16]
 8012414:	4a85      	ldr	r2, [pc, #532]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012416:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801241a:	6113      	str	r3, [r2, #16]
 801241c:	4b83      	ldr	r3, [pc, #524]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801241e:	6919      	ldr	r1, [r3, #16]
 8012420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012424:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012428:	4a80      	ldr	r2, [pc, #512]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801242a:	430b      	orrs	r3, r1
 801242c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801242e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012436:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801243a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801243c:	2300      	movs	r3, #0
 801243e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012440:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8012444:	460b      	mov	r3, r1
 8012446:	4313      	orrs	r3, r2
 8012448:	d009      	beq.n	801245e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801244a:	4b78      	ldr	r3, [pc, #480]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801244c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801244e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012458:	4a74      	ldr	r2, [pc, #464]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801245a:	430b      	orrs	r3, r1
 801245c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801245e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012466:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801246a:	633b      	str	r3, [r7, #48]	@ 0x30
 801246c:	2300      	movs	r3, #0
 801246e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012470:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8012474:	460b      	mov	r3, r1
 8012476:	4313      	orrs	r3, r2
 8012478:	d00a      	beq.n	8012490 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801247a:	4b6c      	ldr	r3, [pc, #432]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801247c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801247e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8012482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801248a:	4a68      	ldr	r2, [pc, #416]	@ (801262c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801248c:	430b      	orrs	r3, r1
 801248e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8012490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012498:	2100      	movs	r1, #0
 801249a:	62b9      	str	r1, [r7, #40]	@ 0x28
 801249c:	f003 0301 	and.w	r3, r3, #1
 80124a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80124a2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80124a6:	460b      	mov	r3, r1
 80124a8:	4313      	orrs	r3, r2
 80124aa:	d011      	beq.n	80124d0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80124ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124b0:	3308      	adds	r3, #8
 80124b2:	2100      	movs	r1, #0
 80124b4:	4618      	mov	r0, r3
 80124b6:	f001 f99d 	bl	80137f4 <RCCEx_PLL2_Config>
 80124ba:	4603      	mov	r3, r0
 80124bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80124c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d003      	beq.n	80124d0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80124c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80124d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d8:	2100      	movs	r1, #0
 80124da:	6239      	str	r1, [r7, #32]
 80124dc:	f003 0302 	and.w	r3, r3, #2
 80124e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80124e2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80124e6:	460b      	mov	r3, r1
 80124e8:	4313      	orrs	r3, r2
 80124ea:	d011      	beq.n	8012510 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80124ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124f0:	3308      	adds	r3, #8
 80124f2:	2101      	movs	r1, #1
 80124f4:	4618      	mov	r0, r3
 80124f6:	f001 f97d 	bl	80137f4 <RCCEx_PLL2_Config>
 80124fa:	4603      	mov	r3, r0
 80124fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012504:	2b00      	cmp	r3, #0
 8012506:	d003      	beq.n	8012510 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801250c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8012510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012518:	2100      	movs	r1, #0
 801251a:	61b9      	str	r1, [r7, #24]
 801251c:	f003 0304 	and.w	r3, r3, #4
 8012520:	61fb      	str	r3, [r7, #28]
 8012522:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012526:	460b      	mov	r3, r1
 8012528:	4313      	orrs	r3, r2
 801252a:	d011      	beq.n	8012550 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801252c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012530:	3308      	adds	r3, #8
 8012532:	2102      	movs	r1, #2
 8012534:	4618      	mov	r0, r3
 8012536:	f001 f95d 	bl	80137f4 <RCCEx_PLL2_Config>
 801253a:	4603      	mov	r3, r0
 801253c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012544:	2b00      	cmp	r3, #0
 8012546:	d003      	beq.n	8012550 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801254c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8012550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012558:	2100      	movs	r1, #0
 801255a:	6139      	str	r1, [r7, #16]
 801255c:	f003 0308 	and.w	r3, r3, #8
 8012560:	617b      	str	r3, [r7, #20]
 8012562:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8012566:	460b      	mov	r3, r1
 8012568:	4313      	orrs	r3, r2
 801256a:	d011      	beq.n	8012590 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801256c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012570:	3328      	adds	r3, #40	@ 0x28
 8012572:	2100      	movs	r1, #0
 8012574:	4618      	mov	r0, r3
 8012576:	f001 f9ef 	bl	8013958 <RCCEx_PLL3_Config>
 801257a:	4603      	mov	r3, r0
 801257c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8012580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012584:	2b00      	cmp	r3, #0
 8012586:	d003      	beq.n	8012590 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801258c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8012590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012598:	2100      	movs	r1, #0
 801259a:	60b9      	str	r1, [r7, #8]
 801259c:	f003 0310 	and.w	r3, r3, #16
 80125a0:	60fb      	str	r3, [r7, #12]
 80125a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80125a6:	460b      	mov	r3, r1
 80125a8:	4313      	orrs	r3, r2
 80125aa:	d011      	beq.n	80125d0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80125ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125b0:	3328      	adds	r3, #40	@ 0x28
 80125b2:	2101      	movs	r1, #1
 80125b4:	4618      	mov	r0, r3
 80125b6:	f001 f9cf 	bl	8013958 <RCCEx_PLL3_Config>
 80125ba:	4603      	mov	r3, r0
 80125bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80125c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d003      	beq.n	80125d0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80125d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d8:	2100      	movs	r1, #0
 80125da:	6039      	str	r1, [r7, #0]
 80125dc:	f003 0320 	and.w	r3, r3, #32
 80125e0:	607b      	str	r3, [r7, #4]
 80125e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80125e6:	460b      	mov	r3, r1
 80125e8:	4313      	orrs	r3, r2
 80125ea:	d011      	beq.n	8012610 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80125ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125f0:	3328      	adds	r3, #40	@ 0x28
 80125f2:	2102      	movs	r1, #2
 80125f4:	4618      	mov	r0, r3
 80125f6:	f001 f9af 	bl	8013958 <RCCEx_PLL3_Config>
 80125fa:	4603      	mov	r3, r0
 80125fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012600:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012604:	2b00      	cmp	r3, #0
 8012606:	d003      	beq.n	8012610 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012608:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801260c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8012610:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8012614:	2b00      	cmp	r3, #0
 8012616:	d101      	bne.n	801261c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8012618:	2300      	movs	r3, #0
 801261a:	e000      	b.n	801261e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 801261c:	2301      	movs	r3, #1
}
 801261e:	4618      	mov	r0, r3
 8012620:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8012624:	46bd      	mov	sp, r7
 8012626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801262a:	bf00      	nop
 801262c:	58024400 	.word	0x58024400

08012630 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b090      	sub	sp, #64	@ 0x40
 8012634:	af00      	add	r7, sp, #0
 8012636:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801263a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801263e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8012642:	430b      	orrs	r3, r1
 8012644:	f040 8094 	bne.w	8012770 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8012648:	4b9b      	ldr	r3, [pc, #620]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801264a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801264c:	f003 0307 	and.w	r3, r3, #7
 8012650:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8012652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012654:	2b04      	cmp	r3, #4
 8012656:	f200 8087 	bhi.w	8012768 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801265a:	a201      	add	r2, pc, #4	@ (adr r2, 8012660 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801265c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012660:	08012675 	.word	0x08012675
 8012664:	0801269d 	.word	0x0801269d
 8012668:	080126c5 	.word	0x080126c5
 801266c:	08012761 	.word	0x08012761
 8012670:	080126ed 	.word	0x080126ed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012674:	4b90      	ldr	r3, [pc, #576]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801267c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012680:	d108      	bne.n	8012694 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012686:	4618      	mov	r0, r3
 8012688:	f000 ff62 	bl	8013550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801268c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801268e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012690:	f000 bc93 	b.w	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012694:	2300      	movs	r3, #0
 8012696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012698:	f000 bc8f 	b.w	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801269c:	4b86      	ldr	r3, [pc, #536]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80126a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80126a8:	d108      	bne.n	80126bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80126aa:	f107 0318 	add.w	r3, r7, #24
 80126ae:	4618      	mov	r0, r3
 80126b0:	f000 fca6 	bl	8013000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80126b4:	69bb      	ldr	r3, [r7, #24]
 80126b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80126b8:	f000 bc7f 	b.w	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80126bc:	2300      	movs	r3, #0
 80126be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80126c0:	f000 bc7b 	b.w	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80126c4:	4b7c      	ldr	r3, [pc, #496]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80126cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80126d0:	d108      	bne.n	80126e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80126d2:	f107 030c 	add.w	r3, r7, #12
 80126d6:	4618      	mov	r0, r3
 80126d8:	f000 fde6 	bl	80132a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80126e0:	f000 bc6b 	b.w	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80126e4:	2300      	movs	r3, #0
 80126e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80126e8:	f000 bc67 	b.w	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80126ec:	4b72      	ldr	r3, [pc, #456]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80126ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80126f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80126f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80126f6:	4b70      	ldr	r3, [pc, #448]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	f003 0304 	and.w	r3, r3, #4
 80126fe:	2b04      	cmp	r3, #4
 8012700:	d10c      	bne.n	801271c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8012702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012704:	2b00      	cmp	r3, #0
 8012706:	d109      	bne.n	801271c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012708:	4b6b      	ldr	r3, [pc, #428]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	08db      	lsrs	r3, r3, #3
 801270e:	f003 0303 	and.w	r3, r3, #3
 8012712:	4a6a      	ldr	r2, [pc, #424]	@ (80128bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8012714:	fa22 f303 	lsr.w	r3, r2, r3
 8012718:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801271a:	e01f      	b.n	801275c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801271c:	4b66      	ldr	r3, [pc, #408]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012728:	d106      	bne.n	8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801272a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801272c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012730:	d102      	bne.n	8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012732:	4b63      	ldr	r3, [pc, #396]	@ (80128c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8012734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012736:	e011      	b.n	801275c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012738:	4b5f      	ldr	r3, [pc, #380]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012740:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012744:	d106      	bne.n	8012754 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8012746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801274c:	d102      	bne.n	8012754 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801274e:	4b5d      	ldr	r3, [pc, #372]	@ (80128c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8012750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012752:	e003      	b.n	801275c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012754:	2300      	movs	r3, #0
 8012756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012758:	f000 bc2f 	b.w	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801275c:	f000 bc2d 	b.w	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012760:	4b59      	ldr	r3, [pc, #356]	@ (80128c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8012762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012764:	f000 bc29 	b.w	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8012768:	2300      	movs	r3, #0
 801276a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801276c:	f000 bc25 	b.w	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8012770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012774:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8012778:	430b      	orrs	r3, r1
 801277a:	f040 80a7 	bne.w	80128cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801277e:	4b4e      	ldr	r3, [pc, #312]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012782:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8012786:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8012788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801278a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801278e:	d054      	beq.n	801283a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8012790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012792:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012796:	f200 808b 	bhi.w	80128b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801279a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801279c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80127a0:	f000 8083 	beq.w	80128aa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80127a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80127aa:	f200 8081 	bhi.w	80128b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80127ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80127b4:	d02f      	beq.n	8012816 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80127b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80127bc:	d878      	bhi.n	80128b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80127be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d004      	beq.n	80127ce <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80127c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80127ca:	d012      	beq.n	80127f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80127cc:	e070      	b.n	80128b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80127ce:	4b3a      	ldr	r3, [pc, #232]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80127d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80127da:	d107      	bne.n	80127ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80127dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80127e0:	4618      	mov	r0, r3
 80127e2:	f000 feb5 	bl	8013550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80127e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80127ea:	e3e6      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80127ec:	2300      	movs	r3, #0
 80127ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127f0:	e3e3      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80127f2:	4b31      	ldr	r3, [pc, #196]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80127fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80127fe:	d107      	bne.n	8012810 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012800:	f107 0318 	add.w	r3, r7, #24
 8012804:	4618      	mov	r0, r3
 8012806:	f000 fbfb 	bl	8013000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801280a:	69bb      	ldr	r3, [r7, #24]
 801280c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801280e:	e3d4      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012810:	2300      	movs	r3, #0
 8012812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012814:	e3d1      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012816:	4b28      	ldr	r3, [pc, #160]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801281e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012822:	d107      	bne.n	8012834 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012824:	f107 030c 	add.w	r3, r7, #12
 8012828:	4618      	mov	r0, r3
 801282a:	f000 fd3d 	bl	80132a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012832:	e3c2      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012834:	2300      	movs	r3, #0
 8012836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012838:	e3bf      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801283a:	4b1f      	ldr	r3, [pc, #124]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801283e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012842:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012844:	4b1c      	ldr	r3, [pc, #112]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	f003 0304 	and.w	r3, r3, #4
 801284c:	2b04      	cmp	r3, #4
 801284e:	d10c      	bne.n	801286a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8012850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012852:	2b00      	cmp	r3, #0
 8012854:	d109      	bne.n	801286a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012856:	4b18      	ldr	r3, [pc, #96]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	08db      	lsrs	r3, r3, #3
 801285c:	f003 0303 	and.w	r3, r3, #3
 8012860:	4a16      	ldr	r2, [pc, #88]	@ (80128bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8012862:	fa22 f303 	lsr.w	r3, r2, r3
 8012866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012868:	e01e      	b.n	80128a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801286a:	4b13      	ldr	r3, [pc, #76]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012876:	d106      	bne.n	8012886 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8012878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801287a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801287e:	d102      	bne.n	8012886 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012880:	4b0f      	ldr	r3, [pc, #60]	@ (80128c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8012882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012884:	e010      	b.n	80128a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012886:	4b0c      	ldr	r3, [pc, #48]	@ (80128b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801288e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012892:	d106      	bne.n	80128a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8012894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801289a:	d102      	bne.n	80128a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801289c:	4b09      	ldr	r3, [pc, #36]	@ (80128c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801289e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80128a0:	e002      	b.n	80128a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80128a2:	2300      	movs	r3, #0
 80128a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80128a6:	e388      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80128a8:	e387      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80128aa:	4b07      	ldr	r3, [pc, #28]	@ (80128c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80128ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80128ae:	e384      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80128b0:	2300      	movs	r3, #0
 80128b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80128b4:	e381      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80128b6:	bf00      	nop
 80128b8:	58024400 	.word	0x58024400
 80128bc:	03d09000 	.word	0x03d09000
 80128c0:	003d0900 	.word	0x003d0900
 80128c4:	016e3600 	.word	0x016e3600
 80128c8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80128cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80128d0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80128d4:	430b      	orrs	r3, r1
 80128d6:	f040 809c 	bne.w	8012a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80128da:	4b9e      	ldr	r3, [pc, #632]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80128dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80128de:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80128e2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80128e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80128ea:	d054      	beq.n	8012996 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80128ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80128f2:	f200 808b 	bhi.w	8012a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80128f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80128fc:	f000 8083 	beq.w	8012a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8012900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012902:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012906:	f200 8081 	bhi.w	8012a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801290a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801290c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012910:	d02f      	beq.n	8012972 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8012912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012914:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012918:	d878      	bhi.n	8012a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801291a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801291c:	2b00      	cmp	r3, #0
 801291e:	d004      	beq.n	801292a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8012920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012922:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012926:	d012      	beq.n	801294e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8012928:	e070      	b.n	8012a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801292a:	4b8a      	ldr	r3, [pc, #552]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012932:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012936:	d107      	bne.n	8012948 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801293c:	4618      	mov	r0, r3
 801293e:	f000 fe07 	bl	8013550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012946:	e338      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012948:	2300      	movs	r3, #0
 801294a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801294c:	e335      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801294e:	4b81      	ldr	r3, [pc, #516]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012956:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801295a:	d107      	bne.n	801296c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801295c:	f107 0318 	add.w	r3, r7, #24
 8012960:	4618      	mov	r0, r3
 8012962:	f000 fb4d 	bl	8013000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012966:	69bb      	ldr	r3, [r7, #24]
 8012968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801296a:	e326      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801296c:	2300      	movs	r3, #0
 801296e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012970:	e323      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012972:	4b78      	ldr	r3, [pc, #480]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801297a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801297e:	d107      	bne.n	8012990 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012980:	f107 030c 	add.w	r3, r7, #12
 8012984:	4618      	mov	r0, r3
 8012986:	f000 fc8f 	bl	80132a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801298e:	e314      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012990:	2300      	movs	r3, #0
 8012992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012994:	e311      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012996:	4b6f      	ldr	r3, [pc, #444]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801299a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801299e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80129a0:	4b6c      	ldr	r3, [pc, #432]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	f003 0304 	and.w	r3, r3, #4
 80129a8:	2b04      	cmp	r3, #4
 80129aa:	d10c      	bne.n	80129c6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80129ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d109      	bne.n	80129c6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80129b2:	4b68      	ldr	r3, [pc, #416]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	08db      	lsrs	r3, r3, #3
 80129b8:	f003 0303 	and.w	r3, r3, #3
 80129bc:	4a66      	ldr	r2, [pc, #408]	@ (8012b58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80129be:	fa22 f303 	lsr.w	r3, r2, r3
 80129c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129c4:	e01e      	b.n	8012a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80129c6:	4b63      	ldr	r3, [pc, #396]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80129ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80129d2:	d106      	bne.n	80129e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80129d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80129da:	d102      	bne.n	80129e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80129dc:	4b5f      	ldr	r3, [pc, #380]	@ (8012b5c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80129de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129e0:	e010      	b.n	8012a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80129e2:	4b5c      	ldr	r3, [pc, #368]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80129ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80129ee:	d106      	bne.n	80129fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80129f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80129f6:	d102      	bne.n	80129fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80129f8:	4b59      	ldr	r3, [pc, #356]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80129fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129fc:	e002      	b.n	8012a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80129fe:	2300      	movs	r3, #0
 8012a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012a02:	e2da      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012a04:	e2d9      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012a06:	4b57      	ldr	r3, [pc, #348]	@ (8012b64 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8012a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a0a:	e2d6      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a10:	e2d3      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8012a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012a16:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8012a1a:	430b      	orrs	r3, r1
 8012a1c:	f040 80a7 	bne.w	8012b6e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8012a20:	4b4c      	ldr	r3, [pc, #304]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012a24:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8012a28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012a30:	d055      	beq.n	8012ade <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8012a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012a38:	f200 8096 	bhi.w	8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8012a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012a42:	f000 8084 	beq.w	8012b4e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8012a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012a4c:	f200 808c 	bhi.w	8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8012a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012a56:	d030      	beq.n	8012aba <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8012a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012a5e:	f200 8083 	bhi.w	8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8012a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d004      	beq.n	8012a72 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8012a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012a6e:	d012      	beq.n	8012a96 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8012a70:	e07a      	b.n	8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012a72:	4b38      	ldr	r3, [pc, #224]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012a7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012a7e:	d107      	bne.n	8012a90 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012a84:	4618      	mov	r0, r3
 8012a86:	f000 fd63 	bl	8013550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012a8e:	e294      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012a90:	2300      	movs	r3, #0
 8012a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a94:	e291      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012a96:	4b2f      	ldr	r3, [pc, #188]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012a9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012aa2:	d107      	bne.n	8012ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012aa4:	f107 0318 	add.w	r3, r7, #24
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f000 faa9 	bl	8013000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012aae:	69bb      	ldr	r3, [r7, #24]
 8012ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ab2:	e282      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ab8:	e27f      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012aba:	4b26      	ldr	r3, [pc, #152]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012ac2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012ac6:	d107      	bne.n	8012ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012ac8:	f107 030c 	add.w	r3, r7, #12
 8012acc:	4618      	mov	r0, r3
 8012ace:	f000 fbeb 	bl	80132a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ad6:	e270      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012adc:	e26d      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012ade:	4b1d      	ldr	r3, [pc, #116]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012ae2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012ae6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	f003 0304 	and.w	r3, r3, #4
 8012af0:	2b04      	cmp	r3, #4
 8012af2:	d10c      	bne.n	8012b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8012af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d109      	bne.n	8012b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012afa:	4b16      	ldr	r3, [pc, #88]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	08db      	lsrs	r3, r3, #3
 8012b00:	f003 0303 	and.w	r3, r3, #3
 8012b04:	4a14      	ldr	r2, [pc, #80]	@ (8012b58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8012b06:	fa22 f303 	lsr.w	r3, r2, r3
 8012b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012b0c:	e01e      	b.n	8012b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012b0e:	4b11      	ldr	r3, [pc, #68]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b1a:	d106      	bne.n	8012b2a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8012b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012b22:	d102      	bne.n	8012b2a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012b24:	4b0d      	ldr	r3, [pc, #52]	@ (8012b5c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8012b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012b28:	e010      	b.n	8012b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8012b54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012b32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012b36:	d106      	bne.n	8012b46 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8012b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b3e:	d102      	bne.n	8012b46 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012b40:	4b07      	ldr	r3, [pc, #28]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012b44:	e002      	b.n	8012b4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012b46:	2300      	movs	r3, #0
 8012b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012b4a:	e236      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012b4c:	e235      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012b4e:	4b05      	ldr	r3, [pc, #20]	@ (8012b64 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8012b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b52:	e232      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012b54:	58024400 	.word	0x58024400
 8012b58:	03d09000 	.word	0x03d09000
 8012b5c:	003d0900 	.word	0x003d0900
 8012b60:	016e3600 	.word	0x016e3600
 8012b64:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b6c:	e225      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8012b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b72:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8012b76:	430b      	orrs	r3, r1
 8012b78:	f040 8085 	bne.w	8012c86 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8012b7c:	4b9c      	ldr	r3, [pc, #624]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b80:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8012b84:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8012b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012b8c:	d06b      	beq.n	8012c66 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8012b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012b94:	d874      	bhi.n	8012c80 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012b9c:	d056      	beq.n	8012c4c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8012b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ba0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012ba4:	d86c      	bhi.n	8012c80 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ba8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012bac:	d03b      	beq.n	8012c26 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8012bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012bb4:	d864      	bhi.n	8012c80 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012bbc:	d021      	beq.n	8012c02 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8012bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012bc4:	d85c      	bhi.n	8012c80 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d004      	beq.n	8012bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8012bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012bd2:	d004      	beq.n	8012bde <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8012bd4:	e054      	b.n	8012c80 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8012bd6:	f7fe fb5f 	bl	8011298 <HAL_RCC_GetPCLK1Freq>
 8012bda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012bdc:	e1ed      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012bde:	4b84      	ldr	r3, [pc, #528]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012bea:	d107      	bne.n	8012bfc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012bec:	f107 0318 	add.w	r3, r7, #24
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f000 fa05 	bl	8013000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012bfa:	e1de      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c00:	e1db      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012c02:	4b7b      	ldr	r3, [pc, #492]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012c0e:	d107      	bne.n	8012c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012c10:	f107 030c 	add.w	r3, r7, #12
 8012c14:	4618      	mov	r0, r3
 8012c16:	f000 fb47 	bl	80132a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c1e:	e1cc      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c20:	2300      	movs	r3, #0
 8012c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c24:	e1c9      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012c26:	4b72      	ldr	r3, [pc, #456]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	f003 0304 	and.w	r3, r3, #4
 8012c2e:	2b04      	cmp	r3, #4
 8012c30:	d109      	bne.n	8012c46 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012c32:	4b6f      	ldr	r3, [pc, #444]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	08db      	lsrs	r3, r3, #3
 8012c38:	f003 0303 	and.w	r3, r3, #3
 8012c3c:	4a6d      	ldr	r2, [pc, #436]	@ (8012df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8012c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8012c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c44:	e1b9      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c46:	2300      	movs	r3, #0
 8012c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c4a:	e1b6      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8012c4c:	4b68      	ldr	r3, [pc, #416]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012c58:	d102      	bne.n	8012c60 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8012c5a:	4b67      	ldr	r3, [pc, #412]	@ (8012df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8012c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c5e:	e1ac      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c60:	2300      	movs	r3, #0
 8012c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c64:	e1a9      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012c66:	4b62      	ldr	r3, [pc, #392]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012c6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012c72:	d102      	bne.n	8012c7a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8012c74:	4b61      	ldr	r3, [pc, #388]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8012c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c78:	e19f      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c7e:	e19c      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8012c80:	2300      	movs	r3, #0
 8012c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c84:	e199      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8012c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c8a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8012c8e:	430b      	orrs	r3, r1
 8012c90:	d173      	bne.n	8012d7a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8012c92:	4b57      	ldr	r3, [pc, #348]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012c96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8012c9a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012ca2:	d02f      	beq.n	8012d04 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8012ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ca6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012caa:	d863      	bhi.n	8012d74 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8012cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d004      	beq.n	8012cbc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8012cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012cb8:	d012      	beq.n	8012ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8012cba:	e05b      	b.n	8012d74 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012cc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012cc8:	d107      	bne.n	8012cda <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012cca:	f107 0318 	add.w	r3, r7, #24
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f000 f996 	bl	8013000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012cd4:	69bb      	ldr	r3, [r7, #24]
 8012cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012cd8:	e16f      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012cde:	e16c      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012ce0:	4b43      	ldr	r3, [pc, #268]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012ce8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012cec:	d107      	bne.n	8012cfe <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012cee:	f107 030c 	add.w	r3, r7, #12
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f000 fad8 	bl	80132a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012cfc:	e15d      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012cfe:	2300      	movs	r3, #0
 8012d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d02:	e15a      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012d04:	4b3a      	ldr	r3, [pc, #232]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012d08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012d0c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012d0e:	4b38      	ldr	r3, [pc, #224]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	f003 0304 	and.w	r3, r3, #4
 8012d16:	2b04      	cmp	r3, #4
 8012d18:	d10c      	bne.n	8012d34 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8012d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d109      	bne.n	8012d34 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012d20:	4b33      	ldr	r3, [pc, #204]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	08db      	lsrs	r3, r3, #3
 8012d26:	f003 0303 	and.w	r3, r3, #3
 8012d2a:	4a32      	ldr	r2, [pc, #200]	@ (8012df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8012d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8012d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012d32:	e01e      	b.n	8012d72 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012d34:	4b2e      	ldr	r3, [pc, #184]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d40:	d106      	bne.n	8012d50 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8012d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012d48:	d102      	bne.n	8012d50 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8012df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8012d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012d4e:	e010      	b.n	8012d72 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012d50:	4b27      	ldr	r3, [pc, #156]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012d58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012d5c:	d106      	bne.n	8012d6c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8012d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012d64:	d102      	bne.n	8012d6c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012d66:	4b25      	ldr	r3, [pc, #148]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8012d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012d6a:	e002      	b.n	8012d72 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012d70:	e123      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012d72:	e122      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8012d74:	2300      	movs	r3, #0
 8012d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d78:	e11f      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8012d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d7e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8012d82:	430b      	orrs	r3, r1
 8012d84:	d13c      	bne.n	8012e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8012d86:	4b1a      	ldr	r3, [pc, #104]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012d8e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d004      	beq.n	8012da0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8012d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012d9c:	d012      	beq.n	8012dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8012d9e:	e023      	b.n	8012de8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012da0:	4b13      	ldr	r3, [pc, #76]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012da8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012dac:	d107      	bne.n	8012dbe <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012db2:	4618      	mov	r0, r3
 8012db4:	f000 fbcc 	bl	8013550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012dbc:	e0fd      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012dc2:	e0fa      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012dcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012dd0:	d107      	bne.n	8012de2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012dd2:	f107 0318 	add.w	r3, r7, #24
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f000 f912 	bl	8013000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8012ddc:	6a3b      	ldr	r3, [r7, #32]
 8012dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012de0:	e0eb      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012de2:	2300      	movs	r3, #0
 8012de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012de6:	e0e8      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8012de8:	2300      	movs	r3, #0
 8012dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012dec:	e0e5      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012dee:	bf00      	nop
 8012df0:	58024400 	.word	0x58024400
 8012df4:	03d09000 	.word	0x03d09000
 8012df8:	003d0900 	.word	0x003d0900
 8012dfc:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8012e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012e04:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8012e08:	430b      	orrs	r3, r1
 8012e0a:	f040 8085 	bne.w	8012f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8012e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8012fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e12:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8012e16:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012e1e:	d06b      	beq.n	8012ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8012e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012e26:	d874      	bhi.n	8012f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8012e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e2e:	d056      	beq.n	8012ede <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8012e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e36:	d86c      	bhi.n	8012f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8012e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012e3e:	d03b      	beq.n	8012eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8012e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012e46:	d864      	bhi.n	8012f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8012e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012e4e:	d021      	beq.n	8012e94 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8012e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012e56:	d85c      	bhi.n	8012f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8012e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d004      	beq.n	8012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8012e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012e64:	d004      	beq.n	8012e70 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8012e66:	e054      	b.n	8012f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8012e68:	f000 f8b4 	bl	8012fd4 <HAL_RCCEx_GetD3PCLK1Freq>
 8012e6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012e6e:	e0a4      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012e70:	4b54      	ldr	r3, [pc, #336]	@ (8012fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012e78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012e7c:	d107      	bne.n	8012e8e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012e7e:	f107 0318 	add.w	r3, r7, #24
 8012e82:	4618      	mov	r0, r3
 8012e84:	f000 f8bc 	bl	8013000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012e88:	69fb      	ldr	r3, [r7, #28]
 8012e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012e8c:	e095      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e92:	e092      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012e94:	4b4b      	ldr	r3, [pc, #300]	@ (8012fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012e9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012ea0:	d107      	bne.n	8012eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012ea2:	f107 030c 	add.w	r3, r7, #12
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f000 f9fe 	bl	80132a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012eb0:	e083      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012eb6:	e080      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012eb8:	4b42      	ldr	r3, [pc, #264]	@ (8012fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	f003 0304 	and.w	r3, r3, #4
 8012ec0:	2b04      	cmp	r3, #4
 8012ec2:	d109      	bne.n	8012ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8012fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	08db      	lsrs	r3, r3, #3
 8012eca:	f003 0303 	and.w	r3, r3, #3
 8012ece:	4a3e      	ldr	r2, [pc, #248]	@ (8012fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8012ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8012ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ed6:	e070      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012edc:	e06d      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8012ede:	4b39      	ldr	r3, [pc, #228]	@ (8012fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012eea:	d102      	bne.n	8012ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8012eec:	4b37      	ldr	r3, [pc, #220]	@ (8012fcc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8012eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ef0:	e063      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ef6:	e060      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012ef8:	4b32      	ldr	r3, [pc, #200]	@ (8012fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012f00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f04:	d102      	bne.n	8012f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8012f06:	4b32      	ldr	r3, [pc, #200]	@ (8012fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8012f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012f0a:	e056      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f10:	e053      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8012f12:	2300      	movs	r3, #0
 8012f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f16:	e050      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8012f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f1c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8012f20:	430b      	orrs	r3, r1
 8012f22:	d148      	bne.n	8012fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8012f24:	4b27      	ldr	r3, [pc, #156]	@ (8012fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012f2c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012f34:	d02a      	beq.n	8012f8c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8012f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012f3c:	d838      	bhi.n	8012fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8012f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d004      	beq.n	8012f4e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8012f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012f4a:	d00d      	beq.n	8012f68 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8012f4c:	e030      	b.n	8012fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8012fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012f56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f5a:	d102      	bne.n	8012f62 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8012f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8012fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8012f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012f60:	e02b      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012f62:	2300      	movs	r3, #0
 8012f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f66:	e028      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012f68:	4b16      	ldr	r3, [pc, #88]	@ (8012fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012f70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012f74:	d107      	bne.n	8012f86 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f000 fae8 	bl	8013550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012f84:	e019      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012f86:	2300      	movs	r3, #0
 8012f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f8a:	e016      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8012fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012f94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012f98:	d107      	bne.n	8012faa <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012f9a:	f107 0318 	add.w	r3, r7, #24
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f000 f82e 	bl	8013000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012fa4:	69fb      	ldr	r3, [r7, #28]
 8012fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012fa8:	e007      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012faa:	2300      	movs	r3, #0
 8012fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012fae:	e004      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012fb4:	e001      	b.n	8012fba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8012fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3740      	adds	r7, #64	@ 0x40
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}
 8012fc4:	58024400 	.word	0x58024400
 8012fc8:	03d09000 	.word	0x03d09000
 8012fcc:	003d0900 	.word	0x003d0900
 8012fd0:	016e3600 	.word	0x016e3600

08012fd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8012fd8:	f7fe f92e 	bl	8011238 <HAL_RCC_GetHCLKFreq>
 8012fdc:	4602      	mov	r2, r0
 8012fde:	4b06      	ldr	r3, [pc, #24]	@ (8012ff8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8012fe0:	6a1b      	ldr	r3, [r3, #32]
 8012fe2:	091b      	lsrs	r3, r3, #4
 8012fe4:	f003 0307 	and.w	r3, r3, #7
 8012fe8:	4904      	ldr	r1, [pc, #16]	@ (8012ffc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8012fea:	5ccb      	ldrb	r3, [r1, r3]
 8012fec:	f003 031f 	and.w	r3, r3, #31
 8012ff0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	bd80      	pop	{r7, pc}
 8012ff8:	58024400 	.word	0x58024400
 8012ffc:	0801e2e8 	.word	0x0801e2e8

08013000 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013000:	b480      	push	{r7}
 8013002:	b089      	sub	sp, #36	@ 0x24
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013008:	4ba1      	ldr	r3, [pc, #644]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801300c:	f003 0303 	and.w	r3, r3, #3
 8013010:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013012:	4b9f      	ldr	r3, [pc, #636]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013016:	0b1b      	lsrs	r3, r3, #12
 8013018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801301c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801301e:	4b9c      	ldr	r3, [pc, #624]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013022:	091b      	lsrs	r3, r3, #4
 8013024:	f003 0301 	and.w	r3, r3, #1
 8013028:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801302a:	4b99      	ldr	r3, [pc, #612]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801302c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801302e:	08db      	lsrs	r3, r3, #3
 8013030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013034:	693a      	ldr	r2, [r7, #16]
 8013036:	fb02 f303 	mul.w	r3, r2, r3
 801303a:	ee07 3a90 	vmov	s15, r3
 801303e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013042:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	2b00      	cmp	r3, #0
 801304a:	f000 8111 	beq.w	8013270 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801304e:	69bb      	ldr	r3, [r7, #24]
 8013050:	2b02      	cmp	r3, #2
 8013052:	f000 8083 	beq.w	801315c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013056:	69bb      	ldr	r3, [r7, #24]
 8013058:	2b02      	cmp	r3, #2
 801305a:	f200 80a1 	bhi.w	80131a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801305e:	69bb      	ldr	r3, [r7, #24]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d003      	beq.n	801306c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013064:	69bb      	ldr	r3, [r7, #24]
 8013066:	2b01      	cmp	r3, #1
 8013068:	d056      	beq.n	8013118 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801306a:	e099      	b.n	80131a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801306c:	4b88      	ldr	r3, [pc, #544]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	f003 0320 	and.w	r3, r3, #32
 8013074:	2b00      	cmp	r3, #0
 8013076:	d02d      	beq.n	80130d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013078:	4b85      	ldr	r3, [pc, #532]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	08db      	lsrs	r3, r3, #3
 801307e:	f003 0303 	and.w	r3, r3, #3
 8013082:	4a84      	ldr	r2, [pc, #528]	@ (8013294 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013084:	fa22 f303 	lsr.w	r3, r2, r3
 8013088:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	ee07 3a90 	vmov	s15, r3
 8013090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	ee07 3a90 	vmov	s15, r3
 801309a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801309e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80130a2:	4b7b      	ldr	r3, [pc, #492]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80130a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130aa:	ee07 3a90 	vmov	s15, r3
 80130ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80130b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80130b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80130ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80130be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80130c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80130c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80130ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80130ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80130d2:	e087      	b.n	80131e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	ee07 3a90 	vmov	s15, r3
 80130da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801329c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80130e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80130e6:	4b6a      	ldr	r3, [pc, #424]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80130e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130ee:	ee07 3a90 	vmov	s15, r3
 80130f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80130f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80130fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80130fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801310a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801310e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013116:	e065      	b.n	80131e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	ee07 3a90 	vmov	s15, r3
 801311e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013122:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80132a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801312a:	4b59      	ldr	r3, [pc, #356]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801312c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801312e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013132:	ee07 3a90 	vmov	s15, r3
 8013136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801313a:	ed97 6a03 	vldr	s12, [r7, #12]
 801313e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801314a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801314e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801315a:	e043      	b.n	80131e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	ee07 3a90 	vmov	s15, r3
 8013162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013166:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80132a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801316a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801316e:	4b48      	ldr	r3, [pc, #288]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013176:	ee07 3a90 	vmov	s15, r3
 801317a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801317e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013182:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801318a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801318e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013196:	ee67 7a27 	vmul.f32	s15, s14, s15
 801319a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801319e:	e021      	b.n	80131e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	ee07 3a90 	vmov	s15, r3
 80131a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80131aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80132a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80131ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80131b2:	4b37      	ldr	r3, [pc, #220]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80131b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131ba:	ee07 3a90 	vmov	s15, r3
 80131be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80131c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80131c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80131ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80131ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80131d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80131d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80131da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80131de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80131e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80131e4:	4b2a      	ldr	r3, [pc, #168]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80131e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131e8:	0a5b      	lsrs	r3, r3, #9
 80131ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80131ee:	ee07 3a90 	vmov	s15, r3
 80131f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80131f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80131fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80131fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8013202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801320a:	ee17 2a90 	vmov	r2, s15
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013212:	4b1f      	ldr	r3, [pc, #124]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013216:	0c1b      	lsrs	r3, r3, #16
 8013218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801321c:	ee07 3a90 	vmov	s15, r3
 8013220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013224:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013228:	ee37 7a87 	vadd.f32	s14, s15, s14
 801322c:	edd7 6a07 	vldr	s13, [r7, #28]
 8013230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013238:	ee17 2a90 	vmov	r2, s15
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8013240:	4b13      	ldr	r3, [pc, #76]	@ (8013290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013244:	0e1b      	lsrs	r3, r3, #24
 8013246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801324a:	ee07 3a90 	vmov	s15, r3
 801324e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013252:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013256:	ee37 7a87 	vadd.f32	s14, s15, s14
 801325a:	edd7 6a07 	vldr	s13, [r7, #28]
 801325e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013266:	ee17 2a90 	vmov	r2, s15
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801326e:	e008      	b.n	8013282 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2200      	movs	r2, #0
 8013274:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2200      	movs	r2, #0
 801327a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2200      	movs	r2, #0
 8013280:	609a      	str	r2, [r3, #8]
}
 8013282:	bf00      	nop
 8013284:	3724      	adds	r7, #36	@ 0x24
 8013286:	46bd      	mov	sp, r7
 8013288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328c:	4770      	bx	lr
 801328e:	bf00      	nop
 8013290:	58024400 	.word	0x58024400
 8013294:	03d09000 	.word	0x03d09000
 8013298:	46000000 	.word	0x46000000
 801329c:	4c742400 	.word	0x4c742400
 80132a0:	4a742400 	.word	0x4a742400
 80132a4:	4bb71b00 	.word	0x4bb71b00

080132a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80132a8:	b480      	push	{r7}
 80132aa:	b089      	sub	sp, #36	@ 0x24
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80132b0:	4ba1      	ldr	r3, [pc, #644]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132b4:	f003 0303 	and.w	r3, r3, #3
 80132b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80132ba:	4b9f      	ldr	r3, [pc, #636]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132be:	0d1b      	lsrs	r3, r3, #20
 80132c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80132c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80132c6:	4b9c      	ldr	r3, [pc, #624]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132ca:	0a1b      	lsrs	r3, r3, #8
 80132cc:	f003 0301 	and.w	r3, r3, #1
 80132d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80132d2:	4b99      	ldr	r3, [pc, #612]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132d6:	08db      	lsrs	r3, r3, #3
 80132d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80132dc:	693a      	ldr	r2, [r7, #16]
 80132de:	fb02 f303 	mul.w	r3, r2, r3
 80132e2:	ee07 3a90 	vmov	s15, r3
 80132e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	f000 8111 	beq.w	8013518 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80132f6:	69bb      	ldr	r3, [r7, #24]
 80132f8:	2b02      	cmp	r3, #2
 80132fa:	f000 8083 	beq.w	8013404 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80132fe:	69bb      	ldr	r3, [r7, #24]
 8013300:	2b02      	cmp	r3, #2
 8013302:	f200 80a1 	bhi.w	8013448 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013306:	69bb      	ldr	r3, [r7, #24]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d003      	beq.n	8013314 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	2b01      	cmp	r3, #1
 8013310:	d056      	beq.n	80133c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013312:	e099      	b.n	8013448 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013314:	4b88      	ldr	r3, [pc, #544]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	f003 0320 	and.w	r3, r3, #32
 801331c:	2b00      	cmp	r3, #0
 801331e:	d02d      	beq.n	801337c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013320:	4b85      	ldr	r3, [pc, #532]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	08db      	lsrs	r3, r3, #3
 8013326:	f003 0303 	and.w	r3, r3, #3
 801332a:	4a84      	ldr	r2, [pc, #528]	@ (801353c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801332c:	fa22 f303 	lsr.w	r3, r2, r3
 8013330:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	ee07 3a90 	vmov	s15, r3
 8013338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	ee07 3a90 	vmov	s15, r3
 8013342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801334a:	4b7b      	ldr	r3, [pc, #492]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801334e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013352:	ee07 3a90 	vmov	s15, r3
 8013356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801335a:	ed97 6a03 	vldr	s12, [r7, #12]
 801335e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801336a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801336e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013376:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801337a:	e087      	b.n	801348c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	ee07 3a90 	vmov	s15, r3
 8013382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013386:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013544 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801338a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801338e:	4b6a      	ldr	r3, [pc, #424]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013396:	ee07 3a90 	vmov	s15, r3
 801339a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801339e:	ed97 6a03 	vldr	s12, [r7, #12]
 80133a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80133a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80133aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80133b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80133be:	e065      	b.n	801348c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	ee07 3a90 	vmov	s15, r3
 80133c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80133ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80133d2:	4b59      	ldr	r3, [pc, #356]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80133d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80133d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133da:	ee07 3a90 	vmov	s15, r3
 80133de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80133e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80133e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80133ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80133ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80133f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013402:	e043      	b.n	801348c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	ee07 3a90 	vmov	s15, r3
 801340a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801340e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801354c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013416:	4b48      	ldr	r3, [pc, #288]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801341a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801341e:	ee07 3a90 	vmov	s15, r3
 8013422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013426:	ed97 6a03 	vldr	s12, [r7, #12]
 801342a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801342e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801343a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801343e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013446:	e021      	b.n	801348c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	ee07 3a90 	vmov	s15, r3
 801344e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013452:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801345a:	4b37      	ldr	r3, [pc, #220]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801345e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013462:	ee07 3a90 	vmov	s15, r3
 8013466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801346a:	ed97 6a03 	vldr	s12, [r7, #12]
 801346e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801347a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801347e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801348a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801348c:	4b2a      	ldr	r3, [pc, #168]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013490:	0a5b      	lsrs	r3, r3, #9
 8013492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013496:	ee07 3a90 	vmov	s15, r3
 801349a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801349e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80134a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80134a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80134aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80134ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80134b2:	ee17 2a90 	vmov	r2, s15
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80134ba:	4b1f      	ldr	r3, [pc, #124]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80134bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134be:	0c1b      	lsrs	r3, r3, #16
 80134c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80134c4:	ee07 3a90 	vmov	s15, r3
 80134c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80134d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80134d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80134d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80134dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80134e0:	ee17 2a90 	vmov	r2, s15
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80134e8:	4b13      	ldr	r3, [pc, #76]	@ (8013538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80134ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134ec:	0e1b      	lsrs	r3, r3, #24
 80134ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80134f2:	ee07 3a90 	vmov	s15, r3
 80134f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80134fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013502:	edd7 6a07 	vldr	s13, [r7, #28]
 8013506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801350a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801350e:	ee17 2a90 	vmov	r2, s15
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8013516:	e008      	b.n	801352a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2200      	movs	r2, #0
 801351c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2200      	movs	r2, #0
 8013522:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2200      	movs	r2, #0
 8013528:	609a      	str	r2, [r3, #8]
}
 801352a:	bf00      	nop
 801352c:	3724      	adds	r7, #36	@ 0x24
 801352e:	46bd      	mov	sp, r7
 8013530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013534:	4770      	bx	lr
 8013536:	bf00      	nop
 8013538:	58024400 	.word	0x58024400
 801353c:	03d09000 	.word	0x03d09000
 8013540:	46000000 	.word	0x46000000
 8013544:	4c742400 	.word	0x4c742400
 8013548:	4a742400 	.word	0x4a742400
 801354c:	4bb71b00 	.word	0x4bb71b00

08013550 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8013550:	b480      	push	{r7}
 8013552:	b089      	sub	sp, #36	@ 0x24
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013558:	4ba0      	ldr	r3, [pc, #640]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801355c:	f003 0303 	and.w	r3, r3, #3
 8013560:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8013562:	4b9e      	ldr	r3, [pc, #632]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013566:	091b      	lsrs	r3, r3, #4
 8013568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801356c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801356e:	4b9b      	ldr	r3, [pc, #620]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013572:	f003 0301 	and.w	r3, r3, #1
 8013576:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8013578:	4b98      	ldr	r3, [pc, #608]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801357a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801357c:	08db      	lsrs	r3, r3, #3
 801357e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013582:	693a      	ldr	r2, [r7, #16]
 8013584:	fb02 f303 	mul.w	r3, r2, r3
 8013588:	ee07 3a90 	vmov	s15, r3
 801358c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013590:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	2b00      	cmp	r3, #0
 8013598:	f000 8111 	beq.w	80137be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	2b02      	cmp	r3, #2
 80135a0:	f000 8083 	beq.w	80136aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80135a4:	69bb      	ldr	r3, [r7, #24]
 80135a6:	2b02      	cmp	r3, #2
 80135a8:	f200 80a1 	bhi.w	80136ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80135ac:	69bb      	ldr	r3, [r7, #24]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d003      	beq.n	80135ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80135b2:	69bb      	ldr	r3, [r7, #24]
 80135b4:	2b01      	cmp	r3, #1
 80135b6:	d056      	beq.n	8013666 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80135b8:	e099      	b.n	80136ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80135ba:	4b88      	ldr	r3, [pc, #544]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	f003 0320 	and.w	r3, r3, #32
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d02d      	beq.n	8013622 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80135c6:	4b85      	ldr	r3, [pc, #532]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	08db      	lsrs	r3, r3, #3
 80135cc:	f003 0303 	and.w	r3, r3, #3
 80135d0:	4a83      	ldr	r2, [pc, #524]	@ (80137e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80135d2:	fa22 f303 	lsr.w	r3, r2, r3
 80135d6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	ee07 3a90 	vmov	s15, r3
 80135de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	ee07 3a90 	vmov	s15, r3
 80135e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80135ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80135f0:	4b7a      	ldr	r3, [pc, #488]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80135f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135f8:	ee07 3a90 	vmov	s15, r3
 80135fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013600:	ed97 6a03 	vldr	s12, [r7, #12]
 8013604:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80137e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013608:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801360c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013610:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013618:	ee67 7a27 	vmul.f32	s15, s14, s15
 801361c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013620:	e087      	b.n	8013732 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013622:	697b      	ldr	r3, [r7, #20]
 8013624:	ee07 3a90 	vmov	s15, r3
 8013628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801362c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80137e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8013630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013634:	4b69      	ldr	r3, [pc, #420]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801363c:	ee07 3a90 	vmov	s15, r3
 8013640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013644:	ed97 6a03 	vldr	s12, [r7, #12]
 8013648:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80137e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801364c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013650:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013654:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801365c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013660:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013664:	e065      	b.n	8013732 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013666:	697b      	ldr	r3, [r7, #20]
 8013668:	ee07 3a90 	vmov	s15, r3
 801366c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013670:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80137ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8013674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013678:	4b58      	ldr	r3, [pc, #352]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801367c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013680:	ee07 3a90 	vmov	s15, r3
 8013684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013688:	ed97 6a03 	vldr	s12, [r7, #12]
 801368c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80137e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013690:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013694:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013698:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801369c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80136a8:	e043      	b.n	8013732 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80136aa:	697b      	ldr	r3, [r7, #20]
 80136ac:	ee07 3a90 	vmov	s15, r3
 80136b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80136b4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80137f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80136b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80136bc:	4b47      	ldr	r3, [pc, #284]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80136be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136c4:	ee07 3a90 	vmov	s15, r3
 80136c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80136cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80136d0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80137e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80136d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80136d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80136dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80136e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80136ec:	e021      	b.n	8013732 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	ee07 3a90 	vmov	s15, r3
 80136f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80136f8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80137e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80136fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013700:	4b36      	ldr	r3, [pc, #216]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013708:	ee07 3a90 	vmov	s15, r3
 801370c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013710:	ed97 6a03 	vldr	s12, [r7, #12]
 8013714:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80137e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801371c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013720:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013728:	ee67 7a27 	vmul.f32	s15, s14, s15
 801372c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013730:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8013732:	4b2a      	ldr	r3, [pc, #168]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013736:	0a5b      	lsrs	r3, r3, #9
 8013738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801373c:	ee07 3a90 	vmov	s15, r3
 8013740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013744:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013748:	ee37 7a87 	vadd.f32	s14, s15, s14
 801374c:	edd7 6a07 	vldr	s13, [r7, #28]
 8013750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013758:	ee17 2a90 	vmov	r2, s15
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8013760:	4b1e      	ldr	r3, [pc, #120]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013764:	0c1b      	lsrs	r3, r3, #16
 8013766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801376a:	ee07 3a90 	vmov	s15, r3
 801376e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013772:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013776:	ee37 7a87 	vadd.f32	s14, s15, s14
 801377a:	edd7 6a07 	vldr	s13, [r7, #28]
 801377e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013786:	ee17 2a90 	vmov	r2, s15
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801378e:	4b13      	ldr	r3, [pc, #76]	@ (80137dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013792:	0e1b      	lsrs	r3, r3, #24
 8013794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013798:	ee07 3a90 	vmov	s15, r3
 801379c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80137a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80137a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80137a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80137ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80137b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80137b4:	ee17 2a90 	vmov	r2, s15
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80137bc:	e008      	b.n	80137d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2200      	movs	r2, #0
 80137c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2200      	movs	r2, #0
 80137c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	2200      	movs	r2, #0
 80137ce:	609a      	str	r2, [r3, #8]
}
 80137d0:	bf00      	nop
 80137d2:	3724      	adds	r7, #36	@ 0x24
 80137d4:	46bd      	mov	sp, r7
 80137d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137da:	4770      	bx	lr
 80137dc:	58024400 	.word	0x58024400
 80137e0:	03d09000 	.word	0x03d09000
 80137e4:	46000000 	.word	0x46000000
 80137e8:	4c742400 	.word	0x4c742400
 80137ec:	4a742400 	.word	0x4a742400
 80137f0:	4bb71b00 	.word	0x4bb71b00

080137f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b084      	sub	sp, #16
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80137fe:	2300      	movs	r3, #0
 8013800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013802:	4b53      	ldr	r3, [pc, #332]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 8013804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013806:	f003 0303 	and.w	r3, r3, #3
 801380a:	2b03      	cmp	r3, #3
 801380c:	d101      	bne.n	8013812 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801380e:	2301      	movs	r3, #1
 8013810:	e099      	b.n	8013946 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8013812:	4b4f      	ldr	r3, [pc, #316]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	4a4e      	ldr	r2, [pc, #312]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 8013818:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801381c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801381e:	f7f4 ffd7 	bl	80087d0 <HAL_GetTick>
 8013822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013824:	e008      	b.n	8013838 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013826:	f7f4 ffd3 	bl	80087d0 <HAL_GetTick>
 801382a:	4602      	mov	r2, r0
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	1ad3      	subs	r3, r2, r3
 8013830:	2b02      	cmp	r3, #2
 8013832:	d901      	bls.n	8013838 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013834:	2303      	movs	r3, #3
 8013836:	e086      	b.n	8013946 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013838:	4b45      	ldr	r3, [pc, #276]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013840:	2b00      	cmp	r3, #0
 8013842:	d1f0      	bne.n	8013826 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8013844:	4b42      	ldr	r3, [pc, #264]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 8013846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013848:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	031b      	lsls	r3, r3, #12
 8013852:	493f      	ldr	r1, [pc, #252]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 8013854:	4313      	orrs	r3, r2
 8013856:	628b      	str	r3, [r1, #40]	@ 0x28
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	685b      	ldr	r3, [r3, #4]
 801385c:	3b01      	subs	r3, #1
 801385e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	689b      	ldr	r3, [r3, #8]
 8013866:	3b01      	subs	r3, #1
 8013868:	025b      	lsls	r3, r3, #9
 801386a:	b29b      	uxth	r3, r3
 801386c:	431a      	orrs	r2, r3
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	68db      	ldr	r3, [r3, #12]
 8013872:	3b01      	subs	r3, #1
 8013874:	041b      	lsls	r3, r3, #16
 8013876:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801387a:	431a      	orrs	r2, r3
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	691b      	ldr	r3, [r3, #16]
 8013880:	3b01      	subs	r3, #1
 8013882:	061b      	lsls	r3, r3, #24
 8013884:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013888:	4931      	ldr	r1, [pc, #196]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 801388a:	4313      	orrs	r3, r2
 801388c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801388e:	4b30      	ldr	r3, [pc, #192]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 8013890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013892:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	695b      	ldr	r3, [r3, #20]
 801389a:	492d      	ldr	r1, [pc, #180]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 801389c:	4313      	orrs	r3, r2
 801389e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80138a0:	4b2b      	ldr	r3, [pc, #172]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 80138a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138a4:	f023 0220 	bic.w	r2, r3, #32
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	699b      	ldr	r3, [r3, #24]
 80138ac:	4928      	ldr	r1, [pc, #160]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 80138ae:	4313      	orrs	r3, r2
 80138b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80138b2:	4b27      	ldr	r3, [pc, #156]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 80138b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138b6:	4a26      	ldr	r2, [pc, #152]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 80138b8:	f023 0310 	bic.w	r3, r3, #16
 80138bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80138be:	4b24      	ldr	r3, [pc, #144]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 80138c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80138c2:	4b24      	ldr	r3, [pc, #144]	@ (8013954 <RCCEx_PLL2_Config+0x160>)
 80138c4:	4013      	ands	r3, r2
 80138c6:	687a      	ldr	r2, [r7, #4]
 80138c8:	69d2      	ldr	r2, [r2, #28]
 80138ca:	00d2      	lsls	r2, r2, #3
 80138cc:	4920      	ldr	r1, [pc, #128]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 80138ce:	4313      	orrs	r3, r2
 80138d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80138d2:	4b1f      	ldr	r3, [pc, #124]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 80138d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138d6:	4a1e      	ldr	r2, [pc, #120]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 80138d8:	f043 0310 	orr.w	r3, r3, #16
 80138dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d106      	bne.n	80138f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80138e4:	4b1a      	ldr	r3, [pc, #104]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 80138e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138e8:	4a19      	ldr	r2, [pc, #100]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 80138ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80138ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80138f0:	e00f      	b.n	8013912 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80138f2:	683b      	ldr	r3, [r7, #0]
 80138f4:	2b01      	cmp	r3, #1
 80138f6:	d106      	bne.n	8013906 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80138f8:	4b15      	ldr	r3, [pc, #84]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 80138fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138fc:	4a14      	ldr	r2, [pc, #80]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 80138fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013902:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013904:	e005      	b.n	8013912 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8013906:	4b12      	ldr	r3, [pc, #72]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 8013908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801390a:	4a11      	ldr	r2, [pc, #68]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 801390c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013910:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8013912:	4b0f      	ldr	r3, [pc, #60]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	4a0e      	ldr	r2, [pc, #56]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 8013918:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801391c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801391e:	f7f4 ff57 	bl	80087d0 <HAL_GetTick>
 8013922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013924:	e008      	b.n	8013938 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013926:	f7f4 ff53 	bl	80087d0 <HAL_GetTick>
 801392a:	4602      	mov	r2, r0
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	1ad3      	subs	r3, r2, r3
 8013930:	2b02      	cmp	r3, #2
 8013932:	d901      	bls.n	8013938 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013934:	2303      	movs	r3, #3
 8013936:	e006      	b.n	8013946 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013938:	4b05      	ldr	r3, [pc, #20]	@ (8013950 <RCCEx_PLL2_Config+0x15c>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013940:	2b00      	cmp	r3, #0
 8013942:	d0f0      	beq.n	8013926 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8013944:	7bfb      	ldrb	r3, [r7, #15]
}
 8013946:	4618      	mov	r0, r3
 8013948:	3710      	adds	r7, #16
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}
 801394e:	bf00      	nop
 8013950:	58024400 	.word	0x58024400
 8013954:	ffff0007 	.word	0xffff0007

08013958 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b084      	sub	sp, #16
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
 8013960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013962:	2300      	movs	r3, #0
 8013964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013966:	4b53      	ldr	r3, [pc, #332]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801396a:	f003 0303 	and.w	r3, r3, #3
 801396e:	2b03      	cmp	r3, #3
 8013970:	d101      	bne.n	8013976 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8013972:	2301      	movs	r3, #1
 8013974:	e099      	b.n	8013aaa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8013976:	4b4f      	ldr	r3, [pc, #316]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	4a4e      	ldr	r2, [pc, #312]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 801397c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013982:	f7f4 ff25 	bl	80087d0 <HAL_GetTick>
 8013986:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013988:	e008      	b.n	801399c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801398a:	f7f4 ff21 	bl	80087d0 <HAL_GetTick>
 801398e:	4602      	mov	r2, r0
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	1ad3      	subs	r3, r2, r3
 8013994:	2b02      	cmp	r3, #2
 8013996:	d901      	bls.n	801399c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013998:	2303      	movs	r3, #3
 801399a:	e086      	b.n	8013aaa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801399c:	4b45      	ldr	r3, [pc, #276]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d1f0      	bne.n	801398a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80139a8:	4b42      	ldr	r3, [pc, #264]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 80139aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	051b      	lsls	r3, r3, #20
 80139b6:	493f      	ldr	r1, [pc, #252]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 80139b8:	4313      	orrs	r3, r2
 80139ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	3b01      	subs	r3, #1
 80139c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	689b      	ldr	r3, [r3, #8]
 80139ca:	3b01      	subs	r3, #1
 80139cc:	025b      	lsls	r3, r3, #9
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	431a      	orrs	r2, r3
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	68db      	ldr	r3, [r3, #12]
 80139d6:	3b01      	subs	r3, #1
 80139d8:	041b      	lsls	r3, r3, #16
 80139da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80139de:	431a      	orrs	r2, r3
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	691b      	ldr	r3, [r3, #16]
 80139e4:	3b01      	subs	r3, #1
 80139e6:	061b      	lsls	r3, r3, #24
 80139e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80139ec:	4931      	ldr	r1, [pc, #196]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 80139ee:	4313      	orrs	r3, r2
 80139f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80139f2:	4b30      	ldr	r3, [pc, #192]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 80139f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	695b      	ldr	r3, [r3, #20]
 80139fe:	492d      	ldr	r1, [pc, #180]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a00:	4313      	orrs	r3, r2
 8013a02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8013a04:	4b2b      	ldr	r3, [pc, #172]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a08:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	699b      	ldr	r3, [r3, #24]
 8013a10:	4928      	ldr	r1, [pc, #160]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a12:	4313      	orrs	r3, r2
 8013a14:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8013a16:	4b27      	ldr	r3, [pc, #156]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a1a:	4a26      	ldr	r2, [pc, #152]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013a20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8013a22:	4b24      	ldr	r3, [pc, #144]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013a26:	4b24      	ldr	r3, [pc, #144]	@ (8013ab8 <RCCEx_PLL3_Config+0x160>)
 8013a28:	4013      	ands	r3, r2
 8013a2a:	687a      	ldr	r2, [r7, #4]
 8013a2c:	69d2      	ldr	r2, [r2, #28]
 8013a2e:	00d2      	lsls	r2, r2, #3
 8013a30:	4920      	ldr	r1, [pc, #128]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a32:	4313      	orrs	r3, r2
 8013a34:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8013a36:	4b1f      	ldr	r3, [pc, #124]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013a40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d106      	bne.n	8013a56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8013a48:	4b1a      	ldr	r3, [pc, #104]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a4c:	4a19      	ldr	r2, [pc, #100]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8013a52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013a54:	e00f      	b.n	8013a76 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	2b01      	cmp	r3, #1
 8013a5a:	d106      	bne.n	8013a6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8013a5c:	4b15      	ldr	r3, [pc, #84]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a60:	4a14      	ldr	r2, [pc, #80]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8013a66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013a68:	e005      	b.n	8013a76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8013a6a:	4b12      	ldr	r3, [pc, #72]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a6e:	4a11      	ldr	r2, [pc, #68]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8013a74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8013a76:	4b0f      	ldr	r3, [pc, #60]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013a82:	f7f4 fea5 	bl	80087d0 <HAL_GetTick>
 8013a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013a88:	e008      	b.n	8013a9c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013a8a:	f7f4 fea1 	bl	80087d0 <HAL_GetTick>
 8013a8e:	4602      	mov	r2, r0
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	1ad3      	subs	r3, r2, r3
 8013a94:	2b02      	cmp	r3, #2
 8013a96:	d901      	bls.n	8013a9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013a98:	2303      	movs	r3, #3
 8013a9a:	e006      	b.n	8013aaa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013a9c:	4b05      	ldr	r3, [pc, #20]	@ (8013ab4 <RCCEx_PLL3_Config+0x15c>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d0f0      	beq.n	8013a8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8013aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3710      	adds	r7, #16
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}
 8013ab2:	bf00      	nop
 8013ab4:	58024400 	.word	0x58024400
 8013ab8:	ffff0007 	.word	0xffff0007

08013abc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b084      	sub	sp, #16
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d101      	bne.n	8013ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013aca:	2301      	movs	r3, #1
 8013acc:	e10f      	b.n	8013cee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	4a87      	ldr	r2, [pc, #540]	@ (8013cf8 <HAL_SPI_Init+0x23c>)
 8013ada:	4293      	cmp	r3, r2
 8013adc:	d00f      	beq.n	8013afe <HAL_SPI_Init+0x42>
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	4a86      	ldr	r2, [pc, #536]	@ (8013cfc <HAL_SPI_Init+0x240>)
 8013ae4:	4293      	cmp	r3, r2
 8013ae6:	d00a      	beq.n	8013afe <HAL_SPI_Init+0x42>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	4a84      	ldr	r2, [pc, #528]	@ (8013d00 <HAL_SPI_Init+0x244>)
 8013aee:	4293      	cmp	r3, r2
 8013af0:	d005      	beq.n	8013afe <HAL_SPI_Init+0x42>
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	68db      	ldr	r3, [r3, #12]
 8013af6:	2b0f      	cmp	r3, #15
 8013af8:	d901      	bls.n	8013afe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8013afa:	2301      	movs	r3, #1
 8013afc:	e0f7      	b.n	8013cee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f001 ff76 	bl	80159f0 <SPI_GetPacketSize>
 8013b04:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	4a7b      	ldr	r2, [pc, #492]	@ (8013cf8 <HAL_SPI_Init+0x23c>)
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	d00c      	beq.n	8013b2a <HAL_SPI_Init+0x6e>
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	4a79      	ldr	r2, [pc, #484]	@ (8013cfc <HAL_SPI_Init+0x240>)
 8013b16:	4293      	cmp	r3, r2
 8013b18:	d007      	beq.n	8013b2a <HAL_SPI_Init+0x6e>
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	4a78      	ldr	r2, [pc, #480]	@ (8013d00 <HAL_SPI_Init+0x244>)
 8013b20:	4293      	cmp	r3, r2
 8013b22:	d002      	beq.n	8013b2a <HAL_SPI_Init+0x6e>
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	2b08      	cmp	r3, #8
 8013b28:	d811      	bhi.n	8013b4e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8013b2e:	4a72      	ldr	r2, [pc, #456]	@ (8013cf8 <HAL_SPI_Init+0x23c>)
 8013b30:	4293      	cmp	r3, r2
 8013b32:	d009      	beq.n	8013b48 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	4a70      	ldr	r2, [pc, #448]	@ (8013cfc <HAL_SPI_Init+0x240>)
 8013b3a:	4293      	cmp	r3, r2
 8013b3c:	d004      	beq.n	8013b48 <HAL_SPI_Init+0x8c>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	4a6f      	ldr	r2, [pc, #444]	@ (8013d00 <HAL_SPI_Init+0x244>)
 8013b44:	4293      	cmp	r3, r2
 8013b46:	d104      	bne.n	8013b52 <HAL_SPI_Init+0x96>
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	2b10      	cmp	r3, #16
 8013b4c:	d901      	bls.n	8013b52 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8013b4e:	2301      	movs	r3, #1
 8013b50:	e0cd      	b.n	8013cee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8013b58:	b2db      	uxtb	r3, r3
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d106      	bne.n	8013b6c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2200      	movs	r2, #0
 8013b62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013b66:	6878      	ldr	r0, [r7, #4]
 8013b68:	f7f3 ff34 	bl	80079d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2202      	movs	r2, #2
 8013b70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	681a      	ldr	r2, [r3, #0]
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	f022 0201 	bic.w	r2, r2, #1
 8013b82:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	689b      	ldr	r3, [r3, #8]
 8013b8a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8013b8e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	699b      	ldr	r3, [r3, #24]
 8013b94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013b98:	d119      	bne.n	8013bce <HAL_SPI_Init+0x112>
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013ba2:	d103      	bne.n	8013bac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d008      	beq.n	8013bbe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d10c      	bne.n	8013bce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8013bb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013bbc:	d107      	bne.n	8013bce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	681a      	ldr	r2, [r3, #0]
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8013bcc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	685b      	ldr	r3, [r3, #4]
 8013bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d00f      	beq.n	8013bfa <HAL_SPI_Init+0x13e>
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	68db      	ldr	r3, [r3, #12]
 8013bde:	2b06      	cmp	r3, #6
 8013be0:	d90b      	bls.n	8013bfa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	430a      	orrs	r2, r1
 8013bf6:	601a      	str	r2, [r3, #0]
 8013bf8:	e007      	b.n	8013c0a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	681a      	ldr	r2, [r3, #0]
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013c08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	69da      	ldr	r2, [r3, #28]
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c12:	431a      	orrs	r2, r3
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	431a      	orrs	r2, r3
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c1c:	ea42 0103 	orr.w	r1, r2, r3
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	68da      	ldr	r2, [r3, #12]
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	430a      	orrs	r2, r1
 8013c2a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c34:	431a      	orrs	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c3a:	431a      	orrs	r2, r3
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	699b      	ldr	r3, [r3, #24]
 8013c40:	431a      	orrs	r2, r3
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	691b      	ldr	r3, [r3, #16]
 8013c46:	431a      	orrs	r2, r3
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	695b      	ldr	r3, [r3, #20]
 8013c4c:	431a      	orrs	r2, r3
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6a1b      	ldr	r3, [r3, #32]
 8013c52:	431a      	orrs	r2, r3
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	685b      	ldr	r3, [r3, #4]
 8013c58:	431a      	orrs	r2, r3
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013c5e:	431a      	orrs	r2, r3
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	689b      	ldr	r3, [r3, #8]
 8013c64:	431a      	orrs	r2, r3
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013c6a:	ea42 0103 	orr.w	r1, r2, r3
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	430a      	orrs	r2, r1
 8013c78:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	685b      	ldr	r3, [r3, #4]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d113      	bne.n	8013caa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	689b      	ldr	r3, [r3, #8]
 8013c88:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013c94:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	689b      	ldr	r3, [r3, #8]
 8013c9c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8013ca8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	f022 0201 	bic.w	r2, r2, #1
 8013cb8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	685b      	ldr	r3, [r3, #4]
 8013cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d00a      	beq.n	8013cdc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	68db      	ldr	r3, [r3, #12]
 8013ccc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	430a      	orrs	r2, r1
 8013cda:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2201      	movs	r2, #1
 8013ce8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8013cec:	2300      	movs	r3, #0
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	3710      	adds	r7, #16
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}
 8013cf6:	bf00      	nop
 8013cf8:	40013000 	.word	0x40013000
 8013cfc:	40003800 	.word	0x40003800
 8013d00:	40003c00 	.word	0x40003c00

08013d04 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b088      	sub	sp, #32
 8013d08:	af02      	add	r7, sp, #8
 8013d0a:	60f8      	str	r0, [r7, #12]
 8013d0c:	60b9      	str	r1, [r7, #8]
 8013d0e:	603b      	str	r3, [r7, #0]
 8013d10:	4613      	mov	r3, r2
 8013d12:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	3320      	adds	r3, #32
 8013d1a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013d1c:	f7f4 fd58 	bl	80087d0 <HAL_GetTick>
 8013d20:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8013d28:	b2db      	uxtb	r3, r3
 8013d2a:	2b01      	cmp	r3, #1
 8013d2c:	d001      	beq.n	8013d32 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8013d2e:	2302      	movs	r3, #2
 8013d30:	e1d1      	b.n	80140d6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d002      	beq.n	8013d3e <HAL_SPI_Transmit+0x3a>
 8013d38:	88fb      	ldrh	r3, [r7, #6]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d101      	bne.n	8013d42 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8013d3e:	2301      	movs	r3, #1
 8013d40:	e1c9      	b.n	80140d6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013d48:	2b01      	cmp	r3, #1
 8013d4a:	d101      	bne.n	8013d50 <HAL_SPI_Transmit+0x4c>
 8013d4c:	2302      	movs	r3, #2
 8013d4e:	e1c2      	b.n	80140d6 <HAL_SPI_Transmit+0x3d2>
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2201      	movs	r2, #1
 8013d54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2203      	movs	r2, #3
 8013d5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	2200      	movs	r2, #0
 8013d64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	68ba      	ldr	r2, [r7, #8]
 8013d6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	88fa      	ldrh	r2, [r7, #6]
 8013d72:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	88fa      	ldrh	r2, [r7, #6]
 8013d7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2200      	movs	r2, #0
 8013d82:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	2200      	movs	r2, #0
 8013d88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	2200      	movs	r2, #0
 8013d90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	2200      	movs	r2, #0
 8013d98:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	689b      	ldr	r3, [r3, #8]
 8013da4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8013da8:	d108      	bne.n	8013dbc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	681a      	ldr	r2, [r3, #0]
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013db8:	601a      	str	r2, [r3, #0]
 8013dba:	e009      	b.n	8013dd0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	68db      	ldr	r3, [r3, #12]
 8013dc2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8013dce:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	685a      	ldr	r2, [r3, #4]
 8013dd6:	4b96      	ldr	r3, [pc, #600]	@ (8014030 <HAL_SPI_Transmit+0x32c>)
 8013dd8:	4013      	ands	r3, r2
 8013dda:	88f9      	ldrh	r1, [r7, #6]
 8013ddc:	68fa      	ldr	r2, [r7, #12]
 8013dde:	6812      	ldr	r2, [r2, #0]
 8013de0:	430b      	orrs	r3, r1
 8013de2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	681a      	ldr	r2, [r3, #0]
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	f042 0201 	orr.w	r2, r2, #1
 8013df2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013dfc:	d107      	bne.n	8013e0e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	681a      	ldr	r2, [r3, #0]
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013e0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	68db      	ldr	r3, [r3, #12]
 8013e12:	2b0f      	cmp	r3, #15
 8013e14:	d947      	bls.n	8013ea6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8013e16:	e03f      	b.n	8013e98 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	695b      	ldr	r3, [r3, #20]
 8013e1e:	f003 0302 	and.w	r3, r3, #2
 8013e22:	2b02      	cmp	r3, #2
 8013e24:	d114      	bne.n	8013e50 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	6812      	ldr	r2, [r2, #0]
 8013e30:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013e36:	1d1a      	adds	r2, r3, #4
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013e42:	b29b      	uxth	r3, r3
 8013e44:	3b01      	subs	r3, #1
 8013e46:	b29a      	uxth	r2, r3
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013e4e:	e023      	b.n	8013e98 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013e50:	f7f4 fcbe 	bl	80087d0 <HAL_GetTick>
 8013e54:	4602      	mov	r2, r0
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	1ad3      	subs	r3, r2, r3
 8013e5a:	683a      	ldr	r2, [r7, #0]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d803      	bhi.n	8013e68 <HAL_SPI_Transmit+0x164>
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e66:	d102      	bne.n	8013e6e <HAL_SPI_Transmit+0x16a>
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d114      	bne.n	8013e98 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8013e6e:	68f8      	ldr	r0, [r7, #12]
 8013e70:	f001 fcf0 	bl	8015854 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013e7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	2201      	movs	r2, #1
 8013e88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8013e94:	2303      	movs	r3, #3
 8013e96:	e11e      	b.n	80140d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013e9e:	b29b      	uxth	r3, r3
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d1b9      	bne.n	8013e18 <HAL_SPI_Transmit+0x114>
 8013ea4:	e0f1      	b.n	801408a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	68db      	ldr	r3, [r3, #12]
 8013eaa:	2b07      	cmp	r3, #7
 8013eac:	f240 80e6 	bls.w	801407c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8013eb0:	e05d      	b.n	8013f6e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	695b      	ldr	r3, [r3, #20]
 8013eb8:	f003 0302 	and.w	r3, r3, #2
 8013ebc:	2b02      	cmp	r3, #2
 8013ebe:	d132      	bne.n	8013f26 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013ec6:	b29b      	uxth	r3, r3
 8013ec8:	2b01      	cmp	r3, #1
 8013eca:	d918      	bls.n	8013efe <HAL_SPI_Transmit+0x1fa>
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d014      	beq.n	8013efe <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	6812      	ldr	r2, [r2, #0]
 8013ede:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ee4:	1d1a      	adds	r2, r3, #4
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013ef0:	b29b      	uxth	r3, r3
 8013ef2:	3b02      	subs	r3, #2
 8013ef4:	b29a      	uxth	r2, r3
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013efc:	e037      	b.n	8013f6e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013f02:	881a      	ldrh	r2, [r3, #0]
 8013f04:	697b      	ldr	r3, [r7, #20]
 8013f06:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013f0c:	1c9a      	adds	r2, r3, #2
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013f18:	b29b      	uxth	r3, r3
 8013f1a:	3b01      	subs	r3, #1
 8013f1c:	b29a      	uxth	r2, r3
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013f24:	e023      	b.n	8013f6e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013f26:	f7f4 fc53 	bl	80087d0 <HAL_GetTick>
 8013f2a:	4602      	mov	r2, r0
 8013f2c:	693b      	ldr	r3, [r7, #16]
 8013f2e:	1ad3      	subs	r3, r2, r3
 8013f30:	683a      	ldr	r2, [r7, #0]
 8013f32:	429a      	cmp	r2, r3
 8013f34:	d803      	bhi.n	8013f3e <HAL_SPI_Transmit+0x23a>
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f3c:	d102      	bne.n	8013f44 <HAL_SPI_Transmit+0x240>
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d114      	bne.n	8013f6e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8013f44:	68f8      	ldr	r0, [r7, #12]
 8013f46:	f001 fc85 	bl	8015854 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013f50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	2201      	movs	r2, #1
 8013f5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	2200      	movs	r2, #0
 8013f66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8013f6a:	2303      	movs	r3, #3
 8013f6c:	e0b3      	b.n	80140d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013f74:	b29b      	uxth	r3, r3
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d19b      	bne.n	8013eb2 <HAL_SPI_Transmit+0x1ae>
 8013f7a:	e086      	b.n	801408a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	695b      	ldr	r3, [r3, #20]
 8013f82:	f003 0302 	and.w	r3, r3, #2
 8013f86:	2b02      	cmp	r3, #2
 8013f88:	d154      	bne.n	8014034 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013f90:	b29b      	uxth	r3, r3
 8013f92:	2b03      	cmp	r3, #3
 8013f94:	d918      	bls.n	8013fc8 <HAL_SPI_Transmit+0x2c4>
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f9a:	2b40      	cmp	r3, #64	@ 0x40
 8013f9c:	d914      	bls.n	8013fc8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	6812      	ldr	r2, [r2, #0]
 8013fa8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013fae:	1d1a      	adds	r2, r3, #4
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013fba:	b29b      	uxth	r3, r3
 8013fbc:	3b04      	subs	r3, #4
 8013fbe:	b29a      	uxth	r2, r3
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013fc6:	e059      	b.n	801407c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013fce:	b29b      	uxth	r3, r3
 8013fd0:	2b01      	cmp	r3, #1
 8013fd2:	d917      	bls.n	8014004 <HAL_SPI_Transmit+0x300>
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d013      	beq.n	8014004 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013fe0:	881a      	ldrh	r2, [r3, #0]
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013fea:	1c9a      	adds	r2, r3, #2
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013ff6:	b29b      	uxth	r3, r3
 8013ff8:	3b02      	subs	r3, #2
 8013ffa:	b29a      	uxth	r2, r3
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014002:	e03b      	b.n	801407c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	3320      	adds	r3, #32
 801400e:	7812      	ldrb	r2, [r2, #0]
 8014010:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014016:	1c5a      	adds	r2, r3, #1
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014022:	b29b      	uxth	r3, r3
 8014024:	3b01      	subs	r3, #1
 8014026:	b29a      	uxth	r2, r3
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801402e:	e025      	b.n	801407c <HAL_SPI_Transmit+0x378>
 8014030:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014034:	f7f4 fbcc 	bl	80087d0 <HAL_GetTick>
 8014038:	4602      	mov	r2, r0
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	1ad3      	subs	r3, r2, r3
 801403e:	683a      	ldr	r2, [r7, #0]
 8014040:	429a      	cmp	r2, r3
 8014042:	d803      	bhi.n	801404c <HAL_SPI_Transmit+0x348>
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801404a:	d102      	bne.n	8014052 <HAL_SPI_Transmit+0x34e>
 801404c:	683b      	ldr	r3, [r7, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d114      	bne.n	801407c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014052:	68f8      	ldr	r0, [r7, #12]
 8014054:	f001 fbfe 	bl	8015854 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801405e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	2201      	movs	r2, #1
 801406c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	2200      	movs	r2, #0
 8014074:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014078:	2303      	movs	r3, #3
 801407a:	e02c      	b.n	80140d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014082:	b29b      	uxth	r3, r3
 8014084:	2b00      	cmp	r3, #0
 8014086:	f47f af79 	bne.w	8013f7c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801408a:	693b      	ldr	r3, [r7, #16]
 801408c:	9300      	str	r3, [sp, #0]
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	2200      	movs	r2, #0
 8014092:	2108      	movs	r1, #8
 8014094:	68f8      	ldr	r0, [r7, #12]
 8014096:	f001 fc7d 	bl	8015994 <SPI_WaitOnFlagUntilTimeout>
 801409a:	4603      	mov	r3, r0
 801409c:	2b00      	cmp	r3, #0
 801409e:	d007      	beq.n	80140b0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80140a6:	f043 0220 	orr.w	r2, r3, #32
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80140b0:	68f8      	ldr	r0, [r7, #12]
 80140b2:	f001 fbcf 	bl	8015854 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	2201      	movs	r2, #1
 80140ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	2200      	movs	r2, #0
 80140c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d001      	beq.n	80140d4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80140d0:	2301      	movs	r3, #1
 80140d2:	e000      	b.n	80140d6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80140d4:	2300      	movs	r3, #0
  }
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3718      	adds	r7, #24
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}
 80140de:	bf00      	nop

080140e0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b088      	sub	sp, #32
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	60f8      	str	r0, [r7, #12]
 80140e8:	60b9      	str	r1, [r7, #8]
 80140ea:	603b      	str	r3, [r7, #0]
 80140ec:	4613      	mov	r3, r2
 80140ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140f4:	095b      	lsrs	r3, r3, #5
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	3301      	adds	r3, #1
 80140fa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	3330      	adds	r3, #48	@ 0x30
 8014102:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014104:	f7f4 fb64 	bl	80087d0 <HAL_GetTick>
 8014108:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014110:	b2db      	uxtb	r3, r3
 8014112:	2b01      	cmp	r3, #1
 8014114:	d001      	beq.n	801411a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8014116:	2302      	movs	r3, #2
 8014118:	e250      	b.n	80145bc <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d002      	beq.n	8014126 <HAL_SPI_Receive+0x46>
 8014120:	88fb      	ldrh	r3, [r7, #6]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d101      	bne.n	801412a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8014126:	2301      	movs	r3, #1
 8014128:	e248      	b.n	80145bc <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014130:	2b01      	cmp	r3, #1
 8014132:	d101      	bne.n	8014138 <HAL_SPI_Receive+0x58>
 8014134:	2302      	movs	r3, #2
 8014136:	e241      	b.n	80145bc <HAL_SPI_Receive+0x4dc>
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	2201      	movs	r2, #1
 801413c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	2204      	movs	r2, #4
 8014144:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	2200      	movs	r2, #0
 801414c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	68ba      	ldr	r2, [r7, #8]
 8014154:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	88fa      	ldrh	r2, [r7, #6]
 801415a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	88fa      	ldrh	r2, [r7, #6]
 8014162:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	2200      	movs	r2, #0
 801416a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	2200      	movs	r2, #0
 8014170:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	2200      	movs	r2, #0
 8014178:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	2200      	movs	r2, #0
 8014180:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	2200      	movs	r2, #0
 8014186:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	689b      	ldr	r3, [r3, #8]
 801418c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014190:	d108      	bne.n	80141a4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	681a      	ldr	r2, [r3, #0]
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80141a0:	601a      	str	r2, [r3, #0]
 80141a2:	e009      	b.n	80141b8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	68db      	ldr	r3, [r3, #12]
 80141aa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80141b6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	685a      	ldr	r2, [r3, #4]
 80141be:	4b95      	ldr	r3, [pc, #596]	@ (8014414 <HAL_SPI_Receive+0x334>)
 80141c0:	4013      	ands	r3, r2
 80141c2:	88f9      	ldrh	r1, [r7, #6]
 80141c4:	68fa      	ldr	r2, [r7, #12]
 80141c6:	6812      	ldr	r2, [r2, #0]
 80141c8:	430b      	orrs	r3, r1
 80141ca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	681a      	ldr	r2, [r3, #0]
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	f042 0201 	orr.w	r2, r2, #1
 80141da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	685b      	ldr	r3, [r3, #4]
 80141e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80141e4:	d107      	bne.n	80141f6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	681a      	ldr	r2, [r3, #0]
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80141f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	68db      	ldr	r3, [r3, #12]
 80141fa:	2b0f      	cmp	r3, #15
 80141fc:	d96c      	bls.n	80142d8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80141fe:	e064      	b.n	80142ca <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	695b      	ldr	r3, [r3, #20]
 8014206:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	695b      	ldr	r3, [r3, #20]
 801420e:	f003 0301 	and.w	r3, r3, #1
 8014212:	2b01      	cmp	r3, #1
 8014214:	d114      	bne.n	8014240 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	681a      	ldr	r2, [r3, #0]
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801421e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014220:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014226:	1d1a      	adds	r2, r3, #4
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014232:	b29b      	uxth	r3, r3
 8014234:	3b01      	subs	r3, #1
 8014236:	b29a      	uxth	r2, r3
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801423e:	e044      	b.n	80142ca <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014246:	b29b      	uxth	r3, r3
 8014248:	8bfa      	ldrh	r2, [r7, #30]
 801424a:	429a      	cmp	r2, r3
 801424c:	d919      	bls.n	8014282 <HAL_SPI_Receive+0x1a2>
 801424e:	693b      	ldr	r3, [r7, #16]
 8014250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014254:	2b00      	cmp	r3, #0
 8014256:	d014      	beq.n	8014282 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	681a      	ldr	r2, [r3, #0]
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014260:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014262:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014268:	1d1a      	adds	r2, r3, #4
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014274:	b29b      	uxth	r3, r3
 8014276:	3b01      	subs	r3, #1
 8014278:	b29a      	uxth	r2, r3
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014280:	e023      	b.n	80142ca <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014282:	f7f4 faa5 	bl	80087d0 <HAL_GetTick>
 8014286:	4602      	mov	r2, r0
 8014288:	697b      	ldr	r3, [r7, #20]
 801428a:	1ad3      	subs	r3, r2, r3
 801428c:	683a      	ldr	r2, [r7, #0]
 801428e:	429a      	cmp	r2, r3
 8014290:	d803      	bhi.n	801429a <HAL_SPI_Receive+0x1ba>
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014298:	d102      	bne.n	80142a0 <HAL_SPI_Receive+0x1c0>
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d114      	bne.n	80142ca <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80142a0:	68f8      	ldr	r0, [r7, #12]
 80142a2:	f001 fad7 	bl	8015854 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80142ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	2201      	movs	r2, #1
 80142ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	2200      	movs	r2, #0
 80142c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80142c6:	2303      	movs	r3, #3
 80142c8:	e178      	b.n	80145bc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d194      	bne.n	8014200 <HAL_SPI_Receive+0x120>
 80142d6:	e15e      	b.n	8014596 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	68db      	ldr	r3, [r3, #12]
 80142dc:	2b07      	cmp	r3, #7
 80142de:	f240 8153 	bls.w	8014588 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80142e2:	e08f      	b.n	8014404 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	695b      	ldr	r3, [r3, #20]
 80142ea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	695b      	ldr	r3, [r3, #20]
 80142f2:	f003 0301 	and.w	r3, r3, #1
 80142f6:	2b01      	cmp	r3, #1
 80142f8:	d114      	bne.n	8014324 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80142fe:	69ba      	ldr	r2, [r7, #24]
 8014300:	8812      	ldrh	r2, [r2, #0]
 8014302:	b292      	uxth	r2, r2
 8014304:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801430a:	1c9a      	adds	r2, r3, #2
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014316:	b29b      	uxth	r3, r3
 8014318:	3b01      	subs	r3, #1
 801431a:	b29a      	uxth	r2, r3
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014322:	e06f      	b.n	8014404 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801432a:	b29b      	uxth	r3, r3
 801432c:	8bfa      	ldrh	r2, [r7, #30]
 801432e:	429a      	cmp	r2, r3
 8014330:	d924      	bls.n	801437c <HAL_SPI_Receive+0x29c>
 8014332:	693b      	ldr	r3, [r7, #16]
 8014334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014338:	2b00      	cmp	r3, #0
 801433a:	d01f      	beq.n	801437c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014340:	69ba      	ldr	r2, [r7, #24]
 8014342:	8812      	ldrh	r2, [r2, #0]
 8014344:	b292      	uxth	r2, r2
 8014346:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801434c:	1c9a      	adds	r2, r3, #2
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014356:	69ba      	ldr	r2, [r7, #24]
 8014358:	8812      	ldrh	r2, [r2, #0]
 801435a:	b292      	uxth	r2, r2
 801435c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014362:	1c9a      	adds	r2, r3, #2
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801436e:	b29b      	uxth	r3, r3
 8014370:	3b02      	subs	r3, #2
 8014372:	b29a      	uxth	r2, r3
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801437a:	e043      	b.n	8014404 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014382:	b29b      	uxth	r3, r3
 8014384:	2b01      	cmp	r3, #1
 8014386:	d119      	bne.n	80143bc <HAL_SPI_Receive+0x2dc>
 8014388:	693b      	ldr	r3, [r7, #16]
 801438a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801438e:	2b00      	cmp	r3, #0
 8014390:	d014      	beq.n	80143bc <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014396:	69ba      	ldr	r2, [r7, #24]
 8014398:	8812      	ldrh	r2, [r2, #0]
 801439a:	b292      	uxth	r2, r2
 801439c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80143a2:	1c9a      	adds	r2, r3, #2
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80143ae:	b29b      	uxth	r3, r3
 80143b0:	3b01      	subs	r3, #1
 80143b2:	b29a      	uxth	r2, r3
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80143ba:	e023      	b.n	8014404 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80143bc:	f7f4 fa08 	bl	80087d0 <HAL_GetTick>
 80143c0:	4602      	mov	r2, r0
 80143c2:	697b      	ldr	r3, [r7, #20]
 80143c4:	1ad3      	subs	r3, r2, r3
 80143c6:	683a      	ldr	r2, [r7, #0]
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d803      	bhi.n	80143d4 <HAL_SPI_Receive+0x2f4>
 80143cc:	683b      	ldr	r3, [r7, #0]
 80143ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143d2:	d102      	bne.n	80143da <HAL_SPI_Receive+0x2fa>
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d114      	bne.n	8014404 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80143da:	68f8      	ldr	r0, [r7, #12]
 80143dc:	f001 fa3a 	bl	8015854 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80143e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	2201      	movs	r2, #1
 80143f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2200      	movs	r2, #0
 80143fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014400:	2303      	movs	r3, #3
 8014402:	e0db      	b.n	80145bc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801440a:	b29b      	uxth	r3, r3
 801440c:	2b00      	cmp	r3, #0
 801440e:	f47f af69 	bne.w	80142e4 <HAL_SPI_Receive+0x204>
 8014412:	e0c0      	b.n	8014596 <HAL_SPI_Receive+0x4b6>
 8014414:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	695b      	ldr	r3, [r3, #20]
 801441e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	695b      	ldr	r3, [r3, #20]
 8014426:	f003 0301 	and.w	r3, r3, #1
 801442a:	2b01      	cmp	r3, #1
 801442c:	d117      	bne.n	801445e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801443a:	7812      	ldrb	r2, [r2, #0]
 801443c:	b2d2      	uxtb	r2, r2
 801443e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014444:	1c5a      	adds	r2, r3, #1
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014450:	b29b      	uxth	r3, r3
 8014452:	3b01      	subs	r3, #1
 8014454:	b29a      	uxth	r2, r3
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801445c:	e094      	b.n	8014588 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014464:	b29b      	uxth	r3, r3
 8014466:	8bfa      	ldrh	r2, [r7, #30]
 8014468:	429a      	cmp	r2, r3
 801446a:	d946      	bls.n	80144fa <HAL_SPI_Receive+0x41a>
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014472:	2b00      	cmp	r3, #0
 8014474:	d041      	beq.n	80144fa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014482:	7812      	ldrb	r2, [r2, #0]
 8014484:	b2d2      	uxtb	r2, r2
 8014486:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801448c:	1c5a      	adds	r2, r3, #1
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801449e:	7812      	ldrb	r2, [r2, #0]
 80144a0:	b2d2      	uxtb	r2, r2
 80144a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80144a8:	1c5a      	adds	r2, r3, #1
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80144ba:	7812      	ldrb	r2, [r2, #0]
 80144bc:	b2d2      	uxtb	r2, r2
 80144be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80144c4:	1c5a      	adds	r2, r3, #1
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80144d6:	7812      	ldrb	r2, [r2, #0]
 80144d8:	b2d2      	uxtb	r2, r2
 80144da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80144e0:	1c5a      	adds	r2, r3, #1
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80144ec:	b29b      	uxth	r3, r3
 80144ee:	3b04      	subs	r3, #4
 80144f0:	b29a      	uxth	r2, r3
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80144f8:	e046      	b.n	8014588 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014500:	b29b      	uxth	r3, r3
 8014502:	2b03      	cmp	r3, #3
 8014504:	d81c      	bhi.n	8014540 <HAL_SPI_Receive+0x460>
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801450c:	2b00      	cmp	r3, #0
 801450e:	d017      	beq.n	8014540 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801451c:	7812      	ldrb	r2, [r2, #0]
 801451e:	b2d2      	uxtb	r2, r2
 8014520:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014526:	1c5a      	adds	r2, r3, #1
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014532:	b29b      	uxth	r3, r3
 8014534:	3b01      	subs	r3, #1
 8014536:	b29a      	uxth	r2, r3
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801453e:	e023      	b.n	8014588 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014540:	f7f4 f946 	bl	80087d0 <HAL_GetTick>
 8014544:	4602      	mov	r2, r0
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	1ad3      	subs	r3, r2, r3
 801454a:	683a      	ldr	r2, [r7, #0]
 801454c:	429a      	cmp	r2, r3
 801454e:	d803      	bhi.n	8014558 <HAL_SPI_Receive+0x478>
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014556:	d102      	bne.n	801455e <HAL_SPI_Receive+0x47e>
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d114      	bne.n	8014588 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801455e:	68f8      	ldr	r0, [r7, #12]
 8014560:	f001 f978 	bl	8015854 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801456a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	2201      	movs	r2, #1
 8014578:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	2200      	movs	r2, #0
 8014580:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014584:	2303      	movs	r3, #3
 8014586:	e019      	b.n	80145bc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801458e:	b29b      	uxth	r3, r3
 8014590:	2b00      	cmp	r3, #0
 8014592:	f47f af41 	bne.w	8014418 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014596:	68f8      	ldr	r0, [r7, #12]
 8014598:	f001 f95c 	bl	8015854 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	2201      	movs	r2, #1
 80145a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	2200      	movs	r2, #0
 80145a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d001      	beq.n	80145ba <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80145b6:	2301      	movs	r3, #1
 80145b8:	e000      	b.n	80145bc <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80145ba:	2300      	movs	r3, #0
  }
}
 80145bc:	4618      	mov	r0, r3
 80145be:	3720      	adds	r7, #32
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}

080145c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b08e      	sub	sp, #56	@ 0x38
 80145c8:	af02      	add	r7, sp, #8
 80145ca:	60f8      	str	r0, [r7, #12]
 80145cc:	60b9      	str	r1, [r7, #8]
 80145ce:	607a      	str	r2, [r7, #4]
 80145d0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	3320      	adds	r3, #32
 80145d8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	3330      	adds	r3, #48	@ 0x30
 80145e0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145e6:	095b      	lsrs	r3, r3, #5
 80145e8:	b29b      	uxth	r3, r3
 80145ea:	3301      	adds	r3, #1
 80145ec:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80145ee:	f7f4 f8ef 	bl	80087d0 <HAL_GetTick>
 80145f2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80145f4:	887b      	ldrh	r3, [r7, #2]
 80145f6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80145f8:	887b      	ldrh	r3, [r7, #2]
 80145fa:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014602:	b2db      	uxtb	r3, r3
 8014604:	2b01      	cmp	r3, #1
 8014606:	d001      	beq.n	801460c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8014608:	2302      	movs	r3, #2
 801460a:	e310      	b.n	8014c2e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 801460c:	68bb      	ldr	r3, [r7, #8]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d005      	beq.n	801461e <HAL_SPI_TransmitReceive+0x5a>
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d002      	beq.n	801461e <HAL_SPI_TransmitReceive+0x5a>
 8014618:	887b      	ldrh	r3, [r7, #2]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d101      	bne.n	8014622 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 801461e:	2301      	movs	r3, #1
 8014620:	e305      	b.n	8014c2e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014628:	2b01      	cmp	r3, #1
 801462a:	d101      	bne.n	8014630 <HAL_SPI_TransmitReceive+0x6c>
 801462c:	2302      	movs	r3, #2
 801462e:	e2fe      	b.n	8014c2e <HAL_SPI_TransmitReceive+0x66a>
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	2201      	movs	r2, #1
 8014634:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	2205      	movs	r2, #5
 801463c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	2200      	movs	r2, #0
 8014644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	687a      	ldr	r2, [r7, #4]
 801464c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	887a      	ldrh	r2, [r7, #2]
 8014652:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	887a      	ldrh	r2, [r7, #2]
 801465a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	68ba      	ldr	r2, [r7, #8]
 8014662:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	887a      	ldrh	r2, [r7, #2]
 8014668:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	887a      	ldrh	r2, [r7, #2]
 8014670:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	2200      	movs	r2, #0
 8014678:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	2200      	movs	r2, #0
 801467e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	68da      	ldr	r2, [r3, #12]
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 801468e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	4a70      	ldr	r2, [pc, #448]	@ (8014858 <HAL_SPI_TransmitReceive+0x294>)
 8014696:	4293      	cmp	r3, r2
 8014698:	d009      	beq.n	80146ae <HAL_SPI_TransmitReceive+0xea>
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	4a6f      	ldr	r2, [pc, #444]	@ (801485c <HAL_SPI_TransmitReceive+0x298>)
 80146a0:	4293      	cmp	r3, r2
 80146a2:	d004      	beq.n	80146ae <HAL_SPI_TransmitReceive+0xea>
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	4a6d      	ldr	r2, [pc, #436]	@ (8014860 <HAL_SPI_TransmitReceive+0x29c>)
 80146aa:	4293      	cmp	r3, r2
 80146ac:	d102      	bne.n	80146b4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80146ae:	2310      	movs	r3, #16
 80146b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80146b2:	e001      	b.n	80146b8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80146b4:	2308      	movs	r3, #8
 80146b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	685a      	ldr	r2, [r3, #4]
 80146be:	4b69      	ldr	r3, [pc, #420]	@ (8014864 <HAL_SPI_TransmitReceive+0x2a0>)
 80146c0:	4013      	ands	r3, r2
 80146c2:	8879      	ldrh	r1, [r7, #2]
 80146c4:	68fa      	ldr	r2, [r7, #12]
 80146c6:	6812      	ldr	r2, [r2, #0]
 80146c8:	430b      	orrs	r3, r1
 80146ca:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	681a      	ldr	r2, [r3, #0]
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	f042 0201 	orr.w	r2, r2, #1
 80146da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	685b      	ldr	r3, [r3, #4]
 80146e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80146e4:	d107      	bne.n	80146f6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	681a      	ldr	r2, [r3, #0]
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80146f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	68db      	ldr	r3, [r3, #12]
 80146fa:	2b0f      	cmp	r3, #15
 80146fc:	f240 80a2 	bls.w	8014844 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8014700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014702:	089b      	lsrs	r3, r3, #2
 8014704:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014706:	e094      	b.n	8014832 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	695b      	ldr	r3, [r3, #20]
 801470e:	f003 0302 	and.w	r3, r3, #2
 8014712:	2b02      	cmp	r3, #2
 8014714:	d120      	bne.n	8014758 <HAL_SPI_TransmitReceive+0x194>
 8014716:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014718:	2b00      	cmp	r3, #0
 801471a:	d01d      	beq.n	8014758 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 801471c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801471e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8014720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014722:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014724:	429a      	cmp	r2, r3
 8014726:	d217      	bcs.n	8014758 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	6812      	ldr	r2, [r2, #0]
 8014732:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014738:	1d1a      	adds	r2, r3, #4
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014744:	b29b      	uxth	r3, r3
 8014746:	3b01      	subs	r3, #1
 8014748:	b29a      	uxth	r2, r3
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014756:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	695b      	ldr	r3, [r3, #20]
 801475e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8014760:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014762:	2b00      	cmp	r3, #0
 8014764:	d065      	beq.n	8014832 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	695b      	ldr	r3, [r3, #20]
 801476c:	f003 0301 	and.w	r3, r3, #1
 8014770:	2b01      	cmp	r3, #1
 8014772:	d118      	bne.n	80147a6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	681a      	ldr	r2, [r3, #0]
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801477c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801477e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014784:	1d1a      	adds	r2, r3, #4
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014790:	b29b      	uxth	r3, r3
 8014792:	3b01      	subs	r3, #1
 8014794:	b29a      	uxth	r2, r3
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80147a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80147a4:	e045      	b.n	8014832 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80147a6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80147a8:	8bfb      	ldrh	r3, [r7, #30]
 80147aa:	429a      	cmp	r2, r3
 80147ac:	d21d      	bcs.n	80147ea <HAL_SPI_TransmitReceive+0x226>
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d018      	beq.n	80147ea <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	681a      	ldr	r2, [r3, #0]
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80147c2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147c8:	1d1a      	adds	r2, r3, #4
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80147d4:	b29b      	uxth	r3, r3
 80147d6:	3b01      	subs	r3, #1
 80147d8:	b29a      	uxth	r2, r3
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80147e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80147e8:	e023      	b.n	8014832 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80147ea:	f7f3 fff1 	bl	80087d0 <HAL_GetTick>
 80147ee:	4602      	mov	r2, r0
 80147f0:	69bb      	ldr	r3, [r7, #24]
 80147f2:	1ad3      	subs	r3, r2, r3
 80147f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d803      	bhi.n	8014802 <HAL_SPI_TransmitReceive+0x23e>
 80147fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014800:	d102      	bne.n	8014808 <HAL_SPI_TransmitReceive+0x244>
 8014802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014804:	2b00      	cmp	r3, #0
 8014806:	d114      	bne.n	8014832 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8014808:	68f8      	ldr	r0, [r7, #12]
 801480a:	f001 f823 	bl	8015854 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014814:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	2201      	movs	r2, #1
 8014822:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	2200      	movs	r2, #0
 801482a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801482e:	2303      	movs	r3, #3
 8014830:	e1fd      	b.n	8014c2e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014832:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014834:	2b00      	cmp	r3, #0
 8014836:	f47f af67 	bne.w	8014708 <HAL_SPI_TransmitReceive+0x144>
 801483a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801483c:	2b00      	cmp	r3, #0
 801483e:	f47f af63 	bne.w	8014708 <HAL_SPI_TransmitReceive+0x144>
 8014842:	e1ce      	b.n	8014be2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	68db      	ldr	r3, [r3, #12]
 8014848:	2b07      	cmp	r3, #7
 801484a:	f240 81c2 	bls.w	8014bd2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 801484e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014850:	085b      	lsrs	r3, r3, #1
 8014852:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014854:	e0c9      	b.n	80149ea <HAL_SPI_TransmitReceive+0x426>
 8014856:	bf00      	nop
 8014858:	40013000 	.word	0x40013000
 801485c:	40003800 	.word	0x40003800
 8014860:	40003c00 	.word	0x40003c00
 8014864:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	695b      	ldr	r3, [r3, #20]
 801486e:	f003 0302 	and.w	r3, r3, #2
 8014872:	2b02      	cmp	r3, #2
 8014874:	d11f      	bne.n	80148b6 <HAL_SPI_TransmitReceive+0x2f2>
 8014876:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014878:	2b00      	cmp	r3, #0
 801487a:	d01c      	beq.n	80148b6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 801487c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801487e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8014880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014882:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014884:	429a      	cmp	r2, r3
 8014886:	d216      	bcs.n	80148b6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801488c:	881a      	ldrh	r2, [r3, #0]
 801488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014890:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014896:	1c9a      	adds	r2, r3, #2
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	3b01      	subs	r3, #1
 80148a6:	b29a      	uxth	r2, r3
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80148b4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	695b      	ldr	r3, [r3, #20]
 80148bc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80148be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	f000 8092 	beq.w	80149ea <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	695b      	ldr	r3, [r3, #20]
 80148cc:	f003 0301 	and.w	r3, r3, #1
 80148d0:	2b01      	cmp	r3, #1
 80148d2:	d118      	bne.n	8014906 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80148d8:	6a3a      	ldr	r2, [r7, #32]
 80148da:	8812      	ldrh	r2, [r2, #0]
 80148dc:	b292      	uxth	r2, r2
 80148de:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80148e4:	1c9a      	adds	r2, r3, #2
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80148f0:	b29b      	uxth	r3, r3
 80148f2:	3b01      	subs	r3, #1
 80148f4:	b29a      	uxth	r2, r3
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014902:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014904:	e071      	b.n	80149ea <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014906:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014908:	8bfb      	ldrh	r3, [r7, #30]
 801490a:	429a      	cmp	r2, r3
 801490c:	d228      	bcs.n	8014960 <HAL_SPI_TransmitReceive+0x39c>
 801490e:	697b      	ldr	r3, [r7, #20]
 8014910:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014914:	2b00      	cmp	r3, #0
 8014916:	d023      	beq.n	8014960 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801491c:	6a3a      	ldr	r2, [r7, #32]
 801491e:	8812      	ldrh	r2, [r2, #0]
 8014920:	b292      	uxth	r2, r2
 8014922:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014928:	1c9a      	adds	r2, r3, #2
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014932:	6a3a      	ldr	r2, [r7, #32]
 8014934:	8812      	ldrh	r2, [r2, #0]
 8014936:	b292      	uxth	r2, r2
 8014938:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801493e:	1c9a      	adds	r2, r3, #2
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801494a:	b29b      	uxth	r3, r3
 801494c:	3b02      	subs	r3, #2
 801494e:	b29a      	uxth	r2, r3
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801495c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801495e:	e044      	b.n	80149ea <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8014960:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014962:	2b01      	cmp	r3, #1
 8014964:	d11d      	bne.n	80149a2 <HAL_SPI_TransmitReceive+0x3de>
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801496c:	2b00      	cmp	r3, #0
 801496e:	d018      	beq.n	80149a2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014974:	6a3a      	ldr	r2, [r7, #32]
 8014976:	8812      	ldrh	r2, [r2, #0]
 8014978:	b292      	uxth	r2, r2
 801497a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014980:	1c9a      	adds	r2, r3, #2
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801498c:	b29b      	uxth	r3, r3
 801498e:	3b01      	subs	r3, #1
 8014990:	b29a      	uxth	r2, r3
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801499e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80149a0:	e023      	b.n	80149ea <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80149a2:	f7f3 ff15 	bl	80087d0 <HAL_GetTick>
 80149a6:	4602      	mov	r2, r0
 80149a8:	69bb      	ldr	r3, [r7, #24]
 80149aa:	1ad3      	subs	r3, r2, r3
 80149ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d803      	bhi.n	80149ba <HAL_SPI_TransmitReceive+0x3f6>
 80149b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149b8:	d102      	bne.n	80149c0 <HAL_SPI_TransmitReceive+0x3fc>
 80149ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d114      	bne.n	80149ea <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80149c0:	68f8      	ldr	r0, [r7, #12]
 80149c2:	f000 ff47 	bl	8015854 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80149cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	2201      	movs	r2, #1
 80149da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	2200      	movs	r2, #0
 80149e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80149e6:	2303      	movs	r3, #3
 80149e8:	e121      	b.n	8014c2e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80149ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	f47f af3b 	bne.w	8014868 <HAL_SPI_TransmitReceive+0x2a4>
 80149f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	f47f af37 	bne.w	8014868 <HAL_SPI_TransmitReceive+0x2a4>
 80149fa:	e0f2      	b.n	8014be2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	695b      	ldr	r3, [r3, #20]
 8014a02:	f003 0302 	and.w	r3, r3, #2
 8014a06:	2b02      	cmp	r3, #2
 8014a08:	d121      	bne.n	8014a4e <HAL_SPI_TransmitReceive+0x48a>
 8014a0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d01e      	beq.n	8014a4e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8014a10:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014a12:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8014a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a16:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d218      	bcs.n	8014a4e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	3320      	adds	r3, #32
 8014a26:	7812      	ldrb	r2, [r2, #0]
 8014a28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a2e:	1c5a      	adds	r2, r3, #1
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a3a:	b29b      	uxth	r3, r3
 8014a3c:	3b01      	subs	r3, #1
 8014a3e:	b29a      	uxth	r2, r3
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a4c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	695b      	ldr	r3, [r3, #20]
 8014a54:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8014a56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	f000 80ba 	beq.w	8014bd2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	695b      	ldr	r3, [r3, #20]
 8014a64:	f003 0301 	and.w	r3, r3, #1
 8014a68:	2b01      	cmp	r3, #1
 8014a6a:	d11b      	bne.n	8014aa4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a78:	7812      	ldrb	r2, [r2, #0]
 8014a7a:	b2d2      	uxtb	r2, r2
 8014a7c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a82:	1c5a      	adds	r2, r3, #1
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014a8e:	b29b      	uxth	r3, r3
 8014a90:	3b01      	subs	r3, #1
 8014a92:	b29a      	uxth	r2, r3
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014aa0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014aa2:	e096      	b.n	8014bd2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014aa4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014aa6:	8bfb      	ldrh	r3, [r7, #30]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d24a      	bcs.n	8014b42 <HAL_SPI_TransmitReceive+0x57e>
 8014aac:	697b      	ldr	r3, [r7, #20]
 8014aae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d045      	beq.n	8014b42 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ac2:	7812      	ldrb	r2, [r2, #0]
 8014ac4:	b2d2      	uxtb	r2, r2
 8014ac6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014acc:	1c5a      	adds	r2, r3, #1
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ade:	7812      	ldrb	r2, [r2, #0]
 8014ae0:	b2d2      	uxtb	r2, r2
 8014ae2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ae8:	1c5a      	adds	r2, r3, #1
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014afa:	7812      	ldrb	r2, [r2, #0]
 8014afc:	b2d2      	uxtb	r2, r2
 8014afe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b04:	1c5a      	adds	r2, r3, #1
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b16:	7812      	ldrb	r2, [r2, #0]
 8014b18:	b2d2      	uxtb	r2, r2
 8014b1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b20:	1c5a      	adds	r2, r3, #1
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b2c:	b29b      	uxth	r3, r3
 8014b2e:	3b04      	subs	r3, #4
 8014b30:	b29a      	uxth	r2, r3
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b3e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014b40:	e047      	b.n	8014bd2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8014b42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014b44:	2b03      	cmp	r3, #3
 8014b46:	d820      	bhi.n	8014b8a <HAL_SPI_TransmitReceive+0x5c6>
 8014b48:	697b      	ldr	r3, [r7, #20]
 8014b4a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d01b      	beq.n	8014b8a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b5e:	7812      	ldrb	r2, [r2, #0]
 8014b60:	b2d2      	uxtb	r2, r2
 8014b62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b68:	1c5a      	adds	r2, r3, #1
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b74:	b29b      	uxth	r3, r3
 8014b76:	3b01      	subs	r3, #1
 8014b78:	b29a      	uxth	r2, r3
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b86:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014b88:	e023      	b.n	8014bd2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014b8a:	f7f3 fe21 	bl	80087d0 <HAL_GetTick>
 8014b8e:	4602      	mov	r2, r0
 8014b90:	69bb      	ldr	r3, [r7, #24]
 8014b92:	1ad3      	subs	r3, r2, r3
 8014b94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014b96:	429a      	cmp	r2, r3
 8014b98:	d803      	bhi.n	8014ba2 <HAL_SPI_TransmitReceive+0x5de>
 8014b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ba0:	d102      	bne.n	8014ba8 <HAL_SPI_TransmitReceive+0x5e4>
 8014ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d114      	bne.n	8014bd2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8014ba8:	68f8      	ldr	r0, [r7, #12]
 8014baa:	f000 fe53 	bl	8015854 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014bb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	2201      	movs	r2, #1
 8014bc2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8014bce:	2303      	movs	r3, #3
 8014bd0:	e02d      	b.n	8014c2e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014bd2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	f47f af11 	bne.w	80149fc <HAL_SPI_TransmitReceive+0x438>
 8014bda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	f47f af0d 	bne.w	80149fc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014be2:	69bb      	ldr	r3, [r7, #24]
 8014be4:	9300      	str	r3, [sp, #0]
 8014be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014be8:	2200      	movs	r2, #0
 8014bea:	2108      	movs	r1, #8
 8014bec:	68f8      	ldr	r0, [r7, #12]
 8014bee:	f000 fed1 	bl	8015994 <SPI_WaitOnFlagUntilTimeout>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d007      	beq.n	8014c08 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014bfe:	f043 0220 	orr.w	r2, r3, #32
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014c08:	68f8      	ldr	r0, [r7, #12]
 8014c0a:	f000 fe23 	bl	8015854 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	2201      	movs	r2, #1
 8014c12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	2200      	movs	r2, #0
 8014c1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d001      	beq.n	8014c2c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8014c28:	2301      	movs	r3, #1
 8014c2a:	e000      	b.n	8014c2e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8014c2c:	2300      	movs	r3, #0
  }
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3730      	adds	r7, #48	@ 0x30
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}
 8014c36:	bf00      	nop

08014c38 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b085      	sub	sp, #20
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	60f8      	str	r0, [r7, #12]
 8014c40:	60b9      	str	r1, [r7, #8]
 8014c42:	4613      	mov	r3, r2
 8014c44:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if ((pData == NULL) || (Size == 0UL))
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d002      	beq.n	8014c52 <HAL_SPI_Transmit_IT+0x1a>
 8014c4c:	88fb      	ldrh	r3, [r7, #6]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d101      	bne.n	8014c56 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8014c52:	2301      	movs	r3, #1
 8014c54:	e08b      	b.n	8014d6e <HAL_SPI_Transmit_IT+0x136>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014c5c:	b2db      	uxtb	r3, r3
 8014c5e:	2b01      	cmp	r3, #1
 8014c60:	d001      	beq.n	8014c66 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8014c62:	2302      	movs	r3, #2
 8014c64:	e083      	b.n	8014d6e <HAL_SPI_Transmit_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014c6c:	2b01      	cmp	r3, #1
 8014c6e:	d101      	bne.n	8014c74 <HAL_SPI_Transmit_IT+0x3c>
 8014c70:	2302      	movs	r3, #2
 8014c72:	e07c      	b.n	8014d6e <HAL_SPI_Transmit_IT+0x136>
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	2201      	movs	r2, #1
 8014c78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	2203      	movs	r2, #3
 8014c80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	2200      	movs	r2, #0
 8014c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	68ba      	ldr	r2, [r7, #8]
 8014c90:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	88fa      	ldrh	r2, [r7, #6]
 8014c96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	88fa      	ldrh	r2, [r7, #6]
 8014c9e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	2200      	movs	r2, #0
 8014cac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	68db      	ldr	r3, [r3, #12]
 8014cc2:	2b0f      	cmp	r3, #15
 8014cc4:	d903      	bls.n	8014cce <HAL_SPI_Transmit_IT+0x96>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	4a2c      	ldr	r2, [pc, #176]	@ (8014d7c <HAL_SPI_Transmit_IT+0x144>)
 8014cca:	675a      	str	r2, [r3, #116]	@ 0x74
 8014ccc:	e00a      	b.n	8014ce4 <HAL_SPI_Transmit_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	68db      	ldr	r3, [r3, #12]
 8014cd2:	2b07      	cmp	r3, #7
 8014cd4:	d903      	bls.n	8014cde <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	4a29      	ldr	r2, [pc, #164]	@ (8014d80 <HAL_SPI_Transmit_IT+0x148>)
 8014cda:	675a      	str	r2, [r3, #116]	@ 0x74
 8014cdc:	e002      	b.n	8014ce4 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	4a28      	ldr	r2, [pc, #160]	@ (8014d84 <HAL_SPI_Transmit_IT+0x14c>)
 8014ce2:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	689b      	ldr	r3, [r3, #8]
 8014ce8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014cec:	d108      	bne.n	8014d00 <HAL_SPI_Transmit_IT+0xc8>
  {
    SPI_1LINE_TX(hspi);
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	681a      	ldr	r2, [r3, #0]
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014cfc:	601a      	str	r2, [r3, #0]
 8014cfe:	e009      	b.n	8014d14 <HAL_SPI_Transmit_IT+0xdc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	68db      	ldr	r3, [r3, #12]
 8014d06:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014d12:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	685a      	ldr	r2, [r3, #4]
 8014d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8014d88 <HAL_SPI_Transmit_IT+0x150>)
 8014d1c:	4013      	ands	r3, r2
 8014d1e:	88f9      	ldrh	r1, [r7, #6]
 8014d20:	68fa      	ldr	r2, [r7, #12]
 8014d22:	6812      	ldr	r2, [r2, #0]
 8014d24:	430b      	orrs	r3, r1
 8014d26:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	681a      	ldr	r2, [r3, #0]
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	f042 0201 	orr.w	r2, r2, #1
 8014d36:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	6919      	ldr	r1, [r3, #16]
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	681a      	ldr	r2, [r3, #0]
 8014d4a:	f240 732a 	movw	r3, #1834	@ 0x72a
 8014d4e:	430b      	orrs	r3, r1
 8014d50:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	685b      	ldr	r3, [r3, #4]
 8014d56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014d5a:	d107      	bne.n	8014d6c <HAL_SPI_Transmit_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	681a      	ldr	r2, [r3, #0]
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014d6a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8014d6c:	2300      	movs	r3, #0
}
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3714      	adds	r7, #20
 8014d72:	46bd      	mov	sp, r7
 8014d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d78:	4770      	bx	lr
 8014d7a:	bf00      	nop
 8014d7c:	080157fb 	.word	0x080157fb
 8014d80:	0801579d 	.word	0x0801579d
 8014d84:	08015743 	.word	0x08015743
 8014d88:	ffff0000 	.word	0xffff0000

08014d8c <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8014d8c:	b480      	push	{r7}
 8014d8e:	b085      	sub	sp, #20
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	4613      	mov	r3, r2
 8014d98:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014da0:	b2db      	uxtb	r3, r3
 8014da2:	2b01      	cmp	r3, #1
 8014da4:	d001      	beq.n	8014daa <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8014da6:	2302      	movs	r3, #2
 8014da8:	e08b      	b.n	8014ec2 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014daa:	68bb      	ldr	r3, [r7, #8]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d002      	beq.n	8014db6 <HAL_SPI_Receive_IT+0x2a>
 8014db0:	88fb      	ldrh	r3, [r7, #6]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d101      	bne.n	8014dba <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 8014db6:	2301      	movs	r3, #1
 8014db8:	e083      	b.n	8014ec2 <HAL_SPI_Receive_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014dc0:	2b01      	cmp	r3, #1
 8014dc2:	d101      	bne.n	8014dc8 <HAL_SPI_Receive_IT+0x3c>
 8014dc4:	2302      	movs	r3, #2
 8014dc6:	e07c      	b.n	8014ec2 <HAL_SPI_Receive_IT+0x136>
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	2201      	movs	r2, #1
 8014dcc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	2204      	movs	r2, #4
 8014dd4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	2200      	movs	r2, #0
 8014ddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	68ba      	ldr	r2, [r7, #8]
 8014de4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	88fa      	ldrh	r2, [r7, #6]
 8014dea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	88fa      	ldrh	r2, [r7, #6]
 8014df2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	2200      	movs	r2, #0
 8014e08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxISR       = NULL;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->Reload.pRxBuffPtr  = NULL;
  hspi->Reload.RxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	68db      	ldr	r3, [r3, #12]
 8014e16:	2b0f      	cmp	r3, #15
 8014e18:	d903      	bls.n	8014e22 <HAL_SPI_Receive_IT+0x96>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8014ed0 <HAL_SPI_Receive_IT+0x144>)
 8014e1e:	671a      	str	r2, [r3, #112]	@ 0x70
 8014e20:	e00a      	b.n	8014e38 <HAL_SPI_Receive_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	68db      	ldr	r3, [r3, #12]
 8014e26:	2b07      	cmp	r3, #7
 8014e28:	d903      	bls.n	8014e32 <HAL_SPI_Receive_IT+0xa6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	4a29      	ldr	r2, [pc, #164]	@ (8014ed4 <HAL_SPI_Receive_IT+0x148>)
 8014e2e:	671a      	str	r2, [r3, #112]	@ 0x70
 8014e30:	e002      	b.n	8014e38 <HAL_SPI_Receive_IT+0xac>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	4a28      	ldr	r2, [pc, #160]	@ (8014ed8 <HAL_SPI_Receive_IT+0x14c>)
 8014e36:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	689b      	ldr	r3, [r3, #8]
 8014e3c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014e40:	d108      	bne.n	8014e54 <HAL_SPI_Receive_IT+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	681a      	ldr	r2, [r3, #0]
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014e50:	601a      	str	r2, [r3, #0]
 8014e52:	e009      	b.n	8014e68 <HAL_SPI_Receive_IT+0xdc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	68db      	ldr	r3, [r3, #12]
 8014e5a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014e66:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	685a      	ldr	r2, [r3, #4]
 8014e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8014edc <HAL_SPI_Receive_IT+0x150>)
 8014e70:	4013      	ands	r3, r2
 8014e72:	88f9      	ldrh	r1, [r7, #6]
 8014e74:	68fa      	ldr	r2, [r7, #12]
 8014e76:	6812      	ldr	r2, [r2, #0]
 8014e78:	430b      	orrs	r3, r1
 8014e7a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	f042 0201 	orr.w	r2, r2, #1
 8014e8a:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	6919      	ldr	r1, [r3, #16]
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	681a      	ldr	r2, [r3, #0]
 8014e9e:	f240 7349 	movw	r3, #1865	@ 0x749
 8014ea2:	430b      	orrs	r3, r1
 8014ea4:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	685b      	ldr	r3, [r3, #4]
 8014eaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014eae:	d107      	bne.n	8014ec0 <HAL_SPI_Receive_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	681a      	ldr	r2, [r3, #0]
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014ebe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8014ec0:	2300      	movs	r3, #0
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3714      	adds	r7, #20
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ecc:	4770      	bx	lr
 8014ece:	bf00      	nop
 8014ed0:	080156eb 	.word	0x080156eb
 8014ed4:	0801568b 	.word	0x0801568b
 8014ed8:	0801562d 	.word	0x0801562d
 8014edc:	ffff0000 	.word	0xffff0000

08014ee0 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b084      	sub	sp, #16
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	60f8      	str	r0, [r7, #12]
 8014ee8:	60b9      	str	r1, [r7, #8]
 8014eea:	4613      	mov	r3, r2
 8014eec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014ef4:	b2db      	uxtb	r3, r3
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d001      	beq.n	8014efe <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8014efa:	2302      	movs	r3, #2
 8014efc:	e126      	b.n	801514c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d002      	beq.n	8014f0a <HAL_SPI_Transmit_DMA+0x2a>
 8014f04:	88fb      	ldrh	r3, [r7, #6]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d101      	bne.n	8014f0e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8014f0a:	2301      	movs	r3, #1
 8014f0c:	e11e      	b.n	801514c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014f14:	2b01      	cmp	r3, #1
 8014f16:	d101      	bne.n	8014f1c <HAL_SPI_Transmit_DMA+0x3c>
 8014f18:	2302      	movs	r3, #2
 8014f1a:	e117      	b.n	801514c <HAL_SPI_Transmit_DMA+0x26c>
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	2201      	movs	r2, #1
 8014f20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	2203      	movs	r2, #3
 8014f28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	2200      	movs	r2, #0
 8014f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	68ba      	ldr	r2, [r7, #8]
 8014f38:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	88fa      	ldrh	r2, [r7, #6]
 8014f3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	88fa      	ldrh	r2, [r7, #6]
 8014f46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2200      	movs	r2, #0
 8014f54:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	2200      	movs	r2, #0
 8014f5a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	2200      	movs	r2, #0
 8014f60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	2200      	movs	r2, #0
 8014f68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	689b      	ldr	r3, [r3, #8]
 8014f70:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014f74:	d108      	bne.n	8014f88 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	681a      	ldr	r2, [r3, #0]
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014f84:	601a      	str	r2, [r3, #0]
 8014f86:	e009      	b.n	8014f9c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	68db      	ldr	r3, [r3, #12]
 8014f8e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014f9a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	2b0f      	cmp	r3, #15
 8014fa2:	d905      	bls.n	8014fb0 <HAL_SPI_Transmit_DMA+0xd0>
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014fa8:	699b      	ldr	r3, [r3, #24]
 8014faa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014fae:	d10f      	bne.n	8014fd0 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014fb4:	2b07      	cmp	r3, #7
 8014fb6:	d911      	bls.n	8014fdc <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014fbc:	699b      	ldr	r3, [r3, #24]
 8014fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014fc2:	d00b      	beq.n	8014fdc <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014fc8:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014fca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014fce:	d005      	beq.n	8014fdc <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8014fd8:	2301      	movs	r3, #1
 8014fda:	e0b7      	b.n	801514c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	68db      	ldr	r3, [r3, #12]
 8014fe0:	2b07      	cmp	r3, #7
 8014fe2:	d820      	bhi.n	8015026 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014fe8:	699b      	ldr	r3, [r3, #24]
 8014fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014fee:	d109      	bne.n	8015004 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014ff6:	b29b      	uxth	r3, r3
 8014ff8:	3301      	adds	r3, #1
 8014ffa:	105b      	asrs	r3, r3, #1
 8014ffc:	b29a      	uxth	r2, r3
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015008:	699b      	ldr	r3, [r3, #24]
 801500a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801500e:	d11e      	bne.n	801504e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015016:	b29b      	uxth	r3, r3
 8015018:	3303      	adds	r3, #3
 801501a:	109b      	asrs	r3, r3, #2
 801501c:	b29a      	uxth	r2, r3
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015024:	e013      	b.n	801504e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	68db      	ldr	r3, [r3, #12]
 801502a:	2b0f      	cmp	r3, #15
 801502c:	d80f      	bhi.n	801504e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015032:	699b      	ldr	r3, [r3, #24]
 8015034:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015038:	d109      	bne.n	801504e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015040:	b29b      	uxth	r3, r3
 8015042:	3301      	adds	r3, #1
 8015044:	105b      	asrs	r3, r3, #1
 8015046:	b29a      	uxth	r2, r3
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015052:	4a40      	ldr	r2, [pc, #256]	@ (8015154 <HAL_SPI_Transmit_DMA+0x274>)
 8015054:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801505a:	4a3f      	ldr	r2, [pc, #252]	@ (8015158 <HAL_SPI_Transmit_DMA+0x278>)
 801505c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015062:	4a3e      	ldr	r2, [pc, #248]	@ (801515c <HAL_SPI_Transmit_DMA+0x27c>)
 8015064:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801506a:	2200      	movs	r2, #0
 801506c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	689a      	ldr	r2, [r3, #8]
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801507c:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015086:	4619      	mov	r1, r3
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	3320      	adds	r3, #32
 801508e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015096:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015098:	f7f6 f828 	bl	800b0ec <HAL_DMA_Start_IT>
 801509c:	4603      	mov	r3, r0
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d011      	beq.n	80150c6 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80150a8:	f043 0210 	orr.w	r2, r3, #16
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	2201      	movs	r2, #1
 80150b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	2200      	movs	r2, #0
 80150be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 80150c2:	2301      	movs	r3, #1
 80150c4:	e042      	b.n	801514c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80150ca:	69db      	ldr	r3, [r3, #28]
 80150cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80150d0:	d108      	bne.n	80150e4 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	6859      	ldr	r1, [r3, #4]
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	681a      	ldr	r2, [r3, #0]
 80150dc:	4b20      	ldr	r3, [pc, #128]	@ (8015160 <HAL_SPI_Transmit_DMA+0x280>)
 80150de:	400b      	ands	r3, r1
 80150e0:	6053      	str	r3, [r2, #4]
 80150e2:	e009      	b.n	80150f8 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	685a      	ldr	r2, [r3, #4]
 80150ea:	4b1d      	ldr	r3, [pc, #116]	@ (8015160 <HAL_SPI_Transmit_DMA+0x280>)
 80150ec:	4013      	ands	r3, r2
 80150ee:	88f9      	ldrh	r1, [r7, #6]
 80150f0:	68fa      	ldr	r2, [r7, #12]
 80150f2:	6812      	ldr	r2, [r2, #0]
 80150f4:	430b      	orrs	r3, r1
 80150f6:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	689a      	ldr	r2, [r3, #8]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015106:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	691a      	ldr	r2, [r3, #16]
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8015116:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	681a      	ldr	r2, [r3, #0]
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	f042 0201 	orr.w	r2, r2, #1
 8015126:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	685b      	ldr	r3, [r3, #4]
 801512c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015130:	d107      	bne.n	8015142 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	681a      	ldr	r2, [r3, #0]
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015140:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2200      	movs	r2, #0
 8015146:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801514a:	2300      	movs	r3, #0
}
 801514c:	4618      	mov	r0, r3
 801514e:	3710      	adds	r7, #16
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}
 8015154:	08015597 	.word	0x08015597
 8015158:	08015551 	.word	0x08015551
 801515c:	080155b3 	.word	0x080155b3
 8015160:	ffff0000 	.word	0xffff0000

08015164 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b08a      	sub	sp, #40	@ 0x28
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	691b      	ldr	r3, [r3, #16]
 8015172:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	695b      	ldr	r3, [r3, #20]
 801517a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801517c:	6a3a      	ldr	r2, [r7, #32]
 801517e:	69fb      	ldr	r3, [r7, #28]
 8015180:	4013      	ands	r3, r2
 8015182:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	689b      	ldr	r3, [r3, #8]
 801518a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801518c:	2300      	movs	r3, #0
 801518e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015196:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	3330      	adds	r3, #48	@ 0x30
 801519e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80151a0:	69fb      	ldr	r3, [r7, #28]
 80151a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d010      	beq.n	80151cc <HAL_SPI_IRQHandler+0x68>
 80151aa:	6a3b      	ldr	r3, [r7, #32]
 80151ac:	f003 0308 	and.w	r3, r3, #8
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d00b      	beq.n	80151cc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	699a      	ldr	r2, [r3, #24]
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80151c2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f000 f9b9 	bl	801553c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80151ca:	e192      	b.n	80154f2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80151cc:	69bb      	ldr	r3, [r7, #24]
 80151ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d113      	bne.n	80151fe <HAL_SPI_IRQHandler+0x9a>
 80151d6:	69bb      	ldr	r3, [r7, #24]
 80151d8:	f003 0320 	and.w	r3, r3, #32
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d10e      	bne.n	80151fe <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80151e0:	69bb      	ldr	r3, [r7, #24]
 80151e2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d009      	beq.n	80151fe <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151f6:	6878      	ldr	r0, [r7, #4]
 80151f8:	4798      	blx	r3
    handled = 1UL;
 80151fa:	2301      	movs	r3, #1
 80151fc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80151fe:	69bb      	ldr	r3, [r7, #24]
 8015200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015204:	2b00      	cmp	r3, #0
 8015206:	d10f      	bne.n	8015228 <HAL_SPI_IRQHandler+0xc4>
 8015208:	69bb      	ldr	r3, [r7, #24]
 801520a:	f003 0301 	and.w	r3, r3, #1
 801520e:	2b00      	cmp	r3, #0
 8015210:	d00a      	beq.n	8015228 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015212:	69bb      	ldr	r3, [r7, #24]
 8015214:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015218:	2b00      	cmp	r3, #0
 801521a:	d105      	bne.n	8015228 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	4798      	blx	r3
    handled = 1UL;
 8015224:	2301      	movs	r3, #1
 8015226:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015228:	69bb      	ldr	r3, [r7, #24]
 801522a:	f003 0320 	and.w	r3, r3, #32
 801522e:	2b00      	cmp	r3, #0
 8015230:	d10f      	bne.n	8015252 <HAL_SPI_IRQHandler+0xee>
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	f003 0302 	and.w	r3, r3, #2
 8015238:	2b00      	cmp	r3, #0
 801523a:	d00a      	beq.n	8015252 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801523c:	69bb      	ldr	r3, [r7, #24]
 801523e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015242:	2b00      	cmp	r3, #0
 8015244:	d105      	bne.n	8015252 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801524a:	6878      	ldr	r0, [r7, #4]
 801524c:	4798      	blx	r3
    handled = 1UL;
 801524e:	2301      	movs	r3, #1
 8015250:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8015252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015254:	2b00      	cmp	r3, #0
 8015256:	f040 8147 	bne.w	80154e8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801525a:	69bb      	ldr	r3, [r7, #24]
 801525c:	f003 0308 	and.w	r3, r3, #8
 8015260:	2b00      	cmp	r3, #0
 8015262:	f000 808b 	beq.w	801537c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	699a      	ldr	r2, [r3, #24]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	f042 0208 	orr.w	r2, r2, #8
 8015274:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	699a      	ldr	r2, [r3, #24]
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	f042 0210 	orr.w	r2, r2, #16
 8015284:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	699a      	ldr	r2, [r3, #24]
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015294:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	691a      	ldr	r2, [r3, #16]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	f022 0208 	bic.w	r2, r2, #8
 80152a4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	689b      	ldr	r3, [r3, #8]
 80152ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d13d      	bne.n	8015330 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80152b4:	e036      	b.n	8015324 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	68db      	ldr	r3, [r3, #12]
 80152ba:	2b0f      	cmp	r3, #15
 80152bc:	d90b      	bls.n	80152d6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	681a      	ldr	r2, [r3, #0]
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80152c8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152ce:	1d1a      	adds	r2, r3, #4
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	665a      	str	r2, [r3, #100]	@ 0x64
 80152d4:	e01d      	b.n	8015312 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	68db      	ldr	r3, [r3, #12]
 80152da:	2b07      	cmp	r3, #7
 80152dc:	d90b      	bls.n	80152f6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152e2:	68fa      	ldr	r2, [r7, #12]
 80152e4:	8812      	ldrh	r2, [r2, #0]
 80152e6:	b292      	uxth	r2, r2
 80152e8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152ee:	1c9a      	adds	r2, r3, #2
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	665a      	str	r2, [r3, #100]	@ 0x64
 80152f4:	e00d      	b.n	8015312 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015302:	7812      	ldrb	r2, [r2, #0]
 8015304:	b2d2      	uxtb	r2, r2
 8015306:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801530c:	1c5a      	adds	r2, r3, #1
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015318:	b29b      	uxth	r3, r3
 801531a:	3b01      	subs	r3, #1
 801531c:	b29a      	uxth	r2, r3
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801532a:	b29b      	uxth	r3, r3
 801532c:	2b00      	cmp	r3, #0
 801532e:	d1c2      	bne.n	80152b6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8015330:	6878      	ldr	r0, [r7, #4]
 8015332:	f000 fa8f 	bl	8015854 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	2201      	movs	r2, #1
 801533a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015344:	2b00      	cmp	r3, #0
 8015346:	d003      	beq.n	8015350 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015348:	6878      	ldr	r0, [r7, #4]
 801534a:	f000 f8ed 	bl	8015528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801534e:	e0d0      	b.n	80154f2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8015350:	7cfb      	ldrb	r3, [r7, #19]
 8015352:	2b05      	cmp	r3, #5
 8015354:	d103      	bne.n	801535e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015356:	6878      	ldr	r0, [r7, #4]
 8015358:	f000 f8d2 	bl	8015500 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801535c:	e0c6      	b.n	80154ec <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801535e:	7cfb      	ldrb	r3, [r7, #19]
 8015360:	2b04      	cmp	r3, #4
 8015362:	d103      	bne.n	801536c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f7f1 fb53 	bl	8006a10 <HAL_SPI_RxCpltCallback>
    return;
 801536a:	e0bf      	b.n	80154ec <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801536c:	7cfb      	ldrb	r3, [r7, #19]
 801536e:	2b03      	cmp	r3, #3
 8015370:	f040 80bc 	bne.w	80154ec <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8015374:	6878      	ldr	r0, [r7, #4]
 8015376:	f7f1 fb0b 	bl	8006990 <HAL_SPI_TxCpltCallback>
    return;
 801537a:	e0b7      	b.n	80154ec <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801537c:	69bb      	ldr	r3, [r7, #24]
 801537e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015382:	2b00      	cmp	r3, #0
 8015384:	f000 80b5 	beq.w	80154f2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015388:	69bb      	ldr	r3, [r7, #24]
 801538a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801538e:	2b00      	cmp	r3, #0
 8015390:	d00f      	beq.n	80153b2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015398:	f043 0204 	orr.w	r2, r3, #4
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	699a      	ldr	r2, [r3, #24]
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80153b0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80153b2:	69bb      	ldr	r3, [r7, #24]
 80153b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d00f      	beq.n	80153dc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80153c2:	f043 0201 	orr.w	r2, r3, #1
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	699a      	ldr	r2, [r3, #24]
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80153da:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80153dc:	69bb      	ldr	r3, [r7, #24]
 80153de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d00f      	beq.n	8015406 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80153ec:	f043 0208 	orr.w	r2, r3, #8
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	699a      	ldr	r2, [r3, #24]
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015404:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015406:	69bb      	ldr	r3, [r7, #24]
 8015408:	f003 0320 	and.w	r3, r3, #32
 801540c:	2b00      	cmp	r3, #0
 801540e:	d00f      	beq.n	8015430 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015416:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	699a      	ldr	r2, [r3, #24]
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	f042 0220 	orr.w	r2, r2, #32
 801542e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015436:	2b00      	cmp	r3, #0
 8015438:	d05a      	beq.n	80154f0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	681a      	ldr	r2, [r3, #0]
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	f022 0201 	bic.w	r2, r2, #1
 8015448:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	6919      	ldr	r1, [r3, #16]
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681a      	ldr	r2, [r3, #0]
 8015454:	4b28      	ldr	r3, [pc, #160]	@ (80154f8 <HAL_SPI_IRQHandler+0x394>)
 8015456:	400b      	ands	r3, r1
 8015458:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801545a:	697b      	ldr	r3, [r7, #20]
 801545c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015460:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015464:	d138      	bne.n	80154d8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	689a      	ldr	r2, [r3, #8]
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015474:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801547a:	2b00      	cmp	r3, #0
 801547c:	d013      	beq.n	80154a6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015482:	4a1e      	ldr	r2, [pc, #120]	@ (80154fc <HAL_SPI_IRQHandler+0x398>)
 8015484:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801548a:	4618      	mov	r0, r3
 801548c:	f7f6 fbb6 	bl	800bbfc <HAL_DMA_Abort_IT>
 8015490:	4603      	mov	r3, r0
 8015492:	2b00      	cmp	r3, #0
 8015494:	d007      	beq.n	80154a6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801549c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d020      	beq.n	80154f0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154b2:	4a12      	ldr	r2, [pc, #72]	@ (80154fc <HAL_SPI_IRQHandler+0x398>)
 80154b4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7f6 fb9e 	bl	800bbfc <HAL_DMA_Abort_IT>
 80154c0:	4603      	mov	r3, r0
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d014      	beq.n	80154f0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80154cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80154d6:	e00b      	b.n	80154f0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	2201      	movs	r2, #1
 80154dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80154e0:	6878      	ldr	r0, [r7, #4]
 80154e2:	f000 f821 	bl	8015528 <HAL_SPI_ErrorCallback>
    return;
 80154e6:	e003      	b.n	80154f0 <HAL_SPI_IRQHandler+0x38c>
    return;
 80154e8:	bf00      	nop
 80154ea:	e002      	b.n	80154f2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80154ec:	bf00      	nop
 80154ee:	e000      	b.n	80154f2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80154f0:	bf00      	nop
  }
}
 80154f2:	3728      	adds	r7, #40	@ 0x28
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}
 80154f8:	fffffc94 	.word	0xfffffc94
 80154fc:	080155f9 	.word	0x080155f9

08015500 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015500:	b480      	push	{r7}
 8015502:	b083      	sub	sp, #12
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8015508:	bf00      	nop
 801550a:	370c      	adds	r7, #12
 801550c:	46bd      	mov	sp, r7
 801550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015512:	4770      	bx	lr

08015514 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015514:	b480      	push	{r7}
 8015516:	b083      	sub	sp, #12
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 801551c:	bf00      	nop
 801551e:	370c      	adds	r7, #12
 8015520:	46bd      	mov	sp, r7
 8015522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015526:	4770      	bx	lr

08015528 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015528:	b480      	push	{r7}
 801552a:	b083      	sub	sp, #12
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015530:	bf00      	nop
 8015532:	370c      	adds	r7, #12
 8015534:	46bd      	mov	sp, r7
 8015536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553a:	4770      	bx	lr

0801553c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801553c:	b480      	push	{r7}
 801553e:	b083      	sub	sp, #12
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8015544:	bf00      	nop
 8015546:	370c      	adds	r7, #12
 8015548:	46bd      	mov	sp, r7
 801554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554e:	4770      	bx	lr

08015550 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b084      	sub	sp, #16
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801555c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015564:	b2db      	uxtb	r3, r3
 8015566:	2b07      	cmp	r3, #7
 8015568:	d011      	beq.n	801558e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801556e:	69db      	ldr	r3, [r3, #28]
 8015570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015574:	d103      	bne.n	801557e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8015576:	68f8      	ldr	r0, [r7, #12]
 8015578:	f7f1 fa0a 	bl	8006990 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 801557c:	e007      	b.n	801558e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	691a      	ldr	r2, [r3, #16]
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	f042 0208 	orr.w	r2, r2, #8
 801558c:	611a      	str	r2, [r3, #16]
}
 801558e:	bf00      	nop
 8015590:	3710      	adds	r7, #16
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}

08015596 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015596:	b580      	push	{r7, lr}
 8015598:	b084      	sub	sp, #16
 801559a:	af00      	add	r7, sp, #0
 801559c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155a2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80155a4:	68f8      	ldr	r0, [r7, #12]
 80155a6:	f7ff ffb5 	bl	8015514 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80155aa:	bf00      	nop
 80155ac:	3710      	adds	r7, #16
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}

080155b2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80155b2:	b580      	push	{r7, lr}
 80155b4:	b084      	sub	sp, #16
 80155b6:	af00      	add	r7, sp, #0
 80155b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155be:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	f7f7 fc99 	bl	800cef8 <HAL_DMA_GetError>
 80155c6:	4603      	mov	r3, r0
 80155c8:	2b02      	cmp	r3, #2
 80155ca:	d011      	beq.n	80155f0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80155cc:	68f8      	ldr	r0, [r7, #12]
 80155ce:	f000 f941 	bl	8015854 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80155d8:	f043 0210 	orr.w	r2, r3, #16
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	2201      	movs	r2, #1
 80155e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80155ea:	68f8      	ldr	r0, [r7, #12]
 80155ec:	f7ff ff9c 	bl	8015528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80155f0:	bf00      	nop
 80155f2:	3710      	adds	r7, #16
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b084      	sub	sp, #16
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015604:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	2200      	movs	r2, #0
 801560a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	2200      	movs	r2, #0
 8015612:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	2201      	movs	r2, #1
 801561a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801561e:	68f8      	ldr	r0, [r7, #12]
 8015620:	f7ff ff82 	bl	8015528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015624:	bf00      	nop
 8015626:	3710      	adds	r7, #16
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}

0801562c <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 801562c:	b480      	push	{r7}
 801562e:	b083      	sub	sp, #12
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015640:	7812      	ldrb	r2, [r2, #0]
 8015642:	b2d2      	uxtb	r2, r2
 8015644:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801564a:	1c5a      	adds	r2, r3, #1
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015656:	b29b      	uxth	r3, r3
 8015658:	3b01      	subs	r3, #1
 801565a:	b29a      	uxth	r2, r3
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015668:	b29b      	uxth	r3, r3
 801566a:	2b00      	cmp	r3, #0
 801566c:	d107      	bne.n	801567e <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	691a      	ldr	r2, [r3, #16]
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	f022 0201 	bic.w	r2, r2, #1
 801567c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 801567e:	bf00      	nop
 8015680:	370c      	adds	r7, #12
 8015682:	46bd      	mov	sp, r7
 8015684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015688:	4770      	bx	lr

0801568a <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 801568a:	b480      	push	{r7}
 801568c:	b085      	sub	sp, #20
 801568e:	af00      	add	r7, sp, #0
 8015690:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	3330      	adds	r3, #48	@ 0x30
 8015698:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801569e:	68fa      	ldr	r2, [r7, #12]
 80156a0:	8812      	ldrh	r2, [r2, #0]
 80156a2:	b292      	uxth	r2, r2
 80156a4:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156aa:	1c9a      	adds	r2, r3, #2
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156b6:	b29b      	uxth	r3, r3
 80156b8:	3b01      	subs	r3, #1
 80156ba:	b29a      	uxth	r2, r3
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156c8:	b29b      	uxth	r3, r3
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d107      	bne.n	80156de <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	691a      	ldr	r2, [r3, #16]
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	f022 0201 	bic.w	r2, r2, #1
 80156dc:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80156de:	bf00      	nop
 80156e0:	3714      	adds	r7, #20
 80156e2:	46bd      	mov	sp, r7
 80156e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e8:	4770      	bx	lr

080156ea <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80156ea:	b480      	push	{r7}
 80156ec:	b083      	sub	sp, #12
 80156ee:	af00      	add	r7, sp, #0
 80156f0:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	681a      	ldr	r2, [r3, #0]
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80156fc:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015702:	1d1a      	adds	r2, r3, #4
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801570e:	b29b      	uxth	r3, r3
 8015710:	3b01      	subs	r3, #1
 8015712:	b29a      	uxth	r2, r3
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015720:	b29b      	uxth	r3, r3
 8015722:	2b00      	cmp	r3, #0
 8015724:	d107      	bne.n	8015736 <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	691a      	ldr	r2, [r3, #16]
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	f022 0201 	bic.w	r2, r2, #1
 8015734:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8015736:	bf00      	nop
 8015738:	370c      	adds	r7, #12
 801573a:	46bd      	mov	sp, r7
 801573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015740:	4770      	bx	lr

08015742 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8015742:	b480      	push	{r7}
 8015744:	b083      	sub	sp, #12
 8015746:	af00      	add	r7, sp, #0
 8015748:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	3320      	adds	r3, #32
 8015754:	7812      	ldrb	r2, [r2, #0]
 8015756:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801575c:	1c5a      	adds	r2, r3, #1
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015768:	b29b      	uxth	r3, r3
 801576a:	3b01      	subs	r3, #1
 801576c:	b29a      	uxth	r2, r3
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801577a:	b29b      	uxth	r3, r3
 801577c:	2b00      	cmp	r3, #0
 801577e:	d107      	bne.n	8015790 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	691a      	ldr	r2, [r3, #16]
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	f022 0202 	bic.w	r2, r2, #2
 801578e:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8015790:	bf00      	nop
 8015792:	370c      	adds	r7, #12
 8015794:	46bd      	mov	sp, r7
 8015796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579a:	4770      	bx	lr

0801579c <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 801579c:	b480      	push	{r7}
 801579e:	b085      	sub	sp, #20
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	3320      	adds	r3, #32
 80157aa:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80157b0:	881a      	ldrh	r2, [r3, #0]
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80157ba:	1c9a      	adds	r2, r3, #2
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80157c6:	b29b      	uxth	r3, r3
 80157c8:	3b01      	subs	r3, #1
 80157ca:	b29a      	uxth	r2, r3
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80157d8:	b29b      	uxth	r3, r3
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d107      	bne.n	80157ee <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	691a      	ldr	r2, [r3, #16]
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	f022 0202 	bic.w	r2, r2, #2
 80157ec:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80157ee:	bf00      	nop
 80157f0:	3714      	adds	r7, #20
 80157f2:	46bd      	mov	sp, r7
 80157f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f8:	4770      	bx	lr

080157fa <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80157fa:	b480      	push	{r7}
 80157fc:	b083      	sub	sp, #12
 80157fe:	af00      	add	r7, sp, #0
 8015800:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	6812      	ldr	r2, [r2, #0]
 801580c:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015812:	1d1a      	adds	r2, r3, #4
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801581e:	b29b      	uxth	r3, r3
 8015820:	3b01      	subs	r3, #1
 8015822:	b29a      	uxth	r2, r3
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015830:	b29b      	uxth	r3, r3
 8015832:	2b00      	cmp	r3, #0
 8015834:	d107      	bne.n	8015846 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	691a      	ldr	r2, [r3, #16]
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	f022 0202 	bic.w	r2, r2, #2
 8015844:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8015846:	bf00      	nop
 8015848:	370c      	adds	r7, #12
 801584a:	46bd      	mov	sp, r7
 801584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015850:	4770      	bx	lr
	...

08015854 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8015854:	b480      	push	{r7}
 8015856:	b085      	sub	sp, #20
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	695b      	ldr	r3, [r3, #20]
 8015862:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	699a      	ldr	r2, [r3, #24]
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	f042 0208 	orr.w	r2, r2, #8
 8015872:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	699a      	ldr	r2, [r3, #24]
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	f042 0210 	orr.w	r2, r2, #16
 8015882:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	681a      	ldr	r2, [r3, #0]
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	f022 0201 	bic.w	r2, r2, #1
 8015892:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	6919      	ldr	r1, [r3, #16]
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681a      	ldr	r2, [r3, #0]
 801589e:	4b3c      	ldr	r3, [pc, #240]	@ (8015990 <SPI_CloseTransfer+0x13c>)
 80158a0:	400b      	ands	r3, r1
 80158a2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	689a      	ldr	r2, [r3, #8]
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80158b2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80158ba:	b2db      	uxtb	r3, r3
 80158bc:	2b04      	cmp	r3, #4
 80158be:	d014      	beq.n	80158ea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	f003 0320 	and.w	r3, r3, #32
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d00f      	beq.n	80158ea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	699a      	ldr	r2, [r3, #24]
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	f042 0220 	orr.w	r2, r2, #32
 80158e8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80158f0:	b2db      	uxtb	r3, r3
 80158f2:	2b03      	cmp	r3, #3
 80158f4:	d014      	beq.n	8015920 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d00f      	beq.n	8015920 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015906:	f043 0204 	orr.w	r2, r3, #4
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	699a      	ldr	r2, [r3, #24]
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801591e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015926:	2b00      	cmp	r3, #0
 8015928:	d00f      	beq.n	801594a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015930:	f043 0201 	orr.w	r2, r3, #1
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	699a      	ldr	r2, [r3, #24]
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015948:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015950:	2b00      	cmp	r3, #0
 8015952:	d00f      	beq.n	8015974 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801595a:	f043 0208 	orr.w	r2, r3, #8
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	699a      	ldr	r2, [r3, #24]
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015972:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	2200      	movs	r2, #0
 8015978:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	2200      	movs	r2, #0
 8015980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8015984:	bf00      	nop
 8015986:	3714      	adds	r7, #20
 8015988:	46bd      	mov	sp, r7
 801598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598e:	4770      	bx	lr
 8015990:	fffffc90 	.word	0xfffffc90

08015994 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b084      	sub	sp, #16
 8015998:	af00      	add	r7, sp, #0
 801599a:	60f8      	str	r0, [r7, #12]
 801599c:	60b9      	str	r1, [r7, #8]
 801599e:	603b      	str	r3, [r7, #0]
 80159a0:	4613      	mov	r3, r2
 80159a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80159a4:	e010      	b.n	80159c8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80159a6:	f7f2 ff13 	bl	80087d0 <HAL_GetTick>
 80159aa:	4602      	mov	r2, r0
 80159ac:	69bb      	ldr	r3, [r7, #24]
 80159ae:	1ad3      	subs	r3, r2, r3
 80159b0:	683a      	ldr	r2, [r7, #0]
 80159b2:	429a      	cmp	r2, r3
 80159b4:	d803      	bhi.n	80159be <SPI_WaitOnFlagUntilTimeout+0x2a>
 80159b6:	683b      	ldr	r3, [r7, #0]
 80159b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159bc:	d102      	bne.n	80159c4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80159be:	683b      	ldr	r3, [r7, #0]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d101      	bne.n	80159c8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80159c4:	2303      	movs	r3, #3
 80159c6:	e00f      	b.n	80159e8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	695a      	ldr	r2, [r3, #20]
 80159ce:	68bb      	ldr	r3, [r7, #8]
 80159d0:	4013      	ands	r3, r2
 80159d2:	68ba      	ldr	r2, [r7, #8]
 80159d4:	429a      	cmp	r2, r3
 80159d6:	bf0c      	ite	eq
 80159d8:	2301      	moveq	r3, #1
 80159da:	2300      	movne	r3, #0
 80159dc:	b2db      	uxtb	r3, r3
 80159de:	461a      	mov	r2, r3
 80159e0:	79fb      	ldrb	r3, [r7, #7]
 80159e2:	429a      	cmp	r2, r3
 80159e4:	d0df      	beq.n	80159a6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80159e6:	2300      	movs	r3, #0
}
 80159e8:	4618      	mov	r0, r3
 80159ea:	3710      	adds	r7, #16
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bd80      	pop	{r7, pc}

080159f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80159f0:	b480      	push	{r7}
 80159f2:	b085      	sub	sp, #20
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159fc:	095b      	lsrs	r3, r3, #5
 80159fe:	3301      	adds	r3, #1
 8015a00:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	68db      	ldr	r3, [r3, #12]
 8015a06:	3301      	adds	r3, #1
 8015a08:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8015a0a:	68bb      	ldr	r3, [r7, #8]
 8015a0c:	3307      	adds	r3, #7
 8015a0e:	08db      	lsrs	r3, r3, #3
 8015a10:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8015a12:	68bb      	ldr	r3, [r7, #8]
 8015a14:	68fa      	ldr	r2, [r7, #12]
 8015a16:	fb02 f303 	mul.w	r3, r2, r3
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	3714      	adds	r7, #20
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a24:	4770      	bx	lr

08015a26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015a26:	b580      	push	{r7, lr}
 8015a28:	b082      	sub	sp, #8
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d101      	bne.n	8015a38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015a34:	2301      	movs	r3, #1
 8015a36:	e049      	b.n	8015acc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015a3e:	b2db      	uxtb	r3, r3
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d106      	bne.n	8015a52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	2200      	movs	r2, #0
 8015a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	f7f2 fcc9 	bl	80083e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2202      	movs	r2, #2
 8015a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	681a      	ldr	r2, [r3, #0]
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	3304      	adds	r3, #4
 8015a62:	4619      	mov	r1, r3
 8015a64:	4610      	mov	r0, r2
 8015a66:	f000 fedb 	bl	8016820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	2201      	movs	r2, #1
 8015a6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	2201      	movs	r2, #1
 8015a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	2201      	movs	r2, #1
 8015a7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	2201      	movs	r2, #1
 8015a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	2201      	movs	r2, #1
 8015a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	2201      	movs	r2, #1
 8015a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2201      	movs	r2, #1
 8015a9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	2201      	movs	r2, #1
 8015aa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	2201      	movs	r2, #1
 8015aae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	2201      	movs	r2, #1
 8015ab6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	2201      	movs	r2, #1
 8015abe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	2201      	movs	r2, #1
 8015ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015aca:	2300      	movs	r3, #0
}
 8015acc:	4618      	mov	r0, r3
 8015ace:	3708      	adds	r7, #8
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}

08015ad4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015ad4:	b480      	push	{r7}
 8015ad6:	b085      	sub	sp, #20
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015ae2:	b2db      	uxtb	r3, r3
 8015ae4:	2b01      	cmp	r3, #1
 8015ae6:	d001      	beq.n	8015aec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015ae8:	2301      	movs	r3, #1
 8015aea:	e056      	b.n	8015b9a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	2202      	movs	r2, #2
 8015af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	4a2b      	ldr	r2, [pc, #172]	@ (8015ba8 <HAL_TIM_Base_Start+0xd4>)
 8015afa:	4293      	cmp	r3, r2
 8015afc:	d02c      	beq.n	8015b58 <HAL_TIM_Base_Start+0x84>
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015b06:	d027      	beq.n	8015b58 <HAL_TIM_Base_Start+0x84>
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	4a27      	ldr	r2, [pc, #156]	@ (8015bac <HAL_TIM_Base_Start+0xd8>)
 8015b0e:	4293      	cmp	r3, r2
 8015b10:	d022      	beq.n	8015b58 <HAL_TIM_Base_Start+0x84>
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	4a26      	ldr	r2, [pc, #152]	@ (8015bb0 <HAL_TIM_Base_Start+0xdc>)
 8015b18:	4293      	cmp	r3, r2
 8015b1a:	d01d      	beq.n	8015b58 <HAL_TIM_Base_Start+0x84>
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	4a24      	ldr	r2, [pc, #144]	@ (8015bb4 <HAL_TIM_Base_Start+0xe0>)
 8015b22:	4293      	cmp	r3, r2
 8015b24:	d018      	beq.n	8015b58 <HAL_TIM_Base_Start+0x84>
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	4a23      	ldr	r2, [pc, #140]	@ (8015bb8 <HAL_TIM_Base_Start+0xe4>)
 8015b2c:	4293      	cmp	r3, r2
 8015b2e:	d013      	beq.n	8015b58 <HAL_TIM_Base_Start+0x84>
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	4a21      	ldr	r2, [pc, #132]	@ (8015bbc <HAL_TIM_Base_Start+0xe8>)
 8015b36:	4293      	cmp	r3, r2
 8015b38:	d00e      	beq.n	8015b58 <HAL_TIM_Base_Start+0x84>
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	4a20      	ldr	r2, [pc, #128]	@ (8015bc0 <HAL_TIM_Base_Start+0xec>)
 8015b40:	4293      	cmp	r3, r2
 8015b42:	d009      	beq.n	8015b58 <HAL_TIM_Base_Start+0x84>
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	4a1e      	ldr	r2, [pc, #120]	@ (8015bc4 <HAL_TIM_Base_Start+0xf0>)
 8015b4a:	4293      	cmp	r3, r2
 8015b4c:	d004      	beq.n	8015b58 <HAL_TIM_Base_Start+0x84>
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	4a1d      	ldr	r2, [pc, #116]	@ (8015bc8 <HAL_TIM_Base_Start+0xf4>)
 8015b54:	4293      	cmp	r3, r2
 8015b56:	d115      	bne.n	8015b84 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	689a      	ldr	r2, [r3, #8]
 8015b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8015bcc <HAL_TIM_Base_Start+0xf8>)
 8015b60:	4013      	ands	r3, r2
 8015b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	2b06      	cmp	r3, #6
 8015b68:	d015      	beq.n	8015b96 <HAL_TIM_Base_Start+0xc2>
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015b70:	d011      	beq.n	8015b96 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	681a      	ldr	r2, [r3, #0]
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	f042 0201 	orr.w	r2, r2, #1
 8015b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015b82:	e008      	b.n	8015b96 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	681a      	ldr	r2, [r3, #0]
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	f042 0201 	orr.w	r2, r2, #1
 8015b92:	601a      	str	r2, [r3, #0]
 8015b94:	e000      	b.n	8015b98 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015b96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015b98:	2300      	movs	r3, #0
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3714      	adds	r7, #20
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba4:	4770      	bx	lr
 8015ba6:	bf00      	nop
 8015ba8:	40010000 	.word	0x40010000
 8015bac:	40000400 	.word	0x40000400
 8015bb0:	40000800 	.word	0x40000800
 8015bb4:	40000c00 	.word	0x40000c00
 8015bb8:	40010400 	.word	0x40010400
 8015bbc:	40001800 	.word	0x40001800
 8015bc0:	40014000 	.word	0x40014000
 8015bc4:	4000e000 	.word	0x4000e000
 8015bc8:	4000e400 	.word	0x4000e400
 8015bcc:	00010007 	.word	0x00010007

08015bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015bd0:	b480      	push	{r7}
 8015bd2:	b085      	sub	sp, #20
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015bde:	b2db      	uxtb	r3, r3
 8015be0:	2b01      	cmp	r3, #1
 8015be2:	d001      	beq.n	8015be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015be4:	2301      	movs	r3, #1
 8015be6:	e05e      	b.n	8015ca6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2202      	movs	r2, #2
 8015bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	68da      	ldr	r2, [r3, #12]
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	f042 0201 	orr.w	r2, r2, #1
 8015bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	4a2b      	ldr	r2, [pc, #172]	@ (8015cb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8015c06:	4293      	cmp	r3, r2
 8015c08:	d02c      	beq.n	8015c64 <HAL_TIM_Base_Start_IT+0x94>
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015c12:	d027      	beq.n	8015c64 <HAL_TIM_Base_Start_IT+0x94>
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	4a27      	ldr	r2, [pc, #156]	@ (8015cb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8015c1a:	4293      	cmp	r3, r2
 8015c1c:	d022      	beq.n	8015c64 <HAL_TIM_Base_Start_IT+0x94>
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	4a26      	ldr	r2, [pc, #152]	@ (8015cbc <HAL_TIM_Base_Start_IT+0xec>)
 8015c24:	4293      	cmp	r3, r2
 8015c26:	d01d      	beq.n	8015c64 <HAL_TIM_Base_Start_IT+0x94>
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	4a24      	ldr	r2, [pc, #144]	@ (8015cc0 <HAL_TIM_Base_Start_IT+0xf0>)
 8015c2e:	4293      	cmp	r3, r2
 8015c30:	d018      	beq.n	8015c64 <HAL_TIM_Base_Start_IT+0x94>
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	4a23      	ldr	r2, [pc, #140]	@ (8015cc4 <HAL_TIM_Base_Start_IT+0xf4>)
 8015c38:	4293      	cmp	r3, r2
 8015c3a:	d013      	beq.n	8015c64 <HAL_TIM_Base_Start_IT+0x94>
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	4a21      	ldr	r2, [pc, #132]	@ (8015cc8 <HAL_TIM_Base_Start_IT+0xf8>)
 8015c42:	4293      	cmp	r3, r2
 8015c44:	d00e      	beq.n	8015c64 <HAL_TIM_Base_Start_IT+0x94>
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	4a20      	ldr	r2, [pc, #128]	@ (8015ccc <HAL_TIM_Base_Start_IT+0xfc>)
 8015c4c:	4293      	cmp	r3, r2
 8015c4e:	d009      	beq.n	8015c64 <HAL_TIM_Base_Start_IT+0x94>
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	4a1e      	ldr	r2, [pc, #120]	@ (8015cd0 <HAL_TIM_Base_Start_IT+0x100>)
 8015c56:	4293      	cmp	r3, r2
 8015c58:	d004      	beq.n	8015c64 <HAL_TIM_Base_Start_IT+0x94>
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8015cd4 <HAL_TIM_Base_Start_IT+0x104>)
 8015c60:	4293      	cmp	r3, r2
 8015c62:	d115      	bne.n	8015c90 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	689a      	ldr	r2, [r3, #8]
 8015c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8015cd8 <HAL_TIM_Base_Start_IT+0x108>)
 8015c6c:	4013      	ands	r3, r2
 8015c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	2b06      	cmp	r3, #6
 8015c74:	d015      	beq.n	8015ca2 <HAL_TIM_Base_Start_IT+0xd2>
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015c7c:	d011      	beq.n	8015ca2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	681a      	ldr	r2, [r3, #0]
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	f042 0201 	orr.w	r2, r2, #1
 8015c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015c8e:	e008      	b.n	8015ca2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	681a      	ldr	r2, [r3, #0]
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	f042 0201 	orr.w	r2, r2, #1
 8015c9e:	601a      	str	r2, [r3, #0]
 8015ca0:	e000      	b.n	8015ca4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015ca2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015ca4:	2300      	movs	r3, #0
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	3714      	adds	r7, #20
 8015caa:	46bd      	mov	sp, r7
 8015cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb0:	4770      	bx	lr
 8015cb2:	bf00      	nop
 8015cb4:	40010000 	.word	0x40010000
 8015cb8:	40000400 	.word	0x40000400
 8015cbc:	40000800 	.word	0x40000800
 8015cc0:	40000c00 	.word	0x40000c00
 8015cc4:	40010400 	.word	0x40010400
 8015cc8:	40001800 	.word	0x40001800
 8015ccc:	40014000 	.word	0x40014000
 8015cd0:	4000e000 	.word	0x4000e000
 8015cd4:	4000e400 	.word	0x4000e400
 8015cd8:	00010007 	.word	0x00010007

08015cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b082      	sub	sp, #8
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d101      	bne.n	8015cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015cea:	2301      	movs	r3, #1
 8015cec:	e049      	b.n	8015d82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015cf4:	b2db      	uxtb	r3, r3
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d106      	bne.n	8015d08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015d02:	6878      	ldr	r0, [r7, #4]
 8015d04:	f7f2 fae4 	bl	80082d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2202      	movs	r2, #2
 8015d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681a      	ldr	r2, [r3, #0]
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	3304      	adds	r3, #4
 8015d18:	4619      	mov	r1, r3
 8015d1a:	4610      	mov	r0, r2
 8015d1c:	f000 fd80 	bl	8016820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2201      	movs	r2, #1
 8015d24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2201      	movs	r2, #1
 8015d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2201      	movs	r2, #1
 8015d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2201      	movs	r2, #1
 8015d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	2201      	movs	r2, #1
 8015d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	2201      	movs	r2, #1
 8015d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	2201      	movs	r2, #1
 8015d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2201      	movs	r2, #1
 8015d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	2201      	movs	r2, #1
 8015d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	2201      	movs	r2, #1
 8015d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2201      	movs	r2, #1
 8015d74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	2201      	movs	r2, #1
 8015d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015d80:	2300      	movs	r3, #0
}
 8015d82:	4618      	mov	r0, r3
 8015d84:	3708      	adds	r7, #8
 8015d86:	46bd      	mov	sp, r7
 8015d88:	bd80      	pop	{r7, pc}
	...

08015d8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b084      	sub	sp, #16
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
 8015d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015d96:	683b      	ldr	r3, [r7, #0]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d109      	bne.n	8015db0 <HAL_TIM_PWM_Start+0x24>
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8015da2:	b2db      	uxtb	r3, r3
 8015da4:	2b01      	cmp	r3, #1
 8015da6:	bf14      	ite	ne
 8015da8:	2301      	movne	r3, #1
 8015daa:	2300      	moveq	r3, #0
 8015dac:	b2db      	uxtb	r3, r3
 8015dae:	e03c      	b.n	8015e2a <HAL_TIM_PWM_Start+0x9e>
 8015db0:	683b      	ldr	r3, [r7, #0]
 8015db2:	2b04      	cmp	r3, #4
 8015db4:	d109      	bne.n	8015dca <HAL_TIM_PWM_Start+0x3e>
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8015dbc:	b2db      	uxtb	r3, r3
 8015dbe:	2b01      	cmp	r3, #1
 8015dc0:	bf14      	ite	ne
 8015dc2:	2301      	movne	r3, #1
 8015dc4:	2300      	moveq	r3, #0
 8015dc6:	b2db      	uxtb	r3, r3
 8015dc8:	e02f      	b.n	8015e2a <HAL_TIM_PWM_Start+0x9e>
 8015dca:	683b      	ldr	r3, [r7, #0]
 8015dcc:	2b08      	cmp	r3, #8
 8015dce:	d109      	bne.n	8015de4 <HAL_TIM_PWM_Start+0x58>
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8015dd6:	b2db      	uxtb	r3, r3
 8015dd8:	2b01      	cmp	r3, #1
 8015dda:	bf14      	ite	ne
 8015ddc:	2301      	movne	r3, #1
 8015dde:	2300      	moveq	r3, #0
 8015de0:	b2db      	uxtb	r3, r3
 8015de2:	e022      	b.n	8015e2a <HAL_TIM_PWM_Start+0x9e>
 8015de4:	683b      	ldr	r3, [r7, #0]
 8015de6:	2b0c      	cmp	r3, #12
 8015de8:	d109      	bne.n	8015dfe <HAL_TIM_PWM_Start+0x72>
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015df0:	b2db      	uxtb	r3, r3
 8015df2:	2b01      	cmp	r3, #1
 8015df4:	bf14      	ite	ne
 8015df6:	2301      	movne	r3, #1
 8015df8:	2300      	moveq	r3, #0
 8015dfa:	b2db      	uxtb	r3, r3
 8015dfc:	e015      	b.n	8015e2a <HAL_TIM_PWM_Start+0x9e>
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	2b10      	cmp	r3, #16
 8015e02:	d109      	bne.n	8015e18 <HAL_TIM_PWM_Start+0x8c>
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015e0a:	b2db      	uxtb	r3, r3
 8015e0c:	2b01      	cmp	r3, #1
 8015e0e:	bf14      	ite	ne
 8015e10:	2301      	movne	r3, #1
 8015e12:	2300      	moveq	r3, #0
 8015e14:	b2db      	uxtb	r3, r3
 8015e16:	e008      	b.n	8015e2a <HAL_TIM_PWM_Start+0x9e>
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015e1e:	b2db      	uxtb	r3, r3
 8015e20:	2b01      	cmp	r3, #1
 8015e22:	bf14      	ite	ne
 8015e24:	2301      	movne	r3, #1
 8015e26:	2300      	moveq	r3, #0
 8015e28:	b2db      	uxtb	r3, r3
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d001      	beq.n	8015e32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8015e2e:	2301      	movs	r3, #1
 8015e30:	e0ab      	b.n	8015f8a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d104      	bne.n	8015e42 <HAL_TIM_PWM_Start+0xb6>
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2202      	movs	r2, #2
 8015e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015e40:	e023      	b.n	8015e8a <HAL_TIM_PWM_Start+0xfe>
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	2b04      	cmp	r3, #4
 8015e46:	d104      	bne.n	8015e52 <HAL_TIM_PWM_Start+0xc6>
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2202      	movs	r2, #2
 8015e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015e50:	e01b      	b.n	8015e8a <HAL_TIM_PWM_Start+0xfe>
 8015e52:	683b      	ldr	r3, [r7, #0]
 8015e54:	2b08      	cmp	r3, #8
 8015e56:	d104      	bne.n	8015e62 <HAL_TIM_PWM_Start+0xd6>
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	2202      	movs	r2, #2
 8015e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015e60:	e013      	b.n	8015e8a <HAL_TIM_PWM_Start+0xfe>
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	2b0c      	cmp	r3, #12
 8015e66:	d104      	bne.n	8015e72 <HAL_TIM_PWM_Start+0xe6>
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2202      	movs	r2, #2
 8015e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015e70:	e00b      	b.n	8015e8a <HAL_TIM_PWM_Start+0xfe>
 8015e72:	683b      	ldr	r3, [r7, #0]
 8015e74:	2b10      	cmp	r3, #16
 8015e76:	d104      	bne.n	8015e82 <HAL_TIM_PWM_Start+0xf6>
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2202      	movs	r2, #2
 8015e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015e80:	e003      	b.n	8015e8a <HAL_TIM_PWM_Start+0xfe>
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2202      	movs	r2, #2
 8015e86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	2201      	movs	r2, #1
 8015e90:	6839      	ldr	r1, [r7, #0]
 8015e92:	4618      	mov	r0, r3
 8015e94:	f001 fa1a 	bl	80172cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	4a3d      	ldr	r2, [pc, #244]	@ (8015f94 <HAL_TIM_PWM_Start+0x208>)
 8015e9e:	4293      	cmp	r3, r2
 8015ea0:	d013      	beq.n	8015eca <HAL_TIM_PWM_Start+0x13e>
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	4a3c      	ldr	r2, [pc, #240]	@ (8015f98 <HAL_TIM_PWM_Start+0x20c>)
 8015ea8:	4293      	cmp	r3, r2
 8015eaa:	d00e      	beq.n	8015eca <HAL_TIM_PWM_Start+0x13e>
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	4a3a      	ldr	r2, [pc, #232]	@ (8015f9c <HAL_TIM_PWM_Start+0x210>)
 8015eb2:	4293      	cmp	r3, r2
 8015eb4:	d009      	beq.n	8015eca <HAL_TIM_PWM_Start+0x13e>
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	4a39      	ldr	r2, [pc, #228]	@ (8015fa0 <HAL_TIM_PWM_Start+0x214>)
 8015ebc:	4293      	cmp	r3, r2
 8015ebe:	d004      	beq.n	8015eca <HAL_TIM_PWM_Start+0x13e>
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	4a37      	ldr	r2, [pc, #220]	@ (8015fa4 <HAL_TIM_PWM_Start+0x218>)
 8015ec6:	4293      	cmp	r3, r2
 8015ec8:	d101      	bne.n	8015ece <HAL_TIM_PWM_Start+0x142>
 8015eca:	2301      	movs	r3, #1
 8015ecc:	e000      	b.n	8015ed0 <HAL_TIM_PWM_Start+0x144>
 8015ece:	2300      	movs	r3, #0
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d007      	beq.n	8015ee4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015ee2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8015f94 <HAL_TIM_PWM_Start+0x208>)
 8015eea:	4293      	cmp	r3, r2
 8015eec:	d02c      	beq.n	8015f48 <HAL_TIM_PWM_Start+0x1bc>
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015ef6:	d027      	beq.n	8015f48 <HAL_TIM_PWM_Start+0x1bc>
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	4a2a      	ldr	r2, [pc, #168]	@ (8015fa8 <HAL_TIM_PWM_Start+0x21c>)
 8015efe:	4293      	cmp	r3, r2
 8015f00:	d022      	beq.n	8015f48 <HAL_TIM_PWM_Start+0x1bc>
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	4a29      	ldr	r2, [pc, #164]	@ (8015fac <HAL_TIM_PWM_Start+0x220>)
 8015f08:	4293      	cmp	r3, r2
 8015f0a:	d01d      	beq.n	8015f48 <HAL_TIM_PWM_Start+0x1bc>
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	4a27      	ldr	r2, [pc, #156]	@ (8015fb0 <HAL_TIM_PWM_Start+0x224>)
 8015f12:	4293      	cmp	r3, r2
 8015f14:	d018      	beq.n	8015f48 <HAL_TIM_PWM_Start+0x1bc>
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8015f98 <HAL_TIM_PWM_Start+0x20c>)
 8015f1c:	4293      	cmp	r3, r2
 8015f1e:	d013      	beq.n	8015f48 <HAL_TIM_PWM_Start+0x1bc>
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	4a23      	ldr	r2, [pc, #140]	@ (8015fb4 <HAL_TIM_PWM_Start+0x228>)
 8015f26:	4293      	cmp	r3, r2
 8015f28:	d00e      	beq.n	8015f48 <HAL_TIM_PWM_Start+0x1bc>
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8015f9c <HAL_TIM_PWM_Start+0x210>)
 8015f30:	4293      	cmp	r3, r2
 8015f32:	d009      	beq.n	8015f48 <HAL_TIM_PWM_Start+0x1bc>
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	4a1f      	ldr	r2, [pc, #124]	@ (8015fb8 <HAL_TIM_PWM_Start+0x22c>)
 8015f3a:	4293      	cmp	r3, r2
 8015f3c:	d004      	beq.n	8015f48 <HAL_TIM_PWM_Start+0x1bc>
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	4a1e      	ldr	r2, [pc, #120]	@ (8015fbc <HAL_TIM_PWM_Start+0x230>)
 8015f44:	4293      	cmp	r3, r2
 8015f46:	d115      	bne.n	8015f74 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	689a      	ldr	r2, [r3, #8]
 8015f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8015fc0 <HAL_TIM_PWM_Start+0x234>)
 8015f50:	4013      	ands	r3, r2
 8015f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	2b06      	cmp	r3, #6
 8015f58:	d015      	beq.n	8015f86 <HAL_TIM_PWM_Start+0x1fa>
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015f60:	d011      	beq.n	8015f86 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	681a      	ldr	r2, [r3, #0]
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	f042 0201 	orr.w	r2, r2, #1
 8015f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f72:	e008      	b.n	8015f86 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	681a      	ldr	r2, [r3, #0]
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	f042 0201 	orr.w	r2, r2, #1
 8015f82:	601a      	str	r2, [r3, #0]
 8015f84:	e000      	b.n	8015f88 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015f88:	2300      	movs	r3, #0
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	3710      	adds	r7, #16
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}
 8015f92:	bf00      	nop
 8015f94:	40010000 	.word	0x40010000
 8015f98:	40010400 	.word	0x40010400
 8015f9c:	40014000 	.word	0x40014000
 8015fa0:	40014400 	.word	0x40014400
 8015fa4:	40014800 	.word	0x40014800
 8015fa8:	40000400 	.word	0x40000400
 8015fac:	40000800 	.word	0x40000800
 8015fb0:	40000c00 	.word	0x40000c00
 8015fb4:	40001800 	.word	0x40001800
 8015fb8:	4000e000 	.word	0x4000e000
 8015fbc:	4000e400 	.word	0x4000e400
 8015fc0:	00010007 	.word	0x00010007

08015fc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b082      	sub	sp, #8
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d101      	bne.n	8015fd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8015fd2:	2301      	movs	r3, #1
 8015fd4:	e049      	b.n	801606a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015fdc:	b2db      	uxtb	r3, r3
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d106      	bne.n	8015ff0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8015fea:	6878      	ldr	r0, [r7, #4]
 8015fec:	f7f2 f9aa 	bl	8008344 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2202      	movs	r2, #2
 8015ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	681a      	ldr	r2, [r3, #0]
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	3304      	adds	r3, #4
 8016000:	4619      	mov	r1, r3
 8016002:	4610      	mov	r0, r2
 8016004:	f000 fc0c 	bl	8016820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2201      	movs	r2, #1
 801600c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2201      	movs	r2, #1
 8016014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	2201      	movs	r2, #1
 801601c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	2201      	movs	r2, #1
 8016024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2201      	movs	r2, #1
 801602c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	2201      	movs	r2, #1
 8016034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	2201      	movs	r2, #1
 801603c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	2201      	movs	r2, #1
 8016044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	2201      	movs	r2, #1
 801604c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	2201      	movs	r2, #1
 8016054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	2201      	movs	r2, #1
 801605c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	2201      	movs	r2, #1
 8016064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016068:	2300      	movs	r3, #0
}
 801606a:	4618      	mov	r0, r3
 801606c:	3708      	adds	r7, #8
 801606e:	46bd      	mov	sp, r7
 8016070:	bd80      	pop	{r7, pc}

08016072 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016072:	b580      	push	{r7, lr}
 8016074:	b084      	sub	sp, #16
 8016076:	af00      	add	r7, sp, #0
 8016078:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	68db      	ldr	r3, [r3, #12]
 8016080:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	691b      	ldr	r3, [r3, #16]
 8016088:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801608a:	68bb      	ldr	r3, [r7, #8]
 801608c:	f003 0302 	and.w	r3, r3, #2
 8016090:	2b00      	cmp	r3, #0
 8016092:	d020      	beq.n	80160d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	f003 0302 	and.w	r3, r3, #2
 801609a:	2b00      	cmp	r3, #0
 801609c:	d01b      	beq.n	80160d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	f06f 0202 	mvn.w	r2, #2
 80160a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	2201      	movs	r2, #1
 80160ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	699b      	ldr	r3, [r3, #24]
 80160b4:	f003 0303 	and.w	r3, r3, #3
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d003      	beq.n	80160c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f000 fb91 	bl	80167e4 <HAL_TIM_IC_CaptureCallback>
 80160c2:	e005      	b.n	80160d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f000 fb83 	bl	80167d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f000 fb94 	bl	80167f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	2200      	movs	r2, #0
 80160d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80160d6:	68bb      	ldr	r3, [r7, #8]
 80160d8:	f003 0304 	and.w	r3, r3, #4
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d020      	beq.n	8016122 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	f003 0304 	and.w	r3, r3, #4
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d01b      	beq.n	8016122 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	f06f 0204 	mvn.w	r2, #4
 80160f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	2202      	movs	r2, #2
 80160f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	699b      	ldr	r3, [r3, #24]
 8016100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016104:	2b00      	cmp	r3, #0
 8016106:	d003      	beq.n	8016110 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016108:	6878      	ldr	r0, [r7, #4]
 801610a:	f000 fb6b 	bl	80167e4 <HAL_TIM_IC_CaptureCallback>
 801610e:	e005      	b.n	801611c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016110:	6878      	ldr	r0, [r7, #4]
 8016112:	f000 fb5d 	bl	80167d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	f000 fb6e 	bl	80167f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	2200      	movs	r2, #0
 8016120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8016122:	68bb      	ldr	r3, [r7, #8]
 8016124:	f003 0308 	and.w	r3, r3, #8
 8016128:	2b00      	cmp	r3, #0
 801612a:	d020      	beq.n	801616e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	f003 0308 	and.w	r3, r3, #8
 8016132:	2b00      	cmp	r3, #0
 8016134:	d01b      	beq.n	801616e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	f06f 0208 	mvn.w	r2, #8
 801613e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	2204      	movs	r2, #4
 8016144:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	69db      	ldr	r3, [r3, #28]
 801614c:	f003 0303 	and.w	r3, r3, #3
 8016150:	2b00      	cmp	r3, #0
 8016152:	d003      	beq.n	801615c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016154:	6878      	ldr	r0, [r7, #4]
 8016156:	f000 fb45 	bl	80167e4 <HAL_TIM_IC_CaptureCallback>
 801615a:	e005      	b.n	8016168 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f000 fb37 	bl	80167d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	f000 fb48 	bl	80167f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	2200      	movs	r2, #0
 801616c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	f003 0310 	and.w	r3, r3, #16
 8016174:	2b00      	cmp	r3, #0
 8016176:	d020      	beq.n	80161ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	f003 0310 	and.w	r3, r3, #16
 801617e:	2b00      	cmp	r3, #0
 8016180:	d01b      	beq.n	80161ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	f06f 0210 	mvn.w	r2, #16
 801618a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	2208      	movs	r2, #8
 8016190:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	69db      	ldr	r3, [r3, #28]
 8016198:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801619c:	2b00      	cmp	r3, #0
 801619e:	d003      	beq.n	80161a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f000 fb1f 	bl	80167e4 <HAL_TIM_IC_CaptureCallback>
 80161a6:	e005      	b.n	80161b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80161a8:	6878      	ldr	r0, [r7, #4]
 80161aa:	f000 fb11 	bl	80167d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80161ae:	6878      	ldr	r0, [r7, #4]
 80161b0:	f000 fb22 	bl	80167f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	2200      	movs	r2, #0
 80161b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80161ba:	68bb      	ldr	r3, [r7, #8]
 80161bc:	f003 0301 	and.w	r3, r3, #1
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d00c      	beq.n	80161de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	f003 0301 	and.w	r3, r3, #1
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d007      	beq.n	80161de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	f06f 0201 	mvn.w	r2, #1
 80161d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80161d8:	6878      	ldr	r0, [r7, #4]
 80161da:	f7ef fc0d 	bl	80059f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80161de:	68bb      	ldr	r3, [r7, #8]
 80161e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d104      	bne.n	80161f2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80161e8:	68bb      	ldr	r3, [r7, #8]
 80161ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d00c      	beq.n	801620c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d007      	beq.n	801620c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8016204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f001 f9b8 	bl	801757c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801620c:	68bb      	ldr	r3, [r7, #8]
 801620e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016212:	2b00      	cmp	r3, #0
 8016214:	d00c      	beq.n	8016230 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801621c:	2b00      	cmp	r3, #0
 801621e:	d007      	beq.n	8016230 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801622a:	6878      	ldr	r0, [r7, #4]
 801622c:	f001 f9b0 	bl	8017590 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016230:	68bb      	ldr	r3, [r7, #8]
 8016232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016236:	2b00      	cmp	r3, #0
 8016238:	d00c      	beq.n	8016254 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016240:	2b00      	cmp	r3, #0
 8016242:	d007      	beq.n	8016254 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801624c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801624e:	6878      	ldr	r0, [r7, #4]
 8016250:	f000 fadc 	bl	801680c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016254:	68bb      	ldr	r3, [r7, #8]
 8016256:	f003 0320 	and.w	r3, r3, #32
 801625a:	2b00      	cmp	r3, #0
 801625c:	d00c      	beq.n	8016278 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	f003 0320 	and.w	r3, r3, #32
 8016264:	2b00      	cmp	r3, #0
 8016266:	d007      	beq.n	8016278 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	f06f 0220 	mvn.w	r2, #32
 8016270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	f001 f978 	bl	8017568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016278:	bf00      	nop
 801627a:	3710      	adds	r7, #16
 801627c:	46bd      	mov	sp, r7
 801627e:	bd80      	pop	{r7, pc}

08016280 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016280:	b580      	push	{r7, lr}
 8016282:	b086      	sub	sp, #24
 8016284:	af00      	add	r7, sp, #0
 8016286:	60f8      	str	r0, [r7, #12]
 8016288:	60b9      	str	r1, [r7, #8]
 801628a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801628c:	2300      	movs	r3, #0
 801628e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016296:	2b01      	cmp	r3, #1
 8016298:	d101      	bne.n	801629e <HAL_TIM_IC_ConfigChannel+0x1e>
 801629a:	2302      	movs	r3, #2
 801629c:	e088      	b.n	80163b0 <HAL_TIM_IC_ConfigChannel+0x130>
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	2201      	movs	r2, #1
 80162a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d11b      	bne.n	80162e4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80162b0:	68bb      	ldr	r3, [r7, #8]
 80162b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80162bc:	f000 fe32 	bl	8016f24 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	699a      	ldr	r2, [r3, #24]
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	f022 020c 	bic.w	r2, r2, #12
 80162ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	6999      	ldr	r1, [r3, #24]
 80162d6:	68bb      	ldr	r3, [r7, #8]
 80162d8:	689a      	ldr	r2, [r3, #8]
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	430a      	orrs	r2, r1
 80162e0:	619a      	str	r2, [r3, #24]
 80162e2:	e060      	b.n	80163a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2b04      	cmp	r3, #4
 80162e8:	d11c      	bne.n	8016324 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80162ee:	68bb      	ldr	r3, [r7, #8]
 80162f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80162f2:	68bb      	ldr	r3, [r7, #8]
 80162f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80162f6:	68bb      	ldr	r3, [r7, #8]
 80162f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80162fa:	f000 fec2 	bl	8017082 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	699a      	ldr	r2, [r3, #24]
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801630c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	6999      	ldr	r1, [r3, #24]
 8016314:	68bb      	ldr	r3, [r7, #8]
 8016316:	689b      	ldr	r3, [r3, #8]
 8016318:	021a      	lsls	r2, r3, #8
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	430a      	orrs	r2, r1
 8016320:	619a      	str	r2, [r3, #24]
 8016322:	e040      	b.n	80163a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2b08      	cmp	r3, #8
 8016328:	d11b      	bne.n	8016362 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801632e:	68bb      	ldr	r3, [r7, #8]
 8016330:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016332:	68bb      	ldr	r3, [r7, #8]
 8016334:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016336:	68bb      	ldr	r3, [r7, #8]
 8016338:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801633a:	f000 ff0f 	bl	801715c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	69da      	ldr	r2, [r3, #28]
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	f022 020c 	bic.w	r2, r2, #12
 801634c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	69d9      	ldr	r1, [r3, #28]
 8016354:	68bb      	ldr	r3, [r7, #8]
 8016356:	689a      	ldr	r2, [r3, #8]
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	430a      	orrs	r2, r1
 801635e:	61da      	str	r2, [r3, #28]
 8016360:	e021      	b.n	80163a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	2b0c      	cmp	r3, #12
 8016366:	d11c      	bne.n	80163a2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801636c:	68bb      	ldr	r3, [r7, #8]
 801636e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016370:	68bb      	ldr	r3, [r7, #8]
 8016372:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016374:	68bb      	ldr	r3, [r7, #8]
 8016376:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8016378:	f000 ff2c 	bl	80171d4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	69da      	ldr	r2, [r3, #28]
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801638a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	69d9      	ldr	r1, [r3, #28]
 8016392:	68bb      	ldr	r3, [r7, #8]
 8016394:	689b      	ldr	r3, [r3, #8]
 8016396:	021a      	lsls	r2, r3, #8
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	430a      	orrs	r2, r1
 801639e:	61da      	str	r2, [r3, #28]
 80163a0:	e001      	b.n	80163a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80163a2:	2301      	movs	r3, #1
 80163a4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	2200      	movs	r2, #0
 80163aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80163ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80163b0:	4618      	mov	r0, r3
 80163b2:	3718      	adds	r7, #24
 80163b4:	46bd      	mov	sp, r7
 80163b6:	bd80      	pop	{r7, pc}

080163b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b086      	sub	sp, #24
 80163bc:	af00      	add	r7, sp, #0
 80163be:	60f8      	str	r0, [r7, #12]
 80163c0:	60b9      	str	r1, [r7, #8]
 80163c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80163c4:	2300      	movs	r3, #0
 80163c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80163ce:	2b01      	cmp	r3, #1
 80163d0:	d101      	bne.n	80163d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80163d2:	2302      	movs	r3, #2
 80163d4:	e0ff      	b.n	80165d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	2201      	movs	r2, #1
 80163da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	2b14      	cmp	r3, #20
 80163e2:	f200 80f0 	bhi.w	80165c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80163e6:	a201      	add	r2, pc, #4	@ (adr r2, 80163ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80163e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163ec:	08016441 	.word	0x08016441
 80163f0:	080165c7 	.word	0x080165c7
 80163f4:	080165c7 	.word	0x080165c7
 80163f8:	080165c7 	.word	0x080165c7
 80163fc:	08016481 	.word	0x08016481
 8016400:	080165c7 	.word	0x080165c7
 8016404:	080165c7 	.word	0x080165c7
 8016408:	080165c7 	.word	0x080165c7
 801640c:	080164c3 	.word	0x080164c3
 8016410:	080165c7 	.word	0x080165c7
 8016414:	080165c7 	.word	0x080165c7
 8016418:	080165c7 	.word	0x080165c7
 801641c:	08016503 	.word	0x08016503
 8016420:	080165c7 	.word	0x080165c7
 8016424:	080165c7 	.word	0x080165c7
 8016428:	080165c7 	.word	0x080165c7
 801642c:	08016545 	.word	0x08016545
 8016430:	080165c7 	.word	0x080165c7
 8016434:	080165c7 	.word	0x080165c7
 8016438:	080165c7 	.word	0x080165c7
 801643c:	08016585 	.word	0x08016585
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	68b9      	ldr	r1, [r7, #8]
 8016446:	4618      	mov	r0, r3
 8016448:	f000 fa96 	bl	8016978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	699a      	ldr	r2, [r3, #24]
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	f042 0208 	orr.w	r2, r2, #8
 801645a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	699a      	ldr	r2, [r3, #24]
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	f022 0204 	bic.w	r2, r2, #4
 801646a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	6999      	ldr	r1, [r3, #24]
 8016472:	68bb      	ldr	r3, [r7, #8]
 8016474:	691a      	ldr	r2, [r3, #16]
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	430a      	orrs	r2, r1
 801647c:	619a      	str	r2, [r3, #24]
      break;
 801647e:	e0a5      	b.n	80165cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	68b9      	ldr	r1, [r7, #8]
 8016486:	4618      	mov	r0, r3
 8016488:	f000 fb06 	bl	8016a98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	699a      	ldr	r2, [r3, #24]
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801649a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	699a      	ldr	r2, [r3, #24]
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80164aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	6999      	ldr	r1, [r3, #24]
 80164b2:	68bb      	ldr	r3, [r7, #8]
 80164b4:	691b      	ldr	r3, [r3, #16]
 80164b6:	021a      	lsls	r2, r3, #8
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	430a      	orrs	r2, r1
 80164be:	619a      	str	r2, [r3, #24]
      break;
 80164c0:	e084      	b.n	80165cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	68b9      	ldr	r1, [r7, #8]
 80164c8:	4618      	mov	r0, r3
 80164ca:	f000 fb6f 	bl	8016bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	69da      	ldr	r2, [r3, #28]
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	f042 0208 	orr.w	r2, r2, #8
 80164dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	69da      	ldr	r2, [r3, #28]
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	f022 0204 	bic.w	r2, r2, #4
 80164ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	69d9      	ldr	r1, [r3, #28]
 80164f4:	68bb      	ldr	r3, [r7, #8]
 80164f6:	691a      	ldr	r2, [r3, #16]
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	430a      	orrs	r2, r1
 80164fe:	61da      	str	r2, [r3, #28]
      break;
 8016500:	e064      	b.n	80165cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	68b9      	ldr	r1, [r7, #8]
 8016508:	4618      	mov	r0, r3
 801650a:	f000 fbd7 	bl	8016cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	69da      	ldr	r2, [r3, #28]
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801651c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	69da      	ldr	r2, [r3, #28]
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801652c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	69d9      	ldr	r1, [r3, #28]
 8016534:	68bb      	ldr	r3, [r7, #8]
 8016536:	691b      	ldr	r3, [r3, #16]
 8016538:	021a      	lsls	r2, r3, #8
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	430a      	orrs	r2, r1
 8016540:	61da      	str	r2, [r3, #28]
      break;
 8016542:	e043      	b.n	80165cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	68b9      	ldr	r1, [r7, #8]
 801654a:	4618      	mov	r0, r3
 801654c:	f000 fc20 	bl	8016d90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	f042 0208 	orr.w	r2, r2, #8
 801655e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	f022 0204 	bic.w	r2, r2, #4
 801656e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016576:	68bb      	ldr	r3, [r7, #8]
 8016578:	691a      	ldr	r2, [r3, #16]
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	430a      	orrs	r2, r1
 8016580:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016582:	e023      	b.n	80165cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	68b9      	ldr	r1, [r7, #8]
 801658a:	4618      	mov	r0, r3
 801658c:	f000 fc64 	bl	8016e58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801659e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80165ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80165b6:	68bb      	ldr	r3, [r7, #8]
 80165b8:	691b      	ldr	r3, [r3, #16]
 80165ba:	021a      	lsls	r2, r3, #8
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	430a      	orrs	r2, r1
 80165c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80165c4:	e002      	b.n	80165cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80165c6:	2301      	movs	r3, #1
 80165c8:	75fb      	strb	r3, [r7, #23]
      break;
 80165ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	2200      	movs	r2, #0
 80165d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80165d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80165d6:	4618      	mov	r0, r3
 80165d8:	3718      	adds	r7, #24
 80165da:	46bd      	mov	sp, r7
 80165dc:	bd80      	pop	{r7, pc}
 80165de:	bf00      	nop

080165e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b084      	sub	sp, #16
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
 80165e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80165ea:	2300      	movs	r3, #0
 80165ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80165f4:	2b01      	cmp	r3, #1
 80165f6:	d101      	bne.n	80165fc <HAL_TIM_ConfigClockSource+0x1c>
 80165f8:	2302      	movs	r3, #2
 80165fa:	e0dc      	b.n	80167b6 <HAL_TIM_ConfigClockSource+0x1d6>
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	2201      	movs	r2, #1
 8016600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2202      	movs	r2, #2
 8016608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	689b      	ldr	r3, [r3, #8]
 8016612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016614:	68ba      	ldr	r2, [r7, #8]
 8016616:	4b6a      	ldr	r3, [pc, #424]	@ (80167c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016618:	4013      	ands	r3, r2
 801661a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	68ba      	ldr	r2, [r7, #8]
 801662a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801662c:	683b      	ldr	r3, [r7, #0]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	4a64      	ldr	r2, [pc, #400]	@ (80167c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016632:	4293      	cmp	r3, r2
 8016634:	f000 80a9 	beq.w	801678a <HAL_TIM_ConfigClockSource+0x1aa>
 8016638:	4a62      	ldr	r2, [pc, #392]	@ (80167c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 801663a:	4293      	cmp	r3, r2
 801663c:	f200 80ae 	bhi.w	801679c <HAL_TIM_ConfigClockSource+0x1bc>
 8016640:	4a61      	ldr	r2, [pc, #388]	@ (80167c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016642:	4293      	cmp	r3, r2
 8016644:	f000 80a1 	beq.w	801678a <HAL_TIM_ConfigClockSource+0x1aa>
 8016648:	4a5f      	ldr	r2, [pc, #380]	@ (80167c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 801664a:	4293      	cmp	r3, r2
 801664c:	f200 80a6 	bhi.w	801679c <HAL_TIM_ConfigClockSource+0x1bc>
 8016650:	4a5e      	ldr	r2, [pc, #376]	@ (80167cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8016652:	4293      	cmp	r3, r2
 8016654:	f000 8099 	beq.w	801678a <HAL_TIM_ConfigClockSource+0x1aa>
 8016658:	4a5c      	ldr	r2, [pc, #368]	@ (80167cc <HAL_TIM_ConfigClockSource+0x1ec>)
 801665a:	4293      	cmp	r3, r2
 801665c:	f200 809e 	bhi.w	801679c <HAL_TIM_ConfigClockSource+0x1bc>
 8016660:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016664:	f000 8091 	beq.w	801678a <HAL_TIM_ConfigClockSource+0x1aa>
 8016668:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801666c:	f200 8096 	bhi.w	801679c <HAL_TIM_ConfigClockSource+0x1bc>
 8016670:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016674:	f000 8089 	beq.w	801678a <HAL_TIM_ConfigClockSource+0x1aa>
 8016678:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801667c:	f200 808e 	bhi.w	801679c <HAL_TIM_ConfigClockSource+0x1bc>
 8016680:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016684:	d03e      	beq.n	8016704 <HAL_TIM_ConfigClockSource+0x124>
 8016686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801668a:	f200 8087 	bhi.w	801679c <HAL_TIM_ConfigClockSource+0x1bc>
 801668e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016692:	f000 8086 	beq.w	80167a2 <HAL_TIM_ConfigClockSource+0x1c2>
 8016696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801669a:	d87f      	bhi.n	801679c <HAL_TIM_ConfigClockSource+0x1bc>
 801669c:	2b70      	cmp	r3, #112	@ 0x70
 801669e:	d01a      	beq.n	80166d6 <HAL_TIM_ConfigClockSource+0xf6>
 80166a0:	2b70      	cmp	r3, #112	@ 0x70
 80166a2:	d87b      	bhi.n	801679c <HAL_TIM_ConfigClockSource+0x1bc>
 80166a4:	2b60      	cmp	r3, #96	@ 0x60
 80166a6:	d050      	beq.n	801674a <HAL_TIM_ConfigClockSource+0x16a>
 80166a8:	2b60      	cmp	r3, #96	@ 0x60
 80166aa:	d877      	bhi.n	801679c <HAL_TIM_ConfigClockSource+0x1bc>
 80166ac:	2b50      	cmp	r3, #80	@ 0x50
 80166ae:	d03c      	beq.n	801672a <HAL_TIM_ConfigClockSource+0x14a>
 80166b0:	2b50      	cmp	r3, #80	@ 0x50
 80166b2:	d873      	bhi.n	801679c <HAL_TIM_ConfigClockSource+0x1bc>
 80166b4:	2b40      	cmp	r3, #64	@ 0x40
 80166b6:	d058      	beq.n	801676a <HAL_TIM_ConfigClockSource+0x18a>
 80166b8:	2b40      	cmp	r3, #64	@ 0x40
 80166ba:	d86f      	bhi.n	801679c <HAL_TIM_ConfigClockSource+0x1bc>
 80166bc:	2b30      	cmp	r3, #48	@ 0x30
 80166be:	d064      	beq.n	801678a <HAL_TIM_ConfigClockSource+0x1aa>
 80166c0:	2b30      	cmp	r3, #48	@ 0x30
 80166c2:	d86b      	bhi.n	801679c <HAL_TIM_ConfigClockSource+0x1bc>
 80166c4:	2b20      	cmp	r3, #32
 80166c6:	d060      	beq.n	801678a <HAL_TIM_ConfigClockSource+0x1aa>
 80166c8:	2b20      	cmp	r3, #32
 80166ca:	d867      	bhi.n	801679c <HAL_TIM_ConfigClockSource+0x1bc>
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d05c      	beq.n	801678a <HAL_TIM_ConfigClockSource+0x1aa>
 80166d0:	2b10      	cmp	r3, #16
 80166d2:	d05a      	beq.n	801678a <HAL_TIM_ConfigClockSource+0x1aa>
 80166d4:	e062      	b.n	801679c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80166e6:	f000 fdd1 	bl	801728c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	689b      	ldr	r3, [r3, #8]
 80166f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80166f2:	68bb      	ldr	r3, [r7, #8]
 80166f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80166f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	68ba      	ldr	r2, [r7, #8]
 8016700:	609a      	str	r2, [r3, #8]
      break;
 8016702:	e04f      	b.n	80167a4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016708:	683b      	ldr	r3, [r7, #0]
 801670a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801670c:	683b      	ldr	r3, [r7, #0]
 801670e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016714:	f000 fdba 	bl	801728c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	689a      	ldr	r2, [r3, #8]
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016726:	609a      	str	r2, [r3, #8]
      break;
 8016728:	e03c      	b.n	80167a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016736:	461a      	mov	r2, r3
 8016738:	f000 fc74 	bl	8017024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	2150      	movs	r1, #80	@ 0x50
 8016742:	4618      	mov	r0, r3
 8016744:	f000 fd84 	bl	8017250 <TIM_ITRx_SetConfig>
      break;
 8016748:	e02c      	b.n	80167a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801674e:	683b      	ldr	r3, [r7, #0]
 8016750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016756:	461a      	mov	r2, r3
 8016758:	f000 fcd0 	bl	80170fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	2160      	movs	r1, #96	@ 0x60
 8016762:	4618      	mov	r0, r3
 8016764:	f000 fd74 	bl	8017250 <TIM_ITRx_SetConfig>
      break;
 8016768:	e01c      	b.n	80167a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801676e:	683b      	ldr	r3, [r7, #0]
 8016770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016776:	461a      	mov	r2, r3
 8016778:	f000 fc54 	bl	8017024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	2140      	movs	r1, #64	@ 0x40
 8016782:	4618      	mov	r0, r3
 8016784:	f000 fd64 	bl	8017250 <TIM_ITRx_SetConfig>
      break;
 8016788:	e00c      	b.n	80167a4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	681a      	ldr	r2, [r3, #0]
 801678e:	683b      	ldr	r3, [r7, #0]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	4619      	mov	r1, r3
 8016794:	4610      	mov	r0, r2
 8016796:	f000 fd5b 	bl	8017250 <TIM_ITRx_SetConfig>
      break;
 801679a:	e003      	b.n	80167a4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801679c:	2301      	movs	r3, #1
 801679e:	73fb      	strb	r3, [r7, #15]
      break;
 80167a0:	e000      	b.n	80167a4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80167a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2201      	movs	r2, #1
 80167a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2200      	movs	r2, #0
 80167b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80167b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	3710      	adds	r7, #16
 80167ba:	46bd      	mov	sp, r7
 80167bc:	bd80      	pop	{r7, pc}
 80167be:	bf00      	nop
 80167c0:	ffceff88 	.word	0xffceff88
 80167c4:	00100040 	.word	0x00100040
 80167c8:	00100030 	.word	0x00100030
 80167cc:	00100020 	.word	0x00100020

080167d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80167d0:	b480      	push	{r7}
 80167d2:	b083      	sub	sp, #12
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80167d8:	bf00      	nop
 80167da:	370c      	adds	r7, #12
 80167dc:	46bd      	mov	sp, r7
 80167de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e2:	4770      	bx	lr

080167e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80167e4:	b480      	push	{r7}
 80167e6:	b083      	sub	sp, #12
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80167ec:	bf00      	nop
 80167ee:	370c      	adds	r7, #12
 80167f0:	46bd      	mov	sp, r7
 80167f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f6:	4770      	bx	lr

080167f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80167f8:	b480      	push	{r7}
 80167fa:	b083      	sub	sp, #12
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016800:	bf00      	nop
 8016802:	370c      	adds	r7, #12
 8016804:	46bd      	mov	sp, r7
 8016806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801680a:	4770      	bx	lr

0801680c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801680c:	b480      	push	{r7}
 801680e:	b083      	sub	sp, #12
 8016810:	af00      	add	r7, sp, #0
 8016812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8016814:	bf00      	nop
 8016816:	370c      	adds	r7, #12
 8016818:	46bd      	mov	sp, r7
 801681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681e:	4770      	bx	lr

08016820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016820:	b480      	push	{r7}
 8016822:	b085      	sub	sp, #20
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
 8016828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	4a47      	ldr	r2, [pc, #284]	@ (8016950 <TIM_Base_SetConfig+0x130>)
 8016834:	4293      	cmp	r3, r2
 8016836:	d013      	beq.n	8016860 <TIM_Base_SetConfig+0x40>
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801683e:	d00f      	beq.n	8016860 <TIM_Base_SetConfig+0x40>
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	4a44      	ldr	r2, [pc, #272]	@ (8016954 <TIM_Base_SetConfig+0x134>)
 8016844:	4293      	cmp	r3, r2
 8016846:	d00b      	beq.n	8016860 <TIM_Base_SetConfig+0x40>
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	4a43      	ldr	r2, [pc, #268]	@ (8016958 <TIM_Base_SetConfig+0x138>)
 801684c:	4293      	cmp	r3, r2
 801684e:	d007      	beq.n	8016860 <TIM_Base_SetConfig+0x40>
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	4a42      	ldr	r2, [pc, #264]	@ (801695c <TIM_Base_SetConfig+0x13c>)
 8016854:	4293      	cmp	r3, r2
 8016856:	d003      	beq.n	8016860 <TIM_Base_SetConfig+0x40>
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	4a41      	ldr	r2, [pc, #260]	@ (8016960 <TIM_Base_SetConfig+0x140>)
 801685c:	4293      	cmp	r3, r2
 801685e:	d108      	bne.n	8016872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016868:	683b      	ldr	r3, [r7, #0]
 801686a:	685b      	ldr	r3, [r3, #4]
 801686c:	68fa      	ldr	r2, [r7, #12]
 801686e:	4313      	orrs	r3, r2
 8016870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	4a36      	ldr	r2, [pc, #216]	@ (8016950 <TIM_Base_SetConfig+0x130>)
 8016876:	4293      	cmp	r3, r2
 8016878:	d027      	beq.n	80168ca <TIM_Base_SetConfig+0xaa>
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016880:	d023      	beq.n	80168ca <TIM_Base_SetConfig+0xaa>
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	4a33      	ldr	r2, [pc, #204]	@ (8016954 <TIM_Base_SetConfig+0x134>)
 8016886:	4293      	cmp	r3, r2
 8016888:	d01f      	beq.n	80168ca <TIM_Base_SetConfig+0xaa>
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	4a32      	ldr	r2, [pc, #200]	@ (8016958 <TIM_Base_SetConfig+0x138>)
 801688e:	4293      	cmp	r3, r2
 8016890:	d01b      	beq.n	80168ca <TIM_Base_SetConfig+0xaa>
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	4a31      	ldr	r2, [pc, #196]	@ (801695c <TIM_Base_SetConfig+0x13c>)
 8016896:	4293      	cmp	r3, r2
 8016898:	d017      	beq.n	80168ca <TIM_Base_SetConfig+0xaa>
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	4a30      	ldr	r2, [pc, #192]	@ (8016960 <TIM_Base_SetConfig+0x140>)
 801689e:	4293      	cmp	r3, r2
 80168a0:	d013      	beq.n	80168ca <TIM_Base_SetConfig+0xaa>
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	4a2f      	ldr	r2, [pc, #188]	@ (8016964 <TIM_Base_SetConfig+0x144>)
 80168a6:	4293      	cmp	r3, r2
 80168a8:	d00f      	beq.n	80168ca <TIM_Base_SetConfig+0xaa>
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	4a2e      	ldr	r2, [pc, #184]	@ (8016968 <TIM_Base_SetConfig+0x148>)
 80168ae:	4293      	cmp	r3, r2
 80168b0:	d00b      	beq.n	80168ca <TIM_Base_SetConfig+0xaa>
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	4a2d      	ldr	r2, [pc, #180]	@ (801696c <TIM_Base_SetConfig+0x14c>)
 80168b6:	4293      	cmp	r3, r2
 80168b8:	d007      	beq.n	80168ca <TIM_Base_SetConfig+0xaa>
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	4a2c      	ldr	r2, [pc, #176]	@ (8016970 <TIM_Base_SetConfig+0x150>)
 80168be:	4293      	cmp	r3, r2
 80168c0:	d003      	beq.n	80168ca <TIM_Base_SetConfig+0xaa>
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	4a2b      	ldr	r2, [pc, #172]	@ (8016974 <TIM_Base_SetConfig+0x154>)
 80168c6:	4293      	cmp	r3, r2
 80168c8:	d108      	bne.n	80168dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80168d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80168d2:	683b      	ldr	r3, [r7, #0]
 80168d4:	68db      	ldr	r3, [r3, #12]
 80168d6:	68fa      	ldr	r2, [r7, #12]
 80168d8:	4313      	orrs	r3, r2
 80168da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80168e2:	683b      	ldr	r3, [r7, #0]
 80168e4:	695b      	ldr	r3, [r3, #20]
 80168e6:	4313      	orrs	r3, r2
 80168e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80168ea:	683b      	ldr	r3, [r7, #0]
 80168ec:	689a      	ldr	r2, [r3, #8]
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	681a      	ldr	r2, [r3, #0]
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	4a14      	ldr	r2, [pc, #80]	@ (8016950 <TIM_Base_SetConfig+0x130>)
 80168fe:	4293      	cmp	r3, r2
 8016900:	d00f      	beq.n	8016922 <TIM_Base_SetConfig+0x102>
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	4a16      	ldr	r2, [pc, #88]	@ (8016960 <TIM_Base_SetConfig+0x140>)
 8016906:	4293      	cmp	r3, r2
 8016908:	d00b      	beq.n	8016922 <TIM_Base_SetConfig+0x102>
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	4a15      	ldr	r2, [pc, #84]	@ (8016964 <TIM_Base_SetConfig+0x144>)
 801690e:	4293      	cmp	r3, r2
 8016910:	d007      	beq.n	8016922 <TIM_Base_SetConfig+0x102>
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	4a14      	ldr	r2, [pc, #80]	@ (8016968 <TIM_Base_SetConfig+0x148>)
 8016916:	4293      	cmp	r3, r2
 8016918:	d003      	beq.n	8016922 <TIM_Base_SetConfig+0x102>
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	4a13      	ldr	r2, [pc, #76]	@ (801696c <TIM_Base_SetConfig+0x14c>)
 801691e:	4293      	cmp	r3, r2
 8016920:	d103      	bne.n	801692a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	691a      	ldr	r2, [r3, #16]
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	f043 0204 	orr.w	r2, r3, #4
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	2201      	movs	r2, #1
 801693a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	68fa      	ldr	r2, [r7, #12]
 8016940:	601a      	str	r2, [r3, #0]
}
 8016942:	bf00      	nop
 8016944:	3714      	adds	r7, #20
 8016946:	46bd      	mov	sp, r7
 8016948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694c:	4770      	bx	lr
 801694e:	bf00      	nop
 8016950:	40010000 	.word	0x40010000
 8016954:	40000400 	.word	0x40000400
 8016958:	40000800 	.word	0x40000800
 801695c:	40000c00 	.word	0x40000c00
 8016960:	40010400 	.word	0x40010400
 8016964:	40014000 	.word	0x40014000
 8016968:	40014400 	.word	0x40014400
 801696c:	40014800 	.word	0x40014800
 8016970:	4000e000 	.word	0x4000e000
 8016974:	4000e400 	.word	0x4000e400

08016978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016978:	b480      	push	{r7}
 801697a:	b087      	sub	sp, #28
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
 8016980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	6a1b      	ldr	r3, [r3, #32]
 8016986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	6a1b      	ldr	r3, [r3, #32]
 801698c:	f023 0201 	bic.w	r2, r3, #1
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	685b      	ldr	r3, [r3, #4]
 8016998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	699b      	ldr	r3, [r3, #24]
 801699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80169a0:	68fa      	ldr	r2, [r7, #12]
 80169a2:	4b37      	ldr	r3, [pc, #220]	@ (8016a80 <TIM_OC1_SetConfig+0x108>)
 80169a4:	4013      	ands	r3, r2
 80169a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	f023 0303 	bic.w	r3, r3, #3
 80169ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80169b0:	683b      	ldr	r3, [r7, #0]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	68fa      	ldr	r2, [r7, #12]
 80169b6:	4313      	orrs	r3, r2
 80169b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80169ba:	697b      	ldr	r3, [r7, #20]
 80169bc:	f023 0302 	bic.w	r3, r3, #2
 80169c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80169c2:	683b      	ldr	r3, [r7, #0]
 80169c4:	689b      	ldr	r3, [r3, #8]
 80169c6:	697a      	ldr	r2, [r7, #20]
 80169c8:	4313      	orrs	r3, r2
 80169ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	4a2d      	ldr	r2, [pc, #180]	@ (8016a84 <TIM_OC1_SetConfig+0x10c>)
 80169d0:	4293      	cmp	r3, r2
 80169d2:	d00f      	beq.n	80169f4 <TIM_OC1_SetConfig+0x7c>
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	4a2c      	ldr	r2, [pc, #176]	@ (8016a88 <TIM_OC1_SetConfig+0x110>)
 80169d8:	4293      	cmp	r3, r2
 80169da:	d00b      	beq.n	80169f4 <TIM_OC1_SetConfig+0x7c>
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	4a2b      	ldr	r2, [pc, #172]	@ (8016a8c <TIM_OC1_SetConfig+0x114>)
 80169e0:	4293      	cmp	r3, r2
 80169e2:	d007      	beq.n	80169f4 <TIM_OC1_SetConfig+0x7c>
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	4a2a      	ldr	r2, [pc, #168]	@ (8016a90 <TIM_OC1_SetConfig+0x118>)
 80169e8:	4293      	cmp	r3, r2
 80169ea:	d003      	beq.n	80169f4 <TIM_OC1_SetConfig+0x7c>
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	4a29      	ldr	r2, [pc, #164]	@ (8016a94 <TIM_OC1_SetConfig+0x11c>)
 80169f0:	4293      	cmp	r3, r2
 80169f2:	d10c      	bne.n	8016a0e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80169f4:	697b      	ldr	r3, [r7, #20]
 80169f6:	f023 0308 	bic.w	r3, r3, #8
 80169fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80169fc:	683b      	ldr	r3, [r7, #0]
 80169fe:	68db      	ldr	r3, [r3, #12]
 8016a00:	697a      	ldr	r2, [r7, #20]
 8016a02:	4313      	orrs	r3, r2
 8016a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8016a06:	697b      	ldr	r3, [r7, #20]
 8016a08:	f023 0304 	bic.w	r3, r3, #4
 8016a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	4a1c      	ldr	r2, [pc, #112]	@ (8016a84 <TIM_OC1_SetConfig+0x10c>)
 8016a12:	4293      	cmp	r3, r2
 8016a14:	d00f      	beq.n	8016a36 <TIM_OC1_SetConfig+0xbe>
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	4a1b      	ldr	r2, [pc, #108]	@ (8016a88 <TIM_OC1_SetConfig+0x110>)
 8016a1a:	4293      	cmp	r3, r2
 8016a1c:	d00b      	beq.n	8016a36 <TIM_OC1_SetConfig+0xbe>
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	4a1a      	ldr	r2, [pc, #104]	@ (8016a8c <TIM_OC1_SetConfig+0x114>)
 8016a22:	4293      	cmp	r3, r2
 8016a24:	d007      	beq.n	8016a36 <TIM_OC1_SetConfig+0xbe>
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	4a19      	ldr	r2, [pc, #100]	@ (8016a90 <TIM_OC1_SetConfig+0x118>)
 8016a2a:	4293      	cmp	r3, r2
 8016a2c:	d003      	beq.n	8016a36 <TIM_OC1_SetConfig+0xbe>
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	4a18      	ldr	r2, [pc, #96]	@ (8016a94 <TIM_OC1_SetConfig+0x11c>)
 8016a32:	4293      	cmp	r3, r2
 8016a34:	d111      	bne.n	8016a5a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016a36:	693b      	ldr	r3, [r7, #16]
 8016a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8016a3e:	693b      	ldr	r3, [r7, #16]
 8016a40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	695b      	ldr	r3, [r3, #20]
 8016a4a:	693a      	ldr	r2, [r7, #16]
 8016a4c:	4313      	orrs	r3, r2
 8016a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	699b      	ldr	r3, [r3, #24]
 8016a54:	693a      	ldr	r2, [r7, #16]
 8016a56:	4313      	orrs	r3, r2
 8016a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	693a      	ldr	r2, [r7, #16]
 8016a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	68fa      	ldr	r2, [r7, #12]
 8016a64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016a66:	683b      	ldr	r3, [r7, #0]
 8016a68:	685a      	ldr	r2, [r3, #4]
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	697a      	ldr	r2, [r7, #20]
 8016a72:	621a      	str	r2, [r3, #32]
}
 8016a74:	bf00      	nop
 8016a76:	371c      	adds	r7, #28
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7e:	4770      	bx	lr
 8016a80:	fffeff8f 	.word	0xfffeff8f
 8016a84:	40010000 	.word	0x40010000
 8016a88:	40010400 	.word	0x40010400
 8016a8c:	40014000 	.word	0x40014000
 8016a90:	40014400 	.word	0x40014400
 8016a94:	40014800 	.word	0x40014800

08016a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016a98:	b480      	push	{r7}
 8016a9a:	b087      	sub	sp, #28
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
 8016aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	6a1b      	ldr	r3, [r3, #32]
 8016aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	6a1b      	ldr	r3, [r3, #32]
 8016aac:	f023 0210 	bic.w	r2, r3, #16
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	685b      	ldr	r3, [r3, #4]
 8016ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	699b      	ldr	r3, [r3, #24]
 8016abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016ac0:	68fa      	ldr	r2, [r7, #12]
 8016ac2:	4b34      	ldr	r3, [pc, #208]	@ (8016b94 <TIM_OC2_SetConfig+0xfc>)
 8016ac4:	4013      	ands	r3, r2
 8016ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016ad0:	683b      	ldr	r3, [r7, #0]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	021b      	lsls	r3, r3, #8
 8016ad6:	68fa      	ldr	r2, [r7, #12]
 8016ad8:	4313      	orrs	r3, r2
 8016ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016adc:	697b      	ldr	r3, [r7, #20]
 8016ade:	f023 0320 	bic.w	r3, r3, #32
 8016ae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016ae4:	683b      	ldr	r3, [r7, #0]
 8016ae6:	689b      	ldr	r3, [r3, #8]
 8016ae8:	011b      	lsls	r3, r3, #4
 8016aea:	697a      	ldr	r2, [r7, #20]
 8016aec:	4313      	orrs	r3, r2
 8016aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	4a29      	ldr	r2, [pc, #164]	@ (8016b98 <TIM_OC2_SetConfig+0x100>)
 8016af4:	4293      	cmp	r3, r2
 8016af6:	d003      	beq.n	8016b00 <TIM_OC2_SetConfig+0x68>
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	4a28      	ldr	r2, [pc, #160]	@ (8016b9c <TIM_OC2_SetConfig+0x104>)
 8016afc:	4293      	cmp	r3, r2
 8016afe:	d10d      	bne.n	8016b1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8016b00:	697b      	ldr	r3, [r7, #20]
 8016b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8016b08:	683b      	ldr	r3, [r7, #0]
 8016b0a:	68db      	ldr	r3, [r3, #12]
 8016b0c:	011b      	lsls	r3, r3, #4
 8016b0e:	697a      	ldr	r2, [r7, #20]
 8016b10:	4313      	orrs	r3, r2
 8016b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016b14:	697b      	ldr	r3, [r7, #20]
 8016b16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016b1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8016b98 <TIM_OC2_SetConfig+0x100>)
 8016b20:	4293      	cmp	r3, r2
 8016b22:	d00f      	beq.n	8016b44 <TIM_OC2_SetConfig+0xac>
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	4a1d      	ldr	r2, [pc, #116]	@ (8016b9c <TIM_OC2_SetConfig+0x104>)
 8016b28:	4293      	cmp	r3, r2
 8016b2a:	d00b      	beq.n	8016b44 <TIM_OC2_SetConfig+0xac>
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8016ba0 <TIM_OC2_SetConfig+0x108>)
 8016b30:	4293      	cmp	r3, r2
 8016b32:	d007      	beq.n	8016b44 <TIM_OC2_SetConfig+0xac>
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	4a1b      	ldr	r2, [pc, #108]	@ (8016ba4 <TIM_OC2_SetConfig+0x10c>)
 8016b38:	4293      	cmp	r3, r2
 8016b3a:	d003      	beq.n	8016b44 <TIM_OC2_SetConfig+0xac>
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8016ba8 <TIM_OC2_SetConfig+0x110>)
 8016b40:	4293      	cmp	r3, r2
 8016b42:	d113      	bne.n	8016b6c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8016b44:	693b      	ldr	r3, [r7, #16]
 8016b46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016b4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016b4c:	693b      	ldr	r3, [r7, #16]
 8016b4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016b52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8016b54:	683b      	ldr	r3, [r7, #0]
 8016b56:	695b      	ldr	r3, [r3, #20]
 8016b58:	009b      	lsls	r3, r3, #2
 8016b5a:	693a      	ldr	r2, [r7, #16]
 8016b5c:	4313      	orrs	r3, r2
 8016b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016b60:	683b      	ldr	r3, [r7, #0]
 8016b62:	699b      	ldr	r3, [r3, #24]
 8016b64:	009b      	lsls	r3, r3, #2
 8016b66:	693a      	ldr	r2, [r7, #16]
 8016b68:	4313      	orrs	r3, r2
 8016b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	693a      	ldr	r2, [r7, #16]
 8016b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	68fa      	ldr	r2, [r7, #12]
 8016b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	685a      	ldr	r2, [r3, #4]
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	697a      	ldr	r2, [r7, #20]
 8016b84:	621a      	str	r2, [r3, #32]
}
 8016b86:	bf00      	nop
 8016b88:	371c      	adds	r7, #28
 8016b8a:	46bd      	mov	sp, r7
 8016b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b90:	4770      	bx	lr
 8016b92:	bf00      	nop
 8016b94:	feff8fff 	.word	0xfeff8fff
 8016b98:	40010000 	.word	0x40010000
 8016b9c:	40010400 	.word	0x40010400
 8016ba0:	40014000 	.word	0x40014000
 8016ba4:	40014400 	.word	0x40014400
 8016ba8:	40014800 	.word	0x40014800

08016bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016bac:	b480      	push	{r7}
 8016bae:	b087      	sub	sp, #28
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
 8016bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	6a1b      	ldr	r3, [r3, #32]
 8016bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	6a1b      	ldr	r3, [r3, #32]
 8016bc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	685b      	ldr	r3, [r3, #4]
 8016bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	69db      	ldr	r3, [r3, #28]
 8016bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016bd4:	68fa      	ldr	r2, [r7, #12]
 8016bd6:	4b33      	ldr	r3, [pc, #204]	@ (8016ca4 <TIM_OC3_SetConfig+0xf8>)
 8016bd8:	4013      	ands	r3, r2
 8016bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	f023 0303 	bic.w	r3, r3, #3
 8016be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	68fa      	ldr	r2, [r7, #12]
 8016bea:	4313      	orrs	r3, r2
 8016bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016bee:	697b      	ldr	r3, [r7, #20]
 8016bf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	689b      	ldr	r3, [r3, #8]
 8016bfa:	021b      	lsls	r3, r3, #8
 8016bfc:	697a      	ldr	r2, [r7, #20]
 8016bfe:	4313      	orrs	r3, r2
 8016c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	4a28      	ldr	r2, [pc, #160]	@ (8016ca8 <TIM_OC3_SetConfig+0xfc>)
 8016c06:	4293      	cmp	r3, r2
 8016c08:	d003      	beq.n	8016c12 <TIM_OC3_SetConfig+0x66>
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	4a27      	ldr	r2, [pc, #156]	@ (8016cac <TIM_OC3_SetConfig+0x100>)
 8016c0e:	4293      	cmp	r3, r2
 8016c10:	d10d      	bne.n	8016c2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8016c12:	697b      	ldr	r3, [r7, #20]
 8016c14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016c1a:	683b      	ldr	r3, [r7, #0]
 8016c1c:	68db      	ldr	r3, [r3, #12]
 8016c1e:	021b      	lsls	r3, r3, #8
 8016c20:	697a      	ldr	r2, [r7, #20]
 8016c22:	4313      	orrs	r3, r2
 8016c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8016c26:	697b      	ldr	r3, [r7, #20]
 8016c28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	4a1d      	ldr	r2, [pc, #116]	@ (8016ca8 <TIM_OC3_SetConfig+0xfc>)
 8016c32:	4293      	cmp	r3, r2
 8016c34:	d00f      	beq.n	8016c56 <TIM_OC3_SetConfig+0xaa>
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	4a1c      	ldr	r2, [pc, #112]	@ (8016cac <TIM_OC3_SetConfig+0x100>)
 8016c3a:	4293      	cmp	r3, r2
 8016c3c:	d00b      	beq.n	8016c56 <TIM_OC3_SetConfig+0xaa>
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	4a1b      	ldr	r2, [pc, #108]	@ (8016cb0 <TIM_OC3_SetConfig+0x104>)
 8016c42:	4293      	cmp	r3, r2
 8016c44:	d007      	beq.n	8016c56 <TIM_OC3_SetConfig+0xaa>
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	4a1a      	ldr	r2, [pc, #104]	@ (8016cb4 <TIM_OC3_SetConfig+0x108>)
 8016c4a:	4293      	cmp	r3, r2
 8016c4c:	d003      	beq.n	8016c56 <TIM_OC3_SetConfig+0xaa>
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	4a19      	ldr	r2, [pc, #100]	@ (8016cb8 <TIM_OC3_SetConfig+0x10c>)
 8016c52:	4293      	cmp	r3, r2
 8016c54:	d113      	bne.n	8016c7e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016c56:	693b      	ldr	r3, [r7, #16]
 8016c58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8016c5e:	693b      	ldr	r3, [r7, #16]
 8016c60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	695b      	ldr	r3, [r3, #20]
 8016c6a:	011b      	lsls	r3, r3, #4
 8016c6c:	693a      	ldr	r2, [r7, #16]
 8016c6e:	4313      	orrs	r3, r2
 8016c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	699b      	ldr	r3, [r3, #24]
 8016c76:	011b      	lsls	r3, r3, #4
 8016c78:	693a      	ldr	r2, [r7, #16]
 8016c7a:	4313      	orrs	r3, r2
 8016c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	693a      	ldr	r2, [r7, #16]
 8016c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	68fa      	ldr	r2, [r7, #12]
 8016c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016c8a:	683b      	ldr	r3, [r7, #0]
 8016c8c:	685a      	ldr	r2, [r3, #4]
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	697a      	ldr	r2, [r7, #20]
 8016c96:	621a      	str	r2, [r3, #32]
}
 8016c98:	bf00      	nop
 8016c9a:	371c      	adds	r7, #28
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca2:	4770      	bx	lr
 8016ca4:	fffeff8f 	.word	0xfffeff8f
 8016ca8:	40010000 	.word	0x40010000
 8016cac:	40010400 	.word	0x40010400
 8016cb0:	40014000 	.word	0x40014000
 8016cb4:	40014400 	.word	0x40014400
 8016cb8:	40014800 	.word	0x40014800

08016cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016cbc:	b480      	push	{r7}
 8016cbe:	b087      	sub	sp, #28
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
 8016cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	6a1b      	ldr	r3, [r3, #32]
 8016cca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	6a1b      	ldr	r3, [r3, #32]
 8016cd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	685b      	ldr	r3, [r3, #4]
 8016cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	69db      	ldr	r3, [r3, #28]
 8016ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016ce4:	68fa      	ldr	r2, [r7, #12]
 8016ce6:	4b24      	ldr	r3, [pc, #144]	@ (8016d78 <TIM_OC4_SetConfig+0xbc>)
 8016ce8:	4013      	ands	r3, r2
 8016cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	021b      	lsls	r3, r3, #8
 8016cfa:	68fa      	ldr	r2, [r7, #12]
 8016cfc:	4313      	orrs	r3, r2
 8016cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016d08:	683b      	ldr	r3, [r7, #0]
 8016d0a:	689b      	ldr	r3, [r3, #8]
 8016d0c:	031b      	lsls	r3, r3, #12
 8016d0e:	693a      	ldr	r2, [r7, #16]
 8016d10:	4313      	orrs	r3, r2
 8016d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	4a19      	ldr	r2, [pc, #100]	@ (8016d7c <TIM_OC4_SetConfig+0xc0>)
 8016d18:	4293      	cmp	r3, r2
 8016d1a:	d00f      	beq.n	8016d3c <TIM_OC4_SetConfig+0x80>
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	4a18      	ldr	r2, [pc, #96]	@ (8016d80 <TIM_OC4_SetConfig+0xc4>)
 8016d20:	4293      	cmp	r3, r2
 8016d22:	d00b      	beq.n	8016d3c <TIM_OC4_SetConfig+0x80>
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	4a17      	ldr	r2, [pc, #92]	@ (8016d84 <TIM_OC4_SetConfig+0xc8>)
 8016d28:	4293      	cmp	r3, r2
 8016d2a:	d007      	beq.n	8016d3c <TIM_OC4_SetConfig+0x80>
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	4a16      	ldr	r2, [pc, #88]	@ (8016d88 <TIM_OC4_SetConfig+0xcc>)
 8016d30:	4293      	cmp	r3, r2
 8016d32:	d003      	beq.n	8016d3c <TIM_OC4_SetConfig+0x80>
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	4a15      	ldr	r2, [pc, #84]	@ (8016d8c <TIM_OC4_SetConfig+0xd0>)
 8016d38:	4293      	cmp	r3, r2
 8016d3a:	d109      	bne.n	8016d50 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8016d3c:	697b      	ldr	r3, [r7, #20]
 8016d3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8016d42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8016d44:	683b      	ldr	r3, [r7, #0]
 8016d46:	695b      	ldr	r3, [r3, #20]
 8016d48:	019b      	lsls	r3, r3, #6
 8016d4a:	697a      	ldr	r2, [r7, #20]
 8016d4c:	4313      	orrs	r3, r2
 8016d4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	697a      	ldr	r2, [r7, #20]
 8016d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	68fa      	ldr	r2, [r7, #12]
 8016d5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016d5c:	683b      	ldr	r3, [r7, #0]
 8016d5e:	685a      	ldr	r2, [r3, #4]
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	693a      	ldr	r2, [r7, #16]
 8016d68:	621a      	str	r2, [r3, #32]
}
 8016d6a:	bf00      	nop
 8016d6c:	371c      	adds	r7, #28
 8016d6e:	46bd      	mov	sp, r7
 8016d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d74:	4770      	bx	lr
 8016d76:	bf00      	nop
 8016d78:	feff8fff 	.word	0xfeff8fff
 8016d7c:	40010000 	.word	0x40010000
 8016d80:	40010400 	.word	0x40010400
 8016d84:	40014000 	.word	0x40014000
 8016d88:	40014400 	.word	0x40014400
 8016d8c:	40014800 	.word	0x40014800

08016d90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016d90:	b480      	push	{r7}
 8016d92:	b087      	sub	sp, #28
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
 8016d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6a1b      	ldr	r3, [r3, #32]
 8016d9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	6a1b      	ldr	r3, [r3, #32]
 8016da4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	685b      	ldr	r3, [r3, #4]
 8016db0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8016db8:	68fa      	ldr	r2, [r7, #12]
 8016dba:	4b21      	ldr	r3, [pc, #132]	@ (8016e40 <TIM_OC5_SetConfig+0xb0>)
 8016dbc:	4013      	ands	r3, r2
 8016dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016dc0:	683b      	ldr	r3, [r7, #0]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	68fa      	ldr	r2, [r7, #12]
 8016dc6:	4313      	orrs	r3, r2
 8016dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8016dca:	693b      	ldr	r3, [r7, #16]
 8016dcc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8016dd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	689b      	ldr	r3, [r3, #8]
 8016dd6:	041b      	lsls	r3, r3, #16
 8016dd8:	693a      	ldr	r2, [r7, #16]
 8016dda:	4313      	orrs	r3, r2
 8016ddc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	4a18      	ldr	r2, [pc, #96]	@ (8016e44 <TIM_OC5_SetConfig+0xb4>)
 8016de2:	4293      	cmp	r3, r2
 8016de4:	d00f      	beq.n	8016e06 <TIM_OC5_SetConfig+0x76>
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	4a17      	ldr	r2, [pc, #92]	@ (8016e48 <TIM_OC5_SetConfig+0xb8>)
 8016dea:	4293      	cmp	r3, r2
 8016dec:	d00b      	beq.n	8016e06 <TIM_OC5_SetConfig+0x76>
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	4a16      	ldr	r2, [pc, #88]	@ (8016e4c <TIM_OC5_SetConfig+0xbc>)
 8016df2:	4293      	cmp	r3, r2
 8016df4:	d007      	beq.n	8016e06 <TIM_OC5_SetConfig+0x76>
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	4a15      	ldr	r2, [pc, #84]	@ (8016e50 <TIM_OC5_SetConfig+0xc0>)
 8016dfa:	4293      	cmp	r3, r2
 8016dfc:	d003      	beq.n	8016e06 <TIM_OC5_SetConfig+0x76>
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	4a14      	ldr	r2, [pc, #80]	@ (8016e54 <TIM_OC5_SetConfig+0xc4>)
 8016e02:	4293      	cmp	r3, r2
 8016e04:	d109      	bne.n	8016e1a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8016e06:	697b      	ldr	r3, [r7, #20]
 8016e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8016e0e:	683b      	ldr	r3, [r7, #0]
 8016e10:	695b      	ldr	r3, [r3, #20]
 8016e12:	021b      	lsls	r3, r3, #8
 8016e14:	697a      	ldr	r2, [r7, #20]
 8016e16:	4313      	orrs	r3, r2
 8016e18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	697a      	ldr	r2, [r7, #20]
 8016e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	68fa      	ldr	r2, [r7, #12]
 8016e24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	685a      	ldr	r2, [r3, #4]
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	693a      	ldr	r2, [r7, #16]
 8016e32:	621a      	str	r2, [r3, #32]
}
 8016e34:	bf00      	nop
 8016e36:	371c      	adds	r7, #28
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3e:	4770      	bx	lr
 8016e40:	fffeff8f 	.word	0xfffeff8f
 8016e44:	40010000 	.word	0x40010000
 8016e48:	40010400 	.word	0x40010400
 8016e4c:	40014000 	.word	0x40014000
 8016e50:	40014400 	.word	0x40014400
 8016e54:	40014800 	.word	0x40014800

08016e58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016e58:	b480      	push	{r7}
 8016e5a:	b087      	sub	sp, #28
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	6078      	str	r0, [r7, #4]
 8016e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	6a1b      	ldr	r3, [r3, #32]
 8016e66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	6a1b      	ldr	r3, [r3, #32]
 8016e6c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	685b      	ldr	r3, [r3, #4]
 8016e78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8016e80:	68fa      	ldr	r2, [r7, #12]
 8016e82:	4b22      	ldr	r3, [pc, #136]	@ (8016f0c <TIM_OC6_SetConfig+0xb4>)
 8016e84:	4013      	ands	r3, r2
 8016e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	021b      	lsls	r3, r3, #8
 8016e8e:	68fa      	ldr	r2, [r7, #12]
 8016e90:	4313      	orrs	r3, r2
 8016e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8016e94:	693b      	ldr	r3, [r7, #16]
 8016e96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8016e9c:	683b      	ldr	r3, [r7, #0]
 8016e9e:	689b      	ldr	r3, [r3, #8]
 8016ea0:	051b      	lsls	r3, r3, #20
 8016ea2:	693a      	ldr	r2, [r7, #16]
 8016ea4:	4313      	orrs	r3, r2
 8016ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	4a19      	ldr	r2, [pc, #100]	@ (8016f10 <TIM_OC6_SetConfig+0xb8>)
 8016eac:	4293      	cmp	r3, r2
 8016eae:	d00f      	beq.n	8016ed0 <TIM_OC6_SetConfig+0x78>
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	4a18      	ldr	r2, [pc, #96]	@ (8016f14 <TIM_OC6_SetConfig+0xbc>)
 8016eb4:	4293      	cmp	r3, r2
 8016eb6:	d00b      	beq.n	8016ed0 <TIM_OC6_SetConfig+0x78>
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	4a17      	ldr	r2, [pc, #92]	@ (8016f18 <TIM_OC6_SetConfig+0xc0>)
 8016ebc:	4293      	cmp	r3, r2
 8016ebe:	d007      	beq.n	8016ed0 <TIM_OC6_SetConfig+0x78>
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	4a16      	ldr	r2, [pc, #88]	@ (8016f1c <TIM_OC6_SetConfig+0xc4>)
 8016ec4:	4293      	cmp	r3, r2
 8016ec6:	d003      	beq.n	8016ed0 <TIM_OC6_SetConfig+0x78>
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	4a15      	ldr	r2, [pc, #84]	@ (8016f20 <TIM_OC6_SetConfig+0xc8>)
 8016ecc:	4293      	cmp	r3, r2
 8016ece:	d109      	bne.n	8016ee4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8016ed0:	697b      	ldr	r3, [r7, #20]
 8016ed2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8016ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	695b      	ldr	r3, [r3, #20]
 8016edc:	029b      	lsls	r3, r3, #10
 8016ede:	697a      	ldr	r2, [r7, #20]
 8016ee0:	4313      	orrs	r3, r2
 8016ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	697a      	ldr	r2, [r7, #20]
 8016ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	68fa      	ldr	r2, [r7, #12]
 8016eee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8016ef0:	683b      	ldr	r3, [r7, #0]
 8016ef2:	685a      	ldr	r2, [r3, #4]
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	693a      	ldr	r2, [r7, #16]
 8016efc:	621a      	str	r2, [r3, #32]
}
 8016efe:	bf00      	nop
 8016f00:	371c      	adds	r7, #28
 8016f02:	46bd      	mov	sp, r7
 8016f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f08:	4770      	bx	lr
 8016f0a:	bf00      	nop
 8016f0c:	feff8fff 	.word	0xfeff8fff
 8016f10:	40010000 	.word	0x40010000
 8016f14:	40010400 	.word	0x40010400
 8016f18:	40014000 	.word	0x40014000
 8016f1c:	40014400 	.word	0x40014400
 8016f20:	40014800 	.word	0x40014800

08016f24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8016f24:	b480      	push	{r7}
 8016f26:	b087      	sub	sp, #28
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	60f8      	str	r0, [r7, #12]
 8016f2c:	60b9      	str	r1, [r7, #8]
 8016f2e:	607a      	str	r2, [r7, #4]
 8016f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	6a1b      	ldr	r3, [r3, #32]
 8016f36:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	6a1b      	ldr	r3, [r3, #32]
 8016f3c:	f023 0201 	bic.w	r2, r3, #1
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	699b      	ldr	r3, [r3, #24]
 8016f48:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8017000 <TIM_TI1_SetConfig+0xdc>)
 8016f4e:	4293      	cmp	r3, r2
 8016f50:	d023      	beq.n	8016f9a <TIM_TI1_SetConfig+0x76>
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016f58:	d01f      	beq.n	8016f9a <TIM_TI1_SetConfig+0x76>
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	4a29      	ldr	r2, [pc, #164]	@ (8017004 <TIM_TI1_SetConfig+0xe0>)
 8016f5e:	4293      	cmp	r3, r2
 8016f60:	d01b      	beq.n	8016f9a <TIM_TI1_SetConfig+0x76>
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	4a28      	ldr	r2, [pc, #160]	@ (8017008 <TIM_TI1_SetConfig+0xe4>)
 8016f66:	4293      	cmp	r3, r2
 8016f68:	d017      	beq.n	8016f9a <TIM_TI1_SetConfig+0x76>
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	4a27      	ldr	r2, [pc, #156]	@ (801700c <TIM_TI1_SetConfig+0xe8>)
 8016f6e:	4293      	cmp	r3, r2
 8016f70:	d013      	beq.n	8016f9a <TIM_TI1_SetConfig+0x76>
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	4a26      	ldr	r2, [pc, #152]	@ (8017010 <TIM_TI1_SetConfig+0xec>)
 8016f76:	4293      	cmp	r3, r2
 8016f78:	d00f      	beq.n	8016f9a <TIM_TI1_SetConfig+0x76>
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	4a25      	ldr	r2, [pc, #148]	@ (8017014 <TIM_TI1_SetConfig+0xf0>)
 8016f7e:	4293      	cmp	r3, r2
 8016f80:	d00b      	beq.n	8016f9a <TIM_TI1_SetConfig+0x76>
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	4a24      	ldr	r2, [pc, #144]	@ (8017018 <TIM_TI1_SetConfig+0xf4>)
 8016f86:	4293      	cmp	r3, r2
 8016f88:	d007      	beq.n	8016f9a <TIM_TI1_SetConfig+0x76>
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	4a23      	ldr	r2, [pc, #140]	@ (801701c <TIM_TI1_SetConfig+0xf8>)
 8016f8e:	4293      	cmp	r3, r2
 8016f90:	d003      	beq.n	8016f9a <TIM_TI1_SetConfig+0x76>
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	4a22      	ldr	r2, [pc, #136]	@ (8017020 <TIM_TI1_SetConfig+0xfc>)
 8016f96:	4293      	cmp	r3, r2
 8016f98:	d101      	bne.n	8016f9e <TIM_TI1_SetConfig+0x7a>
 8016f9a:	2301      	movs	r3, #1
 8016f9c:	e000      	b.n	8016fa0 <TIM_TI1_SetConfig+0x7c>
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d008      	beq.n	8016fb6 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8016fa4:	697b      	ldr	r3, [r7, #20]
 8016fa6:	f023 0303 	bic.w	r3, r3, #3
 8016faa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8016fac:	697a      	ldr	r2, [r7, #20]
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	4313      	orrs	r3, r2
 8016fb2:	617b      	str	r3, [r7, #20]
 8016fb4:	e003      	b.n	8016fbe <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8016fb6:	697b      	ldr	r3, [r7, #20]
 8016fb8:	f043 0301 	orr.w	r3, r3, #1
 8016fbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016fbe:	697b      	ldr	r3, [r7, #20]
 8016fc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8016fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	011b      	lsls	r3, r3, #4
 8016fca:	b2db      	uxtb	r3, r3
 8016fcc:	697a      	ldr	r2, [r7, #20]
 8016fce:	4313      	orrs	r3, r2
 8016fd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8016fd2:	693b      	ldr	r3, [r7, #16]
 8016fd4:	f023 030a 	bic.w	r3, r3, #10
 8016fd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	f003 030a 	and.w	r3, r3, #10
 8016fe0:	693a      	ldr	r2, [r7, #16]
 8016fe2:	4313      	orrs	r3, r2
 8016fe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	697a      	ldr	r2, [r7, #20]
 8016fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	693a      	ldr	r2, [r7, #16]
 8016ff0:	621a      	str	r2, [r3, #32]
}
 8016ff2:	bf00      	nop
 8016ff4:	371c      	adds	r7, #28
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffc:	4770      	bx	lr
 8016ffe:	bf00      	nop
 8017000:	40010000 	.word	0x40010000
 8017004:	40000400 	.word	0x40000400
 8017008:	40000800 	.word	0x40000800
 801700c:	40000c00 	.word	0x40000c00
 8017010:	40010400 	.word	0x40010400
 8017014:	40001800 	.word	0x40001800
 8017018:	40014000 	.word	0x40014000
 801701c:	4000e000 	.word	0x4000e000
 8017020:	4000e400 	.word	0x4000e400

08017024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017024:	b480      	push	{r7}
 8017026:	b087      	sub	sp, #28
 8017028:	af00      	add	r7, sp, #0
 801702a:	60f8      	str	r0, [r7, #12]
 801702c:	60b9      	str	r1, [r7, #8]
 801702e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	6a1b      	ldr	r3, [r3, #32]
 8017034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	6a1b      	ldr	r3, [r3, #32]
 801703a:	f023 0201 	bic.w	r2, r3, #1
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	699b      	ldr	r3, [r3, #24]
 8017046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017048:	693b      	ldr	r3, [r7, #16]
 801704a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801704e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	011b      	lsls	r3, r3, #4
 8017054:	693a      	ldr	r2, [r7, #16]
 8017056:	4313      	orrs	r3, r2
 8017058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801705a:	697b      	ldr	r3, [r7, #20]
 801705c:	f023 030a 	bic.w	r3, r3, #10
 8017060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017062:	697a      	ldr	r2, [r7, #20]
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	4313      	orrs	r3, r2
 8017068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	693a      	ldr	r2, [r7, #16]
 801706e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	697a      	ldr	r2, [r7, #20]
 8017074:	621a      	str	r2, [r3, #32]
}
 8017076:	bf00      	nop
 8017078:	371c      	adds	r7, #28
 801707a:	46bd      	mov	sp, r7
 801707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017080:	4770      	bx	lr

08017082 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017082:	b480      	push	{r7}
 8017084:	b087      	sub	sp, #28
 8017086:	af00      	add	r7, sp, #0
 8017088:	60f8      	str	r0, [r7, #12]
 801708a:	60b9      	str	r1, [r7, #8]
 801708c:	607a      	str	r2, [r7, #4]
 801708e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	6a1b      	ldr	r3, [r3, #32]
 8017094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	6a1b      	ldr	r3, [r3, #32]
 801709a:	f023 0210 	bic.w	r2, r3, #16
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	699b      	ldr	r3, [r3, #24]
 80170a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80170a8:	693b      	ldr	r3, [r7, #16]
 80170aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80170ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	021b      	lsls	r3, r3, #8
 80170b4:	693a      	ldr	r2, [r7, #16]
 80170b6:	4313      	orrs	r3, r2
 80170b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80170ba:	693b      	ldr	r3, [r7, #16]
 80170bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80170c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80170c2:	683b      	ldr	r3, [r7, #0]
 80170c4:	031b      	lsls	r3, r3, #12
 80170c6:	b29b      	uxth	r3, r3
 80170c8:	693a      	ldr	r2, [r7, #16]
 80170ca:	4313      	orrs	r3, r2
 80170cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80170d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	011b      	lsls	r3, r3, #4
 80170da:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80170de:	697a      	ldr	r2, [r7, #20]
 80170e0:	4313      	orrs	r3, r2
 80170e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	693a      	ldr	r2, [r7, #16]
 80170e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	697a      	ldr	r2, [r7, #20]
 80170ee:	621a      	str	r2, [r3, #32]
}
 80170f0:	bf00      	nop
 80170f2:	371c      	adds	r7, #28
 80170f4:	46bd      	mov	sp, r7
 80170f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fa:	4770      	bx	lr

080170fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80170fc:	b480      	push	{r7}
 80170fe:	b087      	sub	sp, #28
 8017100:	af00      	add	r7, sp, #0
 8017102:	60f8      	str	r0, [r7, #12]
 8017104:	60b9      	str	r1, [r7, #8]
 8017106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	6a1b      	ldr	r3, [r3, #32]
 801710c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	6a1b      	ldr	r3, [r3, #32]
 8017112:	f023 0210 	bic.w	r2, r3, #16
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	699b      	ldr	r3, [r3, #24]
 801711e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017120:	693b      	ldr	r3, [r7, #16]
 8017122:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	031b      	lsls	r3, r3, #12
 801712c:	693a      	ldr	r2, [r7, #16]
 801712e:	4313      	orrs	r3, r2
 8017130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017132:	697b      	ldr	r3, [r7, #20]
 8017134:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017138:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801713a:	68bb      	ldr	r3, [r7, #8]
 801713c:	011b      	lsls	r3, r3, #4
 801713e:	697a      	ldr	r2, [r7, #20]
 8017140:	4313      	orrs	r3, r2
 8017142:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	693a      	ldr	r2, [r7, #16]
 8017148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	697a      	ldr	r2, [r7, #20]
 801714e:	621a      	str	r2, [r3, #32]
}
 8017150:	bf00      	nop
 8017152:	371c      	adds	r7, #28
 8017154:	46bd      	mov	sp, r7
 8017156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801715a:	4770      	bx	lr

0801715c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801715c:	b480      	push	{r7}
 801715e:	b087      	sub	sp, #28
 8017160:	af00      	add	r7, sp, #0
 8017162:	60f8      	str	r0, [r7, #12]
 8017164:	60b9      	str	r1, [r7, #8]
 8017166:	607a      	str	r2, [r7, #4]
 8017168:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	6a1b      	ldr	r3, [r3, #32]
 801716e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	6a1b      	ldr	r3, [r3, #32]
 8017174:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	69db      	ldr	r3, [r3, #28]
 8017180:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	f023 0303 	bic.w	r3, r3, #3
 8017188:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 801718a:	693a      	ldr	r2, [r7, #16]
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	4313      	orrs	r3, r2
 8017190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8017192:	693b      	ldr	r3, [r7, #16]
 8017194:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017198:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	011b      	lsls	r3, r3, #4
 801719e:	b2db      	uxtb	r3, r3
 80171a0:	693a      	ldr	r2, [r7, #16]
 80171a2:	4313      	orrs	r3, r2
 80171a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80171a6:	697b      	ldr	r3, [r7, #20]
 80171a8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80171ac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80171ae:	68bb      	ldr	r3, [r7, #8]
 80171b0:	021b      	lsls	r3, r3, #8
 80171b2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80171b6:	697a      	ldr	r2, [r7, #20]
 80171b8:	4313      	orrs	r3, r2
 80171ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	693a      	ldr	r2, [r7, #16]
 80171c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	697a      	ldr	r2, [r7, #20]
 80171c6:	621a      	str	r2, [r3, #32]
}
 80171c8:	bf00      	nop
 80171ca:	371c      	adds	r7, #28
 80171cc:	46bd      	mov	sp, r7
 80171ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d2:	4770      	bx	lr

080171d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80171d4:	b480      	push	{r7}
 80171d6:	b087      	sub	sp, #28
 80171d8:	af00      	add	r7, sp, #0
 80171da:	60f8      	str	r0, [r7, #12]
 80171dc:	60b9      	str	r1, [r7, #8]
 80171de:	607a      	str	r2, [r7, #4]
 80171e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	6a1b      	ldr	r3, [r3, #32]
 80171e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	6a1b      	ldr	r3, [r3, #32]
 80171ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	69db      	ldr	r3, [r3, #28]
 80171f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80171fa:	693b      	ldr	r3, [r7, #16]
 80171fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017200:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	021b      	lsls	r3, r3, #8
 8017206:	693a      	ldr	r2, [r7, #16]
 8017208:	4313      	orrs	r3, r2
 801720a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801720c:	693b      	ldr	r3, [r7, #16]
 801720e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017212:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017214:	683b      	ldr	r3, [r7, #0]
 8017216:	031b      	lsls	r3, r3, #12
 8017218:	b29b      	uxth	r3, r3
 801721a:	693a      	ldr	r2, [r7, #16]
 801721c:	4313      	orrs	r3, r2
 801721e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8017226:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017228:	68bb      	ldr	r3, [r7, #8]
 801722a:	031b      	lsls	r3, r3, #12
 801722c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017230:	697a      	ldr	r2, [r7, #20]
 8017232:	4313      	orrs	r3, r2
 8017234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	693a      	ldr	r2, [r7, #16]
 801723a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	697a      	ldr	r2, [r7, #20]
 8017240:	621a      	str	r2, [r3, #32]
}
 8017242:	bf00      	nop
 8017244:	371c      	adds	r7, #28
 8017246:	46bd      	mov	sp, r7
 8017248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724c:	4770      	bx	lr
	...

08017250 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017250:	b480      	push	{r7}
 8017252:	b085      	sub	sp, #20
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
 8017258:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	689b      	ldr	r3, [r3, #8]
 801725e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017260:	68fa      	ldr	r2, [r7, #12]
 8017262:	4b09      	ldr	r3, [pc, #36]	@ (8017288 <TIM_ITRx_SetConfig+0x38>)
 8017264:	4013      	ands	r3, r2
 8017266:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017268:	683a      	ldr	r2, [r7, #0]
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	4313      	orrs	r3, r2
 801726e:	f043 0307 	orr.w	r3, r3, #7
 8017272:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	68fa      	ldr	r2, [r7, #12]
 8017278:	609a      	str	r2, [r3, #8]
}
 801727a:	bf00      	nop
 801727c:	3714      	adds	r7, #20
 801727e:	46bd      	mov	sp, r7
 8017280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017284:	4770      	bx	lr
 8017286:	bf00      	nop
 8017288:	ffcfff8f 	.word	0xffcfff8f

0801728c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801728c:	b480      	push	{r7}
 801728e:	b087      	sub	sp, #28
 8017290:	af00      	add	r7, sp, #0
 8017292:	60f8      	str	r0, [r7, #12]
 8017294:	60b9      	str	r1, [r7, #8]
 8017296:	607a      	str	r2, [r7, #4]
 8017298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	689b      	ldr	r3, [r3, #8]
 801729e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80172a0:	697b      	ldr	r3, [r7, #20]
 80172a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80172a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	021a      	lsls	r2, r3, #8
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	431a      	orrs	r2, r3
 80172b0:	68bb      	ldr	r3, [r7, #8]
 80172b2:	4313      	orrs	r3, r2
 80172b4:	697a      	ldr	r2, [r7, #20]
 80172b6:	4313      	orrs	r3, r2
 80172b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	697a      	ldr	r2, [r7, #20]
 80172be:	609a      	str	r2, [r3, #8]
}
 80172c0:	bf00      	nop
 80172c2:	371c      	adds	r7, #28
 80172c4:	46bd      	mov	sp, r7
 80172c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ca:	4770      	bx	lr

080172cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80172cc:	b480      	push	{r7}
 80172ce:	b087      	sub	sp, #28
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	60f8      	str	r0, [r7, #12]
 80172d4:	60b9      	str	r1, [r7, #8]
 80172d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80172d8:	68bb      	ldr	r3, [r7, #8]
 80172da:	f003 031f 	and.w	r3, r3, #31
 80172de:	2201      	movs	r2, #1
 80172e0:	fa02 f303 	lsl.w	r3, r2, r3
 80172e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	6a1a      	ldr	r2, [r3, #32]
 80172ea:	697b      	ldr	r3, [r7, #20]
 80172ec:	43db      	mvns	r3, r3
 80172ee:	401a      	ands	r2, r3
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	6a1a      	ldr	r2, [r3, #32]
 80172f8:	68bb      	ldr	r3, [r7, #8]
 80172fa:	f003 031f 	and.w	r3, r3, #31
 80172fe:	6879      	ldr	r1, [r7, #4]
 8017300:	fa01 f303 	lsl.w	r3, r1, r3
 8017304:	431a      	orrs	r2, r3
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	621a      	str	r2, [r3, #32]
}
 801730a:	bf00      	nop
 801730c:	371c      	adds	r7, #28
 801730e:	46bd      	mov	sp, r7
 8017310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017314:	4770      	bx	lr
	...

08017318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017318:	b480      	push	{r7}
 801731a:	b085      	sub	sp, #20
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
 8017320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017328:	2b01      	cmp	r3, #1
 801732a:	d101      	bne.n	8017330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801732c:	2302      	movs	r3, #2
 801732e:	e077      	b.n	8017420 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	2201      	movs	r2, #1
 8017334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	2202      	movs	r2, #2
 801733c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	685b      	ldr	r3, [r3, #4]
 8017346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	689b      	ldr	r3, [r3, #8]
 801734e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	4a35      	ldr	r2, [pc, #212]	@ (801742c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017356:	4293      	cmp	r3, r2
 8017358:	d004      	beq.n	8017364 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	4a34      	ldr	r2, [pc, #208]	@ (8017430 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017360:	4293      	cmp	r3, r2
 8017362:	d108      	bne.n	8017376 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801736a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801736c:	683b      	ldr	r3, [r7, #0]
 801736e:	685b      	ldr	r3, [r3, #4]
 8017370:	68fa      	ldr	r2, [r7, #12]
 8017372:	4313      	orrs	r3, r2
 8017374:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801737c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801737e:	683b      	ldr	r3, [r7, #0]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	68fa      	ldr	r2, [r7, #12]
 8017384:	4313      	orrs	r3, r2
 8017386:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	68fa      	ldr	r2, [r7, #12]
 801738e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	4a25      	ldr	r2, [pc, #148]	@ (801742c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017396:	4293      	cmp	r3, r2
 8017398:	d02c      	beq.n	80173f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80173a2:	d027      	beq.n	80173f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	4a22      	ldr	r2, [pc, #136]	@ (8017434 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80173aa:	4293      	cmp	r3, r2
 80173ac:	d022      	beq.n	80173f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	4a21      	ldr	r2, [pc, #132]	@ (8017438 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80173b4:	4293      	cmp	r3, r2
 80173b6:	d01d      	beq.n	80173f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	4a1f      	ldr	r2, [pc, #124]	@ (801743c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80173be:	4293      	cmp	r3, r2
 80173c0:	d018      	beq.n	80173f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	4a1a      	ldr	r2, [pc, #104]	@ (8017430 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80173c8:	4293      	cmp	r3, r2
 80173ca:	d013      	beq.n	80173f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	4a1b      	ldr	r2, [pc, #108]	@ (8017440 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80173d2:	4293      	cmp	r3, r2
 80173d4:	d00e      	beq.n	80173f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	4a1a      	ldr	r2, [pc, #104]	@ (8017444 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80173dc:	4293      	cmp	r3, r2
 80173de:	d009      	beq.n	80173f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	4a18      	ldr	r2, [pc, #96]	@ (8017448 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80173e6:	4293      	cmp	r3, r2
 80173e8:	d004      	beq.n	80173f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	4a17      	ldr	r2, [pc, #92]	@ (801744c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80173f0:	4293      	cmp	r3, r2
 80173f2:	d10c      	bne.n	801740e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80173f4:	68bb      	ldr	r3, [r7, #8]
 80173f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80173fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80173fc:	683b      	ldr	r3, [r7, #0]
 80173fe:	689b      	ldr	r3, [r3, #8]
 8017400:	68ba      	ldr	r2, [r7, #8]
 8017402:	4313      	orrs	r3, r2
 8017404:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	68ba      	ldr	r2, [r7, #8]
 801740c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	2201      	movs	r2, #1
 8017412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	2200      	movs	r2, #0
 801741a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801741e:	2300      	movs	r3, #0
}
 8017420:	4618      	mov	r0, r3
 8017422:	3714      	adds	r7, #20
 8017424:	46bd      	mov	sp, r7
 8017426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801742a:	4770      	bx	lr
 801742c:	40010000 	.word	0x40010000
 8017430:	40010400 	.word	0x40010400
 8017434:	40000400 	.word	0x40000400
 8017438:	40000800 	.word	0x40000800
 801743c:	40000c00 	.word	0x40000c00
 8017440:	40001800 	.word	0x40001800
 8017444:	40014000 	.word	0x40014000
 8017448:	4000e000 	.word	0x4000e000
 801744c:	4000e400 	.word	0x4000e400

08017450 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017450:	b480      	push	{r7}
 8017452:	b085      	sub	sp, #20
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
 8017458:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801745a:	2300      	movs	r3, #0
 801745c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017464:	2b01      	cmp	r3, #1
 8017466:	d101      	bne.n	801746c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017468:	2302      	movs	r3, #2
 801746a:	e073      	b.n	8017554 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	2201      	movs	r2, #1
 8017470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801747a:	683b      	ldr	r3, [r7, #0]
 801747c:	68db      	ldr	r3, [r3, #12]
 801747e:	4313      	orrs	r3, r2
 8017480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017488:	683b      	ldr	r3, [r7, #0]
 801748a:	689b      	ldr	r3, [r3, #8]
 801748c:	4313      	orrs	r3, r2
 801748e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017496:	683b      	ldr	r3, [r7, #0]
 8017498:	685b      	ldr	r3, [r3, #4]
 801749a:	4313      	orrs	r3, r2
 801749c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80174a4:	683b      	ldr	r3, [r7, #0]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	4313      	orrs	r3, r2
 80174aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80174b2:	683b      	ldr	r3, [r7, #0]
 80174b4:	691b      	ldr	r3, [r3, #16]
 80174b6:	4313      	orrs	r3, r2
 80174b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80174c0:	683b      	ldr	r3, [r7, #0]
 80174c2:	695b      	ldr	r3, [r3, #20]
 80174c4:	4313      	orrs	r3, r2
 80174c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80174d2:	4313      	orrs	r3, r2
 80174d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80174dc:	683b      	ldr	r3, [r7, #0]
 80174de:	699b      	ldr	r3, [r3, #24]
 80174e0:	041b      	lsls	r3, r3, #16
 80174e2:	4313      	orrs	r3, r2
 80174e4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80174ec:	683b      	ldr	r3, [r7, #0]
 80174ee:	69db      	ldr	r3, [r3, #28]
 80174f0:	4313      	orrs	r3, r2
 80174f2:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	4a19      	ldr	r2, [pc, #100]	@ (8017560 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80174fa:	4293      	cmp	r3, r2
 80174fc:	d004      	beq.n	8017508 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	4a18      	ldr	r2, [pc, #96]	@ (8017564 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8017504:	4293      	cmp	r3, r2
 8017506:	d11c      	bne.n	8017542 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801750e:	683b      	ldr	r3, [r7, #0]
 8017510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017512:	051b      	lsls	r3, r3, #20
 8017514:	4313      	orrs	r3, r2
 8017516:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801751e:	683b      	ldr	r3, [r7, #0]
 8017520:	6a1b      	ldr	r3, [r3, #32]
 8017522:	4313      	orrs	r3, r2
 8017524:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801752c:	683b      	ldr	r3, [r7, #0]
 801752e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017530:	4313      	orrs	r3, r2
 8017532:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 801753a:	683b      	ldr	r3, [r7, #0]
 801753c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801753e:	4313      	orrs	r3, r2
 8017540:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	68fa      	ldr	r2, [r7, #12]
 8017548:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	2200      	movs	r2, #0
 801754e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017552:	2300      	movs	r3, #0
}
 8017554:	4618      	mov	r0, r3
 8017556:	3714      	adds	r7, #20
 8017558:	46bd      	mov	sp, r7
 801755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755e:	4770      	bx	lr
 8017560:	40010000 	.word	0x40010000
 8017564:	40010400 	.word	0x40010400

08017568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017568:	b480      	push	{r7}
 801756a:	b083      	sub	sp, #12
 801756c:	af00      	add	r7, sp, #0
 801756e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017570:	bf00      	nop
 8017572:	370c      	adds	r7, #12
 8017574:	46bd      	mov	sp, r7
 8017576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801757a:	4770      	bx	lr

0801757c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801757c:	b480      	push	{r7}
 801757e:	b083      	sub	sp, #12
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017584:	bf00      	nop
 8017586:	370c      	adds	r7, #12
 8017588:	46bd      	mov	sp, r7
 801758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801758e:	4770      	bx	lr

08017590 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017590:	b480      	push	{r7}
 8017592:	b083      	sub	sp, #12
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017598:	bf00      	nop
 801759a:	370c      	adds	r7, #12
 801759c:	46bd      	mov	sp, r7
 801759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a2:	4770      	bx	lr

080175a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b082      	sub	sp, #8
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d101      	bne.n	80175b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80175b2:	2301      	movs	r3, #1
 80175b4:	e042      	b.n	801763c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d106      	bne.n	80175ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	2200      	movs	r2, #0
 80175c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80175c8:	6878      	ldr	r0, [r7, #4]
 80175ca:	f7f0 ffdf 	bl	800858c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	2224      	movs	r2, #36	@ 0x24
 80175d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	681a      	ldr	r2, [r3, #0]
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	f022 0201 	bic.w	r2, r2, #1
 80175e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d002      	beq.n	80175f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80175ee:	6878      	ldr	r0, [r7, #4]
 80175f0:	f001 fbf8 	bl	8018de4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80175f4:	6878      	ldr	r0, [r7, #4]
 80175f6:	f000 fd89 	bl	801810c <UART_SetConfig>
 80175fa:	4603      	mov	r3, r0
 80175fc:	2b01      	cmp	r3, #1
 80175fe:	d101      	bne.n	8017604 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017600:	2301      	movs	r3, #1
 8017602:	e01b      	b.n	801763c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	685a      	ldr	r2, [r3, #4]
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017612:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	689a      	ldr	r2, [r3, #8]
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017622:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	681a      	ldr	r2, [r3, #0]
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	f042 0201 	orr.w	r2, r2, #1
 8017632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f001 fc77 	bl	8018f28 <UART_CheckIdleState>
 801763a:	4603      	mov	r3, r0
}
 801763c:	4618      	mov	r0, r3
 801763e:	3708      	adds	r7, #8
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}

08017644 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b08a      	sub	sp, #40	@ 0x28
 8017648:	af02      	add	r7, sp, #8
 801764a:	60f8      	str	r0, [r7, #12]
 801764c:	60b9      	str	r1, [r7, #8]
 801764e:	603b      	str	r3, [r7, #0]
 8017650:	4613      	mov	r3, r2
 8017652:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801765a:	2b20      	cmp	r3, #32
 801765c:	d17b      	bne.n	8017756 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801765e:	68bb      	ldr	r3, [r7, #8]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d002      	beq.n	801766a <HAL_UART_Transmit+0x26>
 8017664:	88fb      	ldrh	r3, [r7, #6]
 8017666:	2b00      	cmp	r3, #0
 8017668:	d101      	bne.n	801766e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801766a:	2301      	movs	r3, #1
 801766c:	e074      	b.n	8017758 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	2200      	movs	r2, #0
 8017672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	2221      	movs	r2, #33	@ 0x21
 801767a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801767e:	f7f1 f8a7 	bl	80087d0 <HAL_GetTick>
 8017682:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	88fa      	ldrh	r2, [r7, #6]
 8017688:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	88fa      	ldrh	r2, [r7, #6]
 8017690:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	689b      	ldr	r3, [r3, #8]
 8017698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801769c:	d108      	bne.n	80176b0 <HAL_UART_Transmit+0x6c>
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	691b      	ldr	r3, [r3, #16]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d104      	bne.n	80176b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80176a6:	2300      	movs	r3, #0
 80176a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80176aa:	68bb      	ldr	r3, [r7, #8]
 80176ac:	61bb      	str	r3, [r7, #24]
 80176ae:	e003      	b.n	80176b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80176b0:	68bb      	ldr	r3, [r7, #8]
 80176b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80176b4:	2300      	movs	r3, #0
 80176b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80176b8:	e030      	b.n	801771c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	9300      	str	r3, [sp, #0]
 80176be:	697b      	ldr	r3, [r7, #20]
 80176c0:	2200      	movs	r2, #0
 80176c2:	2180      	movs	r1, #128	@ 0x80
 80176c4:	68f8      	ldr	r0, [r7, #12]
 80176c6:	f001 fcd9 	bl	801907c <UART_WaitOnFlagUntilTimeout>
 80176ca:	4603      	mov	r3, r0
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d005      	beq.n	80176dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	2220      	movs	r2, #32
 80176d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80176d8:	2303      	movs	r3, #3
 80176da:	e03d      	b.n	8017758 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80176dc:	69fb      	ldr	r3, [r7, #28]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d10b      	bne.n	80176fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80176e2:	69bb      	ldr	r3, [r7, #24]
 80176e4:	881b      	ldrh	r3, [r3, #0]
 80176e6:	461a      	mov	r2, r3
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80176f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80176f2:	69bb      	ldr	r3, [r7, #24]
 80176f4:	3302      	adds	r3, #2
 80176f6:	61bb      	str	r3, [r7, #24]
 80176f8:	e007      	b.n	801770a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80176fa:	69fb      	ldr	r3, [r7, #28]
 80176fc:	781a      	ldrb	r2, [r3, #0]
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017704:	69fb      	ldr	r3, [r7, #28]
 8017706:	3301      	adds	r3, #1
 8017708:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017710:	b29b      	uxth	r3, r3
 8017712:	3b01      	subs	r3, #1
 8017714:	b29a      	uxth	r2, r3
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017722:	b29b      	uxth	r3, r3
 8017724:	2b00      	cmp	r3, #0
 8017726:	d1c8      	bne.n	80176ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017728:	683b      	ldr	r3, [r7, #0]
 801772a:	9300      	str	r3, [sp, #0]
 801772c:	697b      	ldr	r3, [r7, #20]
 801772e:	2200      	movs	r2, #0
 8017730:	2140      	movs	r1, #64	@ 0x40
 8017732:	68f8      	ldr	r0, [r7, #12]
 8017734:	f001 fca2 	bl	801907c <UART_WaitOnFlagUntilTimeout>
 8017738:	4603      	mov	r3, r0
 801773a:	2b00      	cmp	r3, #0
 801773c:	d005      	beq.n	801774a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	2220      	movs	r2, #32
 8017742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8017746:	2303      	movs	r3, #3
 8017748:	e006      	b.n	8017758 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	2220      	movs	r2, #32
 801774e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8017752:	2300      	movs	r3, #0
 8017754:	e000      	b.n	8017758 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8017756:	2302      	movs	r3, #2
  }
}
 8017758:	4618      	mov	r0, r3
 801775a:	3720      	adds	r7, #32
 801775c:	46bd      	mov	sp, r7
 801775e:	bd80      	pop	{r7, pc}

08017760 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017760:	b480      	push	{r7}
 8017762:	b091      	sub	sp, #68	@ 0x44
 8017764:	af00      	add	r7, sp, #0
 8017766:	60f8      	str	r0, [r7, #12]
 8017768:	60b9      	str	r1, [r7, #8]
 801776a:	4613      	mov	r3, r2
 801776c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017774:	2b20      	cmp	r3, #32
 8017776:	d178      	bne.n	801786a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8017778:	68bb      	ldr	r3, [r7, #8]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d002      	beq.n	8017784 <HAL_UART_Transmit_IT+0x24>
 801777e:	88fb      	ldrh	r3, [r7, #6]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d101      	bne.n	8017788 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8017784:	2301      	movs	r3, #1
 8017786:	e071      	b.n	801786c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	68ba      	ldr	r2, [r7, #8]
 801778c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	88fa      	ldrh	r2, [r7, #6]
 8017792:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	88fa      	ldrh	r2, [r7, #6]
 801779a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	2200      	movs	r2, #0
 80177a2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	2200      	movs	r2, #0
 80177a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	2221      	movs	r2, #33	@ 0x21
 80177b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80177b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80177bc:	d12a      	bne.n	8017814 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	689b      	ldr	r3, [r3, #8]
 80177c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80177c6:	d107      	bne.n	80177d8 <HAL_UART_Transmit_IT+0x78>
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	691b      	ldr	r3, [r3, #16]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d103      	bne.n	80177d8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	4a29      	ldr	r2, [pc, #164]	@ (8017878 <HAL_UART_Transmit_IT+0x118>)
 80177d4:	679a      	str	r2, [r3, #120]	@ 0x78
 80177d6:	e002      	b.n	80177de <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	4a28      	ldr	r2, [pc, #160]	@ (801787c <HAL_UART_Transmit_IT+0x11c>)
 80177dc:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	3308      	adds	r3, #8
 80177e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177e8:	e853 3f00 	ldrex	r3, [r3]
 80177ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80177ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80177f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	3308      	adds	r3, #8
 80177fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80177fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8017800:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017802:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017804:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017806:	e841 2300 	strex	r3, r2, [r1]
 801780a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801780c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801780e:	2b00      	cmp	r3, #0
 8017810:	d1e5      	bne.n	80177de <HAL_UART_Transmit_IT+0x7e>
 8017812:	e028      	b.n	8017866 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	689b      	ldr	r3, [r3, #8]
 8017818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801781c:	d107      	bne.n	801782e <HAL_UART_Transmit_IT+0xce>
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	691b      	ldr	r3, [r3, #16]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d103      	bne.n	801782e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	4a15      	ldr	r2, [pc, #84]	@ (8017880 <HAL_UART_Transmit_IT+0x120>)
 801782a:	679a      	str	r2, [r3, #120]	@ 0x78
 801782c:	e002      	b.n	8017834 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	4a14      	ldr	r2, [pc, #80]	@ (8017884 <HAL_UART_Transmit_IT+0x124>)
 8017832:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801783a:	697b      	ldr	r3, [r7, #20]
 801783c:	e853 3f00 	ldrex	r3, [r3]
 8017840:	613b      	str	r3, [r7, #16]
   return(result);
 8017842:	693b      	ldr	r3, [r7, #16]
 8017844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	461a      	mov	r2, r3
 8017850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017852:	623b      	str	r3, [r7, #32]
 8017854:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017856:	69f9      	ldr	r1, [r7, #28]
 8017858:	6a3a      	ldr	r2, [r7, #32]
 801785a:	e841 2300 	strex	r3, r2, [r1]
 801785e:	61bb      	str	r3, [r7, #24]
   return(result);
 8017860:	69bb      	ldr	r3, [r7, #24]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d1e6      	bne.n	8017834 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8017866:	2300      	movs	r3, #0
 8017868:	e000      	b.n	801786c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 801786a:	2302      	movs	r3, #2
  }
}
 801786c:	4618      	mov	r0, r3
 801786e:	3744      	adds	r7, #68	@ 0x44
 8017870:	46bd      	mov	sp, r7
 8017872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017876:	4770      	bx	lr
 8017878:	080196e7 	.word	0x080196e7
 801787c:	08019607 	.word	0x08019607
 8017880:	08019545 	.word	0x08019545
 8017884:	0801948d 	.word	0x0801948d

08017888 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b08a      	sub	sp, #40	@ 0x28
 801788c:	af00      	add	r7, sp, #0
 801788e:	60f8      	str	r0, [r7, #12]
 8017890:	60b9      	str	r1, [r7, #8]
 8017892:	4613      	mov	r3, r2
 8017894:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801789c:	2b20      	cmp	r3, #32
 801789e:	d137      	bne.n	8017910 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80178a0:	68bb      	ldr	r3, [r7, #8]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d002      	beq.n	80178ac <HAL_UART_Receive_IT+0x24>
 80178a6:	88fb      	ldrh	r3, [r7, #6]
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d101      	bne.n	80178b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80178ac:	2301      	movs	r3, #1
 80178ae:	e030      	b.n	8017912 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	2200      	movs	r2, #0
 80178b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	4a18      	ldr	r2, [pc, #96]	@ (801791c <HAL_UART_Receive_IT+0x94>)
 80178bc:	4293      	cmp	r3, r2
 80178be:	d01f      	beq.n	8017900 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	685b      	ldr	r3, [r3, #4]
 80178c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d018      	beq.n	8017900 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178d4:	697b      	ldr	r3, [r7, #20]
 80178d6:	e853 3f00 	ldrex	r3, [r3]
 80178da:	613b      	str	r3, [r7, #16]
   return(result);
 80178dc:	693b      	ldr	r3, [r7, #16]
 80178de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80178e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	461a      	mov	r2, r3
 80178ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178ec:	623b      	str	r3, [r7, #32]
 80178ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178f0:	69f9      	ldr	r1, [r7, #28]
 80178f2:	6a3a      	ldr	r2, [r7, #32]
 80178f4:	e841 2300 	strex	r3, r2, [r1]
 80178f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80178fa:	69bb      	ldr	r3, [r7, #24]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d1e6      	bne.n	80178ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017900:	88fb      	ldrh	r3, [r7, #6]
 8017902:	461a      	mov	r2, r3
 8017904:	68b9      	ldr	r1, [r7, #8]
 8017906:	68f8      	ldr	r0, [r7, #12]
 8017908:	f001 fc26 	bl	8019158 <UART_Start_Receive_IT>
 801790c:	4603      	mov	r3, r0
 801790e:	e000      	b.n	8017912 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017910:	2302      	movs	r3, #2
  }
}
 8017912:	4618      	mov	r0, r3
 8017914:	3728      	adds	r7, #40	@ 0x28
 8017916:	46bd      	mov	sp, r7
 8017918:	bd80      	pop	{r7, pc}
 801791a:	bf00      	nop
 801791c:	58000c00 	.word	0x58000c00

08017920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b0ba      	sub	sp, #232	@ 0xe8
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	681b      	ldr	r3, [r3, #0]
 801792c:	69db      	ldr	r3, [r3, #28]
 801792e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	689b      	ldr	r3, [r3, #8]
 8017942:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017946:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801794a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801794e:	4013      	ands	r3, r2
 8017950:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8017954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017958:	2b00      	cmp	r3, #0
 801795a:	d11b      	bne.n	8017994 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801795c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017960:	f003 0320 	and.w	r3, r3, #32
 8017964:	2b00      	cmp	r3, #0
 8017966:	d015      	beq.n	8017994 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801796c:	f003 0320 	and.w	r3, r3, #32
 8017970:	2b00      	cmp	r3, #0
 8017972:	d105      	bne.n	8017980 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801797c:	2b00      	cmp	r3, #0
 801797e:	d009      	beq.n	8017994 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017984:	2b00      	cmp	r3, #0
 8017986:	f000 8393 	beq.w	80180b0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801798e:	6878      	ldr	r0, [r7, #4]
 8017990:	4798      	blx	r3
      }
      return;
 8017992:	e38d      	b.n	80180b0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017998:	2b00      	cmp	r3, #0
 801799a:	f000 8123 	beq.w	8017be4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801799e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80179a2:	4b8d      	ldr	r3, [pc, #564]	@ (8017bd8 <HAL_UART_IRQHandler+0x2b8>)
 80179a4:	4013      	ands	r3, r2
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d106      	bne.n	80179b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80179aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80179ae:	4b8b      	ldr	r3, [pc, #556]	@ (8017bdc <HAL_UART_IRQHandler+0x2bc>)
 80179b0:	4013      	ands	r3, r2
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f000 8116 	beq.w	8017be4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80179b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80179bc:	f003 0301 	and.w	r3, r3, #1
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d011      	beq.n	80179e8 <HAL_UART_IRQHandler+0xc8>
 80179c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80179c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d00b      	beq.n	80179e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	2201      	movs	r2, #1
 80179d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80179de:	f043 0201 	orr.w	r2, r3, #1
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80179e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80179ec:	f003 0302 	and.w	r3, r3, #2
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d011      	beq.n	8017a18 <HAL_UART_IRQHandler+0xf8>
 80179f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80179f8:	f003 0301 	and.w	r3, r3, #1
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d00b      	beq.n	8017a18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	2202      	movs	r2, #2
 8017a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a0e:	f043 0204 	orr.w	r2, r3, #4
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017a1c:	f003 0304 	and.w	r3, r3, #4
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d011      	beq.n	8017a48 <HAL_UART_IRQHandler+0x128>
 8017a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017a28:	f003 0301 	and.w	r3, r3, #1
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d00b      	beq.n	8017a48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	2204      	movs	r2, #4
 8017a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a3e:	f043 0202 	orr.w	r2, r3, #2
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017a4c:	f003 0308 	and.w	r3, r3, #8
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d017      	beq.n	8017a84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017a58:	f003 0320 	and.w	r3, r3, #32
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d105      	bne.n	8017a6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8017a60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017a64:	4b5c      	ldr	r3, [pc, #368]	@ (8017bd8 <HAL_UART_IRQHandler+0x2b8>)
 8017a66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d00b      	beq.n	8017a84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	2208      	movs	r2, #8
 8017a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a7a:	f043 0208 	orr.w	r2, r3, #8
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d012      	beq.n	8017ab6 <HAL_UART_IRQHandler+0x196>
 8017a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017a94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d00c      	beq.n	8017ab6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017aac:	f043 0220 	orr.w	r2, r3, #32
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	f000 82f9 	beq.w	80180b4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ac6:	f003 0320 	and.w	r3, r3, #32
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d013      	beq.n	8017af6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017ad2:	f003 0320 	and.w	r3, r3, #32
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d105      	bne.n	8017ae6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d007      	beq.n	8017af6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d003      	beq.n	8017af6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017af2:	6878      	ldr	r0, [r7, #4]
 8017af4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017afc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	689b      	ldr	r3, [r3, #8]
 8017b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017b0a:	2b40      	cmp	r3, #64	@ 0x40
 8017b0c:	d005      	beq.n	8017b1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8017b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017b12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d054      	beq.n	8017bc4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017b1a:	6878      	ldr	r0, [r7, #4]
 8017b1c:	f001 fc3e 	bl	801939c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	689b      	ldr	r3, [r3, #8]
 8017b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017b2a:	2b40      	cmp	r3, #64	@ 0x40
 8017b2c:	d146      	bne.n	8017bbc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	3308      	adds	r3, #8
 8017b34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017b3c:	e853 3f00 	ldrex	r3, [r3]
 8017b40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8017b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8017b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	3308      	adds	r3, #8
 8017b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8017b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8017b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8017b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8017b6a:	e841 2300 	strex	r3, r2, [r1]
 8017b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8017b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d1d9      	bne.n	8017b2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d017      	beq.n	8017bb4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b8a:	4a15      	ldr	r2, [pc, #84]	@ (8017be0 <HAL_UART_IRQHandler+0x2c0>)
 8017b8c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b94:	4618      	mov	r0, r3
 8017b96:	f7f4 f831 	bl	800bbfc <HAL_DMA_Abort_IT>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d019      	beq.n	8017bd4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017ba8:	687a      	ldr	r2, [r7, #4]
 8017baa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8017bae:	4610      	mov	r0, r2
 8017bb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017bb2:	e00f      	b.n	8017bd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017bb4:	6878      	ldr	r0, [r7, #4]
 8017bb6:	f000 fa93 	bl	80180e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017bba:	e00b      	b.n	8017bd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017bbc:	6878      	ldr	r0, [r7, #4]
 8017bbe:	f000 fa8f 	bl	80180e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017bc2:	e007      	b.n	8017bd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017bc4:	6878      	ldr	r0, [r7, #4]
 8017bc6:	f000 fa8b 	bl	80180e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	2200      	movs	r2, #0
 8017bce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8017bd2:	e26f      	b.n	80180b4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017bd4:	bf00      	nop
    return;
 8017bd6:	e26d      	b.n	80180b4 <HAL_UART_IRQHandler+0x794>
 8017bd8:	10000001 	.word	0x10000001
 8017bdc:	04000120 	.word	0x04000120
 8017be0:	08019469 	.word	0x08019469

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017be8:	2b01      	cmp	r3, #1
 8017bea:	f040 8203 	bne.w	8017ff4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8017bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017bf2:	f003 0310 	and.w	r3, r3, #16
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	f000 81fc 	beq.w	8017ff4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017c00:	f003 0310 	and.w	r3, r3, #16
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	f000 81f5 	beq.w	8017ff4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	2210      	movs	r2, #16
 8017c10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	689b      	ldr	r3, [r3, #8]
 8017c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017c1c:	2b40      	cmp	r3, #64	@ 0x40
 8017c1e:	f040 816d 	bne.w	8017efc <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	4aa4      	ldr	r2, [pc, #656]	@ (8017ebc <HAL_UART_IRQHandler+0x59c>)
 8017c2c:	4293      	cmp	r3, r2
 8017c2e:	d068      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	4aa1      	ldr	r2, [pc, #644]	@ (8017ec0 <HAL_UART_IRQHandler+0x5a0>)
 8017c3a:	4293      	cmp	r3, r2
 8017c3c:	d061      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	4a9f      	ldr	r2, [pc, #636]	@ (8017ec4 <HAL_UART_IRQHandler+0x5a4>)
 8017c48:	4293      	cmp	r3, r2
 8017c4a:	d05a      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	4a9c      	ldr	r2, [pc, #624]	@ (8017ec8 <HAL_UART_IRQHandler+0x5a8>)
 8017c56:	4293      	cmp	r3, r2
 8017c58:	d053      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	4a9a      	ldr	r2, [pc, #616]	@ (8017ecc <HAL_UART_IRQHandler+0x5ac>)
 8017c64:	4293      	cmp	r3, r2
 8017c66:	d04c      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	4a97      	ldr	r2, [pc, #604]	@ (8017ed0 <HAL_UART_IRQHandler+0x5b0>)
 8017c72:	4293      	cmp	r3, r2
 8017c74:	d045      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	4a95      	ldr	r2, [pc, #596]	@ (8017ed4 <HAL_UART_IRQHandler+0x5b4>)
 8017c80:	4293      	cmp	r3, r2
 8017c82:	d03e      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	4a92      	ldr	r2, [pc, #584]	@ (8017ed8 <HAL_UART_IRQHandler+0x5b8>)
 8017c8e:	4293      	cmp	r3, r2
 8017c90:	d037      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	4a90      	ldr	r2, [pc, #576]	@ (8017edc <HAL_UART_IRQHandler+0x5bc>)
 8017c9c:	4293      	cmp	r3, r2
 8017c9e:	d030      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	4a8d      	ldr	r2, [pc, #564]	@ (8017ee0 <HAL_UART_IRQHandler+0x5c0>)
 8017caa:	4293      	cmp	r3, r2
 8017cac:	d029      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	4a8b      	ldr	r2, [pc, #556]	@ (8017ee4 <HAL_UART_IRQHandler+0x5c4>)
 8017cb8:	4293      	cmp	r3, r2
 8017cba:	d022      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	4a88      	ldr	r2, [pc, #544]	@ (8017ee8 <HAL_UART_IRQHandler+0x5c8>)
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	d01b      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	4a86      	ldr	r2, [pc, #536]	@ (8017eec <HAL_UART_IRQHandler+0x5cc>)
 8017cd4:	4293      	cmp	r3, r2
 8017cd6:	d014      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	4a83      	ldr	r2, [pc, #524]	@ (8017ef0 <HAL_UART_IRQHandler+0x5d0>)
 8017ce2:	4293      	cmp	r3, r2
 8017ce4:	d00d      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	4a81      	ldr	r2, [pc, #516]	@ (8017ef4 <HAL_UART_IRQHandler+0x5d4>)
 8017cf0:	4293      	cmp	r3, r2
 8017cf2:	d006      	beq.n	8017d02 <HAL_UART_IRQHandler+0x3e2>
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	4a7e      	ldr	r2, [pc, #504]	@ (8017ef8 <HAL_UART_IRQHandler+0x5d8>)
 8017cfe:	4293      	cmp	r3, r2
 8017d00:	d106      	bne.n	8017d10 <HAL_UART_IRQHandler+0x3f0>
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	685b      	ldr	r3, [r3, #4]
 8017d0c:	b29b      	uxth	r3, r3
 8017d0e:	e005      	b.n	8017d1c <HAL_UART_IRQHandler+0x3fc>
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	685b      	ldr	r3, [r3, #4]
 8017d1a:	b29b      	uxth	r3, r3
 8017d1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017d20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	f000 80ad 	beq.w	8017e84 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017d30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017d34:	429a      	cmp	r2, r3
 8017d36:	f080 80a5 	bcs.w	8017e84 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017d40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d4a:	69db      	ldr	r3, [r3, #28]
 8017d4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017d50:	f000 8087 	beq.w	8017e62 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017d60:	e853 3f00 	ldrex	r3, [r3]
 8017d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8017d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	461a      	mov	r2, r3
 8017d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017d7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8017d82:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8017d8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8017d8e:	e841 2300 	strex	r3, r2, [r1]
 8017d92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8017d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d1da      	bne.n	8017d54 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	3308      	adds	r3, #8
 8017da4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017da6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017da8:	e853 3f00 	ldrex	r3, [r3]
 8017dac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8017dae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017db0:	f023 0301 	bic.w	r3, r3, #1
 8017db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	3308      	adds	r3, #8
 8017dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8017dc2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8017dc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8017dca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017dce:	e841 2300 	strex	r3, r2, [r1]
 8017dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8017dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d1e1      	bne.n	8017d9e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	3308      	adds	r3, #8
 8017de0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017de4:	e853 3f00 	ldrex	r3, [r3]
 8017de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8017dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017df0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	3308      	adds	r3, #8
 8017dfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8017dfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8017e00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8017e04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8017e06:	e841 2300 	strex	r3, r2, [r1]
 8017e0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8017e0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d1e3      	bne.n	8017dda <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	2220      	movs	r2, #32
 8017e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	2200      	movs	r2, #0
 8017e1e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e28:	e853 3f00 	ldrex	r3, [r3]
 8017e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8017e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017e30:	f023 0310 	bic.w	r3, r3, #16
 8017e34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	461a      	mov	r2, r3
 8017e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017e42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017e44:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017e48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017e4a:	e841 2300 	strex	r3, r2, [r1]
 8017e4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8017e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d1e4      	bne.n	8017e20 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	f7f3 fbaf 	bl	800b5c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	2202      	movs	r2, #2
 8017e66:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017e74:	b29b      	uxth	r3, r3
 8017e76:	1ad3      	subs	r3, r2, r3
 8017e78:	b29b      	uxth	r3, r3
 8017e7a:	4619      	mov	r1, r3
 8017e7c:	6878      	ldr	r0, [r7, #4]
 8017e7e:	f000 f939 	bl	80180f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8017e82:	e119      	b.n	80180b8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	f040 8112 	bne.w	80180b8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e9a:	69db      	ldr	r3, [r3, #28]
 8017e9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017ea0:	f040 810a 	bne.w	80180b8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	2202      	movs	r2, #2
 8017ea8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017eb0:	4619      	mov	r1, r3
 8017eb2:	6878      	ldr	r0, [r7, #4]
 8017eb4:	f000 f91e 	bl	80180f4 <HAL_UARTEx_RxEventCallback>
      return;
 8017eb8:	e0fe      	b.n	80180b8 <HAL_UART_IRQHandler+0x798>
 8017eba:	bf00      	nop
 8017ebc:	40020010 	.word	0x40020010
 8017ec0:	40020028 	.word	0x40020028
 8017ec4:	40020040 	.word	0x40020040
 8017ec8:	40020058 	.word	0x40020058
 8017ecc:	40020070 	.word	0x40020070
 8017ed0:	40020088 	.word	0x40020088
 8017ed4:	400200a0 	.word	0x400200a0
 8017ed8:	400200b8 	.word	0x400200b8
 8017edc:	40020410 	.word	0x40020410
 8017ee0:	40020428 	.word	0x40020428
 8017ee4:	40020440 	.word	0x40020440
 8017ee8:	40020458 	.word	0x40020458
 8017eec:	40020470 	.word	0x40020470
 8017ef0:	40020488 	.word	0x40020488
 8017ef4:	400204a0 	.word	0x400204a0
 8017ef8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017f08:	b29b      	uxth	r3, r3
 8017f0a:	1ad3      	subs	r3, r2, r3
 8017f0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017f16:	b29b      	uxth	r3, r3
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	f000 80cf 	beq.w	80180bc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8017f1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	f000 80ca 	beq.w	80180bc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f30:	e853 3f00 	ldrex	r3, [r3]
 8017f34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	461a      	mov	r2, r3
 8017f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8017f4c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017f50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017f52:	e841 2300 	strex	r3, r2, [r1]
 8017f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d1e4      	bne.n	8017f28 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	3308      	adds	r3, #8
 8017f64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f68:	e853 3f00 	ldrex	r3, [r3]
 8017f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8017f6e:	6a3a      	ldr	r2, [r7, #32]
 8017f70:	4b55      	ldr	r3, [pc, #340]	@ (80180c8 <HAL_UART_IRQHandler+0x7a8>)
 8017f72:	4013      	ands	r3, r2
 8017f74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	3308      	adds	r3, #8
 8017f7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8017f82:	633a      	str	r2, [r7, #48]	@ 0x30
 8017f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f8a:	e841 2300 	strex	r3, r2, [r1]
 8017f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d1e3      	bne.n	8017f5e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	2220      	movs	r2, #32
 8017f9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fb0:	693b      	ldr	r3, [r7, #16]
 8017fb2:	e853 3f00 	ldrex	r3, [r3]
 8017fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	f023 0310 	bic.w	r3, r3, #16
 8017fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	461a      	mov	r2, r3
 8017fc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8017fcc:	61fb      	str	r3, [r7, #28]
 8017fce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017fd0:	69b9      	ldr	r1, [r7, #24]
 8017fd2:	69fa      	ldr	r2, [r7, #28]
 8017fd4:	e841 2300 	strex	r3, r2, [r1]
 8017fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8017fda:	697b      	ldr	r3, [r7, #20]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d1e4      	bne.n	8017faa <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	2202      	movs	r2, #2
 8017fe4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017fe6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017fea:	4619      	mov	r1, r3
 8017fec:	6878      	ldr	r0, [r7, #4]
 8017fee:	f000 f881 	bl	80180f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017ff2:	e063      	b.n	80180bc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ff8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d00e      	beq.n	801801e <HAL_UART_IRQHandler+0x6fe>
 8018000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018008:	2b00      	cmp	r3, #0
 801800a:	d008      	beq.n	801801e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8018014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018016:	6878      	ldr	r0, [r7, #4]
 8018018:	f002 f926 	bl	801a268 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801801c:	e051      	b.n	80180c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801801e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018026:	2b00      	cmp	r3, #0
 8018028:	d014      	beq.n	8018054 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801802a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801802e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018032:	2b00      	cmp	r3, #0
 8018034:	d105      	bne.n	8018042 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8018036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801803a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801803e:	2b00      	cmp	r3, #0
 8018040:	d008      	beq.n	8018054 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018046:	2b00      	cmp	r3, #0
 8018048:	d03a      	beq.n	80180c0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801804e:	6878      	ldr	r0, [r7, #4]
 8018050:	4798      	blx	r3
    }
    return;
 8018052:	e035      	b.n	80180c0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8018054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801805c:	2b00      	cmp	r3, #0
 801805e:	d009      	beq.n	8018074 <HAL_UART_IRQHandler+0x754>
 8018060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018068:	2b00      	cmp	r3, #0
 801806a:	d003      	beq.n	8018074 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 801806c:	6878      	ldr	r0, [r7, #4]
 801806e:	f001 fbaf 	bl	80197d0 <UART_EndTransmit_IT>
    return;
 8018072:	e026      	b.n	80180c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8018074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018078:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801807c:	2b00      	cmp	r3, #0
 801807e:	d009      	beq.n	8018094 <HAL_UART_IRQHandler+0x774>
 8018080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018084:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018088:	2b00      	cmp	r3, #0
 801808a:	d003      	beq.n	8018094 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801808c:	6878      	ldr	r0, [r7, #4]
 801808e:	f002 f8ff 	bl	801a290 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018092:	e016      	b.n	80180c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8018094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018098:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801809c:	2b00      	cmp	r3, #0
 801809e:	d010      	beq.n	80180c2 <HAL_UART_IRQHandler+0x7a2>
 80180a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	da0c      	bge.n	80180c2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80180a8:	6878      	ldr	r0, [r7, #4]
 80180aa:	f002 f8e7 	bl	801a27c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80180ae:	e008      	b.n	80180c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80180b0:	bf00      	nop
 80180b2:	e006      	b.n	80180c2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80180b4:	bf00      	nop
 80180b6:	e004      	b.n	80180c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80180b8:	bf00      	nop
 80180ba:	e002      	b.n	80180c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80180bc:	bf00      	nop
 80180be:	e000      	b.n	80180c2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80180c0:	bf00      	nop
  }
}
 80180c2:	37e8      	adds	r7, #232	@ 0xe8
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd80      	pop	{r7, pc}
 80180c8:	effffffe 	.word	0xeffffffe

080180cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80180cc:	b480      	push	{r7}
 80180ce:	b083      	sub	sp, #12
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80180d4:	bf00      	nop
 80180d6:	370c      	adds	r7, #12
 80180d8:	46bd      	mov	sp, r7
 80180da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180de:	4770      	bx	lr

080180e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80180e0:	b480      	push	{r7}
 80180e2:	b083      	sub	sp, #12
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80180e8:	bf00      	nop
 80180ea:	370c      	adds	r7, #12
 80180ec:	46bd      	mov	sp, r7
 80180ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f2:	4770      	bx	lr

080180f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80180f4:	b480      	push	{r7}
 80180f6:	b083      	sub	sp, #12
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
 80180fc:	460b      	mov	r3, r1
 80180fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018100:	bf00      	nop
 8018102:	370c      	adds	r7, #12
 8018104:	46bd      	mov	sp, r7
 8018106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801810a:	4770      	bx	lr

0801810c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801810c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018110:	b092      	sub	sp, #72	@ 0x48
 8018112:	af00      	add	r7, sp, #0
 8018114:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018116:	2300      	movs	r3, #0
 8018118:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801811c:	697b      	ldr	r3, [r7, #20]
 801811e:	689a      	ldr	r2, [r3, #8]
 8018120:	697b      	ldr	r3, [r7, #20]
 8018122:	691b      	ldr	r3, [r3, #16]
 8018124:	431a      	orrs	r2, r3
 8018126:	697b      	ldr	r3, [r7, #20]
 8018128:	695b      	ldr	r3, [r3, #20]
 801812a:	431a      	orrs	r2, r3
 801812c:	697b      	ldr	r3, [r7, #20]
 801812e:	69db      	ldr	r3, [r3, #28]
 8018130:	4313      	orrs	r3, r2
 8018132:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018134:	697b      	ldr	r3, [r7, #20]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	681a      	ldr	r2, [r3, #0]
 801813a:	4bbe      	ldr	r3, [pc, #760]	@ (8018434 <UART_SetConfig+0x328>)
 801813c:	4013      	ands	r3, r2
 801813e:	697a      	ldr	r2, [r7, #20]
 8018140:	6812      	ldr	r2, [r2, #0]
 8018142:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018144:	430b      	orrs	r3, r1
 8018146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018148:	697b      	ldr	r3, [r7, #20]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	685b      	ldr	r3, [r3, #4]
 801814e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8018152:	697b      	ldr	r3, [r7, #20]
 8018154:	68da      	ldr	r2, [r3, #12]
 8018156:	697b      	ldr	r3, [r7, #20]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	430a      	orrs	r2, r1
 801815c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801815e:	697b      	ldr	r3, [r7, #20]
 8018160:	699b      	ldr	r3, [r3, #24]
 8018162:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018164:	697b      	ldr	r3, [r7, #20]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	4ab3      	ldr	r2, [pc, #716]	@ (8018438 <UART_SetConfig+0x32c>)
 801816a:	4293      	cmp	r3, r2
 801816c:	d004      	beq.n	8018178 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801816e:	697b      	ldr	r3, [r7, #20]
 8018170:	6a1b      	ldr	r3, [r3, #32]
 8018172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018174:	4313      	orrs	r3, r2
 8018176:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018178:	697b      	ldr	r3, [r7, #20]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	689a      	ldr	r2, [r3, #8]
 801817e:	4baf      	ldr	r3, [pc, #700]	@ (801843c <UART_SetConfig+0x330>)
 8018180:	4013      	ands	r3, r2
 8018182:	697a      	ldr	r2, [r7, #20]
 8018184:	6812      	ldr	r2, [r2, #0]
 8018186:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018188:	430b      	orrs	r3, r1
 801818a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801818c:	697b      	ldr	r3, [r7, #20]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018192:	f023 010f 	bic.w	r1, r3, #15
 8018196:	697b      	ldr	r3, [r7, #20]
 8018198:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801819a:	697b      	ldr	r3, [r7, #20]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	430a      	orrs	r2, r1
 80181a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80181a2:	697b      	ldr	r3, [r7, #20]
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	4aa6      	ldr	r2, [pc, #664]	@ (8018440 <UART_SetConfig+0x334>)
 80181a8:	4293      	cmp	r3, r2
 80181aa:	d177      	bne.n	801829c <UART_SetConfig+0x190>
 80181ac:	4ba5      	ldr	r3, [pc, #660]	@ (8018444 <UART_SetConfig+0x338>)
 80181ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80181b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80181b4:	2b28      	cmp	r3, #40	@ 0x28
 80181b6:	d86d      	bhi.n	8018294 <UART_SetConfig+0x188>
 80181b8:	a201      	add	r2, pc, #4	@ (adr r2, 80181c0 <UART_SetConfig+0xb4>)
 80181ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181be:	bf00      	nop
 80181c0:	08018265 	.word	0x08018265
 80181c4:	08018295 	.word	0x08018295
 80181c8:	08018295 	.word	0x08018295
 80181cc:	08018295 	.word	0x08018295
 80181d0:	08018295 	.word	0x08018295
 80181d4:	08018295 	.word	0x08018295
 80181d8:	08018295 	.word	0x08018295
 80181dc:	08018295 	.word	0x08018295
 80181e0:	0801826d 	.word	0x0801826d
 80181e4:	08018295 	.word	0x08018295
 80181e8:	08018295 	.word	0x08018295
 80181ec:	08018295 	.word	0x08018295
 80181f0:	08018295 	.word	0x08018295
 80181f4:	08018295 	.word	0x08018295
 80181f8:	08018295 	.word	0x08018295
 80181fc:	08018295 	.word	0x08018295
 8018200:	08018275 	.word	0x08018275
 8018204:	08018295 	.word	0x08018295
 8018208:	08018295 	.word	0x08018295
 801820c:	08018295 	.word	0x08018295
 8018210:	08018295 	.word	0x08018295
 8018214:	08018295 	.word	0x08018295
 8018218:	08018295 	.word	0x08018295
 801821c:	08018295 	.word	0x08018295
 8018220:	0801827d 	.word	0x0801827d
 8018224:	08018295 	.word	0x08018295
 8018228:	08018295 	.word	0x08018295
 801822c:	08018295 	.word	0x08018295
 8018230:	08018295 	.word	0x08018295
 8018234:	08018295 	.word	0x08018295
 8018238:	08018295 	.word	0x08018295
 801823c:	08018295 	.word	0x08018295
 8018240:	08018285 	.word	0x08018285
 8018244:	08018295 	.word	0x08018295
 8018248:	08018295 	.word	0x08018295
 801824c:	08018295 	.word	0x08018295
 8018250:	08018295 	.word	0x08018295
 8018254:	08018295 	.word	0x08018295
 8018258:	08018295 	.word	0x08018295
 801825c:	08018295 	.word	0x08018295
 8018260:	0801828d 	.word	0x0801828d
 8018264:	2301      	movs	r3, #1
 8018266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801826a:	e326      	b.n	80188ba <UART_SetConfig+0x7ae>
 801826c:	2304      	movs	r3, #4
 801826e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018272:	e322      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018274:	2308      	movs	r3, #8
 8018276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801827a:	e31e      	b.n	80188ba <UART_SetConfig+0x7ae>
 801827c:	2310      	movs	r3, #16
 801827e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018282:	e31a      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018284:	2320      	movs	r3, #32
 8018286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801828a:	e316      	b.n	80188ba <UART_SetConfig+0x7ae>
 801828c:	2340      	movs	r3, #64	@ 0x40
 801828e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018292:	e312      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018294:	2380      	movs	r3, #128	@ 0x80
 8018296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801829a:	e30e      	b.n	80188ba <UART_SetConfig+0x7ae>
 801829c:	697b      	ldr	r3, [r7, #20]
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	4a69      	ldr	r2, [pc, #420]	@ (8018448 <UART_SetConfig+0x33c>)
 80182a2:	4293      	cmp	r3, r2
 80182a4:	d130      	bne.n	8018308 <UART_SetConfig+0x1fc>
 80182a6:	4b67      	ldr	r3, [pc, #412]	@ (8018444 <UART_SetConfig+0x338>)
 80182a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80182aa:	f003 0307 	and.w	r3, r3, #7
 80182ae:	2b05      	cmp	r3, #5
 80182b0:	d826      	bhi.n	8018300 <UART_SetConfig+0x1f4>
 80182b2:	a201      	add	r2, pc, #4	@ (adr r2, 80182b8 <UART_SetConfig+0x1ac>)
 80182b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182b8:	080182d1 	.word	0x080182d1
 80182bc:	080182d9 	.word	0x080182d9
 80182c0:	080182e1 	.word	0x080182e1
 80182c4:	080182e9 	.word	0x080182e9
 80182c8:	080182f1 	.word	0x080182f1
 80182cc:	080182f9 	.word	0x080182f9
 80182d0:	2300      	movs	r3, #0
 80182d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182d6:	e2f0      	b.n	80188ba <UART_SetConfig+0x7ae>
 80182d8:	2304      	movs	r3, #4
 80182da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182de:	e2ec      	b.n	80188ba <UART_SetConfig+0x7ae>
 80182e0:	2308      	movs	r3, #8
 80182e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182e6:	e2e8      	b.n	80188ba <UART_SetConfig+0x7ae>
 80182e8:	2310      	movs	r3, #16
 80182ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182ee:	e2e4      	b.n	80188ba <UART_SetConfig+0x7ae>
 80182f0:	2320      	movs	r3, #32
 80182f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182f6:	e2e0      	b.n	80188ba <UART_SetConfig+0x7ae>
 80182f8:	2340      	movs	r3, #64	@ 0x40
 80182fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182fe:	e2dc      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018300:	2380      	movs	r3, #128	@ 0x80
 8018302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018306:	e2d8      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018308:	697b      	ldr	r3, [r7, #20]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	4a4f      	ldr	r2, [pc, #316]	@ (801844c <UART_SetConfig+0x340>)
 801830e:	4293      	cmp	r3, r2
 8018310:	d130      	bne.n	8018374 <UART_SetConfig+0x268>
 8018312:	4b4c      	ldr	r3, [pc, #304]	@ (8018444 <UART_SetConfig+0x338>)
 8018314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018316:	f003 0307 	and.w	r3, r3, #7
 801831a:	2b05      	cmp	r3, #5
 801831c:	d826      	bhi.n	801836c <UART_SetConfig+0x260>
 801831e:	a201      	add	r2, pc, #4	@ (adr r2, 8018324 <UART_SetConfig+0x218>)
 8018320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018324:	0801833d 	.word	0x0801833d
 8018328:	08018345 	.word	0x08018345
 801832c:	0801834d 	.word	0x0801834d
 8018330:	08018355 	.word	0x08018355
 8018334:	0801835d 	.word	0x0801835d
 8018338:	08018365 	.word	0x08018365
 801833c:	2300      	movs	r3, #0
 801833e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018342:	e2ba      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018344:	2304      	movs	r3, #4
 8018346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801834a:	e2b6      	b.n	80188ba <UART_SetConfig+0x7ae>
 801834c:	2308      	movs	r3, #8
 801834e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018352:	e2b2      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018354:	2310      	movs	r3, #16
 8018356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801835a:	e2ae      	b.n	80188ba <UART_SetConfig+0x7ae>
 801835c:	2320      	movs	r3, #32
 801835e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018362:	e2aa      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018364:	2340      	movs	r3, #64	@ 0x40
 8018366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801836a:	e2a6      	b.n	80188ba <UART_SetConfig+0x7ae>
 801836c:	2380      	movs	r3, #128	@ 0x80
 801836e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018372:	e2a2      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018374:	697b      	ldr	r3, [r7, #20]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	4a35      	ldr	r2, [pc, #212]	@ (8018450 <UART_SetConfig+0x344>)
 801837a:	4293      	cmp	r3, r2
 801837c:	d130      	bne.n	80183e0 <UART_SetConfig+0x2d4>
 801837e:	4b31      	ldr	r3, [pc, #196]	@ (8018444 <UART_SetConfig+0x338>)
 8018380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018382:	f003 0307 	and.w	r3, r3, #7
 8018386:	2b05      	cmp	r3, #5
 8018388:	d826      	bhi.n	80183d8 <UART_SetConfig+0x2cc>
 801838a:	a201      	add	r2, pc, #4	@ (adr r2, 8018390 <UART_SetConfig+0x284>)
 801838c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018390:	080183a9 	.word	0x080183a9
 8018394:	080183b1 	.word	0x080183b1
 8018398:	080183b9 	.word	0x080183b9
 801839c:	080183c1 	.word	0x080183c1
 80183a0:	080183c9 	.word	0x080183c9
 80183a4:	080183d1 	.word	0x080183d1
 80183a8:	2300      	movs	r3, #0
 80183aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183ae:	e284      	b.n	80188ba <UART_SetConfig+0x7ae>
 80183b0:	2304      	movs	r3, #4
 80183b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183b6:	e280      	b.n	80188ba <UART_SetConfig+0x7ae>
 80183b8:	2308      	movs	r3, #8
 80183ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183be:	e27c      	b.n	80188ba <UART_SetConfig+0x7ae>
 80183c0:	2310      	movs	r3, #16
 80183c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183c6:	e278      	b.n	80188ba <UART_SetConfig+0x7ae>
 80183c8:	2320      	movs	r3, #32
 80183ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183ce:	e274      	b.n	80188ba <UART_SetConfig+0x7ae>
 80183d0:	2340      	movs	r3, #64	@ 0x40
 80183d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183d6:	e270      	b.n	80188ba <UART_SetConfig+0x7ae>
 80183d8:	2380      	movs	r3, #128	@ 0x80
 80183da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183de:	e26c      	b.n	80188ba <UART_SetConfig+0x7ae>
 80183e0:	697b      	ldr	r3, [r7, #20]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	4a1b      	ldr	r2, [pc, #108]	@ (8018454 <UART_SetConfig+0x348>)
 80183e6:	4293      	cmp	r3, r2
 80183e8:	d142      	bne.n	8018470 <UART_SetConfig+0x364>
 80183ea:	4b16      	ldr	r3, [pc, #88]	@ (8018444 <UART_SetConfig+0x338>)
 80183ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80183ee:	f003 0307 	and.w	r3, r3, #7
 80183f2:	2b05      	cmp	r3, #5
 80183f4:	d838      	bhi.n	8018468 <UART_SetConfig+0x35c>
 80183f6:	a201      	add	r2, pc, #4	@ (adr r2, 80183fc <UART_SetConfig+0x2f0>)
 80183f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183fc:	08018415 	.word	0x08018415
 8018400:	0801841d 	.word	0x0801841d
 8018404:	08018425 	.word	0x08018425
 8018408:	0801842d 	.word	0x0801842d
 801840c:	08018459 	.word	0x08018459
 8018410:	08018461 	.word	0x08018461
 8018414:	2300      	movs	r3, #0
 8018416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801841a:	e24e      	b.n	80188ba <UART_SetConfig+0x7ae>
 801841c:	2304      	movs	r3, #4
 801841e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018422:	e24a      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018424:	2308      	movs	r3, #8
 8018426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801842a:	e246      	b.n	80188ba <UART_SetConfig+0x7ae>
 801842c:	2310      	movs	r3, #16
 801842e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018432:	e242      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018434:	cfff69f3 	.word	0xcfff69f3
 8018438:	58000c00 	.word	0x58000c00
 801843c:	11fff4ff 	.word	0x11fff4ff
 8018440:	40011000 	.word	0x40011000
 8018444:	58024400 	.word	0x58024400
 8018448:	40004400 	.word	0x40004400
 801844c:	40004800 	.word	0x40004800
 8018450:	40004c00 	.word	0x40004c00
 8018454:	40005000 	.word	0x40005000
 8018458:	2320      	movs	r3, #32
 801845a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801845e:	e22c      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018460:	2340      	movs	r3, #64	@ 0x40
 8018462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018466:	e228      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018468:	2380      	movs	r3, #128	@ 0x80
 801846a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801846e:	e224      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018470:	697b      	ldr	r3, [r7, #20]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	4ab1      	ldr	r2, [pc, #708]	@ (801873c <UART_SetConfig+0x630>)
 8018476:	4293      	cmp	r3, r2
 8018478:	d176      	bne.n	8018568 <UART_SetConfig+0x45c>
 801847a:	4bb1      	ldr	r3, [pc, #708]	@ (8018740 <UART_SetConfig+0x634>)
 801847c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801847e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018482:	2b28      	cmp	r3, #40	@ 0x28
 8018484:	d86c      	bhi.n	8018560 <UART_SetConfig+0x454>
 8018486:	a201      	add	r2, pc, #4	@ (adr r2, 801848c <UART_SetConfig+0x380>)
 8018488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801848c:	08018531 	.word	0x08018531
 8018490:	08018561 	.word	0x08018561
 8018494:	08018561 	.word	0x08018561
 8018498:	08018561 	.word	0x08018561
 801849c:	08018561 	.word	0x08018561
 80184a0:	08018561 	.word	0x08018561
 80184a4:	08018561 	.word	0x08018561
 80184a8:	08018561 	.word	0x08018561
 80184ac:	08018539 	.word	0x08018539
 80184b0:	08018561 	.word	0x08018561
 80184b4:	08018561 	.word	0x08018561
 80184b8:	08018561 	.word	0x08018561
 80184bc:	08018561 	.word	0x08018561
 80184c0:	08018561 	.word	0x08018561
 80184c4:	08018561 	.word	0x08018561
 80184c8:	08018561 	.word	0x08018561
 80184cc:	08018541 	.word	0x08018541
 80184d0:	08018561 	.word	0x08018561
 80184d4:	08018561 	.word	0x08018561
 80184d8:	08018561 	.word	0x08018561
 80184dc:	08018561 	.word	0x08018561
 80184e0:	08018561 	.word	0x08018561
 80184e4:	08018561 	.word	0x08018561
 80184e8:	08018561 	.word	0x08018561
 80184ec:	08018549 	.word	0x08018549
 80184f0:	08018561 	.word	0x08018561
 80184f4:	08018561 	.word	0x08018561
 80184f8:	08018561 	.word	0x08018561
 80184fc:	08018561 	.word	0x08018561
 8018500:	08018561 	.word	0x08018561
 8018504:	08018561 	.word	0x08018561
 8018508:	08018561 	.word	0x08018561
 801850c:	08018551 	.word	0x08018551
 8018510:	08018561 	.word	0x08018561
 8018514:	08018561 	.word	0x08018561
 8018518:	08018561 	.word	0x08018561
 801851c:	08018561 	.word	0x08018561
 8018520:	08018561 	.word	0x08018561
 8018524:	08018561 	.word	0x08018561
 8018528:	08018561 	.word	0x08018561
 801852c:	08018559 	.word	0x08018559
 8018530:	2301      	movs	r3, #1
 8018532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018536:	e1c0      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018538:	2304      	movs	r3, #4
 801853a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801853e:	e1bc      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018540:	2308      	movs	r3, #8
 8018542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018546:	e1b8      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018548:	2310      	movs	r3, #16
 801854a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801854e:	e1b4      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018550:	2320      	movs	r3, #32
 8018552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018556:	e1b0      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018558:	2340      	movs	r3, #64	@ 0x40
 801855a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801855e:	e1ac      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018560:	2380      	movs	r3, #128	@ 0x80
 8018562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018566:	e1a8      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018568:	697b      	ldr	r3, [r7, #20]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	4a75      	ldr	r2, [pc, #468]	@ (8018744 <UART_SetConfig+0x638>)
 801856e:	4293      	cmp	r3, r2
 8018570:	d130      	bne.n	80185d4 <UART_SetConfig+0x4c8>
 8018572:	4b73      	ldr	r3, [pc, #460]	@ (8018740 <UART_SetConfig+0x634>)
 8018574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018576:	f003 0307 	and.w	r3, r3, #7
 801857a:	2b05      	cmp	r3, #5
 801857c:	d826      	bhi.n	80185cc <UART_SetConfig+0x4c0>
 801857e:	a201      	add	r2, pc, #4	@ (adr r2, 8018584 <UART_SetConfig+0x478>)
 8018580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018584:	0801859d 	.word	0x0801859d
 8018588:	080185a5 	.word	0x080185a5
 801858c:	080185ad 	.word	0x080185ad
 8018590:	080185b5 	.word	0x080185b5
 8018594:	080185bd 	.word	0x080185bd
 8018598:	080185c5 	.word	0x080185c5
 801859c:	2300      	movs	r3, #0
 801859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185a2:	e18a      	b.n	80188ba <UART_SetConfig+0x7ae>
 80185a4:	2304      	movs	r3, #4
 80185a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185aa:	e186      	b.n	80188ba <UART_SetConfig+0x7ae>
 80185ac:	2308      	movs	r3, #8
 80185ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185b2:	e182      	b.n	80188ba <UART_SetConfig+0x7ae>
 80185b4:	2310      	movs	r3, #16
 80185b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185ba:	e17e      	b.n	80188ba <UART_SetConfig+0x7ae>
 80185bc:	2320      	movs	r3, #32
 80185be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185c2:	e17a      	b.n	80188ba <UART_SetConfig+0x7ae>
 80185c4:	2340      	movs	r3, #64	@ 0x40
 80185c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185ca:	e176      	b.n	80188ba <UART_SetConfig+0x7ae>
 80185cc:	2380      	movs	r3, #128	@ 0x80
 80185ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185d2:	e172      	b.n	80188ba <UART_SetConfig+0x7ae>
 80185d4:	697b      	ldr	r3, [r7, #20]
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	4a5b      	ldr	r2, [pc, #364]	@ (8018748 <UART_SetConfig+0x63c>)
 80185da:	4293      	cmp	r3, r2
 80185dc:	d130      	bne.n	8018640 <UART_SetConfig+0x534>
 80185de:	4b58      	ldr	r3, [pc, #352]	@ (8018740 <UART_SetConfig+0x634>)
 80185e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80185e2:	f003 0307 	and.w	r3, r3, #7
 80185e6:	2b05      	cmp	r3, #5
 80185e8:	d826      	bhi.n	8018638 <UART_SetConfig+0x52c>
 80185ea:	a201      	add	r2, pc, #4	@ (adr r2, 80185f0 <UART_SetConfig+0x4e4>)
 80185ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185f0:	08018609 	.word	0x08018609
 80185f4:	08018611 	.word	0x08018611
 80185f8:	08018619 	.word	0x08018619
 80185fc:	08018621 	.word	0x08018621
 8018600:	08018629 	.word	0x08018629
 8018604:	08018631 	.word	0x08018631
 8018608:	2300      	movs	r3, #0
 801860a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801860e:	e154      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018610:	2304      	movs	r3, #4
 8018612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018616:	e150      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018618:	2308      	movs	r3, #8
 801861a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801861e:	e14c      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018620:	2310      	movs	r3, #16
 8018622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018626:	e148      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018628:	2320      	movs	r3, #32
 801862a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801862e:	e144      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018630:	2340      	movs	r3, #64	@ 0x40
 8018632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018636:	e140      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018638:	2380      	movs	r3, #128	@ 0x80
 801863a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801863e:	e13c      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018640:	697b      	ldr	r3, [r7, #20]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	4a41      	ldr	r2, [pc, #260]	@ (801874c <UART_SetConfig+0x640>)
 8018646:	4293      	cmp	r3, r2
 8018648:	f040 8082 	bne.w	8018750 <UART_SetConfig+0x644>
 801864c:	4b3c      	ldr	r3, [pc, #240]	@ (8018740 <UART_SetConfig+0x634>)
 801864e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018650:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018654:	2b28      	cmp	r3, #40	@ 0x28
 8018656:	d86d      	bhi.n	8018734 <UART_SetConfig+0x628>
 8018658:	a201      	add	r2, pc, #4	@ (adr r2, 8018660 <UART_SetConfig+0x554>)
 801865a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801865e:	bf00      	nop
 8018660:	08018705 	.word	0x08018705
 8018664:	08018735 	.word	0x08018735
 8018668:	08018735 	.word	0x08018735
 801866c:	08018735 	.word	0x08018735
 8018670:	08018735 	.word	0x08018735
 8018674:	08018735 	.word	0x08018735
 8018678:	08018735 	.word	0x08018735
 801867c:	08018735 	.word	0x08018735
 8018680:	0801870d 	.word	0x0801870d
 8018684:	08018735 	.word	0x08018735
 8018688:	08018735 	.word	0x08018735
 801868c:	08018735 	.word	0x08018735
 8018690:	08018735 	.word	0x08018735
 8018694:	08018735 	.word	0x08018735
 8018698:	08018735 	.word	0x08018735
 801869c:	08018735 	.word	0x08018735
 80186a0:	08018715 	.word	0x08018715
 80186a4:	08018735 	.word	0x08018735
 80186a8:	08018735 	.word	0x08018735
 80186ac:	08018735 	.word	0x08018735
 80186b0:	08018735 	.word	0x08018735
 80186b4:	08018735 	.word	0x08018735
 80186b8:	08018735 	.word	0x08018735
 80186bc:	08018735 	.word	0x08018735
 80186c0:	0801871d 	.word	0x0801871d
 80186c4:	08018735 	.word	0x08018735
 80186c8:	08018735 	.word	0x08018735
 80186cc:	08018735 	.word	0x08018735
 80186d0:	08018735 	.word	0x08018735
 80186d4:	08018735 	.word	0x08018735
 80186d8:	08018735 	.word	0x08018735
 80186dc:	08018735 	.word	0x08018735
 80186e0:	08018725 	.word	0x08018725
 80186e4:	08018735 	.word	0x08018735
 80186e8:	08018735 	.word	0x08018735
 80186ec:	08018735 	.word	0x08018735
 80186f0:	08018735 	.word	0x08018735
 80186f4:	08018735 	.word	0x08018735
 80186f8:	08018735 	.word	0x08018735
 80186fc:	08018735 	.word	0x08018735
 8018700:	0801872d 	.word	0x0801872d
 8018704:	2301      	movs	r3, #1
 8018706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801870a:	e0d6      	b.n	80188ba <UART_SetConfig+0x7ae>
 801870c:	2304      	movs	r3, #4
 801870e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018712:	e0d2      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018714:	2308      	movs	r3, #8
 8018716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801871a:	e0ce      	b.n	80188ba <UART_SetConfig+0x7ae>
 801871c:	2310      	movs	r3, #16
 801871e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018722:	e0ca      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018724:	2320      	movs	r3, #32
 8018726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801872a:	e0c6      	b.n	80188ba <UART_SetConfig+0x7ae>
 801872c:	2340      	movs	r3, #64	@ 0x40
 801872e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018732:	e0c2      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018734:	2380      	movs	r3, #128	@ 0x80
 8018736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801873a:	e0be      	b.n	80188ba <UART_SetConfig+0x7ae>
 801873c:	40011400 	.word	0x40011400
 8018740:	58024400 	.word	0x58024400
 8018744:	40007800 	.word	0x40007800
 8018748:	40007c00 	.word	0x40007c00
 801874c:	40011800 	.word	0x40011800
 8018750:	697b      	ldr	r3, [r7, #20]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	4aad      	ldr	r2, [pc, #692]	@ (8018a0c <UART_SetConfig+0x900>)
 8018756:	4293      	cmp	r3, r2
 8018758:	d176      	bne.n	8018848 <UART_SetConfig+0x73c>
 801875a:	4bad      	ldr	r3, [pc, #692]	@ (8018a10 <UART_SetConfig+0x904>)
 801875c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801875e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018762:	2b28      	cmp	r3, #40	@ 0x28
 8018764:	d86c      	bhi.n	8018840 <UART_SetConfig+0x734>
 8018766:	a201      	add	r2, pc, #4	@ (adr r2, 801876c <UART_SetConfig+0x660>)
 8018768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801876c:	08018811 	.word	0x08018811
 8018770:	08018841 	.word	0x08018841
 8018774:	08018841 	.word	0x08018841
 8018778:	08018841 	.word	0x08018841
 801877c:	08018841 	.word	0x08018841
 8018780:	08018841 	.word	0x08018841
 8018784:	08018841 	.word	0x08018841
 8018788:	08018841 	.word	0x08018841
 801878c:	08018819 	.word	0x08018819
 8018790:	08018841 	.word	0x08018841
 8018794:	08018841 	.word	0x08018841
 8018798:	08018841 	.word	0x08018841
 801879c:	08018841 	.word	0x08018841
 80187a0:	08018841 	.word	0x08018841
 80187a4:	08018841 	.word	0x08018841
 80187a8:	08018841 	.word	0x08018841
 80187ac:	08018821 	.word	0x08018821
 80187b0:	08018841 	.word	0x08018841
 80187b4:	08018841 	.word	0x08018841
 80187b8:	08018841 	.word	0x08018841
 80187bc:	08018841 	.word	0x08018841
 80187c0:	08018841 	.word	0x08018841
 80187c4:	08018841 	.word	0x08018841
 80187c8:	08018841 	.word	0x08018841
 80187cc:	08018829 	.word	0x08018829
 80187d0:	08018841 	.word	0x08018841
 80187d4:	08018841 	.word	0x08018841
 80187d8:	08018841 	.word	0x08018841
 80187dc:	08018841 	.word	0x08018841
 80187e0:	08018841 	.word	0x08018841
 80187e4:	08018841 	.word	0x08018841
 80187e8:	08018841 	.word	0x08018841
 80187ec:	08018831 	.word	0x08018831
 80187f0:	08018841 	.word	0x08018841
 80187f4:	08018841 	.word	0x08018841
 80187f8:	08018841 	.word	0x08018841
 80187fc:	08018841 	.word	0x08018841
 8018800:	08018841 	.word	0x08018841
 8018804:	08018841 	.word	0x08018841
 8018808:	08018841 	.word	0x08018841
 801880c:	08018839 	.word	0x08018839
 8018810:	2301      	movs	r3, #1
 8018812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018816:	e050      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018818:	2304      	movs	r3, #4
 801881a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801881e:	e04c      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018820:	2308      	movs	r3, #8
 8018822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018826:	e048      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018828:	2310      	movs	r3, #16
 801882a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801882e:	e044      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018830:	2320      	movs	r3, #32
 8018832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018836:	e040      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018838:	2340      	movs	r3, #64	@ 0x40
 801883a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801883e:	e03c      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018840:	2380      	movs	r3, #128	@ 0x80
 8018842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018846:	e038      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018848:	697b      	ldr	r3, [r7, #20]
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	4a71      	ldr	r2, [pc, #452]	@ (8018a14 <UART_SetConfig+0x908>)
 801884e:	4293      	cmp	r3, r2
 8018850:	d130      	bne.n	80188b4 <UART_SetConfig+0x7a8>
 8018852:	4b6f      	ldr	r3, [pc, #444]	@ (8018a10 <UART_SetConfig+0x904>)
 8018854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018856:	f003 0307 	and.w	r3, r3, #7
 801885a:	2b05      	cmp	r3, #5
 801885c:	d826      	bhi.n	80188ac <UART_SetConfig+0x7a0>
 801885e:	a201      	add	r2, pc, #4	@ (adr r2, 8018864 <UART_SetConfig+0x758>)
 8018860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018864:	0801887d 	.word	0x0801887d
 8018868:	08018885 	.word	0x08018885
 801886c:	0801888d 	.word	0x0801888d
 8018870:	08018895 	.word	0x08018895
 8018874:	0801889d 	.word	0x0801889d
 8018878:	080188a5 	.word	0x080188a5
 801887c:	2302      	movs	r3, #2
 801887e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018882:	e01a      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018884:	2304      	movs	r3, #4
 8018886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801888a:	e016      	b.n	80188ba <UART_SetConfig+0x7ae>
 801888c:	2308      	movs	r3, #8
 801888e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018892:	e012      	b.n	80188ba <UART_SetConfig+0x7ae>
 8018894:	2310      	movs	r3, #16
 8018896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801889a:	e00e      	b.n	80188ba <UART_SetConfig+0x7ae>
 801889c:	2320      	movs	r3, #32
 801889e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188a2:	e00a      	b.n	80188ba <UART_SetConfig+0x7ae>
 80188a4:	2340      	movs	r3, #64	@ 0x40
 80188a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188aa:	e006      	b.n	80188ba <UART_SetConfig+0x7ae>
 80188ac:	2380      	movs	r3, #128	@ 0x80
 80188ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188b2:	e002      	b.n	80188ba <UART_SetConfig+0x7ae>
 80188b4:	2380      	movs	r3, #128	@ 0x80
 80188b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80188ba:	697b      	ldr	r3, [r7, #20]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	4a55      	ldr	r2, [pc, #340]	@ (8018a14 <UART_SetConfig+0x908>)
 80188c0:	4293      	cmp	r3, r2
 80188c2:	f040 80f8 	bne.w	8018ab6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80188c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80188ca:	2b20      	cmp	r3, #32
 80188cc:	dc46      	bgt.n	801895c <UART_SetConfig+0x850>
 80188ce:	2b02      	cmp	r3, #2
 80188d0:	db75      	blt.n	80189be <UART_SetConfig+0x8b2>
 80188d2:	3b02      	subs	r3, #2
 80188d4:	2b1e      	cmp	r3, #30
 80188d6:	d872      	bhi.n	80189be <UART_SetConfig+0x8b2>
 80188d8:	a201      	add	r2, pc, #4	@ (adr r2, 80188e0 <UART_SetConfig+0x7d4>)
 80188da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188de:	bf00      	nop
 80188e0:	08018963 	.word	0x08018963
 80188e4:	080189bf 	.word	0x080189bf
 80188e8:	0801896b 	.word	0x0801896b
 80188ec:	080189bf 	.word	0x080189bf
 80188f0:	080189bf 	.word	0x080189bf
 80188f4:	080189bf 	.word	0x080189bf
 80188f8:	0801897b 	.word	0x0801897b
 80188fc:	080189bf 	.word	0x080189bf
 8018900:	080189bf 	.word	0x080189bf
 8018904:	080189bf 	.word	0x080189bf
 8018908:	080189bf 	.word	0x080189bf
 801890c:	080189bf 	.word	0x080189bf
 8018910:	080189bf 	.word	0x080189bf
 8018914:	080189bf 	.word	0x080189bf
 8018918:	0801898b 	.word	0x0801898b
 801891c:	080189bf 	.word	0x080189bf
 8018920:	080189bf 	.word	0x080189bf
 8018924:	080189bf 	.word	0x080189bf
 8018928:	080189bf 	.word	0x080189bf
 801892c:	080189bf 	.word	0x080189bf
 8018930:	080189bf 	.word	0x080189bf
 8018934:	080189bf 	.word	0x080189bf
 8018938:	080189bf 	.word	0x080189bf
 801893c:	080189bf 	.word	0x080189bf
 8018940:	080189bf 	.word	0x080189bf
 8018944:	080189bf 	.word	0x080189bf
 8018948:	080189bf 	.word	0x080189bf
 801894c:	080189bf 	.word	0x080189bf
 8018950:	080189bf 	.word	0x080189bf
 8018954:	080189bf 	.word	0x080189bf
 8018958:	080189b1 	.word	0x080189b1
 801895c:	2b40      	cmp	r3, #64	@ 0x40
 801895e:	d02a      	beq.n	80189b6 <UART_SetConfig+0x8aa>
 8018960:	e02d      	b.n	80189be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8018962:	f7fa fb37 	bl	8012fd4 <HAL_RCCEx_GetD3PCLK1Freq>
 8018966:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018968:	e02f      	b.n	80189ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801896a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801896e:	4618      	mov	r0, r3
 8018970:	f7fa fb46 	bl	8013000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018978:	e027      	b.n	80189ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801897a:	f107 0318 	add.w	r3, r7, #24
 801897e:	4618      	mov	r0, r3
 8018980:	f7fa fc92 	bl	80132a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018984:	69fb      	ldr	r3, [r7, #28]
 8018986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018988:	e01f      	b.n	80189ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801898a:	4b21      	ldr	r3, [pc, #132]	@ (8018a10 <UART_SetConfig+0x904>)
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	f003 0320 	and.w	r3, r3, #32
 8018992:	2b00      	cmp	r3, #0
 8018994:	d009      	beq.n	80189aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018996:	4b1e      	ldr	r3, [pc, #120]	@ (8018a10 <UART_SetConfig+0x904>)
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	08db      	lsrs	r3, r3, #3
 801899c:	f003 0303 	and.w	r3, r3, #3
 80189a0:	4a1d      	ldr	r2, [pc, #116]	@ (8018a18 <UART_SetConfig+0x90c>)
 80189a2:	fa22 f303 	lsr.w	r3, r2, r3
 80189a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80189a8:	e00f      	b.n	80189ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80189aa:	4b1b      	ldr	r3, [pc, #108]	@ (8018a18 <UART_SetConfig+0x90c>)
 80189ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80189ae:	e00c      	b.n	80189ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80189b0:	4b1a      	ldr	r3, [pc, #104]	@ (8018a1c <UART_SetConfig+0x910>)
 80189b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80189b4:	e009      	b.n	80189ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80189b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80189ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80189bc:	e005      	b.n	80189ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80189be:	2300      	movs	r3, #0
 80189c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80189c2:	2301      	movs	r3, #1
 80189c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80189c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80189ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	f000 81ee 	beq.w	8018dae <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80189d2:	697b      	ldr	r3, [r7, #20]
 80189d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189d6:	4a12      	ldr	r2, [pc, #72]	@ (8018a20 <UART_SetConfig+0x914>)
 80189d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80189dc:	461a      	mov	r2, r3
 80189de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80189e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80189e4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80189e6:	697b      	ldr	r3, [r7, #20]
 80189e8:	685a      	ldr	r2, [r3, #4]
 80189ea:	4613      	mov	r3, r2
 80189ec:	005b      	lsls	r3, r3, #1
 80189ee:	4413      	add	r3, r2
 80189f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80189f2:	429a      	cmp	r2, r3
 80189f4:	d305      	bcc.n	8018a02 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80189f6:	697b      	ldr	r3, [r7, #20]
 80189f8:	685b      	ldr	r3, [r3, #4]
 80189fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80189fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80189fe:	429a      	cmp	r2, r3
 8018a00:	d910      	bls.n	8018a24 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8018a02:	2301      	movs	r3, #1
 8018a04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018a08:	e1d1      	b.n	8018dae <UART_SetConfig+0xca2>
 8018a0a:	bf00      	nop
 8018a0c:	40011c00 	.word	0x40011c00
 8018a10:	58024400 	.word	0x58024400
 8018a14:	58000c00 	.word	0x58000c00
 8018a18:	03d09000 	.word	0x03d09000
 8018a1c:	003d0900 	.word	0x003d0900
 8018a20:	0801e300 	.word	0x0801e300
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a26:	2200      	movs	r2, #0
 8018a28:	60bb      	str	r3, [r7, #8]
 8018a2a:	60fa      	str	r2, [r7, #12]
 8018a2c:	697b      	ldr	r3, [r7, #20]
 8018a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a30:	4ac0      	ldr	r2, [pc, #768]	@ (8018d34 <UART_SetConfig+0xc28>)
 8018a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018a36:	b29b      	uxth	r3, r3
 8018a38:	2200      	movs	r2, #0
 8018a3a:	603b      	str	r3, [r7, #0]
 8018a3c:	607a      	str	r2, [r7, #4]
 8018a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018a42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018a46:	f7e7 fcb3 	bl	80003b0 <__aeabi_uldivmod>
 8018a4a:	4602      	mov	r2, r0
 8018a4c:	460b      	mov	r3, r1
 8018a4e:	4610      	mov	r0, r2
 8018a50:	4619      	mov	r1, r3
 8018a52:	f04f 0200 	mov.w	r2, #0
 8018a56:	f04f 0300 	mov.w	r3, #0
 8018a5a:	020b      	lsls	r3, r1, #8
 8018a5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018a60:	0202      	lsls	r2, r0, #8
 8018a62:	6979      	ldr	r1, [r7, #20]
 8018a64:	6849      	ldr	r1, [r1, #4]
 8018a66:	0849      	lsrs	r1, r1, #1
 8018a68:	2000      	movs	r0, #0
 8018a6a:	460c      	mov	r4, r1
 8018a6c:	4605      	mov	r5, r0
 8018a6e:	eb12 0804 	adds.w	r8, r2, r4
 8018a72:	eb43 0905 	adc.w	r9, r3, r5
 8018a76:	697b      	ldr	r3, [r7, #20]
 8018a78:	685b      	ldr	r3, [r3, #4]
 8018a7a:	2200      	movs	r2, #0
 8018a7c:	469a      	mov	sl, r3
 8018a7e:	4693      	mov	fp, r2
 8018a80:	4652      	mov	r2, sl
 8018a82:	465b      	mov	r3, fp
 8018a84:	4640      	mov	r0, r8
 8018a86:	4649      	mov	r1, r9
 8018a88:	f7e7 fc92 	bl	80003b0 <__aeabi_uldivmod>
 8018a8c:	4602      	mov	r2, r0
 8018a8e:	460b      	mov	r3, r1
 8018a90:	4613      	mov	r3, r2
 8018a92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018a9a:	d308      	bcc.n	8018aae <UART_SetConfig+0x9a2>
 8018a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018aa2:	d204      	bcs.n	8018aae <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8018aa4:	697b      	ldr	r3, [r7, #20]
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018aaa:	60da      	str	r2, [r3, #12]
 8018aac:	e17f      	b.n	8018dae <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8018aae:	2301      	movs	r3, #1
 8018ab0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018ab4:	e17b      	b.n	8018dae <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018ab6:	697b      	ldr	r3, [r7, #20]
 8018ab8:	69db      	ldr	r3, [r3, #28]
 8018aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018abe:	f040 80bd 	bne.w	8018c3c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8018ac2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018ac6:	2b20      	cmp	r3, #32
 8018ac8:	dc48      	bgt.n	8018b5c <UART_SetConfig+0xa50>
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	db7b      	blt.n	8018bc6 <UART_SetConfig+0xaba>
 8018ace:	2b20      	cmp	r3, #32
 8018ad0:	d879      	bhi.n	8018bc6 <UART_SetConfig+0xaba>
 8018ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8018ad8 <UART_SetConfig+0x9cc>)
 8018ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ad8:	08018b63 	.word	0x08018b63
 8018adc:	08018b6b 	.word	0x08018b6b
 8018ae0:	08018bc7 	.word	0x08018bc7
 8018ae4:	08018bc7 	.word	0x08018bc7
 8018ae8:	08018b73 	.word	0x08018b73
 8018aec:	08018bc7 	.word	0x08018bc7
 8018af0:	08018bc7 	.word	0x08018bc7
 8018af4:	08018bc7 	.word	0x08018bc7
 8018af8:	08018b83 	.word	0x08018b83
 8018afc:	08018bc7 	.word	0x08018bc7
 8018b00:	08018bc7 	.word	0x08018bc7
 8018b04:	08018bc7 	.word	0x08018bc7
 8018b08:	08018bc7 	.word	0x08018bc7
 8018b0c:	08018bc7 	.word	0x08018bc7
 8018b10:	08018bc7 	.word	0x08018bc7
 8018b14:	08018bc7 	.word	0x08018bc7
 8018b18:	08018b93 	.word	0x08018b93
 8018b1c:	08018bc7 	.word	0x08018bc7
 8018b20:	08018bc7 	.word	0x08018bc7
 8018b24:	08018bc7 	.word	0x08018bc7
 8018b28:	08018bc7 	.word	0x08018bc7
 8018b2c:	08018bc7 	.word	0x08018bc7
 8018b30:	08018bc7 	.word	0x08018bc7
 8018b34:	08018bc7 	.word	0x08018bc7
 8018b38:	08018bc7 	.word	0x08018bc7
 8018b3c:	08018bc7 	.word	0x08018bc7
 8018b40:	08018bc7 	.word	0x08018bc7
 8018b44:	08018bc7 	.word	0x08018bc7
 8018b48:	08018bc7 	.word	0x08018bc7
 8018b4c:	08018bc7 	.word	0x08018bc7
 8018b50:	08018bc7 	.word	0x08018bc7
 8018b54:	08018bc7 	.word	0x08018bc7
 8018b58:	08018bb9 	.word	0x08018bb9
 8018b5c:	2b40      	cmp	r3, #64	@ 0x40
 8018b5e:	d02e      	beq.n	8018bbe <UART_SetConfig+0xab2>
 8018b60:	e031      	b.n	8018bc6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018b62:	f7f8 fb99 	bl	8011298 <HAL_RCC_GetPCLK1Freq>
 8018b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018b68:	e033      	b.n	8018bd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018b6a:	f7f8 fbab 	bl	80112c4 <HAL_RCC_GetPCLK2Freq>
 8018b6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018b70:	e02f      	b.n	8018bd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018b76:	4618      	mov	r0, r3
 8018b78:	f7fa fa42 	bl	8013000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018b80:	e027      	b.n	8018bd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018b82:	f107 0318 	add.w	r3, r7, #24
 8018b86:	4618      	mov	r0, r3
 8018b88:	f7fa fb8e 	bl	80132a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018b8c:	69fb      	ldr	r3, [r7, #28]
 8018b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018b90:	e01f      	b.n	8018bd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018b92:	4b69      	ldr	r3, [pc, #420]	@ (8018d38 <UART_SetConfig+0xc2c>)
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	f003 0320 	and.w	r3, r3, #32
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d009      	beq.n	8018bb2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018b9e:	4b66      	ldr	r3, [pc, #408]	@ (8018d38 <UART_SetConfig+0xc2c>)
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	08db      	lsrs	r3, r3, #3
 8018ba4:	f003 0303 	and.w	r3, r3, #3
 8018ba8:	4a64      	ldr	r2, [pc, #400]	@ (8018d3c <UART_SetConfig+0xc30>)
 8018baa:	fa22 f303 	lsr.w	r3, r2, r3
 8018bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018bb0:	e00f      	b.n	8018bd2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8018bb2:	4b62      	ldr	r3, [pc, #392]	@ (8018d3c <UART_SetConfig+0xc30>)
 8018bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018bb6:	e00c      	b.n	8018bd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018bb8:	4b61      	ldr	r3, [pc, #388]	@ (8018d40 <UART_SetConfig+0xc34>)
 8018bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018bbc:	e009      	b.n	8018bd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018bc4:	e005      	b.n	8018bd2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8018bc6:	2300      	movs	r3, #0
 8018bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018bca:	2301      	movs	r3, #1
 8018bcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018bd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	f000 80ea 	beq.w	8018dae <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018bda:	697b      	ldr	r3, [r7, #20]
 8018bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bde:	4a55      	ldr	r2, [pc, #340]	@ (8018d34 <UART_SetConfig+0xc28>)
 8018be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018be4:	461a      	mov	r2, r3
 8018be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8018bec:	005a      	lsls	r2, r3, #1
 8018bee:	697b      	ldr	r3, [r7, #20]
 8018bf0:	685b      	ldr	r3, [r3, #4]
 8018bf2:	085b      	lsrs	r3, r3, #1
 8018bf4:	441a      	add	r2, r3
 8018bf6:	697b      	ldr	r3, [r7, #20]
 8018bf8:	685b      	ldr	r3, [r3, #4]
 8018bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8018bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c02:	2b0f      	cmp	r3, #15
 8018c04:	d916      	bls.n	8018c34 <UART_SetConfig+0xb28>
 8018c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018c0c:	d212      	bcs.n	8018c34 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c10:	b29b      	uxth	r3, r3
 8018c12:	f023 030f 	bic.w	r3, r3, #15
 8018c16:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c1a:	085b      	lsrs	r3, r3, #1
 8018c1c:	b29b      	uxth	r3, r3
 8018c1e:	f003 0307 	and.w	r3, r3, #7
 8018c22:	b29a      	uxth	r2, r3
 8018c24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018c26:	4313      	orrs	r3, r2
 8018c28:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8018c2a:	697b      	ldr	r3, [r7, #20]
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8018c30:	60da      	str	r2, [r3, #12]
 8018c32:	e0bc      	b.n	8018dae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8018c34:	2301      	movs	r3, #1
 8018c36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018c3a:	e0b8      	b.n	8018dae <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018c3c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018c40:	2b20      	cmp	r3, #32
 8018c42:	dc4b      	bgt.n	8018cdc <UART_SetConfig+0xbd0>
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	f2c0 8087 	blt.w	8018d58 <UART_SetConfig+0xc4c>
 8018c4a:	2b20      	cmp	r3, #32
 8018c4c:	f200 8084 	bhi.w	8018d58 <UART_SetConfig+0xc4c>
 8018c50:	a201      	add	r2, pc, #4	@ (adr r2, 8018c58 <UART_SetConfig+0xb4c>)
 8018c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c56:	bf00      	nop
 8018c58:	08018ce3 	.word	0x08018ce3
 8018c5c:	08018ceb 	.word	0x08018ceb
 8018c60:	08018d59 	.word	0x08018d59
 8018c64:	08018d59 	.word	0x08018d59
 8018c68:	08018cf3 	.word	0x08018cf3
 8018c6c:	08018d59 	.word	0x08018d59
 8018c70:	08018d59 	.word	0x08018d59
 8018c74:	08018d59 	.word	0x08018d59
 8018c78:	08018d03 	.word	0x08018d03
 8018c7c:	08018d59 	.word	0x08018d59
 8018c80:	08018d59 	.word	0x08018d59
 8018c84:	08018d59 	.word	0x08018d59
 8018c88:	08018d59 	.word	0x08018d59
 8018c8c:	08018d59 	.word	0x08018d59
 8018c90:	08018d59 	.word	0x08018d59
 8018c94:	08018d59 	.word	0x08018d59
 8018c98:	08018d13 	.word	0x08018d13
 8018c9c:	08018d59 	.word	0x08018d59
 8018ca0:	08018d59 	.word	0x08018d59
 8018ca4:	08018d59 	.word	0x08018d59
 8018ca8:	08018d59 	.word	0x08018d59
 8018cac:	08018d59 	.word	0x08018d59
 8018cb0:	08018d59 	.word	0x08018d59
 8018cb4:	08018d59 	.word	0x08018d59
 8018cb8:	08018d59 	.word	0x08018d59
 8018cbc:	08018d59 	.word	0x08018d59
 8018cc0:	08018d59 	.word	0x08018d59
 8018cc4:	08018d59 	.word	0x08018d59
 8018cc8:	08018d59 	.word	0x08018d59
 8018ccc:	08018d59 	.word	0x08018d59
 8018cd0:	08018d59 	.word	0x08018d59
 8018cd4:	08018d59 	.word	0x08018d59
 8018cd8:	08018d4b 	.word	0x08018d4b
 8018cdc:	2b40      	cmp	r3, #64	@ 0x40
 8018cde:	d037      	beq.n	8018d50 <UART_SetConfig+0xc44>
 8018ce0:	e03a      	b.n	8018d58 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018ce2:	f7f8 fad9 	bl	8011298 <HAL_RCC_GetPCLK1Freq>
 8018ce6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018ce8:	e03c      	b.n	8018d64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018cea:	f7f8 faeb 	bl	80112c4 <HAL_RCC_GetPCLK2Freq>
 8018cee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018cf0:	e038      	b.n	8018d64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f7fa f982 	bl	8013000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018d00:	e030      	b.n	8018d64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018d02:	f107 0318 	add.w	r3, r7, #24
 8018d06:	4618      	mov	r0, r3
 8018d08:	f7fa face 	bl	80132a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018d0c:	69fb      	ldr	r3, [r7, #28]
 8018d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018d10:	e028      	b.n	8018d64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018d12:	4b09      	ldr	r3, [pc, #36]	@ (8018d38 <UART_SetConfig+0xc2c>)
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	f003 0320 	and.w	r3, r3, #32
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d012      	beq.n	8018d44 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018d1e:	4b06      	ldr	r3, [pc, #24]	@ (8018d38 <UART_SetConfig+0xc2c>)
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	08db      	lsrs	r3, r3, #3
 8018d24:	f003 0303 	and.w	r3, r3, #3
 8018d28:	4a04      	ldr	r2, [pc, #16]	@ (8018d3c <UART_SetConfig+0xc30>)
 8018d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8018d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018d30:	e018      	b.n	8018d64 <UART_SetConfig+0xc58>
 8018d32:	bf00      	nop
 8018d34:	0801e300 	.word	0x0801e300
 8018d38:	58024400 	.word	0x58024400
 8018d3c:	03d09000 	.word	0x03d09000
 8018d40:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8018d44:	4b24      	ldr	r3, [pc, #144]	@ (8018dd8 <UART_SetConfig+0xccc>)
 8018d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018d48:	e00c      	b.n	8018d64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018d4a:	4b24      	ldr	r3, [pc, #144]	@ (8018ddc <UART_SetConfig+0xcd0>)
 8018d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018d4e:	e009      	b.n	8018d64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018d50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018d56:	e005      	b.n	8018d64 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8018d58:	2300      	movs	r3, #0
 8018d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018d5c:	2301      	movs	r3, #1
 8018d5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018d62:	bf00      	nop
    }

    if (pclk != 0U)
 8018d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d021      	beq.n	8018dae <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018d6a:	697b      	ldr	r3, [r7, #20]
 8018d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8018de0 <UART_SetConfig+0xcd4>)
 8018d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018d74:	461a      	mov	r2, r3
 8018d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d78:	fbb3 f2f2 	udiv	r2, r3, r2
 8018d7c:	697b      	ldr	r3, [r7, #20]
 8018d7e:	685b      	ldr	r3, [r3, #4]
 8018d80:	085b      	lsrs	r3, r3, #1
 8018d82:	441a      	add	r2, r3
 8018d84:	697b      	ldr	r3, [r7, #20]
 8018d86:	685b      	ldr	r3, [r3, #4]
 8018d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d90:	2b0f      	cmp	r3, #15
 8018d92:	d909      	bls.n	8018da8 <UART_SetConfig+0xc9c>
 8018d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018d9a:	d205      	bcs.n	8018da8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d9e:	b29a      	uxth	r2, r3
 8018da0:	697b      	ldr	r3, [r7, #20]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	60da      	str	r2, [r3, #12]
 8018da6:	e002      	b.n	8018dae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8018da8:	2301      	movs	r3, #1
 8018daa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8018dae:	697b      	ldr	r3, [r7, #20]
 8018db0:	2201      	movs	r2, #1
 8018db2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8018db6:	697b      	ldr	r3, [r7, #20]
 8018db8:	2201      	movs	r2, #1
 8018dba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018dbe:	697b      	ldr	r3, [r7, #20]
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8018dc4:	697b      	ldr	r3, [r7, #20]
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8018dca:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8018dce:	4618      	mov	r0, r3
 8018dd0:	3748      	adds	r7, #72	@ 0x48
 8018dd2:	46bd      	mov	sp, r7
 8018dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018dd8:	03d09000 	.word	0x03d09000
 8018ddc:	003d0900 	.word	0x003d0900
 8018de0:	0801e300 	.word	0x0801e300

08018de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018de4:	b480      	push	{r7}
 8018de6:	b083      	sub	sp, #12
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018df0:	f003 0308 	and.w	r3, r3, #8
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d00a      	beq.n	8018e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	685b      	ldr	r3, [r3, #4]
 8018dfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	430a      	orrs	r2, r1
 8018e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e12:	f003 0301 	and.w	r3, r3, #1
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d00a      	beq.n	8018e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	685b      	ldr	r3, [r3, #4]
 8018e20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	430a      	orrs	r2, r1
 8018e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e34:	f003 0302 	and.w	r3, r3, #2
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d00a      	beq.n	8018e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	685b      	ldr	r3, [r3, #4]
 8018e42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	430a      	orrs	r2, r1
 8018e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e56:	f003 0304 	and.w	r3, r3, #4
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d00a      	beq.n	8018e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	685b      	ldr	r3, [r3, #4]
 8018e64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	430a      	orrs	r2, r1
 8018e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e78:	f003 0310 	and.w	r3, r3, #16
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d00a      	beq.n	8018e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	689b      	ldr	r3, [r3, #8]
 8018e86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	430a      	orrs	r2, r1
 8018e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e9a:	f003 0320 	and.w	r3, r3, #32
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d00a      	beq.n	8018eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	689b      	ldr	r3, [r3, #8]
 8018ea8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	430a      	orrs	r2, r1
 8018eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d01a      	beq.n	8018efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	685b      	ldr	r3, [r3, #4]
 8018eca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	430a      	orrs	r2, r1
 8018ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018ee2:	d10a      	bne.n	8018efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	685b      	ldr	r3, [r3, #4]
 8018eea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	430a      	orrs	r2, r1
 8018ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d00a      	beq.n	8018f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	685b      	ldr	r3, [r3, #4]
 8018f0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	430a      	orrs	r2, r1
 8018f1a:	605a      	str	r2, [r3, #4]
  }
}
 8018f1c:	bf00      	nop
 8018f1e:	370c      	adds	r7, #12
 8018f20:	46bd      	mov	sp, r7
 8018f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f26:	4770      	bx	lr

08018f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b098      	sub	sp, #96	@ 0x60
 8018f2c:	af02      	add	r7, sp, #8
 8018f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	2200      	movs	r2, #0
 8018f34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018f38:	f7ef fc4a 	bl	80087d0 <HAL_GetTick>
 8018f3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	f003 0308 	and.w	r3, r3, #8
 8018f48:	2b08      	cmp	r3, #8
 8018f4a:	d12f      	bne.n	8018fac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018f4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8018f50:	9300      	str	r3, [sp, #0]
 8018f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f54:	2200      	movs	r2, #0
 8018f56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8018f5a:	6878      	ldr	r0, [r7, #4]
 8018f5c:	f000 f88e 	bl	801907c <UART_WaitOnFlagUntilTimeout>
 8018f60:	4603      	mov	r3, r0
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d022      	beq.n	8018fac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f6e:	e853 3f00 	ldrex	r3, [r3]
 8018f72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8018f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	461a      	mov	r2, r3
 8018f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8018f86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018f88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018f8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018f8c:	e841 2300 	strex	r3, r2, [r1]
 8018f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d1e6      	bne.n	8018f66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	2220      	movs	r2, #32
 8018f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018fa8:	2303      	movs	r3, #3
 8018faa:	e063      	b.n	8019074 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	f003 0304 	and.w	r3, r3, #4
 8018fb6:	2b04      	cmp	r3, #4
 8018fb8:	d149      	bne.n	801904e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018fba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8018fbe:	9300      	str	r3, [sp, #0]
 8018fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fc2:	2200      	movs	r2, #0
 8018fc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8018fc8:	6878      	ldr	r0, [r7, #4]
 8018fca:	f000 f857 	bl	801907c <UART_WaitOnFlagUntilTimeout>
 8018fce:	4603      	mov	r3, r0
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d03c      	beq.n	801904e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fdc:	e853 3f00 	ldrex	r3, [r3]
 8018fe0:	623b      	str	r3, [r7, #32]
   return(result);
 8018fe2:	6a3b      	ldr	r3, [r7, #32]
 8018fe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8018fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	461a      	mov	r2, r3
 8018ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ff2:	633b      	str	r3, [r7, #48]	@ 0x30
 8018ff4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018ff6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018ffa:	e841 2300 	strex	r3, r2, [r1]
 8018ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019002:	2b00      	cmp	r3, #0
 8019004:	d1e6      	bne.n	8018fd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	3308      	adds	r3, #8
 801900c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801900e:	693b      	ldr	r3, [r7, #16]
 8019010:	e853 3f00 	ldrex	r3, [r3]
 8019014:	60fb      	str	r3, [r7, #12]
   return(result);
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	f023 0301 	bic.w	r3, r3, #1
 801901c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	3308      	adds	r3, #8
 8019024:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019026:	61fa      	str	r2, [r7, #28]
 8019028:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801902a:	69b9      	ldr	r1, [r7, #24]
 801902c:	69fa      	ldr	r2, [r7, #28]
 801902e:	e841 2300 	strex	r3, r2, [r1]
 8019032:	617b      	str	r3, [r7, #20]
   return(result);
 8019034:	697b      	ldr	r3, [r7, #20]
 8019036:	2b00      	cmp	r3, #0
 8019038:	d1e5      	bne.n	8019006 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	2220      	movs	r2, #32
 801903e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	2200      	movs	r2, #0
 8019046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801904a:	2303      	movs	r3, #3
 801904c:	e012      	b.n	8019074 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	2220      	movs	r2, #32
 8019052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	2220      	movs	r2, #32
 801905a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	2200      	movs	r2, #0
 8019062:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	2200      	movs	r2, #0
 8019068:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	2200      	movs	r2, #0
 801906e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019072:	2300      	movs	r3, #0
}
 8019074:	4618      	mov	r0, r3
 8019076:	3758      	adds	r7, #88	@ 0x58
 8019078:	46bd      	mov	sp, r7
 801907a:	bd80      	pop	{r7, pc}

0801907c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801907c:	b580      	push	{r7, lr}
 801907e:	b084      	sub	sp, #16
 8019080:	af00      	add	r7, sp, #0
 8019082:	60f8      	str	r0, [r7, #12]
 8019084:	60b9      	str	r1, [r7, #8]
 8019086:	603b      	str	r3, [r7, #0]
 8019088:	4613      	mov	r3, r2
 801908a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801908c:	e04f      	b.n	801912e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801908e:	69bb      	ldr	r3, [r7, #24]
 8019090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019094:	d04b      	beq.n	801912e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019096:	f7ef fb9b 	bl	80087d0 <HAL_GetTick>
 801909a:	4602      	mov	r2, r0
 801909c:	683b      	ldr	r3, [r7, #0]
 801909e:	1ad3      	subs	r3, r2, r3
 80190a0:	69ba      	ldr	r2, [r7, #24]
 80190a2:	429a      	cmp	r2, r3
 80190a4:	d302      	bcc.n	80190ac <UART_WaitOnFlagUntilTimeout+0x30>
 80190a6:	69bb      	ldr	r3, [r7, #24]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d101      	bne.n	80190b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80190ac:	2303      	movs	r3, #3
 80190ae:	e04e      	b.n	801914e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	f003 0304 	and.w	r3, r3, #4
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d037      	beq.n	801912e <UART_WaitOnFlagUntilTimeout+0xb2>
 80190be:	68bb      	ldr	r3, [r7, #8]
 80190c0:	2b80      	cmp	r3, #128	@ 0x80
 80190c2:	d034      	beq.n	801912e <UART_WaitOnFlagUntilTimeout+0xb2>
 80190c4:	68bb      	ldr	r3, [r7, #8]
 80190c6:	2b40      	cmp	r3, #64	@ 0x40
 80190c8:	d031      	beq.n	801912e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	69db      	ldr	r3, [r3, #28]
 80190d0:	f003 0308 	and.w	r3, r3, #8
 80190d4:	2b08      	cmp	r3, #8
 80190d6:	d110      	bne.n	80190fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	2208      	movs	r2, #8
 80190de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80190e0:	68f8      	ldr	r0, [r7, #12]
 80190e2:	f000 f95b 	bl	801939c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	2208      	movs	r2, #8
 80190ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	2200      	movs	r2, #0
 80190f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80190f6:	2301      	movs	r3, #1
 80190f8:	e029      	b.n	801914e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	69db      	ldr	r3, [r3, #28]
 8019100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019108:	d111      	bne.n	801912e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019114:	68f8      	ldr	r0, [r7, #12]
 8019116:	f000 f941 	bl	801939c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	2220      	movs	r2, #32
 801911e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	2200      	movs	r2, #0
 8019126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801912a:	2303      	movs	r3, #3
 801912c:	e00f      	b.n	801914e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	69da      	ldr	r2, [r3, #28]
 8019134:	68bb      	ldr	r3, [r7, #8]
 8019136:	4013      	ands	r3, r2
 8019138:	68ba      	ldr	r2, [r7, #8]
 801913a:	429a      	cmp	r2, r3
 801913c:	bf0c      	ite	eq
 801913e:	2301      	moveq	r3, #1
 8019140:	2300      	movne	r3, #0
 8019142:	b2db      	uxtb	r3, r3
 8019144:	461a      	mov	r2, r3
 8019146:	79fb      	ldrb	r3, [r7, #7]
 8019148:	429a      	cmp	r2, r3
 801914a:	d0a0      	beq.n	801908e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801914c:	2300      	movs	r3, #0
}
 801914e:	4618      	mov	r0, r3
 8019150:	3710      	adds	r7, #16
 8019152:	46bd      	mov	sp, r7
 8019154:	bd80      	pop	{r7, pc}
	...

08019158 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019158:	b480      	push	{r7}
 801915a:	b0a3      	sub	sp, #140	@ 0x8c
 801915c:	af00      	add	r7, sp, #0
 801915e:	60f8      	str	r0, [r7, #12]
 8019160:	60b9      	str	r1, [r7, #8]
 8019162:	4613      	mov	r3, r2
 8019164:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	68ba      	ldr	r2, [r7, #8]
 801916a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	88fa      	ldrh	r2, [r7, #6]
 8019170:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	88fa      	ldrh	r2, [r7, #6]
 8019178:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	2200      	movs	r2, #0
 8019180:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	689b      	ldr	r3, [r3, #8]
 8019186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801918a:	d10e      	bne.n	80191aa <UART_Start_Receive_IT+0x52>
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	691b      	ldr	r3, [r3, #16]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d105      	bne.n	80191a0 <UART_Start_Receive_IT+0x48>
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801919a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801919e:	e02d      	b.n	80191fc <UART_Start_Receive_IT+0xa4>
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	22ff      	movs	r2, #255	@ 0xff
 80191a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80191a8:	e028      	b.n	80191fc <UART_Start_Receive_IT+0xa4>
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	689b      	ldr	r3, [r3, #8]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d10d      	bne.n	80191ce <UART_Start_Receive_IT+0x76>
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	691b      	ldr	r3, [r3, #16]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d104      	bne.n	80191c4 <UART_Start_Receive_IT+0x6c>
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	22ff      	movs	r2, #255	@ 0xff
 80191be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80191c2:	e01b      	b.n	80191fc <UART_Start_Receive_IT+0xa4>
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	227f      	movs	r2, #127	@ 0x7f
 80191c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80191cc:	e016      	b.n	80191fc <UART_Start_Receive_IT+0xa4>
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	689b      	ldr	r3, [r3, #8]
 80191d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80191d6:	d10d      	bne.n	80191f4 <UART_Start_Receive_IT+0x9c>
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	691b      	ldr	r3, [r3, #16]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d104      	bne.n	80191ea <UART_Start_Receive_IT+0x92>
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	227f      	movs	r2, #127	@ 0x7f
 80191e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80191e8:	e008      	b.n	80191fc <UART_Start_Receive_IT+0xa4>
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	223f      	movs	r2, #63	@ 0x3f
 80191ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80191f2:	e003      	b.n	80191fc <UART_Start_Receive_IT+0xa4>
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	2200      	movs	r2, #0
 80191f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	2200      	movs	r2, #0
 8019200:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	2222      	movs	r2, #34	@ 0x22
 8019208:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	3308      	adds	r3, #8
 8019212:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019214:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019216:	e853 3f00 	ldrex	r3, [r3]
 801921a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801921c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801921e:	f043 0301 	orr.w	r3, r3, #1
 8019222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	3308      	adds	r3, #8
 801922c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019230:	673a      	str	r2, [r7, #112]	@ 0x70
 8019232:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019234:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8019236:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019238:	e841 2300 	strex	r3, r2, [r1]
 801923c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 801923e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019240:	2b00      	cmp	r3, #0
 8019242:	d1e3      	bne.n	801920c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801924c:	d14f      	bne.n	80192ee <UART_Start_Receive_IT+0x196>
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019254:	88fa      	ldrh	r2, [r7, #6]
 8019256:	429a      	cmp	r2, r3
 8019258:	d349      	bcc.n	80192ee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	689b      	ldr	r3, [r3, #8]
 801925e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019262:	d107      	bne.n	8019274 <UART_Start_Receive_IT+0x11c>
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	691b      	ldr	r3, [r3, #16]
 8019268:	2b00      	cmp	r3, #0
 801926a:	d103      	bne.n	8019274 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	4a47      	ldr	r2, [pc, #284]	@ (801938c <UART_Start_Receive_IT+0x234>)
 8019270:	675a      	str	r2, [r3, #116]	@ 0x74
 8019272:	e002      	b.n	801927a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	4a46      	ldr	r2, [pc, #280]	@ (8019390 <UART_Start_Receive_IT+0x238>)
 8019278:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	691b      	ldr	r3, [r3, #16]
 801927e:	2b00      	cmp	r3, #0
 8019280:	d01a      	beq.n	80192b8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801928a:	e853 3f00 	ldrex	r3, [r3]
 801928e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019296:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	461a      	mov	r2, r3
 80192a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80192a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80192a6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80192aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80192ac:	e841 2300 	strex	r3, r2, [r1]
 80192b0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80192b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d1e4      	bne.n	8019282 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	3308      	adds	r3, #8
 80192be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192c2:	e853 3f00 	ldrex	r3, [r3]
 80192c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80192c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80192ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	3308      	adds	r3, #8
 80192d6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80192d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80192da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80192de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80192e0:	e841 2300 	strex	r3, r2, [r1]
 80192e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80192e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d1e5      	bne.n	80192b8 <UART_Start_Receive_IT+0x160>
 80192ec:	e046      	b.n	801937c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	689b      	ldr	r3, [r3, #8]
 80192f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80192f6:	d107      	bne.n	8019308 <UART_Start_Receive_IT+0x1b0>
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	691b      	ldr	r3, [r3, #16]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d103      	bne.n	8019308 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	4a24      	ldr	r2, [pc, #144]	@ (8019394 <UART_Start_Receive_IT+0x23c>)
 8019304:	675a      	str	r2, [r3, #116]	@ 0x74
 8019306:	e002      	b.n	801930e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	4a23      	ldr	r2, [pc, #140]	@ (8019398 <UART_Start_Receive_IT+0x240>)
 801930c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	691b      	ldr	r3, [r3, #16]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d019      	beq.n	801934a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801931c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801931e:	e853 3f00 	ldrex	r3, [r3]
 8019322:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019326:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801932a:	677b      	str	r3, [r7, #116]	@ 0x74
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	461a      	mov	r2, r3
 8019332:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019334:	637b      	str	r3, [r7, #52]	@ 0x34
 8019336:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019338:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801933a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801933c:	e841 2300 	strex	r3, r2, [r1]
 8019340:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8019342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019344:	2b00      	cmp	r3, #0
 8019346:	d1e6      	bne.n	8019316 <UART_Start_Receive_IT+0x1be>
 8019348:	e018      	b.n	801937c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019350:	697b      	ldr	r3, [r7, #20]
 8019352:	e853 3f00 	ldrex	r3, [r3]
 8019356:	613b      	str	r3, [r7, #16]
   return(result);
 8019358:	693b      	ldr	r3, [r7, #16]
 801935a:	f043 0320 	orr.w	r3, r3, #32
 801935e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	461a      	mov	r2, r3
 8019366:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019368:	623b      	str	r3, [r7, #32]
 801936a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801936c:	69f9      	ldr	r1, [r7, #28]
 801936e:	6a3a      	ldr	r2, [r7, #32]
 8019370:	e841 2300 	strex	r3, r2, [r1]
 8019374:	61bb      	str	r3, [r7, #24]
   return(result);
 8019376:	69bb      	ldr	r3, [r7, #24]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d1e6      	bne.n	801934a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801937c:	2300      	movs	r3, #0
}
 801937e:	4618      	mov	r0, r3
 8019380:	378c      	adds	r7, #140	@ 0x8c
 8019382:	46bd      	mov	sp, r7
 8019384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019388:	4770      	bx	lr
 801938a:	bf00      	nop
 801938c:	08019efd 	.word	0x08019efd
 8019390:	08019b99 	.word	0x08019b99
 8019394:	080199e1 	.word	0x080199e1
 8019398:	08019829 	.word	0x08019829

0801939c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801939c:	b480      	push	{r7}
 801939e:	b095      	sub	sp, #84	@ 0x54
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80193ac:	e853 3f00 	ldrex	r3, [r3]
 80193b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80193b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80193b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	461a      	mov	r2, r3
 80193c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80193c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80193c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80193c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80193ca:	e841 2300 	strex	r3, r2, [r1]
 80193ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80193d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d1e6      	bne.n	80193a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	3308      	adds	r3, #8
 80193dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193de:	6a3b      	ldr	r3, [r7, #32]
 80193e0:	e853 3f00 	ldrex	r3, [r3]
 80193e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80193e6:	69fa      	ldr	r2, [r7, #28]
 80193e8:	4b1e      	ldr	r3, [pc, #120]	@ (8019464 <UART_EndRxTransfer+0xc8>)
 80193ea:	4013      	ands	r3, r2
 80193ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	3308      	adds	r3, #8
 80193f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80193f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80193f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80193fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80193fe:	e841 2300 	strex	r3, r2, [r1]
 8019402:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019406:	2b00      	cmp	r3, #0
 8019408:	d1e5      	bne.n	80193d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801940e:	2b01      	cmp	r3, #1
 8019410:	d118      	bne.n	8019444 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	e853 3f00 	ldrex	r3, [r3]
 801941e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019420:	68bb      	ldr	r3, [r7, #8]
 8019422:	f023 0310 	bic.w	r3, r3, #16
 8019426:	647b      	str	r3, [r7, #68]	@ 0x44
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	461a      	mov	r2, r3
 801942e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019430:	61bb      	str	r3, [r7, #24]
 8019432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019434:	6979      	ldr	r1, [r7, #20]
 8019436:	69ba      	ldr	r2, [r7, #24]
 8019438:	e841 2300 	strex	r3, r2, [r1]
 801943c:	613b      	str	r3, [r7, #16]
   return(result);
 801943e:	693b      	ldr	r3, [r7, #16]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d1e6      	bne.n	8019412 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	2220      	movs	r2, #32
 8019448:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	2200      	movs	r2, #0
 8019450:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	2200      	movs	r2, #0
 8019456:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019458:	bf00      	nop
 801945a:	3754      	adds	r7, #84	@ 0x54
 801945c:	46bd      	mov	sp, r7
 801945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019462:	4770      	bx	lr
 8019464:	effffffe 	.word	0xeffffffe

08019468 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b084      	sub	sp, #16
 801946c:	af00      	add	r7, sp, #0
 801946e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019474:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	2200      	movs	r2, #0
 801947a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801947e:	68f8      	ldr	r0, [r7, #12]
 8019480:	f7fe fe2e 	bl	80180e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019484:	bf00      	nop
 8019486:	3710      	adds	r7, #16
 8019488:	46bd      	mov	sp, r7
 801948a:	bd80      	pop	{r7, pc}

0801948c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801948c:	b480      	push	{r7}
 801948e:	b08f      	sub	sp, #60	@ 0x3c
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801949a:	2b21      	cmp	r3, #33	@ 0x21
 801949c:	d14c      	bne.n	8019538 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80194a4:	b29b      	uxth	r3, r3
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d132      	bne.n	8019510 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194b0:	6a3b      	ldr	r3, [r7, #32]
 80194b2:	e853 3f00 	ldrex	r3, [r3]
 80194b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80194b8:	69fb      	ldr	r3, [r7, #28]
 80194ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80194be:	637b      	str	r3, [r7, #52]	@ 0x34
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	461a      	mov	r2, r3
 80194c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80194ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80194ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80194d0:	e841 2300 	strex	r3, r2, [r1]
 80194d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80194d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d1e6      	bne.n	80194aa <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	e853 3f00 	ldrex	r3, [r3]
 80194e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80194ea:	68bb      	ldr	r3, [r7, #8]
 80194ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80194f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	461a      	mov	r2, r3
 80194f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194fa:	61bb      	str	r3, [r7, #24]
 80194fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194fe:	6979      	ldr	r1, [r7, #20]
 8019500:	69ba      	ldr	r2, [r7, #24]
 8019502:	e841 2300 	strex	r3, r2, [r1]
 8019506:	613b      	str	r3, [r7, #16]
   return(result);
 8019508:	693b      	ldr	r3, [r7, #16]
 801950a:	2b00      	cmp	r3, #0
 801950c:	d1e6      	bne.n	80194dc <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801950e:	e013      	b.n	8019538 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019514:	781a      	ldrb	r2, [r3, #0]
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019520:	1c5a      	adds	r2, r3, #1
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801952c:	b29b      	uxth	r3, r3
 801952e:	3b01      	subs	r3, #1
 8019530:	b29a      	uxth	r2, r3
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019538:	bf00      	nop
 801953a:	373c      	adds	r7, #60	@ 0x3c
 801953c:	46bd      	mov	sp, r7
 801953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019542:	4770      	bx	lr

08019544 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019544:	b480      	push	{r7}
 8019546:	b091      	sub	sp, #68	@ 0x44
 8019548:	af00      	add	r7, sp, #0
 801954a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019552:	2b21      	cmp	r3, #33	@ 0x21
 8019554:	d151      	bne.n	80195fa <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801955c:	b29b      	uxth	r3, r3
 801955e:	2b00      	cmp	r3, #0
 8019560:	d132      	bne.n	80195c8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801956a:	e853 3f00 	ldrex	r3, [r3]
 801956e:	623b      	str	r3, [r7, #32]
   return(result);
 8019570:	6a3b      	ldr	r3, [r7, #32]
 8019572:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019576:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	461a      	mov	r2, r3
 801957e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019580:	633b      	str	r3, [r7, #48]	@ 0x30
 8019582:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019588:	e841 2300 	strex	r3, r2, [r1]
 801958c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801958e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019590:	2b00      	cmp	r3, #0
 8019592:	d1e6      	bne.n	8019562 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801959a:	693b      	ldr	r3, [r7, #16]
 801959c:	e853 3f00 	ldrex	r3, [r3]
 80195a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80195a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	461a      	mov	r2, r3
 80195b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80195b2:	61fb      	str	r3, [r7, #28]
 80195b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195b6:	69b9      	ldr	r1, [r7, #24]
 80195b8:	69fa      	ldr	r2, [r7, #28]
 80195ba:	e841 2300 	strex	r3, r2, [r1]
 80195be:	617b      	str	r3, [r7, #20]
   return(result);
 80195c0:	697b      	ldr	r3, [r7, #20]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d1e6      	bne.n	8019594 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80195c6:	e018      	b.n	80195fa <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80195cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80195ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195d0:	881b      	ldrh	r3, [r3, #0]
 80195d2:	461a      	mov	r2, r3
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80195dc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80195e2:	1c9a      	adds	r2, r3, #2
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80195ee:	b29b      	uxth	r3, r3
 80195f0:	3b01      	subs	r3, #1
 80195f2:	b29a      	uxth	r2, r3
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80195fa:	bf00      	nop
 80195fc:	3744      	adds	r7, #68	@ 0x44
 80195fe:	46bd      	mov	sp, r7
 8019600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019604:	4770      	bx	lr

08019606 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019606:	b480      	push	{r7}
 8019608:	b091      	sub	sp, #68	@ 0x44
 801960a:	af00      	add	r7, sp, #0
 801960c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019614:	2b21      	cmp	r3, #33	@ 0x21
 8019616:	d160      	bne.n	80196da <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801961e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019620:	e057      	b.n	80196d2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019628:	b29b      	uxth	r3, r3
 801962a:	2b00      	cmp	r3, #0
 801962c:	d133      	bne.n	8019696 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	3308      	adds	r3, #8
 8019634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019638:	e853 3f00 	ldrex	r3, [r3]
 801963c:	623b      	str	r3, [r7, #32]
   return(result);
 801963e:	6a3b      	ldr	r3, [r7, #32]
 8019640:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019644:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	3308      	adds	r3, #8
 801964c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801964e:	633a      	str	r2, [r7, #48]	@ 0x30
 8019650:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019656:	e841 2300 	strex	r3, r2, [r1]
 801965a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801965c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801965e:	2b00      	cmp	r3, #0
 8019660:	d1e5      	bne.n	801962e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019668:	693b      	ldr	r3, [r7, #16]
 801966a:	e853 3f00 	ldrex	r3, [r3]
 801966e:	60fb      	str	r3, [r7, #12]
   return(result);
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019676:	637b      	str	r3, [r7, #52]	@ 0x34
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	461a      	mov	r2, r3
 801967e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019680:	61fb      	str	r3, [r7, #28]
 8019682:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019684:	69b9      	ldr	r1, [r7, #24]
 8019686:	69fa      	ldr	r2, [r7, #28]
 8019688:	e841 2300 	strex	r3, r2, [r1]
 801968c:	617b      	str	r3, [r7, #20]
   return(result);
 801968e:	697b      	ldr	r3, [r7, #20]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d1e6      	bne.n	8019662 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019694:	e021      	b.n	80196da <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	69db      	ldr	r3, [r3, #28]
 801969c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d013      	beq.n	80196cc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80196a8:	781a      	ldrb	r2, [r3, #0]
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80196b4:	1c5a      	adds	r2, r3, #1
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80196c0:	b29b      	uxth	r3, r3
 80196c2:	3b01      	subs	r3, #1
 80196c4:	b29a      	uxth	r2, r3
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80196cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80196ce:	3b01      	subs	r3, #1
 80196d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80196d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d1a4      	bne.n	8019622 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80196d8:	e7ff      	b.n	80196da <UART_TxISR_8BIT_FIFOEN+0xd4>
 80196da:	bf00      	nop
 80196dc:	3744      	adds	r7, #68	@ 0x44
 80196de:	46bd      	mov	sp, r7
 80196e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196e4:	4770      	bx	lr

080196e6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80196e6:	b480      	push	{r7}
 80196e8:	b091      	sub	sp, #68	@ 0x44
 80196ea:	af00      	add	r7, sp, #0
 80196ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80196f4:	2b21      	cmp	r3, #33	@ 0x21
 80196f6:	d165      	bne.n	80197c4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80196fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019700:	e05c      	b.n	80197bc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019708:	b29b      	uxth	r3, r3
 801970a:	2b00      	cmp	r3, #0
 801970c:	d133      	bne.n	8019776 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	3308      	adds	r3, #8
 8019714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019716:	6a3b      	ldr	r3, [r7, #32]
 8019718:	e853 3f00 	ldrex	r3, [r3]
 801971c:	61fb      	str	r3, [r7, #28]
   return(result);
 801971e:	69fb      	ldr	r3, [r7, #28]
 8019720:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019724:	637b      	str	r3, [r7, #52]	@ 0x34
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	3308      	adds	r3, #8
 801972c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801972e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019730:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019736:	e841 2300 	strex	r3, r2, [r1]
 801973a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801973c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801973e:	2b00      	cmp	r3, #0
 8019740:	d1e5      	bne.n	801970e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	e853 3f00 	ldrex	r3, [r3]
 801974e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019750:	68bb      	ldr	r3, [r7, #8]
 8019752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019756:	633b      	str	r3, [r7, #48]	@ 0x30
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	461a      	mov	r2, r3
 801975e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019760:	61bb      	str	r3, [r7, #24]
 8019762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019764:	6979      	ldr	r1, [r7, #20]
 8019766:	69ba      	ldr	r2, [r7, #24]
 8019768:	e841 2300 	strex	r3, r2, [r1]
 801976c:	613b      	str	r3, [r7, #16]
   return(result);
 801976e:	693b      	ldr	r3, [r7, #16]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d1e6      	bne.n	8019742 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019774:	e026      	b.n	80197c4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	69db      	ldr	r3, [r3, #28]
 801977c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019780:	2b00      	cmp	r3, #0
 8019782:	d018      	beq.n	80197b6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019788:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801978a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801978c:	881b      	ldrh	r3, [r3, #0]
 801978e:	461a      	mov	r2, r3
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019798:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801979e:	1c9a      	adds	r2, r3, #2
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80197aa:	b29b      	uxth	r3, r3
 80197ac:	3b01      	subs	r3, #1
 80197ae:	b29a      	uxth	r2, r3
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80197b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80197b8:	3b01      	subs	r3, #1
 80197ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80197bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d19f      	bne.n	8019702 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80197c2:	e7ff      	b.n	80197c4 <UART_TxISR_16BIT_FIFOEN+0xde>
 80197c4:	bf00      	nop
 80197c6:	3744      	adds	r7, #68	@ 0x44
 80197c8:	46bd      	mov	sp, r7
 80197ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ce:	4770      	bx	lr

080197d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	b088      	sub	sp, #32
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	e853 3f00 	ldrex	r3, [r3]
 80197e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80197e6:	68bb      	ldr	r3, [r7, #8]
 80197e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80197ec:	61fb      	str	r3, [r7, #28]
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	461a      	mov	r2, r3
 80197f4:	69fb      	ldr	r3, [r7, #28]
 80197f6:	61bb      	str	r3, [r7, #24]
 80197f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80197fa:	6979      	ldr	r1, [r7, #20]
 80197fc:	69ba      	ldr	r2, [r7, #24]
 80197fe:	e841 2300 	strex	r3, r2, [r1]
 8019802:	613b      	str	r3, [r7, #16]
   return(result);
 8019804:	693b      	ldr	r3, [r7, #16]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d1e6      	bne.n	80197d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	2220      	movs	r2, #32
 801980e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	2200      	movs	r2, #0
 8019816:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8019818:	6878      	ldr	r0, [r7, #4]
 801981a:	f7fe fc57 	bl	80180cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801981e:	bf00      	nop
 8019820:	3720      	adds	r7, #32
 8019822:	46bd      	mov	sp, r7
 8019824:	bd80      	pop	{r7, pc}
	...

08019828 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b09c      	sub	sp, #112	@ 0x70
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019836:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019840:	2b22      	cmp	r3, #34	@ 0x22
 8019842:	f040 80be 	bne.w	80199c2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801984c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019850:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8019854:	b2d9      	uxtb	r1, r3
 8019856:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801985a:	b2da      	uxtb	r2, r3
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019860:	400a      	ands	r2, r1
 8019862:	b2d2      	uxtb	r2, r2
 8019864:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801986a:	1c5a      	adds	r2, r3, #1
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019876:	b29b      	uxth	r3, r3
 8019878:	3b01      	subs	r3, #1
 801987a:	b29a      	uxth	r2, r3
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019888:	b29b      	uxth	r3, r3
 801988a:	2b00      	cmp	r3, #0
 801988c:	f040 80a1 	bne.w	80199d2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019898:	e853 3f00 	ldrex	r3, [r3]
 801989c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801989e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80198a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80198a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	461a      	mov	r2, r3
 80198ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80198ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80198b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80198b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80198b6:	e841 2300 	strex	r3, r2, [r1]
 80198ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80198bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d1e6      	bne.n	8019890 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	3308      	adds	r3, #8
 80198c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198cc:	e853 3f00 	ldrex	r3, [r3]
 80198d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80198d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80198d4:	f023 0301 	bic.w	r3, r3, #1
 80198d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	3308      	adds	r3, #8
 80198e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80198e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80198e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80198e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80198ea:	e841 2300 	strex	r3, r2, [r1]
 80198ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80198f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d1e5      	bne.n	80198c2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	2220      	movs	r2, #32
 80198fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	2200      	movs	r2, #0
 8019902:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	2200      	movs	r2, #0
 8019908:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	4a33      	ldr	r2, [pc, #204]	@ (80199dc <UART_RxISR_8BIT+0x1b4>)
 8019910:	4293      	cmp	r3, r2
 8019912:	d01f      	beq.n	8019954 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	685b      	ldr	r3, [r3, #4]
 801991a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801991e:	2b00      	cmp	r3, #0
 8019920:	d018      	beq.n	8019954 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801992a:	e853 3f00 	ldrex	r3, [r3]
 801992e:	623b      	str	r3, [r7, #32]
   return(result);
 8019930:	6a3b      	ldr	r3, [r7, #32]
 8019932:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019936:	663b      	str	r3, [r7, #96]	@ 0x60
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	461a      	mov	r2, r3
 801993e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019940:	633b      	str	r3, [r7, #48]	@ 0x30
 8019942:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019944:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019948:	e841 2300 	strex	r3, r2, [r1]
 801994c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801994e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019950:	2b00      	cmp	r3, #0
 8019952:	d1e6      	bne.n	8019922 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019958:	2b01      	cmp	r3, #1
 801995a:	d12e      	bne.n	80199ba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	2200      	movs	r2, #0
 8019960:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019968:	693b      	ldr	r3, [r7, #16]
 801996a:	e853 3f00 	ldrex	r3, [r3]
 801996e:	60fb      	str	r3, [r7, #12]
   return(result);
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	f023 0310 	bic.w	r3, r3, #16
 8019976:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	461a      	mov	r2, r3
 801997e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019980:	61fb      	str	r3, [r7, #28]
 8019982:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019984:	69b9      	ldr	r1, [r7, #24]
 8019986:	69fa      	ldr	r2, [r7, #28]
 8019988:	e841 2300 	strex	r3, r2, [r1]
 801998c:	617b      	str	r3, [r7, #20]
   return(result);
 801998e:	697b      	ldr	r3, [r7, #20]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d1e6      	bne.n	8019962 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	69db      	ldr	r3, [r3, #28]
 801999a:	f003 0310 	and.w	r3, r3, #16
 801999e:	2b10      	cmp	r3, #16
 80199a0:	d103      	bne.n	80199aa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	2210      	movs	r2, #16
 80199a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80199b0:	4619      	mov	r1, r3
 80199b2:	6878      	ldr	r0, [r7, #4]
 80199b4:	f7fe fb9e 	bl	80180f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80199b8:	e00b      	b.n	80199d2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80199ba:	6878      	ldr	r0, [r7, #4]
 80199bc:	f7ec fa2a 	bl	8005e14 <HAL_UART_RxCpltCallback>
}
 80199c0:	e007      	b.n	80199d2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	681b      	ldr	r3, [r3, #0]
 80199c6:	699a      	ldr	r2, [r3, #24]
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	f042 0208 	orr.w	r2, r2, #8
 80199d0:	619a      	str	r2, [r3, #24]
}
 80199d2:	bf00      	nop
 80199d4:	3770      	adds	r7, #112	@ 0x70
 80199d6:	46bd      	mov	sp, r7
 80199d8:	bd80      	pop	{r7, pc}
 80199da:	bf00      	nop
 80199dc:	58000c00 	.word	0x58000c00

080199e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b09c      	sub	sp, #112	@ 0x70
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80199ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80199f8:	2b22      	cmp	r3, #34	@ 0x22
 80199fa:	f040 80be 	bne.w	8019b7a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019a04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8019a0e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8019a12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019a16:	4013      	ands	r3, r2
 8019a18:	b29a      	uxth	r2, r3
 8019a1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019a1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019a22:	1c9a      	adds	r2, r3, #2
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019a2e:	b29b      	uxth	r3, r3
 8019a30:	3b01      	subs	r3, #1
 8019a32:	b29a      	uxth	r2, r3
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019a40:	b29b      	uxth	r3, r3
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	f040 80a1 	bne.w	8019b8a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019a50:	e853 3f00 	ldrex	r3, [r3]
 8019a54:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8019a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019a58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019a5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	461a      	mov	r2, r3
 8019a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019a66:	657b      	str	r3, [r7, #84]	@ 0x54
 8019a68:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019a6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019a6e:	e841 2300 	strex	r3, r2, [r1]
 8019a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d1e6      	bne.n	8019a48 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	3308      	adds	r3, #8
 8019a80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a84:	e853 3f00 	ldrex	r3, [r3]
 8019a88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a8c:	f023 0301 	bic.w	r3, r3, #1
 8019a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	3308      	adds	r3, #8
 8019a98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8019a9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8019a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019aa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019aa2:	e841 2300 	strex	r3, r2, [r1]
 8019aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d1e5      	bne.n	8019a7a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	2220      	movs	r2, #32
 8019ab2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	2200      	movs	r2, #0
 8019aba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	2200      	movs	r2, #0
 8019ac0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	4a33      	ldr	r2, [pc, #204]	@ (8019b94 <UART_RxISR_16BIT+0x1b4>)
 8019ac8:	4293      	cmp	r3, r2
 8019aca:	d01f      	beq.n	8019b0c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	685b      	ldr	r3, [r3, #4]
 8019ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d018      	beq.n	8019b0c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ae0:	6a3b      	ldr	r3, [r7, #32]
 8019ae2:	e853 3f00 	ldrex	r3, [r3]
 8019ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8019ae8:	69fb      	ldr	r3, [r7, #28]
 8019aea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	461a      	mov	r2, r3
 8019af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019afa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019afc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019afe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019b00:	e841 2300 	strex	r3, r2, [r1]
 8019b04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d1e6      	bne.n	8019ada <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b10:	2b01      	cmp	r3, #1
 8019b12:	d12e      	bne.n	8019b72 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	2200      	movs	r2, #0
 8019b18:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	e853 3f00 	ldrex	r3, [r3]
 8019b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8019b28:	68bb      	ldr	r3, [r7, #8]
 8019b2a:	f023 0310 	bic.w	r3, r3, #16
 8019b2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	461a      	mov	r2, r3
 8019b36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019b38:	61bb      	str	r3, [r7, #24]
 8019b3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b3c:	6979      	ldr	r1, [r7, #20]
 8019b3e:	69ba      	ldr	r2, [r7, #24]
 8019b40:	e841 2300 	strex	r3, r2, [r1]
 8019b44:	613b      	str	r3, [r7, #16]
   return(result);
 8019b46:	693b      	ldr	r3, [r7, #16]
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d1e6      	bne.n	8019b1a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	69db      	ldr	r3, [r3, #28]
 8019b52:	f003 0310 	and.w	r3, r3, #16
 8019b56:	2b10      	cmp	r3, #16
 8019b58:	d103      	bne.n	8019b62 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	2210      	movs	r2, #16
 8019b60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019b68:	4619      	mov	r1, r3
 8019b6a:	6878      	ldr	r0, [r7, #4]
 8019b6c:	f7fe fac2 	bl	80180f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019b70:	e00b      	b.n	8019b8a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8019b72:	6878      	ldr	r0, [r7, #4]
 8019b74:	f7ec f94e 	bl	8005e14 <HAL_UART_RxCpltCallback>
}
 8019b78:	e007      	b.n	8019b8a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	699a      	ldr	r2, [r3, #24]
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	f042 0208 	orr.w	r2, r2, #8
 8019b88:	619a      	str	r2, [r3, #24]
}
 8019b8a:	bf00      	nop
 8019b8c:	3770      	adds	r7, #112	@ 0x70
 8019b8e:	46bd      	mov	sp, r7
 8019b90:	bd80      	pop	{r7, pc}
 8019b92:	bf00      	nop
 8019b94:	58000c00 	.word	0x58000c00

08019b98 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b0ac      	sub	sp, #176	@ 0xb0
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019ba6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	69db      	ldr	r3, [r3, #28]
 8019bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	689b      	ldr	r3, [r3, #8]
 8019bc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019bce:	2b22      	cmp	r3, #34	@ 0x22
 8019bd0:	f040 8181 	bne.w	8019ed6 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019bda:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019bde:	e124      	b.n	8019e2a <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019be6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019bea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8019bee:	b2d9      	uxtb	r1, r3
 8019bf0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8019bf4:	b2da      	uxtb	r2, r3
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019bfa:	400a      	ands	r2, r1
 8019bfc:	b2d2      	uxtb	r2, r2
 8019bfe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019c04:	1c5a      	adds	r2, r3, #1
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019c10:	b29b      	uxth	r3, r3
 8019c12:	3b01      	subs	r3, #1
 8019c14:	b29a      	uxth	r2, r3
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	69db      	ldr	r3, [r3, #28]
 8019c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019c2a:	f003 0307 	and.w	r3, r3, #7
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d053      	beq.n	8019cda <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019c36:	f003 0301 	and.w	r3, r3, #1
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d011      	beq.n	8019c62 <UART_RxISR_8BIT_FIFOEN+0xca>
 8019c3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8019c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d00b      	beq.n	8019c62 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	2201      	movs	r2, #1
 8019c50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019c58:	f043 0201 	orr.w	r2, r3, #1
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019c66:	f003 0302 	and.w	r3, r3, #2
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d011      	beq.n	8019c92 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8019c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019c72:	f003 0301 	and.w	r3, r3, #1
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d00b      	beq.n	8019c92 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	2202      	movs	r2, #2
 8019c80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019c88:	f043 0204 	orr.w	r2, r3, #4
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019c96:	f003 0304 	and.w	r3, r3, #4
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d011      	beq.n	8019cc2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8019c9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019ca2:	f003 0301 	and.w	r3, r3, #1
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d00b      	beq.n	8019cc2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	2204      	movs	r2, #4
 8019cb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019cb8:	f043 0202 	orr.w	r2, r3, #2
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d006      	beq.n	8019cda <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019ccc:	6878      	ldr	r0, [r7, #4]
 8019cce:	f7fe fa07 	bl	80180e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	2200      	movs	r2, #0
 8019cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019ce0:	b29b      	uxth	r3, r3
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	f040 80a1 	bne.w	8019e2a <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019cf0:	e853 3f00 	ldrex	r3, [r3]
 8019cf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8019cf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	461a      	mov	r2, r3
 8019d06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019d0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019d0c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d0e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8019d10:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019d12:	e841 2300 	strex	r3, r2, [r1]
 8019d16:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8019d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d1e4      	bne.n	8019ce8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	3308      	adds	r3, #8
 8019d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019d28:	e853 3f00 	ldrex	r3, [r3]
 8019d2c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8019d2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019d30:	4b6f      	ldr	r3, [pc, #444]	@ (8019ef0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8019d32:	4013      	ands	r3, r2
 8019d34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	3308      	adds	r3, #8
 8019d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8019d42:	66ba      	str	r2, [r7, #104]	@ 0x68
 8019d44:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d46:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8019d48:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8019d4a:	e841 2300 	strex	r3, r2, [r1]
 8019d4e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019d50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d1e3      	bne.n	8019d1e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	2220      	movs	r2, #32
 8019d5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	2200      	movs	r2, #0
 8019d62:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	2200      	movs	r2, #0
 8019d68:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	4a61      	ldr	r2, [pc, #388]	@ (8019ef4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8019d70:	4293      	cmp	r3, r2
 8019d72:	d021      	beq.n	8019db8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	685b      	ldr	r3, [r3, #4]
 8019d7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d01a      	beq.n	8019db8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d8a:	e853 3f00 	ldrex	r3, [r3]
 8019d8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8019d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019d96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	461a      	mov	r2, r3
 8019da0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8019da4:	657b      	str	r3, [r7, #84]	@ 0x54
 8019da6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019da8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019daa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019dac:	e841 2300 	strex	r3, r2, [r1]
 8019db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019db2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d1e4      	bne.n	8019d82 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019dbc:	2b01      	cmp	r3, #1
 8019dbe:	d130      	bne.n	8019e22 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019dce:	e853 3f00 	ldrex	r3, [r3]
 8019dd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dd6:	f023 0310 	bic.w	r3, r3, #16
 8019dda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	461a      	mov	r2, r3
 8019de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019de8:	643b      	str	r3, [r7, #64]	@ 0x40
 8019dea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019dee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019df0:	e841 2300 	strex	r3, r2, [r1]
 8019df4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d1e4      	bne.n	8019dc6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	69db      	ldr	r3, [r3, #28]
 8019e02:	f003 0310 	and.w	r3, r3, #16
 8019e06:	2b10      	cmp	r3, #16
 8019e08:	d103      	bne.n	8019e12 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	2210      	movs	r2, #16
 8019e10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019e18:	4619      	mov	r1, r3
 8019e1a:	6878      	ldr	r0, [r7, #4]
 8019e1c:	f7fe f96a 	bl	80180f4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8019e20:	e00e      	b.n	8019e40 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8019e22:	6878      	ldr	r0, [r7, #4]
 8019e24:	f7eb fff6 	bl	8005e14 <HAL_UART_RxCpltCallback>
        break;
 8019e28:	e00a      	b.n	8019e40 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019e2a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d006      	beq.n	8019e40 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8019e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019e36:	f003 0320 	and.w	r3, r3, #32
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	f47f aed0 	bne.w	8019be0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019e46:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8019e4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d049      	beq.n	8019ee6 <UART_RxISR_8BIT_FIFOEN+0x34e>
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019e58:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8019e5c:	429a      	cmp	r2, r3
 8019e5e:	d242      	bcs.n	8019ee6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	3308      	adds	r3, #8
 8019e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e68:	6a3b      	ldr	r3, [r7, #32]
 8019e6a:	e853 3f00 	ldrex	r3, [r3]
 8019e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8019e70:	69fb      	ldr	r3, [r7, #28]
 8019e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8019e76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	3308      	adds	r3, #8
 8019e80:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019e84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019e8c:	e841 2300 	strex	r3, r2, [r1]
 8019e90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d1e3      	bne.n	8019e60 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	4a17      	ldr	r2, [pc, #92]	@ (8019ef8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8019e9c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	e853 3f00 	ldrex	r3, [r3]
 8019eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8019eac:	68bb      	ldr	r3, [r7, #8]
 8019eae:	f043 0320 	orr.w	r3, r3, #32
 8019eb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	461a      	mov	r2, r3
 8019ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019ec0:	61bb      	str	r3, [r7, #24]
 8019ec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ec4:	6979      	ldr	r1, [r7, #20]
 8019ec6:	69ba      	ldr	r2, [r7, #24]
 8019ec8:	e841 2300 	strex	r3, r2, [r1]
 8019ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8019ece:	693b      	ldr	r3, [r7, #16]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d1e4      	bne.n	8019e9e <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019ed4:	e007      	b.n	8019ee6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	699a      	ldr	r2, [r3, #24]
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	f042 0208 	orr.w	r2, r2, #8
 8019ee4:	619a      	str	r2, [r3, #24]
}
 8019ee6:	bf00      	nop
 8019ee8:	37b0      	adds	r7, #176	@ 0xb0
 8019eea:	46bd      	mov	sp, r7
 8019eec:	bd80      	pop	{r7, pc}
 8019eee:	bf00      	nop
 8019ef0:	effffffe 	.word	0xeffffffe
 8019ef4:	58000c00 	.word	0x58000c00
 8019ef8:	08019829 	.word	0x08019829

08019efc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019efc:	b580      	push	{r7, lr}
 8019efe:	b0ae      	sub	sp, #184	@ 0xb8
 8019f00:	af00      	add	r7, sp, #0
 8019f02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019f0a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	69db      	ldr	r3, [r3, #28]
 8019f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	689b      	ldr	r3, [r3, #8]
 8019f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019f32:	2b22      	cmp	r3, #34	@ 0x22
 8019f34:	f040 8185 	bne.w	801a242 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019f3e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019f42:	e128      	b.n	801a196 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f4a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019f52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8019f56:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8019f5a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8019f5e:	4013      	ands	r3, r2
 8019f60:	b29a      	uxth	r2, r3
 8019f62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019f66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019f6c:	1c9a      	adds	r2, r3, #2
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019f78:	b29b      	uxth	r3, r3
 8019f7a:	3b01      	subs	r3, #1
 8019f7c:	b29a      	uxth	r2, r3
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	69db      	ldr	r3, [r3, #28]
 8019f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019f92:	f003 0307 	and.w	r3, r3, #7
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d053      	beq.n	801a042 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019f9e:	f003 0301 	and.w	r3, r3, #1
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d011      	beq.n	8019fca <UART_RxISR_16BIT_FIFOEN+0xce>
 8019fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d00b      	beq.n	8019fca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	2201      	movs	r2, #1
 8019fb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019fc0:	f043 0201 	orr.w	r2, r3, #1
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019fce:	f003 0302 	and.w	r3, r3, #2
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	d011      	beq.n	8019ffa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8019fd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8019fda:	f003 0301 	and.w	r3, r3, #1
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d00b      	beq.n	8019ffa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	2202      	movs	r2, #2
 8019fe8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019ff0:	f043 0204 	orr.w	r2, r3, #4
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019ffe:	f003 0304 	and.w	r3, r3, #4
 801a002:	2b00      	cmp	r3, #0
 801a004:	d011      	beq.n	801a02a <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a00a:	f003 0301 	and.w	r3, r3, #1
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d00b      	beq.n	801a02a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	2204      	movs	r2, #4
 801a018:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a020:	f043 0202 	orr.w	r2, r3, #2
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a030:	2b00      	cmp	r3, #0
 801a032:	d006      	beq.n	801a042 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a034:	6878      	ldr	r0, [r7, #4]
 801a036:	f7fe f853 	bl	80180e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	2200      	movs	r2, #0
 801a03e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a048:	b29b      	uxth	r3, r3
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	f040 80a3 	bne.w	801a196 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a058:	e853 3f00 	ldrex	r3, [r3]
 801a05c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a05e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a064:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	461a      	mov	r2, r3
 801a06e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a072:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a076:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a078:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a07a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a07e:	e841 2300 	strex	r3, r2, [r1]
 801a082:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a086:	2b00      	cmp	r3, #0
 801a088:	d1e2      	bne.n	801a050 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	3308      	adds	r3, #8
 801a090:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a094:	e853 3f00 	ldrex	r3, [r3]
 801a098:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a09a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a09c:	4b6f      	ldr	r3, [pc, #444]	@ (801a25c <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a09e:	4013      	ands	r3, r2
 801a0a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	3308      	adds	r3, #8
 801a0aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a0ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a0b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a0b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a0b6:	e841 2300 	strex	r3, r2, [r1]
 801a0ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a0bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d1e3      	bne.n	801a08a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	2220      	movs	r2, #32
 801a0c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	2200      	movs	r2, #0
 801a0d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	4a61      	ldr	r2, [pc, #388]	@ (801a260 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a0dc:	4293      	cmp	r3, r2
 801a0de:	d021      	beq.n	801a124 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	685b      	ldr	r3, [r3, #4]
 801a0e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d01a      	beq.n	801a124 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a0f6:	e853 3f00 	ldrex	r3, [r3]
 801a0fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a0fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a0fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a102:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	461a      	mov	r2, r3
 801a10c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a110:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a112:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a114:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a116:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a118:	e841 2300 	strex	r3, r2, [r1]
 801a11c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a11e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a120:	2b00      	cmp	r3, #0
 801a122:	d1e4      	bne.n	801a0ee <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a128:	2b01      	cmp	r3, #1
 801a12a:	d130      	bne.n	801a18e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	2200      	movs	r2, #0
 801a130:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a13a:	e853 3f00 	ldrex	r3, [r3]
 801a13e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a142:	f023 0310 	bic.w	r3, r3, #16
 801a146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	461a      	mov	r2, r3
 801a150:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a154:	647b      	str	r3, [r7, #68]	@ 0x44
 801a156:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a158:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a15a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a15c:	e841 2300 	strex	r3, r2, [r1]
 801a160:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a164:	2b00      	cmp	r3, #0
 801a166:	d1e4      	bne.n	801a132 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	69db      	ldr	r3, [r3, #28]
 801a16e:	f003 0310 	and.w	r3, r3, #16
 801a172:	2b10      	cmp	r3, #16
 801a174:	d103      	bne.n	801a17e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	2210      	movs	r2, #16
 801a17c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a184:	4619      	mov	r1, r3
 801a186:	6878      	ldr	r0, [r7, #4]
 801a188:	f7fd ffb4 	bl	80180f4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a18c:	e00e      	b.n	801a1ac <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801a18e:	6878      	ldr	r0, [r7, #4]
 801a190:	f7eb fe40 	bl	8005e14 <HAL_UART_RxCpltCallback>
        break;
 801a194:	e00a      	b.n	801a1ac <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a196:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d006      	beq.n	801a1ac <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801a19e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a1a2:	f003 0320 	and.w	r3, r3, #32
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	f47f aecc 	bne.w	8019f44 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a1b2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a1b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d049      	beq.n	801a252 <UART_RxISR_16BIT_FIFOEN+0x356>
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a1c4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801a1c8:	429a      	cmp	r2, r3
 801a1ca:	d242      	bcs.n	801a252 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	3308      	adds	r3, #8
 801a1d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1d6:	e853 3f00 	ldrex	r3, [r3]
 801a1da:	623b      	str	r3, [r7, #32]
   return(result);
 801a1dc:	6a3b      	ldr	r3, [r7, #32]
 801a1de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a1e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	3308      	adds	r3, #8
 801a1ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a1f0:	633a      	str	r2, [r7, #48]	@ 0x30
 801a1f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a1f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a1f8:	e841 2300 	strex	r3, r2, [r1]
 801a1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a200:	2b00      	cmp	r3, #0
 801a202:	d1e3      	bne.n	801a1cc <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	4a17      	ldr	r2, [pc, #92]	@ (801a264 <UART_RxISR_16BIT_FIFOEN+0x368>)
 801a208:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a210:	693b      	ldr	r3, [r7, #16]
 801a212:	e853 3f00 	ldrex	r3, [r3]
 801a216:	60fb      	str	r3, [r7, #12]
   return(result);
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	f043 0320 	orr.w	r3, r3, #32
 801a21e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	461a      	mov	r2, r3
 801a228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a22c:	61fb      	str	r3, [r7, #28]
 801a22e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a230:	69b9      	ldr	r1, [r7, #24]
 801a232:	69fa      	ldr	r2, [r7, #28]
 801a234:	e841 2300 	strex	r3, r2, [r1]
 801a238:	617b      	str	r3, [r7, #20]
   return(result);
 801a23a:	697b      	ldr	r3, [r7, #20]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d1e4      	bne.n	801a20a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a240:	e007      	b.n	801a252 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	699a      	ldr	r2, [r3, #24]
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	f042 0208 	orr.w	r2, r2, #8
 801a250:	619a      	str	r2, [r3, #24]
}
 801a252:	bf00      	nop
 801a254:	37b8      	adds	r7, #184	@ 0xb8
 801a256:	46bd      	mov	sp, r7
 801a258:	bd80      	pop	{r7, pc}
 801a25a:	bf00      	nop
 801a25c:	effffffe 	.word	0xeffffffe
 801a260:	58000c00 	.word	0x58000c00
 801a264:	080199e1 	.word	0x080199e1

0801a268 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a268:	b480      	push	{r7}
 801a26a:	b083      	sub	sp, #12
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a270:	bf00      	nop
 801a272:	370c      	adds	r7, #12
 801a274:	46bd      	mov	sp, r7
 801a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a27a:	4770      	bx	lr

0801a27c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a27c:	b480      	push	{r7}
 801a27e:	b083      	sub	sp, #12
 801a280:	af00      	add	r7, sp, #0
 801a282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a284:	bf00      	nop
 801a286:	370c      	adds	r7, #12
 801a288:	46bd      	mov	sp, r7
 801a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a28e:	4770      	bx	lr

0801a290 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a290:	b480      	push	{r7}
 801a292:	b083      	sub	sp, #12
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a298:	bf00      	nop
 801a29a:	370c      	adds	r7, #12
 801a29c:	46bd      	mov	sp, r7
 801a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2a2:	4770      	bx	lr

0801a2a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a2a4:	b480      	push	{r7}
 801a2a6:	b085      	sub	sp, #20
 801a2a8:	af00      	add	r7, sp, #0
 801a2aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a2b2:	2b01      	cmp	r3, #1
 801a2b4:	d101      	bne.n	801a2ba <HAL_UARTEx_DisableFifoMode+0x16>
 801a2b6:	2302      	movs	r3, #2
 801a2b8:	e027      	b.n	801a30a <HAL_UARTEx_DisableFifoMode+0x66>
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	2201      	movs	r2, #1
 801a2be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	2224      	movs	r2, #36	@ 0x24
 801a2c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	681a      	ldr	r2, [r3, #0]
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	f022 0201 	bic.w	r2, r2, #1
 801a2e0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801a2e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	68fa      	ldr	r2, [r7, #12]
 801a2f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	2220      	movs	r2, #32
 801a2fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	2200      	movs	r2, #0
 801a304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a308:	2300      	movs	r3, #0
}
 801a30a:	4618      	mov	r0, r3
 801a30c:	3714      	adds	r7, #20
 801a30e:	46bd      	mov	sp, r7
 801a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a314:	4770      	bx	lr

0801a316 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a316:	b580      	push	{r7, lr}
 801a318:	b084      	sub	sp, #16
 801a31a:	af00      	add	r7, sp, #0
 801a31c:	6078      	str	r0, [r7, #4]
 801a31e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a326:	2b01      	cmp	r3, #1
 801a328:	d101      	bne.n	801a32e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a32a:	2302      	movs	r3, #2
 801a32c:	e02d      	b.n	801a38a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	2201      	movs	r2, #1
 801a332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	2224      	movs	r2, #36	@ 0x24
 801a33a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	681a      	ldr	r2, [r3, #0]
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	f022 0201 	bic.w	r2, r2, #1
 801a354:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	689b      	ldr	r3, [r3, #8]
 801a35c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	683a      	ldr	r2, [r7, #0]
 801a366:	430a      	orrs	r2, r1
 801a368:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a36a:	6878      	ldr	r0, [r7, #4]
 801a36c:	f000 f850 	bl	801a410 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	68fa      	ldr	r2, [r7, #12]
 801a376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	2220      	movs	r2, #32
 801a37c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	2200      	movs	r2, #0
 801a384:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a388:	2300      	movs	r3, #0
}
 801a38a:	4618      	mov	r0, r3
 801a38c:	3710      	adds	r7, #16
 801a38e:	46bd      	mov	sp, r7
 801a390:	bd80      	pop	{r7, pc}

0801a392 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a392:	b580      	push	{r7, lr}
 801a394:	b084      	sub	sp, #16
 801a396:	af00      	add	r7, sp, #0
 801a398:	6078      	str	r0, [r7, #4]
 801a39a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a3a2:	2b01      	cmp	r3, #1
 801a3a4:	d101      	bne.n	801a3aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a3a6:	2302      	movs	r3, #2
 801a3a8:	e02d      	b.n	801a406 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	2201      	movs	r2, #1
 801a3ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	2224      	movs	r2, #36	@ 0x24
 801a3b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	681a      	ldr	r2, [r3, #0]
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	f022 0201 	bic.w	r2, r2, #1
 801a3d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	689b      	ldr	r3, [r3, #8]
 801a3d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	683a      	ldr	r2, [r7, #0]
 801a3e2:	430a      	orrs	r2, r1
 801a3e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a3e6:	6878      	ldr	r0, [r7, #4]
 801a3e8:	f000 f812 	bl	801a410 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	68fa      	ldr	r2, [r7, #12]
 801a3f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	2220      	movs	r2, #32
 801a3f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	2200      	movs	r2, #0
 801a400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a404:	2300      	movs	r3, #0
}
 801a406:	4618      	mov	r0, r3
 801a408:	3710      	adds	r7, #16
 801a40a:	46bd      	mov	sp, r7
 801a40c:	bd80      	pop	{r7, pc}
	...

0801a410 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a410:	b480      	push	{r7}
 801a412:	b085      	sub	sp, #20
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d108      	bne.n	801a432 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	2201      	movs	r2, #1
 801a424:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	2201      	movs	r2, #1
 801a42c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a430:	e031      	b.n	801a496 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a432:	2310      	movs	r3, #16
 801a434:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a436:	2310      	movs	r3, #16
 801a438:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	689b      	ldr	r3, [r3, #8]
 801a440:	0e5b      	lsrs	r3, r3, #25
 801a442:	b2db      	uxtb	r3, r3
 801a444:	f003 0307 	and.w	r3, r3, #7
 801a448:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	689b      	ldr	r3, [r3, #8]
 801a450:	0f5b      	lsrs	r3, r3, #29
 801a452:	b2db      	uxtb	r3, r3
 801a454:	f003 0307 	and.w	r3, r3, #7
 801a458:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a45a:	7bbb      	ldrb	r3, [r7, #14]
 801a45c:	7b3a      	ldrb	r2, [r7, #12]
 801a45e:	4911      	ldr	r1, [pc, #68]	@ (801a4a4 <UARTEx_SetNbDataToProcess+0x94>)
 801a460:	5c8a      	ldrb	r2, [r1, r2]
 801a462:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801a466:	7b3a      	ldrb	r2, [r7, #12]
 801a468:	490f      	ldr	r1, [pc, #60]	@ (801a4a8 <UARTEx_SetNbDataToProcess+0x98>)
 801a46a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a46c:	fb93 f3f2 	sdiv	r3, r3, r2
 801a470:	b29a      	uxth	r2, r3
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a478:	7bfb      	ldrb	r3, [r7, #15]
 801a47a:	7b7a      	ldrb	r2, [r7, #13]
 801a47c:	4909      	ldr	r1, [pc, #36]	@ (801a4a4 <UARTEx_SetNbDataToProcess+0x94>)
 801a47e:	5c8a      	ldrb	r2, [r1, r2]
 801a480:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801a484:	7b7a      	ldrb	r2, [r7, #13]
 801a486:	4908      	ldr	r1, [pc, #32]	@ (801a4a8 <UARTEx_SetNbDataToProcess+0x98>)
 801a488:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a48a:	fb93 f3f2 	sdiv	r3, r3, r2
 801a48e:	b29a      	uxth	r2, r3
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801a496:	bf00      	nop
 801a498:	3714      	adds	r7, #20
 801a49a:	46bd      	mov	sp, r7
 801a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a0:	4770      	bx	lr
 801a4a2:	bf00      	nop
 801a4a4:	0801e318 	.word	0x0801e318
 801a4a8:	0801e320 	.word	0x0801e320

0801a4ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801a4b0:	4904      	ldr	r1, [pc, #16]	@ (801a4c4 <MX_FATFS_Init+0x18>)
 801a4b2:	4805      	ldr	r0, [pc, #20]	@ (801a4c8 <MX_FATFS_Init+0x1c>)
 801a4b4:	f003 f8d8 	bl	801d668 <FATFS_LinkDriver>
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	461a      	mov	r2, r3
 801a4bc:	4b03      	ldr	r3, [pc, #12]	@ (801a4cc <MX_FATFS_Init+0x20>)
 801a4be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801a4c0:	bf00      	nop
 801a4c2:	bd80      	pop	{r7, pc}
 801a4c4:	2400054c 	.word	0x2400054c
 801a4c8:	24000014 	.word	0x24000014
 801a4cc:	24000548 	.word	0x24000548

0801a4d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801a4d0:	b480      	push	{r7}
 801a4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801a4d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801a4d6:	4618      	mov	r0, r3
 801a4d8:	46bd      	mov	sp, r7
 801a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4de:	4770      	bx	lr

0801a4e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801a4e0:	b580      	push	{r7, lr}
 801a4e2:	b082      	sub	sp, #8
 801a4e4:	af00      	add	r7, sp, #0
 801a4e6:	4603      	mov	r3, r0
 801a4e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801a4ea:	79fb      	ldrb	r3, [r7, #7]
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	f7e9 fdc1 	bl	8004074 <SD_disk_initialize>
 801a4f2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	3708      	adds	r7, #8
 801a4f8:	46bd      	mov	sp, r7
 801a4fa:	bd80      	pop	{r7, pc}

0801a4fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b082      	sub	sp, #8
 801a500:	af00      	add	r7, sp, #0
 801a502:	4603      	mov	r3, r0
 801a504:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801a506:	79fb      	ldrb	r3, [r7, #7]
 801a508:	4618      	mov	r0, r3
 801a50a:	f7e9 fe9f 	bl	800424c <SD_disk_status>
 801a50e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801a510:	4618      	mov	r0, r3
 801a512:	3708      	adds	r7, #8
 801a514:	46bd      	mov	sp, r7
 801a516:	bd80      	pop	{r7, pc}

0801a518 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801a518:	b580      	push	{r7, lr}
 801a51a:	b084      	sub	sp, #16
 801a51c:	af00      	add	r7, sp, #0
 801a51e:	60b9      	str	r1, [r7, #8]
 801a520:	607a      	str	r2, [r7, #4]
 801a522:	603b      	str	r3, [r7, #0]
 801a524:	4603      	mov	r3, r0
 801a526:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801a528:	7bf8      	ldrb	r0, [r7, #15]
 801a52a:	683b      	ldr	r3, [r7, #0]
 801a52c:	687a      	ldr	r2, [r7, #4]
 801a52e:	68b9      	ldr	r1, [r7, #8]
 801a530:	f7e9 fea2 	bl	8004278 <SD_disk_read>
 801a534:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801a536:	4618      	mov	r0, r3
 801a538:	3710      	adds	r7, #16
 801a53a:	46bd      	mov	sp, r7
 801a53c:	bd80      	pop	{r7, pc}

0801a53e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801a53e:	b580      	push	{r7, lr}
 801a540:	b084      	sub	sp, #16
 801a542:	af00      	add	r7, sp, #0
 801a544:	60b9      	str	r1, [r7, #8]
 801a546:	607a      	str	r2, [r7, #4]
 801a548:	603b      	str	r3, [r7, #0]
 801a54a:	4603      	mov	r3, r0
 801a54c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801a54e:	7bf8      	ldrb	r0, [r7, #15]
 801a550:	683b      	ldr	r3, [r7, #0]
 801a552:	687a      	ldr	r2, [r7, #4]
 801a554:	68b9      	ldr	r1, [r7, #8]
 801a556:	f7e9 fef9 	bl	800434c <SD_disk_write>
 801a55a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801a55c:	4618      	mov	r0, r3
 801a55e:	3710      	adds	r7, #16
 801a560:	46bd      	mov	sp, r7
 801a562:	bd80      	pop	{r7, pc}

0801a564 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b082      	sub	sp, #8
 801a568:	af00      	add	r7, sp, #0
 801a56a:	4603      	mov	r3, r0
 801a56c:	603a      	str	r2, [r7, #0]
 801a56e:	71fb      	strb	r3, [r7, #7]
 801a570:	460b      	mov	r3, r1
 801a572:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801a574:	79b9      	ldrb	r1, [r7, #6]
 801a576:	79fb      	ldrb	r3, [r7, #7]
 801a578:	683a      	ldr	r2, [r7, #0]
 801a57a:	4618      	mov	r0, r3
 801a57c:	f7e9 ff6a 	bl	8004454 <SD_disk_ioctl>
 801a580:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801a582:	4618      	mov	r0, r3
 801a584:	3708      	adds	r7, #8
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
	...

0801a58c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801a58c:	b580      	push	{r7, lr}
 801a58e:	b084      	sub	sp, #16
 801a590:	af00      	add	r7, sp, #0
 801a592:	4603      	mov	r3, r0
 801a594:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801a596:	79fb      	ldrb	r3, [r7, #7]
 801a598:	4a08      	ldr	r2, [pc, #32]	@ (801a5bc <disk_status+0x30>)
 801a59a:	009b      	lsls	r3, r3, #2
 801a59c:	4413      	add	r3, r2
 801a59e:	685b      	ldr	r3, [r3, #4]
 801a5a0:	685b      	ldr	r3, [r3, #4]
 801a5a2:	79fa      	ldrb	r2, [r7, #7]
 801a5a4:	4905      	ldr	r1, [pc, #20]	@ (801a5bc <disk_status+0x30>)
 801a5a6:	440a      	add	r2, r1
 801a5a8:	7a12      	ldrb	r2, [r2, #8]
 801a5aa:	4610      	mov	r0, r2
 801a5ac:	4798      	blx	r3
 801a5ae:	4603      	mov	r3, r0
 801a5b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 801a5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	3710      	adds	r7, #16
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	bd80      	pop	{r7, pc}
 801a5bc:	24000768 	.word	0x24000768

0801a5c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801a5c0:	b580      	push	{r7, lr}
 801a5c2:	b084      	sub	sp, #16
 801a5c4:	af00      	add	r7, sp, #0
 801a5c6:	4603      	mov	r3, r0
 801a5c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801a5ca:	2300      	movs	r3, #0
 801a5cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801a5ce:	79fb      	ldrb	r3, [r7, #7]
 801a5d0:	4a0e      	ldr	r2, [pc, #56]	@ (801a60c <disk_initialize+0x4c>)
 801a5d2:	5cd3      	ldrb	r3, [r2, r3]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d114      	bne.n	801a602 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801a5d8:	79fb      	ldrb	r3, [r7, #7]
 801a5da:	4a0c      	ldr	r2, [pc, #48]	@ (801a60c <disk_initialize+0x4c>)
 801a5dc:	009b      	lsls	r3, r3, #2
 801a5de:	4413      	add	r3, r2
 801a5e0:	685b      	ldr	r3, [r3, #4]
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	79fa      	ldrb	r2, [r7, #7]
 801a5e6:	4909      	ldr	r1, [pc, #36]	@ (801a60c <disk_initialize+0x4c>)
 801a5e8:	440a      	add	r2, r1
 801a5ea:	7a12      	ldrb	r2, [r2, #8]
 801a5ec:	4610      	mov	r0, r2
 801a5ee:	4798      	blx	r3
 801a5f0:	4603      	mov	r3, r0
 801a5f2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801a5f4:	7bfb      	ldrb	r3, [r7, #15]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d103      	bne.n	801a602 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801a5fa:	79fb      	ldrb	r3, [r7, #7]
 801a5fc:	4a03      	ldr	r2, [pc, #12]	@ (801a60c <disk_initialize+0x4c>)
 801a5fe:	2101      	movs	r1, #1
 801a600:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801a602:	7bfb      	ldrb	r3, [r7, #15]
}
 801a604:	4618      	mov	r0, r3
 801a606:	3710      	adds	r7, #16
 801a608:	46bd      	mov	sp, r7
 801a60a:	bd80      	pop	{r7, pc}
 801a60c:	24000768 	.word	0x24000768

0801a610 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801a610:	b590      	push	{r4, r7, lr}
 801a612:	b087      	sub	sp, #28
 801a614:	af00      	add	r7, sp, #0
 801a616:	60b9      	str	r1, [r7, #8]
 801a618:	607a      	str	r2, [r7, #4]
 801a61a:	603b      	str	r3, [r7, #0]
 801a61c:	4603      	mov	r3, r0
 801a61e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801a620:	7bfb      	ldrb	r3, [r7, #15]
 801a622:	4a0a      	ldr	r2, [pc, #40]	@ (801a64c <disk_read+0x3c>)
 801a624:	009b      	lsls	r3, r3, #2
 801a626:	4413      	add	r3, r2
 801a628:	685b      	ldr	r3, [r3, #4]
 801a62a:	689c      	ldr	r4, [r3, #8]
 801a62c:	7bfb      	ldrb	r3, [r7, #15]
 801a62e:	4a07      	ldr	r2, [pc, #28]	@ (801a64c <disk_read+0x3c>)
 801a630:	4413      	add	r3, r2
 801a632:	7a18      	ldrb	r0, [r3, #8]
 801a634:	683b      	ldr	r3, [r7, #0]
 801a636:	687a      	ldr	r2, [r7, #4]
 801a638:	68b9      	ldr	r1, [r7, #8]
 801a63a:	47a0      	blx	r4
 801a63c:	4603      	mov	r3, r0
 801a63e:	75fb      	strb	r3, [r7, #23]
  return res;
 801a640:	7dfb      	ldrb	r3, [r7, #23]
}
 801a642:	4618      	mov	r0, r3
 801a644:	371c      	adds	r7, #28
 801a646:	46bd      	mov	sp, r7
 801a648:	bd90      	pop	{r4, r7, pc}
 801a64a:	bf00      	nop
 801a64c:	24000768 	.word	0x24000768

0801a650 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801a650:	b590      	push	{r4, r7, lr}
 801a652:	b087      	sub	sp, #28
 801a654:	af00      	add	r7, sp, #0
 801a656:	60b9      	str	r1, [r7, #8]
 801a658:	607a      	str	r2, [r7, #4]
 801a65a:	603b      	str	r3, [r7, #0]
 801a65c:	4603      	mov	r3, r0
 801a65e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801a660:	7bfb      	ldrb	r3, [r7, #15]
 801a662:	4a0a      	ldr	r2, [pc, #40]	@ (801a68c <disk_write+0x3c>)
 801a664:	009b      	lsls	r3, r3, #2
 801a666:	4413      	add	r3, r2
 801a668:	685b      	ldr	r3, [r3, #4]
 801a66a:	68dc      	ldr	r4, [r3, #12]
 801a66c:	7bfb      	ldrb	r3, [r7, #15]
 801a66e:	4a07      	ldr	r2, [pc, #28]	@ (801a68c <disk_write+0x3c>)
 801a670:	4413      	add	r3, r2
 801a672:	7a18      	ldrb	r0, [r3, #8]
 801a674:	683b      	ldr	r3, [r7, #0]
 801a676:	687a      	ldr	r2, [r7, #4]
 801a678:	68b9      	ldr	r1, [r7, #8]
 801a67a:	47a0      	blx	r4
 801a67c:	4603      	mov	r3, r0
 801a67e:	75fb      	strb	r3, [r7, #23]
  return res;
 801a680:	7dfb      	ldrb	r3, [r7, #23]
}
 801a682:	4618      	mov	r0, r3
 801a684:	371c      	adds	r7, #28
 801a686:	46bd      	mov	sp, r7
 801a688:	bd90      	pop	{r4, r7, pc}
 801a68a:	bf00      	nop
 801a68c:	24000768 	.word	0x24000768

0801a690 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b084      	sub	sp, #16
 801a694:	af00      	add	r7, sp, #0
 801a696:	4603      	mov	r3, r0
 801a698:	603a      	str	r2, [r7, #0]
 801a69a:	71fb      	strb	r3, [r7, #7]
 801a69c:	460b      	mov	r3, r1
 801a69e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801a6a0:	79fb      	ldrb	r3, [r7, #7]
 801a6a2:	4a09      	ldr	r2, [pc, #36]	@ (801a6c8 <disk_ioctl+0x38>)
 801a6a4:	009b      	lsls	r3, r3, #2
 801a6a6:	4413      	add	r3, r2
 801a6a8:	685b      	ldr	r3, [r3, #4]
 801a6aa:	691b      	ldr	r3, [r3, #16]
 801a6ac:	79fa      	ldrb	r2, [r7, #7]
 801a6ae:	4906      	ldr	r1, [pc, #24]	@ (801a6c8 <disk_ioctl+0x38>)
 801a6b0:	440a      	add	r2, r1
 801a6b2:	7a10      	ldrb	r0, [r2, #8]
 801a6b4:	79b9      	ldrb	r1, [r7, #6]
 801a6b6:	683a      	ldr	r2, [r7, #0]
 801a6b8:	4798      	blx	r3
 801a6ba:	4603      	mov	r3, r0
 801a6bc:	73fb      	strb	r3, [r7, #15]
  return res;
 801a6be:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	3710      	adds	r7, #16
 801a6c4:	46bd      	mov	sp, r7
 801a6c6:	bd80      	pop	{r7, pc}
 801a6c8:	24000768 	.word	0x24000768

0801a6cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801a6cc:	b480      	push	{r7}
 801a6ce:	b085      	sub	sp, #20
 801a6d0:	af00      	add	r7, sp, #0
 801a6d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	3301      	adds	r3, #1
 801a6d8:	781b      	ldrb	r3, [r3, #0]
 801a6da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801a6dc:	89fb      	ldrh	r3, [r7, #14]
 801a6de:	021b      	lsls	r3, r3, #8
 801a6e0:	b21a      	sxth	r2, r3
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	781b      	ldrb	r3, [r3, #0]
 801a6e6:	b21b      	sxth	r3, r3
 801a6e8:	4313      	orrs	r3, r2
 801a6ea:	b21b      	sxth	r3, r3
 801a6ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 801a6ee:	89fb      	ldrh	r3, [r7, #14]
}
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	3714      	adds	r7, #20
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6fa:	4770      	bx	lr

0801a6fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801a6fc:	b480      	push	{r7}
 801a6fe:	b085      	sub	sp, #20
 801a700:	af00      	add	r7, sp, #0
 801a702:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	3303      	adds	r3, #3
 801a708:	781b      	ldrb	r3, [r3, #0]
 801a70a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	021b      	lsls	r3, r3, #8
 801a710:	687a      	ldr	r2, [r7, #4]
 801a712:	3202      	adds	r2, #2
 801a714:	7812      	ldrb	r2, [r2, #0]
 801a716:	4313      	orrs	r3, r2
 801a718:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	021b      	lsls	r3, r3, #8
 801a71e:	687a      	ldr	r2, [r7, #4]
 801a720:	3201      	adds	r2, #1
 801a722:	7812      	ldrb	r2, [r2, #0]
 801a724:	4313      	orrs	r3, r2
 801a726:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	021b      	lsls	r3, r3, #8
 801a72c:	687a      	ldr	r2, [r7, #4]
 801a72e:	7812      	ldrb	r2, [r2, #0]
 801a730:	4313      	orrs	r3, r2
 801a732:	60fb      	str	r3, [r7, #12]
	return rv;
 801a734:	68fb      	ldr	r3, [r7, #12]
}
 801a736:	4618      	mov	r0, r3
 801a738:	3714      	adds	r7, #20
 801a73a:	46bd      	mov	sp, r7
 801a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a740:	4770      	bx	lr

0801a742 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801a742:	b480      	push	{r7}
 801a744:	b083      	sub	sp, #12
 801a746:	af00      	add	r7, sp, #0
 801a748:	6078      	str	r0, [r7, #4]
 801a74a:	460b      	mov	r3, r1
 801a74c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	1c5a      	adds	r2, r3, #1
 801a752:	607a      	str	r2, [r7, #4]
 801a754:	887a      	ldrh	r2, [r7, #2]
 801a756:	b2d2      	uxtb	r2, r2
 801a758:	701a      	strb	r2, [r3, #0]
 801a75a:	887b      	ldrh	r3, [r7, #2]
 801a75c:	0a1b      	lsrs	r3, r3, #8
 801a75e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	1c5a      	adds	r2, r3, #1
 801a764:	607a      	str	r2, [r7, #4]
 801a766:	887a      	ldrh	r2, [r7, #2]
 801a768:	b2d2      	uxtb	r2, r2
 801a76a:	701a      	strb	r2, [r3, #0]
}
 801a76c:	bf00      	nop
 801a76e:	370c      	adds	r7, #12
 801a770:	46bd      	mov	sp, r7
 801a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a776:	4770      	bx	lr

0801a778 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801a778:	b480      	push	{r7}
 801a77a:	b083      	sub	sp, #12
 801a77c:	af00      	add	r7, sp, #0
 801a77e:	6078      	str	r0, [r7, #4]
 801a780:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	1c5a      	adds	r2, r3, #1
 801a786:	607a      	str	r2, [r7, #4]
 801a788:	683a      	ldr	r2, [r7, #0]
 801a78a:	b2d2      	uxtb	r2, r2
 801a78c:	701a      	strb	r2, [r3, #0]
 801a78e:	683b      	ldr	r3, [r7, #0]
 801a790:	0a1b      	lsrs	r3, r3, #8
 801a792:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	1c5a      	adds	r2, r3, #1
 801a798:	607a      	str	r2, [r7, #4]
 801a79a:	683a      	ldr	r2, [r7, #0]
 801a79c:	b2d2      	uxtb	r2, r2
 801a79e:	701a      	strb	r2, [r3, #0]
 801a7a0:	683b      	ldr	r3, [r7, #0]
 801a7a2:	0a1b      	lsrs	r3, r3, #8
 801a7a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	1c5a      	adds	r2, r3, #1
 801a7aa:	607a      	str	r2, [r7, #4]
 801a7ac:	683a      	ldr	r2, [r7, #0]
 801a7ae:	b2d2      	uxtb	r2, r2
 801a7b0:	701a      	strb	r2, [r3, #0]
 801a7b2:	683b      	ldr	r3, [r7, #0]
 801a7b4:	0a1b      	lsrs	r3, r3, #8
 801a7b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	1c5a      	adds	r2, r3, #1
 801a7bc:	607a      	str	r2, [r7, #4]
 801a7be:	683a      	ldr	r2, [r7, #0]
 801a7c0:	b2d2      	uxtb	r2, r2
 801a7c2:	701a      	strb	r2, [r3, #0]
}
 801a7c4:	bf00      	nop
 801a7c6:	370c      	adds	r7, #12
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ce:	4770      	bx	lr

0801a7d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801a7d0:	b480      	push	{r7}
 801a7d2:	b087      	sub	sp, #28
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	60f8      	str	r0, [r7, #12]
 801a7d8:	60b9      	str	r1, [r7, #8]
 801a7da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801a7e0:	68bb      	ldr	r3, [r7, #8]
 801a7e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d00d      	beq.n	801a806 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801a7ea:	693a      	ldr	r2, [r7, #16]
 801a7ec:	1c53      	adds	r3, r2, #1
 801a7ee:	613b      	str	r3, [r7, #16]
 801a7f0:	697b      	ldr	r3, [r7, #20]
 801a7f2:	1c59      	adds	r1, r3, #1
 801a7f4:	6179      	str	r1, [r7, #20]
 801a7f6:	7812      	ldrb	r2, [r2, #0]
 801a7f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	3b01      	subs	r3, #1
 801a7fe:	607b      	str	r3, [r7, #4]
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	2b00      	cmp	r3, #0
 801a804:	d1f1      	bne.n	801a7ea <mem_cpy+0x1a>
	}
}
 801a806:	bf00      	nop
 801a808:	371c      	adds	r7, #28
 801a80a:	46bd      	mov	sp, r7
 801a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a810:	4770      	bx	lr

0801a812 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801a812:	b480      	push	{r7}
 801a814:	b087      	sub	sp, #28
 801a816:	af00      	add	r7, sp, #0
 801a818:	60f8      	str	r0, [r7, #12]
 801a81a:	60b9      	str	r1, [r7, #8]
 801a81c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801a822:	697b      	ldr	r3, [r7, #20]
 801a824:	1c5a      	adds	r2, r3, #1
 801a826:	617a      	str	r2, [r7, #20]
 801a828:	68ba      	ldr	r2, [r7, #8]
 801a82a:	b2d2      	uxtb	r2, r2
 801a82c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	3b01      	subs	r3, #1
 801a832:	607b      	str	r3, [r7, #4]
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	2b00      	cmp	r3, #0
 801a838:	d1f3      	bne.n	801a822 <mem_set+0x10>
}
 801a83a:	bf00      	nop
 801a83c:	bf00      	nop
 801a83e:	371c      	adds	r7, #28
 801a840:	46bd      	mov	sp, r7
 801a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a846:	4770      	bx	lr

0801a848 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801a848:	b480      	push	{r7}
 801a84a:	b089      	sub	sp, #36	@ 0x24
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	60f8      	str	r0, [r7, #12]
 801a850:	60b9      	str	r1, [r7, #8]
 801a852:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	61fb      	str	r3, [r7, #28]
 801a858:	68bb      	ldr	r3, [r7, #8]
 801a85a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801a85c:	2300      	movs	r3, #0
 801a85e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801a860:	69fb      	ldr	r3, [r7, #28]
 801a862:	1c5a      	adds	r2, r3, #1
 801a864:	61fa      	str	r2, [r7, #28]
 801a866:	781b      	ldrb	r3, [r3, #0]
 801a868:	4619      	mov	r1, r3
 801a86a:	69bb      	ldr	r3, [r7, #24]
 801a86c:	1c5a      	adds	r2, r3, #1
 801a86e:	61ba      	str	r2, [r7, #24]
 801a870:	781b      	ldrb	r3, [r3, #0]
 801a872:	1acb      	subs	r3, r1, r3
 801a874:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	3b01      	subs	r3, #1
 801a87a:	607b      	str	r3, [r7, #4]
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d002      	beq.n	801a888 <mem_cmp+0x40>
 801a882:	697b      	ldr	r3, [r7, #20]
 801a884:	2b00      	cmp	r3, #0
 801a886:	d0eb      	beq.n	801a860 <mem_cmp+0x18>

	return r;
 801a888:	697b      	ldr	r3, [r7, #20]
}
 801a88a:	4618      	mov	r0, r3
 801a88c:	3724      	adds	r7, #36	@ 0x24
 801a88e:	46bd      	mov	sp, r7
 801a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a894:	4770      	bx	lr

0801a896 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801a896:	b480      	push	{r7}
 801a898:	b083      	sub	sp, #12
 801a89a:	af00      	add	r7, sp, #0
 801a89c:	6078      	str	r0, [r7, #4]
 801a89e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801a8a0:	e002      	b.n	801a8a8 <chk_chr+0x12>
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	3301      	adds	r3, #1
 801a8a6:	607b      	str	r3, [r7, #4]
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	781b      	ldrb	r3, [r3, #0]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d005      	beq.n	801a8bc <chk_chr+0x26>
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	781b      	ldrb	r3, [r3, #0]
 801a8b4:	461a      	mov	r2, r3
 801a8b6:	683b      	ldr	r3, [r7, #0]
 801a8b8:	4293      	cmp	r3, r2
 801a8ba:	d1f2      	bne.n	801a8a2 <chk_chr+0xc>
	return *str;
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	781b      	ldrb	r3, [r3, #0]
}
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	370c      	adds	r7, #12
 801a8c4:	46bd      	mov	sp, r7
 801a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8ca:	4770      	bx	lr

0801a8cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a8cc:	b480      	push	{r7}
 801a8ce:	b085      	sub	sp, #20
 801a8d0:	af00      	add	r7, sp, #0
 801a8d2:	6078      	str	r0, [r7, #4]
 801a8d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a8d6:	2300      	movs	r3, #0
 801a8d8:	60bb      	str	r3, [r7, #8]
 801a8da:	68bb      	ldr	r3, [r7, #8]
 801a8dc:	60fb      	str	r3, [r7, #12]
 801a8de:	e029      	b.n	801a934 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801a8e0:	4a27      	ldr	r2, [pc, #156]	@ (801a980 <chk_lock+0xb4>)
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	011b      	lsls	r3, r3, #4
 801a8e6:	4413      	add	r3, r2
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d01d      	beq.n	801a92a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a8ee:	4a24      	ldr	r2, [pc, #144]	@ (801a980 <chk_lock+0xb4>)
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	011b      	lsls	r3, r3, #4
 801a8f4:	4413      	add	r3, r2
 801a8f6:	681a      	ldr	r2, [r3, #0]
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	429a      	cmp	r2, r3
 801a8fe:	d116      	bne.n	801a92e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801a900:	4a1f      	ldr	r2, [pc, #124]	@ (801a980 <chk_lock+0xb4>)
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	011b      	lsls	r3, r3, #4
 801a906:	4413      	add	r3, r2
 801a908:	3304      	adds	r3, #4
 801a90a:	681a      	ldr	r2, [r3, #0]
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a910:	429a      	cmp	r2, r3
 801a912:	d10c      	bne.n	801a92e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a914:	4a1a      	ldr	r2, [pc, #104]	@ (801a980 <chk_lock+0xb4>)
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	011b      	lsls	r3, r3, #4
 801a91a:	4413      	add	r3, r2
 801a91c:	3308      	adds	r3, #8
 801a91e:	681a      	ldr	r2, [r3, #0]
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801a924:	429a      	cmp	r2, r3
 801a926:	d102      	bne.n	801a92e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a928:	e007      	b.n	801a93a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801a92a:	2301      	movs	r3, #1
 801a92c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	3301      	adds	r3, #1
 801a932:	60fb      	str	r3, [r7, #12]
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d0d2      	beq.n	801a8e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	2b01      	cmp	r3, #1
 801a93e:	d109      	bne.n	801a954 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801a940:	68bb      	ldr	r3, [r7, #8]
 801a942:	2b00      	cmp	r3, #0
 801a944:	d102      	bne.n	801a94c <chk_lock+0x80>
 801a946:	683b      	ldr	r3, [r7, #0]
 801a948:	2b02      	cmp	r3, #2
 801a94a:	d101      	bne.n	801a950 <chk_lock+0x84>
 801a94c:	2300      	movs	r3, #0
 801a94e:	e010      	b.n	801a972 <chk_lock+0xa6>
 801a950:	2312      	movs	r3, #18
 801a952:	e00e      	b.n	801a972 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801a954:	683b      	ldr	r3, [r7, #0]
 801a956:	2b00      	cmp	r3, #0
 801a958:	d108      	bne.n	801a96c <chk_lock+0xa0>
 801a95a:	4a09      	ldr	r2, [pc, #36]	@ (801a980 <chk_lock+0xb4>)
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	011b      	lsls	r3, r3, #4
 801a960:	4413      	add	r3, r2
 801a962:	330c      	adds	r3, #12
 801a964:	881b      	ldrh	r3, [r3, #0]
 801a966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a96a:	d101      	bne.n	801a970 <chk_lock+0xa4>
 801a96c:	2310      	movs	r3, #16
 801a96e:	e000      	b.n	801a972 <chk_lock+0xa6>
 801a970:	2300      	movs	r3, #0
}
 801a972:	4618      	mov	r0, r3
 801a974:	3714      	adds	r7, #20
 801a976:	46bd      	mov	sp, r7
 801a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a97c:	4770      	bx	lr
 801a97e:	bf00      	nop
 801a980:	24000558 	.word	0x24000558

0801a984 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801a984:	b480      	push	{r7}
 801a986:	b083      	sub	sp, #12
 801a988:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a98a:	2300      	movs	r3, #0
 801a98c:	607b      	str	r3, [r7, #4]
 801a98e:	e002      	b.n	801a996 <enq_lock+0x12>
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	3301      	adds	r3, #1
 801a994:	607b      	str	r3, [r7, #4]
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d106      	bne.n	801a9aa <enq_lock+0x26>
 801a99c:	4a09      	ldr	r2, [pc, #36]	@ (801a9c4 <enq_lock+0x40>)
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	011b      	lsls	r3, r3, #4
 801a9a2:	4413      	add	r3, r2
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d1f2      	bne.n	801a990 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	2b01      	cmp	r3, #1
 801a9ae:	bf14      	ite	ne
 801a9b0:	2301      	movne	r3, #1
 801a9b2:	2300      	moveq	r3, #0
 801a9b4:	b2db      	uxtb	r3, r3
}
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	370c      	adds	r7, #12
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9c0:	4770      	bx	lr
 801a9c2:	bf00      	nop
 801a9c4:	24000558 	.word	0x24000558

0801a9c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a9c8:	b480      	push	{r7}
 801a9ca:	b085      	sub	sp, #20
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	6078      	str	r0, [r7, #4]
 801a9d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	60fb      	str	r3, [r7, #12]
 801a9d6:	e01f      	b.n	801aa18 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801a9d8:	4a41      	ldr	r2, [pc, #260]	@ (801aae0 <inc_lock+0x118>)
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	011b      	lsls	r3, r3, #4
 801a9de:	4413      	add	r3, r2
 801a9e0:	681a      	ldr	r2, [r3, #0]
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	429a      	cmp	r2, r3
 801a9e8:	d113      	bne.n	801aa12 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801a9ea:	4a3d      	ldr	r2, [pc, #244]	@ (801aae0 <inc_lock+0x118>)
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	011b      	lsls	r3, r3, #4
 801a9f0:	4413      	add	r3, r2
 801a9f2:	3304      	adds	r3, #4
 801a9f4:	681a      	ldr	r2, [r3, #0]
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801a9fa:	429a      	cmp	r2, r3
 801a9fc:	d109      	bne.n	801aa12 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801a9fe:	4a38      	ldr	r2, [pc, #224]	@ (801aae0 <inc_lock+0x118>)
 801aa00:	68fb      	ldr	r3, [r7, #12]
 801aa02:	011b      	lsls	r3, r3, #4
 801aa04:	4413      	add	r3, r2
 801aa06:	3308      	adds	r3, #8
 801aa08:	681a      	ldr	r2, [r3, #0]
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801aa0e:	429a      	cmp	r2, r3
 801aa10:	d006      	beq.n	801aa20 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	3301      	adds	r3, #1
 801aa16:	60fb      	str	r3, [r7, #12]
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d0dc      	beq.n	801a9d8 <inc_lock+0x10>
 801aa1e:	e000      	b.n	801aa22 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801aa20:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	2b01      	cmp	r3, #1
 801aa26:	d132      	bne.n	801aa8e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801aa28:	2300      	movs	r3, #0
 801aa2a:	60fb      	str	r3, [r7, #12]
 801aa2c:	e002      	b.n	801aa34 <inc_lock+0x6c>
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	3301      	adds	r3, #1
 801aa32:	60fb      	str	r3, [r7, #12]
 801aa34:	68fb      	ldr	r3, [r7, #12]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d106      	bne.n	801aa48 <inc_lock+0x80>
 801aa3a:	4a29      	ldr	r2, [pc, #164]	@ (801aae0 <inc_lock+0x118>)
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	011b      	lsls	r3, r3, #4
 801aa40:	4413      	add	r3, r2
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d1f2      	bne.n	801aa2e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	2b01      	cmp	r3, #1
 801aa4c:	d101      	bne.n	801aa52 <inc_lock+0x8a>
 801aa4e:	2300      	movs	r3, #0
 801aa50:	e040      	b.n	801aad4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	681a      	ldr	r2, [r3, #0]
 801aa56:	4922      	ldr	r1, [pc, #136]	@ (801aae0 <inc_lock+0x118>)
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	011b      	lsls	r3, r3, #4
 801aa5c:	440b      	add	r3, r1
 801aa5e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	689a      	ldr	r2, [r3, #8]
 801aa64:	491e      	ldr	r1, [pc, #120]	@ (801aae0 <inc_lock+0x118>)
 801aa66:	68fb      	ldr	r3, [r7, #12]
 801aa68:	011b      	lsls	r3, r3, #4
 801aa6a:	440b      	add	r3, r1
 801aa6c:	3304      	adds	r3, #4
 801aa6e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	695a      	ldr	r2, [r3, #20]
 801aa74:	491a      	ldr	r1, [pc, #104]	@ (801aae0 <inc_lock+0x118>)
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	011b      	lsls	r3, r3, #4
 801aa7a:	440b      	add	r3, r1
 801aa7c:	3308      	adds	r3, #8
 801aa7e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801aa80:	4a17      	ldr	r2, [pc, #92]	@ (801aae0 <inc_lock+0x118>)
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	011b      	lsls	r3, r3, #4
 801aa86:	4413      	add	r3, r2
 801aa88:	330c      	adds	r3, #12
 801aa8a:	2200      	movs	r2, #0
 801aa8c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801aa8e:	683b      	ldr	r3, [r7, #0]
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d009      	beq.n	801aaa8 <inc_lock+0xe0>
 801aa94:	4a12      	ldr	r2, [pc, #72]	@ (801aae0 <inc_lock+0x118>)
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	011b      	lsls	r3, r3, #4
 801aa9a:	4413      	add	r3, r2
 801aa9c:	330c      	adds	r3, #12
 801aa9e:	881b      	ldrh	r3, [r3, #0]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d001      	beq.n	801aaa8 <inc_lock+0xe0>
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	e015      	b.n	801aad4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801aaa8:	683b      	ldr	r3, [r7, #0]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d108      	bne.n	801aac0 <inc_lock+0xf8>
 801aaae:	4a0c      	ldr	r2, [pc, #48]	@ (801aae0 <inc_lock+0x118>)
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	011b      	lsls	r3, r3, #4
 801aab4:	4413      	add	r3, r2
 801aab6:	330c      	adds	r3, #12
 801aab8:	881b      	ldrh	r3, [r3, #0]
 801aaba:	3301      	adds	r3, #1
 801aabc:	b29a      	uxth	r2, r3
 801aabe:	e001      	b.n	801aac4 <inc_lock+0xfc>
 801aac0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801aac4:	4906      	ldr	r1, [pc, #24]	@ (801aae0 <inc_lock+0x118>)
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	011b      	lsls	r3, r3, #4
 801aaca:	440b      	add	r3, r1
 801aacc:	330c      	adds	r3, #12
 801aace:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	3301      	adds	r3, #1
}
 801aad4:	4618      	mov	r0, r3
 801aad6:	3714      	adds	r7, #20
 801aad8:	46bd      	mov	sp, r7
 801aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aade:	4770      	bx	lr
 801aae0:	24000558 	.word	0x24000558

0801aae4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801aae4:	b480      	push	{r7}
 801aae6:	b085      	sub	sp, #20
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	3b01      	subs	r3, #1
 801aaf0:	607b      	str	r3, [r7, #4]
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d125      	bne.n	801ab44 <dec_lock+0x60>
		n = Files[i].ctr;
 801aaf8:	4a17      	ldr	r2, [pc, #92]	@ (801ab58 <dec_lock+0x74>)
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	011b      	lsls	r3, r3, #4
 801aafe:	4413      	add	r3, r2
 801ab00:	330c      	adds	r3, #12
 801ab02:	881b      	ldrh	r3, [r3, #0]
 801ab04:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801ab06:	89fb      	ldrh	r3, [r7, #14]
 801ab08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ab0c:	d101      	bne.n	801ab12 <dec_lock+0x2e>
 801ab0e:	2300      	movs	r3, #0
 801ab10:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801ab12:	89fb      	ldrh	r3, [r7, #14]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d002      	beq.n	801ab1e <dec_lock+0x3a>
 801ab18:	89fb      	ldrh	r3, [r7, #14]
 801ab1a:	3b01      	subs	r3, #1
 801ab1c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801ab1e:	4a0e      	ldr	r2, [pc, #56]	@ (801ab58 <dec_lock+0x74>)
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	011b      	lsls	r3, r3, #4
 801ab24:	4413      	add	r3, r2
 801ab26:	330c      	adds	r3, #12
 801ab28:	89fa      	ldrh	r2, [r7, #14]
 801ab2a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801ab2c:	89fb      	ldrh	r3, [r7, #14]
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d105      	bne.n	801ab3e <dec_lock+0x5a>
 801ab32:	4a09      	ldr	r2, [pc, #36]	@ (801ab58 <dec_lock+0x74>)
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	011b      	lsls	r3, r3, #4
 801ab38:	4413      	add	r3, r2
 801ab3a:	2200      	movs	r2, #0
 801ab3c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801ab3e:	2300      	movs	r3, #0
 801ab40:	737b      	strb	r3, [r7, #13]
 801ab42:	e001      	b.n	801ab48 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801ab44:	2302      	movs	r3, #2
 801ab46:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801ab48:	7b7b      	ldrb	r3, [r7, #13]
}
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	3714      	adds	r7, #20
 801ab4e:	46bd      	mov	sp, r7
 801ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab54:	4770      	bx	lr
 801ab56:	bf00      	nop
 801ab58:	24000558 	.word	0x24000558

0801ab5c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801ab5c:	b480      	push	{r7}
 801ab5e:	b085      	sub	sp, #20
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801ab64:	2300      	movs	r3, #0
 801ab66:	60fb      	str	r3, [r7, #12]
 801ab68:	e010      	b.n	801ab8c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801ab6a:	4a0d      	ldr	r2, [pc, #52]	@ (801aba0 <clear_lock+0x44>)
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	011b      	lsls	r3, r3, #4
 801ab70:	4413      	add	r3, r2
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	687a      	ldr	r2, [r7, #4]
 801ab76:	429a      	cmp	r2, r3
 801ab78:	d105      	bne.n	801ab86 <clear_lock+0x2a>
 801ab7a:	4a09      	ldr	r2, [pc, #36]	@ (801aba0 <clear_lock+0x44>)
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	011b      	lsls	r3, r3, #4
 801ab80:	4413      	add	r3, r2
 801ab82:	2200      	movs	r2, #0
 801ab84:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	3301      	adds	r3, #1
 801ab8a:	60fb      	str	r3, [r7, #12]
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	d0eb      	beq.n	801ab6a <clear_lock+0xe>
	}
}
 801ab92:	bf00      	nop
 801ab94:	bf00      	nop
 801ab96:	3714      	adds	r7, #20
 801ab98:	46bd      	mov	sp, r7
 801ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab9e:	4770      	bx	lr
 801aba0:	24000558 	.word	0x24000558

0801aba4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801aba4:	b580      	push	{r7, lr}
 801aba6:	b086      	sub	sp, #24
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801abac:	2300      	movs	r3, #0
 801abae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	78db      	ldrb	r3, [r3, #3]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d034      	beq.n	801ac22 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801abbc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	7858      	ldrb	r0, [r3, #1]
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801abc8:	2301      	movs	r3, #1
 801abca:	697a      	ldr	r2, [r7, #20]
 801abcc:	f7ff fd40 	bl	801a650 <disk_write>
 801abd0:	4603      	mov	r3, r0
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d002      	beq.n	801abdc <sync_window+0x38>
			res = FR_DISK_ERR;
 801abd6:	2301      	movs	r3, #1
 801abd8:	73fb      	strb	r3, [r7, #15]
 801abda:	e022      	b.n	801ac22 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	2200      	movs	r2, #0
 801abe0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801abe6:	697a      	ldr	r2, [r7, #20]
 801abe8:	1ad2      	subs	r2, r2, r3
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	6a1b      	ldr	r3, [r3, #32]
 801abee:	429a      	cmp	r2, r3
 801abf0:	d217      	bcs.n	801ac22 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	789b      	ldrb	r3, [r3, #2]
 801abf6:	613b      	str	r3, [r7, #16]
 801abf8:	e010      	b.n	801ac1c <sync_window+0x78>
					wsect += fs->fsize;
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	6a1b      	ldr	r3, [r3, #32]
 801abfe:	697a      	ldr	r2, [r7, #20]
 801ac00:	4413      	add	r3, r2
 801ac02:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	7858      	ldrb	r0, [r3, #1]
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ac0e:	2301      	movs	r3, #1
 801ac10:	697a      	ldr	r2, [r7, #20]
 801ac12:	f7ff fd1d 	bl	801a650 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801ac16:	693b      	ldr	r3, [r7, #16]
 801ac18:	3b01      	subs	r3, #1
 801ac1a:	613b      	str	r3, [r7, #16]
 801ac1c:	693b      	ldr	r3, [r7, #16]
 801ac1e:	2b01      	cmp	r3, #1
 801ac20:	d8eb      	bhi.n	801abfa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801ac22:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac24:	4618      	mov	r0, r3
 801ac26:	3718      	adds	r7, #24
 801ac28:	46bd      	mov	sp, r7
 801ac2a:	bd80      	pop	{r7, pc}

0801ac2c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801ac2c:	b580      	push	{r7, lr}
 801ac2e:	b084      	sub	sp, #16
 801ac30:	af00      	add	r7, sp, #0
 801ac32:	6078      	str	r0, [r7, #4]
 801ac34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801ac36:	2300      	movs	r3, #0
 801ac38:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ac3e:	683a      	ldr	r2, [r7, #0]
 801ac40:	429a      	cmp	r2, r3
 801ac42:	d01b      	beq.n	801ac7c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801ac44:	6878      	ldr	r0, [r7, #4]
 801ac46:	f7ff ffad 	bl	801aba4 <sync_window>
 801ac4a:	4603      	mov	r3, r0
 801ac4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801ac4e:	7bfb      	ldrb	r3, [r7, #15]
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d113      	bne.n	801ac7c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	7858      	ldrb	r0, [r3, #1]
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ac5e:	2301      	movs	r3, #1
 801ac60:	683a      	ldr	r2, [r7, #0]
 801ac62:	f7ff fcd5 	bl	801a610 <disk_read>
 801ac66:	4603      	mov	r3, r0
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d004      	beq.n	801ac76 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801ac6c:	f04f 33ff 	mov.w	r3, #4294967295
 801ac70:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801ac72:	2301      	movs	r3, #1
 801ac74:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	683a      	ldr	r2, [r7, #0]
 801ac7a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801ac7c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac7e:	4618      	mov	r0, r3
 801ac80:	3710      	adds	r7, #16
 801ac82:	46bd      	mov	sp, r7
 801ac84:	bd80      	pop	{r7, pc}
	...

0801ac88 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801ac88:	b580      	push	{r7, lr}
 801ac8a:	b084      	sub	sp, #16
 801ac8c:	af00      	add	r7, sp, #0
 801ac8e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801ac90:	6878      	ldr	r0, [r7, #4]
 801ac92:	f7ff ff87 	bl	801aba4 <sync_window>
 801ac96:	4603      	mov	r3, r0
 801ac98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801ac9a:	7bfb      	ldrb	r3, [r7, #15]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d159      	bne.n	801ad54 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	781b      	ldrb	r3, [r3, #0]
 801aca4:	2b03      	cmp	r3, #3
 801aca6:	d149      	bne.n	801ad3c <sync_fs+0xb4>
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	791b      	ldrb	r3, [r3, #4]
 801acac:	2b01      	cmp	r3, #1
 801acae:	d145      	bne.n	801ad3c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	899b      	ldrh	r3, [r3, #12]
 801acba:	461a      	mov	r2, r3
 801acbc:	2100      	movs	r1, #0
 801acbe:	f7ff fda8 	bl	801a812 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	3338      	adds	r3, #56	@ 0x38
 801acc6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801acca:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801acce:	4618      	mov	r0, r3
 801acd0:	f7ff fd37 	bl	801a742 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	3338      	adds	r3, #56	@ 0x38
 801acd8:	4921      	ldr	r1, [pc, #132]	@ (801ad60 <sync_fs+0xd8>)
 801acda:	4618      	mov	r0, r3
 801acdc:	f7ff fd4c 	bl	801a778 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	3338      	adds	r3, #56	@ 0x38
 801ace4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801ace8:	491e      	ldr	r1, [pc, #120]	@ (801ad64 <sync_fs+0xdc>)
 801acea:	4618      	mov	r0, r3
 801acec:	f7ff fd44 	bl	801a778 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	3338      	adds	r3, #56	@ 0x38
 801acf4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	699b      	ldr	r3, [r3, #24]
 801acfc:	4619      	mov	r1, r3
 801acfe:	4610      	mov	r0, r2
 801ad00:	f7ff fd3a 	bl	801a778 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	3338      	adds	r3, #56	@ 0x38
 801ad08:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	695b      	ldr	r3, [r3, #20]
 801ad10:	4619      	mov	r1, r3
 801ad12:	4610      	mov	r0, r2
 801ad14:	f7ff fd30 	bl	801a778 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ad1c:	1c5a      	adds	r2, r3, #1
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	7858      	ldrb	r0, [r3, #1]
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ad30:	2301      	movs	r3, #1
 801ad32:	f7ff fc8d 	bl	801a650 <disk_write>
			fs->fsi_flag = 0;
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	2200      	movs	r2, #0
 801ad3a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	785b      	ldrb	r3, [r3, #1]
 801ad40:	2200      	movs	r2, #0
 801ad42:	2100      	movs	r1, #0
 801ad44:	4618      	mov	r0, r3
 801ad46:	f7ff fca3 	bl	801a690 <disk_ioctl>
 801ad4a:	4603      	mov	r3, r0
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d001      	beq.n	801ad54 <sync_fs+0xcc>
 801ad50:	2301      	movs	r3, #1
 801ad52:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801ad54:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad56:	4618      	mov	r0, r3
 801ad58:	3710      	adds	r7, #16
 801ad5a:	46bd      	mov	sp, r7
 801ad5c:	bd80      	pop	{r7, pc}
 801ad5e:	bf00      	nop
 801ad60:	41615252 	.word	0x41615252
 801ad64:	61417272 	.word	0x61417272

0801ad68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801ad68:	b480      	push	{r7}
 801ad6a:	b083      	sub	sp, #12
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	6078      	str	r0, [r7, #4]
 801ad70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801ad72:	683b      	ldr	r3, [r7, #0]
 801ad74:	3b02      	subs	r3, #2
 801ad76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	69db      	ldr	r3, [r3, #28]
 801ad7c:	3b02      	subs	r3, #2
 801ad7e:	683a      	ldr	r2, [r7, #0]
 801ad80:	429a      	cmp	r2, r3
 801ad82:	d301      	bcc.n	801ad88 <clust2sect+0x20>
 801ad84:	2300      	movs	r3, #0
 801ad86:	e008      	b.n	801ad9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	895b      	ldrh	r3, [r3, #10]
 801ad8c:	461a      	mov	r2, r3
 801ad8e:	683b      	ldr	r3, [r7, #0]
 801ad90:	fb03 f202 	mul.w	r2, r3, r2
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ad98:	4413      	add	r3, r2
}
 801ad9a:	4618      	mov	r0, r3
 801ad9c:	370c      	adds	r7, #12
 801ad9e:	46bd      	mov	sp, r7
 801ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ada4:	4770      	bx	lr

0801ada6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801ada6:	b580      	push	{r7, lr}
 801ada8:	b086      	sub	sp, #24
 801adaa:	af00      	add	r7, sp, #0
 801adac:	6078      	str	r0, [r7, #4]
 801adae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801adb6:	683b      	ldr	r3, [r7, #0]
 801adb8:	2b01      	cmp	r3, #1
 801adba:	d904      	bls.n	801adc6 <get_fat+0x20>
 801adbc:	693b      	ldr	r3, [r7, #16]
 801adbe:	69db      	ldr	r3, [r3, #28]
 801adc0:	683a      	ldr	r2, [r7, #0]
 801adc2:	429a      	cmp	r2, r3
 801adc4:	d302      	bcc.n	801adcc <get_fat+0x26>
		val = 1;	/* Internal error */
 801adc6:	2301      	movs	r3, #1
 801adc8:	617b      	str	r3, [r7, #20]
 801adca:	e0ba      	b.n	801af42 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801adcc:	f04f 33ff 	mov.w	r3, #4294967295
 801add0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801add2:	693b      	ldr	r3, [r7, #16]
 801add4:	781b      	ldrb	r3, [r3, #0]
 801add6:	2b03      	cmp	r3, #3
 801add8:	f000 8082 	beq.w	801aee0 <get_fat+0x13a>
 801addc:	2b03      	cmp	r3, #3
 801adde:	f300 80a6 	bgt.w	801af2e <get_fat+0x188>
 801ade2:	2b01      	cmp	r3, #1
 801ade4:	d002      	beq.n	801adec <get_fat+0x46>
 801ade6:	2b02      	cmp	r3, #2
 801ade8:	d055      	beq.n	801ae96 <get_fat+0xf0>
 801adea:	e0a0      	b.n	801af2e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801adec:	683b      	ldr	r3, [r7, #0]
 801adee:	60fb      	str	r3, [r7, #12]
 801adf0:	68fb      	ldr	r3, [r7, #12]
 801adf2:	085b      	lsrs	r3, r3, #1
 801adf4:	68fa      	ldr	r2, [r7, #12]
 801adf6:	4413      	add	r3, r2
 801adf8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801adfa:	693b      	ldr	r3, [r7, #16]
 801adfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801adfe:	693b      	ldr	r3, [r7, #16]
 801ae00:	899b      	ldrh	r3, [r3, #12]
 801ae02:	4619      	mov	r1, r3
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	fbb3 f3f1 	udiv	r3, r3, r1
 801ae0a:	4413      	add	r3, r2
 801ae0c:	4619      	mov	r1, r3
 801ae0e:	6938      	ldr	r0, [r7, #16]
 801ae10:	f7ff ff0c 	bl	801ac2c <move_window>
 801ae14:	4603      	mov	r3, r0
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	f040 808c 	bne.w	801af34 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	1c5a      	adds	r2, r3, #1
 801ae20:	60fa      	str	r2, [r7, #12]
 801ae22:	693a      	ldr	r2, [r7, #16]
 801ae24:	8992      	ldrh	r2, [r2, #12]
 801ae26:	fbb3 f1f2 	udiv	r1, r3, r2
 801ae2a:	fb01 f202 	mul.w	r2, r1, r2
 801ae2e:	1a9b      	subs	r3, r3, r2
 801ae30:	693a      	ldr	r2, [r7, #16]
 801ae32:	4413      	add	r3, r2
 801ae34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801ae38:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801ae3a:	693b      	ldr	r3, [r7, #16]
 801ae3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ae3e:	693b      	ldr	r3, [r7, #16]
 801ae40:	899b      	ldrh	r3, [r3, #12]
 801ae42:	4619      	mov	r1, r3
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	fbb3 f3f1 	udiv	r3, r3, r1
 801ae4a:	4413      	add	r3, r2
 801ae4c:	4619      	mov	r1, r3
 801ae4e:	6938      	ldr	r0, [r7, #16]
 801ae50:	f7ff feec 	bl	801ac2c <move_window>
 801ae54:	4603      	mov	r3, r0
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d16e      	bne.n	801af38 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801ae5a:	693b      	ldr	r3, [r7, #16]
 801ae5c:	899b      	ldrh	r3, [r3, #12]
 801ae5e:	461a      	mov	r2, r3
 801ae60:	68fb      	ldr	r3, [r7, #12]
 801ae62:	fbb3 f1f2 	udiv	r1, r3, r2
 801ae66:	fb01 f202 	mul.w	r2, r1, r2
 801ae6a:	1a9b      	subs	r3, r3, r2
 801ae6c:	693a      	ldr	r2, [r7, #16]
 801ae6e:	4413      	add	r3, r2
 801ae70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801ae74:	021b      	lsls	r3, r3, #8
 801ae76:	68ba      	ldr	r2, [r7, #8]
 801ae78:	4313      	orrs	r3, r2
 801ae7a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801ae7c:	683b      	ldr	r3, [r7, #0]
 801ae7e:	f003 0301 	and.w	r3, r3, #1
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d002      	beq.n	801ae8c <get_fat+0xe6>
 801ae86:	68bb      	ldr	r3, [r7, #8]
 801ae88:	091b      	lsrs	r3, r3, #4
 801ae8a:	e002      	b.n	801ae92 <get_fat+0xec>
 801ae8c:	68bb      	ldr	r3, [r7, #8]
 801ae8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ae92:	617b      	str	r3, [r7, #20]
			break;
 801ae94:	e055      	b.n	801af42 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801ae96:	693b      	ldr	r3, [r7, #16]
 801ae98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ae9a:	693b      	ldr	r3, [r7, #16]
 801ae9c:	899b      	ldrh	r3, [r3, #12]
 801ae9e:	085b      	lsrs	r3, r3, #1
 801aea0:	b29b      	uxth	r3, r3
 801aea2:	4619      	mov	r1, r3
 801aea4:	683b      	ldr	r3, [r7, #0]
 801aea6:	fbb3 f3f1 	udiv	r3, r3, r1
 801aeaa:	4413      	add	r3, r2
 801aeac:	4619      	mov	r1, r3
 801aeae:	6938      	ldr	r0, [r7, #16]
 801aeb0:	f7ff febc 	bl	801ac2c <move_window>
 801aeb4:	4603      	mov	r3, r0
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d140      	bne.n	801af3c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801aeba:	693b      	ldr	r3, [r7, #16]
 801aebc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801aec0:	683b      	ldr	r3, [r7, #0]
 801aec2:	005b      	lsls	r3, r3, #1
 801aec4:	693a      	ldr	r2, [r7, #16]
 801aec6:	8992      	ldrh	r2, [r2, #12]
 801aec8:	fbb3 f0f2 	udiv	r0, r3, r2
 801aecc:	fb00 f202 	mul.w	r2, r0, r2
 801aed0:	1a9b      	subs	r3, r3, r2
 801aed2:	440b      	add	r3, r1
 801aed4:	4618      	mov	r0, r3
 801aed6:	f7ff fbf9 	bl	801a6cc <ld_word>
 801aeda:	4603      	mov	r3, r0
 801aedc:	617b      	str	r3, [r7, #20]
			break;
 801aede:	e030      	b.n	801af42 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801aee0:	693b      	ldr	r3, [r7, #16]
 801aee2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801aee4:	693b      	ldr	r3, [r7, #16]
 801aee6:	899b      	ldrh	r3, [r3, #12]
 801aee8:	089b      	lsrs	r3, r3, #2
 801aeea:	b29b      	uxth	r3, r3
 801aeec:	4619      	mov	r1, r3
 801aeee:	683b      	ldr	r3, [r7, #0]
 801aef0:	fbb3 f3f1 	udiv	r3, r3, r1
 801aef4:	4413      	add	r3, r2
 801aef6:	4619      	mov	r1, r3
 801aef8:	6938      	ldr	r0, [r7, #16]
 801aefa:	f7ff fe97 	bl	801ac2c <move_window>
 801aefe:	4603      	mov	r3, r0
 801af00:	2b00      	cmp	r3, #0
 801af02:	d11d      	bne.n	801af40 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801af04:	693b      	ldr	r3, [r7, #16]
 801af06:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801af0a:	683b      	ldr	r3, [r7, #0]
 801af0c:	009b      	lsls	r3, r3, #2
 801af0e:	693a      	ldr	r2, [r7, #16]
 801af10:	8992      	ldrh	r2, [r2, #12]
 801af12:	fbb3 f0f2 	udiv	r0, r3, r2
 801af16:	fb00 f202 	mul.w	r2, r0, r2
 801af1a:	1a9b      	subs	r3, r3, r2
 801af1c:	440b      	add	r3, r1
 801af1e:	4618      	mov	r0, r3
 801af20:	f7ff fbec 	bl	801a6fc <ld_dword>
 801af24:	4603      	mov	r3, r0
 801af26:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801af2a:	617b      	str	r3, [r7, #20]
			break;
 801af2c:	e009      	b.n	801af42 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801af2e:	2301      	movs	r3, #1
 801af30:	617b      	str	r3, [r7, #20]
 801af32:	e006      	b.n	801af42 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801af34:	bf00      	nop
 801af36:	e004      	b.n	801af42 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801af38:	bf00      	nop
 801af3a:	e002      	b.n	801af42 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801af3c:	bf00      	nop
 801af3e:	e000      	b.n	801af42 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801af40:	bf00      	nop
		}
	}

	return val;
 801af42:	697b      	ldr	r3, [r7, #20]
}
 801af44:	4618      	mov	r0, r3
 801af46:	3718      	adds	r7, #24
 801af48:	46bd      	mov	sp, r7
 801af4a:	bd80      	pop	{r7, pc}

0801af4c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801af4c:	b590      	push	{r4, r7, lr}
 801af4e:	b089      	sub	sp, #36	@ 0x24
 801af50:	af00      	add	r7, sp, #0
 801af52:	60f8      	str	r0, [r7, #12]
 801af54:	60b9      	str	r1, [r7, #8]
 801af56:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801af58:	2302      	movs	r3, #2
 801af5a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801af5c:	68bb      	ldr	r3, [r7, #8]
 801af5e:	2b01      	cmp	r3, #1
 801af60:	f240 8109 	bls.w	801b176 <put_fat+0x22a>
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	69db      	ldr	r3, [r3, #28]
 801af68:	68ba      	ldr	r2, [r7, #8]
 801af6a:	429a      	cmp	r2, r3
 801af6c:	f080 8103 	bcs.w	801b176 <put_fat+0x22a>
		switch (fs->fs_type) {
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	781b      	ldrb	r3, [r3, #0]
 801af74:	2b03      	cmp	r3, #3
 801af76:	f000 80b6 	beq.w	801b0e6 <put_fat+0x19a>
 801af7a:	2b03      	cmp	r3, #3
 801af7c:	f300 80fb 	bgt.w	801b176 <put_fat+0x22a>
 801af80:	2b01      	cmp	r3, #1
 801af82:	d003      	beq.n	801af8c <put_fat+0x40>
 801af84:	2b02      	cmp	r3, #2
 801af86:	f000 8083 	beq.w	801b090 <put_fat+0x144>
 801af8a:	e0f4      	b.n	801b176 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801af8c:	68bb      	ldr	r3, [r7, #8]
 801af8e:	61bb      	str	r3, [r7, #24]
 801af90:	69bb      	ldr	r3, [r7, #24]
 801af92:	085b      	lsrs	r3, r3, #1
 801af94:	69ba      	ldr	r2, [r7, #24]
 801af96:	4413      	add	r3, r2
 801af98:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	899b      	ldrh	r3, [r3, #12]
 801afa2:	4619      	mov	r1, r3
 801afa4:	69bb      	ldr	r3, [r7, #24]
 801afa6:	fbb3 f3f1 	udiv	r3, r3, r1
 801afaa:	4413      	add	r3, r2
 801afac:	4619      	mov	r1, r3
 801afae:	68f8      	ldr	r0, [r7, #12]
 801afb0:	f7ff fe3c 	bl	801ac2c <move_window>
 801afb4:	4603      	mov	r3, r0
 801afb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801afb8:	7ffb      	ldrb	r3, [r7, #31]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	f040 80d4 	bne.w	801b168 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801afc6:	69bb      	ldr	r3, [r7, #24]
 801afc8:	1c5a      	adds	r2, r3, #1
 801afca:	61ba      	str	r2, [r7, #24]
 801afcc:	68fa      	ldr	r2, [r7, #12]
 801afce:	8992      	ldrh	r2, [r2, #12]
 801afd0:	fbb3 f0f2 	udiv	r0, r3, r2
 801afd4:	fb00 f202 	mul.w	r2, r0, r2
 801afd8:	1a9b      	subs	r3, r3, r2
 801afda:	440b      	add	r3, r1
 801afdc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801afde:	68bb      	ldr	r3, [r7, #8]
 801afe0:	f003 0301 	and.w	r3, r3, #1
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d00d      	beq.n	801b004 <put_fat+0xb8>
 801afe8:	697b      	ldr	r3, [r7, #20]
 801afea:	781b      	ldrb	r3, [r3, #0]
 801afec:	b25b      	sxtb	r3, r3
 801afee:	f003 030f 	and.w	r3, r3, #15
 801aff2:	b25a      	sxtb	r2, r3
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	b2db      	uxtb	r3, r3
 801aff8:	011b      	lsls	r3, r3, #4
 801affa:	b25b      	sxtb	r3, r3
 801affc:	4313      	orrs	r3, r2
 801affe:	b25b      	sxtb	r3, r3
 801b000:	b2db      	uxtb	r3, r3
 801b002:	e001      	b.n	801b008 <put_fat+0xbc>
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	b2db      	uxtb	r3, r3
 801b008:	697a      	ldr	r2, [r7, #20]
 801b00a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	2201      	movs	r2, #1
 801b010:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b016:	68fb      	ldr	r3, [r7, #12]
 801b018:	899b      	ldrh	r3, [r3, #12]
 801b01a:	4619      	mov	r1, r3
 801b01c:	69bb      	ldr	r3, [r7, #24]
 801b01e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b022:	4413      	add	r3, r2
 801b024:	4619      	mov	r1, r3
 801b026:	68f8      	ldr	r0, [r7, #12]
 801b028:	f7ff fe00 	bl	801ac2c <move_window>
 801b02c:	4603      	mov	r3, r0
 801b02e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b030:	7ffb      	ldrb	r3, [r7, #31]
 801b032:	2b00      	cmp	r3, #0
 801b034:	f040 809a 	bne.w	801b16c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	899b      	ldrh	r3, [r3, #12]
 801b042:	461a      	mov	r2, r3
 801b044:	69bb      	ldr	r3, [r7, #24]
 801b046:	fbb3 f0f2 	udiv	r0, r3, r2
 801b04a:	fb00 f202 	mul.w	r2, r0, r2
 801b04e:	1a9b      	subs	r3, r3, r2
 801b050:	440b      	add	r3, r1
 801b052:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b054:	68bb      	ldr	r3, [r7, #8]
 801b056:	f003 0301 	and.w	r3, r3, #1
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d003      	beq.n	801b066 <put_fat+0x11a>
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	091b      	lsrs	r3, r3, #4
 801b062:	b2db      	uxtb	r3, r3
 801b064:	e00e      	b.n	801b084 <put_fat+0x138>
 801b066:	697b      	ldr	r3, [r7, #20]
 801b068:	781b      	ldrb	r3, [r3, #0]
 801b06a:	b25b      	sxtb	r3, r3
 801b06c:	f023 030f 	bic.w	r3, r3, #15
 801b070:	b25a      	sxtb	r2, r3
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	0a1b      	lsrs	r3, r3, #8
 801b076:	b25b      	sxtb	r3, r3
 801b078:	f003 030f 	and.w	r3, r3, #15
 801b07c:	b25b      	sxtb	r3, r3
 801b07e:	4313      	orrs	r3, r2
 801b080:	b25b      	sxtb	r3, r3
 801b082:	b2db      	uxtb	r3, r3
 801b084:	697a      	ldr	r2, [r7, #20]
 801b086:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b088:	68fb      	ldr	r3, [r7, #12]
 801b08a:	2201      	movs	r2, #1
 801b08c:	70da      	strb	r2, [r3, #3]
			break;
 801b08e:	e072      	b.n	801b176 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b090:	68fb      	ldr	r3, [r7, #12]
 801b092:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b094:	68fb      	ldr	r3, [r7, #12]
 801b096:	899b      	ldrh	r3, [r3, #12]
 801b098:	085b      	lsrs	r3, r3, #1
 801b09a:	b29b      	uxth	r3, r3
 801b09c:	4619      	mov	r1, r3
 801b09e:	68bb      	ldr	r3, [r7, #8]
 801b0a0:	fbb3 f3f1 	udiv	r3, r3, r1
 801b0a4:	4413      	add	r3, r2
 801b0a6:	4619      	mov	r1, r3
 801b0a8:	68f8      	ldr	r0, [r7, #12]
 801b0aa:	f7ff fdbf 	bl	801ac2c <move_window>
 801b0ae:	4603      	mov	r3, r0
 801b0b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b0b2:	7ffb      	ldrb	r3, [r7, #31]
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d15b      	bne.n	801b170 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b0b8:	68fb      	ldr	r3, [r7, #12]
 801b0ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b0be:	68bb      	ldr	r3, [r7, #8]
 801b0c0:	005b      	lsls	r3, r3, #1
 801b0c2:	68fa      	ldr	r2, [r7, #12]
 801b0c4:	8992      	ldrh	r2, [r2, #12]
 801b0c6:	fbb3 f0f2 	udiv	r0, r3, r2
 801b0ca:	fb00 f202 	mul.w	r2, r0, r2
 801b0ce:	1a9b      	subs	r3, r3, r2
 801b0d0:	440b      	add	r3, r1
 801b0d2:	687a      	ldr	r2, [r7, #4]
 801b0d4:	b292      	uxth	r2, r2
 801b0d6:	4611      	mov	r1, r2
 801b0d8:	4618      	mov	r0, r3
 801b0da:	f7ff fb32 	bl	801a742 <st_word>
			fs->wflag = 1;
 801b0de:	68fb      	ldr	r3, [r7, #12]
 801b0e0:	2201      	movs	r2, #1
 801b0e2:	70da      	strb	r2, [r3, #3]
			break;
 801b0e4:	e047      	b.n	801b176 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	899b      	ldrh	r3, [r3, #12]
 801b0ee:	089b      	lsrs	r3, r3, #2
 801b0f0:	b29b      	uxth	r3, r3
 801b0f2:	4619      	mov	r1, r3
 801b0f4:	68bb      	ldr	r3, [r7, #8]
 801b0f6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b0fa:	4413      	add	r3, r2
 801b0fc:	4619      	mov	r1, r3
 801b0fe:	68f8      	ldr	r0, [r7, #12]
 801b100:	f7ff fd94 	bl	801ac2c <move_window>
 801b104:	4603      	mov	r3, r0
 801b106:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b108:	7ffb      	ldrb	r3, [r7, #31]
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d132      	bne.n	801b174 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b11a:	68bb      	ldr	r3, [r7, #8]
 801b11c:	009b      	lsls	r3, r3, #2
 801b11e:	68fa      	ldr	r2, [r7, #12]
 801b120:	8992      	ldrh	r2, [r2, #12]
 801b122:	fbb3 f0f2 	udiv	r0, r3, r2
 801b126:	fb00 f202 	mul.w	r2, r0, r2
 801b12a:	1a9b      	subs	r3, r3, r2
 801b12c:	440b      	add	r3, r1
 801b12e:	4618      	mov	r0, r3
 801b130:	f7ff fae4 	bl	801a6fc <ld_dword>
 801b134:	4603      	mov	r3, r0
 801b136:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b13a:	4323      	orrs	r3, r4
 801b13c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b13e:	68fb      	ldr	r3, [r7, #12]
 801b140:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b144:	68bb      	ldr	r3, [r7, #8]
 801b146:	009b      	lsls	r3, r3, #2
 801b148:	68fa      	ldr	r2, [r7, #12]
 801b14a:	8992      	ldrh	r2, [r2, #12]
 801b14c:	fbb3 f0f2 	udiv	r0, r3, r2
 801b150:	fb00 f202 	mul.w	r2, r0, r2
 801b154:	1a9b      	subs	r3, r3, r2
 801b156:	440b      	add	r3, r1
 801b158:	6879      	ldr	r1, [r7, #4]
 801b15a:	4618      	mov	r0, r3
 801b15c:	f7ff fb0c 	bl	801a778 <st_dword>
			fs->wflag = 1;
 801b160:	68fb      	ldr	r3, [r7, #12]
 801b162:	2201      	movs	r2, #1
 801b164:	70da      	strb	r2, [r3, #3]
			break;
 801b166:	e006      	b.n	801b176 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b168:	bf00      	nop
 801b16a:	e004      	b.n	801b176 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b16c:	bf00      	nop
 801b16e:	e002      	b.n	801b176 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b170:	bf00      	nop
 801b172:	e000      	b.n	801b176 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b174:	bf00      	nop
		}
	}
	return res;
 801b176:	7ffb      	ldrb	r3, [r7, #31]
}
 801b178:	4618      	mov	r0, r3
 801b17a:	3724      	adds	r7, #36	@ 0x24
 801b17c:	46bd      	mov	sp, r7
 801b17e:	bd90      	pop	{r4, r7, pc}

0801b180 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b180:	b580      	push	{r7, lr}
 801b182:	b088      	sub	sp, #32
 801b184:	af00      	add	r7, sp, #0
 801b186:	60f8      	str	r0, [r7, #12]
 801b188:	60b9      	str	r1, [r7, #8]
 801b18a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b18c:	2300      	movs	r3, #0
 801b18e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b190:	68fb      	ldr	r3, [r7, #12]
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b196:	68bb      	ldr	r3, [r7, #8]
 801b198:	2b01      	cmp	r3, #1
 801b19a:	d904      	bls.n	801b1a6 <remove_chain+0x26>
 801b19c:	69bb      	ldr	r3, [r7, #24]
 801b19e:	69db      	ldr	r3, [r3, #28]
 801b1a0:	68ba      	ldr	r2, [r7, #8]
 801b1a2:	429a      	cmp	r2, r3
 801b1a4:	d301      	bcc.n	801b1aa <remove_chain+0x2a>
 801b1a6:	2302      	movs	r3, #2
 801b1a8:	e04b      	b.n	801b242 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d00c      	beq.n	801b1ca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b1b0:	f04f 32ff 	mov.w	r2, #4294967295
 801b1b4:	6879      	ldr	r1, [r7, #4]
 801b1b6:	69b8      	ldr	r0, [r7, #24]
 801b1b8:	f7ff fec8 	bl	801af4c <put_fat>
 801b1bc:	4603      	mov	r3, r0
 801b1be:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b1c0:	7ffb      	ldrb	r3, [r7, #31]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d001      	beq.n	801b1ca <remove_chain+0x4a>
 801b1c6:	7ffb      	ldrb	r3, [r7, #31]
 801b1c8:	e03b      	b.n	801b242 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b1ca:	68b9      	ldr	r1, [r7, #8]
 801b1cc:	68f8      	ldr	r0, [r7, #12]
 801b1ce:	f7ff fdea 	bl	801ada6 <get_fat>
 801b1d2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b1d4:	697b      	ldr	r3, [r7, #20]
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	d031      	beq.n	801b23e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b1da:	697b      	ldr	r3, [r7, #20]
 801b1dc:	2b01      	cmp	r3, #1
 801b1de:	d101      	bne.n	801b1e4 <remove_chain+0x64>
 801b1e0:	2302      	movs	r3, #2
 801b1e2:	e02e      	b.n	801b242 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b1e4:	697b      	ldr	r3, [r7, #20]
 801b1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b1ea:	d101      	bne.n	801b1f0 <remove_chain+0x70>
 801b1ec:	2301      	movs	r3, #1
 801b1ee:	e028      	b.n	801b242 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b1f0:	2200      	movs	r2, #0
 801b1f2:	68b9      	ldr	r1, [r7, #8]
 801b1f4:	69b8      	ldr	r0, [r7, #24]
 801b1f6:	f7ff fea9 	bl	801af4c <put_fat>
 801b1fa:	4603      	mov	r3, r0
 801b1fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b1fe:	7ffb      	ldrb	r3, [r7, #31]
 801b200:	2b00      	cmp	r3, #0
 801b202:	d001      	beq.n	801b208 <remove_chain+0x88>
 801b204:	7ffb      	ldrb	r3, [r7, #31]
 801b206:	e01c      	b.n	801b242 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b208:	69bb      	ldr	r3, [r7, #24]
 801b20a:	699a      	ldr	r2, [r3, #24]
 801b20c:	69bb      	ldr	r3, [r7, #24]
 801b20e:	69db      	ldr	r3, [r3, #28]
 801b210:	3b02      	subs	r3, #2
 801b212:	429a      	cmp	r2, r3
 801b214:	d20b      	bcs.n	801b22e <remove_chain+0xae>
			fs->free_clst++;
 801b216:	69bb      	ldr	r3, [r7, #24]
 801b218:	699b      	ldr	r3, [r3, #24]
 801b21a:	1c5a      	adds	r2, r3, #1
 801b21c:	69bb      	ldr	r3, [r7, #24]
 801b21e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801b220:	69bb      	ldr	r3, [r7, #24]
 801b222:	791b      	ldrb	r3, [r3, #4]
 801b224:	f043 0301 	orr.w	r3, r3, #1
 801b228:	b2da      	uxtb	r2, r3
 801b22a:	69bb      	ldr	r3, [r7, #24]
 801b22c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b22e:	697b      	ldr	r3, [r7, #20]
 801b230:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b232:	69bb      	ldr	r3, [r7, #24]
 801b234:	69db      	ldr	r3, [r3, #28]
 801b236:	68ba      	ldr	r2, [r7, #8]
 801b238:	429a      	cmp	r2, r3
 801b23a:	d3c6      	bcc.n	801b1ca <remove_chain+0x4a>
 801b23c:	e000      	b.n	801b240 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b23e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b240:	2300      	movs	r3, #0
}
 801b242:	4618      	mov	r0, r3
 801b244:	3720      	adds	r7, #32
 801b246:	46bd      	mov	sp, r7
 801b248:	bd80      	pop	{r7, pc}

0801b24a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b24a:	b580      	push	{r7, lr}
 801b24c:	b088      	sub	sp, #32
 801b24e:	af00      	add	r7, sp, #0
 801b250:	6078      	str	r0, [r7, #4]
 801b252:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b25a:	683b      	ldr	r3, [r7, #0]
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d10d      	bne.n	801b27c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b260:	693b      	ldr	r3, [r7, #16]
 801b262:	695b      	ldr	r3, [r3, #20]
 801b264:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b266:	69bb      	ldr	r3, [r7, #24]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d004      	beq.n	801b276 <create_chain+0x2c>
 801b26c:	693b      	ldr	r3, [r7, #16]
 801b26e:	69db      	ldr	r3, [r3, #28]
 801b270:	69ba      	ldr	r2, [r7, #24]
 801b272:	429a      	cmp	r2, r3
 801b274:	d31b      	bcc.n	801b2ae <create_chain+0x64>
 801b276:	2301      	movs	r3, #1
 801b278:	61bb      	str	r3, [r7, #24]
 801b27a:	e018      	b.n	801b2ae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b27c:	6839      	ldr	r1, [r7, #0]
 801b27e:	6878      	ldr	r0, [r7, #4]
 801b280:	f7ff fd91 	bl	801ada6 <get_fat>
 801b284:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	2b01      	cmp	r3, #1
 801b28a:	d801      	bhi.n	801b290 <create_chain+0x46>
 801b28c:	2301      	movs	r3, #1
 801b28e:	e070      	b.n	801b372 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b290:	68fb      	ldr	r3, [r7, #12]
 801b292:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b296:	d101      	bne.n	801b29c <create_chain+0x52>
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	e06a      	b.n	801b372 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b29c:	693b      	ldr	r3, [r7, #16]
 801b29e:	69db      	ldr	r3, [r3, #28]
 801b2a0:	68fa      	ldr	r2, [r7, #12]
 801b2a2:	429a      	cmp	r2, r3
 801b2a4:	d201      	bcs.n	801b2aa <create_chain+0x60>
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	e063      	b.n	801b372 <create_chain+0x128>
		scl = clst;
 801b2aa:	683b      	ldr	r3, [r7, #0]
 801b2ac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b2ae:	69bb      	ldr	r3, [r7, #24]
 801b2b0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b2b2:	69fb      	ldr	r3, [r7, #28]
 801b2b4:	3301      	adds	r3, #1
 801b2b6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b2b8:	693b      	ldr	r3, [r7, #16]
 801b2ba:	69db      	ldr	r3, [r3, #28]
 801b2bc:	69fa      	ldr	r2, [r7, #28]
 801b2be:	429a      	cmp	r2, r3
 801b2c0:	d307      	bcc.n	801b2d2 <create_chain+0x88>
				ncl = 2;
 801b2c2:	2302      	movs	r3, #2
 801b2c4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b2c6:	69fa      	ldr	r2, [r7, #28]
 801b2c8:	69bb      	ldr	r3, [r7, #24]
 801b2ca:	429a      	cmp	r2, r3
 801b2cc:	d901      	bls.n	801b2d2 <create_chain+0x88>
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	e04f      	b.n	801b372 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b2d2:	69f9      	ldr	r1, [r7, #28]
 801b2d4:	6878      	ldr	r0, [r7, #4]
 801b2d6:	f7ff fd66 	bl	801ada6 <get_fat>
 801b2da:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d00e      	beq.n	801b300 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b2e2:	68fb      	ldr	r3, [r7, #12]
 801b2e4:	2b01      	cmp	r3, #1
 801b2e6:	d003      	beq.n	801b2f0 <create_chain+0xa6>
 801b2e8:	68fb      	ldr	r3, [r7, #12]
 801b2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b2ee:	d101      	bne.n	801b2f4 <create_chain+0xaa>
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	e03e      	b.n	801b372 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b2f4:	69fa      	ldr	r2, [r7, #28]
 801b2f6:	69bb      	ldr	r3, [r7, #24]
 801b2f8:	429a      	cmp	r2, r3
 801b2fa:	d1da      	bne.n	801b2b2 <create_chain+0x68>
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	e038      	b.n	801b372 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b300:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b302:	f04f 32ff 	mov.w	r2, #4294967295
 801b306:	69f9      	ldr	r1, [r7, #28]
 801b308:	6938      	ldr	r0, [r7, #16]
 801b30a:	f7ff fe1f 	bl	801af4c <put_fat>
 801b30e:	4603      	mov	r3, r0
 801b310:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b312:	7dfb      	ldrb	r3, [r7, #23]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d109      	bne.n	801b32c <create_chain+0xe2>
 801b318:	683b      	ldr	r3, [r7, #0]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d006      	beq.n	801b32c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b31e:	69fa      	ldr	r2, [r7, #28]
 801b320:	6839      	ldr	r1, [r7, #0]
 801b322:	6938      	ldr	r0, [r7, #16]
 801b324:	f7ff fe12 	bl	801af4c <put_fat>
 801b328:	4603      	mov	r3, r0
 801b32a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b32c:	7dfb      	ldrb	r3, [r7, #23]
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d116      	bne.n	801b360 <create_chain+0x116>
		fs->last_clst = ncl;
 801b332:	693b      	ldr	r3, [r7, #16]
 801b334:	69fa      	ldr	r2, [r7, #28]
 801b336:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b338:	693b      	ldr	r3, [r7, #16]
 801b33a:	699a      	ldr	r2, [r3, #24]
 801b33c:	693b      	ldr	r3, [r7, #16]
 801b33e:	69db      	ldr	r3, [r3, #28]
 801b340:	3b02      	subs	r3, #2
 801b342:	429a      	cmp	r2, r3
 801b344:	d804      	bhi.n	801b350 <create_chain+0x106>
 801b346:	693b      	ldr	r3, [r7, #16]
 801b348:	699b      	ldr	r3, [r3, #24]
 801b34a:	1e5a      	subs	r2, r3, #1
 801b34c:	693b      	ldr	r3, [r7, #16]
 801b34e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801b350:	693b      	ldr	r3, [r7, #16]
 801b352:	791b      	ldrb	r3, [r3, #4]
 801b354:	f043 0301 	orr.w	r3, r3, #1
 801b358:	b2da      	uxtb	r2, r3
 801b35a:	693b      	ldr	r3, [r7, #16]
 801b35c:	711a      	strb	r2, [r3, #4]
 801b35e:	e007      	b.n	801b370 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b360:	7dfb      	ldrb	r3, [r7, #23]
 801b362:	2b01      	cmp	r3, #1
 801b364:	d102      	bne.n	801b36c <create_chain+0x122>
 801b366:	f04f 33ff 	mov.w	r3, #4294967295
 801b36a:	e000      	b.n	801b36e <create_chain+0x124>
 801b36c:	2301      	movs	r3, #1
 801b36e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b370:	69fb      	ldr	r3, [r7, #28]
}
 801b372:	4618      	mov	r0, r3
 801b374:	3720      	adds	r7, #32
 801b376:	46bd      	mov	sp, r7
 801b378:	bd80      	pop	{r7, pc}

0801b37a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b37a:	b480      	push	{r7}
 801b37c:	b087      	sub	sp, #28
 801b37e:	af00      	add	r7, sp, #0
 801b380:	6078      	str	r0, [r7, #4]
 801b382:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b38e:	3304      	adds	r3, #4
 801b390:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	899b      	ldrh	r3, [r3, #12]
 801b396:	461a      	mov	r2, r3
 801b398:	683b      	ldr	r3, [r7, #0]
 801b39a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b39e:	68fa      	ldr	r2, [r7, #12]
 801b3a0:	8952      	ldrh	r2, [r2, #10]
 801b3a2:	fbb3 f3f2 	udiv	r3, r3, r2
 801b3a6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b3a8:	693b      	ldr	r3, [r7, #16]
 801b3aa:	1d1a      	adds	r2, r3, #4
 801b3ac:	613a      	str	r2, [r7, #16]
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b3b2:	68bb      	ldr	r3, [r7, #8]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d101      	bne.n	801b3bc <clmt_clust+0x42>
 801b3b8:	2300      	movs	r3, #0
 801b3ba:	e010      	b.n	801b3de <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801b3bc:	697a      	ldr	r2, [r7, #20]
 801b3be:	68bb      	ldr	r3, [r7, #8]
 801b3c0:	429a      	cmp	r2, r3
 801b3c2:	d307      	bcc.n	801b3d4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801b3c4:	697a      	ldr	r2, [r7, #20]
 801b3c6:	68bb      	ldr	r3, [r7, #8]
 801b3c8:	1ad3      	subs	r3, r2, r3
 801b3ca:	617b      	str	r3, [r7, #20]
 801b3cc:	693b      	ldr	r3, [r7, #16]
 801b3ce:	3304      	adds	r3, #4
 801b3d0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b3d2:	e7e9      	b.n	801b3a8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801b3d4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b3d6:	693b      	ldr	r3, [r7, #16]
 801b3d8:	681a      	ldr	r2, [r3, #0]
 801b3da:	697b      	ldr	r3, [r7, #20]
 801b3dc:	4413      	add	r3, r2
}
 801b3de:	4618      	mov	r0, r3
 801b3e0:	371c      	adds	r7, #28
 801b3e2:	46bd      	mov	sp, r7
 801b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3e8:	4770      	bx	lr

0801b3ea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b3ea:	b580      	push	{r7, lr}
 801b3ec:	b086      	sub	sp, #24
 801b3ee:	af00      	add	r7, sp, #0
 801b3f0:	6078      	str	r0, [r7, #4]
 801b3f2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b3fa:	683b      	ldr	r3, [r7, #0]
 801b3fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b400:	d204      	bcs.n	801b40c <dir_sdi+0x22>
 801b402:	683b      	ldr	r3, [r7, #0]
 801b404:	f003 031f 	and.w	r3, r3, #31
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d001      	beq.n	801b410 <dir_sdi+0x26>
		return FR_INT_ERR;
 801b40c:	2302      	movs	r3, #2
 801b40e:	e071      	b.n	801b4f4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	683a      	ldr	r2, [r7, #0]
 801b414:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	689b      	ldr	r3, [r3, #8]
 801b41a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b41c:	697b      	ldr	r3, [r7, #20]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d106      	bne.n	801b430 <dir_sdi+0x46>
 801b422:	693b      	ldr	r3, [r7, #16]
 801b424:	781b      	ldrb	r3, [r3, #0]
 801b426:	2b02      	cmp	r3, #2
 801b428:	d902      	bls.n	801b430 <dir_sdi+0x46>
		clst = fs->dirbase;
 801b42a:	693b      	ldr	r3, [r7, #16]
 801b42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b42e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801b430:	697b      	ldr	r3, [r7, #20]
 801b432:	2b00      	cmp	r3, #0
 801b434:	d10c      	bne.n	801b450 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801b436:	683b      	ldr	r3, [r7, #0]
 801b438:	095b      	lsrs	r3, r3, #5
 801b43a:	693a      	ldr	r2, [r7, #16]
 801b43c:	8912      	ldrh	r2, [r2, #8]
 801b43e:	4293      	cmp	r3, r2
 801b440:	d301      	bcc.n	801b446 <dir_sdi+0x5c>
 801b442:	2302      	movs	r3, #2
 801b444:	e056      	b.n	801b4f4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801b446:	693b      	ldr	r3, [r7, #16]
 801b448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	61da      	str	r2, [r3, #28]
 801b44e:	e02d      	b.n	801b4ac <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801b450:	693b      	ldr	r3, [r7, #16]
 801b452:	895b      	ldrh	r3, [r3, #10]
 801b454:	461a      	mov	r2, r3
 801b456:	693b      	ldr	r3, [r7, #16]
 801b458:	899b      	ldrh	r3, [r3, #12]
 801b45a:	fb02 f303 	mul.w	r3, r2, r3
 801b45e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b460:	e019      	b.n	801b496 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	6979      	ldr	r1, [r7, #20]
 801b466:	4618      	mov	r0, r3
 801b468:	f7ff fc9d 	bl	801ada6 <get_fat>
 801b46c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b46e:	697b      	ldr	r3, [r7, #20]
 801b470:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b474:	d101      	bne.n	801b47a <dir_sdi+0x90>
 801b476:	2301      	movs	r3, #1
 801b478:	e03c      	b.n	801b4f4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801b47a:	697b      	ldr	r3, [r7, #20]
 801b47c:	2b01      	cmp	r3, #1
 801b47e:	d904      	bls.n	801b48a <dir_sdi+0xa0>
 801b480:	693b      	ldr	r3, [r7, #16]
 801b482:	69db      	ldr	r3, [r3, #28]
 801b484:	697a      	ldr	r2, [r7, #20]
 801b486:	429a      	cmp	r2, r3
 801b488:	d301      	bcc.n	801b48e <dir_sdi+0xa4>
 801b48a:	2302      	movs	r3, #2
 801b48c:	e032      	b.n	801b4f4 <dir_sdi+0x10a>
			ofs -= csz;
 801b48e:	683a      	ldr	r2, [r7, #0]
 801b490:	68fb      	ldr	r3, [r7, #12]
 801b492:	1ad3      	subs	r3, r2, r3
 801b494:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b496:	683a      	ldr	r2, [r7, #0]
 801b498:	68fb      	ldr	r3, [r7, #12]
 801b49a:	429a      	cmp	r2, r3
 801b49c:	d2e1      	bcs.n	801b462 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801b49e:	6979      	ldr	r1, [r7, #20]
 801b4a0:	6938      	ldr	r0, [r7, #16]
 801b4a2:	f7ff fc61 	bl	801ad68 <clust2sect>
 801b4a6:	4602      	mov	r2, r0
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	697a      	ldr	r2, [r7, #20]
 801b4b0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	69db      	ldr	r3, [r3, #28]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d101      	bne.n	801b4be <dir_sdi+0xd4>
 801b4ba:	2302      	movs	r3, #2
 801b4bc:	e01a      	b.n	801b4f4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	69da      	ldr	r2, [r3, #28]
 801b4c2:	693b      	ldr	r3, [r7, #16]
 801b4c4:	899b      	ldrh	r3, [r3, #12]
 801b4c6:	4619      	mov	r1, r3
 801b4c8:	683b      	ldr	r3, [r7, #0]
 801b4ca:	fbb3 f3f1 	udiv	r3, r3, r1
 801b4ce:	441a      	add	r2, r3
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801b4d4:	693b      	ldr	r3, [r7, #16]
 801b4d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4da:	693b      	ldr	r3, [r7, #16]
 801b4dc:	899b      	ldrh	r3, [r3, #12]
 801b4de:	461a      	mov	r2, r3
 801b4e0:	683b      	ldr	r3, [r7, #0]
 801b4e2:	fbb3 f0f2 	udiv	r0, r3, r2
 801b4e6:	fb00 f202 	mul.w	r2, r0, r2
 801b4ea:	1a9b      	subs	r3, r3, r2
 801b4ec:	18ca      	adds	r2, r1, r3
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b4f2:	2300      	movs	r3, #0
}
 801b4f4:	4618      	mov	r0, r3
 801b4f6:	3718      	adds	r7, #24
 801b4f8:	46bd      	mov	sp, r7
 801b4fa:	bd80      	pop	{r7, pc}

0801b4fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801b4fc:	b580      	push	{r7, lr}
 801b4fe:	b086      	sub	sp, #24
 801b500:	af00      	add	r7, sp, #0
 801b502:	6078      	str	r0, [r7, #4]
 801b504:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	695b      	ldr	r3, [r3, #20]
 801b510:	3320      	adds	r3, #32
 801b512:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	69db      	ldr	r3, [r3, #28]
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d003      	beq.n	801b524 <dir_next+0x28>
 801b51c:	68bb      	ldr	r3, [r7, #8]
 801b51e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b522:	d301      	bcc.n	801b528 <dir_next+0x2c>
 801b524:	2304      	movs	r3, #4
 801b526:	e0bb      	b.n	801b6a0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	899b      	ldrh	r3, [r3, #12]
 801b52c:	461a      	mov	r2, r3
 801b52e:	68bb      	ldr	r3, [r7, #8]
 801b530:	fbb3 f1f2 	udiv	r1, r3, r2
 801b534:	fb01 f202 	mul.w	r2, r1, r2
 801b538:	1a9b      	subs	r3, r3, r2
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	f040 809d 	bne.w	801b67a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	69db      	ldr	r3, [r3, #28]
 801b544:	1c5a      	adds	r2, r3, #1
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	699b      	ldr	r3, [r3, #24]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d10b      	bne.n	801b56a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801b552:	68bb      	ldr	r3, [r7, #8]
 801b554:	095b      	lsrs	r3, r3, #5
 801b556:	68fa      	ldr	r2, [r7, #12]
 801b558:	8912      	ldrh	r2, [r2, #8]
 801b55a:	4293      	cmp	r3, r2
 801b55c:	f0c0 808d 	bcc.w	801b67a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	2200      	movs	r2, #0
 801b564:	61da      	str	r2, [r3, #28]
 801b566:	2304      	movs	r3, #4
 801b568:	e09a      	b.n	801b6a0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	899b      	ldrh	r3, [r3, #12]
 801b56e:	461a      	mov	r2, r3
 801b570:	68bb      	ldr	r3, [r7, #8]
 801b572:	fbb3 f3f2 	udiv	r3, r3, r2
 801b576:	68fa      	ldr	r2, [r7, #12]
 801b578:	8952      	ldrh	r2, [r2, #10]
 801b57a:	3a01      	subs	r2, #1
 801b57c:	4013      	ands	r3, r2
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d17b      	bne.n	801b67a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801b582:	687a      	ldr	r2, [r7, #4]
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	699b      	ldr	r3, [r3, #24]
 801b588:	4619      	mov	r1, r3
 801b58a:	4610      	mov	r0, r2
 801b58c:	f7ff fc0b 	bl	801ada6 <get_fat>
 801b590:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801b592:	697b      	ldr	r3, [r7, #20]
 801b594:	2b01      	cmp	r3, #1
 801b596:	d801      	bhi.n	801b59c <dir_next+0xa0>
 801b598:	2302      	movs	r3, #2
 801b59a:	e081      	b.n	801b6a0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801b59c:	697b      	ldr	r3, [r7, #20]
 801b59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b5a2:	d101      	bne.n	801b5a8 <dir_next+0xac>
 801b5a4:	2301      	movs	r3, #1
 801b5a6:	e07b      	b.n	801b6a0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	69db      	ldr	r3, [r3, #28]
 801b5ac:	697a      	ldr	r2, [r7, #20]
 801b5ae:	429a      	cmp	r2, r3
 801b5b0:	d359      	bcc.n	801b666 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801b5b2:	683b      	ldr	r3, [r7, #0]
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d104      	bne.n	801b5c2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	2200      	movs	r2, #0
 801b5bc:	61da      	str	r2, [r3, #28]
 801b5be:	2304      	movs	r3, #4
 801b5c0:	e06e      	b.n	801b6a0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801b5c2:	687a      	ldr	r2, [r7, #4]
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	699b      	ldr	r3, [r3, #24]
 801b5c8:	4619      	mov	r1, r3
 801b5ca:	4610      	mov	r0, r2
 801b5cc:	f7ff fe3d 	bl	801b24a <create_chain>
 801b5d0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801b5d2:	697b      	ldr	r3, [r7, #20]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d101      	bne.n	801b5dc <dir_next+0xe0>
 801b5d8:	2307      	movs	r3, #7
 801b5da:	e061      	b.n	801b6a0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801b5dc:	697b      	ldr	r3, [r7, #20]
 801b5de:	2b01      	cmp	r3, #1
 801b5e0:	d101      	bne.n	801b5e6 <dir_next+0xea>
 801b5e2:	2302      	movs	r3, #2
 801b5e4:	e05c      	b.n	801b6a0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b5e6:	697b      	ldr	r3, [r7, #20]
 801b5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b5ec:	d101      	bne.n	801b5f2 <dir_next+0xf6>
 801b5ee:	2301      	movs	r3, #1
 801b5f0:	e056      	b.n	801b6a0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801b5f2:	68f8      	ldr	r0, [r7, #12]
 801b5f4:	f7ff fad6 	bl	801aba4 <sync_window>
 801b5f8:	4603      	mov	r3, r0
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d001      	beq.n	801b602 <dir_next+0x106>
 801b5fe:	2301      	movs	r3, #1
 801b600:	e04e      	b.n	801b6a0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801b602:	68fb      	ldr	r3, [r7, #12]
 801b604:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	899b      	ldrh	r3, [r3, #12]
 801b60c:	461a      	mov	r2, r3
 801b60e:	2100      	movs	r1, #0
 801b610:	f7ff f8ff 	bl	801a812 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b614:	2300      	movs	r3, #0
 801b616:	613b      	str	r3, [r7, #16]
 801b618:	6979      	ldr	r1, [r7, #20]
 801b61a:	68f8      	ldr	r0, [r7, #12]
 801b61c:	f7ff fba4 	bl	801ad68 <clust2sect>
 801b620:	4602      	mov	r2, r0
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	635a      	str	r2, [r3, #52]	@ 0x34
 801b626:	e012      	b.n	801b64e <dir_next+0x152>
						fs->wflag = 1;
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	2201      	movs	r2, #1
 801b62c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801b62e:	68f8      	ldr	r0, [r7, #12]
 801b630:	f7ff fab8 	bl	801aba4 <sync_window>
 801b634:	4603      	mov	r3, r0
 801b636:	2b00      	cmp	r3, #0
 801b638:	d001      	beq.n	801b63e <dir_next+0x142>
 801b63a:	2301      	movs	r3, #1
 801b63c:	e030      	b.n	801b6a0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b63e:	693b      	ldr	r3, [r7, #16]
 801b640:	3301      	adds	r3, #1
 801b642:	613b      	str	r3, [r7, #16]
 801b644:	68fb      	ldr	r3, [r7, #12]
 801b646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b648:	1c5a      	adds	r2, r3, #1
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	635a      	str	r2, [r3, #52]	@ 0x34
 801b64e:	68fb      	ldr	r3, [r7, #12]
 801b650:	895b      	ldrh	r3, [r3, #10]
 801b652:	461a      	mov	r2, r3
 801b654:	693b      	ldr	r3, [r7, #16]
 801b656:	4293      	cmp	r3, r2
 801b658:	d3e6      	bcc.n	801b628 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801b65a:	68fb      	ldr	r3, [r7, #12]
 801b65c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b65e:	693b      	ldr	r3, [r7, #16]
 801b660:	1ad2      	subs	r2, r2, r3
 801b662:	68fb      	ldr	r3, [r7, #12]
 801b664:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	697a      	ldr	r2, [r7, #20]
 801b66a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801b66c:	6979      	ldr	r1, [r7, #20]
 801b66e:	68f8      	ldr	r0, [r7, #12]
 801b670:	f7ff fb7a 	bl	801ad68 <clust2sect>
 801b674:	4602      	mov	r2, r0
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	68ba      	ldr	r2, [r7, #8]
 801b67e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801b680:	68fb      	ldr	r3, [r7, #12]
 801b682:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b686:	68fb      	ldr	r3, [r7, #12]
 801b688:	899b      	ldrh	r3, [r3, #12]
 801b68a:	461a      	mov	r2, r3
 801b68c:	68bb      	ldr	r3, [r7, #8]
 801b68e:	fbb3 f0f2 	udiv	r0, r3, r2
 801b692:	fb00 f202 	mul.w	r2, r0, r2
 801b696:	1a9b      	subs	r3, r3, r2
 801b698:	18ca      	adds	r2, r1, r3
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b69e:	2300      	movs	r3, #0
}
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	3718      	adds	r7, #24
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	bd80      	pop	{r7, pc}

0801b6a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801b6a8:	b580      	push	{r7, lr}
 801b6aa:	b086      	sub	sp, #24
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	6078      	str	r0, [r7, #4]
 801b6b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801b6b8:	2100      	movs	r1, #0
 801b6ba:	6878      	ldr	r0, [r7, #4]
 801b6bc:	f7ff fe95 	bl	801b3ea <dir_sdi>
 801b6c0:	4603      	mov	r3, r0
 801b6c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b6c4:	7dfb      	ldrb	r3, [r7, #23]
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d12b      	bne.n	801b722 <dir_alloc+0x7a>
		n = 0;
 801b6ca:	2300      	movs	r3, #0
 801b6cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	69db      	ldr	r3, [r3, #28]
 801b6d2:	4619      	mov	r1, r3
 801b6d4:	68f8      	ldr	r0, [r7, #12]
 801b6d6:	f7ff faa9 	bl	801ac2c <move_window>
 801b6da:	4603      	mov	r3, r0
 801b6dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b6de:	7dfb      	ldrb	r3, [r7, #23]
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d11d      	bne.n	801b720 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	6a1b      	ldr	r3, [r3, #32]
 801b6e8:	781b      	ldrb	r3, [r3, #0]
 801b6ea:	2be5      	cmp	r3, #229	@ 0xe5
 801b6ec:	d004      	beq.n	801b6f8 <dir_alloc+0x50>
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	6a1b      	ldr	r3, [r3, #32]
 801b6f2:	781b      	ldrb	r3, [r3, #0]
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	d107      	bne.n	801b708 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801b6f8:	693b      	ldr	r3, [r7, #16]
 801b6fa:	3301      	adds	r3, #1
 801b6fc:	613b      	str	r3, [r7, #16]
 801b6fe:	693a      	ldr	r2, [r7, #16]
 801b700:	683b      	ldr	r3, [r7, #0]
 801b702:	429a      	cmp	r2, r3
 801b704:	d102      	bne.n	801b70c <dir_alloc+0x64>
 801b706:	e00c      	b.n	801b722 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801b708:	2300      	movs	r3, #0
 801b70a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801b70c:	2101      	movs	r1, #1
 801b70e:	6878      	ldr	r0, [r7, #4]
 801b710:	f7ff fef4 	bl	801b4fc <dir_next>
 801b714:	4603      	mov	r3, r0
 801b716:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801b718:	7dfb      	ldrb	r3, [r7, #23]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d0d7      	beq.n	801b6ce <dir_alloc+0x26>
 801b71e:	e000      	b.n	801b722 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801b720:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b722:	7dfb      	ldrb	r3, [r7, #23]
 801b724:	2b04      	cmp	r3, #4
 801b726:	d101      	bne.n	801b72c <dir_alloc+0x84>
 801b728:	2307      	movs	r3, #7
 801b72a:	75fb      	strb	r3, [r7, #23]
	return res;
 801b72c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b72e:	4618      	mov	r0, r3
 801b730:	3718      	adds	r7, #24
 801b732:	46bd      	mov	sp, r7
 801b734:	bd80      	pop	{r7, pc}

0801b736 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801b736:	b580      	push	{r7, lr}
 801b738:	b084      	sub	sp, #16
 801b73a:	af00      	add	r7, sp, #0
 801b73c:	6078      	str	r0, [r7, #4]
 801b73e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801b740:	683b      	ldr	r3, [r7, #0]
 801b742:	331a      	adds	r3, #26
 801b744:	4618      	mov	r0, r3
 801b746:	f7fe ffc1 	bl	801a6cc <ld_word>
 801b74a:	4603      	mov	r3, r0
 801b74c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	781b      	ldrb	r3, [r3, #0]
 801b752:	2b03      	cmp	r3, #3
 801b754:	d109      	bne.n	801b76a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801b756:	683b      	ldr	r3, [r7, #0]
 801b758:	3314      	adds	r3, #20
 801b75a:	4618      	mov	r0, r3
 801b75c:	f7fe ffb6 	bl	801a6cc <ld_word>
 801b760:	4603      	mov	r3, r0
 801b762:	041b      	lsls	r3, r3, #16
 801b764:	68fa      	ldr	r2, [r7, #12]
 801b766:	4313      	orrs	r3, r2
 801b768:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801b76a:	68fb      	ldr	r3, [r7, #12]
}
 801b76c:	4618      	mov	r0, r3
 801b76e:	3710      	adds	r7, #16
 801b770:	46bd      	mov	sp, r7
 801b772:	bd80      	pop	{r7, pc}

0801b774 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801b774:	b580      	push	{r7, lr}
 801b776:	b084      	sub	sp, #16
 801b778:	af00      	add	r7, sp, #0
 801b77a:	60f8      	str	r0, [r7, #12]
 801b77c:	60b9      	str	r1, [r7, #8]
 801b77e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801b780:	68bb      	ldr	r3, [r7, #8]
 801b782:	331a      	adds	r3, #26
 801b784:	687a      	ldr	r2, [r7, #4]
 801b786:	b292      	uxth	r2, r2
 801b788:	4611      	mov	r1, r2
 801b78a:	4618      	mov	r0, r3
 801b78c:	f7fe ffd9 	bl	801a742 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801b790:	68fb      	ldr	r3, [r7, #12]
 801b792:	781b      	ldrb	r3, [r3, #0]
 801b794:	2b03      	cmp	r3, #3
 801b796:	d109      	bne.n	801b7ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801b798:	68bb      	ldr	r3, [r7, #8]
 801b79a:	f103 0214 	add.w	r2, r3, #20
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	0c1b      	lsrs	r3, r3, #16
 801b7a2:	b29b      	uxth	r3, r3
 801b7a4:	4619      	mov	r1, r3
 801b7a6:	4610      	mov	r0, r2
 801b7a8:	f7fe ffcb 	bl	801a742 <st_word>
	}
}
 801b7ac:	bf00      	nop
 801b7ae:	3710      	adds	r7, #16
 801b7b0:	46bd      	mov	sp, r7
 801b7b2:	bd80      	pop	{r7, pc}

0801b7b4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801b7b4:	b590      	push	{r4, r7, lr}
 801b7b6:	b087      	sub	sp, #28
 801b7b8:	af00      	add	r7, sp, #0
 801b7ba:	6078      	str	r0, [r7, #4]
 801b7bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801b7be:	683b      	ldr	r3, [r7, #0]
 801b7c0:	331a      	adds	r3, #26
 801b7c2:	4618      	mov	r0, r3
 801b7c4:	f7fe ff82 	bl	801a6cc <ld_word>
 801b7c8:	4603      	mov	r3, r0
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d001      	beq.n	801b7d2 <cmp_lfn+0x1e>
 801b7ce:	2300      	movs	r3, #0
 801b7d0:	e059      	b.n	801b886 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801b7d2:	683b      	ldr	r3, [r7, #0]
 801b7d4:	781b      	ldrb	r3, [r3, #0]
 801b7d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b7da:	1e5a      	subs	r2, r3, #1
 801b7dc:	4613      	mov	r3, r2
 801b7de:	005b      	lsls	r3, r3, #1
 801b7e0:	4413      	add	r3, r2
 801b7e2:	009b      	lsls	r3, r3, #2
 801b7e4:	4413      	add	r3, r2
 801b7e6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b7e8:	2301      	movs	r3, #1
 801b7ea:	81fb      	strh	r3, [r7, #14]
 801b7ec:	2300      	movs	r3, #0
 801b7ee:	613b      	str	r3, [r7, #16]
 801b7f0:	e033      	b.n	801b85a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801b7f2:	4a27      	ldr	r2, [pc, #156]	@ (801b890 <cmp_lfn+0xdc>)
 801b7f4:	693b      	ldr	r3, [r7, #16]
 801b7f6:	4413      	add	r3, r2
 801b7f8:	781b      	ldrb	r3, [r3, #0]
 801b7fa:	461a      	mov	r2, r3
 801b7fc:	683b      	ldr	r3, [r7, #0]
 801b7fe:	4413      	add	r3, r2
 801b800:	4618      	mov	r0, r3
 801b802:	f7fe ff63 	bl	801a6cc <ld_word>
 801b806:	4603      	mov	r3, r0
 801b808:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801b80a:	89fb      	ldrh	r3, [r7, #14]
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d01a      	beq.n	801b846 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801b810:	697b      	ldr	r3, [r7, #20]
 801b812:	2bfe      	cmp	r3, #254	@ 0xfe
 801b814:	d812      	bhi.n	801b83c <cmp_lfn+0x88>
 801b816:	89bb      	ldrh	r3, [r7, #12]
 801b818:	4618      	mov	r0, r3
 801b81a:	f001 ff71 	bl	801d700 <ff_wtoupper>
 801b81e:	4603      	mov	r3, r0
 801b820:	461c      	mov	r4, r3
 801b822:	697b      	ldr	r3, [r7, #20]
 801b824:	1c5a      	adds	r2, r3, #1
 801b826:	617a      	str	r2, [r7, #20]
 801b828:	005b      	lsls	r3, r3, #1
 801b82a:	687a      	ldr	r2, [r7, #4]
 801b82c:	4413      	add	r3, r2
 801b82e:	881b      	ldrh	r3, [r3, #0]
 801b830:	4618      	mov	r0, r3
 801b832:	f001 ff65 	bl	801d700 <ff_wtoupper>
 801b836:	4603      	mov	r3, r0
 801b838:	429c      	cmp	r4, r3
 801b83a:	d001      	beq.n	801b840 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801b83c:	2300      	movs	r3, #0
 801b83e:	e022      	b.n	801b886 <cmp_lfn+0xd2>
			}
			wc = uc;
 801b840:	89bb      	ldrh	r3, [r7, #12]
 801b842:	81fb      	strh	r3, [r7, #14]
 801b844:	e006      	b.n	801b854 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801b846:	89bb      	ldrh	r3, [r7, #12]
 801b848:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b84c:	4293      	cmp	r3, r2
 801b84e:	d001      	beq.n	801b854 <cmp_lfn+0xa0>
 801b850:	2300      	movs	r3, #0
 801b852:	e018      	b.n	801b886 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b854:	693b      	ldr	r3, [r7, #16]
 801b856:	3301      	adds	r3, #1
 801b858:	613b      	str	r3, [r7, #16]
 801b85a:	693b      	ldr	r3, [r7, #16]
 801b85c:	2b0c      	cmp	r3, #12
 801b85e:	d9c8      	bls.n	801b7f2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801b860:	683b      	ldr	r3, [r7, #0]
 801b862:	781b      	ldrb	r3, [r3, #0]
 801b864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d00b      	beq.n	801b884 <cmp_lfn+0xd0>
 801b86c:	89fb      	ldrh	r3, [r7, #14]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d008      	beq.n	801b884 <cmp_lfn+0xd0>
 801b872:	697b      	ldr	r3, [r7, #20]
 801b874:	005b      	lsls	r3, r3, #1
 801b876:	687a      	ldr	r2, [r7, #4]
 801b878:	4413      	add	r3, r2
 801b87a:	881b      	ldrh	r3, [r3, #0]
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d001      	beq.n	801b884 <cmp_lfn+0xd0>
 801b880:	2300      	movs	r3, #0
 801b882:	e000      	b.n	801b886 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801b884:	2301      	movs	r3, #1
}
 801b886:	4618      	mov	r0, r3
 801b888:	371c      	adds	r7, #28
 801b88a:	46bd      	mov	sp, r7
 801b88c:	bd90      	pop	{r4, r7, pc}
 801b88e:	bf00      	nop
 801b890:	0801e3a8 	.word	0x0801e3a8

0801b894 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801b894:	b580      	push	{r7, lr}
 801b896:	b086      	sub	sp, #24
 801b898:	af00      	add	r7, sp, #0
 801b89a:	6078      	str	r0, [r7, #4]
 801b89c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801b89e:	683b      	ldr	r3, [r7, #0]
 801b8a0:	331a      	adds	r3, #26
 801b8a2:	4618      	mov	r0, r3
 801b8a4:	f7fe ff12 	bl	801a6cc <ld_word>
 801b8a8:	4603      	mov	r3, r0
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d001      	beq.n	801b8b2 <pick_lfn+0x1e>
 801b8ae:	2300      	movs	r3, #0
 801b8b0:	e04d      	b.n	801b94e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801b8b2:	683b      	ldr	r3, [r7, #0]
 801b8b4:	781b      	ldrb	r3, [r3, #0]
 801b8b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801b8ba:	1e5a      	subs	r2, r3, #1
 801b8bc:	4613      	mov	r3, r2
 801b8be:	005b      	lsls	r3, r3, #1
 801b8c0:	4413      	add	r3, r2
 801b8c2:	009b      	lsls	r3, r3, #2
 801b8c4:	4413      	add	r3, r2
 801b8c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b8c8:	2301      	movs	r3, #1
 801b8ca:	81fb      	strh	r3, [r7, #14]
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	613b      	str	r3, [r7, #16]
 801b8d0:	e028      	b.n	801b924 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801b8d2:	4a21      	ldr	r2, [pc, #132]	@ (801b958 <pick_lfn+0xc4>)
 801b8d4:	693b      	ldr	r3, [r7, #16]
 801b8d6:	4413      	add	r3, r2
 801b8d8:	781b      	ldrb	r3, [r3, #0]
 801b8da:	461a      	mov	r2, r3
 801b8dc:	683b      	ldr	r3, [r7, #0]
 801b8de:	4413      	add	r3, r2
 801b8e0:	4618      	mov	r0, r3
 801b8e2:	f7fe fef3 	bl	801a6cc <ld_word>
 801b8e6:	4603      	mov	r3, r0
 801b8e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801b8ea:	89fb      	ldrh	r3, [r7, #14]
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d00f      	beq.n	801b910 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801b8f0:	697b      	ldr	r3, [r7, #20]
 801b8f2:	2bfe      	cmp	r3, #254	@ 0xfe
 801b8f4:	d901      	bls.n	801b8fa <pick_lfn+0x66>
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	e029      	b.n	801b94e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801b8fa:	89bb      	ldrh	r3, [r7, #12]
 801b8fc:	81fb      	strh	r3, [r7, #14]
 801b8fe:	697b      	ldr	r3, [r7, #20]
 801b900:	1c5a      	adds	r2, r3, #1
 801b902:	617a      	str	r2, [r7, #20]
 801b904:	005b      	lsls	r3, r3, #1
 801b906:	687a      	ldr	r2, [r7, #4]
 801b908:	4413      	add	r3, r2
 801b90a:	89fa      	ldrh	r2, [r7, #14]
 801b90c:	801a      	strh	r2, [r3, #0]
 801b90e:	e006      	b.n	801b91e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801b910:	89bb      	ldrh	r3, [r7, #12]
 801b912:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b916:	4293      	cmp	r3, r2
 801b918:	d001      	beq.n	801b91e <pick_lfn+0x8a>
 801b91a:	2300      	movs	r3, #0
 801b91c:	e017      	b.n	801b94e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b91e:	693b      	ldr	r3, [r7, #16]
 801b920:	3301      	adds	r3, #1
 801b922:	613b      	str	r3, [r7, #16]
 801b924:	693b      	ldr	r3, [r7, #16]
 801b926:	2b0c      	cmp	r3, #12
 801b928:	d9d3      	bls.n	801b8d2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801b92a:	683b      	ldr	r3, [r7, #0]
 801b92c:	781b      	ldrb	r3, [r3, #0]
 801b92e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b932:	2b00      	cmp	r3, #0
 801b934:	d00a      	beq.n	801b94c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801b936:	697b      	ldr	r3, [r7, #20]
 801b938:	2bfe      	cmp	r3, #254	@ 0xfe
 801b93a:	d901      	bls.n	801b940 <pick_lfn+0xac>
 801b93c:	2300      	movs	r3, #0
 801b93e:	e006      	b.n	801b94e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801b940:	697b      	ldr	r3, [r7, #20]
 801b942:	005b      	lsls	r3, r3, #1
 801b944:	687a      	ldr	r2, [r7, #4]
 801b946:	4413      	add	r3, r2
 801b948:	2200      	movs	r2, #0
 801b94a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801b94c:	2301      	movs	r3, #1
}
 801b94e:	4618      	mov	r0, r3
 801b950:	3718      	adds	r7, #24
 801b952:	46bd      	mov	sp, r7
 801b954:	bd80      	pop	{r7, pc}
 801b956:	bf00      	nop
 801b958:	0801e3a8 	.word	0x0801e3a8

0801b95c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801b95c:	b580      	push	{r7, lr}
 801b95e:	b088      	sub	sp, #32
 801b960:	af00      	add	r7, sp, #0
 801b962:	60f8      	str	r0, [r7, #12]
 801b964:	60b9      	str	r1, [r7, #8]
 801b966:	4611      	mov	r1, r2
 801b968:	461a      	mov	r2, r3
 801b96a:	460b      	mov	r3, r1
 801b96c:	71fb      	strb	r3, [r7, #7]
 801b96e:	4613      	mov	r3, r2
 801b970:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801b972:	68bb      	ldr	r3, [r7, #8]
 801b974:	330d      	adds	r3, #13
 801b976:	79ba      	ldrb	r2, [r7, #6]
 801b978:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801b97a:	68bb      	ldr	r3, [r7, #8]
 801b97c:	330b      	adds	r3, #11
 801b97e:	220f      	movs	r2, #15
 801b980:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801b982:	68bb      	ldr	r3, [r7, #8]
 801b984:	330c      	adds	r3, #12
 801b986:	2200      	movs	r2, #0
 801b988:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801b98a:	68bb      	ldr	r3, [r7, #8]
 801b98c:	331a      	adds	r3, #26
 801b98e:	2100      	movs	r1, #0
 801b990:	4618      	mov	r0, r3
 801b992:	f7fe fed6 	bl	801a742 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801b996:	79fb      	ldrb	r3, [r7, #7]
 801b998:	1e5a      	subs	r2, r3, #1
 801b99a:	4613      	mov	r3, r2
 801b99c:	005b      	lsls	r3, r3, #1
 801b99e:	4413      	add	r3, r2
 801b9a0:	009b      	lsls	r3, r3, #2
 801b9a2:	4413      	add	r3, r2
 801b9a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801b9a6:	2300      	movs	r3, #0
 801b9a8:	82fb      	strh	r3, [r7, #22]
 801b9aa:	2300      	movs	r3, #0
 801b9ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b9ae:	8afb      	ldrh	r3, [r7, #22]
 801b9b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b9b4:	4293      	cmp	r3, r2
 801b9b6:	d007      	beq.n	801b9c8 <put_lfn+0x6c>
 801b9b8:	69fb      	ldr	r3, [r7, #28]
 801b9ba:	1c5a      	adds	r2, r3, #1
 801b9bc:	61fa      	str	r2, [r7, #28]
 801b9be:	005b      	lsls	r3, r3, #1
 801b9c0:	68fa      	ldr	r2, [r7, #12]
 801b9c2:	4413      	add	r3, r2
 801b9c4:	881b      	ldrh	r3, [r3, #0]
 801b9c6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801b9c8:	4a17      	ldr	r2, [pc, #92]	@ (801ba28 <put_lfn+0xcc>)
 801b9ca:	69bb      	ldr	r3, [r7, #24]
 801b9cc:	4413      	add	r3, r2
 801b9ce:	781b      	ldrb	r3, [r3, #0]
 801b9d0:	461a      	mov	r2, r3
 801b9d2:	68bb      	ldr	r3, [r7, #8]
 801b9d4:	4413      	add	r3, r2
 801b9d6:	8afa      	ldrh	r2, [r7, #22]
 801b9d8:	4611      	mov	r1, r2
 801b9da:	4618      	mov	r0, r3
 801b9dc:	f7fe feb1 	bl	801a742 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b9e0:	8afb      	ldrh	r3, [r7, #22]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d102      	bne.n	801b9ec <put_lfn+0x90>
 801b9e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b9ea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801b9ec:	69bb      	ldr	r3, [r7, #24]
 801b9ee:	3301      	adds	r3, #1
 801b9f0:	61bb      	str	r3, [r7, #24]
 801b9f2:	69bb      	ldr	r3, [r7, #24]
 801b9f4:	2b0c      	cmp	r3, #12
 801b9f6:	d9da      	bls.n	801b9ae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801b9f8:	8afb      	ldrh	r3, [r7, #22]
 801b9fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b9fe:	4293      	cmp	r3, r2
 801ba00:	d006      	beq.n	801ba10 <put_lfn+0xb4>
 801ba02:	69fb      	ldr	r3, [r7, #28]
 801ba04:	005b      	lsls	r3, r3, #1
 801ba06:	68fa      	ldr	r2, [r7, #12]
 801ba08:	4413      	add	r3, r2
 801ba0a:	881b      	ldrh	r3, [r3, #0]
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	d103      	bne.n	801ba18 <put_lfn+0xbc>
 801ba10:	79fb      	ldrb	r3, [r7, #7]
 801ba12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ba16:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801ba18:	68bb      	ldr	r3, [r7, #8]
 801ba1a:	79fa      	ldrb	r2, [r7, #7]
 801ba1c:	701a      	strb	r2, [r3, #0]
}
 801ba1e:	bf00      	nop
 801ba20:	3720      	adds	r7, #32
 801ba22:	46bd      	mov	sp, r7
 801ba24:	bd80      	pop	{r7, pc}
 801ba26:	bf00      	nop
 801ba28:	0801e3a8 	.word	0x0801e3a8

0801ba2c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b08c      	sub	sp, #48	@ 0x30
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	60f8      	str	r0, [r7, #12]
 801ba34:	60b9      	str	r1, [r7, #8]
 801ba36:	607a      	str	r2, [r7, #4]
 801ba38:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801ba3a:	220b      	movs	r2, #11
 801ba3c:	68b9      	ldr	r1, [r7, #8]
 801ba3e:	68f8      	ldr	r0, [r7, #12]
 801ba40:	f7fe fec6 	bl	801a7d0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801ba44:	683b      	ldr	r3, [r7, #0]
 801ba46:	2b05      	cmp	r3, #5
 801ba48:	d929      	bls.n	801ba9e <gen_numname+0x72>
		sr = seq;
 801ba4a:	683b      	ldr	r3, [r7, #0]
 801ba4c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801ba4e:	e020      	b.n	801ba92 <gen_numname+0x66>
			wc = *lfn++;
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	1c9a      	adds	r2, r3, #2
 801ba54:	607a      	str	r2, [r7, #4]
 801ba56:	881b      	ldrh	r3, [r3, #0]
 801ba58:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801ba5a:	2300      	movs	r3, #0
 801ba5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ba5e:	e015      	b.n	801ba8c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801ba60:	69fb      	ldr	r3, [r7, #28]
 801ba62:	005a      	lsls	r2, r3, #1
 801ba64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ba66:	f003 0301 	and.w	r3, r3, #1
 801ba6a:	4413      	add	r3, r2
 801ba6c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801ba6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ba70:	085b      	lsrs	r3, r3, #1
 801ba72:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801ba74:	69fb      	ldr	r3, [r7, #28]
 801ba76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d003      	beq.n	801ba86 <gen_numname+0x5a>
 801ba7e:	69fa      	ldr	r2, [r7, #28]
 801ba80:	4b30      	ldr	r3, [pc, #192]	@ (801bb44 <gen_numname+0x118>)
 801ba82:	4053      	eors	r3, r2
 801ba84:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801ba86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba88:	3301      	adds	r3, #1
 801ba8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ba8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba8e:	2b0f      	cmp	r3, #15
 801ba90:	d9e6      	bls.n	801ba60 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	881b      	ldrh	r3, [r3, #0]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d1da      	bne.n	801ba50 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801ba9a:	69fb      	ldr	r3, [r7, #28]
 801ba9c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801ba9e:	2307      	movs	r3, #7
 801baa0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801baa2:	683b      	ldr	r3, [r7, #0]
 801baa4:	b2db      	uxtb	r3, r3
 801baa6:	f003 030f 	and.w	r3, r3, #15
 801baaa:	b2db      	uxtb	r3, r3
 801baac:	3330      	adds	r3, #48	@ 0x30
 801baae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801bab2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bab6:	2b39      	cmp	r3, #57	@ 0x39
 801bab8:	d904      	bls.n	801bac4 <gen_numname+0x98>
 801baba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801babe:	3307      	adds	r3, #7
 801bac0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801bac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bac6:	1e5a      	subs	r2, r3, #1
 801bac8:	62ba      	str	r2, [r7, #40]	@ 0x28
 801baca:	3330      	adds	r3, #48	@ 0x30
 801bacc:	443b      	add	r3, r7
 801bace:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801bad2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801bad6:	683b      	ldr	r3, [r7, #0]
 801bad8:	091b      	lsrs	r3, r3, #4
 801bada:	603b      	str	r3, [r7, #0]
	} while (seq);
 801badc:	683b      	ldr	r3, [r7, #0]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d1df      	bne.n	801baa2 <gen_numname+0x76>
	ns[i] = '~';
 801bae2:	f107 0214 	add.w	r2, r7, #20
 801bae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bae8:	4413      	add	r3, r2
 801baea:	227e      	movs	r2, #126	@ 0x7e
 801baec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801baee:	2300      	movs	r3, #0
 801baf0:	627b      	str	r3, [r7, #36]	@ 0x24
 801baf2:	e002      	b.n	801bafa <gen_numname+0xce>
 801baf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801baf6:	3301      	adds	r3, #1
 801baf8:	627b      	str	r3, [r7, #36]	@ 0x24
 801bafa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bafe:	429a      	cmp	r2, r3
 801bb00:	d205      	bcs.n	801bb0e <gen_numname+0xe2>
 801bb02:	68fa      	ldr	r2, [r7, #12]
 801bb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb06:	4413      	add	r3, r2
 801bb08:	781b      	ldrb	r3, [r3, #0]
 801bb0a:	2b20      	cmp	r3, #32
 801bb0c:	d1f2      	bne.n	801baf4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801bb0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb10:	2b07      	cmp	r3, #7
 801bb12:	d807      	bhi.n	801bb24 <gen_numname+0xf8>
 801bb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb16:	1c5a      	adds	r2, r3, #1
 801bb18:	62ba      	str	r2, [r7, #40]	@ 0x28
 801bb1a:	3330      	adds	r3, #48	@ 0x30
 801bb1c:	443b      	add	r3, r7
 801bb1e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801bb22:	e000      	b.n	801bb26 <gen_numname+0xfa>
 801bb24:	2120      	movs	r1, #32
 801bb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb28:	1c5a      	adds	r2, r3, #1
 801bb2a:	627a      	str	r2, [r7, #36]	@ 0x24
 801bb2c:	68fa      	ldr	r2, [r7, #12]
 801bb2e:	4413      	add	r3, r2
 801bb30:	460a      	mov	r2, r1
 801bb32:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801bb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb36:	2b07      	cmp	r3, #7
 801bb38:	d9e9      	bls.n	801bb0e <gen_numname+0xe2>
}
 801bb3a:	bf00      	nop
 801bb3c:	bf00      	nop
 801bb3e:	3730      	adds	r7, #48	@ 0x30
 801bb40:	46bd      	mov	sp, r7
 801bb42:	bd80      	pop	{r7, pc}
 801bb44:	00011021 	.word	0x00011021

0801bb48 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801bb48:	b480      	push	{r7}
 801bb4a:	b085      	sub	sp, #20
 801bb4c:	af00      	add	r7, sp, #0
 801bb4e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801bb50:	2300      	movs	r3, #0
 801bb52:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801bb54:	230b      	movs	r3, #11
 801bb56:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801bb58:	7bfb      	ldrb	r3, [r7, #15]
 801bb5a:	b2da      	uxtb	r2, r3
 801bb5c:	0852      	lsrs	r2, r2, #1
 801bb5e:	01db      	lsls	r3, r3, #7
 801bb60:	4313      	orrs	r3, r2
 801bb62:	b2da      	uxtb	r2, r3
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	1c59      	adds	r1, r3, #1
 801bb68:	6079      	str	r1, [r7, #4]
 801bb6a:	781b      	ldrb	r3, [r3, #0]
 801bb6c:	4413      	add	r3, r2
 801bb6e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801bb70:	68bb      	ldr	r3, [r7, #8]
 801bb72:	3b01      	subs	r3, #1
 801bb74:	60bb      	str	r3, [r7, #8]
 801bb76:	68bb      	ldr	r3, [r7, #8]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d1ed      	bne.n	801bb58 <sum_sfn+0x10>
	return sum;
 801bb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb7e:	4618      	mov	r0, r3
 801bb80:	3714      	adds	r7, #20
 801bb82:	46bd      	mov	sp, r7
 801bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb88:	4770      	bx	lr

0801bb8a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801bb8a:	b580      	push	{r7, lr}
 801bb8c:	b086      	sub	sp, #24
 801bb8e:	af00      	add	r7, sp, #0
 801bb90:	6078      	str	r0, [r7, #4]
 801bb92:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801bb94:	2304      	movs	r3, #4
 801bb96:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	681b      	ldr	r3, [r3, #0]
 801bb9c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801bb9e:	23ff      	movs	r3, #255	@ 0xff
 801bba0:	757b      	strb	r3, [r7, #21]
 801bba2:	23ff      	movs	r3, #255	@ 0xff
 801bba4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801bba6:	e081      	b.n	801bcac <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	69db      	ldr	r3, [r3, #28]
 801bbac:	4619      	mov	r1, r3
 801bbae:	6938      	ldr	r0, [r7, #16]
 801bbb0:	f7ff f83c 	bl	801ac2c <move_window>
 801bbb4:	4603      	mov	r3, r0
 801bbb6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bbb8:	7dfb      	ldrb	r3, [r7, #23]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d17c      	bne.n	801bcb8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	6a1b      	ldr	r3, [r3, #32]
 801bbc2:	781b      	ldrb	r3, [r3, #0]
 801bbc4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801bbc6:	7dbb      	ldrb	r3, [r7, #22]
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d102      	bne.n	801bbd2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801bbcc:	2304      	movs	r3, #4
 801bbce:	75fb      	strb	r3, [r7, #23]
 801bbd0:	e077      	b.n	801bcc2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	6a1b      	ldr	r3, [r3, #32]
 801bbd6:	330b      	adds	r3, #11
 801bbd8:	781b      	ldrb	r3, [r3, #0]
 801bbda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bbde:	73fb      	strb	r3, [r7, #15]
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	7bfa      	ldrb	r2, [r7, #15]
 801bbe4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801bbe6:	7dbb      	ldrb	r3, [r7, #22]
 801bbe8:	2be5      	cmp	r3, #229	@ 0xe5
 801bbea:	d00e      	beq.n	801bc0a <dir_read+0x80>
 801bbec:	7dbb      	ldrb	r3, [r7, #22]
 801bbee:	2b2e      	cmp	r3, #46	@ 0x2e
 801bbf0:	d00b      	beq.n	801bc0a <dir_read+0x80>
 801bbf2:	7bfb      	ldrb	r3, [r7, #15]
 801bbf4:	f023 0320 	bic.w	r3, r3, #32
 801bbf8:	2b08      	cmp	r3, #8
 801bbfa:	bf0c      	ite	eq
 801bbfc:	2301      	moveq	r3, #1
 801bbfe:	2300      	movne	r3, #0
 801bc00:	b2db      	uxtb	r3, r3
 801bc02:	461a      	mov	r2, r3
 801bc04:	683b      	ldr	r3, [r7, #0]
 801bc06:	4293      	cmp	r3, r2
 801bc08:	d002      	beq.n	801bc10 <dir_read+0x86>
				ord = 0xFF;
 801bc0a:	23ff      	movs	r3, #255	@ 0xff
 801bc0c:	757b      	strb	r3, [r7, #21]
 801bc0e:	e044      	b.n	801bc9a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801bc10:	7bfb      	ldrb	r3, [r7, #15]
 801bc12:	2b0f      	cmp	r3, #15
 801bc14:	d12f      	bne.n	801bc76 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801bc16:	7dbb      	ldrb	r3, [r7, #22]
 801bc18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d00d      	beq.n	801bc3c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	6a1b      	ldr	r3, [r3, #32]
 801bc24:	7b5b      	ldrb	r3, [r3, #13]
 801bc26:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801bc28:	7dbb      	ldrb	r3, [r7, #22]
 801bc2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bc2e:	75bb      	strb	r3, [r7, #22]
 801bc30:	7dbb      	ldrb	r3, [r7, #22]
 801bc32:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	695a      	ldr	r2, [r3, #20]
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801bc3c:	7dba      	ldrb	r2, [r7, #22]
 801bc3e:	7d7b      	ldrb	r3, [r7, #21]
 801bc40:	429a      	cmp	r2, r3
 801bc42:	d115      	bne.n	801bc70 <dir_read+0xe6>
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	6a1b      	ldr	r3, [r3, #32]
 801bc48:	330d      	adds	r3, #13
 801bc4a:	781b      	ldrb	r3, [r3, #0]
 801bc4c:	7d3a      	ldrb	r2, [r7, #20]
 801bc4e:	429a      	cmp	r2, r3
 801bc50:	d10e      	bne.n	801bc70 <dir_read+0xe6>
 801bc52:	693b      	ldr	r3, [r7, #16]
 801bc54:	691a      	ldr	r2, [r3, #16]
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	6a1b      	ldr	r3, [r3, #32]
 801bc5a:	4619      	mov	r1, r3
 801bc5c:	4610      	mov	r0, r2
 801bc5e:	f7ff fe19 	bl	801b894 <pick_lfn>
 801bc62:	4603      	mov	r3, r0
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	d003      	beq.n	801bc70 <dir_read+0xe6>
 801bc68:	7d7b      	ldrb	r3, [r7, #21]
 801bc6a:	3b01      	subs	r3, #1
 801bc6c:	b2db      	uxtb	r3, r3
 801bc6e:	e000      	b.n	801bc72 <dir_read+0xe8>
 801bc70:	23ff      	movs	r3, #255	@ 0xff
 801bc72:	757b      	strb	r3, [r7, #21]
 801bc74:	e011      	b.n	801bc9a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801bc76:	7d7b      	ldrb	r3, [r7, #21]
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d109      	bne.n	801bc90 <dir_read+0x106>
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	6a1b      	ldr	r3, [r3, #32]
 801bc80:	4618      	mov	r0, r3
 801bc82:	f7ff ff61 	bl	801bb48 <sum_sfn>
 801bc86:	4603      	mov	r3, r0
 801bc88:	461a      	mov	r2, r3
 801bc8a:	7d3b      	ldrb	r3, [r7, #20]
 801bc8c:	4293      	cmp	r3, r2
 801bc8e:	d015      	beq.n	801bcbc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	f04f 32ff 	mov.w	r2, #4294967295
 801bc96:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801bc98:	e010      	b.n	801bcbc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801bc9a:	2100      	movs	r1, #0
 801bc9c:	6878      	ldr	r0, [r7, #4]
 801bc9e:	f7ff fc2d 	bl	801b4fc <dir_next>
 801bca2:	4603      	mov	r3, r0
 801bca4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bca6:	7dfb      	ldrb	r3, [r7, #23]
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	d109      	bne.n	801bcc0 <dir_read+0x136>
	while (dp->sect) {
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	69db      	ldr	r3, [r3, #28]
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	f47f af79 	bne.w	801bba8 <dir_read+0x1e>
 801bcb6:	e004      	b.n	801bcc2 <dir_read+0x138>
		if (res != FR_OK) break;
 801bcb8:	bf00      	nop
 801bcba:	e002      	b.n	801bcc2 <dir_read+0x138>
					break;
 801bcbc:	bf00      	nop
 801bcbe:	e000      	b.n	801bcc2 <dir_read+0x138>
		if (res != FR_OK) break;
 801bcc0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801bcc2:	7dfb      	ldrb	r3, [r7, #23]
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d002      	beq.n	801bcce <dir_read+0x144>
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	2200      	movs	r2, #0
 801bccc:	61da      	str	r2, [r3, #28]
	return res;
 801bcce:	7dfb      	ldrb	r3, [r7, #23]
}
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	3718      	adds	r7, #24
 801bcd4:	46bd      	mov	sp, r7
 801bcd6:	bd80      	pop	{r7, pc}

0801bcd8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801bcd8:	b580      	push	{r7, lr}
 801bcda:	b086      	sub	sp, #24
 801bcdc:	af00      	add	r7, sp, #0
 801bcde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801bce6:	2100      	movs	r1, #0
 801bce8:	6878      	ldr	r0, [r7, #4]
 801bcea:	f7ff fb7e 	bl	801b3ea <dir_sdi>
 801bcee:	4603      	mov	r3, r0
 801bcf0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801bcf2:	7dfb      	ldrb	r3, [r7, #23]
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d001      	beq.n	801bcfc <dir_find+0x24>
 801bcf8:	7dfb      	ldrb	r3, [r7, #23]
 801bcfa:	e0a9      	b.n	801be50 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801bcfc:	23ff      	movs	r3, #255	@ 0xff
 801bcfe:	753b      	strb	r3, [r7, #20]
 801bd00:	7d3b      	ldrb	r3, [r7, #20]
 801bd02:	757b      	strb	r3, [r7, #21]
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	f04f 32ff 	mov.w	r2, #4294967295
 801bd0a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	69db      	ldr	r3, [r3, #28]
 801bd10:	4619      	mov	r1, r3
 801bd12:	6938      	ldr	r0, [r7, #16]
 801bd14:	f7fe ff8a 	bl	801ac2c <move_window>
 801bd18:	4603      	mov	r3, r0
 801bd1a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bd1c:	7dfb      	ldrb	r3, [r7, #23]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	f040 8090 	bne.w	801be44 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	6a1b      	ldr	r3, [r3, #32]
 801bd28:	781b      	ldrb	r3, [r3, #0]
 801bd2a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801bd2c:	7dbb      	ldrb	r3, [r7, #22]
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d102      	bne.n	801bd38 <dir_find+0x60>
 801bd32:	2304      	movs	r3, #4
 801bd34:	75fb      	strb	r3, [r7, #23]
 801bd36:	e08a      	b.n	801be4e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	6a1b      	ldr	r3, [r3, #32]
 801bd3c:	330b      	adds	r3, #11
 801bd3e:	781b      	ldrb	r3, [r3, #0]
 801bd40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bd44:	73fb      	strb	r3, [r7, #15]
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	7bfa      	ldrb	r2, [r7, #15]
 801bd4a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801bd4c:	7dbb      	ldrb	r3, [r7, #22]
 801bd4e:	2be5      	cmp	r3, #229	@ 0xe5
 801bd50:	d007      	beq.n	801bd62 <dir_find+0x8a>
 801bd52:	7bfb      	ldrb	r3, [r7, #15]
 801bd54:	f003 0308 	and.w	r3, r3, #8
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d009      	beq.n	801bd70 <dir_find+0x98>
 801bd5c:	7bfb      	ldrb	r3, [r7, #15]
 801bd5e:	2b0f      	cmp	r3, #15
 801bd60:	d006      	beq.n	801bd70 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801bd62:	23ff      	movs	r3, #255	@ 0xff
 801bd64:	757b      	strb	r3, [r7, #21]
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	f04f 32ff 	mov.w	r2, #4294967295
 801bd6c:	631a      	str	r2, [r3, #48]	@ 0x30
 801bd6e:	e05e      	b.n	801be2e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801bd70:	7bfb      	ldrb	r3, [r7, #15]
 801bd72:	2b0f      	cmp	r3, #15
 801bd74:	d136      	bne.n	801bde4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801bd7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d154      	bne.n	801be2e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801bd84:	7dbb      	ldrb	r3, [r7, #22]
 801bd86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d00d      	beq.n	801bdaa <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	6a1b      	ldr	r3, [r3, #32]
 801bd92:	7b5b      	ldrb	r3, [r3, #13]
 801bd94:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801bd96:	7dbb      	ldrb	r3, [r7, #22]
 801bd98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bd9c:	75bb      	strb	r3, [r7, #22]
 801bd9e:	7dbb      	ldrb	r3, [r7, #22]
 801bda0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	695a      	ldr	r2, [r3, #20]
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801bdaa:	7dba      	ldrb	r2, [r7, #22]
 801bdac:	7d7b      	ldrb	r3, [r7, #21]
 801bdae:	429a      	cmp	r2, r3
 801bdb0:	d115      	bne.n	801bdde <dir_find+0x106>
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	6a1b      	ldr	r3, [r3, #32]
 801bdb6:	330d      	adds	r3, #13
 801bdb8:	781b      	ldrb	r3, [r3, #0]
 801bdba:	7d3a      	ldrb	r2, [r7, #20]
 801bdbc:	429a      	cmp	r2, r3
 801bdbe:	d10e      	bne.n	801bdde <dir_find+0x106>
 801bdc0:	693b      	ldr	r3, [r7, #16]
 801bdc2:	691a      	ldr	r2, [r3, #16]
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	6a1b      	ldr	r3, [r3, #32]
 801bdc8:	4619      	mov	r1, r3
 801bdca:	4610      	mov	r0, r2
 801bdcc:	f7ff fcf2 	bl	801b7b4 <cmp_lfn>
 801bdd0:	4603      	mov	r3, r0
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	d003      	beq.n	801bdde <dir_find+0x106>
 801bdd6:	7d7b      	ldrb	r3, [r7, #21]
 801bdd8:	3b01      	subs	r3, #1
 801bdda:	b2db      	uxtb	r3, r3
 801bddc:	e000      	b.n	801bde0 <dir_find+0x108>
 801bdde:	23ff      	movs	r3, #255	@ 0xff
 801bde0:	757b      	strb	r3, [r7, #21]
 801bde2:	e024      	b.n	801be2e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801bde4:	7d7b      	ldrb	r3, [r7, #21]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d109      	bne.n	801bdfe <dir_find+0x126>
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	6a1b      	ldr	r3, [r3, #32]
 801bdee:	4618      	mov	r0, r3
 801bdf0:	f7ff feaa 	bl	801bb48 <sum_sfn>
 801bdf4:	4603      	mov	r3, r0
 801bdf6:	461a      	mov	r2, r3
 801bdf8:	7d3b      	ldrb	r3, [r7, #20]
 801bdfa:	4293      	cmp	r3, r2
 801bdfc:	d024      	beq.n	801be48 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801be04:	f003 0301 	and.w	r3, r3, #1
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d10a      	bne.n	801be22 <dir_find+0x14a>
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	6a18      	ldr	r0, [r3, #32]
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	3324      	adds	r3, #36	@ 0x24
 801be14:	220b      	movs	r2, #11
 801be16:	4619      	mov	r1, r3
 801be18:	f7fe fd16 	bl	801a848 <mem_cmp>
 801be1c:	4603      	mov	r3, r0
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d014      	beq.n	801be4c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801be22:	23ff      	movs	r3, #255	@ 0xff
 801be24:	757b      	strb	r3, [r7, #21]
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	f04f 32ff 	mov.w	r2, #4294967295
 801be2c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801be2e:	2100      	movs	r1, #0
 801be30:	6878      	ldr	r0, [r7, #4]
 801be32:	f7ff fb63 	bl	801b4fc <dir_next>
 801be36:	4603      	mov	r3, r0
 801be38:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801be3a:	7dfb      	ldrb	r3, [r7, #23]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	f43f af65 	beq.w	801bd0c <dir_find+0x34>
 801be42:	e004      	b.n	801be4e <dir_find+0x176>
		if (res != FR_OK) break;
 801be44:	bf00      	nop
 801be46:	e002      	b.n	801be4e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801be48:	bf00      	nop
 801be4a:	e000      	b.n	801be4e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801be4c:	bf00      	nop

	return res;
 801be4e:	7dfb      	ldrb	r3, [r7, #23]
}
 801be50:	4618      	mov	r0, r3
 801be52:	3718      	adds	r7, #24
 801be54:	46bd      	mov	sp, r7
 801be56:	bd80      	pop	{r7, pc}

0801be58 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801be58:	b580      	push	{r7, lr}
 801be5a:	b08c      	sub	sp, #48	@ 0x30
 801be5c:	af00      	add	r7, sp, #0
 801be5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801be6c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801be70:	2b00      	cmp	r3, #0
 801be72:	d001      	beq.n	801be78 <dir_register+0x20>
 801be74:	2306      	movs	r3, #6
 801be76:	e0e0      	b.n	801c03a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801be78:	2300      	movs	r3, #0
 801be7a:	627b      	str	r3, [r7, #36]	@ 0x24
 801be7c:	e002      	b.n	801be84 <dir_register+0x2c>
 801be7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be80:	3301      	adds	r3, #1
 801be82:	627b      	str	r3, [r7, #36]	@ 0x24
 801be84:	69fb      	ldr	r3, [r7, #28]
 801be86:	691a      	ldr	r2, [r3, #16]
 801be88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be8a:	005b      	lsls	r3, r3, #1
 801be8c:	4413      	add	r3, r2
 801be8e:	881b      	ldrh	r3, [r3, #0]
 801be90:	2b00      	cmp	r3, #0
 801be92:	d1f4      	bne.n	801be7e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801be9a:	f107 030c 	add.w	r3, r7, #12
 801be9e:	220c      	movs	r2, #12
 801bea0:	4618      	mov	r0, r3
 801bea2:	f7fe fc95 	bl	801a7d0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801bea6:	7dfb      	ldrb	r3, [r7, #23]
 801bea8:	f003 0301 	and.w	r3, r3, #1
 801beac:	2b00      	cmp	r3, #0
 801beae:	d032      	beq.n	801bf16 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	2240      	movs	r2, #64	@ 0x40
 801beb4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801beb8:	2301      	movs	r3, #1
 801beba:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bebc:	e016      	b.n	801beec <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801bec4:	69fb      	ldr	r3, [r7, #28]
 801bec6:	691a      	ldr	r2, [r3, #16]
 801bec8:	f107 010c 	add.w	r1, r7, #12
 801becc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bece:	f7ff fdad 	bl	801ba2c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801bed2:	6878      	ldr	r0, [r7, #4]
 801bed4:	f7ff ff00 	bl	801bcd8 <dir_find>
 801bed8:	4603      	mov	r3, r0
 801beda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801bede:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d106      	bne.n	801bef4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801bee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bee8:	3301      	adds	r3, #1
 801beea:	62bb      	str	r3, [r7, #40]	@ 0x28
 801beec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beee:	2b63      	cmp	r3, #99	@ 0x63
 801bef0:	d9e5      	bls.n	801bebe <dir_register+0x66>
 801bef2:	e000      	b.n	801bef6 <dir_register+0x9e>
			if (res != FR_OK) break;
 801bef4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801bef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bef8:	2b64      	cmp	r3, #100	@ 0x64
 801befa:	d101      	bne.n	801bf00 <dir_register+0xa8>
 801befc:	2307      	movs	r3, #7
 801befe:	e09c      	b.n	801c03a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801bf00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf04:	2b04      	cmp	r3, #4
 801bf06:	d002      	beq.n	801bf0e <dir_register+0xb6>
 801bf08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf0c:	e095      	b.n	801c03a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801bf0e:	7dfa      	ldrb	r2, [r7, #23]
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801bf16:	7dfb      	ldrb	r3, [r7, #23]
 801bf18:	f003 0302 	and.w	r3, r3, #2
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	d007      	beq.n	801bf30 <dir_register+0xd8>
 801bf20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf22:	330c      	adds	r3, #12
 801bf24:	4a47      	ldr	r2, [pc, #284]	@ (801c044 <dir_register+0x1ec>)
 801bf26:	fba2 2303 	umull	r2, r3, r2, r3
 801bf2a:	089b      	lsrs	r3, r3, #2
 801bf2c:	3301      	adds	r3, #1
 801bf2e:	e000      	b.n	801bf32 <dir_register+0xda>
 801bf30:	2301      	movs	r3, #1
 801bf32:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801bf34:	6a39      	ldr	r1, [r7, #32]
 801bf36:	6878      	ldr	r0, [r7, #4]
 801bf38:	f7ff fbb6 	bl	801b6a8 <dir_alloc>
 801bf3c:	4603      	mov	r3, r0
 801bf3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801bf42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	d148      	bne.n	801bfdc <dir_register+0x184>
 801bf4a:	6a3b      	ldr	r3, [r7, #32]
 801bf4c:	3b01      	subs	r3, #1
 801bf4e:	623b      	str	r3, [r7, #32]
 801bf50:	6a3b      	ldr	r3, [r7, #32]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d042      	beq.n	801bfdc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	695a      	ldr	r2, [r3, #20]
 801bf5a:	6a3b      	ldr	r3, [r7, #32]
 801bf5c:	015b      	lsls	r3, r3, #5
 801bf5e:	1ad3      	subs	r3, r2, r3
 801bf60:	4619      	mov	r1, r3
 801bf62:	6878      	ldr	r0, [r7, #4]
 801bf64:	f7ff fa41 	bl	801b3ea <dir_sdi>
 801bf68:	4603      	mov	r3, r0
 801bf6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801bf6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d132      	bne.n	801bfdc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	3324      	adds	r3, #36	@ 0x24
 801bf7a:	4618      	mov	r0, r3
 801bf7c:	f7ff fde4 	bl	801bb48 <sum_sfn>
 801bf80:	4603      	mov	r3, r0
 801bf82:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	69db      	ldr	r3, [r3, #28]
 801bf88:	4619      	mov	r1, r3
 801bf8a:	69f8      	ldr	r0, [r7, #28]
 801bf8c:	f7fe fe4e 	bl	801ac2c <move_window>
 801bf90:	4603      	mov	r3, r0
 801bf92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801bf96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d11d      	bne.n	801bfda <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801bf9e:	69fb      	ldr	r3, [r7, #28]
 801bfa0:	6918      	ldr	r0, [r3, #16]
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	6a19      	ldr	r1, [r3, #32]
 801bfa6:	6a3b      	ldr	r3, [r7, #32]
 801bfa8:	b2da      	uxtb	r2, r3
 801bfaa:	7efb      	ldrb	r3, [r7, #27]
 801bfac:	f7ff fcd6 	bl	801b95c <put_lfn>
				fs->wflag = 1;
 801bfb0:	69fb      	ldr	r3, [r7, #28]
 801bfb2:	2201      	movs	r2, #1
 801bfb4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801bfb6:	2100      	movs	r1, #0
 801bfb8:	6878      	ldr	r0, [r7, #4]
 801bfba:	f7ff fa9f 	bl	801b4fc <dir_next>
 801bfbe:	4603      	mov	r3, r0
 801bfc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801bfc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d107      	bne.n	801bfdc <dir_register+0x184>
 801bfcc:	6a3b      	ldr	r3, [r7, #32]
 801bfce:	3b01      	subs	r3, #1
 801bfd0:	623b      	str	r3, [r7, #32]
 801bfd2:	6a3b      	ldr	r3, [r7, #32]
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d1d5      	bne.n	801bf84 <dir_register+0x12c>
 801bfd8:	e000      	b.n	801bfdc <dir_register+0x184>
				if (res != FR_OK) break;
 801bfda:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801bfdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d128      	bne.n	801c036 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	69db      	ldr	r3, [r3, #28]
 801bfe8:	4619      	mov	r1, r3
 801bfea:	69f8      	ldr	r0, [r7, #28]
 801bfec:	f7fe fe1e 	bl	801ac2c <move_window>
 801bff0:	4603      	mov	r3, r0
 801bff2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801bff6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d11b      	bne.n	801c036 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	6a1b      	ldr	r3, [r3, #32]
 801c002:	2220      	movs	r2, #32
 801c004:	2100      	movs	r1, #0
 801c006:	4618      	mov	r0, r3
 801c008:	f7fe fc03 	bl	801a812 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	6a18      	ldr	r0, [r3, #32]
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	3324      	adds	r3, #36	@ 0x24
 801c014:	220b      	movs	r2, #11
 801c016:	4619      	mov	r1, r3
 801c018:	f7fe fbda 	bl	801a7d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	6a1b      	ldr	r3, [r3, #32]
 801c026:	330c      	adds	r3, #12
 801c028:	f002 0218 	and.w	r2, r2, #24
 801c02c:	b2d2      	uxtb	r2, r2
 801c02e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c030:	69fb      	ldr	r3, [r7, #28]
 801c032:	2201      	movs	r2, #1
 801c034:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c036:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c03a:	4618      	mov	r0, r3
 801c03c:	3730      	adds	r7, #48	@ 0x30
 801c03e:	46bd      	mov	sp, r7
 801c040:	bd80      	pop	{r7, pc}
 801c042:	bf00      	nop
 801c044:	4ec4ec4f 	.word	0x4ec4ec4f

0801c048 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c048:	b580      	push	{r7, lr}
 801c04a:	b086      	sub	sp, #24
 801c04c:	af00      	add	r7, sp, #0
 801c04e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	695b      	ldr	r3, [r3, #20]
 801c05a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c060:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c064:	d007      	beq.n	801c076 <dir_remove+0x2e>
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c06a:	4619      	mov	r1, r3
 801c06c:	6878      	ldr	r0, [r7, #4]
 801c06e:	f7ff f9bc 	bl	801b3ea <dir_sdi>
 801c072:	4603      	mov	r3, r0
 801c074:	e000      	b.n	801c078 <dir_remove+0x30>
 801c076:	2300      	movs	r3, #0
 801c078:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c07a:	7dfb      	ldrb	r3, [r7, #23]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d128      	bne.n	801c0d2 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	69db      	ldr	r3, [r3, #28]
 801c084:	4619      	mov	r1, r3
 801c086:	6938      	ldr	r0, [r7, #16]
 801c088:	f7fe fdd0 	bl	801ac2c <move_window>
 801c08c:	4603      	mov	r3, r0
 801c08e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c090:	7dfb      	ldrb	r3, [r7, #23]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d115      	bne.n	801c0c2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	6a1b      	ldr	r3, [r3, #32]
 801c09a:	22e5      	movs	r2, #229	@ 0xe5
 801c09c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c09e:	693b      	ldr	r3, [r7, #16]
 801c0a0:	2201      	movs	r2, #1
 801c0a2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	695b      	ldr	r3, [r3, #20]
 801c0a8:	68fa      	ldr	r2, [r7, #12]
 801c0aa:	429a      	cmp	r2, r3
 801c0ac:	d90b      	bls.n	801c0c6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c0ae:	2100      	movs	r1, #0
 801c0b0:	6878      	ldr	r0, [r7, #4]
 801c0b2:	f7ff fa23 	bl	801b4fc <dir_next>
 801c0b6:	4603      	mov	r3, r0
 801c0b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c0ba:	7dfb      	ldrb	r3, [r7, #23]
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d0df      	beq.n	801c080 <dir_remove+0x38>
 801c0c0:	e002      	b.n	801c0c8 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c0c2:	bf00      	nop
 801c0c4:	e000      	b.n	801c0c8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c0c6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c0c8:	7dfb      	ldrb	r3, [r7, #23]
 801c0ca:	2b04      	cmp	r3, #4
 801c0cc:	d101      	bne.n	801c0d2 <dir_remove+0x8a>
 801c0ce:	2302      	movs	r3, #2
 801c0d0:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c0d2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c0d4:	4618      	mov	r0, r3
 801c0d6:	3718      	adds	r7, #24
 801c0d8:	46bd      	mov	sp, r7
 801c0da:	bd80      	pop	{r7, pc}

0801c0dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c0dc:	b580      	push	{r7, lr}
 801c0de:	b08a      	sub	sp, #40	@ 0x28
 801c0e0:	af00      	add	r7, sp, #0
 801c0e2:	6078      	str	r0, [r7, #4]
 801c0e4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c0e6:	683b      	ldr	r3, [r7, #0]
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	613b      	str	r3, [r7, #16]
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	691b      	ldr	r3, [r3, #16]
 801c0f2:	60fb      	str	r3, [r7, #12]
 801c0f4:	2300      	movs	r3, #0
 801c0f6:	617b      	str	r3, [r7, #20]
 801c0f8:	697b      	ldr	r3, [r7, #20]
 801c0fa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c0fc:	69bb      	ldr	r3, [r7, #24]
 801c0fe:	1c5a      	adds	r2, r3, #1
 801c100:	61ba      	str	r2, [r7, #24]
 801c102:	693a      	ldr	r2, [r7, #16]
 801c104:	4413      	add	r3, r2
 801c106:	781b      	ldrb	r3, [r3, #0]
 801c108:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801c10a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c10c:	2b1f      	cmp	r3, #31
 801c10e:	d940      	bls.n	801c192 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801c110:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c112:	2b2f      	cmp	r3, #47	@ 0x2f
 801c114:	d006      	beq.n	801c124 <create_name+0x48>
 801c116:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c118:	2b5c      	cmp	r3, #92	@ 0x5c
 801c11a:	d110      	bne.n	801c13e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c11c:	e002      	b.n	801c124 <create_name+0x48>
 801c11e:	69bb      	ldr	r3, [r7, #24]
 801c120:	3301      	adds	r3, #1
 801c122:	61bb      	str	r3, [r7, #24]
 801c124:	693a      	ldr	r2, [r7, #16]
 801c126:	69bb      	ldr	r3, [r7, #24]
 801c128:	4413      	add	r3, r2
 801c12a:	781b      	ldrb	r3, [r3, #0]
 801c12c:	2b2f      	cmp	r3, #47	@ 0x2f
 801c12e:	d0f6      	beq.n	801c11e <create_name+0x42>
 801c130:	693a      	ldr	r2, [r7, #16]
 801c132:	69bb      	ldr	r3, [r7, #24]
 801c134:	4413      	add	r3, r2
 801c136:	781b      	ldrb	r3, [r3, #0]
 801c138:	2b5c      	cmp	r3, #92	@ 0x5c
 801c13a:	d0f0      	beq.n	801c11e <create_name+0x42>
			break;
 801c13c:	e02a      	b.n	801c194 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801c13e:	697b      	ldr	r3, [r7, #20]
 801c140:	2bfe      	cmp	r3, #254	@ 0xfe
 801c142:	d901      	bls.n	801c148 <create_name+0x6c>
 801c144:	2306      	movs	r3, #6
 801c146:	e17d      	b.n	801c444 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801c148:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c14a:	b2db      	uxtb	r3, r3
 801c14c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801c14e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c150:	2101      	movs	r1, #1
 801c152:	4618      	mov	r0, r3
 801c154:	f001 fa98 	bl	801d688 <ff_convert>
 801c158:	4603      	mov	r3, r0
 801c15a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801c15c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d101      	bne.n	801c166 <create_name+0x8a>
 801c162:	2306      	movs	r3, #6
 801c164:	e16e      	b.n	801c444 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801c166:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c168:	2b7f      	cmp	r3, #127	@ 0x7f
 801c16a:	d809      	bhi.n	801c180 <create_name+0xa4>
 801c16c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c16e:	4619      	mov	r1, r3
 801c170:	488d      	ldr	r0, [pc, #564]	@ (801c3a8 <create_name+0x2cc>)
 801c172:	f7fe fb90 	bl	801a896 <chk_chr>
 801c176:	4603      	mov	r3, r0
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d001      	beq.n	801c180 <create_name+0xa4>
 801c17c:	2306      	movs	r3, #6
 801c17e:	e161      	b.n	801c444 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801c180:	697b      	ldr	r3, [r7, #20]
 801c182:	1c5a      	adds	r2, r3, #1
 801c184:	617a      	str	r2, [r7, #20]
 801c186:	005b      	lsls	r3, r3, #1
 801c188:	68fa      	ldr	r2, [r7, #12]
 801c18a:	4413      	add	r3, r2
 801c18c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c18e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801c190:	e7b4      	b.n	801c0fc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801c192:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801c194:	693a      	ldr	r2, [r7, #16]
 801c196:	69bb      	ldr	r3, [r7, #24]
 801c198:	441a      	add	r2, r3
 801c19a:	683b      	ldr	r3, [r7, #0]
 801c19c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801c19e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1a0:	2b1f      	cmp	r3, #31
 801c1a2:	d801      	bhi.n	801c1a8 <create_name+0xcc>
 801c1a4:	2304      	movs	r3, #4
 801c1a6:	e000      	b.n	801c1aa <create_name+0xce>
 801c1a8:	2300      	movs	r3, #0
 801c1aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c1ae:	e011      	b.n	801c1d4 <create_name+0xf8>
		w = lfn[di - 1];
 801c1b0:	697a      	ldr	r2, [r7, #20]
 801c1b2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c1b6:	4413      	add	r3, r2
 801c1b8:	005b      	lsls	r3, r3, #1
 801c1ba:	68fa      	ldr	r2, [r7, #12]
 801c1bc:	4413      	add	r3, r2
 801c1be:	881b      	ldrh	r3, [r3, #0]
 801c1c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801c1c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1c4:	2b20      	cmp	r3, #32
 801c1c6:	d002      	beq.n	801c1ce <create_name+0xf2>
 801c1c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1ca:	2b2e      	cmp	r3, #46	@ 0x2e
 801c1cc:	d106      	bne.n	801c1dc <create_name+0x100>
		di--;
 801c1ce:	697b      	ldr	r3, [r7, #20]
 801c1d0:	3b01      	subs	r3, #1
 801c1d2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c1d4:	697b      	ldr	r3, [r7, #20]
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	d1ea      	bne.n	801c1b0 <create_name+0xd4>
 801c1da:	e000      	b.n	801c1de <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801c1dc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801c1de:	697b      	ldr	r3, [r7, #20]
 801c1e0:	005b      	lsls	r3, r3, #1
 801c1e2:	68fa      	ldr	r2, [r7, #12]
 801c1e4:	4413      	add	r3, r2
 801c1e6:	2200      	movs	r2, #0
 801c1e8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801c1ea:	697b      	ldr	r3, [r7, #20]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d101      	bne.n	801c1f4 <create_name+0x118>
 801c1f0:	2306      	movs	r3, #6
 801c1f2:	e127      	b.n	801c444 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	3324      	adds	r3, #36	@ 0x24
 801c1f8:	220b      	movs	r2, #11
 801c1fa:	2120      	movs	r1, #32
 801c1fc:	4618      	mov	r0, r3
 801c1fe:	f7fe fb08 	bl	801a812 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801c202:	2300      	movs	r3, #0
 801c204:	61bb      	str	r3, [r7, #24]
 801c206:	e002      	b.n	801c20e <create_name+0x132>
 801c208:	69bb      	ldr	r3, [r7, #24]
 801c20a:	3301      	adds	r3, #1
 801c20c:	61bb      	str	r3, [r7, #24]
 801c20e:	69bb      	ldr	r3, [r7, #24]
 801c210:	005b      	lsls	r3, r3, #1
 801c212:	68fa      	ldr	r2, [r7, #12]
 801c214:	4413      	add	r3, r2
 801c216:	881b      	ldrh	r3, [r3, #0]
 801c218:	2b20      	cmp	r3, #32
 801c21a:	d0f5      	beq.n	801c208 <create_name+0x12c>
 801c21c:	69bb      	ldr	r3, [r7, #24]
 801c21e:	005b      	lsls	r3, r3, #1
 801c220:	68fa      	ldr	r2, [r7, #12]
 801c222:	4413      	add	r3, r2
 801c224:	881b      	ldrh	r3, [r3, #0]
 801c226:	2b2e      	cmp	r3, #46	@ 0x2e
 801c228:	d0ee      	beq.n	801c208 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801c22a:	69bb      	ldr	r3, [r7, #24]
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d009      	beq.n	801c244 <create_name+0x168>
 801c230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c234:	f043 0303 	orr.w	r3, r3, #3
 801c238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801c23c:	e002      	b.n	801c244 <create_name+0x168>
 801c23e:	697b      	ldr	r3, [r7, #20]
 801c240:	3b01      	subs	r3, #1
 801c242:	617b      	str	r3, [r7, #20]
 801c244:	697b      	ldr	r3, [r7, #20]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d009      	beq.n	801c25e <create_name+0x182>
 801c24a:	697a      	ldr	r2, [r7, #20]
 801c24c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c250:	4413      	add	r3, r2
 801c252:	005b      	lsls	r3, r3, #1
 801c254:	68fa      	ldr	r2, [r7, #12]
 801c256:	4413      	add	r3, r2
 801c258:	881b      	ldrh	r3, [r3, #0]
 801c25a:	2b2e      	cmp	r3, #46	@ 0x2e
 801c25c:	d1ef      	bne.n	801c23e <create_name+0x162>

	i = b = 0; ni = 8;
 801c25e:	2300      	movs	r3, #0
 801c260:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c264:	2300      	movs	r3, #0
 801c266:	623b      	str	r3, [r7, #32]
 801c268:	2308      	movs	r3, #8
 801c26a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801c26c:	69bb      	ldr	r3, [r7, #24]
 801c26e:	1c5a      	adds	r2, r3, #1
 801c270:	61ba      	str	r2, [r7, #24]
 801c272:	005b      	lsls	r3, r3, #1
 801c274:	68fa      	ldr	r2, [r7, #12]
 801c276:	4413      	add	r3, r2
 801c278:	881b      	ldrh	r3, [r3, #0]
 801c27a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801c27c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c27e:	2b00      	cmp	r3, #0
 801c280:	f000 8090 	beq.w	801c3a4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801c284:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c286:	2b20      	cmp	r3, #32
 801c288:	d006      	beq.n	801c298 <create_name+0x1bc>
 801c28a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c28c:	2b2e      	cmp	r3, #46	@ 0x2e
 801c28e:	d10a      	bne.n	801c2a6 <create_name+0x1ca>
 801c290:	69ba      	ldr	r2, [r7, #24]
 801c292:	697b      	ldr	r3, [r7, #20]
 801c294:	429a      	cmp	r2, r3
 801c296:	d006      	beq.n	801c2a6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801c298:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c29c:	f043 0303 	orr.w	r3, r3, #3
 801c2a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c2a4:	e07d      	b.n	801c3a2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801c2a6:	6a3a      	ldr	r2, [r7, #32]
 801c2a8:	69fb      	ldr	r3, [r7, #28]
 801c2aa:	429a      	cmp	r2, r3
 801c2ac:	d203      	bcs.n	801c2b6 <create_name+0x1da>
 801c2ae:	69ba      	ldr	r2, [r7, #24]
 801c2b0:	697b      	ldr	r3, [r7, #20]
 801c2b2:	429a      	cmp	r2, r3
 801c2b4:	d123      	bne.n	801c2fe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801c2b6:	69fb      	ldr	r3, [r7, #28]
 801c2b8:	2b0b      	cmp	r3, #11
 801c2ba:	d106      	bne.n	801c2ca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801c2bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c2c0:	f043 0303 	orr.w	r3, r3, #3
 801c2c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c2c8:	e075      	b.n	801c3b6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801c2ca:	69ba      	ldr	r2, [r7, #24]
 801c2cc:	697b      	ldr	r3, [r7, #20]
 801c2ce:	429a      	cmp	r2, r3
 801c2d0:	d005      	beq.n	801c2de <create_name+0x202>
 801c2d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c2d6:	f043 0303 	orr.w	r3, r3, #3
 801c2da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801c2de:	69ba      	ldr	r2, [r7, #24]
 801c2e0:	697b      	ldr	r3, [r7, #20]
 801c2e2:	429a      	cmp	r2, r3
 801c2e4:	d866      	bhi.n	801c3b4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801c2e6:	697b      	ldr	r3, [r7, #20]
 801c2e8:	61bb      	str	r3, [r7, #24]
 801c2ea:	2308      	movs	r3, #8
 801c2ec:	623b      	str	r3, [r7, #32]
 801c2ee:	230b      	movs	r3, #11
 801c2f0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801c2f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c2f6:	009b      	lsls	r3, r3, #2
 801c2f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c2fc:	e051      	b.n	801c3a2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801c2fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c300:	2b7f      	cmp	r3, #127	@ 0x7f
 801c302:	d914      	bls.n	801c32e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801c304:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c306:	2100      	movs	r1, #0
 801c308:	4618      	mov	r0, r3
 801c30a:	f001 f9bd 	bl	801d688 <ff_convert>
 801c30e:	4603      	mov	r3, r0
 801c310:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801c312:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c314:	2b00      	cmp	r3, #0
 801c316:	d004      	beq.n	801c322 <create_name+0x246>
 801c318:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c31a:	3b80      	subs	r3, #128	@ 0x80
 801c31c:	4a23      	ldr	r2, [pc, #140]	@ (801c3ac <create_name+0x2d0>)
 801c31e:	5cd3      	ldrb	r3, [r2, r3]
 801c320:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801c322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c326:	f043 0302 	orr.w	r3, r3, #2
 801c32a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801c32e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c330:	2b00      	cmp	r3, #0
 801c332:	d007      	beq.n	801c344 <create_name+0x268>
 801c334:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c336:	4619      	mov	r1, r3
 801c338:	481d      	ldr	r0, [pc, #116]	@ (801c3b0 <create_name+0x2d4>)
 801c33a:	f7fe faac 	bl	801a896 <chk_chr>
 801c33e:	4603      	mov	r3, r0
 801c340:	2b00      	cmp	r3, #0
 801c342:	d008      	beq.n	801c356 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801c344:	235f      	movs	r3, #95	@ 0x5f
 801c346:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c34c:	f043 0303 	orr.w	r3, r3, #3
 801c350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c354:	e01b      	b.n	801c38e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801c356:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c358:	2b40      	cmp	r3, #64	@ 0x40
 801c35a:	d909      	bls.n	801c370 <create_name+0x294>
 801c35c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c35e:	2b5a      	cmp	r3, #90	@ 0x5a
 801c360:	d806      	bhi.n	801c370 <create_name+0x294>
					b |= 2;
 801c362:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c366:	f043 0302 	orr.w	r3, r3, #2
 801c36a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c36e:	e00e      	b.n	801c38e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801c370:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c372:	2b60      	cmp	r3, #96	@ 0x60
 801c374:	d90b      	bls.n	801c38e <create_name+0x2b2>
 801c376:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c378:	2b7a      	cmp	r3, #122	@ 0x7a
 801c37a:	d808      	bhi.n	801c38e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801c37c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c380:	f043 0301 	orr.w	r3, r3, #1
 801c384:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c388:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c38a:	3b20      	subs	r3, #32
 801c38c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801c38e:	6a3b      	ldr	r3, [r7, #32]
 801c390:	1c5a      	adds	r2, r3, #1
 801c392:	623a      	str	r2, [r7, #32]
 801c394:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c396:	b2d1      	uxtb	r1, r2
 801c398:	687a      	ldr	r2, [r7, #4]
 801c39a:	4413      	add	r3, r2
 801c39c:	460a      	mov	r2, r1
 801c39e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801c3a2:	e763      	b.n	801c26c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801c3a4:	bf00      	nop
 801c3a6:	e006      	b.n	801c3b6 <create_name+0x2da>
 801c3a8:	0801e29c 	.word	0x0801e29c
 801c3ac:	0801e328 	.word	0x0801e328
 801c3b0:	0801e2a8 	.word	0x0801e2a8
			if (si > di) break;			/* No extension */
 801c3b4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801c3bc:	2be5      	cmp	r3, #229	@ 0xe5
 801c3be:	d103      	bne.n	801c3c8 <create_name+0x2ec>
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	2205      	movs	r2, #5
 801c3c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801c3c8:	69fb      	ldr	r3, [r7, #28]
 801c3ca:	2b08      	cmp	r3, #8
 801c3cc:	d104      	bne.n	801c3d8 <create_name+0x2fc>
 801c3ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c3d2:	009b      	lsls	r3, r3, #2
 801c3d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801c3d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c3dc:	f003 030c 	and.w	r3, r3, #12
 801c3e0:	2b0c      	cmp	r3, #12
 801c3e2:	d005      	beq.n	801c3f0 <create_name+0x314>
 801c3e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c3e8:	f003 0303 	and.w	r3, r3, #3
 801c3ec:	2b03      	cmp	r3, #3
 801c3ee:	d105      	bne.n	801c3fc <create_name+0x320>
 801c3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c3f4:	f043 0302 	orr.w	r3, r3, #2
 801c3f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801c3fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c400:	f003 0302 	and.w	r3, r3, #2
 801c404:	2b00      	cmp	r3, #0
 801c406:	d117      	bne.n	801c438 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801c408:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c40c:	f003 0303 	and.w	r3, r3, #3
 801c410:	2b01      	cmp	r3, #1
 801c412:	d105      	bne.n	801c420 <create_name+0x344>
 801c414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c418:	f043 0310 	orr.w	r3, r3, #16
 801c41c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801c420:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c424:	f003 030c 	and.w	r3, r3, #12
 801c428:	2b04      	cmp	r3, #4
 801c42a:	d105      	bne.n	801c438 <create_name+0x35c>
 801c42c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c430:	f043 0308 	orr.w	r3, r3, #8
 801c434:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801c43e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801c442:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801c444:	4618      	mov	r0, r3
 801c446:	3728      	adds	r7, #40	@ 0x28
 801c448:	46bd      	mov	sp, r7
 801c44a:	bd80      	pop	{r7, pc}

0801c44c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801c44c:	b580      	push	{r7, lr}
 801c44e:	b086      	sub	sp, #24
 801c450:	af00      	add	r7, sp, #0
 801c452:	6078      	str	r0, [r7, #4]
 801c454:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801c45a:	693b      	ldr	r3, [r7, #16]
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801c460:	e002      	b.n	801c468 <follow_path+0x1c>
 801c462:	683b      	ldr	r3, [r7, #0]
 801c464:	3301      	adds	r3, #1
 801c466:	603b      	str	r3, [r7, #0]
 801c468:	683b      	ldr	r3, [r7, #0]
 801c46a:	781b      	ldrb	r3, [r3, #0]
 801c46c:	2b2f      	cmp	r3, #47	@ 0x2f
 801c46e:	d0f8      	beq.n	801c462 <follow_path+0x16>
 801c470:	683b      	ldr	r3, [r7, #0]
 801c472:	781b      	ldrb	r3, [r3, #0]
 801c474:	2b5c      	cmp	r3, #92	@ 0x5c
 801c476:	d0f4      	beq.n	801c462 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801c478:	693b      	ldr	r3, [r7, #16]
 801c47a:	2200      	movs	r2, #0
 801c47c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801c47e:	683b      	ldr	r3, [r7, #0]
 801c480:	781b      	ldrb	r3, [r3, #0]
 801c482:	2b1f      	cmp	r3, #31
 801c484:	d80a      	bhi.n	801c49c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	2280      	movs	r2, #128	@ 0x80
 801c48a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801c48e:	2100      	movs	r1, #0
 801c490:	6878      	ldr	r0, [r7, #4]
 801c492:	f7fe ffaa 	bl	801b3ea <dir_sdi>
 801c496:	4603      	mov	r3, r0
 801c498:	75fb      	strb	r3, [r7, #23]
 801c49a:	e048      	b.n	801c52e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c49c:	463b      	mov	r3, r7
 801c49e:	4619      	mov	r1, r3
 801c4a0:	6878      	ldr	r0, [r7, #4]
 801c4a2:	f7ff fe1b 	bl	801c0dc <create_name>
 801c4a6:	4603      	mov	r3, r0
 801c4a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c4aa:	7dfb      	ldrb	r3, [r7, #23]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d139      	bne.n	801c524 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801c4b0:	6878      	ldr	r0, [r7, #4]
 801c4b2:	f7ff fc11 	bl	801bcd8 <dir_find>
 801c4b6:	4603      	mov	r3, r0
 801c4b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c4c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801c4c2:	7dfb      	ldrb	r3, [r7, #23]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d00a      	beq.n	801c4de <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801c4c8:	7dfb      	ldrb	r3, [r7, #23]
 801c4ca:	2b04      	cmp	r3, #4
 801c4cc:	d12c      	bne.n	801c528 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801c4ce:	7afb      	ldrb	r3, [r7, #11]
 801c4d0:	f003 0304 	and.w	r3, r3, #4
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d127      	bne.n	801c528 <follow_path+0xdc>
 801c4d8:	2305      	movs	r3, #5
 801c4da:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801c4dc:	e024      	b.n	801c528 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c4de:	7afb      	ldrb	r3, [r7, #11]
 801c4e0:	f003 0304 	and.w	r3, r3, #4
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d121      	bne.n	801c52c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801c4e8:	693b      	ldr	r3, [r7, #16]
 801c4ea:	799b      	ldrb	r3, [r3, #6]
 801c4ec:	f003 0310 	and.w	r3, r3, #16
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d102      	bne.n	801c4fa <follow_path+0xae>
				res = FR_NO_PATH; break;
 801c4f4:	2305      	movs	r3, #5
 801c4f6:	75fb      	strb	r3, [r7, #23]
 801c4f8:	e019      	b.n	801c52e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	695b      	ldr	r3, [r3, #20]
 801c504:	68fa      	ldr	r2, [r7, #12]
 801c506:	8992      	ldrh	r2, [r2, #12]
 801c508:	fbb3 f0f2 	udiv	r0, r3, r2
 801c50c:	fb00 f202 	mul.w	r2, r0, r2
 801c510:	1a9b      	subs	r3, r3, r2
 801c512:	440b      	add	r3, r1
 801c514:	4619      	mov	r1, r3
 801c516:	68f8      	ldr	r0, [r7, #12]
 801c518:	f7ff f90d 	bl	801b736 <ld_clust>
 801c51c:	4602      	mov	r2, r0
 801c51e:	693b      	ldr	r3, [r7, #16]
 801c520:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c522:	e7bb      	b.n	801c49c <follow_path+0x50>
			if (res != FR_OK) break;
 801c524:	bf00      	nop
 801c526:	e002      	b.n	801c52e <follow_path+0xe2>
				break;
 801c528:	bf00      	nop
 801c52a:	e000      	b.n	801c52e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c52c:	bf00      	nop
			}
		}
	}

	return res;
 801c52e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c530:	4618      	mov	r0, r3
 801c532:	3718      	adds	r7, #24
 801c534:	46bd      	mov	sp, r7
 801c536:	bd80      	pop	{r7, pc}

0801c538 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801c538:	b480      	push	{r7}
 801c53a:	b087      	sub	sp, #28
 801c53c:	af00      	add	r7, sp, #0
 801c53e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801c540:	f04f 33ff 	mov.w	r3, #4294967295
 801c544:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	d031      	beq.n	801c5b2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	617b      	str	r3, [r7, #20]
 801c554:	e002      	b.n	801c55c <get_ldnumber+0x24>
 801c556:	697b      	ldr	r3, [r7, #20]
 801c558:	3301      	adds	r3, #1
 801c55a:	617b      	str	r3, [r7, #20]
 801c55c:	697b      	ldr	r3, [r7, #20]
 801c55e:	781b      	ldrb	r3, [r3, #0]
 801c560:	2b1f      	cmp	r3, #31
 801c562:	d903      	bls.n	801c56c <get_ldnumber+0x34>
 801c564:	697b      	ldr	r3, [r7, #20]
 801c566:	781b      	ldrb	r3, [r3, #0]
 801c568:	2b3a      	cmp	r3, #58	@ 0x3a
 801c56a:	d1f4      	bne.n	801c556 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801c56c:	697b      	ldr	r3, [r7, #20]
 801c56e:	781b      	ldrb	r3, [r3, #0]
 801c570:	2b3a      	cmp	r3, #58	@ 0x3a
 801c572:	d11c      	bne.n	801c5ae <get_ldnumber+0x76>
			tp = *path;
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801c57a:	68fb      	ldr	r3, [r7, #12]
 801c57c:	1c5a      	adds	r2, r3, #1
 801c57e:	60fa      	str	r2, [r7, #12]
 801c580:	781b      	ldrb	r3, [r3, #0]
 801c582:	3b30      	subs	r3, #48	@ 0x30
 801c584:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801c586:	68bb      	ldr	r3, [r7, #8]
 801c588:	2b09      	cmp	r3, #9
 801c58a:	d80e      	bhi.n	801c5aa <get_ldnumber+0x72>
 801c58c:	68fa      	ldr	r2, [r7, #12]
 801c58e:	697b      	ldr	r3, [r7, #20]
 801c590:	429a      	cmp	r2, r3
 801c592:	d10a      	bne.n	801c5aa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801c594:	68bb      	ldr	r3, [r7, #8]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d107      	bne.n	801c5aa <get_ldnumber+0x72>
					vol = (int)i;
 801c59a:	68bb      	ldr	r3, [r7, #8]
 801c59c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801c59e:	697b      	ldr	r3, [r7, #20]
 801c5a0:	3301      	adds	r3, #1
 801c5a2:	617b      	str	r3, [r7, #20]
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	697a      	ldr	r2, [r7, #20]
 801c5a8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801c5aa:	693b      	ldr	r3, [r7, #16]
 801c5ac:	e002      	b.n	801c5b4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801c5ae:	2300      	movs	r3, #0
 801c5b0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801c5b2:	693b      	ldr	r3, [r7, #16]
}
 801c5b4:	4618      	mov	r0, r3
 801c5b6:	371c      	adds	r7, #28
 801c5b8:	46bd      	mov	sp, r7
 801c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5be:	4770      	bx	lr

0801c5c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801c5c0:	b580      	push	{r7, lr}
 801c5c2:	b082      	sub	sp, #8
 801c5c4:	af00      	add	r7, sp, #0
 801c5c6:	6078      	str	r0, [r7, #4]
 801c5c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	70da      	strb	r2, [r3, #3]
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	f04f 32ff 	mov.w	r2, #4294967295
 801c5d6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801c5d8:	6839      	ldr	r1, [r7, #0]
 801c5da:	6878      	ldr	r0, [r7, #4]
 801c5dc:	f7fe fb26 	bl	801ac2c <move_window>
 801c5e0:	4603      	mov	r3, r0
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d001      	beq.n	801c5ea <check_fs+0x2a>
 801c5e6:	2304      	movs	r3, #4
 801c5e8:	e038      	b.n	801c65c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	3338      	adds	r3, #56	@ 0x38
 801c5ee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801c5f2:	4618      	mov	r0, r3
 801c5f4:	f7fe f86a 	bl	801a6cc <ld_word>
 801c5f8:	4603      	mov	r3, r0
 801c5fa:	461a      	mov	r2, r3
 801c5fc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801c600:	429a      	cmp	r2, r3
 801c602:	d001      	beq.n	801c608 <check_fs+0x48>
 801c604:	2303      	movs	r3, #3
 801c606:	e029      	b.n	801c65c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c60e:	2be9      	cmp	r3, #233	@ 0xe9
 801c610:	d009      	beq.n	801c626 <check_fs+0x66>
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c618:	2beb      	cmp	r3, #235	@ 0xeb
 801c61a:	d11e      	bne.n	801c65a <check_fs+0x9a>
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801c622:	2b90      	cmp	r3, #144	@ 0x90
 801c624:	d119      	bne.n	801c65a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	3338      	adds	r3, #56	@ 0x38
 801c62a:	3336      	adds	r3, #54	@ 0x36
 801c62c:	4618      	mov	r0, r3
 801c62e:	f7fe f865 	bl	801a6fc <ld_dword>
 801c632:	4603      	mov	r3, r0
 801c634:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801c638:	4a0a      	ldr	r2, [pc, #40]	@ (801c664 <check_fs+0xa4>)
 801c63a:	4293      	cmp	r3, r2
 801c63c:	d101      	bne.n	801c642 <check_fs+0x82>
 801c63e:	2300      	movs	r3, #0
 801c640:	e00c      	b.n	801c65c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	3338      	adds	r3, #56	@ 0x38
 801c646:	3352      	adds	r3, #82	@ 0x52
 801c648:	4618      	mov	r0, r3
 801c64a:	f7fe f857 	bl	801a6fc <ld_dword>
 801c64e:	4603      	mov	r3, r0
 801c650:	4a05      	ldr	r2, [pc, #20]	@ (801c668 <check_fs+0xa8>)
 801c652:	4293      	cmp	r3, r2
 801c654:	d101      	bne.n	801c65a <check_fs+0x9a>
 801c656:	2300      	movs	r3, #0
 801c658:	e000      	b.n	801c65c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801c65a:	2302      	movs	r3, #2
}
 801c65c:	4618      	mov	r0, r3
 801c65e:	3708      	adds	r7, #8
 801c660:	46bd      	mov	sp, r7
 801c662:	bd80      	pop	{r7, pc}
 801c664:	00544146 	.word	0x00544146
 801c668:	33544146 	.word	0x33544146

0801c66c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801c66c:	b580      	push	{r7, lr}
 801c66e:	b096      	sub	sp, #88	@ 0x58
 801c670:	af00      	add	r7, sp, #0
 801c672:	60f8      	str	r0, [r7, #12]
 801c674:	60b9      	str	r1, [r7, #8]
 801c676:	4613      	mov	r3, r2
 801c678:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801c67a:	68bb      	ldr	r3, [r7, #8]
 801c67c:	2200      	movs	r2, #0
 801c67e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801c680:	68f8      	ldr	r0, [r7, #12]
 801c682:	f7ff ff59 	bl	801c538 <get_ldnumber>
 801c686:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801c688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	da01      	bge.n	801c692 <find_volume+0x26>
 801c68e:	230b      	movs	r3, #11
 801c690:	e265      	b.n	801cb5e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801c692:	4a9f      	ldr	r2, [pc, #636]	@ (801c910 <find_volume+0x2a4>)
 801c694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c69a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801c69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d101      	bne.n	801c6a6 <find_volume+0x3a>
 801c6a2:	230c      	movs	r3, #12
 801c6a4:	e25b      	b.n	801cb5e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801c6a6:	68bb      	ldr	r3, [r7, #8]
 801c6a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c6aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801c6ac:	79fb      	ldrb	r3, [r7, #7]
 801c6ae:	f023 0301 	bic.w	r3, r3, #1
 801c6b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801c6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6b6:	781b      	ldrb	r3, [r3, #0]
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d01a      	beq.n	801c6f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801c6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6be:	785b      	ldrb	r3, [r3, #1]
 801c6c0:	4618      	mov	r0, r3
 801c6c2:	f7fd ff63 	bl	801a58c <disk_status>
 801c6c6:	4603      	mov	r3, r0
 801c6c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801c6cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c6d0:	f003 0301 	and.w	r3, r3, #1
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	d10c      	bne.n	801c6f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801c6d8:	79fb      	ldrb	r3, [r7, #7]
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d007      	beq.n	801c6ee <find_volume+0x82>
 801c6de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c6e2:	f003 0304 	and.w	r3, r3, #4
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	d001      	beq.n	801c6ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801c6ea:	230a      	movs	r3, #10
 801c6ec:	e237      	b.n	801cb5e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801c6ee:	2300      	movs	r3, #0
 801c6f0:	e235      	b.n	801cb5e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801c6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6f4:	2200      	movs	r2, #0
 801c6f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801c6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c6fa:	b2da      	uxtb	r2, r3
 801c6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801c700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c702:	785b      	ldrb	r3, [r3, #1]
 801c704:	4618      	mov	r0, r3
 801c706:	f7fd ff5b 	bl	801a5c0 <disk_initialize>
 801c70a:	4603      	mov	r3, r0
 801c70c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801c710:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c714:	f003 0301 	and.w	r3, r3, #1
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d001      	beq.n	801c720 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801c71c:	2303      	movs	r3, #3
 801c71e:	e21e      	b.n	801cb5e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801c720:	79fb      	ldrb	r3, [r7, #7]
 801c722:	2b00      	cmp	r3, #0
 801c724:	d007      	beq.n	801c736 <find_volume+0xca>
 801c726:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c72a:	f003 0304 	and.w	r3, r3, #4
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d001      	beq.n	801c736 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801c732:	230a      	movs	r3, #10
 801c734:	e213      	b.n	801cb5e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801c736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c738:	7858      	ldrb	r0, [r3, #1]
 801c73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c73c:	330c      	adds	r3, #12
 801c73e:	461a      	mov	r2, r3
 801c740:	2102      	movs	r1, #2
 801c742:	f7fd ffa5 	bl	801a690 <disk_ioctl>
 801c746:	4603      	mov	r3, r0
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d001      	beq.n	801c750 <find_volume+0xe4>
 801c74c:	2301      	movs	r3, #1
 801c74e:	e206      	b.n	801cb5e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801c750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c752:	899b      	ldrh	r3, [r3, #12]
 801c754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801c758:	d80d      	bhi.n	801c776 <find_volume+0x10a>
 801c75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c75c:	899b      	ldrh	r3, [r3, #12]
 801c75e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c762:	d308      	bcc.n	801c776 <find_volume+0x10a>
 801c764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c766:	899b      	ldrh	r3, [r3, #12]
 801c768:	461a      	mov	r2, r3
 801c76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c76c:	899b      	ldrh	r3, [r3, #12]
 801c76e:	3b01      	subs	r3, #1
 801c770:	4013      	ands	r3, r2
 801c772:	2b00      	cmp	r3, #0
 801c774:	d001      	beq.n	801c77a <find_volume+0x10e>
 801c776:	2301      	movs	r3, #1
 801c778:	e1f1      	b.n	801cb5e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801c77a:	2300      	movs	r3, #0
 801c77c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801c77e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c780:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c782:	f7ff ff1d 	bl	801c5c0 <check_fs>
 801c786:	4603      	mov	r3, r0
 801c788:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801c78c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c790:	2b02      	cmp	r3, #2
 801c792:	d149      	bne.n	801c828 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c794:	2300      	movs	r3, #0
 801c796:	643b      	str	r3, [r7, #64]	@ 0x40
 801c798:	e01e      	b.n	801c7d8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801c79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c79c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801c7a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7a2:	011b      	lsls	r3, r3, #4
 801c7a4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801c7a8:	4413      	add	r3, r2
 801c7aa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801c7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7ae:	3304      	adds	r3, #4
 801c7b0:	781b      	ldrb	r3, [r3, #0]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d006      	beq.n	801c7c4 <find_volume+0x158>
 801c7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7b8:	3308      	adds	r3, #8
 801c7ba:	4618      	mov	r0, r3
 801c7bc:	f7fd ff9e 	bl	801a6fc <ld_dword>
 801c7c0:	4602      	mov	r2, r0
 801c7c2:	e000      	b.n	801c7c6 <find_volume+0x15a>
 801c7c4:	2200      	movs	r2, #0
 801c7c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7c8:	009b      	lsls	r3, r3, #2
 801c7ca:	3358      	adds	r3, #88	@ 0x58
 801c7cc:	443b      	add	r3, r7
 801c7ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c7d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7d4:	3301      	adds	r3, #1
 801c7d6:	643b      	str	r3, [r7, #64]	@ 0x40
 801c7d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7da:	2b03      	cmp	r3, #3
 801c7dc:	d9dd      	bls.n	801c79a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801c7de:	2300      	movs	r3, #0
 801c7e0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801c7e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	d002      	beq.n	801c7ee <find_volume+0x182>
 801c7e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7ea:	3b01      	subs	r3, #1
 801c7ec:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801c7ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7f0:	009b      	lsls	r3, r3, #2
 801c7f2:	3358      	adds	r3, #88	@ 0x58
 801c7f4:	443b      	add	r3, r7
 801c7f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801c7fa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801c7fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d005      	beq.n	801c80e <find_volume+0x1a2>
 801c802:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c804:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c806:	f7ff fedb 	bl	801c5c0 <check_fs>
 801c80a:	4603      	mov	r3, r0
 801c80c:	e000      	b.n	801c810 <find_volume+0x1a4>
 801c80e:	2303      	movs	r3, #3
 801c810:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801c814:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c818:	2b01      	cmp	r3, #1
 801c81a:	d905      	bls.n	801c828 <find_volume+0x1bc>
 801c81c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c81e:	3301      	adds	r3, #1
 801c820:	643b      	str	r3, [r7, #64]	@ 0x40
 801c822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c824:	2b03      	cmp	r3, #3
 801c826:	d9e2      	bls.n	801c7ee <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801c828:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c82c:	2b04      	cmp	r3, #4
 801c82e:	d101      	bne.n	801c834 <find_volume+0x1c8>
 801c830:	2301      	movs	r3, #1
 801c832:	e194      	b.n	801cb5e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801c834:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c838:	2b01      	cmp	r3, #1
 801c83a:	d901      	bls.n	801c840 <find_volume+0x1d4>
 801c83c:	230d      	movs	r3, #13
 801c83e:	e18e      	b.n	801cb5e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801c840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c842:	3338      	adds	r3, #56	@ 0x38
 801c844:	330b      	adds	r3, #11
 801c846:	4618      	mov	r0, r3
 801c848:	f7fd ff40 	bl	801a6cc <ld_word>
 801c84c:	4603      	mov	r3, r0
 801c84e:	461a      	mov	r2, r3
 801c850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c852:	899b      	ldrh	r3, [r3, #12]
 801c854:	429a      	cmp	r2, r3
 801c856:	d001      	beq.n	801c85c <find_volume+0x1f0>
 801c858:	230d      	movs	r3, #13
 801c85a:	e180      	b.n	801cb5e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801c85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c85e:	3338      	adds	r3, #56	@ 0x38
 801c860:	3316      	adds	r3, #22
 801c862:	4618      	mov	r0, r3
 801c864:	f7fd ff32 	bl	801a6cc <ld_word>
 801c868:	4603      	mov	r3, r0
 801c86a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801c86c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c86e:	2b00      	cmp	r3, #0
 801c870:	d106      	bne.n	801c880 <find_volume+0x214>
 801c872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c874:	3338      	adds	r3, #56	@ 0x38
 801c876:	3324      	adds	r3, #36	@ 0x24
 801c878:	4618      	mov	r0, r3
 801c87a:	f7fd ff3f 	bl	801a6fc <ld_dword>
 801c87e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801c880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c882:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c884:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801c886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c888:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801c88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c88e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801c890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c892:	789b      	ldrb	r3, [r3, #2]
 801c894:	2b01      	cmp	r3, #1
 801c896:	d005      	beq.n	801c8a4 <find_volume+0x238>
 801c898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c89a:	789b      	ldrb	r3, [r3, #2]
 801c89c:	2b02      	cmp	r3, #2
 801c89e:	d001      	beq.n	801c8a4 <find_volume+0x238>
 801c8a0:	230d      	movs	r3, #13
 801c8a2:	e15c      	b.n	801cb5e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801c8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8a6:	789b      	ldrb	r3, [r3, #2]
 801c8a8:	461a      	mov	r2, r3
 801c8aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c8ac:	fb02 f303 	mul.w	r3, r2, r3
 801c8b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801c8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801c8b8:	461a      	mov	r2, r3
 801c8ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801c8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8c0:	895b      	ldrh	r3, [r3, #10]
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	d008      	beq.n	801c8d8 <find_volume+0x26c>
 801c8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8c8:	895b      	ldrh	r3, [r3, #10]
 801c8ca:	461a      	mov	r2, r3
 801c8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8ce:	895b      	ldrh	r3, [r3, #10]
 801c8d0:	3b01      	subs	r3, #1
 801c8d2:	4013      	ands	r3, r2
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d001      	beq.n	801c8dc <find_volume+0x270>
 801c8d8:	230d      	movs	r3, #13
 801c8da:	e140      	b.n	801cb5e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801c8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8de:	3338      	adds	r3, #56	@ 0x38
 801c8e0:	3311      	adds	r3, #17
 801c8e2:	4618      	mov	r0, r3
 801c8e4:	f7fd fef2 	bl	801a6cc <ld_word>
 801c8e8:	4603      	mov	r3, r0
 801c8ea:	461a      	mov	r2, r3
 801c8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801c8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8f2:	891b      	ldrh	r3, [r3, #8]
 801c8f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c8f6:	8992      	ldrh	r2, [r2, #12]
 801c8f8:	0952      	lsrs	r2, r2, #5
 801c8fa:	b292      	uxth	r2, r2
 801c8fc:	fbb3 f1f2 	udiv	r1, r3, r2
 801c900:	fb01 f202 	mul.w	r2, r1, r2
 801c904:	1a9b      	subs	r3, r3, r2
 801c906:	b29b      	uxth	r3, r3
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d003      	beq.n	801c914 <find_volume+0x2a8>
 801c90c:	230d      	movs	r3, #13
 801c90e:	e126      	b.n	801cb5e <find_volume+0x4f2>
 801c910:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801c914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c916:	3338      	adds	r3, #56	@ 0x38
 801c918:	3313      	adds	r3, #19
 801c91a:	4618      	mov	r0, r3
 801c91c:	f7fd fed6 	bl	801a6cc <ld_word>
 801c920:	4603      	mov	r3, r0
 801c922:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801c924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c926:	2b00      	cmp	r3, #0
 801c928:	d106      	bne.n	801c938 <find_volume+0x2cc>
 801c92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c92c:	3338      	adds	r3, #56	@ 0x38
 801c92e:	3320      	adds	r3, #32
 801c930:	4618      	mov	r0, r3
 801c932:	f7fd fee3 	bl	801a6fc <ld_dword>
 801c936:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801c938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c93a:	3338      	adds	r3, #56	@ 0x38
 801c93c:	330e      	adds	r3, #14
 801c93e:	4618      	mov	r0, r3
 801c940:	f7fd fec4 	bl	801a6cc <ld_word>
 801c944:	4603      	mov	r3, r0
 801c946:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801c948:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d101      	bne.n	801c952 <find_volume+0x2e6>
 801c94e:	230d      	movs	r3, #13
 801c950:	e105      	b.n	801cb5e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801c952:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c956:	4413      	add	r3, r2
 801c958:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c95a:	8911      	ldrh	r1, [r2, #8]
 801c95c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c95e:	8992      	ldrh	r2, [r2, #12]
 801c960:	0952      	lsrs	r2, r2, #5
 801c962:	b292      	uxth	r2, r2
 801c964:	fbb1 f2f2 	udiv	r2, r1, r2
 801c968:	b292      	uxth	r2, r2
 801c96a:	4413      	add	r3, r2
 801c96c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801c96e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c972:	429a      	cmp	r2, r3
 801c974:	d201      	bcs.n	801c97a <find_volume+0x30e>
 801c976:	230d      	movs	r3, #13
 801c978:	e0f1      	b.n	801cb5e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801c97a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c97e:	1ad3      	subs	r3, r2, r3
 801c980:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c982:	8952      	ldrh	r2, [r2, #10]
 801c984:	fbb3 f3f2 	udiv	r3, r3, r2
 801c988:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801c98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d101      	bne.n	801c994 <find_volume+0x328>
 801c990:	230d      	movs	r3, #13
 801c992:	e0e4      	b.n	801cb5e <find_volume+0x4f2>
		fmt = FS_FAT32;
 801c994:	2303      	movs	r3, #3
 801c996:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801c99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c99c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801c9a0:	4293      	cmp	r3, r2
 801c9a2:	d802      	bhi.n	801c9aa <find_volume+0x33e>
 801c9a4:	2302      	movs	r3, #2
 801c9a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801c9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9ac:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801c9b0:	4293      	cmp	r3, r2
 801c9b2:	d802      	bhi.n	801c9ba <find_volume+0x34e>
 801c9b4:	2301      	movs	r3, #1
 801c9b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801c9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9bc:	1c9a      	adds	r2, r3, #2
 801c9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9c0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801c9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c9c6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801c9c8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c9ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c9cc:	441a      	add	r2, r3
 801c9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9d0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801c9d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9d6:	441a      	add	r2, r3
 801c9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9da:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801c9dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c9e0:	2b03      	cmp	r3, #3
 801c9e2:	d11e      	bne.n	801ca22 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801c9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9e6:	3338      	adds	r3, #56	@ 0x38
 801c9e8:	332a      	adds	r3, #42	@ 0x2a
 801c9ea:	4618      	mov	r0, r3
 801c9ec:	f7fd fe6e 	bl	801a6cc <ld_word>
 801c9f0:	4603      	mov	r3, r0
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d001      	beq.n	801c9fa <find_volume+0x38e>
 801c9f6:	230d      	movs	r3, #13
 801c9f8:	e0b1      	b.n	801cb5e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801c9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9fc:	891b      	ldrh	r3, [r3, #8]
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d001      	beq.n	801ca06 <find_volume+0x39a>
 801ca02:	230d      	movs	r3, #13
 801ca04:	e0ab      	b.n	801cb5e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801ca06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca08:	3338      	adds	r3, #56	@ 0x38
 801ca0a:	332c      	adds	r3, #44	@ 0x2c
 801ca0c:	4618      	mov	r0, r3
 801ca0e:	f7fd fe75 	bl	801a6fc <ld_dword>
 801ca12:	4602      	mov	r2, r0
 801ca14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca16:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801ca18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca1a:	69db      	ldr	r3, [r3, #28]
 801ca1c:	009b      	lsls	r3, r3, #2
 801ca1e:	647b      	str	r3, [r7, #68]	@ 0x44
 801ca20:	e01f      	b.n	801ca62 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801ca22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca24:	891b      	ldrh	r3, [r3, #8]
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d101      	bne.n	801ca2e <find_volume+0x3c2>
 801ca2a:	230d      	movs	r3, #13
 801ca2c:	e097      	b.n	801cb5e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801ca2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ca32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ca34:	441a      	add	r2, r3
 801ca36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca38:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801ca3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ca3e:	2b02      	cmp	r3, #2
 801ca40:	d103      	bne.n	801ca4a <find_volume+0x3de>
 801ca42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca44:	69db      	ldr	r3, [r3, #28]
 801ca46:	005b      	lsls	r3, r3, #1
 801ca48:	e00a      	b.n	801ca60 <find_volume+0x3f4>
 801ca4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca4c:	69da      	ldr	r2, [r3, #28]
 801ca4e:	4613      	mov	r3, r2
 801ca50:	005b      	lsls	r3, r3, #1
 801ca52:	4413      	add	r3, r2
 801ca54:	085a      	lsrs	r2, r3, #1
 801ca56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca58:	69db      	ldr	r3, [r3, #28]
 801ca5a:	f003 0301 	and.w	r3, r3, #1
 801ca5e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801ca60:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801ca62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca64:	6a1a      	ldr	r2, [r3, #32]
 801ca66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca68:	899b      	ldrh	r3, [r3, #12]
 801ca6a:	4619      	mov	r1, r3
 801ca6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ca6e:	440b      	add	r3, r1
 801ca70:	3b01      	subs	r3, #1
 801ca72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801ca74:	8989      	ldrh	r1, [r1, #12]
 801ca76:	fbb3 f3f1 	udiv	r3, r3, r1
 801ca7a:	429a      	cmp	r2, r3
 801ca7c:	d201      	bcs.n	801ca82 <find_volume+0x416>
 801ca7e:	230d      	movs	r3, #13
 801ca80:	e06d      	b.n	801cb5e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801ca82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca84:	f04f 32ff 	mov.w	r2, #4294967295
 801ca88:	619a      	str	r2, [r3, #24]
 801ca8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca8c:	699a      	ldr	r2, [r3, #24]
 801ca8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca90:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801ca92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca94:	2280      	movs	r2, #128	@ 0x80
 801ca96:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801ca98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ca9c:	2b03      	cmp	r3, #3
 801ca9e:	d149      	bne.n	801cb34 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801caa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801caa2:	3338      	adds	r3, #56	@ 0x38
 801caa4:	3330      	adds	r3, #48	@ 0x30
 801caa6:	4618      	mov	r0, r3
 801caa8:	f7fd fe10 	bl	801a6cc <ld_word>
 801caac:	4603      	mov	r3, r0
 801caae:	2b01      	cmp	r3, #1
 801cab0:	d140      	bne.n	801cb34 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801cab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cab4:	3301      	adds	r3, #1
 801cab6:	4619      	mov	r1, r3
 801cab8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801caba:	f7fe f8b7 	bl	801ac2c <move_window>
 801cabe:	4603      	mov	r3, r0
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d137      	bne.n	801cb34 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801cac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cac6:	2200      	movs	r2, #0
 801cac8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801caca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cacc:	3338      	adds	r3, #56	@ 0x38
 801cace:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cad2:	4618      	mov	r0, r3
 801cad4:	f7fd fdfa 	bl	801a6cc <ld_word>
 801cad8:	4603      	mov	r3, r0
 801cada:	461a      	mov	r2, r3
 801cadc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cae0:	429a      	cmp	r2, r3
 801cae2:	d127      	bne.n	801cb34 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801cae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cae6:	3338      	adds	r3, #56	@ 0x38
 801cae8:	4618      	mov	r0, r3
 801caea:	f7fd fe07 	bl	801a6fc <ld_dword>
 801caee:	4603      	mov	r3, r0
 801caf0:	4a1d      	ldr	r2, [pc, #116]	@ (801cb68 <find_volume+0x4fc>)
 801caf2:	4293      	cmp	r3, r2
 801caf4:	d11e      	bne.n	801cb34 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801caf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801caf8:	3338      	adds	r3, #56	@ 0x38
 801cafa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801cafe:	4618      	mov	r0, r3
 801cb00:	f7fd fdfc 	bl	801a6fc <ld_dword>
 801cb04:	4603      	mov	r3, r0
 801cb06:	4a19      	ldr	r2, [pc, #100]	@ (801cb6c <find_volume+0x500>)
 801cb08:	4293      	cmp	r3, r2
 801cb0a:	d113      	bne.n	801cb34 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801cb0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb0e:	3338      	adds	r3, #56	@ 0x38
 801cb10:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801cb14:	4618      	mov	r0, r3
 801cb16:	f7fd fdf1 	bl	801a6fc <ld_dword>
 801cb1a:	4602      	mov	r2, r0
 801cb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb1e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801cb20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb22:	3338      	adds	r3, #56	@ 0x38
 801cb24:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801cb28:	4618      	mov	r0, r3
 801cb2a:	f7fd fde7 	bl	801a6fc <ld_dword>
 801cb2e:	4602      	mov	r2, r0
 801cb30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb32:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801cb34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb36:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801cb3a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801cb3c:	4b0c      	ldr	r3, [pc, #48]	@ (801cb70 <find_volume+0x504>)
 801cb3e:	881b      	ldrh	r3, [r3, #0]
 801cb40:	3301      	adds	r3, #1
 801cb42:	b29a      	uxth	r2, r3
 801cb44:	4b0a      	ldr	r3, [pc, #40]	@ (801cb70 <find_volume+0x504>)
 801cb46:	801a      	strh	r2, [r3, #0]
 801cb48:	4b09      	ldr	r3, [pc, #36]	@ (801cb70 <find_volume+0x504>)
 801cb4a:	881a      	ldrh	r2, [r3, #0]
 801cb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb4e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801cb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb52:	4a08      	ldr	r2, [pc, #32]	@ (801cb74 <find_volume+0x508>)
 801cb54:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801cb56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cb58:	f7fe f800 	bl	801ab5c <clear_lock>
#endif
	return FR_OK;
 801cb5c:	2300      	movs	r3, #0
}
 801cb5e:	4618      	mov	r0, r3
 801cb60:	3758      	adds	r7, #88	@ 0x58
 801cb62:	46bd      	mov	sp, r7
 801cb64:	bd80      	pop	{r7, pc}
 801cb66:	bf00      	nop
 801cb68:	41615252 	.word	0x41615252
 801cb6c:	61417272 	.word	0x61417272
 801cb70:	24000554 	.word	0x24000554
 801cb74:	24000568 	.word	0x24000568

0801cb78 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801cb78:	b580      	push	{r7, lr}
 801cb7a:	b084      	sub	sp, #16
 801cb7c:	af00      	add	r7, sp, #0
 801cb7e:	6078      	str	r0, [r7, #4]
 801cb80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801cb82:	2309      	movs	r3, #9
 801cb84:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d01c      	beq.n	801cbc6 <validate+0x4e>
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	681b      	ldr	r3, [r3, #0]
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d018      	beq.n	801cbc6 <validate+0x4e>
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	781b      	ldrb	r3, [r3, #0]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d013      	beq.n	801cbc6 <validate+0x4e>
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	889a      	ldrh	r2, [r3, #4]
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	88db      	ldrh	r3, [r3, #6]
 801cba8:	429a      	cmp	r2, r3
 801cbaa:	d10c      	bne.n	801cbc6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	785b      	ldrb	r3, [r3, #1]
 801cbb2:	4618      	mov	r0, r3
 801cbb4:	f7fd fcea 	bl	801a58c <disk_status>
 801cbb8:	4603      	mov	r3, r0
 801cbba:	f003 0301 	and.w	r3, r3, #1
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d101      	bne.n	801cbc6 <validate+0x4e>
			res = FR_OK;
 801cbc2:	2300      	movs	r3, #0
 801cbc4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801cbc6:	7bfb      	ldrb	r3, [r7, #15]
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d102      	bne.n	801cbd2 <validate+0x5a>
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	e000      	b.n	801cbd4 <validate+0x5c>
 801cbd2:	2300      	movs	r3, #0
 801cbd4:	683a      	ldr	r2, [r7, #0]
 801cbd6:	6013      	str	r3, [r2, #0]
	return res;
 801cbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbda:	4618      	mov	r0, r3
 801cbdc:	3710      	adds	r7, #16
 801cbde:	46bd      	mov	sp, r7
 801cbe0:	bd80      	pop	{r7, pc}
	...

0801cbe4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801cbe4:	b580      	push	{r7, lr}
 801cbe6:	b088      	sub	sp, #32
 801cbe8:	af00      	add	r7, sp, #0
 801cbea:	60f8      	str	r0, [r7, #12]
 801cbec:	60b9      	str	r1, [r7, #8]
 801cbee:	4613      	mov	r3, r2
 801cbf0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801cbf2:	68bb      	ldr	r3, [r7, #8]
 801cbf4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801cbf6:	f107 0310 	add.w	r3, r7, #16
 801cbfa:	4618      	mov	r0, r3
 801cbfc:	f7ff fc9c 	bl	801c538 <get_ldnumber>
 801cc00:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801cc02:	69fb      	ldr	r3, [r7, #28]
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	da01      	bge.n	801cc0c <f_mount+0x28>
 801cc08:	230b      	movs	r3, #11
 801cc0a:	e02b      	b.n	801cc64 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801cc0c:	4a17      	ldr	r2, [pc, #92]	@ (801cc6c <f_mount+0x88>)
 801cc0e:	69fb      	ldr	r3, [r7, #28]
 801cc10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc14:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801cc16:	69bb      	ldr	r3, [r7, #24]
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d005      	beq.n	801cc28 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801cc1c:	69b8      	ldr	r0, [r7, #24]
 801cc1e:	f7fd ff9d 	bl	801ab5c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801cc22:	69bb      	ldr	r3, [r7, #24]
 801cc24:	2200      	movs	r2, #0
 801cc26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	d002      	beq.n	801cc34 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	2200      	movs	r2, #0
 801cc32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801cc34:	68fa      	ldr	r2, [r7, #12]
 801cc36:	490d      	ldr	r1, [pc, #52]	@ (801cc6c <f_mount+0x88>)
 801cc38:	69fb      	ldr	r3, [r7, #28]
 801cc3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801cc3e:	68fb      	ldr	r3, [r7, #12]
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	d002      	beq.n	801cc4a <f_mount+0x66>
 801cc44:	79fb      	ldrb	r3, [r7, #7]
 801cc46:	2b01      	cmp	r3, #1
 801cc48:	d001      	beq.n	801cc4e <f_mount+0x6a>
 801cc4a:	2300      	movs	r3, #0
 801cc4c:	e00a      	b.n	801cc64 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801cc4e:	f107 010c 	add.w	r1, r7, #12
 801cc52:	f107 0308 	add.w	r3, r7, #8
 801cc56:	2200      	movs	r2, #0
 801cc58:	4618      	mov	r0, r3
 801cc5a:	f7ff fd07 	bl	801c66c <find_volume>
 801cc5e:	4603      	mov	r3, r0
 801cc60:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801cc62:	7dfb      	ldrb	r3, [r7, #23]
}
 801cc64:	4618      	mov	r0, r3
 801cc66:	3720      	adds	r7, #32
 801cc68:	46bd      	mov	sp, r7
 801cc6a:	bd80      	pop	{r7, pc}
 801cc6c:	24000550 	.word	0x24000550

0801cc70 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801cc70:	b580      	push	{r7, lr}
 801cc72:	b09a      	sub	sp, #104	@ 0x68
 801cc74:	af00      	add	r7, sp, #0
 801cc76:	60f8      	str	r0, [r7, #12]
 801cc78:	60b9      	str	r1, [r7, #8]
 801cc7a:	4613      	mov	r3, r2
 801cc7c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d101      	bne.n	801cc88 <f_open+0x18>
 801cc84:	2309      	movs	r3, #9
 801cc86:	e1b7      	b.n	801cff8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801cc88:	79fb      	ldrb	r3, [r7, #7]
 801cc8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cc8e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801cc90:	79fa      	ldrb	r2, [r7, #7]
 801cc92:	f107 0114 	add.w	r1, r7, #20
 801cc96:	f107 0308 	add.w	r3, r7, #8
 801cc9a:	4618      	mov	r0, r3
 801cc9c:	f7ff fce6 	bl	801c66c <find_volume>
 801cca0:	4603      	mov	r3, r0
 801cca2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801cca6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	f040 819b 	bne.w	801cfe6 <f_open+0x376>
		dj.obj.fs = fs;
 801ccb0:	697b      	ldr	r3, [r7, #20]
 801ccb2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801ccb4:	68ba      	ldr	r2, [r7, #8]
 801ccb6:	f107 0318 	add.w	r3, r7, #24
 801ccba:	4611      	mov	r1, r2
 801ccbc:	4618      	mov	r0, r3
 801ccbe:	f7ff fbc5 	bl	801c44c <follow_path>
 801ccc2:	4603      	mov	r3, r0
 801ccc4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801ccc8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d118      	bne.n	801cd02 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801ccd0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801ccd4:	b25b      	sxtb	r3, r3
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	da03      	bge.n	801cce2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801ccda:	2306      	movs	r3, #6
 801ccdc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801cce0:	e00f      	b.n	801cd02 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801cce2:	79fb      	ldrb	r3, [r7, #7]
 801cce4:	2b01      	cmp	r3, #1
 801cce6:	bf8c      	ite	hi
 801cce8:	2301      	movhi	r3, #1
 801ccea:	2300      	movls	r3, #0
 801ccec:	b2db      	uxtb	r3, r3
 801ccee:	461a      	mov	r2, r3
 801ccf0:	f107 0318 	add.w	r3, r7, #24
 801ccf4:	4611      	mov	r1, r2
 801ccf6:	4618      	mov	r0, r3
 801ccf8:	f7fd fde8 	bl	801a8cc <chk_lock>
 801ccfc:	4603      	mov	r3, r0
 801ccfe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801cd02:	79fb      	ldrb	r3, [r7, #7]
 801cd04:	f003 031c 	and.w	r3, r3, #28
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d07f      	beq.n	801ce0c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801cd0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	d017      	beq.n	801cd44 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801cd14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cd18:	2b04      	cmp	r3, #4
 801cd1a:	d10e      	bne.n	801cd3a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801cd1c:	f7fd fe32 	bl	801a984 <enq_lock>
 801cd20:	4603      	mov	r3, r0
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d006      	beq.n	801cd34 <f_open+0xc4>
 801cd26:	f107 0318 	add.w	r3, r7, #24
 801cd2a:	4618      	mov	r0, r3
 801cd2c:	f7ff f894 	bl	801be58 <dir_register>
 801cd30:	4603      	mov	r3, r0
 801cd32:	e000      	b.n	801cd36 <f_open+0xc6>
 801cd34:	2312      	movs	r3, #18
 801cd36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801cd3a:	79fb      	ldrb	r3, [r7, #7]
 801cd3c:	f043 0308 	orr.w	r3, r3, #8
 801cd40:	71fb      	strb	r3, [r7, #7]
 801cd42:	e010      	b.n	801cd66 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801cd44:	7fbb      	ldrb	r3, [r7, #30]
 801cd46:	f003 0311 	and.w	r3, r3, #17
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	d003      	beq.n	801cd56 <f_open+0xe6>
					res = FR_DENIED;
 801cd4e:	2307      	movs	r3, #7
 801cd50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801cd54:	e007      	b.n	801cd66 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801cd56:	79fb      	ldrb	r3, [r7, #7]
 801cd58:	f003 0304 	and.w	r3, r3, #4
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d002      	beq.n	801cd66 <f_open+0xf6>
 801cd60:	2308      	movs	r3, #8
 801cd62:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801cd66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	d168      	bne.n	801ce40 <f_open+0x1d0>
 801cd6e:	79fb      	ldrb	r3, [r7, #7]
 801cd70:	f003 0308 	and.w	r3, r3, #8
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d063      	beq.n	801ce40 <f_open+0x1d0>
				dw = GET_FATTIME();
 801cd78:	f7fd fbaa 	bl	801a4d0 <get_fattime>
 801cd7c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801cd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd80:	330e      	adds	r3, #14
 801cd82:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cd84:	4618      	mov	r0, r3
 801cd86:	f7fd fcf7 	bl	801a778 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801cd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd8c:	3316      	adds	r3, #22
 801cd8e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cd90:	4618      	mov	r0, r3
 801cd92:	f7fd fcf1 	bl	801a778 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801cd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd98:	330b      	adds	r3, #11
 801cd9a:	2220      	movs	r2, #32
 801cd9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801cd9e:	697b      	ldr	r3, [r7, #20]
 801cda0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cda2:	4611      	mov	r1, r2
 801cda4:	4618      	mov	r0, r3
 801cda6:	f7fe fcc6 	bl	801b736 <ld_clust>
 801cdaa:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801cdac:	697b      	ldr	r3, [r7, #20]
 801cdae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801cdb0:	2200      	movs	r2, #0
 801cdb2:	4618      	mov	r0, r3
 801cdb4:	f7fe fcde 	bl	801b774 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801cdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdba:	331c      	adds	r3, #28
 801cdbc:	2100      	movs	r1, #0
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	f7fd fcda 	bl	801a778 <st_dword>
					fs->wflag = 1;
 801cdc4:	697b      	ldr	r3, [r7, #20]
 801cdc6:	2201      	movs	r2, #1
 801cdc8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801cdca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	d037      	beq.n	801ce40 <f_open+0x1d0>
						dw = fs->winsect;
 801cdd0:	697b      	ldr	r3, [r7, #20]
 801cdd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cdd4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801cdd6:	f107 0318 	add.w	r3, r7, #24
 801cdda:	2200      	movs	r2, #0
 801cddc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801cdde:	4618      	mov	r0, r3
 801cde0:	f7fe f9ce 	bl	801b180 <remove_chain>
 801cde4:	4603      	mov	r3, r0
 801cde6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801cdea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d126      	bne.n	801ce40 <f_open+0x1d0>
							res = move_window(fs, dw);
 801cdf2:	697b      	ldr	r3, [r7, #20]
 801cdf4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cdf6:	4618      	mov	r0, r3
 801cdf8:	f7fd ff18 	bl	801ac2c <move_window>
 801cdfc:	4603      	mov	r3, r0
 801cdfe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801ce02:	697b      	ldr	r3, [r7, #20]
 801ce04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ce06:	3a01      	subs	r2, #1
 801ce08:	615a      	str	r2, [r3, #20]
 801ce0a:	e019      	b.n	801ce40 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801ce0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d115      	bne.n	801ce40 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801ce14:	7fbb      	ldrb	r3, [r7, #30]
 801ce16:	f003 0310 	and.w	r3, r3, #16
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d003      	beq.n	801ce26 <f_open+0x1b6>
					res = FR_NO_FILE;
 801ce1e:	2304      	movs	r3, #4
 801ce20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801ce24:	e00c      	b.n	801ce40 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801ce26:	79fb      	ldrb	r3, [r7, #7]
 801ce28:	f003 0302 	and.w	r3, r3, #2
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d007      	beq.n	801ce40 <f_open+0x1d0>
 801ce30:	7fbb      	ldrb	r3, [r7, #30]
 801ce32:	f003 0301 	and.w	r3, r3, #1
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d002      	beq.n	801ce40 <f_open+0x1d0>
						res = FR_DENIED;
 801ce3a:	2307      	movs	r3, #7
 801ce3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801ce40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d126      	bne.n	801ce96 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801ce48:	79fb      	ldrb	r3, [r7, #7]
 801ce4a:	f003 0308 	and.w	r3, r3, #8
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d003      	beq.n	801ce5a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801ce52:	79fb      	ldrb	r3, [r7, #7]
 801ce54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ce58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801ce5a:	697b      	ldr	r3, [r7, #20]
 801ce5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ce5e:	68fb      	ldr	r3, [r7, #12]
 801ce60:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801ce62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ce64:	68fb      	ldr	r3, [r7, #12]
 801ce66:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801ce68:	79fb      	ldrb	r3, [r7, #7]
 801ce6a:	2b01      	cmp	r3, #1
 801ce6c:	bf8c      	ite	hi
 801ce6e:	2301      	movhi	r3, #1
 801ce70:	2300      	movls	r3, #0
 801ce72:	b2db      	uxtb	r3, r3
 801ce74:	461a      	mov	r2, r3
 801ce76:	f107 0318 	add.w	r3, r7, #24
 801ce7a:	4611      	mov	r1, r2
 801ce7c:	4618      	mov	r0, r3
 801ce7e:	f7fd fda3 	bl	801a9c8 <inc_lock>
 801ce82:	4602      	mov	r2, r0
 801ce84:	68fb      	ldr	r3, [r7, #12]
 801ce86:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	691b      	ldr	r3, [r3, #16]
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d102      	bne.n	801ce96 <f_open+0x226>
 801ce90:	2302      	movs	r3, #2
 801ce92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801ce96:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	f040 80a3 	bne.w	801cfe6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801cea0:	697b      	ldr	r3, [r7, #20]
 801cea2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cea4:	4611      	mov	r1, r2
 801cea6:	4618      	mov	r0, r3
 801cea8:	f7fe fc45 	bl	801b736 <ld_clust>
 801ceac:	4602      	mov	r2, r0
 801ceae:	68fb      	ldr	r3, [r7, #12]
 801ceb0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801ceb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ceb4:	331c      	adds	r3, #28
 801ceb6:	4618      	mov	r0, r3
 801ceb8:	f7fd fc20 	bl	801a6fc <ld_dword>
 801cebc:	4602      	mov	r2, r0
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801cec2:	68fb      	ldr	r3, [r7, #12]
 801cec4:	2200      	movs	r2, #0
 801cec6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801cec8:	697a      	ldr	r2, [r7, #20]
 801ceca:	68fb      	ldr	r3, [r7, #12]
 801cecc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801cece:	697b      	ldr	r3, [r7, #20]
 801ced0:	88da      	ldrh	r2, [r3, #6]
 801ced2:	68fb      	ldr	r3, [r7, #12]
 801ced4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801ced6:	68fb      	ldr	r3, [r7, #12]
 801ced8:	79fa      	ldrb	r2, [r7, #7]
 801ceda:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801cedc:	68fb      	ldr	r3, [r7, #12]
 801cede:	2200      	movs	r2, #0
 801cee0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801cee2:	68fb      	ldr	r3, [r7, #12]
 801cee4:	2200      	movs	r2, #0
 801cee6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801cee8:	68fb      	ldr	r3, [r7, #12]
 801ceea:	2200      	movs	r2, #0
 801ceec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801ceee:	68fb      	ldr	r3, [r7, #12]
 801cef0:	3330      	adds	r3, #48	@ 0x30
 801cef2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801cef6:	2100      	movs	r1, #0
 801cef8:	4618      	mov	r0, r3
 801cefa:	f7fd fc8a 	bl	801a812 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801cefe:	79fb      	ldrb	r3, [r7, #7]
 801cf00:	f003 0320 	and.w	r3, r3, #32
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	d06e      	beq.n	801cfe6 <f_open+0x376>
 801cf08:	68fb      	ldr	r3, [r7, #12]
 801cf0a:	68db      	ldr	r3, [r3, #12]
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d06a      	beq.n	801cfe6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801cf10:	68fb      	ldr	r3, [r7, #12]
 801cf12:	68da      	ldr	r2, [r3, #12]
 801cf14:	68fb      	ldr	r3, [r7, #12]
 801cf16:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801cf18:	697b      	ldr	r3, [r7, #20]
 801cf1a:	895b      	ldrh	r3, [r3, #10]
 801cf1c:	461a      	mov	r2, r3
 801cf1e:	697b      	ldr	r3, [r7, #20]
 801cf20:	899b      	ldrh	r3, [r3, #12]
 801cf22:	fb02 f303 	mul.w	r3, r2, r3
 801cf26:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	689b      	ldr	r3, [r3, #8]
 801cf2c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	68db      	ldr	r3, [r3, #12]
 801cf32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cf34:	e016      	b.n	801cf64 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801cf3a:	4618      	mov	r0, r3
 801cf3c:	f7fd ff33 	bl	801ada6 <get_fat>
 801cf40:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801cf42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cf44:	2b01      	cmp	r3, #1
 801cf46:	d802      	bhi.n	801cf4e <f_open+0x2de>
 801cf48:	2302      	movs	r3, #2
 801cf4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801cf4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cf50:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf54:	d102      	bne.n	801cf5c <f_open+0x2ec>
 801cf56:	2301      	movs	r3, #1
 801cf58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801cf5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801cf5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cf60:	1ad3      	subs	r3, r2, r3
 801cf62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cf64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	d103      	bne.n	801cf74 <f_open+0x304>
 801cf6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801cf6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cf70:	429a      	cmp	r2, r3
 801cf72:	d8e0      	bhi.n	801cf36 <f_open+0x2c6>
				}
				fp->clust = clst;
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801cf78:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801cf7a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d131      	bne.n	801cfe6 <f_open+0x376>
 801cf82:	697b      	ldr	r3, [r7, #20]
 801cf84:	899b      	ldrh	r3, [r3, #12]
 801cf86:	461a      	mov	r2, r3
 801cf88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cf8a:	fbb3 f1f2 	udiv	r1, r3, r2
 801cf8e:	fb01 f202 	mul.w	r2, r1, r2
 801cf92:	1a9b      	subs	r3, r3, r2
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d026      	beq.n	801cfe6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801cf98:	697b      	ldr	r3, [r7, #20]
 801cf9a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	f7fd fee3 	bl	801ad68 <clust2sect>
 801cfa2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801cfa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d103      	bne.n	801cfb2 <f_open+0x342>
						res = FR_INT_ERR;
 801cfaa:	2302      	movs	r3, #2
 801cfac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801cfb0:	e019      	b.n	801cfe6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801cfb2:	697b      	ldr	r3, [r7, #20]
 801cfb4:	899b      	ldrh	r3, [r3, #12]
 801cfb6:	461a      	mov	r2, r3
 801cfb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cfba:	fbb3 f2f2 	udiv	r2, r3, r2
 801cfbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cfc0:	441a      	add	r2, r3
 801cfc2:	68fb      	ldr	r3, [r7, #12]
 801cfc4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801cfc6:	697b      	ldr	r3, [r7, #20]
 801cfc8:	7858      	ldrb	r0, [r3, #1]
 801cfca:	68fb      	ldr	r3, [r7, #12]
 801cfcc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cfd0:	68fb      	ldr	r3, [r7, #12]
 801cfd2:	6a1a      	ldr	r2, [r3, #32]
 801cfd4:	2301      	movs	r3, #1
 801cfd6:	f7fd fb1b 	bl	801a610 <disk_read>
 801cfda:	4603      	mov	r3, r0
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d002      	beq.n	801cfe6 <f_open+0x376>
 801cfe0:	2301      	movs	r3, #1
 801cfe2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801cfe6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d002      	beq.n	801cff4 <f_open+0x384>
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	2200      	movs	r2, #0
 801cff2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801cff4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801cff8:	4618      	mov	r0, r3
 801cffa:	3768      	adds	r7, #104	@ 0x68
 801cffc:	46bd      	mov	sp, r7
 801cffe:	bd80      	pop	{r7, pc}

0801d000 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d000:	b580      	push	{r7, lr}
 801d002:	b08c      	sub	sp, #48	@ 0x30
 801d004:	af00      	add	r7, sp, #0
 801d006:	60f8      	str	r0, [r7, #12]
 801d008:	60b9      	str	r1, [r7, #8]
 801d00a:	607a      	str	r2, [r7, #4]
 801d00c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d00e:	68bb      	ldr	r3, [r7, #8]
 801d010:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d012:	683b      	ldr	r3, [r7, #0]
 801d014:	2200      	movs	r2, #0
 801d016:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	f107 0210 	add.w	r2, r7, #16
 801d01e:	4611      	mov	r1, r2
 801d020:	4618      	mov	r0, r3
 801d022:	f7ff fda9 	bl	801cb78 <validate>
 801d026:	4603      	mov	r3, r0
 801d028:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d02c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d030:	2b00      	cmp	r3, #0
 801d032:	d107      	bne.n	801d044 <f_write+0x44>
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	7d5b      	ldrb	r3, [r3, #21]
 801d038:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d03c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d040:	2b00      	cmp	r3, #0
 801d042:	d002      	beq.n	801d04a <f_write+0x4a>
 801d044:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d048:	e16a      	b.n	801d320 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d04a:	68fb      	ldr	r3, [r7, #12]
 801d04c:	7d1b      	ldrb	r3, [r3, #20]
 801d04e:	f003 0302 	and.w	r3, r3, #2
 801d052:	2b00      	cmp	r3, #0
 801d054:	d101      	bne.n	801d05a <f_write+0x5a>
 801d056:	2307      	movs	r3, #7
 801d058:	e162      	b.n	801d320 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d05a:	68fb      	ldr	r3, [r7, #12]
 801d05c:	699a      	ldr	r2, [r3, #24]
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	441a      	add	r2, r3
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	699b      	ldr	r3, [r3, #24]
 801d066:	429a      	cmp	r2, r3
 801d068:	f080 814c 	bcs.w	801d304 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d06c:	68fb      	ldr	r3, [r7, #12]
 801d06e:	699b      	ldr	r3, [r3, #24]
 801d070:	43db      	mvns	r3, r3
 801d072:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d074:	e146      	b.n	801d304 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d076:	68fb      	ldr	r3, [r7, #12]
 801d078:	699b      	ldr	r3, [r3, #24]
 801d07a:	693a      	ldr	r2, [r7, #16]
 801d07c:	8992      	ldrh	r2, [r2, #12]
 801d07e:	fbb3 f1f2 	udiv	r1, r3, r2
 801d082:	fb01 f202 	mul.w	r2, r1, r2
 801d086:	1a9b      	subs	r3, r3, r2
 801d088:	2b00      	cmp	r3, #0
 801d08a:	f040 80f1 	bne.w	801d270 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d08e:	68fb      	ldr	r3, [r7, #12]
 801d090:	699b      	ldr	r3, [r3, #24]
 801d092:	693a      	ldr	r2, [r7, #16]
 801d094:	8992      	ldrh	r2, [r2, #12]
 801d096:	fbb3 f3f2 	udiv	r3, r3, r2
 801d09a:	693a      	ldr	r2, [r7, #16]
 801d09c:	8952      	ldrh	r2, [r2, #10]
 801d09e:	3a01      	subs	r2, #1
 801d0a0:	4013      	ands	r3, r2
 801d0a2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d0a4:	69bb      	ldr	r3, [r7, #24]
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d143      	bne.n	801d132 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d0aa:	68fb      	ldr	r3, [r7, #12]
 801d0ac:	699b      	ldr	r3, [r3, #24]
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d10c      	bne.n	801d0cc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d0b2:	68fb      	ldr	r3, [r7, #12]
 801d0b4:	689b      	ldr	r3, [r3, #8]
 801d0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	d11a      	bne.n	801d0f4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d0be:	68fb      	ldr	r3, [r7, #12]
 801d0c0:	2100      	movs	r1, #0
 801d0c2:	4618      	mov	r0, r3
 801d0c4:	f7fe f8c1 	bl	801b24a <create_chain>
 801d0c8:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d0ca:	e013      	b.n	801d0f4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d0cc:	68fb      	ldr	r3, [r7, #12]
 801d0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	d007      	beq.n	801d0e4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d0d4:	68fb      	ldr	r3, [r7, #12]
 801d0d6:	699b      	ldr	r3, [r3, #24]
 801d0d8:	4619      	mov	r1, r3
 801d0da:	68f8      	ldr	r0, [r7, #12]
 801d0dc:	f7fe f94d 	bl	801b37a <clmt_clust>
 801d0e0:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d0e2:	e007      	b.n	801d0f4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d0e4:	68fa      	ldr	r2, [r7, #12]
 801d0e6:	68fb      	ldr	r3, [r7, #12]
 801d0e8:	69db      	ldr	r3, [r3, #28]
 801d0ea:	4619      	mov	r1, r3
 801d0ec:	4610      	mov	r0, r2
 801d0ee:	f7fe f8ac 	bl	801b24a <create_chain>
 801d0f2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d0f6:	2b00      	cmp	r3, #0
 801d0f8:	f000 8109 	beq.w	801d30e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d0fe:	2b01      	cmp	r3, #1
 801d100:	d104      	bne.n	801d10c <f_write+0x10c>
 801d102:	68fb      	ldr	r3, [r7, #12]
 801d104:	2202      	movs	r2, #2
 801d106:	755a      	strb	r2, [r3, #21]
 801d108:	2302      	movs	r3, #2
 801d10a:	e109      	b.n	801d320 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d112:	d104      	bne.n	801d11e <f_write+0x11e>
 801d114:	68fb      	ldr	r3, [r7, #12]
 801d116:	2201      	movs	r2, #1
 801d118:	755a      	strb	r2, [r3, #21]
 801d11a:	2301      	movs	r3, #1
 801d11c:	e100      	b.n	801d320 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801d11e:	68fb      	ldr	r3, [r7, #12]
 801d120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d122:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d124:	68fb      	ldr	r3, [r7, #12]
 801d126:	689b      	ldr	r3, [r3, #8]
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d102      	bne.n	801d132 <f_write+0x132>
 801d12c:	68fb      	ldr	r3, [r7, #12]
 801d12e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d130:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d132:	68fb      	ldr	r3, [r7, #12]
 801d134:	7d1b      	ldrb	r3, [r3, #20]
 801d136:	b25b      	sxtb	r3, r3
 801d138:	2b00      	cmp	r3, #0
 801d13a:	da18      	bge.n	801d16e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d13c:	693b      	ldr	r3, [r7, #16]
 801d13e:	7858      	ldrb	r0, [r3, #1]
 801d140:	68fb      	ldr	r3, [r7, #12]
 801d142:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d146:	68fb      	ldr	r3, [r7, #12]
 801d148:	6a1a      	ldr	r2, [r3, #32]
 801d14a:	2301      	movs	r3, #1
 801d14c:	f7fd fa80 	bl	801a650 <disk_write>
 801d150:	4603      	mov	r3, r0
 801d152:	2b00      	cmp	r3, #0
 801d154:	d004      	beq.n	801d160 <f_write+0x160>
 801d156:	68fb      	ldr	r3, [r7, #12]
 801d158:	2201      	movs	r2, #1
 801d15a:	755a      	strb	r2, [r3, #21]
 801d15c:	2301      	movs	r3, #1
 801d15e:	e0df      	b.n	801d320 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d160:	68fb      	ldr	r3, [r7, #12]
 801d162:	7d1b      	ldrb	r3, [r3, #20]
 801d164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d168:	b2da      	uxtb	r2, r3
 801d16a:	68fb      	ldr	r3, [r7, #12]
 801d16c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d16e:	693a      	ldr	r2, [r7, #16]
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	69db      	ldr	r3, [r3, #28]
 801d174:	4619      	mov	r1, r3
 801d176:	4610      	mov	r0, r2
 801d178:	f7fd fdf6 	bl	801ad68 <clust2sect>
 801d17c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d17e:	697b      	ldr	r3, [r7, #20]
 801d180:	2b00      	cmp	r3, #0
 801d182:	d104      	bne.n	801d18e <f_write+0x18e>
 801d184:	68fb      	ldr	r3, [r7, #12]
 801d186:	2202      	movs	r2, #2
 801d188:	755a      	strb	r2, [r3, #21]
 801d18a:	2302      	movs	r3, #2
 801d18c:	e0c8      	b.n	801d320 <f_write+0x320>
			sect += csect;
 801d18e:	697a      	ldr	r2, [r7, #20]
 801d190:	69bb      	ldr	r3, [r7, #24]
 801d192:	4413      	add	r3, r2
 801d194:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801d196:	693b      	ldr	r3, [r7, #16]
 801d198:	899b      	ldrh	r3, [r3, #12]
 801d19a:	461a      	mov	r2, r3
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	fbb3 f3f2 	udiv	r3, r3, r2
 801d1a2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801d1a4:	6a3b      	ldr	r3, [r7, #32]
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d043      	beq.n	801d232 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d1aa:	69ba      	ldr	r2, [r7, #24]
 801d1ac:	6a3b      	ldr	r3, [r7, #32]
 801d1ae:	4413      	add	r3, r2
 801d1b0:	693a      	ldr	r2, [r7, #16]
 801d1b2:	8952      	ldrh	r2, [r2, #10]
 801d1b4:	4293      	cmp	r3, r2
 801d1b6:	d905      	bls.n	801d1c4 <f_write+0x1c4>
					cc = fs->csize - csect;
 801d1b8:	693b      	ldr	r3, [r7, #16]
 801d1ba:	895b      	ldrh	r3, [r3, #10]
 801d1bc:	461a      	mov	r2, r3
 801d1be:	69bb      	ldr	r3, [r7, #24]
 801d1c0:	1ad3      	subs	r3, r2, r3
 801d1c2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d1c4:	693b      	ldr	r3, [r7, #16]
 801d1c6:	7858      	ldrb	r0, [r3, #1]
 801d1c8:	6a3b      	ldr	r3, [r7, #32]
 801d1ca:	697a      	ldr	r2, [r7, #20]
 801d1cc:	69f9      	ldr	r1, [r7, #28]
 801d1ce:	f7fd fa3f 	bl	801a650 <disk_write>
 801d1d2:	4603      	mov	r3, r0
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d004      	beq.n	801d1e2 <f_write+0x1e2>
 801d1d8:	68fb      	ldr	r3, [r7, #12]
 801d1da:	2201      	movs	r2, #1
 801d1dc:	755a      	strb	r2, [r3, #21]
 801d1de:	2301      	movs	r3, #1
 801d1e0:	e09e      	b.n	801d320 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801d1e2:	68fb      	ldr	r3, [r7, #12]
 801d1e4:	6a1a      	ldr	r2, [r3, #32]
 801d1e6:	697b      	ldr	r3, [r7, #20]
 801d1e8:	1ad3      	subs	r3, r2, r3
 801d1ea:	6a3a      	ldr	r2, [r7, #32]
 801d1ec:	429a      	cmp	r2, r3
 801d1ee:	d918      	bls.n	801d222 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801d1f0:	68fb      	ldr	r3, [r7, #12]
 801d1f2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801d1f6:	68fb      	ldr	r3, [r7, #12]
 801d1f8:	6a1a      	ldr	r2, [r3, #32]
 801d1fa:	697b      	ldr	r3, [r7, #20]
 801d1fc:	1ad3      	subs	r3, r2, r3
 801d1fe:	693a      	ldr	r2, [r7, #16]
 801d200:	8992      	ldrh	r2, [r2, #12]
 801d202:	fb02 f303 	mul.w	r3, r2, r3
 801d206:	69fa      	ldr	r2, [r7, #28]
 801d208:	18d1      	adds	r1, r2, r3
 801d20a:	693b      	ldr	r3, [r7, #16]
 801d20c:	899b      	ldrh	r3, [r3, #12]
 801d20e:	461a      	mov	r2, r3
 801d210:	f7fd fade 	bl	801a7d0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	7d1b      	ldrb	r3, [r3, #20]
 801d218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d21c:	b2da      	uxtb	r2, r3
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801d222:	693b      	ldr	r3, [r7, #16]
 801d224:	899b      	ldrh	r3, [r3, #12]
 801d226:	461a      	mov	r2, r3
 801d228:	6a3b      	ldr	r3, [r7, #32]
 801d22a:	fb02 f303 	mul.w	r3, r2, r3
 801d22e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801d230:	e04b      	b.n	801d2ca <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	6a1b      	ldr	r3, [r3, #32]
 801d236:	697a      	ldr	r2, [r7, #20]
 801d238:	429a      	cmp	r2, r3
 801d23a:	d016      	beq.n	801d26a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	699a      	ldr	r2, [r3, #24]
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d244:	429a      	cmp	r2, r3
 801d246:	d210      	bcs.n	801d26a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801d248:	693b      	ldr	r3, [r7, #16]
 801d24a:	7858      	ldrb	r0, [r3, #1]
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d252:	2301      	movs	r3, #1
 801d254:	697a      	ldr	r2, [r7, #20]
 801d256:	f7fd f9db 	bl	801a610 <disk_read>
 801d25a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801d25c:	2b00      	cmp	r3, #0
 801d25e:	d004      	beq.n	801d26a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	2201      	movs	r2, #1
 801d264:	755a      	strb	r2, [r3, #21]
 801d266:	2301      	movs	r3, #1
 801d268:	e05a      	b.n	801d320 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801d26a:	68fb      	ldr	r3, [r7, #12]
 801d26c:	697a      	ldr	r2, [r7, #20]
 801d26e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801d270:	693b      	ldr	r3, [r7, #16]
 801d272:	899b      	ldrh	r3, [r3, #12]
 801d274:	4618      	mov	r0, r3
 801d276:	68fb      	ldr	r3, [r7, #12]
 801d278:	699b      	ldr	r3, [r3, #24]
 801d27a:	693a      	ldr	r2, [r7, #16]
 801d27c:	8992      	ldrh	r2, [r2, #12]
 801d27e:	fbb3 f1f2 	udiv	r1, r3, r2
 801d282:	fb01 f202 	mul.w	r2, r1, r2
 801d286:	1a9b      	subs	r3, r3, r2
 801d288:	1ac3      	subs	r3, r0, r3
 801d28a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801d28c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	429a      	cmp	r2, r3
 801d292:	d901      	bls.n	801d298 <f_write+0x298>
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801d298:	68fb      	ldr	r3, [r7, #12]
 801d29a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d29e:	68fb      	ldr	r3, [r7, #12]
 801d2a0:	699b      	ldr	r3, [r3, #24]
 801d2a2:	693a      	ldr	r2, [r7, #16]
 801d2a4:	8992      	ldrh	r2, [r2, #12]
 801d2a6:	fbb3 f0f2 	udiv	r0, r3, r2
 801d2aa:	fb00 f202 	mul.w	r2, r0, r2
 801d2ae:	1a9b      	subs	r3, r3, r2
 801d2b0:	440b      	add	r3, r1
 801d2b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d2b4:	69f9      	ldr	r1, [r7, #28]
 801d2b6:	4618      	mov	r0, r3
 801d2b8:	f7fd fa8a 	bl	801a7d0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801d2bc:	68fb      	ldr	r3, [r7, #12]
 801d2be:	7d1b      	ldrb	r3, [r3, #20]
 801d2c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801d2c4:	b2da      	uxtb	r2, r3
 801d2c6:	68fb      	ldr	r3, [r7, #12]
 801d2c8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801d2ca:	69fa      	ldr	r2, [r7, #28]
 801d2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2ce:	4413      	add	r3, r2
 801d2d0:	61fb      	str	r3, [r7, #28]
 801d2d2:	68fb      	ldr	r3, [r7, #12]
 801d2d4:	699a      	ldr	r2, [r3, #24]
 801d2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2d8:	441a      	add	r2, r3
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	619a      	str	r2, [r3, #24]
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	68da      	ldr	r2, [r3, #12]
 801d2e2:	68fb      	ldr	r3, [r7, #12]
 801d2e4:	699b      	ldr	r3, [r3, #24]
 801d2e6:	429a      	cmp	r2, r3
 801d2e8:	bf38      	it	cc
 801d2ea:	461a      	movcc	r2, r3
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	60da      	str	r2, [r3, #12]
 801d2f0:	683b      	ldr	r3, [r7, #0]
 801d2f2:	681a      	ldr	r2, [r3, #0]
 801d2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2f6:	441a      	add	r2, r3
 801d2f8:	683b      	ldr	r3, [r7, #0]
 801d2fa:	601a      	str	r2, [r3, #0]
 801d2fc:	687a      	ldr	r2, [r7, #4]
 801d2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d300:	1ad3      	subs	r3, r2, r3
 801d302:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	2b00      	cmp	r3, #0
 801d308:	f47f aeb5 	bne.w	801d076 <f_write+0x76>
 801d30c:	e000      	b.n	801d310 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d30e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801d310:	68fb      	ldr	r3, [r7, #12]
 801d312:	7d1b      	ldrb	r3, [r3, #20]
 801d314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d318:	b2da      	uxtb	r2, r3
 801d31a:	68fb      	ldr	r3, [r7, #12]
 801d31c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801d31e:	2300      	movs	r3, #0
}
 801d320:	4618      	mov	r0, r3
 801d322:	3730      	adds	r7, #48	@ 0x30
 801d324:	46bd      	mov	sp, r7
 801d326:	bd80      	pop	{r7, pc}

0801d328 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801d328:	b580      	push	{r7, lr}
 801d32a:	b086      	sub	sp, #24
 801d32c:	af00      	add	r7, sp, #0
 801d32e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801d330:	687b      	ldr	r3, [r7, #4]
 801d332:	f107 0208 	add.w	r2, r7, #8
 801d336:	4611      	mov	r1, r2
 801d338:	4618      	mov	r0, r3
 801d33a:	f7ff fc1d 	bl	801cb78 <validate>
 801d33e:	4603      	mov	r3, r0
 801d340:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d342:	7dfb      	ldrb	r3, [r7, #23]
 801d344:	2b00      	cmp	r3, #0
 801d346:	d168      	bne.n	801d41a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	7d1b      	ldrb	r3, [r3, #20]
 801d34c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d350:	2b00      	cmp	r3, #0
 801d352:	d062      	beq.n	801d41a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	7d1b      	ldrb	r3, [r3, #20]
 801d358:	b25b      	sxtb	r3, r3
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	da15      	bge.n	801d38a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801d35e:	68bb      	ldr	r3, [r7, #8]
 801d360:	7858      	ldrb	r0, [r3, #1]
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	6a1a      	ldr	r2, [r3, #32]
 801d36c:	2301      	movs	r3, #1
 801d36e:	f7fd f96f 	bl	801a650 <disk_write>
 801d372:	4603      	mov	r3, r0
 801d374:	2b00      	cmp	r3, #0
 801d376:	d001      	beq.n	801d37c <f_sync+0x54>
 801d378:	2301      	movs	r3, #1
 801d37a:	e04f      	b.n	801d41c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	7d1b      	ldrb	r3, [r3, #20]
 801d380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d384:	b2da      	uxtb	r2, r3
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801d38a:	f7fd f8a1 	bl	801a4d0 <get_fattime>
 801d38e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801d390:	68ba      	ldr	r2, [r7, #8]
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d396:	4619      	mov	r1, r3
 801d398:	4610      	mov	r0, r2
 801d39a:	f7fd fc47 	bl	801ac2c <move_window>
 801d39e:	4603      	mov	r3, r0
 801d3a0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801d3a2:	7dfb      	ldrb	r3, [r7, #23]
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d138      	bne.n	801d41a <f_sync+0xf2>
					dir = fp->dir_ptr;
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d3ac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801d3ae:	68fb      	ldr	r3, [r7, #12]
 801d3b0:	330b      	adds	r3, #11
 801d3b2:	781a      	ldrb	r2, [r3, #0]
 801d3b4:	68fb      	ldr	r3, [r7, #12]
 801d3b6:	330b      	adds	r3, #11
 801d3b8:	f042 0220 	orr.w	r2, r2, #32
 801d3bc:	b2d2      	uxtb	r2, r2
 801d3be:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	6818      	ldr	r0, [r3, #0]
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	689b      	ldr	r3, [r3, #8]
 801d3c8:	461a      	mov	r2, r3
 801d3ca:	68f9      	ldr	r1, [r7, #12]
 801d3cc:	f7fe f9d2 	bl	801b774 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801d3d0:	68fb      	ldr	r3, [r7, #12]
 801d3d2:	f103 021c 	add.w	r2, r3, #28
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	68db      	ldr	r3, [r3, #12]
 801d3da:	4619      	mov	r1, r3
 801d3dc:	4610      	mov	r0, r2
 801d3de:	f7fd f9cb 	bl	801a778 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801d3e2:	68fb      	ldr	r3, [r7, #12]
 801d3e4:	3316      	adds	r3, #22
 801d3e6:	6939      	ldr	r1, [r7, #16]
 801d3e8:	4618      	mov	r0, r3
 801d3ea:	f7fd f9c5 	bl	801a778 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	3312      	adds	r3, #18
 801d3f2:	2100      	movs	r1, #0
 801d3f4:	4618      	mov	r0, r3
 801d3f6:	f7fd f9a4 	bl	801a742 <st_word>
					fs->wflag = 1;
 801d3fa:	68bb      	ldr	r3, [r7, #8]
 801d3fc:	2201      	movs	r2, #1
 801d3fe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801d400:	68bb      	ldr	r3, [r7, #8]
 801d402:	4618      	mov	r0, r3
 801d404:	f7fd fc40 	bl	801ac88 <sync_fs>
 801d408:	4603      	mov	r3, r0
 801d40a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	7d1b      	ldrb	r3, [r3, #20]
 801d410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801d414:	b2da      	uxtb	r2, r3
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801d41a:	7dfb      	ldrb	r3, [r7, #23]
}
 801d41c:	4618      	mov	r0, r3
 801d41e:	3718      	adds	r7, #24
 801d420:	46bd      	mov	sp, r7
 801d422:	bd80      	pop	{r7, pc}

0801d424 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801d424:	b580      	push	{r7, lr}
 801d426:	b084      	sub	sp, #16
 801d428:	af00      	add	r7, sp, #0
 801d42a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801d42c:	6878      	ldr	r0, [r7, #4]
 801d42e:	f7ff ff7b 	bl	801d328 <f_sync>
 801d432:	4603      	mov	r3, r0
 801d434:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801d436:	7bfb      	ldrb	r3, [r7, #15]
 801d438:	2b00      	cmp	r3, #0
 801d43a:	d118      	bne.n	801d46e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	f107 0208 	add.w	r2, r7, #8
 801d442:	4611      	mov	r1, r2
 801d444:	4618      	mov	r0, r3
 801d446:	f7ff fb97 	bl	801cb78 <validate>
 801d44a:	4603      	mov	r3, r0
 801d44c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801d44e:	7bfb      	ldrb	r3, [r7, #15]
 801d450:	2b00      	cmp	r3, #0
 801d452:	d10c      	bne.n	801d46e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	691b      	ldr	r3, [r3, #16]
 801d458:	4618      	mov	r0, r3
 801d45a:	f7fd fb43 	bl	801aae4 <dec_lock>
 801d45e:	4603      	mov	r3, r0
 801d460:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801d462:	7bfb      	ldrb	r3, [r7, #15]
 801d464:	2b00      	cmp	r3, #0
 801d466:	d102      	bne.n	801d46e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	2200      	movs	r2, #0
 801d46c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801d46e:	7bfb      	ldrb	r3, [r7, #15]
}
 801d470:	4618      	mov	r0, r3
 801d472:	3710      	adds	r7, #16
 801d474:	46bd      	mov	sp, r7
 801d476:	bd80      	pop	{r7, pc}

0801d478 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801d478:	b580      	push	{r7, lr}
 801d47a:	b0a0      	sub	sp, #128	@ 0x80
 801d47c:	af00      	add	r7, sp, #0
 801d47e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801d480:	2300      	movs	r3, #0
 801d482:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801d484:	f107 010c 	add.w	r1, r7, #12
 801d488:	1d3b      	adds	r3, r7, #4
 801d48a:	2202      	movs	r2, #2
 801d48c:	4618      	mov	r0, r3
 801d48e:	f7ff f8ed 	bl	801c66c <find_volume>
 801d492:	4603      	mov	r3, r0
 801d494:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801d49c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	f040 808e 	bne.w	801d5c2 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801d4a6:	687a      	ldr	r2, [r7, #4]
 801d4a8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d4ac:	4611      	mov	r1, r2
 801d4ae:	4618      	mov	r0, r3
 801d4b0:	f7fe ffcc 	bl	801c44c <follow_path>
 801d4b4:	4603      	mov	r3, r0
 801d4b6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801d4ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d108      	bne.n	801d4d4 <f_unlink+0x5c>
 801d4c2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d4c6:	2102      	movs	r1, #2
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	f7fd f9ff 	bl	801a8cc <chk_lock>
 801d4ce:	4603      	mov	r3, r0
 801d4d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801d4d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	d172      	bne.n	801d5c2 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801d4dc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801d4e0:	b25b      	sxtb	r3, r3
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	da03      	bge.n	801d4ee <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801d4e6:	2306      	movs	r3, #6
 801d4e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801d4ec:	e008      	b.n	801d500 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801d4ee:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d4f2:	f003 0301 	and.w	r3, r3, #1
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d002      	beq.n	801d500 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801d4fa:	2307      	movs	r3, #7
 801d4fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801d500:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d504:	2b00      	cmp	r3, #0
 801d506:	d134      	bne.n	801d572 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801d508:	68fb      	ldr	r3, [r7, #12]
 801d50a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801d50c:	4611      	mov	r1, r2
 801d50e:	4618      	mov	r0, r3
 801d510:	f7fe f911 	bl	801b736 <ld_clust>
 801d514:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801d516:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d51a:	f003 0310 	and.w	r3, r3, #16
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d027      	beq.n	801d572 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801d522:	68fb      	ldr	r3, [r7, #12]
 801d524:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801d526:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d528:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801d52a:	f107 0310 	add.w	r3, r7, #16
 801d52e:	2100      	movs	r1, #0
 801d530:	4618      	mov	r0, r3
 801d532:	f7fd ff5a 	bl	801b3ea <dir_sdi>
 801d536:	4603      	mov	r3, r0
 801d538:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801d53c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d540:	2b00      	cmp	r3, #0
 801d542:	d116      	bne.n	801d572 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801d544:	f107 0310 	add.w	r3, r7, #16
 801d548:	2100      	movs	r1, #0
 801d54a:	4618      	mov	r0, r3
 801d54c:	f7fe fb1d 	bl	801bb8a <dir_read>
 801d550:	4603      	mov	r3, r0
 801d552:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801d556:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	d102      	bne.n	801d564 <f_unlink+0xec>
 801d55e:	2307      	movs	r3, #7
 801d560:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801d564:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d568:	2b04      	cmp	r3, #4
 801d56a:	d102      	bne.n	801d572 <f_unlink+0xfa>
 801d56c:	2300      	movs	r3, #0
 801d56e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801d572:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d576:	2b00      	cmp	r3, #0
 801d578:	d123      	bne.n	801d5c2 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801d57a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d57e:	4618      	mov	r0, r3
 801d580:	f7fe fd62 	bl	801c048 <dir_remove>
 801d584:	4603      	mov	r3, r0
 801d586:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801d58a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d58e:	2b00      	cmp	r3, #0
 801d590:	d10c      	bne.n	801d5ac <f_unlink+0x134>
 801d592:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d594:	2b00      	cmp	r3, #0
 801d596:	d009      	beq.n	801d5ac <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801d598:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d59c:	2200      	movs	r2, #0
 801d59e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801d5a0:	4618      	mov	r0, r3
 801d5a2:	f7fd fded 	bl	801b180 <remove_chain>
 801d5a6:	4603      	mov	r3, r0
 801d5a8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801d5ac:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d106      	bne.n	801d5c2 <f_unlink+0x14a>
 801d5b4:	68fb      	ldr	r3, [r7, #12]
 801d5b6:	4618      	mov	r0, r3
 801d5b8:	f7fd fb66 	bl	801ac88 <sync_fs>
 801d5bc:	4603      	mov	r3, r0
 801d5be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801d5c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801d5c6:	4618      	mov	r0, r3
 801d5c8:	3780      	adds	r7, #128	@ 0x80
 801d5ca:	46bd      	mov	sp, r7
 801d5cc:	bd80      	pop	{r7, pc}
	...

0801d5d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801d5d0:	b480      	push	{r7}
 801d5d2:	b087      	sub	sp, #28
 801d5d4:	af00      	add	r7, sp, #0
 801d5d6:	60f8      	str	r0, [r7, #12]
 801d5d8:	60b9      	str	r1, [r7, #8]
 801d5da:	4613      	mov	r3, r2
 801d5dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801d5de:	2301      	movs	r3, #1
 801d5e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801d5e2:	2300      	movs	r3, #0
 801d5e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801d5e6:	4b1f      	ldr	r3, [pc, #124]	@ (801d664 <FATFS_LinkDriverEx+0x94>)
 801d5e8:	7a5b      	ldrb	r3, [r3, #9]
 801d5ea:	b2db      	uxtb	r3, r3
 801d5ec:	2b00      	cmp	r3, #0
 801d5ee:	d131      	bne.n	801d654 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801d5f0:	4b1c      	ldr	r3, [pc, #112]	@ (801d664 <FATFS_LinkDriverEx+0x94>)
 801d5f2:	7a5b      	ldrb	r3, [r3, #9]
 801d5f4:	b2db      	uxtb	r3, r3
 801d5f6:	461a      	mov	r2, r3
 801d5f8:	4b1a      	ldr	r3, [pc, #104]	@ (801d664 <FATFS_LinkDriverEx+0x94>)
 801d5fa:	2100      	movs	r1, #0
 801d5fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801d5fe:	4b19      	ldr	r3, [pc, #100]	@ (801d664 <FATFS_LinkDriverEx+0x94>)
 801d600:	7a5b      	ldrb	r3, [r3, #9]
 801d602:	b2db      	uxtb	r3, r3
 801d604:	4a17      	ldr	r2, [pc, #92]	@ (801d664 <FATFS_LinkDriverEx+0x94>)
 801d606:	009b      	lsls	r3, r3, #2
 801d608:	4413      	add	r3, r2
 801d60a:	68fa      	ldr	r2, [r7, #12]
 801d60c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801d60e:	4b15      	ldr	r3, [pc, #84]	@ (801d664 <FATFS_LinkDriverEx+0x94>)
 801d610:	7a5b      	ldrb	r3, [r3, #9]
 801d612:	b2db      	uxtb	r3, r3
 801d614:	461a      	mov	r2, r3
 801d616:	4b13      	ldr	r3, [pc, #76]	@ (801d664 <FATFS_LinkDriverEx+0x94>)
 801d618:	4413      	add	r3, r2
 801d61a:	79fa      	ldrb	r2, [r7, #7]
 801d61c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801d61e:	4b11      	ldr	r3, [pc, #68]	@ (801d664 <FATFS_LinkDriverEx+0x94>)
 801d620:	7a5b      	ldrb	r3, [r3, #9]
 801d622:	b2db      	uxtb	r3, r3
 801d624:	1c5a      	adds	r2, r3, #1
 801d626:	b2d1      	uxtb	r1, r2
 801d628:	4a0e      	ldr	r2, [pc, #56]	@ (801d664 <FATFS_LinkDriverEx+0x94>)
 801d62a:	7251      	strb	r1, [r2, #9]
 801d62c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801d62e:	7dbb      	ldrb	r3, [r7, #22]
 801d630:	3330      	adds	r3, #48	@ 0x30
 801d632:	b2da      	uxtb	r2, r3
 801d634:	68bb      	ldr	r3, [r7, #8]
 801d636:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801d638:	68bb      	ldr	r3, [r7, #8]
 801d63a:	3301      	adds	r3, #1
 801d63c:	223a      	movs	r2, #58	@ 0x3a
 801d63e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801d640:	68bb      	ldr	r3, [r7, #8]
 801d642:	3302      	adds	r3, #2
 801d644:	222f      	movs	r2, #47	@ 0x2f
 801d646:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801d648:	68bb      	ldr	r3, [r7, #8]
 801d64a:	3303      	adds	r3, #3
 801d64c:	2200      	movs	r2, #0
 801d64e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801d650:	2300      	movs	r3, #0
 801d652:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801d654:	7dfb      	ldrb	r3, [r7, #23]
}
 801d656:	4618      	mov	r0, r3
 801d658:	371c      	adds	r7, #28
 801d65a:	46bd      	mov	sp, r7
 801d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d660:	4770      	bx	lr
 801d662:	bf00      	nop
 801d664:	24000768 	.word	0x24000768

0801d668 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801d668:	b580      	push	{r7, lr}
 801d66a:	b082      	sub	sp, #8
 801d66c:	af00      	add	r7, sp, #0
 801d66e:	6078      	str	r0, [r7, #4]
 801d670:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801d672:	2200      	movs	r2, #0
 801d674:	6839      	ldr	r1, [r7, #0]
 801d676:	6878      	ldr	r0, [r7, #4]
 801d678:	f7ff ffaa 	bl	801d5d0 <FATFS_LinkDriverEx>
 801d67c:	4603      	mov	r3, r0
}
 801d67e:	4618      	mov	r0, r3
 801d680:	3708      	adds	r7, #8
 801d682:	46bd      	mov	sp, r7
 801d684:	bd80      	pop	{r7, pc}
	...

0801d688 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801d688:	b480      	push	{r7}
 801d68a:	b085      	sub	sp, #20
 801d68c:	af00      	add	r7, sp, #0
 801d68e:	4603      	mov	r3, r0
 801d690:	6039      	str	r1, [r7, #0]
 801d692:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801d694:	88fb      	ldrh	r3, [r7, #6]
 801d696:	2b7f      	cmp	r3, #127	@ 0x7f
 801d698:	d802      	bhi.n	801d6a0 <ff_convert+0x18>
		c = chr;
 801d69a:	88fb      	ldrh	r3, [r7, #6]
 801d69c:	81fb      	strh	r3, [r7, #14]
 801d69e:	e025      	b.n	801d6ec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801d6a0:	683b      	ldr	r3, [r7, #0]
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d00b      	beq.n	801d6be <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801d6a6:	88fb      	ldrh	r3, [r7, #6]
 801d6a8:	2bff      	cmp	r3, #255	@ 0xff
 801d6aa:	d805      	bhi.n	801d6b8 <ff_convert+0x30>
 801d6ac:	88fb      	ldrh	r3, [r7, #6]
 801d6ae:	3b80      	subs	r3, #128	@ 0x80
 801d6b0:	4a12      	ldr	r2, [pc, #72]	@ (801d6fc <ff_convert+0x74>)
 801d6b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d6b6:	e000      	b.n	801d6ba <ff_convert+0x32>
 801d6b8:	2300      	movs	r3, #0
 801d6ba:	81fb      	strh	r3, [r7, #14]
 801d6bc:	e016      	b.n	801d6ec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801d6be:	2300      	movs	r3, #0
 801d6c0:	81fb      	strh	r3, [r7, #14]
 801d6c2:	e009      	b.n	801d6d8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801d6c4:	89fb      	ldrh	r3, [r7, #14]
 801d6c6:	4a0d      	ldr	r2, [pc, #52]	@ (801d6fc <ff_convert+0x74>)
 801d6c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d6cc:	88fa      	ldrh	r2, [r7, #6]
 801d6ce:	429a      	cmp	r2, r3
 801d6d0:	d006      	beq.n	801d6e0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801d6d2:	89fb      	ldrh	r3, [r7, #14]
 801d6d4:	3301      	adds	r3, #1
 801d6d6:	81fb      	strh	r3, [r7, #14]
 801d6d8:	89fb      	ldrh	r3, [r7, #14]
 801d6da:	2b7f      	cmp	r3, #127	@ 0x7f
 801d6dc:	d9f2      	bls.n	801d6c4 <ff_convert+0x3c>
 801d6de:	e000      	b.n	801d6e2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801d6e0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801d6e2:	89fb      	ldrh	r3, [r7, #14]
 801d6e4:	3380      	adds	r3, #128	@ 0x80
 801d6e6:	b29b      	uxth	r3, r3
 801d6e8:	b2db      	uxtb	r3, r3
 801d6ea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801d6ec:	89fb      	ldrh	r3, [r7, #14]
}
 801d6ee:	4618      	mov	r0, r3
 801d6f0:	3714      	adds	r7, #20
 801d6f2:	46bd      	mov	sp, r7
 801d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6f8:	4770      	bx	lr
 801d6fa:	bf00      	nop
 801d6fc:	0801e3b8 	.word	0x0801e3b8

0801d700 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801d700:	b480      	push	{r7}
 801d702:	b087      	sub	sp, #28
 801d704:	af00      	add	r7, sp, #0
 801d706:	4603      	mov	r3, r0
 801d708:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801d70a:	88fb      	ldrh	r3, [r7, #6]
 801d70c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d710:	d201      	bcs.n	801d716 <ff_wtoupper+0x16>
 801d712:	4b3e      	ldr	r3, [pc, #248]	@ (801d80c <ff_wtoupper+0x10c>)
 801d714:	e000      	b.n	801d718 <ff_wtoupper+0x18>
 801d716:	4b3e      	ldr	r3, [pc, #248]	@ (801d810 <ff_wtoupper+0x110>)
 801d718:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801d71a:	697b      	ldr	r3, [r7, #20]
 801d71c:	1c9a      	adds	r2, r3, #2
 801d71e:	617a      	str	r2, [r7, #20]
 801d720:	881b      	ldrh	r3, [r3, #0]
 801d722:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801d724:	8a7b      	ldrh	r3, [r7, #18]
 801d726:	2b00      	cmp	r3, #0
 801d728:	d068      	beq.n	801d7fc <ff_wtoupper+0xfc>
 801d72a:	88fa      	ldrh	r2, [r7, #6]
 801d72c:	8a7b      	ldrh	r3, [r7, #18]
 801d72e:	429a      	cmp	r2, r3
 801d730:	d364      	bcc.n	801d7fc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801d732:	697b      	ldr	r3, [r7, #20]
 801d734:	1c9a      	adds	r2, r3, #2
 801d736:	617a      	str	r2, [r7, #20]
 801d738:	881b      	ldrh	r3, [r3, #0]
 801d73a:	823b      	strh	r3, [r7, #16]
 801d73c:	8a3b      	ldrh	r3, [r7, #16]
 801d73e:	0a1b      	lsrs	r3, r3, #8
 801d740:	81fb      	strh	r3, [r7, #14]
 801d742:	8a3b      	ldrh	r3, [r7, #16]
 801d744:	b2db      	uxtb	r3, r3
 801d746:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801d748:	88fa      	ldrh	r2, [r7, #6]
 801d74a:	8a79      	ldrh	r1, [r7, #18]
 801d74c:	8a3b      	ldrh	r3, [r7, #16]
 801d74e:	440b      	add	r3, r1
 801d750:	429a      	cmp	r2, r3
 801d752:	da49      	bge.n	801d7e8 <ff_wtoupper+0xe8>
			switch (cmd) {
 801d754:	89fb      	ldrh	r3, [r7, #14]
 801d756:	2b08      	cmp	r3, #8
 801d758:	d84f      	bhi.n	801d7fa <ff_wtoupper+0xfa>
 801d75a:	a201      	add	r2, pc, #4	@ (adr r2, 801d760 <ff_wtoupper+0x60>)
 801d75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d760:	0801d785 	.word	0x0801d785
 801d764:	0801d797 	.word	0x0801d797
 801d768:	0801d7ad 	.word	0x0801d7ad
 801d76c:	0801d7b5 	.word	0x0801d7b5
 801d770:	0801d7bd 	.word	0x0801d7bd
 801d774:	0801d7c5 	.word	0x0801d7c5
 801d778:	0801d7cd 	.word	0x0801d7cd
 801d77c:	0801d7d5 	.word	0x0801d7d5
 801d780:	0801d7dd 	.word	0x0801d7dd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801d784:	88fa      	ldrh	r2, [r7, #6]
 801d786:	8a7b      	ldrh	r3, [r7, #18]
 801d788:	1ad3      	subs	r3, r2, r3
 801d78a:	005b      	lsls	r3, r3, #1
 801d78c:	697a      	ldr	r2, [r7, #20]
 801d78e:	4413      	add	r3, r2
 801d790:	881b      	ldrh	r3, [r3, #0]
 801d792:	80fb      	strh	r3, [r7, #6]
 801d794:	e027      	b.n	801d7e6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801d796:	88fa      	ldrh	r2, [r7, #6]
 801d798:	8a7b      	ldrh	r3, [r7, #18]
 801d79a:	1ad3      	subs	r3, r2, r3
 801d79c:	b29b      	uxth	r3, r3
 801d79e:	f003 0301 	and.w	r3, r3, #1
 801d7a2:	b29b      	uxth	r3, r3
 801d7a4:	88fa      	ldrh	r2, [r7, #6]
 801d7a6:	1ad3      	subs	r3, r2, r3
 801d7a8:	80fb      	strh	r3, [r7, #6]
 801d7aa:	e01c      	b.n	801d7e6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801d7ac:	88fb      	ldrh	r3, [r7, #6]
 801d7ae:	3b10      	subs	r3, #16
 801d7b0:	80fb      	strh	r3, [r7, #6]
 801d7b2:	e018      	b.n	801d7e6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801d7b4:	88fb      	ldrh	r3, [r7, #6]
 801d7b6:	3b20      	subs	r3, #32
 801d7b8:	80fb      	strh	r3, [r7, #6]
 801d7ba:	e014      	b.n	801d7e6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801d7bc:	88fb      	ldrh	r3, [r7, #6]
 801d7be:	3b30      	subs	r3, #48	@ 0x30
 801d7c0:	80fb      	strh	r3, [r7, #6]
 801d7c2:	e010      	b.n	801d7e6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801d7c4:	88fb      	ldrh	r3, [r7, #6]
 801d7c6:	3b1a      	subs	r3, #26
 801d7c8:	80fb      	strh	r3, [r7, #6]
 801d7ca:	e00c      	b.n	801d7e6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801d7cc:	88fb      	ldrh	r3, [r7, #6]
 801d7ce:	3308      	adds	r3, #8
 801d7d0:	80fb      	strh	r3, [r7, #6]
 801d7d2:	e008      	b.n	801d7e6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801d7d4:	88fb      	ldrh	r3, [r7, #6]
 801d7d6:	3b50      	subs	r3, #80	@ 0x50
 801d7d8:	80fb      	strh	r3, [r7, #6]
 801d7da:	e004      	b.n	801d7e6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801d7dc:	88fb      	ldrh	r3, [r7, #6]
 801d7de:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801d7e2:	80fb      	strh	r3, [r7, #6]
 801d7e4:	bf00      	nop
			}
			break;
 801d7e6:	e008      	b.n	801d7fa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801d7e8:	89fb      	ldrh	r3, [r7, #14]
 801d7ea:	2b00      	cmp	r3, #0
 801d7ec:	d195      	bne.n	801d71a <ff_wtoupper+0x1a>
 801d7ee:	8a3b      	ldrh	r3, [r7, #16]
 801d7f0:	005b      	lsls	r3, r3, #1
 801d7f2:	697a      	ldr	r2, [r7, #20]
 801d7f4:	4413      	add	r3, r2
 801d7f6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801d7f8:	e78f      	b.n	801d71a <ff_wtoupper+0x1a>
			break;
 801d7fa:	bf00      	nop
	}

	return chr;
 801d7fc:	88fb      	ldrh	r3, [r7, #6]
}
 801d7fe:	4618      	mov	r0, r3
 801d800:	371c      	adds	r7, #28
 801d802:	46bd      	mov	sp, r7
 801d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d808:	4770      	bx	lr
 801d80a:	bf00      	nop
 801d80c:	0801e4b8 	.word	0x0801e4b8
 801d810:	0801e6ac 	.word	0x0801e6ac

0801d814 <memset>:
 801d814:	4402      	add	r2, r0
 801d816:	4603      	mov	r3, r0
 801d818:	4293      	cmp	r3, r2
 801d81a:	d100      	bne.n	801d81e <memset+0xa>
 801d81c:	4770      	bx	lr
 801d81e:	f803 1b01 	strb.w	r1, [r3], #1
 801d822:	e7f9      	b.n	801d818 <memset+0x4>

0801d824 <__errno>:
 801d824:	4b01      	ldr	r3, [pc, #4]	@ (801d82c <__errno+0x8>)
 801d826:	6818      	ldr	r0, [r3, #0]
 801d828:	4770      	bx	lr
 801d82a:	bf00      	nop
 801d82c:	24000028 	.word	0x24000028

0801d830 <__libc_init_array>:
 801d830:	b570      	push	{r4, r5, r6, lr}
 801d832:	4d0d      	ldr	r5, [pc, #52]	@ (801d868 <__libc_init_array+0x38>)
 801d834:	4c0d      	ldr	r4, [pc, #52]	@ (801d86c <__libc_init_array+0x3c>)
 801d836:	1b64      	subs	r4, r4, r5
 801d838:	10a4      	asrs	r4, r4, #2
 801d83a:	2600      	movs	r6, #0
 801d83c:	42a6      	cmp	r6, r4
 801d83e:	d109      	bne.n	801d854 <__libc_init_array+0x24>
 801d840:	4d0b      	ldr	r5, [pc, #44]	@ (801d870 <__libc_init_array+0x40>)
 801d842:	4c0c      	ldr	r4, [pc, #48]	@ (801d874 <__libc_init_array+0x44>)
 801d844:	f000 fd0c 	bl	801e260 <_init>
 801d848:	1b64      	subs	r4, r4, r5
 801d84a:	10a4      	asrs	r4, r4, #2
 801d84c:	2600      	movs	r6, #0
 801d84e:	42a6      	cmp	r6, r4
 801d850:	d105      	bne.n	801d85e <__libc_init_array+0x2e>
 801d852:	bd70      	pop	{r4, r5, r6, pc}
 801d854:	f855 3b04 	ldr.w	r3, [r5], #4
 801d858:	4798      	blx	r3
 801d85a:	3601      	adds	r6, #1
 801d85c:	e7ee      	b.n	801d83c <__libc_init_array+0xc>
 801d85e:	f855 3b04 	ldr.w	r3, [r5], #4
 801d862:	4798      	blx	r3
 801d864:	3601      	adds	r6, #1
 801d866:	e7f2      	b.n	801d84e <__libc_init_array+0x1e>
 801d868:	08020098 	.word	0x08020098
 801d86c:	08020098 	.word	0x08020098
 801d870:	08020098 	.word	0x08020098
 801d874:	0802009c 	.word	0x0802009c

0801d878 <memcpy>:
 801d878:	440a      	add	r2, r1
 801d87a:	4291      	cmp	r1, r2
 801d87c:	f100 33ff 	add.w	r3, r0, #4294967295
 801d880:	d100      	bne.n	801d884 <memcpy+0xc>
 801d882:	4770      	bx	lr
 801d884:	b510      	push	{r4, lr}
 801d886:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d88a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d88e:	4291      	cmp	r1, r2
 801d890:	d1f9      	bne.n	801d886 <memcpy+0xe>
 801d892:	bd10      	pop	{r4, pc}

0801d894 <atan2>:
 801d894:	f000 bbac 	b.w	801dff0 <__ieee754_atan2>

0801d898 <sqrt>:
 801d898:	b508      	push	{r3, lr}
 801d89a:	ed2d 8b04 	vpush	{d8-d9}
 801d89e:	eeb0 8b40 	vmov.f64	d8, d0
 801d8a2:	f000 fba1 	bl	801dfe8 <__ieee754_sqrt>
 801d8a6:	eeb4 8b48 	vcmp.f64	d8, d8
 801d8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8ae:	d60c      	bvs.n	801d8ca <sqrt+0x32>
 801d8b0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801d8d0 <sqrt+0x38>
 801d8b4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801d8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8bc:	d505      	bpl.n	801d8ca <sqrt+0x32>
 801d8be:	f7ff ffb1 	bl	801d824 <__errno>
 801d8c2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801d8c6:	2321      	movs	r3, #33	@ 0x21
 801d8c8:	6003      	str	r3, [r0, #0]
 801d8ca:	ecbd 8b04 	vpop	{d8-d9}
 801d8ce:	bd08      	pop	{r3, pc}
	...

0801d8d8 <atan>:
 801d8d8:	b538      	push	{r3, r4, r5, lr}
 801d8da:	eeb0 7b40 	vmov.f64	d7, d0
 801d8de:	ee17 5a90 	vmov	r5, s15
 801d8e2:	4b73      	ldr	r3, [pc, #460]	@ (801dab0 <atan+0x1d8>)
 801d8e4:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801d8e8:	429c      	cmp	r4, r3
 801d8ea:	d913      	bls.n	801d914 <atan+0x3c>
 801d8ec:	4b71      	ldr	r3, [pc, #452]	@ (801dab4 <atan+0x1dc>)
 801d8ee:	429c      	cmp	r4, r3
 801d8f0:	d803      	bhi.n	801d8fa <atan+0x22>
 801d8f2:	d107      	bne.n	801d904 <atan+0x2c>
 801d8f4:	ee10 3a10 	vmov	r3, s0
 801d8f8:	b123      	cbz	r3, 801d904 <atan+0x2c>
 801d8fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 801d8fe:	eeb0 0b47 	vmov.f64	d0, d7
 801d902:	bd38      	pop	{r3, r4, r5, pc}
 801d904:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801da40 <atan+0x168>
 801d908:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801da48 <atan+0x170>
 801d90c:	2d00      	cmp	r5, #0
 801d90e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801d912:	e7f4      	b.n	801d8fe <atan+0x26>
 801d914:	4b68      	ldr	r3, [pc, #416]	@ (801dab8 <atan+0x1e0>)
 801d916:	429c      	cmp	r4, r3
 801d918:	d811      	bhi.n	801d93e <atan+0x66>
 801d91a:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801d91e:	429c      	cmp	r4, r3
 801d920:	d80a      	bhi.n	801d938 <atan+0x60>
 801d922:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801d926:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801da50 <atan+0x178>
 801d92a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801d92e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801d932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d936:	dce2      	bgt.n	801d8fe <atan+0x26>
 801d938:	f04f 33ff 	mov.w	r3, #4294967295
 801d93c:	e013      	b.n	801d966 <atan+0x8e>
 801d93e:	f000 f8c5 	bl	801dacc <fabs>
 801d942:	4b5e      	ldr	r3, [pc, #376]	@ (801dabc <atan+0x1e4>)
 801d944:	429c      	cmp	r4, r3
 801d946:	d84f      	bhi.n	801d9e8 <atan+0x110>
 801d948:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801d94c:	429c      	cmp	r4, r3
 801d94e:	d841      	bhi.n	801d9d4 <atan+0xfc>
 801d950:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801d954:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801d958:	2300      	movs	r3, #0
 801d95a:	eea0 5b07 	vfma.f64	d5, d0, d7
 801d95e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d962:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801d966:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801da58 <atan+0x180>
 801d96a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801d96e:	ee24 5b04 	vmul.f64	d5, d4, d4
 801d972:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801da60 <atan+0x188>
 801d976:	eea5 3b06 	vfma.f64	d3, d5, d6
 801d97a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801da68 <atan+0x190>
 801d97e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801d982:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801da70 <atan+0x198>
 801d986:	eea6 3b05 	vfma.f64	d3, d6, d5
 801d98a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801da78 <atan+0x1a0>
 801d98e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801d992:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801da80 <atan+0x1a8>
 801d996:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801da88 <atan+0x1b0>
 801d99a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801d99e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801da90 <atan+0x1b8>
 801d9a2:	eea5 2b06 	vfma.f64	d2, d5, d6
 801d9a6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801da98 <atan+0x1c0>
 801d9aa:	eea2 6b05 	vfma.f64	d6, d2, d5
 801d9ae:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801daa0 <atan+0x1c8>
 801d9b2:	eea6 2b05 	vfma.f64	d2, d6, d5
 801d9b6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801daa8 <atan+0x1d0>
 801d9ba:	1c5a      	adds	r2, r3, #1
 801d9bc:	eea2 6b05 	vfma.f64	d6, d2, d5
 801d9c0:	ee26 6b05 	vmul.f64	d6, d6, d5
 801d9c4:	eea3 6b04 	vfma.f64	d6, d3, d4
 801d9c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 801d9cc:	d121      	bne.n	801da12 <atan+0x13a>
 801d9ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d9d2:	e794      	b.n	801d8fe <atan+0x26>
 801d9d4:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801d9d8:	2301      	movs	r3, #1
 801d9da:	ee30 5b47 	vsub.f64	d5, d0, d7
 801d9de:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d9e2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801d9e6:	e7be      	b.n	801d966 <atan+0x8e>
 801d9e8:	4b35      	ldr	r3, [pc, #212]	@ (801dac0 <atan+0x1e8>)
 801d9ea:	429c      	cmp	r4, r3
 801d9ec:	d20b      	bcs.n	801da06 <atan+0x12e>
 801d9ee:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801d9f2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801d9f6:	ee30 5b47 	vsub.f64	d5, d0, d7
 801d9fa:	eea0 6b07 	vfma.f64	d6, d0, d7
 801d9fe:	2302      	movs	r3, #2
 801da00:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801da04:	e7af      	b.n	801d966 <atan+0x8e>
 801da06:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801da0a:	2303      	movs	r3, #3
 801da0c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801da10:	e7a9      	b.n	801d966 <atan+0x8e>
 801da12:	4a2c      	ldr	r2, [pc, #176]	@ (801dac4 <atan+0x1ec>)
 801da14:	492c      	ldr	r1, [pc, #176]	@ (801dac8 <atan+0x1f0>)
 801da16:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801da1a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801da1e:	ed93 5b00 	vldr	d5, [r3]
 801da22:	ee36 6b45 	vsub.f64	d6, d6, d5
 801da26:	ee36 6b47 	vsub.f64	d6, d6, d7
 801da2a:	ed92 7b00 	vldr	d7, [r2]
 801da2e:	2d00      	cmp	r5, #0
 801da30:	ee37 7b46 	vsub.f64	d7, d7, d6
 801da34:	bfb8      	it	lt
 801da36:	eeb1 7b47 	vneglt.f64	d7, d7
 801da3a:	e760      	b.n	801d8fe <atan+0x26>
 801da3c:	f3af 8000 	nop.w
 801da40:	54442d18 	.word	0x54442d18
 801da44:	bff921fb 	.word	0xbff921fb
 801da48:	54442d18 	.word	0x54442d18
 801da4c:	3ff921fb 	.word	0x3ff921fb
 801da50:	8800759c 	.word	0x8800759c
 801da54:	7e37e43c 	.word	0x7e37e43c
 801da58:	e322da11 	.word	0xe322da11
 801da5c:	3f90ad3a 	.word	0x3f90ad3a
 801da60:	24760deb 	.word	0x24760deb
 801da64:	3fa97b4b 	.word	0x3fa97b4b
 801da68:	a0d03d51 	.word	0xa0d03d51
 801da6c:	3fb10d66 	.word	0x3fb10d66
 801da70:	c54c206e 	.word	0xc54c206e
 801da74:	3fb745cd 	.word	0x3fb745cd
 801da78:	920083ff 	.word	0x920083ff
 801da7c:	3fc24924 	.word	0x3fc24924
 801da80:	5555550d 	.word	0x5555550d
 801da84:	3fd55555 	.word	0x3fd55555
 801da88:	52defd9a 	.word	0x52defd9a
 801da8c:	bfadde2d 	.word	0xbfadde2d
 801da90:	2c6a6c2f 	.word	0x2c6a6c2f
 801da94:	bfa2b444 	.word	0xbfa2b444
 801da98:	af749a6d 	.word	0xaf749a6d
 801da9c:	bfb3b0f2 	.word	0xbfb3b0f2
 801daa0:	fe231671 	.word	0xfe231671
 801daa4:	bfbc71c6 	.word	0xbfbc71c6
 801daa8:	9998ebc4 	.word	0x9998ebc4
 801daac:	bfc99999 	.word	0xbfc99999
 801dab0:	440fffff 	.word	0x440fffff
 801dab4:	7ff00000 	.word	0x7ff00000
 801dab8:	3fdbffff 	.word	0x3fdbffff
 801dabc:	3ff2ffff 	.word	0x3ff2ffff
 801dac0:	40038000 	.word	0x40038000
 801dac4:	0801e788 	.word	0x0801e788
 801dac8:	0801e768 	.word	0x0801e768

0801dacc <fabs>:
 801dacc:	ec51 0b10 	vmov	r0, r1, d0
 801dad0:	4602      	mov	r2, r0
 801dad2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801dad6:	ec43 2b10 	vmov	d0, r2, r3
 801dada:	4770      	bx	lr

0801dadc <checkint>:
 801dadc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801dae0:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801dae4:	429a      	cmp	r2, r3
 801dae6:	b570      	push	{r4, r5, r6, lr}
 801dae8:	dd2a      	ble.n	801db40 <checkint+0x64>
 801daea:	f240 4333 	movw	r3, #1075	@ 0x433
 801daee:	429a      	cmp	r2, r3
 801daf0:	dc24      	bgt.n	801db3c <checkint+0x60>
 801daf2:	1a9b      	subs	r3, r3, r2
 801daf4:	f1a3 0620 	sub.w	r6, r3, #32
 801daf8:	f04f 32ff 	mov.w	r2, #4294967295
 801dafc:	fa02 f403 	lsl.w	r4, r2, r3
 801db00:	fa02 f606 	lsl.w	r6, r2, r6
 801db04:	f1c3 0520 	rsb	r5, r3, #32
 801db08:	fa22 f505 	lsr.w	r5, r2, r5
 801db0c:	4334      	orrs	r4, r6
 801db0e:	432c      	orrs	r4, r5
 801db10:	409a      	lsls	r2, r3
 801db12:	ea20 0202 	bic.w	r2, r0, r2
 801db16:	ea21 0404 	bic.w	r4, r1, r4
 801db1a:	4322      	orrs	r2, r4
 801db1c:	f1a3 0420 	sub.w	r4, r3, #32
 801db20:	f1c3 0220 	rsb	r2, r3, #32
 801db24:	d10c      	bne.n	801db40 <checkint+0x64>
 801db26:	40d8      	lsrs	r0, r3
 801db28:	fa01 f302 	lsl.w	r3, r1, r2
 801db2c:	4318      	orrs	r0, r3
 801db2e:	40e1      	lsrs	r1, r4
 801db30:	4308      	orrs	r0, r1
 801db32:	f000 0001 	and.w	r0, r0, #1
 801db36:	f1d0 0002 	rsbs	r0, r0, #2
 801db3a:	bd70      	pop	{r4, r5, r6, pc}
 801db3c:	2002      	movs	r0, #2
 801db3e:	e7fc      	b.n	801db3a <checkint+0x5e>
 801db40:	2000      	movs	r0, #0
 801db42:	e7fa      	b.n	801db3a <checkint+0x5e>
 801db44:	0000      	movs	r0, r0
	...

0801db48 <pow>:
 801db48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db4c:	ee10 4a90 	vmov	r4, s1
 801db50:	ed2d 8b0a 	vpush	{d8-d12}
 801db54:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801db58:	ee11 aa90 	vmov	sl, s3
 801db5c:	f108 32ff 	add.w	r2, r8, #4294967295
 801db60:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801db64:	429a      	cmp	r2, r3
 801db66:	ee10 5a10 	vmov	r5, s0
 801db6a:	ee11 0a10 	vmov	r0, s2
 801db6e:	b087      	sub	sp, #28
 801db70:	46c4      	mov	ip, r8
 801db72:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801db76:	d806      	bhi.n	801db86 <pow+0x3e>
 801db78:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801db7c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801db80:	2b7f      	cmp	r3, #127	@ 0x7f
 801db82:	f240 8157 	bls.w	801de34 <pow+0x2ec>
 801db86:	1802      	adds	r2, r0, r0
 801db88:	eb4a 010a 	adc.w	r1, sl, sl
 801db8c:	f06f 0b01 	mvn.w	fp, #1
 801db90:	1e57      	subs	r7, r2, #1
 801db92:	f141 33ff 	adc.w	r3, r1, #4294967295
 801db96:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801db9a:	45bb      	cmp	fp, r7
 801db9c:	eb7e 0303 	sbcs.w	r3, lr, r3
 801dba0:	d242      	bcs.n	801dc28 <pow+0xe0>
 801dba2:	ea52 0301 	orrs.w	r3, r2, r1
 801dba6:	f04f 0300 	mov.w	r3, #0
 801dbaa:	d10c      	bne.n	801dbc6 <pow+0x7e>
 801dbac:	196d      	adds	r5, r5, r5
 801dbae:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801dbb2:	4164      	adcs	r4, r4
 801dbb4:	42ab      	cmp	r3, r5
 801dbb6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801dbba:	41a3      	sbcs	r3, r4
 801dbbc:	f0c0 808f 	bcc.w	801dcde <pow+0x196>
 801dbc0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801dbc4:	e02b      	b.n	801dc1e <pow+0xd6>
 801dbc6:	4ed4      	ldr	r6, [pc, #848]	@ (801df18 <pow+0x3d0>)
 801dbc8:	42b4      	cmp	r4, r6
 801dbca:	bf08      	it	eq
 801dbcc:	429d      	cmpeq	r5, r3
 801dbce:	d109      	bne.n	801dbe4 <pow+0x9c>
 801dbd0:	1800      	adds	r0, r0, r0
 801dbd2:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801dbd6:	eb4a 0a0a 	adc.w	sl, sl, sl
 801dbda:	4283      	cmp	r3, r0
 801dbdc:	4bcf      	ldr	r3, [pc, #828]	@ (801df1c <pow+0x3d4>)
 801dbde:	eb73 030a 	sbcs.w	r3, r3, sl
 801dbe2:	e7eb      	b.n	801dbbc <pow+0x74>
 801dbe4:	196d      	adds	r5, r5, r5
 801dbe6:	48ce      	ldr	r0, [pc, #824]	@ (801df20 <pow+0x3d8>)
 801dbe8:	4164      	adcs	r4, r4
 801dbea:	42ab      	cmp	r3, r5
 801dbec:	eb70 0604 	sbcs.w	r6, r0, r4
 801dbf0:	d375      	bcc.n	801dcde <pow+0x196>
 801dbf2:	4281      	cmp	r1, r0
 801dbf4:	bf08      	it	eq
 801dbf6:	429a      	cmpeq	r2, r3
 801dbf8:	d171      	bne.n	801dcde <pow+0x196>
 801dbfa:	4aca      	ldr	r2, [pc, #808]	@ (801df24 <pow+0x3dc>)
 801dbfc:	4294      	cmp	r4, r2
 801dbfe:	bf08      	it	eq
 801dc00:	429d      	cmpeq	r5, r3
 801dc02:	d0dd      	beq.n	801dbc0 <pow+0x78>
 801dc04:	4294      	cmp	r4, r2
 801dc06:	ea6f 0a0a 	mvn.w	sl, sl
 801dc0a:	bf34      	ite	cc
 801dc0c:	2400      	movcc	r4, #0
 801dc0e:	2401      	movcs	r4, #1
 801dc10:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801dc14:	4554      	cmp	r4, sl
 801dc16:	f040 81dc 	bne.w	801dfd2 <pow+0x48a>
 801dc1a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801dc1e:	b007      	add	sp, #28
 801dc20:	ecbd 8b0a 	vpop	{d8-d12}
 801dc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc28:	196f      	adds	r7, r5, r5
 801dc2a:	eb44 0904 	adc.w	r9, r4, r4
 801dc2e:	1e7a      	subs	r2, r7, #1
 801dc30:	f169 0300 	sbc.w	r3, r9, #0
 801dc34:	4593      	cmp	fp, r2
 801dc36:	eb7e 0303 	sbcs.w	r3, lr, r3
 801dc3a:	d225      	bcs.n	801dc88 <pow+0x140>
 801dc3c:	ee20 0b00 	vmul.f64	d0, d0, d0
 801dc40:	2c00      	cmp	r4, #0
 801dc42:	da13      	bge.n	801dc6c <pow+0x124>
 801dc44:	4651      	mov	r1, sl
 801dc46:	f7ff ff49 	bl	801dadc <checkint>
 801dc4a:	2801      	cmp	r0, #1
 801dc4c:	d10e      	bne.n	801dc6c <pow+0x124>
 801dc4e:	eeb1 0b40 	vneg.f64	d0, d0
 801dc52:	ea57 0909 	orrs.w	r9, r7, r9
 801dc56:	d10b      	bne.n	801dc70 <pow+0x128>
 801dc58:	f1ba 0f00 	cmp.w	sl, #0
 801dc5c:	dadf      	bge.n	801dc1e <pow+0xd6>
 801dc5e:	b007      	add	sp, #28
 801dc60:	ecbd 8b0a 	vpop	{d8-d12}
 801dc64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc68:	f000 bab6 	b.w	801e1d8 <__math_divzero>
 801dc6c:	2000      	movs	r0, #0
 801dc6e:	e7f0      	b.n	801dc52 <pow+0x10a>
 801dc70:	f1ba 0f00 	cmp.w	sl, #0
 801dc74:	dad3      	bge.n	801dc1e <pow+0xd6>
 801dc76:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801dc7a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801dc7e:	ed8d 7b00 	vstr	d7, [sp]
 801dc82:	ed9d 0b00 	vldr	d0, [sp]
 801dc86:	e7ca      	b.n	801dc1e <pow+0xd6>
 801dc88:	2c00      	cmp	r4, #0
 801dc8a:	da2b      	bge.n	801dce4 <pow+0x19c>
 801dc8c:	4651      	mov	r1, sl
 801dc8e:	f7ff ff25 	bl	801dadc <checkint>
 801dc92:	b930      	cbnz	r0, 801dca2 <pow+0x15a>
 801dc94:	b007      	add	sp, #28
 801dc96:	ecbd 8b0a 	vpop	{d8-d12}
 801dc9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc9e:	f000 bab3 	b.w	801e208 <__math_invalid>
 801dca2:	1e41      	subs	r1, r0, #1
 801dca4:	4248      	negs	r0, r1
 801dca6:	4148      	adcs	r0, r1
 801dca8:	0480      	lsls	r0, r0, #18
 801dcaa:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801dcae:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801dcb2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801dcb6:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801dcba:	2b7f      	cmp	r3, #127	@ 0x7f
 801dcbc:	d92d      	bls.n	801dd1a <pow+0x1d2>
 801dcbe:	4b96      	ldr	r3, [pc, #600]	@ (801df18 <pow+0x3d0>)
 801dcc0:	2000      	movs	r0, #0
 801dcc2:	429c      	cmp	r4, r3
 801dcc4:	bf08      	it	eq
 801dcc6:	4285      	cmpeq	r5, r0
 801dcc8:	f43f af7a 	beq.w	801dbc0 <pow+0x78>
 801dccc:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801dcd0:	428a      	cmp	r2, r1
 801dcd2:	d80c      	bhi.n	801dcee <pow+0x1a6>
 801dcd4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801dcd8:	42a8      	cmp	r0, r5
 801dcda:	41a3      	sbcs	r3, r4
 801dcdc:	d204      	bcs.n	801dce8 <pow+0x1a0>
 801dcde:	ee31 0b00 	vadd.f64	d0, d1, d0
 801dce2:	e79c      	b.n	801dc1e <pow+0xd6>
 801dce4:	2000      	movs	r0, #0
 801dce6:	e7e4      	b.n	801dcb2 <pow+0x16a>
 801dce8:	ee30 0b41 	vsub.f64	d0, d0, d1
 801dcec:	e797      	b.n	801dc1e <pow+0xd6>
 801dcee:	2d01      	cmp	r5, #1
 801dcf0:	eb74 0303 	sbcs.w	r3, r4, r3
 801dcf4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801dcf8:	bf34      	ite	cc
 801dcfa:	2301      	movcc	r3, #1
 801dcfc:	2300      	movcs	r3, #0
 801dcfe:	4296      	cmp	r6, r2
 801dd00:	bf8c      	ite	hi
 801dd02:	2600      	movhi	r6, #0
 801dd04:	2601      	movls	r6, #1
 801dd06:	42b3      	cmp	r3, r6
 801dd08:	f000 809c 	beq.w	801de44 <pow+0x2fc>
 801dd0c:	b007      	add	sp, #28
 801dd0e:	ecbd 8b0a 	vpop	{d8-d12}
 801dd12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd16:	f000 ba57 	b.w	801e1c8 <__math_oflow>
 801dd1a:	f1bc 0f00 	cmp.w	ip, #0
 801dd1e:	d10a      	bne.n	801dd36 <pow+0x1ee>
 801dd20:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801df08 <pow+0x3c0>
 801dd24:	ee20 7b07 	vmul.f64	d7, d0, d7
 801dd28:	ec53 2b17 	vmov	r2, r3, d7
 801dd2c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801dd30:	4615      	mov	r5, r2
 801dd32:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801dd36:	4a7c      	ldr	r2, [pc, #496]	@ (801df28 <pow+0x3e0>)
 801dd38:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801dd3c:	4422      	add	r2, r4
 801dd3e:	1513      	asrs	r3, r2, #20
 801dd40:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801dd44:	ee03 3a10 	vmov	s6, r3
 801dd48:	0d12      	lsrs	r2, r2, #20
 801dd4a:	4b78      	ldr	r3, [pc, #480]	@ (801df2c <pow+0x3e4>)
 801dd4c:	0512      	lsls	r2, r2, #20
 801dd4e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801dd52:	1aa7      	subs	r7, r4, r2
 801dd54:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801dd58:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801dd5c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801dd60:	1e2e      	subs	r6, r5, #0
 801dd62:	ec47 6b14 	vmov	d4, r6, r7
 801dd66:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801dd6a:	eea4 6b05 	vfma.f64	d6, d4, d5
 801dd6e:	ed93 5b00 	vldr	d5, [r3]
 801dd72:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801dd76:	eea3 2b05 	vfma.f64	d2, d3, d5
 801dd7a:	ed93 5b02 	vldr	d5, [r3, #8]
 801dd7e:	ee36 4b02 	vadd.f64	d4, d6, d2
 801dd82:	ee32 2b44 	vsub.f64	d2, d2, d4
 801dd86:	eea3 7b05 	vfma.f64	d7, d3, d5
 801dd8a:	ed93 5b04 	vldr	d5, [r3, #16]
 801dd8e:	ee32 2b06 	vadd.f64	d2, d2, d6
 801dd92:	ee37 7b02 	vadd.f64	d7, d7, d2
 801dd96:	ee26 5b05 	vmul.f64	d5, d6, d5
 801dd9a:	ee26 0b05 	vmul.f64	d0, d6, d5
 801dd9e:	ee34 8b00 	vadd.f64	d8, d4, d0
 801dda2:	eeb0 9b40 	vmov.f64	d9, d0
 801dda6:	ee34 4b48 	vsub.f64	d4, d4, d8
 801ddaa:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801ddae:	ee34 ab00 	vadd.f64	d10, d4, d0
 801ddb2:	ed93 5b06 	vldr	d5, [r3, #24]
 801ddb6:	ee26 bb00 	vmul.f64	d11, d6, d0
 801ddba:	ee37 7b09 	vadd.f64	d7, d7, d9
 801ddbe:	ed93 4b08 	vldr	d4, [r3, #32]
 801ddc2:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801ddc6:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801ddca:	eea6 5b04 	vfma.f64	d5, d6, d4
 801ddce:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801ddd2:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801ddd6:	eea6 4b03 	vfma.f64	d4, d6, d3
 801ddda:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801ddde:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801dde2:	eea0 4b03 	vfma.f64	d4, d0, d3
 801dde6:	eea0 5b04 	vfma.f64	d5, d0, d4
 801ddea:	eeab 7b05 	vfma.f64	d7, d11, d5
 801ddee:	ee38 4b07 	vadd.f64	d4, d8, d7
 801ddf2:	ee21 6b04 	vmul.f64	d6, d1, d4
 801ddf6:	ee16 3a90 	vmov	r3, s13
 801ddfa:	eeb0 5b46 	vmov.f64	d5, d6
 801ddfe:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801de02:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801de06:	18b2      	adds	r2, r6, r2
 801de08:	2a3e      	cmp	r2, #62	@ 0x3e
 801de0a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801de0e:	ee38 8b44 	vsub.f64	d8, d8, d4
 801de12:	ee38 8b07 	vadd.f64	d8, d8, d7
 801de16:	eea1 5b08 	vfma.f64	d5, d1, d8
 801de1a:	d91b      	bls.n	801de54 <pow+0x30c>
 801de1c:	2a00      	cmp	r2, #0
 801de1e:	da0b      	bge.n	801de38 <pow+0x2f0>
 801de20:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801de24:	ee36 0b00 	vadd.f64	d0, d6, d0
 801de28:	2800      	cmp	r0, #0
 801de2a:	f43f aef8 	beq.w	801dc1e <pow+0xd6>
 801de2e:	eeb1 0b40 	vneg.f64	d0, d0
 801de32:	e6f4      	b.n	801dc1e <pow+0xd6>
 801de34:	2000      	movs	r0, #0
 801de36:	e77e      	b.n	801dd36 <pow+0x1ee>
 801de38:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801de3c:	d909      	bls.n	801de52 <pow+0x30a>
 801de3e:	2b00      	cmp	r3, #0
 801de40:	f6bf af64 	bge.w	801dd0c <pow+0x1c4>
 801de44:	b007      	add	sp, #28
 801de46:	ecbd 8b0a 	vpop	{d8-d12}
 801de4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de4e:	f000 b9b3 	b.w	801e1b8 <__math_uflow>
 801de52:	2600      	movs	r6, #0
 801de54:	4936      	ldr	r1, [pc, #216]	@ (801df30 <pow+0x3e8>)
 801de56:	ed91 4b02 	vldr	d4, [r1, #8]
 801de5a:	ed91 3b00 	vldr	d3, [r1]
 801de5e:	eeb0 7b44 	vmov.f64	d7, d4
 801de62:	eea6 7b03 	vfma.f64	d7, d6, d3
 801de66:	ee17 5a10 	vmov	r5, s14
 801de6a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801de6e:	ed91 4b04 	vldr	d4, [r1, #16]
 801de72:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801de76:	eea7 6b04 	vfma.f64	d6, d7, d4
 801de7a:	ed91 4b06 	vldr	d4, [r1, #24]
 801de7e:	18dc      	adds	r4, r3, r3
 801de80:	f104 030f 	add.w	r3, r4, #15
 801de84:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801de88:	eea7 6b04 	vfma.f64	d6, d7, d4
 801de8c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801de90:	ee35 5b06 	vadd.f64	d5, d5, d6
 801de94:	ee25 6b05 	vmul.f64	d6, d5, d5
 801de98:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801de9c:	ed91 4b08 	vldr	d4, [r1, #32]
 801dea0:	ee35 7b07 	vadd.f64	d7, d5, d7
 801dea4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801dea8:	eea5 4b03 	vfma.f64	d4, d5, d3
 801deac:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801deb0:	eea6 7b04 	vfma.f64	d7, d6, d4
 801deb4:	ee26 6b06 	vmul.f64	d6, d6, d6
 801deb8:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801debc:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801dec0:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801dec4:	eea5 4b03 	vfma.f64	d4, d5, d3
 801dec8:	1940      	adds	r0, r0, r5
 801deca:	2700      	movs	r7, #0
 801decc:	eb17 020c 	adds.w	r2, r7, ip
 801ded0:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801ded4:	eea6 7b04 	vfma.f64	d7, d6, d4
 801ded8:	2e00      	cmp	r6, #0
 801deda:	d175      	bne.n	801dfc8 <pow+0x480>
 801dedc:	42bd      	cmp	r5, r7
 801dede:	db29      	blt.n	801df34 <pow+0x3ec>
 801dee0:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801dee4:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801dee8:	4610      	mov	r0, r2
 801deea:	ec41 0b10 	vmov	d0, r0, r1
 801deee:	eea7 0b00 	vfma.f64	d0, d7, d0
 801def2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801df10 <pow+0x3c8>
 801def6:	ee20 0b07 	vmul.f64	d0, d0, d7
 801defa:	b007      	add	sp, #28
 801defc:	ecbd 8b0a 	vpop	{d8-d12}
 801df00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df04:	f000 b998 	b.w	801e238 <__math_check_oflow>
 801df08:	00000000 	.word	0x00000000
 801df0c:	43300000 	.word	0x43300000
 801df10:	00000000 	.word	0x00000000
 801df14:	7f000000 	.word	0x7f000000
 801df18:	3ff00000 	.word	0x3ff00000
 801df1c:	fff00000 	.word	0xfff00000
 801df20:	ffe00000 	.word	0xffe00000
 801df24:	7fe00000 	.word	0x7fe00000
 801df28:	c0196aab 	.word	0xc0196aab
 801df2c:	0801e7a8 	.word	0x0801e7a8
 801df30:	0801f820 	.word	0x0801f820
 801df34:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801df38:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801df3c:	4610      	mov	r0, r2
 801df3e:	ec41 0b15 	vmov	d5, r0, r1
 801df42:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801df46:	ee27 6b05 	vmul.f64	d6, d7, d5
 801df4a:	ee35 7b06 	vadd.f64	d7, d5, d6
 801df4e:	eeb0 4bc7 	vabs.f64	d4, d7
 801df52:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801df56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df5a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801dfd8 <pow+0x490>
 801df5e:	d52a      	bpl.n	801dfb6 <pow+0x46e>
 801df60:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801df64:	ee35 5b47 	vsub.f64	d5, d5, d7
 801df68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df6c:	ee35 5b06 	vadd.f64	d5, d5, d6
 801df70:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801df74:	bf58      	it	pl
 801df76:	eeb0 4b43 	vmovpl.f64	d4, d3
 801df7a:	ee37 3b04 	vadd.f64	d3, d7, d4
 801df7e:	ee34 6b43 	vsub.f64	d6, d4, d3
 801df82:	ee36 6b07 	vadd.f64	d6, d6, d7
 801df86:	ee36 6b05 	vadd.f64	d6, d6, d5
 801df8a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801df8e:	ee36 7b44 	vsub.f64	d7, d6, d4
 801df92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801df96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df9a:	d104      	bne.n	801dfa6 <pow+0x45e>
 801df9c:	4632      	mov	r2, r6
 801df9e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801dfa2:	ec43 2b17 	vmov	d7, r2, r3
 801dfa6:	ed8d 0b02 	vstr	d0, [sp, #8]
 801dfaa:	ed9d 6b02 	vldr	d6, [sp, #8]
 801dfae:	ee26 6b00 	vmul.f64	d6, d6, d0
 801dfb2:	ed8d 6b04 	vstr	d6, [sp, #16]
 801dfb6:	ee27 0b00 	vmul.f64	d0, d7, d0
 801dfba:	b007      	add	sp, #28
 801dfbc:	ecbd 8b0a 	vpop	{d8-d12}
 801dfc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfc4:	f000 b92f 	b.w	801e226 <__math_check_uflow>
 801dfc8:	ec43 2b10 	vmov	d0, r2, r3
 801dfcc:	eea7 0b00 	vfma.f64	d0, d7, d0
 801dfd0:	e625      	b.n	801dc1e <pow+0xd6>
 801dfd2:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801dfe0 <pow+0x498>
 801dfd6:	e622      	b.n	801dc1e <pow+0xd6>
 801dfd8:	00000000 	.word	0x00000000
 801dfdc:	00100000 	.word	0x00100000
	...

0801dfe8 <__ieee754_sqrt>:
 801dfe8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801dfec:	4770      	bx	lr
	...

0801dff0 <__ieee754_atan2>:
 801dff0:	ee11 1a10 	vmov	r1, s2
 801dff4:	eeb0 7b40 	vmov.f64	d7, d0
 801dff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dffa:	ee11 5a90 	vmov	r5, s3
 801dffe:	424b      	negs	r3, r1
 801e000:	4f59      	ldr	r7, [pc, #356]	@ (801e168 <__ieee754_atan2+0x178>)
 801e002:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e006:	430b      	orrs	r3, r1
 801e008:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801e00c:	42bb      	cmp	r3, r7
 801e00e:	d80d      	bhi.n	801e02c <__ieee754_atan2+0x3c>
 801e010:	ee10 ca10 	vmov	ip, s0
 801e014:	ee17 6a90 	vmov	r6, s15
 801e018:	f1cc 0000 	rsb	r0, ip, #0
 801e01c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e020:	ea40 000c 	orr.w	r0, r0, ip
 801e024:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801e028:	42b8      	cmp	r0, r7
 801e02a:	d904      	bls.n	801e036 <__ieee754_atan2+0x46>
 801e02c:	ee37 7b01 	vadd.f64	d7, d7, d1
 801e030:	eeb0 0b47 	vmov.f64	d0, d7
 801e034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e036:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801e03a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e03e:	4308      	orrs	r0, r1
 801e040:	d103      	bne.n	801e04a <__ieee754_atan2+0x5a>
 801e042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e046:	f7ff bc47 	b.w	801d8d8 <atan>
 801e04a:	17ac      	asrs	r4, r5, #30
 801e04c:	f004 0402 	and.w	r4, r4, #2
 801e050:	ea53 0c0c 	orrs.w	ip, r3, ip
 801e054:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801e058:	d107      	bne.n	801e06a <__ieee754_atan2+0x7a>
 801e05a:	2c02      	cmp	r4, #2
 801e05c:	d05c      	beq.n	801e118 <__ieee754_atan2+0x128>
 801e05e:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801e130 <__ieee754_atan2+0x140>
 801e062:	2c03      	cmp	r4, #3
 801e064:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801e068:	e7e2      	b.n	801e030 <__ieee754_atan2+0x40>
 801e06a:	4311      	orrs	r1, r2
 801e06c:	d107      	bne.n	801e07e <__ieee754_atan2+0x8e>
 801e06e:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801e138 <__ieee754_atan2+0x148>
 801e072:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801e140 <__ieee754_atan2+0x150>
 801e076:	2e00      	cmp	r6, #0
 801e078:	fe27 7b06 	vselge.f64	d7, d7, d6
 801e07c:	e7d8      	b.n	801e030 <__ieee754_atan2+0x40>
 801e07e:	42ba      	cmp	r2, r7
 801e080:	d10f      	bne.n	801e0a2 <__ieee754_atan2+0xb2>
 801e082:	4293      	cmp	r3, r2
 801e084:	f104 34ff 	add.w	r4, r4, #4294967295
 801e088:	d107      	bne.n	801e09a <__ieee754_atan2+0xaa>
 801e08a:	2c02      	cmp	r4, #2
 801e08c:	d847      	bhi.n	801e11e <__ieee754_atan2+0x12e>
 801e08e:	4b37      	ldr	r3, [pc, #220]	@ (801e16c <__ieee754_atan2+0x17c>)
 801e090:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e094:	ed93 7b00 	vldr	d7, [r3]
 801e098:	e7ca      	b.n	801e030 <__ieee754_atan2+0x40>
 801e09a:	2c02      	cmp	r4, #2
 801e09c:	d842      	bhi.n	801e124 <__ieee754_atan2+0x134>
 801e09e:	4b34      	ldr	r3, [pc, #208]	@ (801e170 <__ieee754_atan2+0x180>)
 801e0a0:	e7f6      	b.n	801e090 <__ieee754_atan2+0xa0>
 801e0a2:	42bb      	cmp	r3, r7
 801e0a4:	d0e3      	beq.n	801e06e <__ieee754_atan2+0x7e>
 801e0a6:	1a9b      	subs	r3, r3, r2
 801e0a8:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801e0ac:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e0b0:	da1a      	bge.n	801e0e8 <__ieee754_atan2+0xf8>
 801e0b2:	2d00      	cmp	r5, #0
 801e0b4:	da01      	bge.n	801e0ba <__ieee754_atan2+0xca>
 801e0b6:	323c      	adds	r2, #60	@ 0x3c
 801e0b8:	db19      	blt.n	801e0ee <__ieee754_atan2+0xfe>
 801e0ba:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801e0be:	f7ff fd05 	bl	801dacc <fabs>
 801e0c2:	f7ff fc09 	bl	801d8d8 <atan>
 801e0c6:	eeb0 7b40 	vmov.f64	d7, d0
 801e0ca:	2c01      	cmp	r4, #1
 801e0cc:	d012      	beq.n	801e0f4 <__ieee754_atan2+0x104>
 801e0ce:	2c02      	cmp	r4, #2
 801e0d0:	d019      	beq.n	801e106 <__ieee754_atan2+0x116>
 801e0d2:	2c00      	cmp	r4, #0
 801e0d4:	d0ac      	beq.n	801e030 <__ieee754_atan2+0x40>
 801e0d6:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e148 <__ieee754_atan2+0x158>
 801e0da:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e0de:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e150 <__ieee754_atan2+0x160>
 801e0e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e0e6:	e7a3      	b.n	801e030 <__ieee754_atan2+0x40>
 801e0e8:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801e138 <__ieee754_atan2+0x148>
 801e0ec:	e7ed      	b.n	801e0ca <__ieee754_atan2+0xda>
 801e0ee:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801e158 <__ieee754_atan2+0x168>
 801e0f2:	e7ea      	b.n	801e0ca <__ieee754_atan2+0xda>
 801e0f4:	ee17 1a90 	vmov	r1, s15
 801e0f8:	ec53 2b17 	vmov	r2, r3, d7
 801e0fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e100:	ec43 2b17 	vmov	d7, r2, r3
 801e104:	e794      	b.n	801e030 <__ieee754_atan2+0x40>
 801e106:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e148 <__ieee754_atan2+0x158>
 801e10a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e10e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e150 <__ieee754_atan2+0x160>
 801e112:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e116:	e78b      	b.n	801e030 <__ieee754_atan2+0x40>
 801e118:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801e150 <__ieee754_atan2+0x160>
 801e11c:	e788      	b.n	801e030 <__ieee754_atan2+0x40>
 801e11e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e160 <__ieee754_atan2+0x170>
 801e122:	e785      	b.n	801e030 <__ieee754_atan2+0x40>
 801e124:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801e158 <__ieee754_atan2+0x168>
 801e128:	e782      	b.n	801e030 <__ieee754_atan2+0x40>
 801e12a:	bf00      	nop
 801e12c:	f3af 8000 	nop.w
 801e130:	54442d18 	.word	0x54442d18
 801e134:	c00921fb 	.word	0xc00921fb
 801e138:	54442d18 	.word	0x54442d18
 801e13c:	3ff921fb 	.word	0x3ff921fb
 801e140:	54442d18 	.word	0x54442d18
 801e144:	bff921fb 	.word	0xbff921fb
 801e148:	33145c07 	.word	0x33145c07
 801e14c:	3ca1a626 	.word	0x3ca1a626
 801e150:	54442d18 	.word	0x54442d18
 801e154:	400921fb 	.word	0x400921fb
	...
 801e160:	54442d18 	.word	0x54442d18
 801e164:	3fe921fb 	.word	0x3fe921fb
 801e168:	7ff00000 	.word	0x7ff00000
 801e16c:	0801f808 	.word	0x0801f808
 801e170:	0801f7f0 	.word	0x0801f7f0

0801e174 <with_errno>:
 801e174:	b510      	push	{r4, lr}
 801e176:	ed2d 8b02 	vpush	{d8}
 801e17a:	eeb0 8b40 	vmov.f64	d8, d0
 801e17e:	4604      	mov	r4, r0
 801e180:	f7ff fb50 	bl	801d824 <__errno>
 801e184:	eeb0 0b48 	vmov.f64	d0, d8
 801e188:	ecbd 8b02 	vpop	{d8}
 801e18c:	6004      	str	r4, [r0, #0]
 801e18e:	bd10      	pop	{r4, pc}

0801e190 <xflow>:
 801e190:	b082      	sub	sp, #8
 801e192:	b158      	cbz	r0, 801e1ac <xflow+0x1c>
 801e194:	eeb1 7b40 	vneg.f64	d7, d0
 801e198:	ed8d 7b00 	vstr	d7, [sp]
 801e19c:	ed9d 7b00 	vldr	d7, [sp]
 801e1a0:	2022      	movs	r0, #34	@ 0x22
 801e1a2:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e1a6:	b002      	add	sp, #8
 801e1a8:	f7ff bfe4 	b.w	801e174 <with_errno>
 801e1ac:	eeb0 7b40 	vmov.f64	d7, d0
 801e1b0:	e7f2      	b.n	801e198 <xflow+0x8>
 801e1b2:	0000      	movs	r0, r0
 801e1b4:	0000      	movs	r0, r0
	...

0801e1b8 <__math_uflow>:
 801e1b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e1c0 <__math_uflow+0x8>
 801e1bc:	f7ff bfe8 	b.w	801e190 <xflow>
 801e1c0:	00000000 	.word	0x00000000
 801e1c4:	10000000 	.word	0x10000000

0801e1c8 <__math_oflow>:
 801e1c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e1d0 <__math_oflow+0x8>
 801e1cc:	f7ff bfe0 	b.w	801e190 <xflow>
 801e1d0:	00000000 	.word	0x00000000
 801e1d4:	70000000 	.word	0x70000000

0801e1d8 <__math_divzero>:
 801e1d8:	b082      	sub	sp, #8
 801e1da:	2800      	cmp	r0, #0
 801e1dc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e1e0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e1e4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e1e8:	ed8d 7b00 	vstr	d7, [sp]
 801e1ec:	ed9d 0b00 	vldr	d0, [sp]
 801e1f0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e200 <__math_divzero+0x28>
 801e1f4:	2022      	movs	r0, #34	@ 0x22
 801e1f6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e1fa:	b002      	add	sp, #8
 801e1fc:	f7ff bfba 	b.w	801e174 <with_errno>
	...

0801e208 <__math_invalid>:
 801e208:	eeb0 7b40 	vmov.f64	d7, d0
 801e20c:	eeb4 7b47 	vcmp.f64	d7, d7
 801e210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e214:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e218:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e21c:	d602      	bvs.n	801e224 <__math_invalid+0x1c>
 801e21e:	2021      	movs	r0, #33	@ 0x21
 801e220:	f7ff bfa8 	b.w	801e174 <with_errno>
 801e224:	4770      	bx	lr

0801e226 <__math_check_uflow>:
 801e226:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e22e:	d102      	bne.n	801e236 <__math_check_uflow+0x10>
 801e230:	2022      	movs	r0, #34	@ 0x22
 801e232:	f7ff bf9f 	b.w	801e174 <with_errno>
 801e236:	4770      	bx	lr

0801e238 <__math_check_oflow>:
 801e238:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e258 <__math_check_oflow+0x20>
 801e23c:	eeb0 7bc0 	vabs.f64	d7, d0
 801e240:	eeb4 7b46 	vcmp.f64	d7, d6
 801e244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e248:	dd02      	ble.n	801e250 <__math_check_oflow+0x18>
 801e24a:	2022      	movs	r0, #34	@ 0x22
 801e24c:	f7ff bf92 	b.w	801e174 <with_errno>
 801e250:	4770      	bx	lr
 801e252:	bf00      	nop
 801e254:	f3af 8000 	nop.w
 801e258:	ffffffff 	.word	0xffffffff
 801e25c:	7fefffff 	.word	0x7fefffff

0801e260 <_init>:
 801e260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e262:	bf00      	nop
 801e264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e266:	bc08      	pop	{r3}
 801e268:	469e      	mov	lr, r3
 801e26a:	4770      	bx	lr

0801e26c <_fini>:
 801e26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e26e:	bf00      	nop
 801e270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e272:	bc08      	pop	{r3}
 801e274:	469e      	mov	lr, r3
 801e276:	4770      	bx	lr
