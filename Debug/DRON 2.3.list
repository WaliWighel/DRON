
DRON 2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001de28  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e18  0801e0f8  0801e0f8  000240f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ff10  0801ff10  00025f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ff18  0801ff18  00025f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801ff1c  0801ff1c  00025f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  0801ff20  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  0801ff98  00026078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  0801ff98  000268ac  2**0
                  ALLOC
  9 .IRAM         000041de  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00048710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00026eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00048710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031b9b  00000000  00000000  0004873e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ee3  00000000  00000000  0007a2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024c8  00000000  00000000  000801c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c7b  00000000  00000000  00082688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003cb3e  00000000  00000000  00084303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038a5f  00000000  00000000  000c0e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e082  00000000  00000000  000f98a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00267922  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a17c  00000000  00000000  00267968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00271ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e0e0 	.word	0x0801e0e0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801e0e0 	.word	0x0801e0e0

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:
static I2C_HandleTypeDef *hi2c_BMP180;
extern struct BMP180_Struct BMP180;
//extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
//extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00d faf4 	bl	800dca8 <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8ed 	bl	80008bc <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00d fabe 	bl	800dca8 <HAL_I2C_Mem_Read>
	BMP180.Callibration_Regs.UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6253      	str	r3, [r2, #36]	@ 0x24
	return BMP180.Callibration_Regs.UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	0000009c 	.word	0x0000009c

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00d fa9b 	bl	800dca8 <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180.Data_Press_IT, 3);
	BMP180.BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	BMP180.Callibration_Regs.UT = ((BMP180.Data_Temp_IT[0]<<8) | BMP180.Data_Temp_IT[1]);
 8000794:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 8000796:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 800079a:	021b      	lsls	r3, r3, #8
 800079c:	4a06      	ldr	r2, [pc, #24]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 800079e:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 80007a2:	4313      	orrs	r3, r2
 80007a4:	4a04      	ldr	r2, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	6253      	str	r3, [r2, #36]	@ 0x24
	return BMP180.Callibration_Regs.UT;
 80007a8:	4b03      	ldr	r3, [pc, #12]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ac:	b29b      	uxth	r3, r3
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	0000009c 	.word	0x0000009c

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180.Data_Press_IT[0]<<16)|(BMP180.Data_Press_IT[1]<<8)|BMP180.Data_Press_IT[2]) >> 5);
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <BMP180_GET_pres_IT+0x2c>)
 80007c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80007c6:	041a      	lsls	r2, r3, #16
 80007c8:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <BMP180_GET_pres_IT+0x2c>)
 80007ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	4313      	orrs	r3, r2
 80007d2:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <BMP180_GET_pres_IT+0x2c>)
 80007d4:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 80007d8:	4313      	orrs	r3, r2
 80007da:	115b      	asrs	r3, r3, #5
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	0000009c 	.word	0x0000009c

080007ec <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007f2:	232e      	movs	r3, #46	@ 0x2e
 80007f4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <BMP180_start_measurment_temp+0x2c>)
 80007f8:	6818      	ldr	r0, [r3, #0]
 80007fa:	2364      	movs	r3, #100	@ 0x64
 80007fc:	9302      	str	r3, [sp, #8]
 80007fe:	2301      	movs	r3, #1
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2301      	movs	r3, #1
 8000808:	22f4      	movs	r2, #244	@ 0xf4
 800080a:	21ee      	movs	r1, #238	@ 0xee
 800080c:	f00d f938 	bl	800da80 <HAL_I2C_Mem_Write>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	24000094 	.word	0x24000094

0800081c <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 8000822:	23f4      	movs	r3, #244	@ 0xf4
 8000824:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <BMP180_start_measurment_pres+0x2c>)
 8000828:	6818      	ldr	r0, [r3, #0]
 800082a:	2364      	movs	r3, #100	@ 0x64
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	2301      	movs	r3, #1
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2301      	movs	r3, #1
 8000838:	22f4      	movs	r2, #244	@ 0xf4
 800083a:	21ee      	movs	r1, #238	@ 0xee
 800083c:	f00d f920 	bl	800da80 <HAL_I2C_Mem_Write>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	24000094 	.word	0x24000094

0800084c <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 8000852:	23f4      	movs	r3, #244	@ 0xf4
 8000854:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <BMP180_start_measurment_pres_IT+0x30>)
 8000858:	6818      	ldr	r0, [r3, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2301      	movs	r3, #1
 8000864:	22f4      	movs	r2, #244	@ 0xf4
 8000866:	21ee      	movs	r1, #238	@ 0xee
 8000868:	f00d fb38 	bl	800dedc <HAL_I2C_Mem_Write_IT>
	BMP180.I2C_Tx_IRQ = 2;
 800086c:	4b04      	ldr	r3, [pc, #16]	@ (8000880 <BMP180_start_measurment_pres_IT+0x34>)
 800086e:	2202      	movs	r2, #2
 8000870:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000094 	.word	0x24000094
 8000880:	0000009c 	.word	0x0000009c

08000884 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 800088a:	232e      	movs	r3, #46	@ 0x2e
 800088c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <BMP180_start_measurment_temp_IT+0x30>)
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	2301      	movs	r3, #1
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2301      	movs	r3, #1
 800089c:	22f4      	movs	r2, #244	@ 0xf4
 800089e:	21ee      	movs	r1, #238	@ 0xee
 80008a0:	f00d fb1c 	bl	800dedc <HAL_I2C_Mem_Write_IT>
	BMP180.I2C_Tx_IRQ = 1;
 80008a4:	4b04      	ldr	r3, [pc, #16]	@ (80008b8 <BMP180_start_measurment_temp_IT+0x34>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	24000094 	.word	0x24000094
 80008b8:	0000009c 	.word	0x0000009c

080008bc <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008d4:	23aa      	movs	r3, #170	@ 0xaa
 80008d6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008d8:	4b3b      	ldr	r3, [pc, #236]	@ (80009c8 <BMP180_read_calliberation_data+0x10c>)
 80008da:	6818      	ldr	r0, [r3, #0]
 80008dc:	8afa      	ldrh	r2, [r7, #22]
 80008de:	2364      	movs	r3, #100	@ 0x64
 80008e0:	9302      	str	r3, [sp, #8]
 80008e2:	2316      	movs	r3, #22
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	463b      	mov	r3, r7
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2301      	movs	r3, #1
 80008ec:	21ee      	movs	r1, #238	@ 0xee
 80008ee:	f00d f9db 	bl	800dca8 <HAL_I2C_Mem_Read>

	BMP180.Callibration_Regs.AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008f2:	783b      	ldrb	r3, [r7, #0]
 80008f4:	021b      	lsls	r3, r3, #8
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	787b      	ldrb	r3, [r7, #1]
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b21a      	sxth	r2, r3
 8000900:	4b32      	ldr	r3, [pc, #200]	@ (80009cc <BMP180_read_calliberation_data+0x110>)
 8000902:	80da      	strh	r2, [r3, #6]
	BMP180.Callibration_Regs.AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 8000904:	78bb      	ldrb	r3, [r7, #2]
 8000906:	021b      	lsls	r3, r3, #8
 8000908:	b21a      	sxth	r2, r3
 800090a:	78fb      	ldrb	r3, [r7, #3]
 800090c:	b21b      	sxth	r3, r3
 800090e:	4313      	orrs	r3, r2
 8000910:	b21a      	sxth	r2, r3
 8000912:	4b2e      	ldr	r3, [pc, #184]	@ (80009cc <BMP180_read_calliberation_data+0x110>)
 8000914:	811a      	strh	r2, [r3, #8]
	BMP180.Callibration_Regs.AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 8000916:	793b      	ldrb	r3, [r7, #4]
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	b21a      	sxth	r2, r3
 800091c:	797b      	ldrb	r3, [r7, #5]
 800091e:	b21b      	sxth	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b21a      	sxth	r2, r3
 8000924:	4b29      	ldr	r3, [pc, #164]	@ (80009cc <BMP180_read_calliberation_data+0x110>)
 8000926:	815a      	strh	r2, [r3, #10]
	BMP180.Callibration_Regs.AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	021b      	lsls	r3, r3, #8
 800092c:	b21a      	sxth	r2, r3
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	b21b      	sxth	r3, r3
 8000932:	4313      	orrs	r3, r2
 8000934:	b21b      	sxth	r3, r3
 8000936:	b29a      	uxth	r2, r3
 8000938:	4b24      	ldr	r3, [pc, #144]	@ (80009cc <BMP180_read_calliberation_data+0x110>)
 800093a:	801a      	strh	r2, [r3, #0]
	BMP180.Callibration_Regs.AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800093c:	7a3b      	ldrb	r3, [r7, #8]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7a7b      	ldrb	r3, [r7, #9]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21b      	sxth	r3, r3
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <BMP180_read_calliberation_data+0x110>)
 800094e:	805a      	strh	r2, [r3, #2]
	BMP180.Callibration_Regs.AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000950:	7abb      	ldrb	r3, [r7, #10]
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	b21a      	sxth	r2, r3
 8000956:	7afb      	ldrb	r3, [r7, #11]
 8000958:	b21b      	sxth	r3, r3
 800095a:	4313      	orrs	r3, r2
 800095c:	b21b      	sxth	r3, r3
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <BMP180_read_calliberation_data+0x110>)
 8000962:	809a      	strh	r2, [r3, #4]
	BMP180.Callibration_Regs.B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000964:	7b3b      	ldrb	r3, [r7, #12]
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	b21a      	sxth	r2, r3
 800096a:	7b7b      	ldrb	r3, [r7, #13]
 800096c:	b21b      	sxth	r3, r3
 800096e:	4313      	orrs	r3, r2
 8000970:	b21a      	sxth	r2, r3
 8000972:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <BMP180_read_calliberation_data+0x110>)
 8000974:	819a      	strh	r2, [r3, #12]
	BMP180.Callibration_Regs.B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000976:	7bbb      	ldrb	r3, [r7, #14]
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	b21a      	sxth	r2, r3
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	b21b      	sxth	r3, r3
 8000980:	4313      	orrs	r3, r2
 8000982:	b21a      	sxth	r2, r3
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <BMP180_read_calliberation_data+0x110>)
 8000986:	81da      	strh	r2, [r3, #14]
	BMP180.Callibration_Regs.MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000988:	7c3b      	ldrb	r3, [r7, #16]
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	b21a      	sxth	r2, r3
 800098e:	7c7b      	ldrb	r3, [r7, #17]
 8000990:	b21b      	sxth	r3, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	b21a      	sxth	r2, r3
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <BMP180_read_calliberation_data+0x110>)
 8000998:	821a      	strh	r2, [r3, #16]
	BMP180.Callibration_Regs.MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800099a:	7cbb      	ldrb	r3, [r7, #18]
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	b21a      	sxth	r2, r3
 80009a0:	7cfb      	ldrb	r3, [r7, #19]
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <BMP180_read_calliberation_data+0x110>)
 80009aa:	825a      	strh	r2, [r3, #18]
	BMP180.Callibration_Regs.MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 80009ac:	7d3b      	ldrb	r3, [r7, #20]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	7d7b      	ldrb	r3, [r7, #21]
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	4b04      	ldr	r3, [pc, #16]	@ (80009cc <BMP180_read_calliberation_data+0x110>)
 80009bc:	829a      	strh	r2, [r3, #20]
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000094 	.word	0x24000094
 80009cc:	0000009c 	.word	0x0000009c

080009d0 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	80fb      	strh	r3, [r7, #6]
	float temp;
	BMP180.Callibration_Regs.X1 = ((temperature - BMP180.Callibration_Regs.AC6) * BMP180.Callibration_Regs.AC5)/32768;
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	4a20      	ldr	r2, [pc, #128]	@ (8000a60 <BMP180_GET_temp+0x90>)
 80009de:	8892      	ldrh	r2, [r2, #4]
 80009e0:	1a9b      	subs	r3, r3, r2
 80009e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a60 <BMP180_GET_temp+0x90>)
 80009e4:	8852      	ldrh	r2, [r2, #2]
 80009e6:	fb02 f303 	mul.w	r3, r2, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	da03      	bge.n	80009f6 <BMP180_GET_temp+0x26>
 80009ee:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009f2:	441a      	add	r2, r3
 80009f4:	4613      	mov	r3, r2
 80009f6:	13db      	asrs	r3, r3, #15
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <BMP180_GET_temp+0x90>)
 80009fc:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = (BMP180.Callibration_Regs.MC * 2048)/(BMP180.Callibration_Regs.X1 + BMP180.Callibration_Regs.MD);
 80009fe:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <BMP180_GET_temp+0x90>)
 8000a00:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a04:	02da      	lsls	r2, r3, #11
 8000a06:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <BMP180_GET_temp+0x90>)
 8000a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a0a:	4915      	ldr	r1, [pc, #84]	@ (8000a60 <BMP180_GET_temp+0x90>)
 8000a0c:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8000a10:	440b      	add	r3, r1
 8000a12:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a16:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <BMP180_GET_temp+0x90>)
 8000a18:	62d3      	str	r3, [r2, #44]	@ 0x2c
	BMP180.Callibration_Regs.B5 = BMP180.Callibration_Regs.X1 + BMP180.Callibration_Regs.X2;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <BMP180_GET_temp+0x90>)
 8000a1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <BMP180_GET_temp+0x90>)
 8000a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a22:	4413      	add	r3, r2
 8000a24:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <BMP180_GET_temp+0x90>)
 8000a26:	6313      	str	r3, [r2, #48]	@ 0x30
	temp = (BMP180.Callibration_Regs.B5 + 8)/16;
 8000a28:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <BMP180_GET_temp+0x90>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2c:	3308      	adds	r3, #8
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	da00      	bge.n	8000a34 <BMP180_GET_temp+0x64>
 8000a32:	330f      	adds	r3, #15
 8000a34:	111b      	asrs	r3, r3, #4
 8000a36:	ee07 3a90 	vmov	s15, r3
 8000a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a3e:	edc7 7a03 	vstr	s15, [r7, #12]
	return temp/10.0;
 8000a42:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a46:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a4e:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a52:	eeb0 0a67 	vmov.f32	s0, s15
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	0000009c 	.word	0x0000009c

08000a64 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
	float pres;
	BMP180.Callibration_Regs.UP = BMP180_READ_pres();
 8000a6e:	f7ff fe6f 	bl	8000750 <BMP180_READ_pres>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4a98      	ldr	r2, [pc, #608]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000a76:	6213      	str	r3, [r2, #32]
	BMP180.Callibration_Regs.X1 = (((BMP180.Callibration_Regs.UT-BMP180.Callibration_Regs.AC6) * BMP180.Callibration_Regs.AC5)/32768);//
 8000a78:	4b97      	ldr	r3, [pc, #604]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a7c:	4a96      	ldr	r2, [pc, #600]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000a7e:	8892      	ldrh	r2, [r2, #4]
 8000a80:	1a9b      	subs	r3, r3, r2
 8000a82:	4a95      	ldr	r2, [pc, #596]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000a84:	8852      	ldrh	r2, [r2, #2]
 8000a86:	fb02 f303 	mul.w	r3, r2, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	da03      	bge.n	8000a96 <BMP180_GET_pres+0x32>
 8000a8e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000a92:	441a      	add	r2, r3
 8000a94:	4613      	mov	r3, r2
 8000a96:	13db      	asrs	r3, r3, #15
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b8f      	ldr	r3, [pc, #572]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000a9c:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = ((BMP180.Callibration_Regs.MC*(2048)) / (BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.MD));
 8000a9e:	4b8e      	ldr	r3, [pc, #568]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000aa0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000aa4:	02da      	lsls	r2, r3, #11
 8000aa6:	4b8c      	ldr	r3, [pc, #560]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aaa:	498b      	ldr	r1, [pc, #556]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000aac:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8000ab0:	440b      	add	r3, r1
 8000ab2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ab6:	4a88      	ldr	r2, [pc, #544]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c
	BMP180.Callibration_Regs.B5 = BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2;
 8000aba:	4b87      	ldr	r3, [pc, #540]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000abc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000abe:	4b86      	ldr	r3, [pc, #536]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a84      	ldr	r2, [pc, #528]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000ac6:	6313      	str	r3, [r2, #48]	@ 0x30
	BMP180.Callibration_Regs.B6 = BMP180.Callibration_Regs.B5-4000;
 8000ac8:	4b83      	ldr	r3, [pc, #524]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000acc:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000ad0:	4a81      	ldr	r2, [pc, #516]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000ad2:	6353      	str	r3, [r2, #52]	@ 0x34
	BMP180.Callibration_Regs.X1 = (BMP180.Callibration_Regs.B2 * (BMP180.Callibration_Regs.B6*BMP180.Callibration_Regs.B6/(4096)))/(2048);
 8000ad4:	4b80      	ldr	r3, [pc, #512]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000ad6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000ada:	4619      	mov	r1, r3
 8000adc:	4b7e      	ldr	r3, [pc, #504]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ae0:	4a7d      	ldr	r2, [pc, #500]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000ae2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000ae4:	fb02 f303 	mul.w	r3, r2, r3
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	da01      	bge.n	8000af0 <BMP180_GET_pres+0x8c>
 8000aec:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000af0:	131b      	asrs	r3, r3, #12
 8000af2:	fb01 f303 	mul.w	r3, r1, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da01      	bge.n	8000afe <BMP180_GET_pres+0x9a>
 8000afa:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000afe:	12db      	asrs	r3, r3, #11
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b75      	ldr	r3, [pc, #468]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b04:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = BMP180.Callibration_Regs.AC2*BMP180.Callibration_Regs.B6/(2048);
 8000b06:	4b74      	ldr	r3, [pc, #464]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b72      	ldr	r3, [pc, #456]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0xba>
 8000b1a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b1e:	12db      	asrs	r3, r3, #11
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b6d      	ldr	r3, [pc, #436]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b24:	62da      	str	r2, [r3, #44]	@ 0x2c
	BMP180.Callibration_Regs.X3 = BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2;
 8000b26:	4b6c      	ldr	r3, [pc, #432]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b2a:	4b6b      	ldr	r3, [pc, #428]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a69      	ldr	r2, [pc, #420]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b32:	63d3      	str	r3, [r2, #60]	@ 0x3c
	BMP180.Callibration_Regs.B3 = (((BMP180.Callibration_Regs.AC1*4+BMP180.Callibration_Regs.X3)<<3)+2)/4;
 8000b34:	4b68      	ldr	r3, [pc, #416]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b36:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b3a:	009a      	lsls	r2, r3, #2
 8000b3c:	4b66      	ldr	r3, [pc, #408]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b40:	4413      	add	r3, r2
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	3302      	adds	r3, #2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	da00      	bge.n	8000b4c <BMP180_GET_pres+0xe8>
 8000b4a:	3303      	adds	r3, #3
 8000b4c:	109b      	asrs	r3, r3, #2
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b61      	ldr	r3, [pc, #388]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b52:	639a      	str	r2, [r3, #56]	@ 0x38
	BMP180.Callibration_Regs.X1 = BMP180.Callibration_Regs.AC3*BMP180.Callibration_Regs.B6/8192;
 8000b54:	4b60      	ldr	r3, [pc, #384]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b56:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b60:	fb02 f303 	mul.w	r3, r2, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	da03      	bge.n	8000b70 <BMP180_GET_pres+0x10c>
 8000b68:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b6c:	441a      	add	r2, r3
 8000b6e:	4613      	mov	r3, r2
 8000b70:	135b      	asrs	r3, r3, #13
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b58      	ldr	r3, [pc, #352]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b76:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = (BMP180.Callibration_Regs.B1 * (BMP180.Callibration_Regs.B6*BMP180.Callibration_Regs.B6/(4096)))/(65536);
 8000b78:	4b57      	ldr	r3, [pc, #348]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b7a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4b55      	ldr	r3, [pc, #340]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b84:	4a54      	ldr	r2, [pc, #336]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000b86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000b88:	fb02 f303 	mul.w	r3, r2, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	da01      	bge.n	8000b94 <BMP180_GET_pres+0x130>
 8000b90:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b94:	131b      	asrs	r3, r3, #12
 8000b96:	fb01 f303 	mul.w	r3, r1, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	da03      	bge.n	8000ba6 <BMP180_GET_pres+0x142>
 8000b9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ba2:	441a      	add	r2, r3
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	141b      	asrs	r3, r3, #16
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b4b      	ldr	r3, [pc, #300]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000bac:	62da      	str	r2, [r3, #44]	@ 0x2c
	BMP180.Callibration_Regs.X3 = ((BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2)+2)/4;
 8000bae:	4b4a      	ldr	r3, [pc, #296]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000bb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000bb2:	4b49      	ldr	r3, [pc, #292]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb6:	4413      	add	r3, r2
 8000bb8:	3302      	adds	r3, #2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da00      	bge.n	8000bc0 <BMP180_GET_pres+0x15c>
 8000bbe:	3303      	adds	r3, #3
 8000bc0:	109b      	asrs	r3, r3, #2
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b44      	ldr	r3, [pc, #272]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
	BMP180.Callibration_Regs.B4 = BMP180.Callibration_Regs.AC4* (uint32_t)(BMP180.Callibration_Regs.X3+32768)/(32768);
 8000bc8:	4b43      	ldr	r3, [pc, #268]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b42      	ldr	r3, [pc, #264]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bd2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000bd6:	fb02 f303 	mul.w	r3, r2, r3
 8000bda:	0bdb      	lsrs	r3, r3, #15
 8000bdc:	4a3e      	ldr	r2, [pc, #248]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000bde:	6193      	str	r3, [r2, #24]
	BMP180.Callibration_Regs.B7 = ((uint32_t)BMP180.Callibration_Regs.UP-BMP180.Callibration_Regs.B3)*(50000>>3);
 8000be0:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000be2:	6a1b      	ldr	r3, [r3, #32]
 8000be4:	4a3c      	ldr	r2, [pc, #240]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000be6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000bee:	fb02 f303 	mul.w	r3, r2, r3
 8000bf2:	4a39      	ldr	r2, [pc, #228]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000bf4:	61d3      	str	r3, [r2, #28]
	if (BMP180.Callibration_Regs.B7 < 0x80000000){
 8000bf6:	4b38      	ldr	r3, [pc, #224]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0d      	blt.n	8000c1a <BMP180_GET_pres+0x1b6>
		pres = (BMP180.Callibration_Regs.B7*2)/BMP180.Callibration_Regs.B4;
 8000bfe:	4b36      	ldr	r3, [pc, #216]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	005a      	lsls	r2, r3, #1
 8000c04:	4b34      	ldr	r3, [pc, #208]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0c:	ee07 3a90 	vmov	s15, r3
 8000c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c14:	edc7 7a03 	vstr	s15, [r7, #12]
 8000c18:	e00c      	b.n	8000c34 <BMP180_GET_pres+0x1d0>
	}
	else{
		pres = (BMP180.Callibration_Regs.B7/BMP180.Callibration_Regs.B4)*2;
 8000c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000c1c:	69da      	ldr	r2, [r3, #28]
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	ee07 3a90 	vmov	s15, r3
 8000c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c30:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	BMP180.Callibration_Regs.X1 = (pres/(256))*(pres/(256));
 8000c34:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c38:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000cdc <BMP180_GET_pres+0x278>
 8000c3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c40:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c44:	ed9f 6a25 	vldr	s12, [pc, #148]	@ 8000cdc <BMP180_GET_pres+0x278>
 8000c48:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c54:	ee17 2a90 	vmov	r2, s15
 8000c58:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000c5a:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X1 = (BMP180.Callibration_Regs.X1*3038)/(65536);
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c60:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c64:	fb02 f303 	mul.w	r3, r2, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	da03      	bge.n	8000c74 <BMP180_GET_pres+0x210>
 8000c6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c70:	441a      	add	r2, r3
 8000c72:	4613      	mov	r3, r2
 8000c74:	141b      	asrs	r3, r3, #16
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000c7a:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = (-7357*pres)/(65536);
 8000c7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c80:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000ce0 <BMP180_GET_pres+0x27c>
 8000c84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c88:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000ce4 <BMP180_GET_pres+0x280>
 8000c8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c94:	ee17 2a90 	vmov	r2, s15
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	pres = pres + (BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2+3791)/(16);
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000c9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <BMP180_GET_pres+0x274>)
 8000ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ca4:	4413      	add	r3, r2
 8000ca6:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da00      	bge.n	8000cb0 <BMP180_GET_pres+0x24c>
 8000cae:	330f      	adds	r3, #15
 8000cb0:	111b      	asrs	r3, r3, #4
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cba:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc2:	edc7 7a03 	vstr	s15, [r7, #12]
	return pres;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	ee07 3a90 	vmov	s15, r3
}
 8000ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	0000009c 	.word	0x0000009c
 8000cdc:	43800000 	.word	0x43800000
 8000ce0:	c5e5e800 	.word	0xc5e5e800
 8000ce4:	47800000 	.word	0x47800000

08000ce8 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	float temperature, pressure, pres;
	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000cf0:	f7ff fd7c 	bl	80007ec <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000cf4:	200a      	movs	r0, #10
 8000cf6:	f007 fcb7 	bl	8008668 <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000cfa:	f7ff fd07 	bl	800070c <BMP180_READ_temp>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	ee07 3a90 	vmov	s15, r3
 8000d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d08:	edc7 7a05 	vstr	s15, [r7, #20]
	BMP180.temp = BMP180_GET_temp(temperature);
 8000d0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d14:	ee17 3a90 	vmov	r3, s15
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fe58 	bl	80009d0 <BMP180_GET_temp>
 8000d20:	eef0 7a40 	vmov.f32	s15, s0
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <BMP180_CALIBRATION+0x84>)
 8000d26:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	BMP180_start_measurment_pres();
 8000d2a:	f7ff fd77 	bl	800081c <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000d2e:	201e      	movs	r0, #30
 8000d30:	f007 fc9a 	bl	8008668 <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000d34:	f7ff fd0c 	bl	8000750 <BMP180_READ_pres>
 8000d38:	ee07 0a90 	vmov	s15, r0
 8000d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d40:	edc7 7a04 	vstr	s15, [r7, #16]
	pres = BMP180_GET_pres(pressure);
 8000d44:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d4c:	ee17 3a90 	vmov	r3, s15
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fe86 	bl	8000a64 <BMP180_GET_pres>
 8000d58:	ed87 0a03 	vstr	s0, [r7, #12]
	//}
	*firstpres = pres;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	601a      	str	r2, [r3, #0]
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	0000009c 	.word	0x0000009c

08000d70 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <BMP180_GET_height+0x38>)
 8000d7e:	603b      	str	r3, [r7, #0]
	height = (BMP180.ampritude/factor);
 8000d80:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <BMP180_GET_height+0x3c>)
 8000d82:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8000d86:	ed97 7a00 	vldr	s14, [r7]
 8000d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d8e:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	ee07 3a90 	vmov	s15, r3
}
 8000d98:	eeb0 0a67 	vmov.f32	s0, s15
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	4134cccd 	.word	0x4134cccd
 8000dac:	0000009c 	.word	0x0000009c

08000db0 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
//	  if(a >  max_speed)
//	  {
//		  a =  max_speed;
//	  }

	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d907      	bls.n	8000dd4 <ESC_1_SPEED+0x24>
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	bf28      	it	cs
 8000dce:	4613      	movcs	r3, r2
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	e001      	b.n	8000dd8 <ESC_1_SPEED+0x28>
 8000dd4:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000dd8:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000dda:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <ESC_1_SPEED+0x40>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	88fa      	ldrh	r2, [r7, #6]
 8000de2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	24000098 	.word	0x24000098

08000df4 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d907      	bls.n	8000e18 <ESC_2_SPEED+0x24>
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	bf28      	it	cs
 8000e12:	4613      	movcs	r3, r2
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	e001      	b.n	8000e1c <ESC_2_SPEED+0x28>
 8000e18:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e1c:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000e1e:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <ESC_2_SPEED+0x40>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	88fa      	ldrh	r2, [r7, #6]
 8000e26:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	24000098 	.word	0x24000098

08000e38 <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d907      	bls.n	8000e5c <ESC_3_SPEED+0x24>
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e52:	4293      	cmp	r3, r2
 8000e54:	bf28      	it	cs
 8000e56:	4613      	movcs	r3, r2
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	e001      	b.n	8000e60 <ESC_3_SPEED+0x28>
 8000e5c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e60:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000e62:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <ESC_3_SPEED+0x40>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	88fa      	ldrh	r2, [r7, #6]
 8000e6a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	24000098 	.word	0x24000098

08000e7c <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d907      	bls.n	8000ea0 <ESC_4_SPEED+0x24>
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e96:	4293      	cmp	r3, r2
 8000e98:	bf28      	it	cs
 8000e9a:	4613      	movcs	r3, r2
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	e001      	b.n	8000ea4 <ESC_4_SPEED+0x28>
 8000ea0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ea4:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000ea6:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <ESC_4_SPEED+0x40>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	88fa      	ldrh	r2, [r7, #6]
 8000eae:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	24000098 	.word	0x24000098

08000ec0 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000ec8:	4a20      	ldr	r2, [pc, #128]	@ (8000f4c <ESC_INT+0x8c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000ece:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <ESC_INT+0x8c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f014 fe99 	bl	8015c0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <ESC_INT+0x8c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2104      	movs	r1, #4
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f014 fe93 	bl	8015c0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000ee6:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <ESC_INT+0x8c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2108      	movs	r1, #8
 8000eec:	4618      	mov	r0, r3
 8000eee:	f014 fe8d 	bl	8015c0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000ef2:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <ESC_INT+0x8c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	210c      	movs	r1, #12
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f014 fe87 	bl	8015c0c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <ESC_INT+0x8c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f08:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <ESC_INT+0x8c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f14:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <ESC_INT+0x8c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f20:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <ESC_INT+0x8c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f2c:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f34:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <ESC_INT+0x90>)
 8000f36:	f00c fcd3 	bl	800d8e0 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000f3a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f3e:	f007 fb93 	bl	8008668 <HAL_Delay>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	24000098 	.word	0x24000098
 8000f50:	58021800 	.word	0x58021800

08000f54 <HMC5883L_Init>:
extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;
extern float Mag_Y, Mag_X, Mag_Z, heading;
//float HMC5883L_Scale = 0.92;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af04      	add	r7, sp, #16
 8000f5a:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800100c <HMC5883L_Init+0xb8>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			15 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x70;
 8000f66:	2370      	movs	r3, #112	@ 0x70
 8000f68:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000f6a:	4b28      	ldr	r3, [pc, #160]	@ (800100c <HMC5883L_Init+0xb8>)
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	9302      	str	r3, [sp, #8]
 8000f72:	2301      	movs	r3, #1
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	f107 030f 	add.w	r3, r7, #15
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	2200      	movs	r2, #0
 8000f80:	213c      	movs	r1, #60	@ 0x3c
 8000f82:	f00c fd7d 	bl	800da80 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xA0;
 8000f86:	23a0      	movs	r3, #160	@ 0xa0
 8000f88:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 8000f8a:	4b20      	ldr	r3, [pc, #128]	@ (800100c <HMC5883L_Init+0xb8>)
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	f107 030f 	add.w	r3, r7, #15
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	213c      	movs	r1, #60	@ 0x3c
 8000fa2:	f00c fd6d 	bl	800da80 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x00;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <HMC5883L_Init+0xb8>)
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	f107 030f 	add.w	r3, r7, #15
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	213c      	movs	r1, #60	@ 0x3c
 8000fc2:	f00c fd5d 	bl	800da80 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 8000fca:	200a      	movs	r0, #10
 8000fcc:	f007 fb4c 	bl	8008668 <HAL_Delay>

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <HMC5883L_Init+0xb8>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	f107 030e 	add.w	r3, r7, #14
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	220a      	movs	r2, #10
 8000fe6:	213c      	movs	r1, #60	@ 0x3c
 8000fe8:	f00c fe5e 	bl	800dca8 <HAL_I2C_Mem_Read>

	if(status != 0x48){
 8000fec:	7bbb      	ldrb	r3, [r7, #14]
 8000fee:	2b48      	cmp	r3, #72	@ 0x48
 8000ff0:	d002      	beq.n	8000ff8 <HMC5883L_Init+0xa4>
		status = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73bb      	strb	r3, [r7, #14]
 8000ff6:	e001      	b.n	8000ffc <HMC5883L_Init+0xa8>
	}
	else{
		status = 1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 8000ffc:	200a      	movs	r0, #10
 8000ffe:	f007 fb33 	bl	8008668 <HAL_Delay>

	return status;
 8001002:	7bbb      	ldrb	r3, [r7, #14]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2400009c 	.word	0x2400009c

08001010 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 8001016:	23b6      	movs	r3, #182	@ 0xb6
 8001018:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, data, 6, 1);
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <HMC5883L_Get_Z_Start+0x40>)
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2306      	movs	r3, #6
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	463b      	mov	r3, r7
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	213c      	movs	r1, #60	@ 0x3c
 8001030:	f00c fe3a 	bl	800dca8 <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[2]<<8) | data[3];
 8001034:	78bb      	ldrb	r3, [r7, #2]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 8001042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2400009c 	.word	0x2400009c

08001054 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <HMC5883L_Get_Z_Start_IT+0x28>)
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	2306      	movs	r3, #6
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <HMC5883L_Get_Z_Start_IT+0x2c>)
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	213c      	movs	r1, #60	@ 0x3c
 800106c:	f00c ffc0 	bl	800dff0 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <HMC5883L_Get_Z_Start_IT+0x30>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2400009c 	.word	0x2400009c
 8001080:	0000006c 	.word	0x0000006c
 8001084:	000041d0 	.word	0x000041d0

08001088 <HMC5883L_Get_Z_End_IT>:

void HMC5883L_Get_Z_End_IT(void){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
//	Mag_Z = (((int16_t)HMC5883L_Data_IT[2]<<8) | HMC5883L_Data_IT[3]) * 2.56;// 2.56 - scale
//	Mag_X = (((int16_t)HMC5883L_Data_IT[0]<<8) | HMC5883L_Data_IT[1]) * 2.56;
//	Mag_Y = (((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5]) * 2.56;
		Mag_X = (((int16_t)HMC5883L_Data_IT[1]<<8) | HMC5883L_Data_IT[0]) * 2.56;//important fake HMC5883L, msb -> lsb
 800108c:	4b32      	ldr	r3, [pc, #200]	@ (8001158 <HMC5883L_Get_Z_End_IT+0xd0>)
 800108e:	785b      	ldrb	r3, [r3, #1]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	4a31      	ldr	r2, [pc, #196]	@ (8001158 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001094:	7812      	ldrb	r2, [r2, #0]
 8001096:	4313      	orrs	r3, r2
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010a0:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8001140 <HMC5883L_Get_Z_End_IT+0xb8>
 80010a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010ac:	4b2b      	ldr	r3, [pc, #172]	@ (800115c <HMC5883L_Get_Z_End_IT+0xd4>)
 80010ae:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (((int16_t)HMC5883L_Data_IT[3]<<8) | HMC5883L_Data_IT[2]) * 2.56;// 2.56 - scale
 80010b2:	4b29      	ldr	r3, [pc, #164]	@ (8001158 <HMC5883L_Get_Z_End_IT+0xd0>)
 80010b4:	78db      	ldrb	r3, [r3, #3]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	4a27      	ldr	r2, [pc, #156]	@ (8001158 <HMC5883L_Get_Z_End_IT+0xd0>)
 80010ba:	7892      	ldrb	r2, [r2, #2]
 80010bc:	4313      	orrs	r3, r2
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010c6:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8001140 <HMC5883L_Get_Z_End_IT+0xb8>
 80010ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010d2:	4b23      	ldr	r3, [pc, #140]	@ (8001160 <HMC5883L_Get_Z_End_IT+0xd8>)
 80010d4:	edc3 7a00 	vstr	s15, [r3]
		Mag_Y = (((int16_t)HMC5883L_Data_IT[5]<<8) | HMC5883L_Data_IT[4]) * 2.56;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <HMC5883L_Get_Z_End_IT+0xd0>)
 80010da:	795b      	ldrb	r3, [r3, #5]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	4a1e      	ldr	r2, [pc, #120]	@ (8001158 <HMC5883L_Get_Z_End_IT+0xd0>)
 80010e0:	7912      	ldrb	r2, [r2, #4]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010ec:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8001140 <HMC5883L_Get_Z_End_IT+0xb8>
 80010f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <HMC5883L_Get_Z_End_IT+0xdc>)
 80010fa:	edc3 7a00 	vstr	s15, [r3]
	heading = (atan2(Mag_X, Mag_Y))*180/M_PI;
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <HMC5883L_Get_Z_End_IT+0xd4>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <HMC5883L_Get_Z_End_IT+0xdc>)
 800110a:	edd3 6a00 	vldr	s13, [r3]
 800110e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001112:	eeb0 1b46 	vmov.f64	d1, d6
 8001116:	eeb0 0b47 	vmov.f64	d0, d7
 800111a:	f01c fafb 	bl	801d714 <atan2>
 800111e:	eeb0 7b40 	vmov.f64	d7, d0
 8001122:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8001148 <HMC5883L_Get_Z_End_IT+0xc0>
 8001126:	ee27 6b06 	vmul.f64	d6, d7, d6
 800112a:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8001150 <HMC5883L_Get_Z_End_IT+0xc8>
 800112e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001132:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <HMC5883L_Get_Z_End_IT+0xe0>)
 8001138:	edc3 7a00 	vstr	s15, [r3]
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	47ae147b 	.word	0x47ae147b
 8001144:	40047ae1 	.word	0x40047ae1
 8001148:	00000000 	.word	0x00000000
 800114c:	40668000 	.word	0x40668000
 8001150:	54442d18 	.word	0x54442d18
 8001154:	400921fb 	.word	0x400921fb
 8001158:	0000006c 	.word	0x0000006c
 800115c:	0000005c 	.word	0x0000005c
 8001160:	00000054 	.word	0x00000054
 8001164:	00000058 	.word	0x00000058
 8001168:	00000060 	.word	0x00000060

0800116c <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 800116c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	e014      	b.n	80011b0 <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 8001186:	f7ff ff43 	bl	8001010 <HMC5883L_Get_Z_Start>
 800118a:	4603      	mov	r3, r0
 800118c:	b21b      	sxth	r3, r3
 800118e:	17da      	asrs	r2, r3, #31
 8001190:	461c      	mov	r4, r3
 8001192:	4615      	mov	r5, r2
 8001194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001198:	eb12 0804 	adds.w	r8, r2, r4
 800119c:	eb43 0905 	adc.w	r9, r3, r5
 80011a0:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 80011a4:	2064      	movs	r0, #100	@ 0x64
 80011a6:	f007 fa5f 	bl	8008668 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3301      	adds	r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b09      	cmp	r3, #9
 80011b4:	dde7      	ble.n	8001186 <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 80011b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ba:	f04f 020a 	mov.w	r2, #10
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	f7ff f8a5 	bl	8000310 <__aeabi_ldivmod>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	b213      	sxth	r3, r2
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011d8 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 80011e0:	4a13      	ldr	r2, [pc, #76]	@ (8001230 <MPU6050_INIT+0x58>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 80011e6:	f000 f825 	bl	8001234 <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 80011ea:	f000 f88f 	bl	800130c <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 80011ee:	2005      	movs	r0, #5
 80011f0:	f000 f838 	bl	8001264 <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 80011f4:	2008      	movs	r0, #8
 80011f6:	f000 f851 	bl	800129c <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 80011fa:	2008      	movs	r0, #8
 80011fc:	f000 f86a 	bl	80012d4 <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 8001200:	f000 fc92 	bl	8001b28 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 8001204:	f000 f89a 	bl	800133c <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 8001208:	200a      	movs	r0, #10
 800120a:	f007 fa2d 	bl	8008668 <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 800120e:	f000 fc73 	bl	8001af8 <MPU6050_READ_ID>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b68      	cmp	r3, #104	@ 0x68
 800121a:	d002      	beq.n	8001222 <MPU6050_INIT+0x4a>
		status = 0;//error
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e001      	b.n	8001226 <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	240000a0 	.word	0x240000a0

08001234 <MPU6050_RESET>:


void MPU6050_RESET(void){
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 800123a:	2300      	movs	r3, #0
 800123c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <MPU6050_RESET+0x2c>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2301      	movs	r3, #1
 8001250:	226b      	movs	r2, #107	@ 0x6b
 8001252:	21d0      	movs	r1, #208	@ 0xd0
 8001254:	f00c fc14 	bl	800da80 <HAL_I2C_Mem_Write>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	240000a0 	.word	0x240000a0

08001264 <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af04      	add	r7, sp, #16
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MPU6050_CONFIG_DLPF+0x34>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	2301      	movs	r3, #1
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	2301      	movs	r3, #1
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	f107 030f 	add.w	r3, r7, #15
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	221a      	movs	r2, #26
 8001288:	21d0      	movs	r1, #208	@ 0xd0
 800128a:	f00c fbf9 	bl	800da80 <HAL_I2C_Mem_Write>
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	240000a0 	.word	0x240000a0

0800129c <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af04      	add	r7, sp, #16
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MPU6050_CONFIG_GYRO+0x34>)
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	f107 030f 	add.w	r3, r7, #15
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	221b      	movs	r2, #27
 80012c0:	21d0      	movs	r1, #208	@ 0xd0
 80012c2:	f00c fbdd 	bl	800da80 <HAL_I2C_Mem_Write>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	240000a0 	.word	0x240000a0

080012d4 <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af04      	add	r7, sp, #16
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MPU6050_CONFIG_ACCEL+0x34>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	f107 030f 	add.w	r3, r7, #15
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	221c      	movs	r2, #28
 80012f8:	21d0      	movs	r1, #208	@ 0xd0
 80012fa:	f00c fbc1 	bl	800da80 <HAL_I2C_Mem_Write>
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	240000a0 	.word	0x240000a0

0800130c <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 8001312:	2300      	movs	r3, #0
 8001314:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	2219      	movs	r2, #25
 800132a:	21d0      	movs	r1, #208	@ 0xd0
 800132c:	f00c fba8 	bl	800da80 <HAL_I2C_Mem_Write>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	240000a0 	.word	0x240000a0

0800133c <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 8001342:	2300      	movs	r3, #0
 8001344:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	9302      	str	r3, [sp, #8]
 800134e:	2301      	movs	r3, #1
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2301      	movs	r3, #1
 8001358:	226a      	movs	r2, #106	@ 0x6a
 800135a:	21d0      	movs	r1, #208	@ 0xd0
 800135c:	f00c fb90 	bl	800da80 <HAL_I2C_Mem_Write>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	240000a0 	.word	0x240000a0

0800136c <MPU6050_CALIBRATION>:
//}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(void){
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 1000; i++){ //5 sec
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	e071      	b.n	8001480 <MPU6050_CALIBRATION+0x114>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/MPU6050.Acc.Acc_Scale;
 800139c:	f000 fb28 	bl	80019f0 <MPU6050_GET_ACCEL_FULLVALUE_X>
 80013a0:	4603      	mov	r3, r0
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013aa:	4b59      	ldr	r3, [pc, #356]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 80013ac:	ed93 7a06 	vldr	s14, [r3, #24]
 80013b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80013b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013bc:	edc7 7a07 	vstr	s15, [r7, #28]
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/MPU6050.Acc.Acc_Scale;
 80013c0:	f000 fb36 	bl	8001a30 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 80013c4:	4603      	mov	r3, r0
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ce:	4b50      	ldr	r3, [pc, #320]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 80013d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80013d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80013dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e0:	edc7 7a06 	vstr	s15, [r7, #24]
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/MPU6050.Acc.Acc_Scale;
 80013e4:	f000 fb38 	bl	8001a58 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 80013e8:	4603      	mov	r3, r0
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013f2:	4b47      	ldr	r3, [pc, #284]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 80013f4:	ed93 7a06 	vldr	s14, [r3, #24]
 80013f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001404:	edc7 7a05 	vstr	s15, [r7, #20]

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/MPU6050.Gyr.Gyr_Scale;
 8001408:	f000 fb3a 	bl	8001a80 <MPU6050_GET_GYRO_FULLVALUE_X>
 800140c:	4603      	mov	r3, r0
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001416:	4b3e      	ldr	r3, [pc, #248]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 8001418:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800141c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001420:	ed97 7a04 	vldr	s14, [r7, #16]
 8001424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001428:	edc7 7a04 	vstr	s15, [r7, #16]
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/MPU6050.Gyr.Gyr_Scale;
 800142c:	f000 fb3c 	bl	8001aa8 <MPU6050_GET_GYRO_FULLVALUE_Y>
 8001430:	4603      	mov	r3, r0
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800143a:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 800143c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001444:	ed97 7a03 	vldr	s14, [r7, #12]
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	edc7 7a03 	vstr	s15, [r7, #12]
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/MPU6050.Gyr.Gyr_Scale;
 8001450:	f000 fb3e 	bl	8001ad0 <MPU6050_GET_GYRO_FULLVALUE_Z>
 8001454:	4603      	mov	r3, r0
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800145e:	4b2c      	ldr	r3, [pc, #176]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 8001460:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001468:	ed97 7a02 	vldr	s14, [r7, #8]
 800146c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001470:	edc7 7a02 	vstr	s15, [r7, #8]
		  HAL_Delay(1);
 8001474:	2001      	movs	r0, #1
 8001476:	f007 f8f7 	bl	8008668 <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3301      	adds	r3, #1
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001486:	db89      	blt.n	800139c <MPU6050_CALIBRATION+0x30>
	}
	MPU6050.Acc.acc_x_cal = accelx/1000;
 8001488:	ed97 7a07 	vldr	s14, [r7, #28]
 800148c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001514 <MPU6050_CALIBRATION+0x1a8>
 8001490:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001494:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 8001496:	edc3 7a07 	vstr	s15, [r3, #28]
	MPU6050.Acc.acc_y_cal = accely/1000;
 800149a:	ed97 7a06 	vldr	s14, [r7, #24]
 800149e:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001514 <MPU6050_CALIBRATION+0x1a8>
 80014a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 80014a8:	edc3 7a08 	vstr	s15, [r3, #32]
	MPU6050.Acc.acc_z_cal = accelz/1000;
 80014ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80014b0:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001514 <MPU6050_CALIBRATION+0x1a8>
 80014b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b8:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 80014ba:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MPU6050.Acc.acc_z_cal = 1 - MPU6050.Acc.acc_z_cal;
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 80014c0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80014c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014cc:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 80014ce:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MPU6050.Gyr.gyr_x_cal = gyrox/1000;
 80014d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80014d6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001514 <MPU6050_CALIBRATION+0x1a8>
 80014da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 80014e0:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	MPU6050.Gyr.gyr_y_cal = gyroy/1000;
 80014e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80014e8:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001514 <MPU6050_CALIBRATION+0x1a8>
 80014ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f0:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 80014f2:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	MPU6050.Gyr.gyr_z_cal = gyroz/1000;
 80014f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80014fa:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001514 <MPU6050_CALIBRATION+0x1a8>
 80014fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001502:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <MPU6050_CALIBRATION+0x1a4>)
 8001504:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	00000000 	.word	0x00000000
 8001514:	447a0000 	.word	0x447a0000

08001518 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(void){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
	float ang1 = sqrt((MPU6050.Acc.ax*MPU6050.Acc.ax)+(MPU6050.Acc.az*MPU6050.Acc.az));
 800151e:	4b42      	ldr	r3, [pc, #264]	@ (8001628 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	4b40      	ldr	r3, [pc, #256]	@ (8001628 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800152e:	4b3e      	ldr	r3, [pc, #248]	@ (8001628 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001530:	edd3 6a02 	vldr	s13, [r3, #8]
 8001534:	4b3c      	ldr	r3, [pc, #240]	@ (8001628 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001536:	edd3 7a02 	vldr	s15, [r3, #8]
 800153a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001542:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001546:	eeb0 0b47 	vmov.f64	d0, d7
 800154a:	f01c f8e5 	bl	801d718 <sqrt>
 800154e:	eeb0 7b40 	vmov.f64	d7, d0
 8001552:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001556:	edc7 7a01 	vstr	s15, [r7, #4]
	float ang2 = sqrt((MPU6050.Acc.ay*MPU6050.Acc.ay)+(MPU6050.Acc.az*MPU6050.Acc.az));
 800155a:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 800155c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001560:	4b31      	ldr	r3, [pc, #196]	@ (8001628 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001562:	edd3 7a01 	vldr	s15, [r3, #4]
 8001566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800156a:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 800156c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001570:	4b2d      	ldr	r3, [pc, #180]	@ (8001628 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001572:	edd3 7a02 	vldr	s15, [r3, #8]
 8001576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001582:	eeb0 0b47 	vmov.f64	d0, d7
 8001586:	f01c f8c7 	bl	801d718 <sqrt>
 800158a:	eeb0 7b40 	vmov.f64	d7, d0
 800158e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001592:	edc7 7a00 	vstr	s15, [r7]

	MPU6050.Acc.ay_ang = ((-1*(atan(MPU6050.Acc.ax/ang2)))*180)/M_PI;
 8001596:	4b24      	ldr	r3, [pc, #144]	@ (8001628 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001598:	edd3 6a00 	vldr	s13, [r3]
 800159c:	ed97 7a00 	vldr	s14, [r7]
 80015a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015a8:	eeb0 0b47 	vmov.f64	d0, d7
 80015ac:	f01c f8d4 	bl	801d758 <atan>
 80015b0:	eeb0 7b40 	vmov.f64	d7, d0
 80015b4:	eeb1 7b47 	vneg.f64	d7, d7
 80015b8:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8001618 <MPU6050_GET_ACCEL_TO_ANGLE+0x100>
 80015bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015c0:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8001620 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 80015c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015ce:	edc3 7a04 	vstr	s15, [r3, #16]
	MPU6050.Acc.ax_ang = ((atan(MPU6050.Acc.ay/ang1))*180)/M_PI;
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80015d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80015dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e4:	eeb0 0b47 	vmov.f64	d0, d7
 80015e8:	f01c f8b6 	bl	801d758 <atan>
 80015ec:	eeb0 7b40 	vmov.f64	d7, d0
 80015f0:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8001618 <MPU6050_GET_ACCEL_TO_ANGLE+0x100>
 80015f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015f8:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8001620 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 80015fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001600:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001606:	edc3 7a03 	vstr	s15, [r3, #12]
//	axan = -1*(atan(ax/ang2));
//	ayan= atan(ay/ang1);
//
//	*ay_ang = (axan*180)/M_PI;
//	*ax_ang = (ayan*180)/M_PI;
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	f3af 8000 	nop.w
 8001618:	00000000 	.word	0x00000000
 800161c:	40668000 	.word	0x40668000
 8001620:	54442d18 	.word	0x54442d18
 8001624:	400921fb 	.word	0x400921fb
 8001628:	00000000 	.word	0x00000000

0800162c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, MPU6050.I2C_Data, 14);
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	230e      	movs	r3, #14
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2301      	movs	r3, #1
 8001640:	223b      	movs	r2, #59	@ 0x3b
 8001642:	21d0      	movs	r1, #208	@ 0xd0
 8001644:	f00c fcd4 	bl	800dff0 <HAL_I2C_Mem_Read_IT>
	MPU6050.MPU6050_IRQ = 1;
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x34>)
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52


}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	240000a0 	.word	0x240000a0
 800165c:	00000044 	.word	0x00000044
 8001660:	00000000 	.word	0x00000000

08001664 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(void){
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
	MPU6050.Acc.ax = (((int16_t)(MPU6050.I2C_Data[0]<<8) | MPU6050.I2C_Data[1])/MPU6050.Acc.Acc_Scale) - MPU6050.Acc.acc_x_cal;
 8001668:	4b53      	ldr	r3, [pc, #332]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800166a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21b      	sxth	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	4b50      	ldr	r3, [pc, #320]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001676:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800167a:	4313      	orrs	r3, r2
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001684:	4b4c      	ldr	r3, [pc, #304]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001686:	edd3 7a06 	vldr	s15, [r3, #24]
 800168a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800168e:	4b4a      	ldr	r3, [pc, #296]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001690:	edd3 7a07 	vldr	s15, [r3, #28]
 8001694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001698:	4b47      	ldr	r3, [pc, #284]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800169a:	edc3 7a00 	vstr	s15, [r3]
	MPU6050.Acc.ay = (((int16_t)(MPU6050.I2C_Data[2]<<8) | MPU6050.I2C_Data[3])/MPU6050.Acc.Acc_Scale) - MPU6050.Acc.acc_y_cal;
 800169e:	4b46      	ldr	r3, [pc, #280]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016a0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b43      	ldr	r3, [pc, #268]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016ac:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80016b0:	4313      	orrs	r3, r2
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016ba:	4b3f      	ldr	r3, [pc, #252]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80016c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016c4:	4b3c      	ldr	r3, [pc, #240]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80016ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ce:	4b3a      	ldr	r3, [pc, #232]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016d0:	edc3 7a01 	vstr	s15, [r3, #4]
	MPU6050.Acc.az = (((int16_t)(MPU6050.I2C_Data[4]<<8) | MPU6050.I2C_Data[5])/MPU6050.Acc.Acc_Scale) + MPU6050.Acc.acc_z_cal;
 80016d4:	4b38      	ldr	r3, [pc, #224]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016d6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21b      	sxth	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	4b35      	ldr	r3, [pc, #212]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016e2:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80016e6:	4313      	orrs	r3, r2
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016f0:	4b31      	ldr	r3, [pc, #196]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80016f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016fa:	4b2f      	ldr	r3, [pc, #188]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016fc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001704:	4b2c      	ldr	r3, [pc, #176]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001706:	edc3 7a02 	vstr	s15, [r3, #8]

	MPU6050.Gyr.gx = (((int16_t)(MPU6050.I2C_Data[8]<<8) | MPU6050.I2C_Data[9])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_x_cal;
 800170a:	4b2b      	ldr	r3, [pc, #172]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800170c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21b      	sxth	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	4b28      	ldr	r3, [pc, #160]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001718:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800171c:	4313      	orrs	r3, r2
 800171e:	ee07 3a90 	vmov	s15, r3
 8001722:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001726:	4b24      	ldr	r3, [pc, #144]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001728:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800172c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001730:	4b21      	ldr	r3, [pc, #132]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001732:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173a:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800173c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	MPU6050.Gyr.gy = (((int16_t)(MPU6050.I2C_Data[10]<<8) | MPU6050.I2C_Data[11])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_y_cal;
 8001740:	4b1d      	ldr	r3, [pc, #116]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001742:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	b21b      	sxth	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	4b1a      	ldr	r3, [pc, #104]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800174e:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8001752:	4313      	orrs	r3, r2
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800175c:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800175e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001766:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001768:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800176c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001772:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	MPU6050.Gyr.gz = (((int16_t)(MPU6050.I2C_Data[12]<<8) | MPU6050.I2C_Data[13])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_z_cal;
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001778:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21b      	sxth	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	4b0d      	ldr	r3, [pc, #52]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001784:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001788:	4313      	orrs	r3, r2
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001794:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800179e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80017a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a6:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017a8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	00000000 	.word	0x00000000

080017bc <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float megz_ang){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	ed87 0a00 	vstr	s0, [r7]
	Complementary_getFilter(Complementary_Filter_st, MPU6050.Acc.ax_ang, MPU6050.Acc.ay_ang, megz_ang, MPU6050.Gyr.gx, MPU6050.Gyr.gy, MPU6050.Gyr.gz);
 80017c8:	4b10      	ldr	r3, [pc, #64]	@ (800180c <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 80017ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80017ce:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 80017d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80017d4:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 80017d6:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80017da:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 80017dc:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 80017e0:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 80017e2:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 80017e6:	eef0 2a65 	vmov.f32	s5, s11
 80017ea:	eeb0 2a46 	vmov.f32	s4, s12
 80017ee:	eef0 1a66 	vmov.f32	s3, s13
 80017f2:	ed97 1a00 	vldr	s2, [r7]
 80017f6:	eef0 0a47 	vmov.f32	s1, s14
 80017fa:	eeb0 0a67 	vmov.f32	s0, s15
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f9aa 	bl	8001b58 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	00000000 	.word	0x00000000

08001810 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <MPU6050_GET_ACCEL_YH+0x2c>)
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	2301      	movs	r3, #1
 800181c:	9302      	str	r3, [sp, #8]
 800181e:	2301      	movs	r3, #1
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	1dfb      	adds	r3, r7, #7
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	223d      	movs	r2, #61	@ 0x3d
 800182a:	21d0      	movs	r1, #208	@ 0xd0
 800182c:	f00c fa3c 	bl	800dca8 <HAL_I2C_Mem_Read>
	return data;
 8001830:	79fb      	ldrb	r3, [r7, #7]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	240000a0 	.word	0x240000a0

08001840 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 8001846:	4b09      	ldr	r3, [pc, #36]	@ (800186c <MPU6050_GET_ACCEL_YL+0x2c>)
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	2301      	movs	r3, #1
 800184c:	9302      	str	r3, [sp, #8]
 800184e:	2301      	movs	r3, #1
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2301      	movs	r3, #1
 8001858:	223e      	movs	r2, #62	@ 0x3e
 800185a:	21d0      	movs	r1, #208	@ 0xd0
 800185c:	f00c fa24 	bl	800dca8 <HAL_I2C_Mem_Read>
	return data;
 8001860:	79fb      	ldrb	r3, [r7, #7]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	240000a0 	.word	0x240000a0

08001870 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	2301      	movs	r3, #1
 800187c:	9302      	str	r3, [sp, #8]
 800187e:	2301      	movs	r3, #1
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2301      	movs	r3, #1
 8001888:	223f      	movs	r2, #63	@ 0x3f
 800188a:	21d0      	movs	r1, #208	@ 0xd0
 800188c:	f00c fa0c 	bl	800dca8 <HAL_I2C_Mem_Read>
	return data;
 8001890:	79fb      	ldrb	r3, [r7, #7]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	240000a0 	.word	0x240000a0

080018a0 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <MPU6050_GET_ACCEL_ZL+0x2c>)
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	2301      	movs	r3, #1
 80018ac:	9302      	str	r3, [sp, #8]
 80018ae:	2301      	movs	r3, #1
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2301      	movs	r3, #1
 80018b8:	2240      	movs	r2, #64	@ 0x40
 80018ba:	21d0      	movs	r1, #208	@ 0xd0
 80018bc:	f00c f9f4 	bl	800dca8 <HAL_I2C_Mem_Read>
	return data;
 80018c0:	79fb      	ldrb	r3, [r7, #7]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	240000a0 	.word	0x240000a0

080018d0 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <MPU6050_GET_GYRO_XH+0x2c>)
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	2301      	movs	r3, #1
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	2301      	movs	r3, #1
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	1dfb      	adds	r3, r7, #7
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2301      	movs	r3, #1
 80018e8:	2243      	movs	r2, #67	@ 0x43
 80018ea:	21d0      	movs	r1, #208	@ 0xd0
 80018ec:	f00c f9dc 	bl	800dca8 <HAL_I2C_Mem_Read>
	return data;
 80018f0:	79fb      	ldrb	r3, [r7, #7]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	240000a0 	.word	0x240000a0

08001900 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <MPU6050_GET_GYRO_XL+0x2c>)
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	2301      	movs	r3, #1
 800190c:	9302      	str	r3, [sp, #8]
 800190e:	2301      	movs	r3, #1
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2301      	movs	r3, #1
 8001918:	2244      	movs	r2, #68	@ 0x44
 800191a:	21d0      	movs	r1, #208	@ 0xd0
 800191c:	f00c f9c4 	bl	800dca8 <HAL_I2C_Mem_Read>
	return data;
 8001920:	79fb      	ldrb	r3, [r7, #7]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	240000a0 	.word	0x240000a0

08001930 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <MPU6050_GET_GYRO_YH+0x2c>)
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	2301      	movs	r3, #1
 800193c:	9302      	str	r3, [sp, #8]
 800193e:	2301      	movs	r3, #1
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2301      	movs	r3, #1
 8001948:	2245      	movs	r2, #69	@ 0x45
 800194a:	21d0      	movs	r1, #208	@ 0xd0
 800194c:	f00c f9ac 	bl	800dca8 <HAL_I2C_Mem_Read>
	return data;
 8001950:	79fb      	ldrb	r3, [r7, #7]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	240000a0 	.word	0x240000a0

08001960 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001966:	4b09      	ldr	r3, [pc, #36]	@ (800198c <MPU6050_GET_GYRO_YL+0x2c>)
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	2301      	movs	r3, #1
 800196c:	9302      	str	r3, [sp, #8]
 800196e:	2301      	movs	r3, #1
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2301      	movs	r3, #1
 8001978:	2246      	movs	r2, #70	@ 0x46
 800197a:	21d0      	movs	r1, #208	@ 0xd0
 800197c:	f00c f994 	bl	800dca8 <HAL_I2C_Mem_Read>
	return data;
 8001980:	79fb      	ldrb	r3, [r7, #7]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	240000a0 	.word	0x240000a0

08001990 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <MPU6050_GET_GYRO_ZH+0x2c>)
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	2301      	movs	r3, #1
 800199c:	9302      	str	r3, [sp, #8]
 800199e:	2301      	movs	r3, #1
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2301      	movs	r3, #1
 80019a8:	2247      	movs	r2, #71	@ 0x47
 80019aa:	21d0      	movs	r1, #208	@ 0xd0
 80019ac:	f00c f97c 	bl	800dca8 <HAL_I2C_Mem_Read>
	return data;
 80019b0:	79fb      	ldrb	r3, [r7, #7]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	240000a0 	.word	0x240000a0

080019c0 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <MPU6050_GET_GYRO_ZL+0x2c>)
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	2301      	movs	r3, #1
 80019cc:	9302      	str	r3, [sp, #8]
 80019ce:	2301      	movs	r3, #1
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	1dfb      	adds	r3, r7, #7
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2301      	movs	r3, #1
 80019d8:	2248      	movs	r2, #72	@ 0x48
 80019da:	21d0      	movs	r1, #208	@ 0xd0
 80019dc:	f00c f964 	bl	800dca8 <HAL_I2C_Mem_Read>
	return data;
 80019e0:	79fb      	ldrb	r3, [r7, #7]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	240000a0 	.word	0x240000a0

080019f0 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 80019f6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	2301      	movs	r3, #1
 80019fc:	9302      	str	r3, [sp, #8]
 80019fe:	2302      	movs	r3, #2
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	2301      	movs	r3, #1
 8001a08:	223b      	movs	r2, #59	@ 0x3b
 8001a0a:	21d0      	movs	r1, #208	@ 0xd0
 8001a0c:	f00c f94c 	bl	800dca8 <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001a10:	793b      	ldrb	r3, [r7, #4]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	797b      	ldrb	r3, [r7, #5]
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	80fb      	strh	r3, [r7, #6]
	return data;
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	240000a0 	.word	0x240000a0

08001a30 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001a36:	f7ff feeb 	bl	8001810 <MPU6050_GET_ACCEL_YH>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	b21c      	sxth	r4, r3
 8001a40:	f7ff fefe 	bl	8001840 <MPU6050_GET_ACCEL_YL>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	4323      	orrs	r3, r4
 8001a4a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}

08001a58 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001a5e:	f7ff ff07 	bl	8001870 <MPU6050_GET_ACCEL_ZH>
 8001a62:	4603      	mov	r3, r0
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b21c      	sxth	r4, r3
 8001a68:	f7ff ff1a 	bl	80018a0 <MPU6050_GET_ACCEL_ZL>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4323      	orrs	r3, r4
 8001a72:	80fb      	strh	r3, [r7, #6]
	return data;
 8001a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd90      	pop	{r4, r7, pc}

08001a80 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001a86:	f7ff ff23 	bl	80018d0 <MPU6050_GET_GYRO_XH>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	b21c      	sxth	r4, r3
 8001a90:	f7ff ff36 	bl	8001900 <MPU6050_GET_GYRO_XL>
 8001a94:	4603      	mov	r3, r0
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	4323      	orrs	r3, r4
 8001a9a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd90      	pop	{r4, r7, pc}

08001aa8 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001aae:	f7ff ff3f 	bl	8001930 <MPU6050_GET_GYRO_YH>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	b21c      	sxth	r4, r3
 8001ab8:	f7ff ff52 	bl	8001960 <MPU6050_GET_GYRO_YL>
 8001abc:	4603      	mov	r3, r0
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4323      	orrs	r3, r4
 8001ac2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001ac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd90      	pop	{r4, r7, pc}

08001ad0 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001ad6:	f7ff ff5b 	bl	8001990 <MPU6050_GET_GYRO_ZH>
 8001ada:	4603      	mov	r3, r0
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	b21c      	sxth	r4, r3
 8001ae0:	f7ff ff6e 	bl	80019c0 <MPU6050_GET_GYRO_ZL>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	4323      	orrs	r3, r4
 8001aea:	80fb      	strh	r3, [r7, #6]
	return data;
 8001aec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}

08001af8 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001afe:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <MPU6050_READ_ID+0x2c>)
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	2301      	movs	r3, #1
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	2301      	movs	r3, #1
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	1dfb      	adds	r3, r7, #7
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2275      	movs	r2, #117	@ 0x75
 8001b12:	21d0      	movs	r1, #208	@ 0xd0
 8001b14:	f00c f8c8 	bl	800dca8 <HAL_I2C_Mem_Read>
	return data;
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	b25b      	sxtb	r3, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	240000a0 	.word	0x240000a0

08001b28 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001b32:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	2301      	movs	r3, #1
 8001b38:	9302      	str	r3, [sp, #8]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2301      	movs	r3, #1
 8001b44:	2237      	movs	r2, #55	@ 0x37
 8001b46:	21d0      	movs	r1, #208	@ 0xd0
 8001b48:	f00b ff9a 	bl	800da80 <HAL_I2C_Mem_Write>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	240000a0 	.word	0x240000a0

08001b58 <Complementary_getFilter>:
	*VerVel += (VerAcc*looptime);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	@ 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	61f8      	str	r0, [r7, #28]
 8001b60:	ed87 0a06 	vstr	s0, [r7, #24]
 8001b64:	edc7 0a05 	vstr	s1, [r7, #20]
 8001b68:	ed87 1a04 	vstr	s2, [r7, #16]
 8001b6c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001b70:	ed87 2a02 	vstr	s4, [r7, #8]
 8001b74:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang)+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));//
 8001b78:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b80:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8001c40 <Complementary_getFilter+0xe8>
 8001b84:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b88:	4b31      	ldr	r3, [pc, #196]	@ (8001c50 <Complementary_getFilter+0xf8>)
 8001b8a:	ed93 7a00 	vldr	s14, [r3]
 8001b8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ba4:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001c48 <Complementary_getFilter+0xf0>
 8001ba8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001bac:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001bb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang)+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001bba:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bc2:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001c40 <Complementary_getFilter+0xe8>
 8001bc6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bca:	4b21      	ldr	r3, [pc, #132]	@ (8001c50 <Complementary_getFilter+0xf8>)
 8001bcc:	ed93 7a00 	vldr	s14, [r3]
 8001bd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001be6:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001c48 <Complementary_getFilter+0xf0>
 8001bea:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001bee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001bf2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (((gz_ang*looptime)+Complementary_Filter_st->oz));//todo add magnetomiter?
 8001bfc:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <Complementary_getFilter+0xf8>)
 8001bfe:	ed93 7a00 	vldr	s14, [r3]
 8001c02:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001c32:	bf00      	nop
 8001c34:	3724      	adds	r7, #36	@ 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	47ae147b 	.word	0x47ae147b
 8001c44:	3f947ae1 	.word	0x3f947ae1
 8001c48:	f5c28f5c 	.word	0xf5c28f5c
 8001c4c:	3fef5c28 	.word	0x3fef5c28
 8001c50:	0801e164 	.word	0x0801e164

08001c54 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f006 fd02 	bl	8008668 <HAL_Delay>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <nRF24_SendSpi+0x28>)
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	f011 ff7d 	bl	8013b84 <HAL_SPI_Transmit>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	240000a4 	.word	0x240000a4

08001c98 <nRF24_SendSpi_IT>:
static void nRF24_SendSpi_IT(uint8_t *Data, uint8_t Length)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit_IT(hspi_nrf, Data, Length);
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <nRF24_SendSpi_IT+0x24>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	78fa      	ldrb	r2, [r7, #3]
 8001caa:	b292      	uxth	r2, r2
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f012 ff02 	bl	8014ab8 <HAL_SPI_Transmit_IT>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	240000a4 	.word	0x240000a4

08001cc0 <nRF24_ReadSpi>:


static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <nRF24_ReadSpi+0x28>)
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	f012 f941 	bl	8013f60 <HAL_SPI_Receive>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	240000a4 	.word	0x240000a4

08001cec <nRF24_ReadSpi_IT>:
static void nRF24_ReadSpi_IT(uint8_t *Data, uint8_t Length)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive_IT(hspi_nrf, Data, Length);
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <nRF24_ReadSpi_IT+0x24>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	b292      	uxth	r2, r2
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f012 ff82 	bl	8014c0c <HAL_SPI_Receive_IT>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	240000a4 	.word	0x240000a4

08001d14 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001d22:	2200      	movs	r2, #0
 8001d24:	2180      	movs	r1, #128	@ 0x80
 8001d26:	480c      	ldr	r0, [pc, #48]	@ (8001d58 <nRF24_ReadRegister+0x44>)
 8001d28:	f00b fdda 	bl	800d8e0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001d2c:	1dfb      	adds	r3, r7, #7
 8001d2e:	2101      	movs	r1, #1
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff9b 	bl	8001c6c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001d36:	f107 030f 	add.w	r3, r7, #15
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ffbf 	bl	8001cc0 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001d42:	2201      	movs	r2, #1
 8001d44:	2180      	movs	r1, #128	@ 0x80
 8001d46:	4804      	ldr	r0, [pc, #16]	@ (8001d58 <nRF24_ReadRegister+0x44>)
 8001d48:	f00b fdca 	bl	800d8e0 <HAL_GPIO_WritePin>

	return result;
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	58020400 	.word	0x58020400

08001d5c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001d70:	2200      	movs	r2, #0
 8001d72:	2180      	movs	r1, #128	@ 0x80
 8001d74:	480a      	ldr	r0, [pc, #40]	@ (8001da0 <nRF24_ReadRegisters+0x44>)
 8001d76:	f00b fdb3 	bl	800d8e0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001d7a:	1dfb      	adds	r3, r7, #7
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff74 	bl	8001c6c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001d84:	79bb      	ldrb	r3, [r7, #6]
 8001d86:	4619      	mov	r1, r3
 8001d88:	6838      	ldr	r0, [r7, #0]
 8001d8a:	f7ff ff99 	bl	8001cc0 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2180      	movs	r1, #128	@ 0x80
 8001d92:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <nRF24_ReadRegisters+0x44>)
 8001d94:	f00b fda4 	bl	800d8e0 <HAL_GPIO_WritePin>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	58020400 	.word	0x58020400

08001da4 <nRF24_ReadRegisters_IT>:

static void nRF24_ReadRegisters_IT(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
 8001db0:	4613      	mov	r3, r2
 8001db2:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001db8:	2200      	movs	r2, #0
 8001dba:	2180      	movs	r1, #128	@ 0x80
 8001dbc:	480a      	ldr	r0, [pc, #40]	@ (8001de8 <nRF24_ReadRegisters_IT+0x44>)
 8001dbe:	f00b fd8f 	bl	800d8e0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff50 	bl	8001c6c <nRF24_SendSpi>
	nRF24_ReadSpi_IT(ret, len);
 8001dcc:	79bb      	ldrb	r3, [r7, #6]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6838      	ldr	r0, [r7, #0]
 8001dd2:	f7ff ff8b 	bl	8001cec <nRF24_ReadSpi_IT>

	NRF24.SPI_Rx_Inte = 1;
 8001dd6:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <nRF24_ReadRegisters_IT+0x48>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	//NRF24_CSN_HIGH;
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	58020400 	.word	0x58020400
 8001dec:	000000fc 	.word	0x000000fc

08001df0 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	460a      	mov	r2, r1
 8001dfa:	71fb      	strb	r3, [r7, #7]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e0a:	79bb      	ldrb	r3, [r7, #6]
 8001e0c:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2180      	movs	r1, #128	@ 0x80
 8001e12:	4809      	ldr	r0, [pc, #36]	@ (8001e38 <nRF24_WriteRegister+0x48>)
 8001e14:	f00b fd64 	bl	800d8e0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff24 	bl	8001c6c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001e24:	2201      	movs	r2, #1
 8001e26:	2180      	movs	r1, #128	@ 0x80
 8001e28:	4803      	ldr	r0, [pc, #12]	@ (8001e38 <nRF24_WriteRegister+0x48>)
 8001e2a:	f00b fd59 	bl	800d8e0 <HAL_GPIO_WritePin>
}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	58020400 	.word	0x58020400

08001e3c <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f043 0320 	orr.w	r3, r3, #32
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e56:	2200      	movs	r2, #0
 8001e58:	2180      	movs	r1, #128	@ 0x80
 8001e5a:	480b      	ldr	r0, [pc, #44]	@ (8001e88 <nRF24_WriteRegisters+0x4c>)
 8001e5c:	f00b fd40 	bl	800d8e0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e60:	1dfb      	adds	r3, r7, #7
 8001e62:	2101      	movs	r1, #1
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff01 	bl	8001c6c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001e6a:	79bb      	ldrb	r3, [r7, #6]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6838      	ldr	r0, [r7, #0]
 8001e70:	f7ff fefc 	bl	8001c6c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001e74:	2201      	movs	r2, #1
 8001e76:	2180      	movs	r1, #128	@ 0x80
 8001e78:	4803      	ldr	r0, [pc, #12]	@ (8001e88 <nRF24_WriteRegisters+0x4c>)
 8001e7a:	f00b fd31 	bl	800d8e0 <HAL_GPIO_WritePin>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	58020400 	.word	0x58020400

08001e8c <nRF24_WriteRegisters_IT>:

static void nRF24_WriteRegisters_IT(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f043 0320 	orr.w	r3, r3, #32
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2180      	movs	r1, #128	@ 0x80
 8001eaa:	480a      	ldr	r0, [pc, #40]	@ (8001ed4 <nRF24_WriteRegisters_IT+0x48>)
 8001eac:	f00b fd18 	bl	800d8e0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001eb0:	1dfb      	adds	r3, r7, #7
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fed9 	bl	8001c6c <nRF24_SendSpi>
	nRF24_SendSpi_IT(val, len);
 8001eba:	79bb      	ldrb	r3, [r7, #6]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6838      	ldr	r0, [r7, #0]
 8001ec0:	f7ff feea 	bl	8001c98 <nRF24_SendSpi_IT>

	NRF24.SPI_Tx_Inte = 1;
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <nRF24_WriteRegisters_IT+0x4c>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	//NRF24_CSN_HIGH;
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	58020400 	.word	0x58020400
 8001ed8:	000000fc 	.word	0x000000fc

08001edc <nRF24_RX_Mode>:



void nRF24_RX_Mode(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
	NRF24.Status = NRF24_InUse;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <nRF24_RX_Mode+0x60>)
 8001ee4:	2205      	movs	r2, #5
 8001ee6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	uint8_t config = nRF24_ReadConfig();
 8001eea:	f000 f85d 	bl	8001fa8 <nRF24_ReadConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001ef2:	4913      	ldr	r1, [pc, #76]	@ (8001f40 <nRF24_RX_Mode+0x64>)
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f000 fa06 	bl	8002306 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 f853 	bl	8001fb8 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f12:	2070      	movs	r0, #112	@ 0x70
 8001f14:	f000 f8ab 	bl	800206e <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f18:	f000 f8b8 	bl	800208c <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f1c:	f000 f8d0 	bl	80020c0 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001f20:	2201      	movs	r2, #1
 8001f22:	2140      	movs	r1, #64	@ 0x40
 8001f24:	4807      	ldr	r0, [pc, #28]	@ (8001f44 <nRF24_RX_Mode+0x68>)
 8001f26:	f00b fcdb 	bl	800d8e0 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
	NRF24.NRF24_MODE = NRF24_Switching_Modes;
 8001f2a:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <nRF24_RX_Mode+0x60>)
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	000000fc 	.word	0x000000fc
 8001f40:	240000a8 	.word	0x240000a8
 8001f44:	58020400 	.word	0x58020400

08001f48 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
	NRF24.Status = NRF24_InUse;
 8001f4e:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <nRF24_TX_Mode+0x58>)
 8001f50:	2205      	movs	r2, #5
 8001f52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	NRF24_CE_LOW;
 8001f56:	2200      	movs	r2, #0
 8001f58:	2140      	movs	r1, #64	@ 0x40
 8001f5a:	4812      	ldr	r0, [pc, #72]	@ (8001fa4 <nRF24_TX_Mode+0x5c>)
 8001f5c:	f00b fcc0 	bl	800d8e0 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001f60:	f000 f822 	bl	8001fa8 <nRF24_ReadConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f81c 	bl	8001fb8 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f80:	2070      	movs	r0, #112	@ 0x70
 8001f82:	f000 f874 	bl	800206e <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f86:	f000 f881 	bl	800208c <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f8a:	f000 f899 	bl	80020c0 <nRF24_FlushTX>
	//important wait 2ms for next interactionw with NRF24
	//nRF24_Delay(1);
	NRF24.NRF24_MODE = NRF24_Switching_Modes;
 8001f8e:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <nRF24_TX_Mode+0x58>)
 8001f90:	2203      	movs	r2, #3
 8001f92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	000000fc 	.word	0x000000fc
 8001fa4:	58020400 	.word	0x58020400

08001fa8 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7ff feb1 	bl	8001d14 <nRF24_ReadRegister>
 8001fb2:	4603      	mov	r3, r0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff ff12 	bl	8001df0 <nRF24_WriteRegister>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001fde:	2006      	movs	r0, #6
 8001fe0:	f7ff fe98 	bl	8001d14 <nRF24_ReadRegister>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	f023 0307 	bic.w	r3, r3, #7
 8001fee:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	b25a      	sxtb	r2, r3
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	4619      	mov	r1, r3
 8002004:	2006      	movs	r0, #6
 8002006:	f7ff fef3 	bl	8001df0 <nRF24_WriteRegister>
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800201c:	2006      	movs	r0, #6
 800201e:	f7ff fe79 	bl	8001d14 <nRF24_ReadRegister>
 8002022:	4603      	mov	r3, r0
 8002024:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800202c:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d104      	bne.n	800203e <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	f043 0320 	orr.w	r3, r3, #32
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	e006      	b.n	800204c <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d103      	bne.n	800204c <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	f043 0308 	orr.w	r3, r3, #8
 800204a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	4619      	mov	r1, r3
 8002050:	2006      	movs	r0, #6
 8002052:	f7ff fecd 	bl	8001df0 <nRF24_WriteRegister>
}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8002062:	2007      	movs	r0, #7
 8002064:	f7ff fe56 	bl	8001d14 <nRF24_ReadRegister>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}

0800206e <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	4619      	mov	r1, r3
 800207c:	2007      	movs	r0, #7
 800207e:	f7ff feb7 	bl	8001df0 <nRF24_WriteRegister>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8002092:	23e2      	movs	r3, #226	@ 0xe2
 8002094:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002096:	2200      	movs	r2, #0
 8002098:	2180      	movs	r1, #128	@ 0x80
 800209a:	4808      	ldr	r0, [pc, #32]	@ (80020bc <nRF24_FlushRX+0x30>)
 800209c:	f00b fc20 	bl	800d8e0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020a0:	1dfb      	adds	r3, r7, #7
 80020a2:	2101      	movs	r1, #1
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fde1 	bl	8001c6c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020aa:	2201      	movs	r2, #1
 80020ac:	2180      	movs	r1, #128	@ 0x80
 80020ae:	4803      	ldr	r0, [pc, #12]	@ (80020bc <nRF24_FlushRX+0x30>)
 80020b0:	f00b fc16 	bl	800d8e0 <HAL_GPIO_WritePin>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	58020400 	.word	0x58020400

080020c0 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80020c6:	23e1      	movs	r3, #225	@ 0xe1
 80020c8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020ca:	2200      	movs	r2, #0
 80020cc:	2180      	movs	r1, #128	@ 0x80
 80020ce:	4808      	ldr	r0, [pc, #32]	@ (80020f0 <nRF24_FlushTX+0x30>)
 80020d0:	f00b fc06 	bl	800d8e0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	2101      	movs	r1, #1
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fdc7 	bl	8001c6c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020de:	2201      	movs	r2, #1
 80020e0:	2180      	movs	r1, #128	@ 0x80
 80020e2:	4803      	ldr	r0, [pc, #12]	@ (80020f0 <nRF24_FlushTX+0x30>)
 80020e4:	f00b fbfc 	bl	800d8e0 <HAL_GPIO_WritePin>
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	58020400 	.word	0x58020400

080020f4 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80020fe:	f7ff ff53 	bl	8001fa8 <nRF24_ReadConfig>
 8002102:	4603      	mov	r3, r0
 8002104:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	f043 0308 	orr.w	r3, r3, #8
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	e003      	b.n	800211e <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	f023 0308 	bic.w	r3, r3, #8
 800211c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff49 	bl	8001fb8 <nRF24_WriteConfig>
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002138:	f7ff ff36 	bl	8001fa8 <nRF24_ReadConfig>
 800213c:	4603      	mov	r3, r0
 800213e:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d104      	bne.n	8002150 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	e003      	b.n	8002158 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	f023 0304 	bic.w	r3, r3, #4
 8002156:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff2c 	bl	8001fb8 <nRF24_WriteConfig>
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	460a      	mov	r2, r1
 8002172:	71fb      	strb	r3, [r7, #7]
 8002174:	4613      	mov	r3, r2
 8002176:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	b25a      	sxtb	r2, r3
 800217e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	b25b      	sxtb	r3, r3
 8002188:	4313      	orrs	r3, r2
 800218a:	b25b      	sxtb	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4619      	mov	r1, r3
 8002190:	2004      	movs	r0, #4
 8002192:	f7ff fe2d 	bl	8001df0 <nRF24_WriteRegister>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	2005      	movs	r0, #5
 80021b4:	f7ff fe1c 	bl	8001df0 <nRF24_WriteRegister>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	4613      	mov	r3, r2
 80021ce:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d901      	bls.n	80021da <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80021d6:	2305      	movs	r3, #5
 80021d8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	3311      	adds	r3, #17
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	79bb      	ldrb	r3, [r7, #6]
 80021e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f7ff fe00 	bl	8001df0 <nRF24_WriteRegister>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	460a      	mov	r2, r1
 8002202:	71fb      	strb	r3, [r7, #7]
 8002204:	4613      	mov	r3, r2
 8002206:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	2b05      	cmp	r3, #5
 800220c:	d901      	bls.n	8002212 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800220e:	2305      	movs	r3, #5
 8002210:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8002212:	2002      	movs	r0, #2
 8002214:	f7ff fd7e 	bl	8001d14 <nRF24_ReadRegister>
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800221c:	79bb      	ldrb	r3, [r7, #6]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d10a      	bne.n	8002238 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	2201      	movs	r2, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	b25a      	sxtb	r2, r3
 800222c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002230:	4313      	orrs	r3, r2
 8002232:	b25b      	sxtb	r3, r3
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	e00b      	b.n	8002250 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	2201      	movs	r2, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	b25b      	sxtb	r3, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	b25a      	sxtb	r2, r3
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4013      	ands	r3, r2
 800224c:	b25b      	sxtb	r3, r3
 800224e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	4619      	mov	r1, r3
 8002254:	2002      	movs	r0, #2
 8002256:	f7ff fdcb 	bl	8001df0 <nRF24_WriteRegister>
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	460a      	mov	r2, r1
 800226c:	71fb      	strb	r3, [r7, #7]
 800226e:	4613      	mov	r3, r2
 8002270:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d901      	bls.n	800227c <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002278:	2305      	movs	r3, #5
 800227a:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 800227c:	2001      	movs	r0, #1
 800227e:	f7ff fd49 	bl	8001d14 <nRF24_ReadRegister>
 8002282:	4603      	mov	r3, r0
 8002284:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002286:	79bb      	ldrb	r3, [r7, #6]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10a      	bne.n	80022a2 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	2201      	movs	r2, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	b25a      	sxtb	r2, r3
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4313      	orrs	r3, r2
 800229c:	b25b      	sxtb	r3, r3
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e00b      	b.n	80022ba <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	2201      	movs	r2, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	b25a      	sxtb	r2, r3
 80022b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b4:	4013      	ands	r3, r2
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	4619      	mov	r1, r3
 80022be:	2001      	movs	r0, #1
 80022c0:	f7ff fd96 	bl	8001df0 <nRF24_WriteRegister>
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d901      	bls.n	80022e0 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80022dc:	2305      	movs	r3, #5
 80022de:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d801      	bhi.n	80022ea <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80022e6:	2303      	movs	r3, #3
 80022e8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	3b02      	subs	r3, #2
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	2003      	movs	r0, #3
 80022fa:	f7ff fd79 	bl	8001df0 <nRF24_WriteRegister>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	6039      	str	r1, [r7, #0]
 8002310:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <nRF24_SetRXAddress+0x18>
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d11d      	bne.n	800235a <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800231e:	2300      	movs	r3, #0
 8002320:	73fb      	strb	r3, [r7, #15]
 8002322:	e00d      	b.n	8002340 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	441a      	add	r2, r3
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	f1c3 0302 	rsb	r3, r3, #2
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	3310      	adds	r3, #16
 8002334:	443b      	add	r3, r7
 8002336:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	3301      	adds	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d9ee      	bls.n	8002324 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	330a      	adds	r3, #10
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f107 010c 	add.w	r1, r7, #12
 8002350:	2203      	movs	r2, #3
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fd72 	bl	8001e3c <nRF24_WriteRegisters>
	{
 8002358:	e00a      	b.n	8002370 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	330a      	adds	r3, #10
 800235e:	b2da      	uxtb	r2, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	3302      	adds	r3, #2
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7ff fd41 	bl	8001df0 <nRF24_WriteRegister>
}
 800236e:	bf00      	nop
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	2203      	movs	r2, #3
 8002386:	4619      	mov	r1, r3
 8002388:	200a      	movs	r0, #10
 800238a:	f7ff fce7 	bl	8001d5c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800238e:	2300      	movs	r3, #0
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	e00c      	b.n	80023ae <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	f1c3 0302 	rsb	r3, r3, #2
 800239c:	3210      	adds	r2, #16
 800239e:	443a      	add	r2, r7
 80023a0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80023a4:	4a16      	ldr	r2, [pc, #88]	@ (8002400 <nRF24_SetTXAddress+0x88>)
 80023a6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	3301      	adds	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d9ef      	bls.n	8002394 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e00d      	b.n	80023d6 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	441a      	add	r2, r3
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	f1c3 0302 	rsb	r3, r3, #2
 80023c6:	7812      	ldrb	r2, [r2, #0]
 80023c8:	3310      	adds	r3, #16
 80023ca:	443b      	add	r3, r7
 80023cc:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	3301      	adds	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d9ee      	bls.n	80023ba <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	2203      	movs	r2, #3
 80023e2:	4619      	mov	r1, r3
 80023e4:	200a      	movs	r0, #10
 80023e6:	f7ff fd29 	bl	8001e3c <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	2203      	movs	r2, #3
 80023f0:	4619      	mov	r1, r3
 80023f2:	2010      	movs	r0, #16
 80023f4:	f7ff fd22 	bl	8001e3c <nRF24_WriteRegisters>

}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	240000a8 	.word	0x240000a8

08002404 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 800240a:	f7ff fe28 	bl	800205e <nRF24_ReadStatus>
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002418:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fe26 	bl	800206e <nRF24_WriteStatus>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002434:	f7ff fdb8 	bl	8001fa8 <nRF24_ReadConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d104      	bne.n	800244c <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e003      	b.n	8002454 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002452:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fdae 	bl	8001fb8 <nRF24_WriteConfig>
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800246e:	f7ff fd9b 	bl	8001fa8 <nRF24_ReadConfig>
 8002472:	4603      	mov	r3, r0
 8002474:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d104      	bne.n	8002486 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	f043 0320 	orr.w	r3, r3, #32
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	e003      	b.n	800248e <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	f023 0320 	bic.w	r3, r3, #32
 800248c:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fd91 	bl	8001fb8 <nRF24_WriteConfig>
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024a8:	f7ff fd7e 	bl	8001fa8 <nRF24_ReadConfig>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d104      	bne.n	80024c0 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	f043 0310 	orr.w	r3, r3, #16
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	e003      	b.n	80024c8 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	f023 0310 	bic.w	r3, r3, #16
 80024c6:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fd74 	bl	8001fb8 <nRF24_WriteConfig>
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80024e0:	2220      	movs	r2, #32
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	20a0      	movs	r0, #160	@ 0xa0
 80024e6:	f7ff fca9 	bl	8001e3c <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <nRF24_WriteTXPayload_IT>:

void nRF24_WriteTXPayload_IT(uint8_t * data)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	NRF24.Status = NRF24_InUse;
 80024fc:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <nRF24_WriteTXPayload_IT+0x24>)
 80024fe:	2205      	movs	r2, #5
 8002500:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	nRF24_WriteRegisters_IT(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002504:	2220      	movs	r2, #32
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	20a0      	movs	r0, #160	@ 0xa0
 800250a:	f7ff fcbf 	bl	8001e8c <nRF24_WriteRegisters_IT>
	//nRF24_WaitTX();
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	000000fc 	.word	0x000000fc

0800251c <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 8002522:	2201      	movs	r2, #1
 8002524:	2140      	movs	r1, #64	@ 0x40
 8002526:	4810      	ldr	r0, [pc, #64]	@ (8002568 <nRF24_WaitTX+0x4c>)
 8002528:	f00b f9da 	bl	800d8e0 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 800252c:	2001      	movs	r0, #1
 800252e:	f7ff fb91 	bl	8001c54 <nRF24_Delay>
	NRF24_CE_LOW;
 8002532:	2200      	movs	r2, #0
 8002534:	2140      	movs	r1, #64	@ 0x40
 8002536:	480c      	ldr	r0, [pc, #48]	@ (8002568 <nRF24_WaitTX+0x4c>)
 8002538:	f00b f9d2 	bl	800d8e0 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 800253c:	2001      	movs	r0, #1
 800253e:	f7ff fb89 	bl	8001c54 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8002542:	f7ff fd8c 	bl	800205e <nRF24_ReadStatus>
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <nRF24_WaitTX+0x42>
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0ee      	beq.n	800253c <nRF24_WaitTX+0x20>

}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	58020400 	.word	0x58020400

0800256c <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002574:	2220      	movs	r2, #32
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	2061      	movs	r0, #97	@ 0x61
 800257a:	f7ff fbef 	bl	8001d5c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 800257e:	2140      	movs	r1, #64	@ 0x40
 8002580:	2007      	movs	r0, #7
 8002582:	f7ff fc35 	bl	8001df0 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 8002586:	f7ff fd6a 	bl	800205e <nRF24_ReadStatus>
 800258a:	4603      	mov	r3, r0
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002594:	2120      	movs	r1, #32
 8002596:	2007      	movs	r0, #7
 8002598:	f7ff fc2a 	bl	8001df0 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <nRF24_ReadRXPaylaod_IT>:

void nRF24_ReadRXPaylaod_IT(uint8_t *data){
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	NRF24.Status = NRF24_InUse;
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <nRF24_ReadRXPaylaod_IT+0x24>)
 80025ae:	2205      	movs	r2, #5
 80025b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	nRF24_ReadRegisters_IT(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80025b4:	2220      	movs	r2, #32
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	2061      	movs	r0, #97	@ 0x61
 80025ba:	f7ff fbf3 	bl	8001da4 <nRF24_ReadRegisters_IT>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	000000fc 	.word	0x000000fc

080025cc <nRF24_ReadRXPaylaod_IT_End>:

void nRF24_ReadRXPaylaod_IT_End(void){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
	NRF24_CSN_HIGH;
 80025d0:	2201      	movs	r2, #1
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	480b      	ldr	r0, [pc, #44]	@ (8002604 <nRF24_ReadRXPaylaod_IT_End+0x38>)
 80025d6:	f00b f983 	bl	800d8e0 <HAL_GPIO_WritePin>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 80025da:	2140      	movs	r1, #64	@ 0x40
 80025dc:	2007      	movs	r0, #7
 80025de:	f7ff fc07 	bl	8001df0 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 80025e2:	f7ff fd3c 	bl	800205e <nRF24_ReadStatus>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <nRF24_ReadRXPaylaod_IT_End+0x2c>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 80025f0:	2120      	movs	r1, #32
 80025f2:	2007      	movs	r0, #7
 80025f4:	f7ff fbfc 	bl	8001df0 <nRF24_WriteRegister>
	}
	NRF24.Status = NRF24_Ready;
 80025f8:	4b03      	ldr	r3, [pc, #12]	@ (8002608 <nRF24_ReadRXPaylaod_IT_End+0x3c>)
 80025fa:	2204      	movs	r2, #4
 80025fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	58020400 	.word	0x58020400
 8002608:	000000fc 	.word	0x000000fc

0800260c <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8002616:	f000 f811 	bl	800263c <nRF24_ReadFifoStatus>
 800261a:	4603      	mov	r3, r0
 800261c:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	fa42 f303 	asr.w	r3, r2, r3
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8002640:	2017      	movs	r0, #23
 8002642:	f7ff fb67 	bl	8001d14 <nRF24_ReadRegister>
 8002646:	4603      	mov	r3, r0
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}

0800264c <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002654:	4a25      	ldr	r2, [pc, #148]	@ (80026ec <nRF24_Init+0xa0>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800265a:	2200      	movs	r2, #0
 800265c:	2140      	movs	r1, #64	@ 0x40
 800265e:	4824      	ldr	r0, [pc, #144]	@ (80026f0 <nRF24_Init+0xa4>)
 8002660:	f00b f93e 	bl	800d8e0 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002664:	2201      	movs	r2, #1
 8002666:	2180      	movs	r1, #128	@ 0x80
 8002668:	4821      	ldr	r0, [pc, #132]	@ (80026f0 <nRF24_Init+0xa4>)
 800266a:	f00b f939 	bl	800d8e0 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 800266e:	200a      	movs	r0, #10
 8002670:	f005 fffa 	bl	8008668 <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8002674:	2003      	movs	r0, #3
 8002676:	f7ff fcad 	bl	8001fd4 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 800267a:	2001      	movs	r0, #1
 800267c:	f7ff fcc9 	bl	8002012 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002680:	2001      	movs	r0, #1
 8002682:	f7ff fd37 	bl	80020f4 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8002686:	2000      	movs	r0, #0
 8002688:	f7ff fd51 	bl	800212e <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 800268c:	2100      	movs	r1, #0
 800268e:	2000      	movs	r0, #0
 8002690:	f7ff fd6a 	bl	8002168 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8002694:	2100      	movs	r1, #0
 8002696:	201c      	movs	r0, #28
 8002698:	f7ff fbaa 	bl	8001df0 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 800269c:	2120      	movs	r1, #32
 800269e:	2000      	movs	r0, #0
 80026a0:	f7ff fd8e 	bl	80021c0 <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 80026a4:	200f      	movs	r0, #15
 80026a6:	f7ff fd7a 	bl	800219e <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80026aa:	2101      	movs	r1, #1
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7ff fda3 	bl	80021f8 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80026b2:	2101      	movs	r1, #1
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7ff fdd4 	bl	8002262 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80026ba:	2003      	movs	r0, #3
 80026bc:	f7ff fe06 	bl	80022cc <nRF24_SetAddressWidth>

	HAL_Delay(1);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f005 ffd1 	bl	8008668 <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f7ff feaf 	bl	800242a <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7ff fec9 	bl	8002464 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7ff fee3 	bl	800249e <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 80026d8:	2001      	movs	r0, #1
 80026da:	f005 ffc5 	bl	8008668 <HAL_Delay>

	nRF24_ClearInterrupts();
 80026de:	f7ff fe91 	bl	8002404 <nRF24_ClearInterrupts>


}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	240000a4 	.word	0x240000a4
 80026f0:	58020400 	.word	0x58020400

080026f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026f8:	f3bf 8f4f 	dsb	sy
}
 80026fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <__NVIC_SystemReset+0x24>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002706:	4904      	ldr	r1, [pc, #16]	@ (8002718 <__NVIC_SystemReset+0x24>)
 8002708:	4b04      	ldr	r3, [pc, #16]	@ (800271c <__NVIC_SystemReset+0x28>)
 800270a:	4313      	orrs	r3, r2
 800270c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800270e:	f3bf 8f4f 	dsb	sy
}
 8002712:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <__NVIC_SystemReset+0x20>
 8002718:	e000ed00 	.word	0xe000ed00
 800271c:	05fa0004 	.word	0x05fa0004

08002720 <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	75fb      	strb	r3, [r7, #23]
 800272a:	2300      	movs	r3, #0
 800272c:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 800272e:	4b1f      	ldr	r3, [pc, #124]	@ (80027ac <interpretcommand+0x8c>)
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	e02e      	b.n	8002798 <interpretcommand+0x78>

		if(words[j] == ' '){
 800273a:	4a1d      	ldr	r2, [pc, #116]	@ (80027b0 <interpretcommand+0x90>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b20      	cmp	r3, #32
 8002744:	d102      	bne.n	800274c <interpretcommand+0x2c>
			vcount++;
 8002746:	7dfb      	ldrb	r3, [r7, #23]
 8002748:	3301      	adds	r3, #1
 800274a:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d108      	bne.n	8002764 <interpretcommand+0x44>
			command[j] = words[j];
 8002752:	4a17      	ldr	r2, [pc, #92]	@ (80027b0 <interpretcommand+0x90>)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	7819      	ldrb	r1, [r3, #0]
 800275a:	4a16      	ldr	r2, [pc, #88]	@ (80027b4 <interpretcommand+0x94>)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	460a      	mov	r2, r1
 8002762:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d113      	bne.n	8002792 <interpretcommand+0x72>
			value1[J1] = words[j];
 800276a:	7dbb      	ldrb	r3, [r7, #22]
 800276c:	4910      	ldr	r1, [pc, #64]	@ (80027b0 <interpretcommand+0x90>)
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	440a      	add	r2, r1
 8002772:	7812      	ldrb	r2, [r2, #0]
 8002774:	3318      	adds	r3, #24
 8002776:	443b      	add	r3, r7
 8002778:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 800277c:	7dba      	ldrb	r2, [r7, #22]
 800277e:	7dbb      	ldrb	r3, [r7, #22]
 8002780:	3218      	adds	r2, #24
 8002782:	443a      	add	r2, r7
 8002784:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002788:	4a0b      	ldr	r2, [pc, #44]	@ (80027b8 <interpretcommand+0x98>)
 800278a:	54d1      	strb	r1, [r2, r3]
			J1++;
 800278c:	7dbb      	ldrb	r3, [r7, #22]
 800278e:	3301      	adds	r3, #1
 8002790:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	3301      	adds	r3, #1
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b4f      	cmp	r3, #79	@ 0x4f
 800279c:	ddcd      	ble.n	800273a <interpretcommand+0x1a>
		}
	}
}
 800279e:	bf00      	nop
 80027a0:	bf00      	nop
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	000041ba 	.word	0x000041ba
 80027b0:	000041b0 	.word	0x000041b0
 80027b4:	000041ac 	.word	0x000041ac
 80027b8:	0000419c 	.word	0x0000419c

080027bc <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b50      	cmp	r3, #80	@ 0x50
 80027cc:	d14c      	bne.n	8002868 <executecommand+0xac>
	{
		MYDRON.PID_Pitch.Angle_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80027ce:	4bd5      	ldr	r3, [pc, #852]	@ (8002b24 <executecommand+0x368>)
 80027d0:	785b      	ldrb	r3, [r3, #1]
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027da:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002b28 <executecommand+0x36c>
 80027de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027e2:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002b2c <executecommand+0x370>
 80027e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027ea:	4bce      	ldr	r3, [pc, #824]	@ (8002b24 <executecommand+0x368>)
 80027ec:	789b      	ldrb	r3, [r3, #2]
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f6:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002b28 <executecommand+0x36c>
 80027fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80027fe:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002802:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002806:	ee37 7a27 	vadd.f32	s14, s14, s15
 800280a:	4bc6      	ldr	r3, [pc, #792]	@ (8002b24 <executecommand+0x368>)
 800280c:	78db      	ldrb	r3, [r3, #3]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002816:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002b28 <executecommand+0x36c>
 800281a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800281e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002822:	4bc0      	ldr	r3, [pc, #768]	@ (8002b24 <executecommand+0x368>)
 8002824:	791b      	ldrb	r3, [r3, #4]
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282e:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002b28 <executecommand+0x36c>
 8002832:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002836:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800283a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800283e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002842:	4bb8      	ldr	r3, [pc, #736]	@ (8002b24 <executecommand+0x368>)
 8002844:	795b      	ldrb	r3, [r3, #5]
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284e:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002b28 <executecommand+0x36c>
 8002852:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002856:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002b2c <executecommand+0x370>
 800285a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800285e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002862:	4bb3      	ldr	r3, [pc, #716]	@ (8002b30 <executecommand+0x374>)
 8002864:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
	}

	if(command[0] == 'I')
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b49      	cmp	r3, #73	@ 0x49
 800286e:	d14f      	bne.n	8002910 <executecommand+0x154>
	{
		MYDRON.PID_Pitch.Angle_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002870:	4bac      	ldr	r3, [pc, #688]	@ (8002b24 <executecommand+0x368>)
 8002872:	785b      	ldrb	r3, [r3, #1]
 8002874:	ee07 3a90 	vmov	s15, r3
 8002878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287c:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002b28 <executecommand+0x36c>
 8002880:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002884:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002b2c <executecommand+0x370>
 8002888:	ee27 7a87 	vmul.f32	s14, s15, s14
 800288c:	4ba5      	ldr	r3, [pc, #660]	@ (8002b24 <executecommand+0x368>)
 800288e:	789b      	ldrb	r3, [r3, #2]
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002898:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002b28 <executecommand+0x36c>
 800289c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028a0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80028a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ac:	4b9d      	ldr	r3, [pc, #628]	@ (8002b24 <executecommand+0x368>)
 80028ae:	78db      	ldrb	r3, [r3, #3]
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b8:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002b28 <executecommand+0x36c>
 80028bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c4:	4b97      	ldr	r3, [pc, #604]	@ (8002b24 <executecommand+0x368>)
 80028c6:	791b      	ldrb	r3, [r3, #4]
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d0:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002b28 <executecommand+0x36c>
 80028d4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028d8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80028dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e4:	4b8f      	ldr	r3, [pc, #572]	@ (8002b24 <executecommand+0x368>)
 80028e6:	795b      	ldrb	r3, [r3, #5]
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f0:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002b28 <executecommand+0x36c>
 80028f4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028f8:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002b2c <executecommand+0x370>
 80028fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002904:	4b8a      	ldr	r3, [pc, #552]	@ (8002b30 <executecommand+0x374>)
 8002906:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
		MYDRON.Pitch.Angle_Error_Sum = 0;
 800290a:	4b89      	ldr	r3, [pc, #548]	@ (8002b30 <executecommand+0x374>)
 800290c:	2200      	movs	r2, #0
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	if(command[0] == 'D')
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b44      	cmp	r3, #68	@ 0x44
 8002916:	d14c      	bne.n	80029b2 <executecommand+0x1f6>
	{
		MYDRON.PID_Pitch.Angle_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002918:	4b82      	ldr	r3, [pc, #520]	@ (8002b24 <executecommand+0x368>)
 800291a:	785b      	ldrb	r3, [r3, #1]
 800291c:	ee07 3a90 	vmov	s15, r3
 8002920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002924:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002b28 <executecommand+0x36c>
 8002928:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800292c:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8002b34 <executecommand+0x378>
 8002930:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002934:	4b7b      	ldr	r3, [pc, #492]	@ (8002b24 <executecommand+0x368>)
 8002936:	789b      	ldrb	r3, [r3, #2]
 8002938:	ee07 3a90 	vmov	s15, r3
 800293c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002940:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002b28 <executecommand+0x36c>
 8002944:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002948:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002b2c <executecommand+0x370>
 800294c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002954:	4b73      	ldr	r3, [pc, #460]	@ (8002b24 <executecommand+0x368>)
 8002956:	78db      	ldrb	r3, [r3, #3]
 8002958:	ee07 3a90 	vmov	s15, r3
 800295c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002960:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002b28 <executecommand+0x36c>
 8002964:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002968:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800296c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002970:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002974:	4b6b      	ldr	r3, [pc, #428]	@ (8002b24 <executecommand+0x368>)
 8002976:	791b      	ldrb	r3, [r3, #4]
 8002978:	ee07 3a90 	vmov	s15, r3
 800297c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002980:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002b28 <executecommand+0x36c>
 8002984:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298c:	4b65      	ldr	r3, [pc, #404]	@ (8002b24 <executecommand+0x368>)
 800298e:	795b      	ldrb	r3, [r3, #5]
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002998:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002b28 <executecommand+0x36c>
 800299c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029a0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80029a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ac:	4b60      	ldr	r3, [pc, #384]	@ (8002b30 <executecommand+0x374>)
 80029ae:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
	}
	if(command[0] == 'p')
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b70      	cmp	r3, #112	@ 0x70
 80029b8:	d14c      	bne.n	8002a54 <executecommand+0x298>
	{
		MYDRON.PID_Pitch.Angular_Rate_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002b24 <executecommand+0x368>)
 80029bc:	785b      	ldrb	r3, [r3, #1]
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c6:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002b28 <executecommand+0x36c>
 80029ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029ce:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002b2c <executecommand+0x370>
 80029d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029d6:	4b53      	ldr	r3, [pc, #332]	@ (8002b24 <executecommand+0x368>)
 80029d8:	789b      	ldrb	r3, [r3, #2]
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e2:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002b28 <executecommand+0x36c>
 80029e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029ea:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80029ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002b24 <executecommand+0x368>)
 80029f8:	78db      	ldrb	r3, [r3, #3]
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a02:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002b28 <executecommand+0x36c>
 8002a06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a0e:	4b45      	ldr	r3, [pc, #276]	@ (8002b24 <executecommand+0x368>)
 8002a10:	791b      	ldrb	r3, [r3, #4]
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a1a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002b28 <executecommand+0x36c>
 8002a1e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a22:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a26:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b24 <executecommand+0x368>)
 8002a30:	795b      	ldrb	r3, [r3, #5]
 8002a32:	ee07 3a90 	vmov	s15, r3
 8002a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002b28 <executecommand+0x36c>
 8002a3e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a42:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002b2c <executecommand+0x370>
 8002a46:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4e:	4b38      	ldr	r3, [pc, #224]	@ (8002b30 <executecommand+0x374>)
 8002a50:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
	}

	if(command[0] == 'i')
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b69      	cmp	r3, #105	@ 0x69
 8002a5a:	d14f      	bne.n	8002afc <executecommand+0x340>
	{
		MYDRON.PID_Pitch.Angular_Rate_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002a5c:	4b31      	ldr	r3, [pc, #196]	@ (8002b24 <executecommand+0x368>)
 8002a5e:	785b      	ldrb	r3, [r3, #1]
 8002a60:	ee07 3a90 	vmov	s15, r3
 8002a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a68:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002b28 <executecommand+0x36c>
 8002a6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a70:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002b2c <executecommand+0x370>
 8002a74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a78:	4b2a      	ldr	r3, [pc, #168]	@ (8002b24 <executecommand+0x368>)
 8002a7a:	789b      	ldrb	r3, [r3, #2]
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a84:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002b28 <executecommand+0x36c>
 8002a88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a8c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a98:	4b22      	ldr	r3, [pc, #136]	@ (8002b24 <executecommand+0x368>)
 8002a9a:	78db      	ldrb	r3, [r3, #3]
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa4:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002b28 <executecommand+0x36c>
 8002aa8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b24 <executecommand+0x368>)
 8002ab2:	791b      	ldrb	r3, [r3, #4]
 8002ab4:	ee07 3a90 	vmov	s15, r3
 8002ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002abc:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002b28 <executecommand+0x36c>
 8002ac0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ac4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002ac8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ad0:	4b14      	ldr	r3, [pc, #80]	@ (8002b24 <executecommand+0x368>)
 8002ad2:	795b      	ldrb	r3, [r3, #5]
 8002ad4:	ee07 3a90 	vmov	s15, r3
 8002ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002adc:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002b28 <executecommand+0x36c>
 8002ae0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ae4:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002b2c <executecommand+0x370>
 8002ae8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <executecommand+0x374>)
 8002af2:	edc3 7a36 	vstr	s15, [r3, #216]	@ 0xd8
		MYDRON.Pitch.Angular_Rate_Error_Sum = 0;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <executecommand+0x374>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	if(command[0] == 'd')
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b64      	cmp	r3, #100	@ 0x64
 8002b02:	d158      	bne.n	8002bb6 <executecommand+0x3fa>
	{
		MYDRON.PID_Pitch.Angular_Rate_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002b04:	4b07      	ldr	r3, [pc, #28]	@ (8002b24 <executecommand+0x368>)
 8002b06:	785b      	ldrb	r3, [r3, #1]
 8002b08:	ee07 3a90 	vmov	s15, r3
 8002b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b10:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002b28 <executecommand+0x36c>
 8002b14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b18:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002b34 <executecommand+0x378>
 8002b1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b20:	e00a      	b.n	8002b38 <executecommand+0x37c>
 8002b22:	bf00      	nop
 8002b24:	0000419c 	.word	0x0000419c
 8002b28:	42400000 	.word	0x42400000
 8002b2c:	42c80000 	.word	0x42c80000
 8002b30:	00000188 	.word	0x00000188
 8002b34:	447a0000 	.word	0x447a0000
 8002b38:	4bd3      	ldr	r3, [pc, #844]	@ (8002e88 <executecommand+0x6cc>)
 8002b3a:	789b      	ldrb	r3, [r3, #2]
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b44:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002e8c <executecommand+0x6d0>
 8002b48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b4c:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002e90 <executecommand+0x6d4>
 8002b50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b58:	4bcb      	ldr	r3, [pc, #812]	@ (8002e88 <executecommand+0x6cc>)
 8002b5a:	78db      	ldrb	r3, [r3, #3]
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b64:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002e8c <executecommand+0x6d0>
 8002b68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b6c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b78:	4bc3      	ldr	r3, [pc, #780]	@ (8002e88 <executecommand+0x6cc>)
 8002b7a:	791b      	ldrb	r3, [r3, #4]
 8002b7c:	ee07 3a90 	vmov	s15, r3
 8002b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b84:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002e8c <executecommand+0x6d0>
 8002b88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b90:	4bbd      	ldr	r3, [pc, #756]	@ (8002e88 <executecommand+0x6cc>)
 8002b92:	795b      	ldrb	r3, [r3, #5]
 8002b94:	ee07 3a90 	vmov	s15, r3
 8002b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b9c:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002e8c <executecommand+0x6d0>
 8002ba0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ba4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002ba8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb0:	4bb8      	ldr	r3, [pc, #736]	@ (8002e94 <executecommand+0x6d8>)
 8002bb2:	edc3 7a37 	vstr	s15, [r3, #220]	@ 0xdc
	}
	if(command[0] == 'F')
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b46      	cmp	r3, #70	@ 0x46
 8002bbc:	d150      	bne.n	8002c60 <executecommand+0x4a4>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002bbe:	4bb2      	ldr	r3, [pc, #712]	@ (8002e88 <executecommand+0x6cc>)
 8002bc0:	785b      	ldrb	r3, [r3, #1]
 8002bc2:	ee07 3a90 	vmov	s15, r3
 8002bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bca:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002e8c <executecommand+0x6d0>
 8002bce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bd2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002e98 <executecommand+0x6dc>
 8002bd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bda:	4bab      	ldr	r3, [pc, #684]	@ (8002e88 <executecommand+0x6cc>)
 8002bdc:	789b      	ldrb	r3, [r3, #2]
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be6:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002e8c <executecommand+0x6d0>
 8002bea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bee:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002e90 <executecommand+0x6d4>
 8002bf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bfa:	4ba3      	ldr	r3, [pc, #652]	@ (8002e88 <executecommand+0x6cc>)
 8002bfc:	78db      	ldrb	r3, [r3, #3]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c06:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002e8c <executecommand+0x6d0>
 8002c0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c0e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c1a:	4b9b      	ldr	r3, [pc, #620]	@ (8002e88 <executecommand+0x6cc>)
 8002c1c:	791b      	ldrb	r3, [r3, #4]
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c26:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002e8c <executecommand+0x6d0>
 8002c2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c32:	4b95      	ldr	r3, [pc, #596]	@ (8002e88 <executecommand+0x6cc>)
 8002c34:	795b      	ldrb	r3, [r3, #5]
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3e:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002e8c <executecommand+0x6d0>
 8002c42:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c46:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c4a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c56:	ee17 3a90 	vmov	r3, s15
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	4b8f      	ldr	r3, [pc, #572]	@ (8002e9c <executecommand+0x6e0>)
 8002c5e:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b66      	cmp	r3, #102	@ 0x66
 8002c66:	d150      	bne.n	8002d0a <executecommand+0x54e>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002c68:	4b87      	ldr	r3, [pc, #540]	@ (8002e88 <executecommand+0x6cc>)
 8002c6a:	785b      	ldrb	r3, [r3, #1]
 8002c6c:	ee07 3a90 	vmov	s15, r3
 8002c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c74:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002e8c <executecommand+0x6d0>
 8002c78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c7c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002e98 <executecommand+0x6dc>
 8002c80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c84:	4b80      	ldr	r3, [pc, #512]	@ (8002e88 <executecommand+0x6cc>)
 8002c86:	789b      	ldrb	r3, [r3, #2]
 8002c88:	ee07 3a90 	vmov	s15, r3
 8002c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c90:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002e8c <executecommand+0x6d0>
 8002c94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c98:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002e90 <executecommand+0x6d4>
 8002c9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca4:	4b78      	ldr	r3, [pc, #480]	@ (8002e88 <executecommand+0x6cc>)
 8002ca6:	78db      	ldrb	r3, [r3, #3]
 8002ca8:	ee07 3a90 	vmov	s15, r3
 8002cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb0:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002e8c <executecommand+0x6d0>
 8002cb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cb8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cc4:	4b70      	ldr	r3, [pc, #448]	@ (8002e88 <executecommand+0x6cc>)
 8002cc6:	791b      	ldrb	r3, [r3, #4]
 8002cc8:	ee07 3a90 	vmov	s15, r3
 8002ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002e8c <executecommand+0x6d0>
 8002cd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cdc:	4b6a      	ldr	r3, [pc, #424]	@ (8002e88 <executecommand+0x6cc>)
 8002cde:	795b      	ldrb	r3, [r3, #5]
 8002ce0:	ee07 3a90 	vmov	s15, r3
 8002ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce8:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002e8c <executecommand+0x6d0>
 8002cec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002cf0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002cf4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d00:	ee17 3a90 	vmov	r3, s15
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	4b66      	ldr	r3, [pc, #408]	@ (8002ea0 <executecommand+0x6e4>)
 8002d08:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b61      	cmp	r3, #97	@ 0x61
 8002d10:	d14c      	bne.n	8002dac <executecommand+0x5f0>
		{
			MYDRON.PID_Rool.Angle_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d12:	4b5d      	ldr	r3, [pc, #372]	@ (8002e88 <executecommand+0x6cc>)
 8002d14:	785b      	ldrb	r3, [r3, #1]
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1e:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002e8c <executecommand+0x6d0>
 8002d22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d26:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002e90 <executecommand+0x6d4>
 8002d2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d2e:	4b56      	ldr	r3, [pc, #344]	@ (8002e88 <executecommand+0x6cc>)
 8002d30:	789b      	ldrb	r3, [r3, #2]
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3a:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002e8c <executecommand+0x6d0>
 8002d3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d42:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002e88 <executecommand+0x6cc>)
 8002d50:	78db      	ldrb	r3, [r3, #3]
 8002d52:	ee07 3a90 	vmov	s15, r3
 8002d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5a:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002e8c <executecommand+0x6d0>
 8002d5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d66:	4b48      	ldr	r3, [pc, #288]	@ (8002e88 <executecommand+0x6cc>)
 8002d68:	791b      	ldrb	r3, [r3, #4]
 8002d6a:	ee07 3a90 	vmov	s15, r3
 8002d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d72:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e8c <executecommand+0x6d0>
 8002d76:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d7a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d86:	4b40      	ldr	r3, [pc, #256]	@ (8002e88 <executecommand+0x6cc>)
 8002d88:	795b      	ldrb	r3, [r3, #5]
 8002d8a:	ee07 3a90 	vmov	s15, r3
 8002d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d92:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002e8c <executecommand+0x6d0>
 8002d96:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d9a:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002e90 <executecommand+0x6d4>
 8002d9e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da6:	4b3b      	ldr	r3, [pc, #236]	@ (8002e94 <executecommand+0x6d8>)
 8002da8:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
		}

		if(command[0] == 'b')
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b62      	cmp	r3, #98	@ 0x62
 8002db2:	d14f      	bne.n	8002e54 <executecommand+0x698>
		{
			MYDRON.PID_Rool.Angle_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002db4:	4b34      	ldr	r3, [pc, #208]	@ (8002e88 <executecommand+0x6cc>)
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002e8c <executecommand+0x6d0>
 8002dc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dc8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002e90 <executecommand+0x6d4>
 8002dcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e88 <executecommand+0x6cc>)
 8002dd2:	789b      	ldrb	r3, [r3, #2]
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ddc:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002e8c <executecommand+0x6d0>
 8002de0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002de4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002de8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002df0:	4b25      	ldr	r3, [pc, #148]	@ (8002e88 <executecommand+0x6cc>)
 8002df2:	78db      	ldrb	r3, [r3, #3]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfc:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002e8c <executecommand+0x6d0>
 8002e00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e08:	4b1f      	ldr	r3, [pc, #124]	@ (8002e88 <executecommand+0x6cc>)
 8002e0a:	791b      	ldrb	r3, [r3, #4]
 8002e0c:	ee07 3a90 	vmov	s15, r3
 8002e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e14:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002e8c <executecommand+0x6d0>
 8002e18:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e1c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002e20:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e28:	4b17      	ldr	r3, [pc, #92]	@ (8002e88 <executecommand+0x6cc>)
 8002e2a:	795b      	ldrb	r3, [r3, #5]
 8002e2c:	ee07 3a90 	vmov	s15, r3
 8002e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e34:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002e8c <executecommand+0x6d0>
 8002e38:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e3c:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002e90 <executecommand+0x6d4>
 8002e40:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e48:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <executecommand+0x6d8>)
 8002e4a:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
			MYDRON.Pitch.Angle_Error_Sum = 0;
 8002e4e:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <executecommand+0x6d8>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		if(command[0] == 'c')
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b63      	cmp	r3, #99	@ 0x63
 8002e5a:	d160      	bne.n	8002f1e <executecommand+0x762>
		{
			MYDRON.PID_Rool.Angle_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <executecommand+0x6cc>)
 8002e5e:	785b      	ldrb	r3, [r3, #1]
 8002e60:	ee07 3a90 	vmov	s15, r3
 8002e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e68:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002e8c <executecommand+0x6d0>
 8002e6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e70:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002e98 <executecommand+0x6dc>
 8002e74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e78:	4b03      	ldr	r3, [pc, #12]	@ (8002e88 <executecommand+0x6cc>)
 8002e7a:	789b      	ldrb	r3, [r3, #2]
 8002e7c:	ee07 3a90 	vmov	s15, r3
 8002e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e84:	e012      	b.n	8002eac <executecommand+0x6f0>
 8002e86:	bf00      	nop
 8002e88:	0000419c 	.word	0x0000419c
 8002e8c:	42400000 	.word	0x42400000
 8002e90:	42c80000 	.word	0x42c80000
 8002e94:	00000188 	.word	0x00000188
 8002e98:	447a0000 	.word	0x447a0000
 8002e9c:	00004194 	.word	0x00004194
 8002ea0:	00004196 	.word	0x00004196
 8002ea4:	42400000 	.word	0x42400000
 8002ea8:	42c80000 	.word	0x42c80000
 8002eac:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002ea4 <executecommand+0x6e8>
 8002eb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002eb4:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002ea8 <executecommand+0x6ec>
 8002eb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec0:	4bd5      	ldr	r3, [pc, #852]	@ (8003218 <executecommand+0xa5c>)
 8002ec2:	78db      	ldrb	r3, [r3, #3]
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ecc:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 800321c <executecommand+0xa60>
 8002ed0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ed4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ed8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002edc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee0:	4bcd      	ldr	r3, [pc, #820]	@ (8003218 <executecommand+0xa5c>)
 8002ee2:	791b      	ldrb	r3, [r3, #4]
 8002ee4:	ee07 3a90 	vmov	s15, r3
 8002ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eec:	eddf 6acb 	vldr	s13, [pc, #812]	@ 800321c <executecommand+0xa60>
 8002ef0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ef8:	4bc7      	ldr	r3, [pc, #796]	@ (8003218 <executecommand+0xa5c>)
 8002efa:	795b      	ldrb	r3, [r3, #5]
 8002efc:	ee07 3a90 	vmov	s15, r3
 8002f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f04:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 800321c <executecommand+0xa60>
 8002f08:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f0c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f10:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f18:	4bc1      	ldr	r3, [pc, #772]	@ (8003220 <executecommand+0xa64>)
 8002f1a:	edc3 7a3f 	vstr	s15, [r3, #252]	@ 0xfc
		}
		if(command[0] == 'e')
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b65      	cmp	r3, #101	@ 0x65
 8002f24:	d14c      	bne.n	8002fc0 <executecommand+0x804>
		{
			MYDRON.PID_Rool.Angular_Rate_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f26:	4bbc      	ldr	r3, [pc, #752]	@ (8003218 <executecommand+0xa5c>)
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	ee07 3a90 	vmov	s15, r3
 8002f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f32:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 800321c <executecommand+0xa60>
 8002f36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f3a:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8003224 <executecommand+0xa68>
 8002f3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f42:	4bb5      	ldr	r3, [pc, #724]	@ (8003218 <executecommand+0xa5c>)
 8002f44:	789b      	ldrb	r3, [r3, #2]
 8002f46:	ee07 3a90 	vmov	s15, r3
 8002f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4e:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 800321c <executecommand+0xa60>
 8002f52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f56:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f62:	4bad      	ldr	r3, [pc, #692]	@ (8003218 <executecommand+0xa5c>)
 8002f64:	78db      	ldrb	r3, [r3, #3]
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6e:	eddf 6aab 	vldr	s13, [pc, #684]	@ 800321c <executecommand+0xa60>
 8002f72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7a:	4ba7      	ldr	r3, [pc, #668]	@ (8003218 <executecommand+0xa5c>)
 8002f7c:	791b      	ldrb	r3, [r3, #4]
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f86:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 800321c <executecommand+0xa60>
 8002f8a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f8e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f92:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f9a:	4b9f      	ldr	r3, [pc, #636]	@ (8003218 <executecommand+0xa5c>)
 8002f9c:	795b      	ldrb	r3, [r3, #5]
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa6:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 800321c <executecommand+0xa60>
 8002faa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fae:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 8003224 <executecommand+0xa68>
 8002fb2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fba:	4b99      	ldr	r3, [pc, #612]	@ (8003220 <executecommand+0xa64>)
 8002fbc:	edc3 7a42 	vstr	s15, [r3, #264]	@ 0x108
		}

		if(command[0] == 'g')
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b67      	cmp	r3, #103	@ 0x67
 8002fc6:	d14f      	bne.n	8003068 <executecommand+0x8ac>
		{
			MYDRON.PID_Rool.Angular_Rate_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002fc8:	4b93      	ldr	r3, [pc, #588]	@ (8003218 <executecommand+0xa5c>)
 8002fca:	785b      	ldrb	r3, [r3, #1]
 8002fcc:	ee07 3a90 	vmov	s15, r3
 8002fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd4:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800321c <executecommand+0xa60>
 8002fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fdc:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003224 <executecommand+0xa68>
 8002fe0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fe4:	4b8c      	ldr	r3, [pc, #560]	@ (8003218 <executecommand+0xa5c>)
 8002fe6:	789b      	ldrb	r3, [r3, #2]
 8002fe8:	ee07 3a90 	vmov	s15, r3
 8002fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff0:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 800321c <executecommand+0xa60>
 8002ff4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ff8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ffc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003004:	4b84      	ldr	r3, [pc, #528]	@ (8003218 <executecommand+0xa5c>)
 8003006:	78db      	ldrb	r3, [r3, #3]
 8003008:	ee07 3a90 	vmov	s15, r3
 800300c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003010:	eddf 6a82 	vldr	s13, [pc, #520]	@ 800321c <executecommand+0xa60>
 8003014:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003018:	ee37 7a27 	vadd.f32	s14, s14, s15
 800301c:	4b7e      	ldr	r3, [pc, #504]	@ (8003218 <executecommand+0xa5c>)
 800301e:	791b      	ldrb	r3, [r3, #4]
 8003020:	ee07 3a90 	vmov	s15, r3
 8003024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003028:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 800321c <executecommand+0xa60>
 800302c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003030:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003034:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003038:	ee37 7a27 	vadd.f32	s14, s14, s15
 800303c:	4b76      	ldr	r3, [pc, #472]	@ (8003218 <executecommand+0xa5c>)
 800303e:	795b      	ldrb	r3, [r3, #5]
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003048:	eddf 6a74 	vldr	s13, [pc, #464]	@ 800321c <executecommand+0xa60>
 800304c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003050:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 8003224 <executecommand+0xa68>
 8003054:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305c:	4b70      	ldr	r3, [pc, #448]	@ (8003220 <executecommand+0xa64>)
 800305e:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
			MYDRON.Rool.Angular_Rate_Error_Sum = 0;
 8003062:	4b6f      	ldr	r3, [pc, #444]	@ (8003220 <executecommand+0xa64>)
 8003064:	2200      	movs	r2, #0
 8003066:	659a      	str	r2, [r3, #88]	@ 0x58
		}

		if(command[0] == 'h')
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b68      	cmp	r3, #104	@ 0x68
 800306e:	d14c      	bne.n	800310a <executecommand+0x94e>
		{
			MYDRON.PID_Rool.Angular_Rate_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003070:	4b69      	ldr	r3, [pc, #420]	@ (8003218 <executecommand+0xa5c>)
 8003072:	785b      	ldrb	r3, [r3, #1]
 8003074:	ee07 3a90 	vmov	s15, r3
 8003078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800307c:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800321c <executecommand+0xa60>
 8003080:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003084:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003228 <executecommand+0xa6c>
 8003088:	ee27 7a87 	vmul.f32	s14, s15, s14
 800308c:	4b62      	ldr	r3, [pc, #392]	@ (8003218 <executecommand+0xa5c>)
 800308e:	789b      	ldrb	r3, [r3, #2]
 8003090:	ee07 3a90 	vmov	s15, r3
 8003094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003098:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800321c <executecommand+0xa60>
 800309c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030a0:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8003224 <executecommand+0xa68>
 80030a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003218 <executecommand+0xa5c>)
 80030ae:	78db      	ldrb	r3, [r3, #3]
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b8:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800321c <executecommand+0xa60>
 80030bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030c0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030cc:	4b52      	ldr	r3, [pc, #328]	@ (8003218 <executecommand+0xa5c>)
 80030ce:	791b      	ldrb	r3, [r3, #4]
 80030d0:	ee07 3a90 	vmov	s15, r3
 80030d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d8:	eddf 6a50 	vldr	s13, [pc, #320]	@ 800321c <executecommand+0xa60>
 80030dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003218 <executecommand+0xa5c>)
 80030e6:	795b      	ldrb	r3, [r3, #5]
 80030e8:	ee07 3a90 	vmov	s15, r3
 80030ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f0:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 800321c <executecommand+0xa60>
 80030f4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030f8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80030fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003104:	4b46      	ldr	r3, [pc, #280]	@ (8003220 <executecommand+0xa64>)
 8003106:	edc3 7a44 	vstr	s15, [r3, #272]	@ 0x110





		if(command[0] == 'j')
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b6a      	cmp	r3, #106	@ 0x6a
 8003110:	d14c      	bne.n	80031ac <executecommand+0x9f0>
			{
				MYDRON.PID_Yaw.Angle_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003112:	4b41      	ldr	r3, [pc, #260]	@ (8003218 <executecommand+0xa5c>)
 8003114:	785b      	ldrb	r3, [r3, #1]
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800321c <executecommand+0xa60>
 8003122:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003126:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003224 <executecommand+0xa68>
 800312a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800312e:	4b3a      	ldr	r3, [pc, #232]	@ (8003218 <executecommand+0xa5c>)
 8003130:	789b      	ldrb	r3, [r3, #2]
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800321c <executecommand+0xa60>
 800313e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003142:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003146:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800314a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800314e:	4b32      	ldr	r3, [pc, #200]	@ (8003218 <executecommand+0xa5c>)
 8003150:	78db      	ldrb	r3, [r3, #3]
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315a:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800321c <executecommand+0xa60>
 800315e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003166:	4b2c      	ldr	r3, [pc, #176]	@ (8003218 <executecommand+0xa5c>)
 8003168:	791b      	ldrb	r3, [r3, #4]
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003172:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800321c <executecommand+0xa60>
 8003176:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800317a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800317e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003182:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003186:	4b24      	ldr	r3, [pc, #144]	@ (8003218 <executecommand+0xa5c>)
 8003188:	795b      	ldrb	r3, [r3, #5]
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003192:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800321c <executecommand+0xa60>
 8003196:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800319a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8003224 <executecommand+0xa68>
 800319e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003220 <executecommand+0xa64>)
 80031a8:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
			}

			if(command[0] == 'k')
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b6b      	cmp	r3, #107	@ 0x6b
 80031b2:	d15e      	bne.n	8003272 <executecommand+0xab6>
			{
				MYDRON.PID_Yaw.Angle_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80031b4:	4b18      	ldr	r3, [pc, #96]	@ (8003218 <executecommand+0xa5c>)
 80031b6:	785b      	ldrb	r3, [r3, #1]
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800321c <executecommand+0xa60>
 80031c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031c8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003224 <executecommand+0xa68>
 80031cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031d0:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <executecommand+0xa5c>)
 80031d2:	789b      	ldrb	r3, [r3, #2]
 80031d4:	ee07 3a90 	vmov	s15, r3
 80031d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031dc:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800321c <executecommand+0xa60>
 80031e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031e4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80031e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f0:	4b09      	ldr	r3, [pc, #36]	@ (8003218 <executecommand+0xa5c>)
 80031f2:	78db      	ldrb	r3, [r3, #3]
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fc:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800321c <executecommand+0xa60>
 8003200:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003208:	4b03      	ldr	r3, [pc, #12]	@ (8003218 <executecommand+0xa5c>)
 800320a:	791b      	ldrb	r3, [r3, #4]
 800320c:	ee07 3a90 	vmov	s15, r3
 8003210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003214:	e00c      	b.n	8003230 <executecommand+0xa74>
 8003216:	bf00      	nop
 8003218:	0000419c 	.word	0x0000419c
 800321c:	42400000 	.word	0x42400000
 8003220:	00000188 	.word	0x00000188
 8003224:	42c80000 	.word	0x42c80000
 8003228:	447a0000 	.word	0x447a0000
 800322c:	42400000 	.word	0x42400000
 8003230:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 800322c <executecommand+0xa70>
 8003234:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003238:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800323c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003240:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003244:	4bbb      	ldr	r3, [pc, #748]	@ (8003534 <executecommand+0xd78>)
 8003246:	795b      	ldrb	r3, [r3, #5]
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003250:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8003538 <executecommand+0xd7c>
 8003254:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003258:	ed9f 6ab8 	vldr	s12, [pc, #736]	@ 800353c <executecommand+0xd80>
 800325c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003264:	4bb6      	ldr	r3, [pc, #728]	@ (8003540 <executecommand+0xd84>)
 8003266:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
				MYDRON.Yaw.Angle_Error_Sum = 0;
 800326a:	4bb5      	ldr	r3, [pc, #724]	@ (8003540 <executecommand+0xd84>)
 800326c:	2200      	movs	r2, #0
 800326e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			}

			if(command[0] == 'l')
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b6c      	cmp	r3, #108	@ 0x6c
 8003278:	d14c      	bne.n	8003314 <executecommand+0xb58>
			{
				MYDRON.PID_Yaw.Angle_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 800327a:	4bae      	ldr	r3, [pc, #696]	@ (8003534 <executecommand+0xd78>)
 800327c:	785b      	ldrb	r3, [r3, #1]
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003286:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 8003538 <executecommand+0xd7c>
 800328a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800328e:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8003544 <executecommand+0xd88>
 8003292:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003296:	4ba7      	ldr	r3, [pc, #668]	@ (8003534 <executecommand+0xd78>)
 8003298:	789b      	ldrb	r3, [r3, #2]
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a2:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 8003538 <executecommand+0xd7c>
 80032a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032aa:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 800353c <executecommand+0xd80>
 80032ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b6:	4b9f      	ldr	r3, [pc, #636]	@ (8003534 <executecommand+0xd78>)
 80032b8:	78db      	ldrb	r3, [r3, #3]
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c2:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8003538 <executecommand+0xd7c>
 80032c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032ca:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80032ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032d6:	4b97      	ldr	r3, [pc, #604]	@ (8003534 <executecommand+0xd78>)
 80032d8:	791b      	ldrb	r3, [r3, #4]
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e2:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8003538 <executecommand+0xd7c>
 80032e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ee:	4b91      	ldr	r3, [pc, #580]	@ (8003534 <executecommand+0xd78>)
 80032f0:	795b      	ldrb	r3, [r3, #5]
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fa:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 8003538 <executecommand+0xd7c>
 80032fe:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003302:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003306:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800330a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330e:	4b8c      	ldr	r3, [pc, #560]	@ (8003540 <executecommand+0xd84>)
 8003310:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130
			}
			if(command[0] == 'm')
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b6d      	cmp	r3, #109	@ 0x6d
 800331a:	d14c      	bne.n	80033b6 <executecommand+0xbfa>
			{
				MYDRON.PID_Yaw.Angular_Rate_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800331c:	4b85      	ldr	r3, [pc, #532]	@ (8003534 <executecommand+0xd78>)
 800331e:	785b      	ldrb	r3, [r3, #1]
 8003320:	ee07 3a90 	vmov	s15, r3
 8003324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003328:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003538 <executecommand+0xd7c>
 800332c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003330:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800353c <executecommand+0xd80>
 8003334:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003338:	4b7e      	ldr	r3, [pc, #504]	@ (8003534 <executecommand+0xd78>)
 800333a:	789b      	ldrb	r3, [r3, #2]
 800333c:	ee07 3a90 	vmov	s15, r3
 8003340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003344:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003538 <executecommand+0xd7c>
 8003348:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800334c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003350:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003358:	4b76      	ldr	r3, [pc, #472]	@ (8003534 <executecommand+0xd78>)
 800335a:	78db      	ldrb	r3, [r3, #3]
 800335c:	ee07 3a90 	vmov	s15, r3
 8003360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003364:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003538 <executecommand+0xd7c>
 8003368:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800336c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003370:	4b70      	ldr	r3, [pc, #448]	@ (8003534 <executecommand+0xd78>)
 8003372:	791b      	ldrb	r3, [r3, #4]
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8003538 <executecommand+0xd7c>
 8003380:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003384:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003388:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800338c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003390:	4b68      	ldr	r3, [pc, #416]	@ (8003534 <executecommand+0xd78>)
 8003392:	795b      	ldrb	r3, [r3, #5]
 8003394:	ee07 3a90 	vmov	s15, r3
 8003398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339c:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8003538 <executecommand+0xd7c>
 80033a0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033a4:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 800353c <executecommand+0xd80>
 80033a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b0:	4b63      	ldr	r3, [pc, #396]	@ (8003540 <executecommand+0xd84>)
 80033b2:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
			}

			if(command[0] == 'n')
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b6e      	cmp	r3, #110	@ 0x6e
 80033bc:	d150      	bne.n	8003460 <executecommand+0xca4>
			{
				MYDRON.PID_Yaw.Angular_Rate_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80033be:	4b5d      	ldr	r3, [pc, #372]	@ (8003534 <executecommand+0xd78>)
 80033c0:	785b      	ldrb	r3, [r3, #1]
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ca:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8003538 <executecommand+0xd7c>
 80033ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033d2:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800353c <executecommand+0xd80>
 80033d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033da:	4b56      	ldr	r3, [pc, #344]	@ (8003534 <executecommand+0xd78>)
 80033dc:	789b      	ldrb	r3, [r3, #2]
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e6:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8003538 <executecommand+0xd7c>
 80033ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033ee:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80033f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033fa:	4b4e      	ldr	r3, [pc, #312]	@ (8003534 <executecommand+0xd78>)
 80033fc:	78db      	ldrb	r3, [r3, #3]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003406:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8003538 <executecommand+0xd7c>
 800340a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800340e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003412:	4b48      	ldr	r3, [pc, #288]	@ (8003534 <executecommand+0xd78>)
 8003414:	791b      	ldrb	r3, [r3, #4]
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341e:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003538 <executecommand+0xd7c>
 8003422:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003426:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800342a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800342e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003432:	4b40      	ldr	r3, [pc, #256]	@ (8003534 <executecommand+0xd78>)
 8003434:	795b      	ldrb	r3, [r3, #5]
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343e:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8003538 <executecommand+0xd7c>
 8003442:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003446:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 800353c <executecommand+0xd80>
 800344a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800344e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003452:	4b3b      	ldr	r3, [pc, #236]	@ (8003540 <executecommand+0xd84>)
 8003454:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140
				MYDRON.Yaw.Angular_Rate_Error_Sum = 0;
 8003458:	4b39      	ldr	r3, [pc, #228]	@ (8003540 <executecommand+0xd84>)
 800345a:	2200      	movs	r2, #0
 800345c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			}

			if(command[0] == 'o')
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b6f      	cmp	r3, #111	@ 0x6f
 8003466:	d14c      	bne.n	8003502 <executecommand+0xd46>
			{
				MYDRON.PID_Yaw.Angular_Rate_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003468:	4b32      	ldr	r3, [pc, #200]	@ (8003534 <executecommand+0xd78>)
 800346a:	785b      	ldrb	r3, [r3, #1]
 800346c:	ee07 3a90 	vmov	s15, r3
 8003470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003474:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8003538 <executecommand+0xd7c>
 8003478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800347c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8003544 <executecommand+0xd88>
 8003480:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003484:	4b2b      	ldr	r3, [pc, #172]	@ (8003534 <executecommand+0xd78>)
 8003486:	789b      	ldrb	r3, [r3, #2]
 8003488:	ee07 3a90 	vmov	s15, r3
 800348c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003490:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003538 <executecommand+0xd7c>
 8003494:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003498:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800353c <executecommand+0xd80>
 800349c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034a4:	4b23      	ldr	r3, [pc, #140]	@ (8003534 <executecommand+0xd78>)
 80034a6:	78db      	ldrb	r3, [r3, #3]
 80034a8:	ee07 3a90 	vmov	s15, r3
 80034ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8003538 <executecommand+0xd7c>
 80034b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034b8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80034bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003534 <executecommand+0xd78>)
 80034c6:	791b      	ldrb	r3, [r3, #4]
 80034c8:	ee07 3a90 	vmov	s15, r3
 80034cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d0:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8003538 <executecommand+0xd7c>
 80034d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034dc:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <executecommand+0xd78>)
 80034de:	795b      	ldrb	r3, [r3, #5]
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e8:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003538 <executecommand+0xd7c>
 80034ec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034f0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80034f4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fc:	4b10      	ldr	r3, [pc, #64]	@ (8003540 <executecommand+0xd84>)
 80034fe:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144
			}

	if(command[0] == 'r'){
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b72      	cmp	r3, #114	@ 0x72
 8003508:	d101      	bne.n	800350e <executecommand+0xd52>
		NVIC_SystemReset();
 800350a:	f7ff f8f3 	bl	80026f4 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e007      	b.n	8003524 <executecommand+0xd68>
		UASRT_PID_VAL[i] = 0;
 8003514:	4a07      	ldr	r2, [pc, #28]	@ (8003534 <executecommand+0xd78>)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3301      	adds	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b0e      	cmp	r3, #14
 8003528:	ddf4      	ble.n	8003514 <executecommand+0xd58>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 800352a:	bf00      	nop
 800352c:	bf00      	nop
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	0000419c 	.word	0x0000419c
 8003538:	42400000 	.word	0x42400000
 800353c:	42c80000 	.word	0x42c80000
 8003540:	00000188 	.word	0x00000188
 8003544:	447a0000 	.word	0x447a0000

08003548 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	@ 0x28
 800354c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800354e:	1d3b      	adds	r3, r7, #4
 8003550:	2224      	movs	r2, #36	@ 0x24
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f01a f89d 	bl	801d694 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800355a:	4b2e      	ldr	r3, [pc, #184]	@ (8003614 <MX_ADC2_Init+0xcc>)
 800355c:	4a2e      	ldr	r2, [pc, #184]	@ (8003618 <MX_ADC2_Init+0xd0>)
 800355e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8003560:	4b2c      	ldr	r3, [pc, #176]	@ (8003614 <MX_ADC2_Init+0xcc>)
 8003562:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003566:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003568:	4b2a      	ldr	r3, [pc, #168]	@ (8003614 <MX_ADC2_Init+0xcc>)
 800356a:	2208      	movs	r2, #8
 800356c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800356e:	4b29      	ldr	r3, [pc, #164]	@ (8003614 <MX_ADC2_Init+0xcc>)
 8003570:	2200      	movs	r2, #0
 8003572:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003574:	4b27      	ldr	r3, [pc, #156]	@ (8003614 <MX_ADC2_Init+0xcc>)
 8003576:	2204      	movs	r2, #4
 8003578:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800357a:	4b26      	ldr	r3, [pc, #152]	@ (8003614 <MX_ADC2_Init+0xcc>)
 800357c:	2200      	movs	r2, #0
 800357e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003580:	4b24      	ldr	r3, [pc, #144]	@ (8003614 <MX_ADC2_Init+0xcc>)
 8003582:	2200      	movs	r2, #0
 8003584:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8003586:	4b23      	ldr	r3, [pc, #140]	@ (8003614 <MX_ADC2_Init+0xcc>)
 8003588:	2201      	movs	r2, #1
 800358a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800358c:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <MX_ADC2_Init+0xcc>)
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8003594:	4b1f      	ldr	r3, [pc, #124]	@ (8003614 <MX_ADC2_Init+0xcc>)
 8003596:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 800359a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800359c:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <MX_ADC2_Init+0xcc>)
 800359e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80035a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003614 <MX_ADC2_Init+0xcc>)
 80035a6:	2203      	movs	r2, #3
 80035a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80035aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <MX_ADC2_Init+0xcc>)
 80035ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80035b2:	4b18      	ldr	r3, [pc, #96]	@ (8003614 <MX_ADC2_Init+0xcc>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80035b8:	4b16      	ldr	r3, [pc, #88]	@ (8003614 <MX_ADC2_Init+0xcc>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 80035c0:	4b14      	ldr	r3, [pc, #80]	@ (8003614 <MX_ADC2_Init+0xcc>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80035c6:	4813      	ldr	r0, [pc, #76]	@ (8003614 <MX_ADC2_Init+0xcc>)
 80035c8:	f005 fb98 	bl	8008cfc <HAL_ADC_Init>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80035d2:	f004 f88d 	bl	80076f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80035d6:	4b11      	ldr	r3, [pc, #68]	@ (800361c <MX_ADC2_Init+0xd4>)
 80035d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035da:	2306      	movs	r3, #6
 80035dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80035de:	2307      	movs	r3, #7
 80035e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035e2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80035e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035e8:	2304      	movs	r3, #4
 80035ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	4619      	mov	r1, r3
 80035fa:	4806      	ldr	r0, [pc, #24]	@ (8003614 <MX_ADC2_Init+0xcc>)
 80035fc:	f006 f8c4 	bl	8009788 <HAL_ADC_ConfigChannel>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 8003606:	f004 f873 	bl	80076f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800360a:	bf00      	nop
 800360c:	3728      	adds	r7, #40	@ 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	240000ac 	.word	0x240000ac
 8003618:	40022100 	.word	0x40022100
 800361c:	19200040 	.word	0x19200040

08003620 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	@ 0x28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	60da      	str	r2, [r3, #12]
 8003636:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a34      	ldr	r2, [pc, #208]	@ (8003710 <HAL_ADC_MspInit+0xf0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d162      	bne.n	8003708 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003642:	4b34      	ldr	r3, [pc, #208]	@ (8003714 <HAL_ADC_MspInit+0xf4>)
 8003644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003648:	4a32      	ldr	r2, [pc, #200]	@ (8003714 <HAL_ADC_MspInit+0xf4>)
 800364a:	f043 0320 	orr.w	r3, r3, #32
 800364e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003652:	4b30      	ldr	r3, [pc, #192]	@ (8003714 <HAL_ADC_MspInit+0xf4>)
 8003654:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003660:	4b2c      	ldr	r3, [pc, #176]	@ (8003714 <HAL_ADC_MspInit+0xf4>)
 8003662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003666:	4a2b      	ldr	r2, [pc, #172]	@ (8003714 <HAL_ADC_MspInit+0xf4>)
 8003668:	f043 0320 	orr.w	r3, r3, #32
 800366c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003670:	4b28      	ldr	r3, [pc, #160]	@ (8003714 <HAL_ADC_MspInit+0xf4>)
 8003672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800367e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003684:	2303      	movs	r3, #3
 8003686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	2300      	movs	r3, #0
 800368a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	4619      	mov	r1, r3
 8003692:	4821      	ldr	r0, [pc, #132]	@ (8003718 <HAL_ADC_MspInit+0xf8>)
 8003694:	f009 ff64 	bl	800d560 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003698:	4b20      	ldr	r3, [pc, #128]	@ (800371c <HAL_ADC_MspInit+0xfc>)
 800369a:	4a21      	ldr	r2, [pc, #132]	@ (8003720 <HAL_ADC_MspInit+0x100>)
 800369c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800369e:	4b1f      	ldr	r3, [pc, #124]	@ (800371c <HAL_ADC_MspInit+0xfc>)
 80036a0:	220a      	movs	r2, #10
 80036a2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036a4:	4b1d      	ldr	r3, [pc, #116]	@ (800371c <HAL_ADC_MspInit+0xfc>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80036aa:	4b1c      	ldr	r3, [pc, #112]	@ (800371c <HAL_ADC_MspInit+0xfc>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80036b0:	4b1a      	ldr	r3, [pc, #104]	@ (800371c <HAL_ADC_MspInit+0xfc>)
 80036b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036b6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036b8:	4b18      	ldr	r3, [pc, #96]	@ (800371c <HAL_ADC_MspInit+0xfc>)
 80036ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036be:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036c0:	4b16      	ldr	r3, [pc, #88]	@ (800371c <HAL_ADC_MspInit+0xfc>)
 80036c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036c6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80036c8:	4b14      	ldr	r3, [pc, #80]	@ (800371c <HAL_ADC_MspInit+0xfc>)
 80036ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036ce:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80036d0:	4b12      	ldr	r3, [pc, #72]	@ (800371c <HAL_ADC_MspInit+0xfc>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036d6:	4b11      	ldr	r3, [pc, #68]	@ (800371c <HAL_ADC_MspInit+0xfc>)
 80036d8:	2200      	movs	r2, #0
 80036da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80036dc:	480f      	ldr	r0, [pc, #60]	@ (800371c <HAL_ADC_MspInit+0xfc>)
 80036de:	f007 f8ed 	bl	800a8bc <HAL_DMA_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 80036e8:	f004 f802 	bl	80076f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a0b      	ldr	r2, [pc, #44]	@ (800371c <HAL_ADC_MspInit+0xfc>)
 80036f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80036f2:	4a0a      	ldr	r2, [pc, #40]	@ (800371c <HAL_ADC_MspInit+0xfc>)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036f8:	2200      	movs	r2, #0
 80036fa:	2100      	movs	r1, #0
 80036fc:	2012      	movs	r0, #18
 80036fe:	f007 f830 	bl	800a762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003702:	2012      	movs	r0, #18
 8003704:	f007 f847 	bl	800a796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003708:	bf00      	nop
 800370a:	3728      	adds	r7, #40	@ 0x28
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40022100 	.word	0x40022100
 8003714:	58024400 	.word	0x58024400
 8003718:	58021400 	.word	0x58021400
 800371c:	2400011c 	.word	0x2400011c
 8003720:	40020410 	.word	0x40020410

08003724 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800372a:	4b19      	ldr	r3, [pc, #100]	@ (8003790 <MX_DMA_Init+0x6c>)
 800372c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003730:	4a17      	ldr	r2, [pc, #92]	@ (8003790 <MX_DMA_Init+0x6c>)
 8003732:	f043 0302 	orr.w	r3, r3, #2
 8003736:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800373a:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <MX_DMA_Init+0x6c>)
 800373c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	607b      	str	r3, [r7, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003748:	4b11      	ldr	r3, [pc, #68]	@ (8003790 <MX_DMA_Init+0x6c>)
 800374a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800374e:	4a10      	ldr	r2, [pc, #64]	@ (8003790 <MX_DMA_Init+0x6c>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003758:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <MX_DMA_Init+0x6c>)
 800375a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003766:	2200      	movs	r2, #0
 8003768:	2100      	movs	r1, #0
 800376a:	200b      	movs	r0, #11
 800376c:	f006 fff9 	bl	800a762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003770:	200b      	movs	r0, #11
 8003772:	f007 f810 	bl	800a796 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003776:	2200      	movs	r2, #0
 8003778:	2100      	movs	r1, #0
 800377a:	2038      	movs	r0, #56	@ 0x38
 800377c:	f006 fff1 	bl	800a762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003780:	2038      	movs	r0, #56	@ 0x38
 8003782:	f007 f808 	bl	800a796 <HAL_NVIC_EnableIRQ>

}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	58024400 	.word	0x58024400
 8003794:	00000000 	.word	0x00000000

08003798 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003798:	b580      	push	{r7, lr}
 800379a:	b08e      	sub	sp, #56	@ 0x38
 800379c:	af00      	add	r7, sp, #0
 800379e:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(MYDRON.Pitch.Angle_Error);
 80037b4:	4b8c      	ldr	r3, [pc, #560]	@ (80039e8 <Thrust_filter+0x250>)
 80037b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80037ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037be:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(MYDRON.Rool.Angle_Error);
 80037c2:	4b89      	ldr	r3, [pc, #548]	@ (80039e8 <Thrust_filter+0x250>)
 80037c4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80037c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037cc:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 80037d0:	ed97 7b08 	vldr	d7, [r7, #32]
 80037d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037d8:	eeb0 0a67 	vmov.f32	s0, s15
 80037dc:	f003 face 	bl	8006d7c <WartoscBezwgledna>
 80037e0:	eef0 7a40 	vmov.f32	s15, s0
 80037e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037e8:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 80037ec:	ed97 7b06 	vldr	d7, [r7, #24]
 80037f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037f4:	eeb0 0a67 	vmov.f32	s0, s15
 80037f8:	f003 fac0 	bl	8006d7c <WartoscBezwgledna>
 80037fc:	eef0 7a40 	vmov.f32	s15, s0
 8003800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003804:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 8003808:	ed97 6b08 	vldr	d6, [r7, #32]
 800380c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003810:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003814:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003818:	ee37 7b06 	vadd.f64	d7, d7, d6
 800381c:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 8003820:	eeb0 0b47 	vmov.f64	d0, d7
 8003824:	f01a f8d0 	bl	801d9c8 <pow>
 8003828:	ed87 0b04 	vstr	d0, [r7, #16]
	if(MYDRON.Thrust.Wanted > 10500){
 800382c:	4b6e      	ldr	r3, [pc, #440]	@ (80039e8 <Thrust_filter+0x250>)
 800382e:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8003832:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003836:	4293      	cmp	r3, r2
 8003838:	dd04      	ble.n	8003844 <Thrust_filter+0xac>
		MYDRON.Thrust.Wanted = 10500;
 800383a:	4b6b      	ldr	r3, [pc, #428]	@ (80039e8 <Thrust_filter+0x250>)
 800383c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003840:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	}

	thrust_error = MYDRON.Thrust.Wanted - MYDRON.Thrust.Now;
 8003844:	4b68      	ldr	r3, [pc, #416]	@ (80039e8 <Thrust_filter+0x250>)
 8003846:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 800384a:	b29a      	uxth	r2, r3
 800384c:	4b66      	ldr	r3, [pc, #408]	@ (80039e8 <Thrust_filter+0x250>)
 800384e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	b29b      	uxth	r3, r3
 8003856:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 8003858:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800385c:	2b00      	cmp	r3, #0
 800385e:	da13      	bge.n	8003888 <Thrust_filter+0xf0>
		thrust_error = WartoscBezwgledna(thrust_error);
 8003860:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003864:	ee07 3a90 	vmov	s15, r3
 8003868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800386c:	eeb0 0a67 	vmov.f32	s0, s15
 8003870:	f003 fa84 	bl	8006d7c <WartoscBezwgledna>
 8003874:	eef0 7a40 	vmov.f32	s15, s0
 8003878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800387c:	ee17 3a90 	vmov	r3, s15
 8003880:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003888:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 809d 	beq.w	80039cc <Thrust_filter+0x234>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 8003892:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800389e:	eeb0 0b47 	vmov.f64	d0, d7
 80038a2:	f019 ff39 	bl	801d718 <sqrt>
 80038a6:	eeb0 7b40 	vmov.f64	d7, d0
 80038aa:	eeb0 0b47 	vmov.f64	d0, d7
 80038ae:	f019 ff33 	bl	801d718 <sqrt>
 80038b2:	eeb0 7b40 	vmov.f64	d7, d0
 80038b6:	ed9f 6b48 	vldr	d6, [pc, #288]	@ 80039d8 <Thrust_filter+0x240>
 80038ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80038be:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 80038c2:	ed97 7b00 	vldr	d7, [r7]
 80038c6:	ed9f 6b46 	vldr	d6, [pc, #280]	@ 80039e0 <Thrust_filter+0x248>
 80038ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 80038ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80038d2:	ee26 5b07 	vmul.f64	d5, d6, d7
 80038d6:	ed97 6b04 	vldr	d6, [r7, #16]
 80038da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038de:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 80038e2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <Thrust_filter+0x15e>
			thrust_add = thrust_add*(-1);
 80038ea:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038ee:	eeb1 7b47 	vneg.f64	d7, d7
 80038f2:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 80038f6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038fa:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80038fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003906:	d513      	bpl.n	8003930 <Thrust_filter+0x198>
 8003908:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800390c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003910:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003918:	dd0a      	ble.n	8003930 <Thrust_filter+0x198>
			MYDRON.Thrust.Values = MYDRON.Thrust.Values + thrust_add;
 800391a:	4b33      	ldr	r3, [pc, #204]	@ (80039e8 <Thrust_filter+0x250>)
 800391c:	ed93 6b26 	vldr	d6, [r3, #152]	@ 0x98
 8003920:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003924:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003928:	4b2f      	ldr	r3, [pc, #188]	@ (80039e8 <Thrust_filter+0x250>)
 800392a:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
 800392e:	e012      	b.n	8003956 <Thrust_filter+0x1be>
		}
		else{
			MYDRON.Thrust.Now = MYDRON.Thrust.Now + thrust_add;
 8003930:	4b2d      	ldr	r3, [pc, #180]	@ (80039e8 <Thrust_filter+0x250>)
 8003932:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800393e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003942:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003946:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800394a:	ee17 3a90 	vmov	r3, s15
 800394e:	b29a      	uxth	r2, r3
 8003950:	4b25      	ldr	r3, [pc, #148]	@ (80039e8 <Thrust_filter+0x250>)
 8003952:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		}

		if(MYDRON.Thrust.Values >= 1 || MYDRON.Thrust.Values <= -1){
 8003956:	4b24      	ldr	r3, [pc, #144]	@ (80039e8 <Thrust_filter+0x250>)
 8003958:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 800395c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003960:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003968:	da09      	bge.n	800397e <Thrust_filter+0x1e6>
 800396a:	4b1f      	ldr	r3, [pc, #124]	@ (80039e8 <Thrust_filter+0x250>)
 800396c:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 8003970:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003974:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397c:	d81a      	bhi.n	80039b4 <Thrust_filter+0x21c>
			MYDRON.Thrust.Now = MYDRON.Thrust.Now + MYDRON.Thrust.Values;
 800397e:	4b1a      	ldr	r3, [pc, #104]	@ (80039e8 <Thrust_filter+0x250>)
 8003980:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800398c:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <Thrust_filter+0x250>)
 800398e:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 8003992:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003996:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800399a:	ee17 3a90 	vmov	r3, s15
 800399e:	b29a      	uxth	r2, r3
 80039a0:	4b11      	ldr	r3, [pc, #68]	@ (80039e8 <Thrust_filter+0x250>)
 80039a2:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			MYDRON.Thrust.Values = 0;
 80039a6:	4910      	ldr	r1, [pc, #64]	@ (80039e8 <Thrust_filter+0x250>)
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
		}
		if(MYDRON.Thrust.Now > 10000){//ograniczenie THRUST
 80039b4:	4b0c      	ldr	r3, [pc, #48]	@ (80039e8 <Thrust_filter+0x250>)
 80039b6:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80039ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80039be:	4293      	cmp	r3, r2
 80039c0:	d904      	bls.n	80039cc <Thrust_filter+0x234>
			MYDRON.Thrust.Now = 10000;
 80039c2:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <Thrust_filter+0x250>)
 80039c4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80039c8:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		}
	}
}
 80039cc:	bf00      	nop
 80039ce:	3738      	adds	r7, #56	@ 0x38
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	f3af 8000 	nop.w
 80039d8:	00000000 	.word	0x00000000
 80039dc:	409f4000 	.word	0x409f4000
 80039e0:	30553261 	.word	0x30553261
 80039e4:	3f43a92a 	.word	0x3f43a92a
 80039e8:	00000188 	.word	0x00000188

080039ec <PID_call>:
//
//	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_call(Dron Paramiters){
 80039ec:	b084      	sub	sp, #16
 80039ee:	b490      	push	{r4, r7}
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	f107 0408 	add.w	r4, r7, #8
 80039f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Paramiters.PID_Pitch.Angle_Value = (Paramiters.Pitch.Angle_Error * Paramiters.PID_Pitch.Angle_Factors[0]) + (Paramiters.Pitch.Angle_Error_Sum * Paramiters.PID_Pitch.Angle_Factors[1] * looptime) + ((Paramiters.Pitch.Angle_Error - Paramiters.Pitch.Old_Angle_Error) * Paramiters.PID_Pitch.Angle_Factors[2]);
 80039fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80039fe:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8003a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a08:	ee07 3a90 	vmov	s15, r3
 8003a0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a10:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8003a14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a18:	4b67      	ldr	r3, [pc, #412]	@ (8003bb8 <PID_call+0x1cc>)
 8003a1a:	edd3 7a00 	vldr	s15, [r3]
 8003a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a2a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003a2e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a32:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8003a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a3e:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
	Paramiters.PID_Rool.Angle_Value = (Paramiters.Rool.Angle_Error * Paramiters.PID_Rool.Angle_Factors[0]) + (Paramiters.Rool.Angle_Error_Sum * Paramiters.PID_Rool.Angle_Factors[1] * looptime) + ((Paramiters.Rool.Angle_Error - Paramiters.Rool.Old_Angle_Error) * Paramiters.PID_Rool.Angle_Factors[2]);
 8003a42:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003a46:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8003a4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a50:	ee07 3a90 	vmov	s15, r3
 8003a54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a58:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8003a5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a60:	4b55      	ldr	r3, [pc, #340]	@ (8003bb8 <PID_call+0x1cc>)
 8003a62:	edd3 7a00 	vldr	s15, [r3]
 8003a66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a6e:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8003a72:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003a76:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a7a:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8003a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a86:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
	Paramiters.PID_Yaw.Angle_Value = (Paramiters.Yaw.Angle_Error * Paramiters.PID_Yaw.Angle_Factors[0]) + (Paramiters.Yaw.Angle_Error_Sum * Paramiters.PID_Yaw.Angle_Factors[1] * looptime) + ((Paramiters.Yaw.Angle_Error - Paramiters.Yaw.Old_Angle_Error) * Paramiters.PID_Yaw.Angle_Factors[2]);
 8003a8a:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8003a8e:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8003a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003aa2:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8003aa6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003aaa:	4b43      	ldr	r3, [pc, #268]	@ (8003bb8 <PID_call+0x1cc>)
 8003aac:	edd3 7a00 	vldr	s15, [r3]
 8003ab0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ab8:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8003abc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003ac0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ac4:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad0:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128

	Paramiters.PID_Pitch.Angular_Rate_Value = (Paramiters.Pitch.Angular_Rate_Error * Paramiters.PID_Pitch.Angular_Rate_Factors[0]) + (Paramiters.Pitch.Angular_Rate_Error_Sum * Paramiters.PID_Pitch.Angular_Rate_Factors[1] * looptime) + ((Paramiters.Pitch.Angular_Rate_Error - Paramiters.Pitch.Old_Angular_Rate_Error) * Paramiters.PID_Pitch.Angular_Rate_Factors[2]);
 8003ad4:	ed97 7a08 	vldr	s14, [r7, #32]
 8003ad8:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8003adc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003aea:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8003aee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003af2:	4b31      	ldr	r3, [pc, #196]	@ (8003bb8 <PID_call+0x1cc>)
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003afc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b00:	edd7 6a08 	vldr	s13, [r7, #32]
 8003b04:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003b08:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b0c:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8003b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b18:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
	Paramiters.PID_Rool.Angular_Rate_Value = (Paramiters.Rool.Angular_Rate_Error * Paramiters.PID_Rool.Angular_Rate_Factors[0]) + (Paramiters.Rool.Angular_Rate_Error_Sum * Paramiters.PID_Rool.Angular_Rate_Factors[1] * looptime) + ((Paramiters.Rool.Angular_Rate_Error - Paramiters.Rool.Old_Angular_Rate_Error) * Paramiters.PID_Rool.Angular_Rate_Factors[2]);
 8003b1c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003b20:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8003b24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b32:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8003b36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb8 <PID_call+0x1cc>)
 8003b3c:	edd3 7a00 	vldr	s15, [r3]
 8003b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b48:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8003b4c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003b50:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b54:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8003b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b60:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
	Paramiters.PID_Yaw.Angular_Rate_Value = (Paramiters.Yaw.Angular_Rate_Error * Paramiters.PID_Yaw.Angular_Rate_Factors[0]) + (Paramiters.Yaw.Angular_Rate_Error_Sum * Paramiters.PID_Yaw.Angular_Rate_Factors[1] * looptime) + ((Paramiters.Yaw.Angular_Rate_Error - Paramiters.Yaw.Old_Angular_Rate_Error) * Paramiters.PID_Yaw.Angular_Rate_Factors[2]);
 8003b64:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003b68:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8003b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b74:	ee07 3a90 	vmov	s15, r3
 8003b78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b7c:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8003b80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b84:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb8 <PID_call+0x1cc>)
 8003b86:	edd3 7a00 	vldr	s15, [r3]
 8003b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b92:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8003b96:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003b9a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b9e:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8003ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003baa:	edc7 7a4b 	vstr	s15, [r7, #300]	@ 0x12c
}
 8003bae:	bf00      	nop
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc90      	pop	{r4, r7}
 8003bb4:	b004      	add	sp, #16
 8003bb6:	4770      	bx	lr
 8003bb8:	0801e164 	.word	0x0801e164
 8003bbc:	00000000 	.word	0x00000000

08003bc0 <Get_batteryvalue>:
//		default:
//			break;
	//}
}

void Get_batteryvalue(void){
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 8003bc4:	4b20      	ldr	r3, [pc, #128]	@ (8003c48 <Get_batteryvalue+0x88>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003bd4:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 8003c40 <Get_batteryvalue+0x80>
 8003bd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003bdc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003be0:	ee17 3a90 	vmov	r3, s15
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <Get_batteryvalue+0x8c>)
 8003be8:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
	if(MYDRON.batterysize >= 100){
 8003bec:	4b17      	ldr	r3, [pc, #92]	@ (8003c4c <Get_batteryvalue+0x8c>)
 8003bee:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8003bf2:	2b63      	cmp	r3, #99	@ 0x63
 8003bf4:	d903      	bls.n	8003bfe <Get_batteryvalue+0x3e>
		MYDRON.batterysize = 100;
 8003bf6:	4b15      	ldr	r3, [pc, #84]	@ (8003c4c <Get_batteryvalue+0x8c>)
 8003bf8:	2264      	movs	r2, #100	@ 0x64
 8003bfa:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
	}

	if(MYDRON.batterysize < 25){
 8003bfe:	4b13      	ldr	r3, [pc, #76]	@ (8003c4c <Get_batteryvalue+0x8c>)
 8003c00:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8003c04:	2b18      	cmp	r3, #24
 8003c06:	d803      	bhi.n	8003c10 <Get_batteryvalue+0x50>
		MYDRON.Status.Battery = DRON_BATTERY_RUN_OUT;
 8003c08:	4b10      	ldr	r3, [pc, #64]	@ (8003c4c <Get_batteryvalue+0x8c>)
 8003c0a:	2207      	movs	r2, #7
 8003c0c:	f883 2155 	strb.w	r2, [r3, #341]	@ 0x155
	}
	if(MYDRON.batterysize <= 10){
 8003c10:	4b0e      	ldr	r3, [pc, #56]	@ (8003c4c <Get_batteryvalue+0x8c>)
 8003c12:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8003c16:	2b0a      	cmp	r3, #10
 8003c18:	d803      	bhi.n	8003c22 <Get_batteryvalue+0x62>
		MYDRON.Status.Battery = DRON_BATTERY_CRIT_VAL;
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c4c <Get_batteryvalue+0x8c>)
 8003c1c:	2209      	movs	r2, #9
 8003c1e:	f883 2155 	strb.w	r2, [r3, #341]	@ 0x155
	}
	if(MYDRON.batterysize >= 25){
 8003c22:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <Get_batteryvalue+0x8c>)
 8003c24:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8003c28:	2b18      	cmp	r3, #24
 8003c2a:	d903      	bls.n	8003c34 <Get_batteryvalue+0x74>
		MYDRON.Status.Battery = DRON_BATTERY_OK;
 8003c2c:	4b07      	ldr	r3, [pc, #28]	@ (8003c4c <Get_batteryvalue+0x8c>)
 8003c2e:	2208      	movs	r2, #8
 8003c30:	f883 2155 	strb.w	r2, [r3, #341]	@ 0x155
	}
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	7ae147ae 	.word	0x7ae147ae
 8003c44:	401dae14 	.word	0x401dae14
 8003c48:	24000eb0 	.word	0x24000eb0
 8003c4c:	00000188 	.word	0x00000188

08003c50 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c5a:	4802      	ldr	r0, [pc, #8]	@ (8003c64 <SELECT+0x14>)
 8003c5c:	f009 fe40 	bl	800d8e0 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8003c60:	bf00      	nop
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	58020c00 	.word	0x58020c00

08003c68 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c72:	4802      	ldr	r0, [pc, #8]	@ (8003c7c <DESELECT+0x14>)
 8003c74:	f009 fe34 	bl	800d8e0 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8003c78:	bf00      	nop
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	58020c00 	.word	0x58020c00

08003c80 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003c8a:	bf00      	nop
 8003c8c:	4b07      	ldr	r3, [pc, #28]	@ (8003cac <SPI_TxByte+0x2c>)
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d1f9      	bne.n	8003c8c <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003c98:	1df9      	adds	r1, r7, #7
 8003c9a:	2364      	movs	r3, #100	@ 0x64
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4804      	ldr	r0, [pc, #16]	@ (8003cb0 <SPI_TxByte+0x30>)
 8003ca0:	f00f ff70 	bl	8013b84 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 8003ca4:	bf00      	nop
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40020010 	.word	0x40020010
 8003cb0:	24000274 	.word	0x24000274

08003cb4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003cc0:	bf00      	nop
 8003cc2:	4b08      	ldr	r3, [pc, #32]	@ (8003ce4 <SPI_TxBuffer+0x30>)
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d1f9      	bne.n	8003cc2 <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 8003cce:	887b      	ldrh	r3, [r7, #2]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4804      	ldr	r0, [pc, #16]	@ (8003ce8 <SPI_TxBuffer+0x34>)
 8003cd6:	f011 f843 	bl	8014d60 <HAL_SPI_Transmit_DMA>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40020010 	.word	0x40020010
 8003ce8:	24000274 	.word	0x24000274

08003cec <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003cf2:	23ff      	movs	r3, #255	@ 0xff
 8003cf4:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003cf6:	bf00      	nop
 8003cf8:	4b09      	ldr	r3, [pc, #36]	@ (8003d20 <SPI_RxByte+0x34>)
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d1f9      	bne.n	8003cf8 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003d04:	1dba      	adds	r2, r7, #6
 8003d06:	1df9      	adds	r1, r7, #7
 8003d08:	2364      	movs	r3, #100	@ 0x64
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	4805      	ldr	r0, [pc, #20]	@ (8003d24 <SPI_RxByte+0x38>)
 8003d10:	f010 fb98 	bl	8014444 <HAL_SPI_TransmitReceive>

	return data;
 8003d14:	79bb      	ldrb	r3, [r7, #6]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40020010 	.word	0x40020010
 8003d24:	24000274 	.word	0x24000274

08003d28 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003d30:	f7ff ffdc 	bl	8003cec <SPI_RxByte>
 8003d34:	4603      	mov	r3, r0
 8003d36:	461a      	mov	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	701a      	strb	r2, [r3, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d74 <SD_ReadyWait+0x30>)
 8003d4c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003d50:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003d52:	f7ff ffcb 	bl	8003cec <SPI_RxByte>
 8003d56:	4603      	mov	r3, r0
 8003d58:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	2bff      	cmp	r3, #255	@ 0xff
 8003d5e:	d004      	beq.n	8003d6a <SD_ReadyWait+0x26>
 8003d60:	4b04      	ldr	r3, [pc, #16]	@ (8003d74 <SD_ReadyWait+0x30>)
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f3      	bne.n	8003d52 <SD_ReadyWait+0xe>

	return res;
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	2400037c 	.word	0x2400037c

08003d78 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8003d7e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8003d82:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8003d84:	f7ff ff70 	bl	8003c68 <DESELECT>
	for(int i = 0; i < 10; i++)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	e005      	b.n	8003d9a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8003d8e:	20ff      	movs	r0, #255	@ 0xff
 8003d90:	f7ff ff76 	bl	8003c80 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b09      	cmp	r3, #9
 8003d9e:	ddf6      	ble.n	8003d8e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8003da0:	f7ff ff56 	bl	8003c50 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8003da4:	2340      	movs	r3, #64	@ 0x40
 8003da6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8003db8:	2395      	movs	r3, #149	@ 0x95
 8003dba:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8003dbc:	463b      	mov	r3, r7
 8003dbe:	2106      	movs	r1, #6
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff77 	bl	8003cb4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8003dc6:	e002      	b.n	8003dce <SD_PowerOn+0x56>
	{
		cnt--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003dce:	f7ff ff8d 	bl	8003cec <SPI_RxByte>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d002      	beq.n	8003dde <SD_PowerOn+0x66>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f4      	bne.n	8003dc8 <SD_PowerOn+0x50>
	}

	DESELECT();
 8003dde:	f7ff ff43 	bl	8003c68 <DESELECT>
	SPI_TxByte(0XFF);
 8003de2:	20ff      	movs	r0, #255	@ 0xff
 8003de4:	f7ff ff4c 	bl	8003c80 <SPI_TxByte>

	PowerFlag = 1;
 8003de8:	4b03      	ldr	r3, [pc, #12]	@ (8003df8 <SD_PowerOn+0x80>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
}
 8003dee:	bf00      	nop
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	24000195 	.word	0x24000195

08003dfc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003e00:	4b03      	ldr	r3, [pc, #12]	@ (8003e10 <SD_PowerOff+0x14>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	701a      	strb	r2, [r3, #0]
}
 8003e06:	bf00      	nop
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	24000195 	.word	0x24000195

08003e14 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003e18:	4b03      	ldr	r3, [pc, #12]	@ (8003e28 <SD_CheckPower+0x14>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	24000195 	.word	0x24000195

08003e2c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 8003e36:	4b14      	ldr	r3, [pc, #80]	@ (8003e88 <SD_RxDataBlock+0x5c>)
 8003e38:	220a      	movs	r2, #10
 8003e3a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003e3c:	f7ff ff56 	bl	8003cec <SPI_RxByte>
 8003e40:	4603      	mov	r3, r0
 8003e42:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2bff      	cmp	r3, #255	@ 0xff
 8003e48:	d104      	bne.n	8003e54 <SD_RxDataBlock+0x28>
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e88 <SD_RxDataBlock+0x5c>)
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f3      	bne.n	8003e3c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	2bfe      	cmp	r3, #254	@ 0xfe
 8003e58:	d001      	beq.n	8003e5e <SD_RxDataBlock+0x32>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e00f      	b.n	8003e7e <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff5f 	bl	8003d28 <SPI_RxBytePtr>
	} while(len--);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	1e5a      	subs	r2, r3, #1
 8003e6e:	603a      	str	r2, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f4      	bne.n	8003e5e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8003e74:	f7ff ff3a 	bl	8003cec <SPI_RxByte>
	SPI_RxByte();
 8003e78:	f7ff ff38 	bl	8003cec <SPI_RxByte>

	return TRUE;
 8003e7c:	2301      	movs	r3, #1
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	24000378 	.word	0x24000378

08003e8c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003e9c:	f7ff ff52 	bl	8003d44 <SD_ReadyWait>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2bff      	cmp	r3, #255	@ 0xff
 8003ea4:	d001      	beq.n	8003eaa <SD_TxDataBlock+0x1e>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	e02f      	b.n	8003f0a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff fee7 	bl	8003c80 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	2bfd      	cmp	r3, #253	@ 0xfd
 8003eb6:	d020      	beq.n	8003efa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003eb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff fef9 	bl	8003cb4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8003ec2:	f7ff ff13 	bl	8003cec <SPI_RxByte>
		SPI_RxByte();
 8003ec6:	f7ff ff11 	bl	8003cec <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003eca:	e00b      	b.n	8003ee4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003ecc:	f7ff ff0e 	bl	8003cec <SPI_RxByte>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	d006      	beq.n	8003eec <SD_TxDataBlock+0x60>
			i++;
 8003ede:	7bbb      	ldrb	r3, [r7, #14]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8003ee4:	7bbb      	ldrb	r3, [r7, #14]
 8003ee6:	2b40      	cmp	r3, #64	@ 0x40
 8003ee8:	d9f0      	bls.n	8003ecc <SD_TxDataBlock+0x40>
 8003eea:	e000      	b.n	8003eee <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003eec:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003eee:	bf00      	nop
 8003ef0:	f7ff fefc 	bl	8003cec <SPI_RxByte>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0fa      	beq.n	8003ef0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	2b05      	cmp	r3, #5
 8003f02:	d101      	bne.n	8003f08 <SD_TxDataBlock+0x7c>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <SD_TxDataBlock+0x7e>

	return FALSE;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	4603      	mov	r3, r0
 8003f1a:	6039      	str	r1, [r7, #0]
 8003f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003f1e:	f7ff ff11 	bl	8003d44 <SD_ReadyWait>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2bff      	cmp	r3, #255	@ 0xff
 8003f26:	d001      	beq.n	8003f2c <SD_SendCmd+0x1a>
 8003f28:	23ff      	movs	r3, #255	@ 0xff
 8003f2a:	e042      	b.n	8003fb2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fea6 	bl	8003c80 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	0e1b      	lsrs	r3, r3, #24
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff fea0 	bl	8003c80 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	0c1b      	lsrs	r3, r3, #16
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fe9a 	bl	8003c80 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	0a1b      	lsrs	r3, r3, #8
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fe94 	bl	8003c80 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fe8f 	bl	8003c80 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	2b40      	cmp	r3, #64	@ 0x40
 8003f66:	d102      	bne.n	8003f6e <SD_SendCmd+0x5c>
 8003f68:	2395      	movs	r3, #149	@ 0x95
 8003f6a:	73fb      	strb	r3, [r7, #15]
 8003f6c:	e007      	b.n	8003f7e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8003f6e:	79fb      	ldrb	r3, [r7, #7]
 8003f70:	2b48      	cmp	r3, #72	@ 0x48
 8003f72:	d102      	bne.n	8003f7a <SD_SendCmd+0x68>
 8003f74:	2387      	movs	r3, #135	@ 0x87
 8003f76:	73fb      	strb	r3, [r7, #15]
 8003f78:	e001      	b.n	8003f7e <SD_SendCmd+0x6c>
	else crc = 1;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fe7d 	bl	8003c80 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	2b4c      	cmp	r3, #76	@ 0x4c
 8003f8a:	d101      	bne.n	8003f90 <SD_SendCmd+0x7e>
 8003f8c:	f7ff feae 	bl	8003cec <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8003f90:	230a      	movs	r3, #10
 8003f92:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8003f94:	f7ff feaa 	bl	8003cec <SPI_RxByte>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8003f9c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	da05      	bge.n	8003fb0 <SD_SendCmd+0x9e>
 8003fa4:	7bbb      	ldrb	r3, [r7, #14]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	73bb      	strb	r3, [r7, #14]
 8003faa:	7bbb      	ldrb	r3, [r7, #14]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f1      	bne.n	8003f94 <SD_SendCmd+0x82>

	return res;
 8003fb0:	7b7b      	ldrb	r3, [r7, #13]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <SD_disk_initialize+0x14>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0d6      	b.n	800417e <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003fd0:	4b6d      	ldr	r3, [pc, #436]	@ (8004188 <SD_disk_initialize+0x1cc>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <SD_disk_initialize+0x2a>
 8003fde:	4b6a      	ldr	r3, [pc, #424]	@ (8004188 <SD_disk_initialize+0x1cc>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	e0cb      	b.n	800417e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8003fe6:	f7ff fec7 	bl	8003d78 <SD_PowerOn>

	/* slave select */
	SELECT();
 8003fea:	f7ff fe31 	bl	8003c50 <SELECT>

	/* check disk type */
	type = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	2040      	movs	r0, #64	@ 0x40
 8003ff6:	f7ff ff8c 	bl	8003f12 <SD_SendCmd>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	f040 80a6 	bne.w	800414e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8004002:	4b62      	ldr	r3, [pc, #392]	@ (800418c <SD_disk_initialize+0x1d0>)
 8004004:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004008:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800400a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800400e:	2048      	movs	r0, #72	@ 0x48
 8004010:	f7ff ff7f 	bl	8003f12 <SD_SendCmd>
 8004014:	4603      	mov	r3, r0
 8004016:	2b01      	cmp	r3, #1
 8004018:	d158      	bne.n	80040cc <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]
 800401e:	e00c      	b.n	800403a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8004020:	7bfc      	ldrb	r4, [r7, #15]
 8004022:	f7ff fe63 	bl	8003cec <SPI_RxByte>
 8004026:	4603      	mov	r3, r0
 8004028:	461a      	mov	r2, r3
 800402a:	f104 0310 	add.w	r3, r4, #16
 800402e:	443b      	add	r3, r7
 8004030:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	3301      	adds	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d9ef      	bls.n	8004020 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004040:	7abb      	ldrb	r3, [r7, #10]
 8004042:	2b01      	cmp	r3, #1
 8004044:	f040 8083 	bne.w	800414e <SD_disk_initialize+0x192>
 8004048:	7afb      	ldrb	r3, [r7, #11]
 800404a:	2baa      	cmp	r3, #170	@ 0xaa
 800404c:	d17f      	bne.n	800414e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800404e:	2100      	movs	r1, #0
 8004050:	2077      	movs	r0, #119	@ 0x77
 8004052:	f7ff ff5e 	bl	8003f12 <SD_SendCmd>
 8004056:	4603      	mov	r3, r0
 8004058:	2b01      	cmp	r3, #1
 800405a:	d807      	bhi.n	800406c <SD_disk_initialize+0xb0>
 800405c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004060:	2069      	movs	r0, #105	@ 0x69
 8004062:	f7ff ff56 	bl	8003f12 <SD_SendCmd>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <SD_disk_initialize+0xbc>
				} while (Timer1);
 800406c:	4b47      	ldr	r3, [pc, #284]	@ (800418c <SD_disk_initialize+0x1d0>)
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1eb      	bne.n	800404e <SD_disk_initialize+0x92>
 8004076:	e000      	b.n	800407a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004078:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800407a:	4b44      	ldr	r3, [pc, #272]	@ (800418c <SD_disk_initialize+0x1d0>)
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d064      	beq.n	800414e <SD_disk_initialize+0x192>
 8004084:	2100      	movs	r1, #0
 8004086:	207a      	movs	r0, #122	@ 0x7a
 8004088:	f7ff ff43 	bl	8003f12 <SD_SendCmd>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d15d      	bne.n	800414e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
 8004096:	e00c      	b.n	80040b2 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8004098:	7bfc      	ldrb	r4, [r7, #15]
 800409a:	f7ff fe27 	bl	8003cec <SPI_RxByte>
 800409e:	4603      	mov	r3, r0
 80040a0:	461a      	mov	r2, r3
 80040a2:	f104 0310 	add.w	r3, r4, #16
 80040a6:	443b      	add	r3, r7
 80040a8:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	3301      	adds	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d9ef      	bls.n	8004098 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80040b8:	7a3b      	ldrb	r3, [r7, #8]
 80040ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <SD_disk_initialize+0x10a>
 80040c2:	230c      	movs	r3, #12
 80040c4:	e000      	b.n	80040c8 <SD_disk_initialize+0x10c>
 80040c6:	2304      	movs	r3, #4
 80040c8:	73bb      	strb	r3, [r7, #14]
 80040ca:	e040      	b.n	800414e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80040cc:	2100      	movs	r1, #0
 80040ce:	2077      	movs	r0, #119	@ 0x77
 80040d0:	f7ff ff1f 	bl	8003f12 <SD_SendCmd>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d808      	bhi.n	80040ec <SD_disk_initialize+0x130>
 80040da:	2100      	movs	r1, #0
 80040dc:	2069      	movs	r0, #105	@ 0x69
 80040de:	f7ff ff18 	bl	8003f12 <SD_SendCmd>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d801      	bhi.n	80040ec <SD_disk_initialize+0x130>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e000      	b.n	80040ee <SD_disk_initialize+0x132>
 80040ec:	2301      	movs	r3, #1
 80040ee:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80040f0:	7bbb      	ldrb	r3, [r7, #14]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d10e      	bne.n	8004114 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80040f6:	2100      	movs	r1, #0
 80040f8:	2077      	movs	r0, #119	@ 0x77
 80040fa:	f7ff ff0a 	bl	8003f12 <SD_SendCmd>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b01      	cmp	r3, #1
 8004102:	d80e      	bhi.n	8004122 <SD_disk_initialize+0x166>
 8004104:	2100      	movs	r1, #0
 8004106:	2069      	movs	r0, #105	@ 0x69
 8004108:	f7ff ff03 	bl	8003f12 <SD_SendCmd>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d107      	bne.n	8004122 <SD_disk_initialize+0x166>
 8004112:	e00d      	b.n	8004130 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004114:	2100      	movs	r1, #0
 8004116:	2041      	movs	r0, #65	@ 0x41
 8004118:	f7ff fefb 	bl	8003f12 <SD_SendCmd>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8004122:	4b1a      	ldr	r3, [pc, #104]	@ (800418c <SD_disk_initialize+0x1d0>)
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e1      	bne.n	80040f0 <SD_disk_initialize+0x134>
 800412c:	e000      	b.n	8004130 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800412e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004130:	4b16      	ldr	r3, [pc, #88]	@ (800418c <SD_disk_initialize+0x1d0>)
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <SD_disk_initialize+0x18e>
 800413a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800413e:	2050      	movs	r0, #80	@ 0x50
 8004140:	f7ff fee7 	bl	8003f12 <SD_SendCmd>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <SD_disk_initialize+0x192>
 800414a:	2300      	movs	r3, #0
 800414c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800414e:	4a10      	ldr	r2, [pc, #64]	@ (8004190 <SD_disk_initialize+0x1d4>)
 8004150:	7bbb      	ldrb	r3, [r7, #14]
 8004152:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8004154:	f7ff fd88 	bl	8003c68 <DESELECT>
	SPI_RxByte();
 8004158:	f7ff fdc8 	bl	8003cec <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800415c:	7bbb      	ldrb	r3, [r7, #14]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8004162:	4b09      	ldr	r3, [pc, #36]	@ (8004188 <SD_disk_initialize+0x1cc>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	b2da      	uxtb	r2, r3
 800416e:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <SD_disk_initialize+0x1cc>)
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e001      	b.n	8004178 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8004174:	f7ff fe42 	bl	8003dfc <SD_PowerOff>
	}

	return Stat;
 8004178:	4b03      	ldr	r3, [pc, #12]	@ (8004188 <SD_disk_initialize+0x1cc>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b2db      	uxtb	r3, r3
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	bd90      	pop	{r4, r7, pc}
 8004186:	bf00      	nop
 8004188:	24000000 	.word	0x24000000
 800418c:	24000378 	.word	0x24000378
 8004190:	24000194 	.word	0x24000194

08004194 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <SD_disk_status+0x14>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e002      	b.n	80041ae <SD_disk_status+0x1a>
	return Stat;
 80041a8:	4b04      	ldr	r3, [pc, #16]	@ (80041bc <SD_disk_status+0x28>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	b2db      	uxtb	r3, r3
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	24000000 	.word	0x24000000

080041c0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	4603      	mov	r3, r0
 80041ce:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d102      	bne.n	80041dc <SD_disk_read+0x1c>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <SD_disk_read+0x20>
 80041dc:	2304      	movs	r3, #4
 80041de:	e051      	b.n	8004284 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80041e0:	4b2a      	ldr	r3, [pc, #168]	@ (800428c <SD_disk_read+0xcc>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <SD_disk_read+0x32>
 80041ee:	2303      	movs	r3, #3
 80041f0:	e048      	b.n	8004284 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80041f2:	4b27      	ldr	r3, [pc, #156]	@ (8004290 <SD_disk_read+0xd0>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d102      	bne.n	8004204 <SD_disk_read+0x44>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	025b      	lsls	r3, r3, #9
 8004202:	607b      	str	r3, [r7, #4]

	SELECT();
 8004204:	f7ff fd24 	bl	8003c50 <SELECT>

	if (count == 1)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d111      	bne.n	8004232 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	2051      	movs	r0, #81	@ 0x51
 8004212:	f7ff fe7e 	bl	8003f12 <SD_SendCmd>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d129      	bne.n	8004270 <SD_disk_read+0xb0>
 800421c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004220:	68b8      	ldr	r0, [r7, #8]
 8004222:	f7ff fe03 	bl	8003e2c <SD_RxDataBlock>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d021      	beq.n	8004270 <SD_disk_read+0xb0>
 800422c:	2300      	movs	r3, #0
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	e01e      	b.n	8004270 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	2052      	movs	r0, #82	@ 0x52
 8004236:	f7ff fe6c 	bl	8003f12 <SD_SendCmd>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d117      	bne.n	8004270 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004240:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004244:	68b8      	ldr	r0, [r7, #8]
 8004246:	f7ff fdf1 	bl	8003e2c <SD_RxDataBlock>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <SD_disk_read+0xa6>
				buff += 512;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004256:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	3b01      	subs	r3, #1
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1ed      	bne.n	8004240 <SD_disk_read+0x80>
 8004264:	e000      	b.n	8004268 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8004266:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004268:	2100      	movs	r1, #0
 800426a:	204c      	movs	r0, #76	@ 0x4c
 800426c:	f7ff fe51 	bl	8003f12 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004270:	f7ff fcfa 	bl	8003c68 <DESELECT>
	SPI_RxByte();
 8004274:	f7ff fd3a 	bl	8003cec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf14      	ite	ne
 800427e:	2301      	movne	r3, #1
 8004280:	2300      	moveq	r3, #0
 8004282:	b2db      	uxtb	r3, r3
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	24000000 	.word	0x24000000
 8004290:	24000194 	.word	0x24000194

08004294 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	4603      	mov	r3, r0
 80042a2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <SD_disk_write+0x1c>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <SD_disk_write+0x20>
 80042b0:	2304      	movs	r3, #4
 80042b2:	e06b      	b.n	800438c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80042b4:	4b37      	ldr	r3, [pc, #220]	@ (8004394 <SD_disk_write+0x100>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <SD_disk_write+0x32>
 80042c2:	2303      	movs	r3, #3
 80042c4:	e062      	b.n	800438c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80042c6:	4b33      	ldr	r3, [pc, #204]	@ (8004394 <SD_disk_write+0x100>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <SD_disk_write+0x44>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e059      	b.n	800438c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80042d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004398 <SD_disk_write+0x104>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <SD_disk_write+0x56>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	025b      	lsls	r3, r3, #9
 80042e8:	607b      	str	r3, [r7, #4]

	SELECT();
 80042ea:	f7ff fcb1 	bl	8003c50 <SELECT>

	if (count == 1)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d110      	bne.n	8004316 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	2058      	movs	r0, #88	@ 0x58
 80042f8:	f7ff fe0b 	bl	8003f12 <SD_SendCmd>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d13a      	bne.n	8004378 <SD_disk_write+0xe4>
 8004302:	21fe      	movs	r1, #254	@ 0xfe
 8004304:	68b8      	ldr	r0, [r7, #8]
 8004306:	f7ff fdc1 	bl	8003e8c <SD_TxDataBlock>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d033      	beq.n	8004378 <SD_disk_write+0xe4>
			count = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	e030      	b.n	8004378 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8004316:	4b20      	ldr	r3, [pc, #128]	@ (8004398 <SD_disk_write+0x104>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d007      	beq.n	8004332 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8004322:	2100      	movs	r1, #0
 8004324:	2077      	movs	r0, #119	@ 0x77
 8004326:	f7ff fdf4 	bl	8003f12 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800432a:	6839      	ldr	r1, [r7, #0]
 800432c:	2057      	movs	r0, #87	@ 0x57
 800432e:	f7ff fdf0 	bl	8003f12 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	2059      	movs	r0, #89	@ 0x59
 8004336:	f7ff fdec 	bl	8003f12 <SD_SendCmd>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d11b      	bne.n	8004378 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004340:	21fc      	movs	r1, #252	@ 0xfc
 8004342:	68b8      	ldr	r0, [r7, #8]
 8004344:	f7ff fda2 	bl	8003e8c <SD_TxDataBlock>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <SD_disk_write+0xd0>
				buff += 512;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004354:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	3b01      	subs	r3, #1
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1ee      	bne.n	8004340 <SD_disk_write+0xac>
 8004362:	e000      	b.n	8004366 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004364:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8004366:	21fd      	movs	r1, #253	@ 0xfd
 8004368:	2000      	movs	r0, #0
 800436a:	f7ff fd8f 	bl	8003e8c <SD_TxDataBlock>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <SD_disk_write+0xe4>
			{
				count = 1;
 8004374:	2301      	movs	r3, #1
 8004376:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004378:	f7ff fc76 	bl	8003c68 <DESELECT>
	SPI_RxByte();
 800437c:	f7ff fcb6 	bl	8003cec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf14      	ite	ne
 8004386:	2301      	movne	r3, #1
 8004388:	2300      	moveq	r3, #0
 800438a:	b2db      	uxtb	r3, r3
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	24000000 	.word	0x24000000
 8004398:	24000194 	.word	0x24000194

0800439c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b08b      	sub	sp, #44	@ 0x2c
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	603a      	str	r2, [r7, #0]
 80043a6:	71fb      	strb	r3, [r7, #7]
 80043a8:	460b      	mov	r3, r1
 80043aa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <SD_disk_ioctl+0x1e>
 80043b6:	2304      	movs	r3, #4
 80043b8:	e113      	b.n	80045e2 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80043c0:	79bb      	ldrb	r3, [r7, #6]
 80043c2:	2b05      	cmp	r3, #5
 80043c4:	d124      	bne.n	8004410 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d012      	beq.n	80043f4 <SD_disk_ioctl+0x58>
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	dc1a      	bgt.n	8004408 <SD_disk_ioctl+0x6c>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <SD_disk_ioctl+0x40>
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d006      	beq.n	80043e8 <SD_disk_ioctl+0x4c>
 80043da:	e015      	b.n	8004408 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80043dc:	f7ff fd0e 	bl	8003dfc <SD_PowerOff>
			res = RES_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80043e6:	e0fa      	b.n	80045de <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80043e8:	f7ff fcc6 	bl	8003d78 <SD_PowerOn>
			res = RES_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80043f2:	e0f4      	b.n	80045de <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	1c5c      	adds	r4, r3, #1
 80043f8:	f7ff fd0c 	bl	8003e14 <SD_CheckPower>
 80043fc:	4603      	mov	r3, r0
 80043fe:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004406:	e0ea      	b.n	80045de <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8004408:	2304      	movs	r3, #4
 800440a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800440e:	e0e6      	b.n	80045de <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004410:	4b76      	ldr	r3, [pc, #472]	@ (80045ec <SD_disk_ioctl+0x250>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <SD_disk_ioctl+0x86>
 800441e:	2303      	movs	r3, #3
 8004420:	e0df      	b.n	80045e2 <SD_disk_ioctl+0x246>

		SELECT();
 8004422:	f7ff fc15 	bl	8003c50 <SELECT>

		switch (ctrl)
 8004426:	79bb      	ldrb	r3, [r7, #6]
 8004428:	2b0d      	cmp	r3, #13
 800442a:	f200 80c9 	bhi.w	80045c0 <SD_disk_ioctl+0x224>
 800442e:	a201      	add	r2, pc, #4	@ (adr r2, 8004434 <SD_disk_ioctl+0x98>)
 8004430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004434:	0800452b 	.word	0x0800452b
 8004438:	0800446d 	.word	0x0800446d
 800443c:	0800451b 	.word	0x0800451b
 8004440:	080045c1 	.word	0x080045c1
 8004444:	080045c1 	.word	0x080045c1
 8004448:	080045c1 	.word	0x080045c1
 800444c:	080045c1 	.word	0x080045c1
 8004450:	080045c1 	.word	0x080045c1
 8004454:	080045c1 	.word	0x080045c1
 8004458:	080045c1 	.word	0x080045c1
 800445c:	080045c1 	.word	0x080045c1
 8004460:	0800453d 	.word	0x0800453d
 8004464:	08004561 	.word	0x08004561
 8004468:	08004585 	.word	0x08004585
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800446c:	2100      	movs	r1, #0
 800446e:	2049      	movs	r0, #73	@ 0x49
 8004470:	f7ff fd4f 	bl	8003f12 <SD_SendCmd>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 80a6 	bne.w	80045c8 <SD_disk_ioctl+0x22c>
 800447c:	f107 030c 	add.w	r3, r7, #12
 8004480:	2110      	movs	r1, #16
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fcd2 	bl	8003e2c <SD_RxDataBlock>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 809c 	beq.w	80045c8 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004490:	7b3b      	ldrb	r3, [r7, #12]
 8004492:	099b      	lsrs	r3, r3, #6
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	d10d      	bne.n	80044b6 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800449a:	7d7b      	ldrb	r3, [r7, #21]
 800449c:	461a      	mov	r2, r3
 800449e:	7d3b      	ldrb	r3, [r7, #20]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	4413      	add	r3, r2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3301      	adds	r3, #1
 80044aa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80044ac:	8bfb      	ldrh	r3, [r7, #30]
 80044ae:	029a      	lsls	r2, r3, #10
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	e02d      	b.n	8004512 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80044b6:	7c7b      	ldrb	r3, [r7, #17]
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	7dbb      	ldrb	r3, [r7, #22]
 80044c0:	09db      	lsrs	r3, r3, #7
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	4413      	add	r3, r2
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	7d7b      	ldrb	r3, [r7, #21]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 0306 	and.w	r3, r3, #6
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	4413      	add	r3, r2
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	3302      	adds	r3, #2
 80044da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80044de:	7d3b      	ldrb	r3, [r7, #20]
 80044e0:	099b      	lsrs	r3, r3, #6
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	4413      	add	r3, r2
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	7cbb      	ldrb	r3, [r7, #18]
 80044f2:	029b      	lsls	r3, r3, #10
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3301      	adds	r3, #1
 8004502:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004504:	8bfa      	ldrh	r2, [r7, #30]
 8004506:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800450a:	3b09      	subs	r3, #9
 800450c:	409a      	lsls	r2, r3
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8004518:	e056      	b.n	80045c8 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004520:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004528:	e055      	b.n	80045d6 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800452a:	f7ff fc0b 	bl	8003d44 <SD_ReadyWait>
 800452e:	4603      	mov	r3, r0
 8004530:	2bff      	cmp	r3, #255	@ 0xff
 8004532:	d14b      	bne.n	80045cc <SD_disk_ioctl+0x230>
 8004534:	2300      	movs	r3, #0
 8004536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800453a:	e047      	b.n	80045cc <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800453c:	2100      	movs	r1, #0
 800453e:	2049      	movs	r0, #73	@ 0x49
 8004540:	f7ff fce7 	bl	8003f12 <SD_SendCmd>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d142      	bne.n	80045d0 <SD_disk_ioctl+0x234>
 800454a:	2110      	movs	r1, #16
 800454c:	6a38      	ldr	r0, [r7, #32]
 800454e:	f7ff fc6d 	bl	8003e2c <SD_RxDataBlock>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d03b      	beq.n	80045d0 <SD_disk_ioctl+0x234>
 8004558:	2300      	movs	r3, #0
 800455a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800455e:	e037      	b.n	80045d0 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004560:	2100      	movs	r1, #0
 8004562:	204a      	movs	r0, #74	@ 0x4a
 8004564:	f7ff fcd5 	bl	8003f12 <SD_SendCmd>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d132      	bne.n	80045d4 <SD_disk_ioctl+0x238>
 800456e:	2110      	movs	r1, #16
 8004570:	6a38      	ldr	r0, [r7, #32]
 8004572:	f7ff fc5b 	bl	8003e2c <SD_RxDataBlock>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d02b      	beq.n	80045d4 <SD_disk_ioctl+0x238>
 800457c:	2300      	movs	r3, #0
 800457e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004582:	e027      	b.n	80045d4 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004584:	2100      	movs	r1, #0
 8004586:	207a      	movs	r0, #122	@ 0x7a
 8004588:	f7ff fcc3 	bl	8003f12 <SD_SendCmd>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d116      	bne.n	80045c0 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8004592:	2300      	movs	r3, #0
 8004594:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004598:	e00b      	b.n	80045b2 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800459a:	6a3c      	ldr	r4, [r7, #32]
 800459c:	1c63      	adds	r3, r4, #1
 800459e:	623b      	str	r3, [r7, #32]
 80045a0:	f7ff fba4 	bl	8003cec <SPI_RxByte>
 80045a4:	4603      	mov	r3, r0
 80045a6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80045a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80045ac:	3301      	adds	r3, #1
 80045ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80045b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d9ef      	bls.n	800459a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80045c0:	2304      	movs	r3, #4
 80045c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80045c6:	e006      	b.n	80045d6 <SD_disk_ioctl+0x23a>
			break;
 80045c8:	bf00      	nop
 80045ca:	e004      	b.n	80045d6 <SD_disk_ioctl+0x23a>
			break;
 80045cc:	bf00      	nop
 80045ce:	e002      	b.n	80045d6 <SD_disk_ioctl+0x23a>
			break;
 80045d0:	bf00      	nop
 80045d2:	e000      	b.n	80045d6 <SD_disk_ioctl+0x23a>
			break;
 80045d4:	bf00      	nop
		}

		DESELECT();
 80045d6:	f7ff fb47 	bl	8003c68 <DESELECT>
		SPI_RxByte();
 80045da:	f7ff fb87 	bl	8003cec <SPI_RxByte>
	}

	return res;
 80045de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	372c      	adds	r7, #44	@ 0x2c
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd90      	pop	{r4, r7, pc}
 80045ea:	bf00      	nop
 80045ec:	24000000 	.word	0x24000000

080045f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08e      	sub	sp, #56	@ 0x38
 80045f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	605a      	str	r2, [r3, #4]
 8004600:	609a      	str	r2, [r3, #8]
 8004602:	60da      	str	r2, [r3, #12]
 8004604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004606:	4b8b      	ldr	r3, [pc, #556]	@ (8004834 <MX_GPIO_Init+0x244>)
 8004608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800460c:	4a89      	ldr	r2, [pc, #548]	@ (8004834 <MX_GPIO_Init+0x244>)
 800460e:	f043 0310 	orr.w	r3, r3, #16
 8004612:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004616:	4b87      	ldr	r3, [pc, #540]	@ (8004834 <MX_GPIO_Init+0x244>)
 8004618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	623b      	str	r3, [r7, #32]
 8004622:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004624:	4b83      	ldr	r3, [pc, #524]	@ (8004834 <MX_GPIO_Init+0x244>)
 8004626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800462a:	4a82      	ldr	r2, [pc, #520]	@ (8004834 <MX_GPIO_Init+0x244>)
 800462c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004630:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004634:	4b7f      	ldr	r3, [pc, #508]	@ (8004834 <MX_GPIO_Init+0x244>)
 8004636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800463a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004642:	4b7c      	ldr	r3, [pc, #496]	@ (8004834 <MX_GPIO_Init+0x244>)
 8004644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004648:	4a7a      	ldr	r2, [pc, #488]	@ (8004834 <MX_GPIO_Init+0x244>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004652:	4b78      	ldr	r3, [pc, #480]	@ (8004834 <MX_GPIO_Init+0x244>)
 8004654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004660:	4b74      	ldr	r3, [pc, #464]	@ (8004834 <MX_GPIO_Init+0x244>)
 8004662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004666:	4a73      	ldr	r2, [pc, #460]	@ (8004834 <MX_GPIO_Init+0x244>)
 8004668:	f043 0320 	orr.w	r3, r3, #32
 800466c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004670:	4b70      	ldr	r3, [pc, #448]	@ (8004834 <MX_GPIO_Init+0x244>)
 8004672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800467e:	4b6d      	ldr	r3, [pc, #436]	@ (8004834 <MX_GPIO_Init+0x244>)
 8004680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004684:	4a6b      	ldr	r2, [pc, #428]	@ (8004834 <MX_GPIO_Init+0x244>)
 8004686:	f043 0302 	orr.w	r3, r3, #2
 800468a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800468e:	4b69      	ldr	r3, [pc, #420]	@ (8004834 <MX_GPIO_Init+0x244>)
 8004690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800469c:	4b65      	ldr	r3, [pc, #404]	@ (8004834 <MX_GPIO_Init+0x244>)
 800469e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046a2:	4a64      	ldr	r2, [pc, #400]	@ (8004834 <MX_GPIO_Init+0x244>)
 80046a4:	f043 0308 	orr.w	r3, r3, #8
 80046a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046ac:	4b61      	ldr	r3, [pc, #388]	@ (8004834 <MX_GPIO_Init+0x244>)
 80046ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80046ba:	4b5e      	ldr	r3, [pc, #376]	@ (8004834 <MX_GPIO_Init+0x244>)
 80046bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046c0:	4a5c      	ldr	r2, [pc, #368]	@ (8004834 <MX_GPIO_Init+0x244>)
 80046c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046ca:	4b5a      	ldr	r3, [pc, #360]	@ (8004834 <MX_GPIO_Init+0x244>)
 80046cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046d8:	4b56      	ldr	r3, [pc, #344]	@ (8004834 <MX_GPIO_Init+0x244>)
 80046da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046de:	4a55      	ldr	r2, [pc, #340]	@ (8004834 <MX_GPIO_Init+0x244>)
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046e8:	4b52      	ldr	r3, [pc, #328]	@ (8004834 <MX_GPIO_Init+0x244>)
 80046ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80046f6:	2200      	movs	r2, #0
 80046f8:	f248 0108 	movw	r1, #32776	@ 0x8008
 80046fc:	484e      	ldr	r0, [pc, #312]	@ (8004838 <MX_GPIO_Init+0x248>)
 80046fe:	f009 f8ef 	bl	800d8e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004702:	2200      	movs	r2, #0
 8004704:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004708:	484c      	ldr	r0, [pc, #304]	@ (800483c <MX_GPIO_Init+0x24c>)
 800470a:	f009 f8e9 	bl	800d8e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 800470e:	2200      	movs	r2, #0
 8004710:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004714:	484a      	ldr	r0, [pc, #296]	@ (8004840 <MX_GPIO_Init+0x250>)
 8004716:	f009 f8e3 	bl	800d8e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 800471a:	2200      	movs	r2, #0
 800471c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004720:	4848      	ldr	r0, [pc, #288]	@ (8004844 <MX_GPIO_Init+0x254>)
 8004722:	f009 f8dd 	bl	800d8e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004726:	2200      	movs	r2, #0
 8004728:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 800472c:	4846      	ldr	r0, [pc, #280]	@ (8004848 <MX_GPIO_Init+0x258>)
 800472e:	f009 f8d7 	bl	800d8e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004732:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004736:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004738:	2301      	movs	r3, #1
 800473a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473c:	2300      	movs	r3, #0
 800473e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004740:	2300      	movs	r3, #0
 8004742:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004748:	4619      	mov	r1, r3
 800474a:	483b      	ldr	r0, [pc, #236]	@ (8004838 <MX_GPIO_Init+0x248>)
 800474c:	f008 ff08 	bl	800d560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004750:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004754:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004756:	2301      	movs	r3, #1
 8004758:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475a:	2300      	movs	r3, #0
 800475c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800475e:	2300      	movs	r3, #0
 8004760:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004766:	4619      	mov	r1, r3
 8004768:	4834      	ldr	r0, [pc, #208]	@ (800483c <MX_GPIO_Init+0x24c>)
 800476a:	f008 fef9 	bl	800d560 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 800476e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004772:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004774:	2300      	movs	r3, #0
 8004776:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2300      	movs	r3, #0
 800477a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 800477c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004780:	4619      	mov	r1, r3
 8004782:	482e      	ldr	r0, [pc, #184]	@ (800483c <MX_GPIO_Init+0x24c>)
 8004784:	f008 feec 	bl	800d560 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004788:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800478e:	2301      	movs	r3, #1
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004792:	2300      	movs	r3, #0
 8004794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004796:	2300      	movs	r3, #0
 8004798:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 800479a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800479e:	4619      	mov	r1, r3
 80047a0:	4827      	ldr	r0, [pc, #156]	@ (8004840 <MX_GPIO_Init+0x250>)
 80047a2:	f008 fedd 	bl	800d560 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 80047a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047ac:	2301      	movs	r3, #1
 80047ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80047b4:	2301      	movs	r3, #1
 80047b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 80047b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047bc:	4619      	mov	r1, r3
 80047be:	4820      	ldr	r0, [pc, #128]	@ (8004840 <MX_GPIO_Init+0x250>)
 80047c0:	f008 fece 	bl	800d560 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 80047c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047ca:	2301      	movs	r3, #1
 80047cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d2:	2300      	movs	r3, #0
 80047d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 80047d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047da:	4619      	mov	r1, r3
 80047dc:	4819      	ldr	r0, [pc, #100]	@ (8004844 <MX_GPIO_Init+0x254>)
 80047de:	f008 febf 	bl	800d560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 80047e2:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80047e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047e8:	2301      	movs	r3, #1
 80047ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f0:	2300      	movs	r3, #0
 80047f2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047f8:	4619      	mov	r1, r3
 80047fa:	4813      	ldr	r0, [pc, #76]	@ (8004848 <MX_GPIO_Init+0x258>)
 80047fc:	f008 feb0 	bl	800d560 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004800:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004806:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800480a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480c:	2300      	movs	r3, #0
 800480e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004814:	4619      	mov	r1, r3
 8004816:	480b      	ldr	r0, [pc, #44]	@ (8004844 <MX_GPIO_Init+0x254>)
 8004818:	f008 fea2 	bl	800d560 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800481c:	2200      	movs	r2, #0
 800481e:	2100      	movs	r1, #0
 8004820:	2028      	movs	r0, #40	@ 0x28
 8004822:	f005 ff9e 	bl	800a762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004826:	2028      	movs	r0, #40	@ 0x28
 8004828:	f005 ffb5 	bl	800a796 <HAL_NVIC_EnableIRQ>

}
 800482c:	bf00      	nop
 800482e:	3738      	adds	r7, #56	@ 0x38
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	58024400 	.word	0x58024400
 8004838:	58021000 	.word	0x58021000
 800483c:	58020400 	.word	0x58020400
 8004840:	58020c00 	.word	0x58020c00
 8004844:	58021800 	.word	0x58021800
 8004848:	58020000 	.word	0x58020000

0800484c <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004850:	4b1d      	ldr	r3, [pc, #116]	@ (80048c8 <MX_I2C5_Init+0x7c>)
 8004852:	4a1e      	ldr	r2, [pc, #120]	@ (80048cc <MX_I2C5_Init+0x80>)
 8004854:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004856:	4b1c      	ldr	r3, [pc, #112]	@ (80048c8 <MX_I2C5_Init+0x7c>)
 8004858:	2200      	movs	r2, #0
 800485a:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 800485c:	4b1a      	ldr	r3, [pc, #104]	@ (80048c8 <MX_I2C5_Init+0x7c>)
 800485e:	2200      	movs	r2, #0
 8004860:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004862:	4b19      	ldr	r3, [pc, #100]	@ (80048c8 <MX_I2C5_Init+0x7c>)
 8004864:	2201      	movs	r2, #1
 8004866:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004868:	4b17      	ldr	r3, [pc, #92]	@ (80048c8 <MX_I2C5_Init+0x7c>)
 800486a:	2200      	movs	r2, #0
 800486c:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 800486e:	4b16      	ldr	r3, [pc, #88]	@ (80048c8 <MX_I2C5_Init+0x7c>)
 8004870:	2200      	movs	r2, #0
 8004872:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004874:	4b14      	ldr	r3, [pc, #80]	@ (80048c8 <MX_I2C5_Init+0x7c>)
 8004876:	2200      	movs	r2, #0
 8004878:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800487a:	4b13      	ldr	r3, [pc, #76]	@ (80048c8 <MX_I2C5_Init+0x7c>)
 800487c:	2200      	movs	r2, #0
 800487e:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <MX_I2C5_Init+0x7c>)
 8004882:	2200      	movs	r2, #0
 8004884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004886:	4810      	ldr	r0, [pc, #64]	@ (80048c8 <MX_I2C5_Init+0x7c>)
 8004888:	f009 f85e 	bl	800d948 <HAL_I2C_Init>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004892:	f002 ff2d 	bl	80076f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004896:	2100      	movs	r1, #0
 8004898:	480b      	ldr	r0, [pc, #44]	@ (80048c8 <MX_I2C5_Init+0x7c>)
 800489a:	f00b fc0d 	bl	80100b8 <HAL_I2CEx_ConfigAnalogFilter>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 80048a4:	f002 ff24 	bl	80076f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 80048a8:	2100      	movs	r1, #0
 80048aa:	4807      	ldr	r0, [pc, #28]	@ (80048c8 <MX_I2C5_Init+0x7c>)
 80048ac:	f00b fc4f 	bl	801014e <HAL_I2CEx_ConfigDigitalFilter>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 80048b6:	f002 ff1b 	bl	80076f0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 80048ba:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80048be:	f00b fc93 	bl	80101e8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	24000198 	.word	0x24000198
 80048cc:	40006400 	.word	0x40006400

080048d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b0b8      	sub	sp, #224	@ 0xe0
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048e8:	f107 0310 	add.w	r3, r7, #16
 80048ec:	22b8      	movs	r2, #184	@ 0xb8
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f018 fecf 	bl	801d694 <memset>
  if(i2cHandle->Instance==I2C5)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a2b      	ldr	r2, [pc, #172]	@ (80049a8 <HAL_I2C_MspInit+0xd8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d14f      	bne.n	80049a0 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004900:	f04f 0208 	mov.w	r2, #8
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 800490c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004910:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004914:	f107 0310 	add.w	r3, r7, #16
 8004918:	4618      	mov	r0, r3
 800491a:	f00c fc29 	bl	8011170 <HAL_RCCEx_PeriphCLKConfig>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004924:	f002 fee4 	bl	80076f0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004928:	4b20      	ldr	r3, [pc, #128]	@ (80049ac <HAL_I2C_MspInit+0xdc>)
 800492a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800492e:	4a1f      	ldr	r2, [pc, #124]	@ (80049ac <HAL_I2C_MspInit+0xdc>)
 8004930:	f043 0304 	orr.w	r3, r3, #4
 8004934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004938:	4b1c      	ldr	r3, [pc, #112]	@ (80049ac <HAL_I2C_MspInit+0xdc>)
 800493a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004946:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800494a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800494e:	2312      	movs	r3, #18
 8004950:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004954:	2301      	movs	r3, #1
 8004956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800495a:	2300      	movs	r3, #0
 800495c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004960:	2304      	movs	r3, #4
 8004962:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004966:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800496a:	4619      	mov	r1, r3
 800496c:	4810      	ldr	r0, [pc, #64]	@ (80049b0 <HAL_I2C_MspInit+0xe0>)
 800496e:	f008 fdf7 	bl	800d560 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004972:	4b0e      	ldr	r3, [pc, #56]	@ (80049ac <HAL_I2C_MspInit+0xdc>)
 8004974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004978:	4a0c      	ldr	r2, [pc, #48]	@ (80049ac <HAL_I2C_MspInit+0xdc>)
 800497a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800497e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004982:	4b0a      	ldr	r3, [pc, #40]	@ (80049ac <HAL_I2C_MspInit+0xdc>)
 8004984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004990:	2200      	movs	r2, #0
 8004992:	2101      	movs	r1, #1
 8004994:	209d      	movs	r0, #157	@ 0x9d
 8004996:	f005 fee4 	bl	800a762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 800499a:	209d      	movs	r0, #157	@ 0x9d
 800499c:	f005 fefb 	bl	800a796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 80049a0:	bf00      	nop
 80049a2:	37e0      	adds	r7, #224	@ 0xe0
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40006400 	.word	0x40006400
 80049ac:	58024400 	.word	0x58024400
 80049b0:	58020800 	.word	0x58020800

080049b4 <__NVIC_SystemReset>:
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80049b8:	f3bf 8f4f 	dsb	sy
}
 80049bc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80049be:	4b06      	ldr	r3, [pc, #24]	@ (80049d8 <__NVIC_SystemReset+0x24>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80049c6:	4904      	ldr	r1, [pc, #16]	@ (80049d8 <__NVIC_SystemReset+0x24>)
 80049c8:	4b04      	ldr	r3, [pc, #16]	@ (80049dc <__NVIC_SystemReset+0x28>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80049ce:	f3bf 8f4f 	dsb	sy
}
 80049d2:	bf00      	nop
    __NOP();
 80049d4:	bf00      	nop
 80049d6:	e7fd      	b.n	80049d4 <__NVIC_SystemReset+0x20>
 80049d8:	e000ed00 	.word	0xe000ed00
 80049dc:	05fa0004 	.word	0x05fa0004

080049e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80049e6:	f002 fe57 	bl	8007698 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049ea:	f003 fdab 	bl	8008544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049ee:	f000 fe93 	bl	8005718 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80049f2:	f000 ff03 	bl	80057fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049f6:	f7ff fdfb 	bl	80045f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80049fa:	f7fe fe93 	bl	8003724 <MX_DMA_Init>
  MX_I2C5_Init();
 80049fe:	f7ff ff25 	bl	800484c <MX_I2C5_Init>
  MX_ADC2_Init();
 8004a02:	f7fe fda1 	bl	8003548 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004a06:	f002 fecf 	bl	80077a8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004a0a:	f003 fcb3 	bl	8008374 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004a0e:	f003 f9d1 	bl	8007db4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004a12:	f003 fb47 	bl	80080a4 <MX_TIM8_Init>
  MX_TIM3_Init();
 8004a16:	f003 fac9 	bl	8007fac <MX_TIM3_Init>
  MX_FATFS_Init();
 8004a1a:	f015 fc87 	bl	801a32c <MX_FATFS_Init>
  MX_TIM2_Init();
 8004a1e:	f003 fa71 	bl	8007f04 <MX_TIM2_Init>
  MX_SPI1_Init();
 8004a22:	f002 fe6b 	bl	80076fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 8004a26:	2201      	movs	r2, #1
 8004a28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a2c:	48b4      	ldr	r0, [pc, #720]	@ (8004d00 <main+0x320>)
 8004a2e:	f008 ff57 	bl	800d8e0 <HAL_GPIO_WritePin>


  	  STARTUP = 1;
 8004a32:	4bb4      	ldr	r3, [pc, #720]	@ (8004d04 <main+0x324>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	701a      	strb	r2, [r3, #0]

  	DRON_ON_GRUND = 1;
 8004a38:	4bb3      	ldr	r3, [pc, #716]	@ (8004d08 <main+0x328>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	701a      	strb	r2, [r3, #0]

  	MPU6050.Acc.Acc_Scale = 8192;
 8004a3e:	4bb3      	ldr	r3, [pc, #716]	@ (8004d0c <main+0x32c>)
 8004a40:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8004a44:	619a      	str	r2, [r3, #24]
  	MPU6050.Acc.acc_x_cal = 0;
 8004a46:	4bb1      	ldr	r3, [pc, #708]	@ (8004d0c <main+0x32c>)
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	61da      	str	r2, [r3, #28]
  	MPU6050.Acc.acc_y_cal = 0;
 8004a4e:	4baf      	ldr	r3, [pc, #700]	@ (8004d0c <main+0x32c>)
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	621a      	str	r2, [r3, #32]
  	MPU6050.Acc.acc_z_cal = 0;
 8004a56:	4bad      	ldr	r3, [pc, #692]	@ (8004d0c <main+0x32c>)
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  	MPU6050.Acc.ax_ang = 0;
 8004a5e:	4bab      	ldr	r3, [pc, #684]	@ (8004d0c <main+0x32c>)
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	60da      	str	r2, [r3, #12]
  	MPU6050.Acc.ay_ang = 0;
 8004a66:	4ba9      	ldr	r3, [pc, #676]	@ (8004d0c <main+0x32c>)
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	611a      	str	r2, [r3, #16]
  	MPU6050.Acc.az_ang = 0;
 8004a6e:	4ba7      	ldr	r3, [pc, #668]	@ (8004d0c <main+0x32c>)
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	615a      	str	r2, [r3, #20]
  	MPU6050.Acc.ax = 0;
 8004a76:	4ba5      	ldr	r3, [pc, #660]	@ (8004d0c <main+0x32c>)
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
  	MPU6050.Acc.ay = 0;
 8004a7e:	4ba3      	ldr	r3, [pc, #652]	@ (8004d0c <main+0x32c>)
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	605a      	str	r2, [r3, #4]
  	MPU6050.Acc.az = 0;
 8004a86:	4ba1      	ldr	r3, [pc, #644]	@ (8004d0c <main+0x32c>)
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	609a      	str	r2, [r3, #8]
  	MPU6050.Gyr.Gyr_Scale = 65.5;
 8004a8e:	4b9f      	ldr	r3, [pc, #636]	@ (8004d0c <main+0x32c>)
 8004a90:	4a9f      	ldr	r2, [pc, #636]	@ (8004d10 <main+0x330>)
 8004a92:	635a      	str	r2, [r3, #52]	@ 0x34
  	MPU6050.Gyr.gyr_x_cal = 0;
 8004a94:	4b9d      	ldr	r3, [pc, #628]	@ (8004d0c <main+0x32c>)
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	639a      	str	r2, [r3, #56]	@ 0x38
  	MPU6050.Gyr.gyr_y_cal = 0;
 8004a9c:	4b9b      	ldr	r3, [pc, #620]	@ (8004d0c <main+0x32c>)
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	63da      	str	r2, [r3, #60]	@ 0x3c
  	MPU6050.Gyr.gyr_z_cal = 0;
 8004aa4:	4b99      	ldr	r3, [pc, #612]	@ (8004d0c <main+0x32c>)
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	641a      	str	r2, [r3, #64]	@ 0x40
  	MPU6050.Gyr.gx = 0;
 8004aac:	4b97      	ldr	r3, [pc, #604]	@ (8004d0c <main+0x32c>)
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  	MPU6050.Gyr.gy = 0;
 8004ab4:	4b95      	ldr	r3, [pc, #596]	@ (8004d0c <main+0x32c>)
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	62da      	str	r2, [r3, #44]	@ 0x2c
  	MPU6050.Gyr.gz = 0;
 8004abc:	4b93      	ldr	r3, [pc, #588]	@ (8004d0c <main+0x32c>)
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  	MPU6050.MPU6050_IRQ = 0;
 8004ac4:	4b91      	ldr	r3, [pc, #580]	@ (8004d0c <main+0x32c>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52



	NRF24.NRF24_MODE = NRF24_Error;
 8004acc:	4b91      	ldr	r3, [pc, #580]	@ (8004d14 <main+0x334>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	NRF24.Status = NRF24_Ready;
 8004ad4:	4b8f      	ldr	r3, [pc, #572]	@ (8004d14 <main+0x334>)
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	NRF24.Message_Status = 0;
 8004adc:	4b8d      	ldr	r3, [pc, #564]	@ (8004d14 <main+0x334>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	NRF24.NRF24_Message_count = 0;
 8004ae4:	4b8b      	ldr	r3, [pc, #556]	@ (8004d14 <main+0x334>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
	NRF24.Timer_1 = 0;
 8004aec:	4b89      	ldr	r3, [pc, #548]	@ (8004d14 <main+0x334>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	NRF24.Timer_2 = 0;
 8004af4:	4b87      	ldr	r3, [pc, #540]	@ (8004d14 <main+0x334>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	NRF24.Step = 0;
 8004afc:	4b85      	ldr	r3, [pc, #532]	@ (8004d14 <main+0x334>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	NRF24.SPI_Rx_Inte = 0;
 8004b04:	4b83      	ldr	r3, [pc, #524]	@ (8004d14 <main+0x334>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	NRF24.SPI_Tx_Inte = 0;
 8004b0c:	4b81      	ldr	r3, [pc, #516]	@ (8004d14 <main+0x334>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89



	BMP180.BMP180_IRQ = 0;
 8004b14:	4b80      	ldr	r3, [pc, #512]	@ (8004d18 <main+0x338>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	BMP180.ampritude = 0;
 8004b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d18 <main+0x338>)
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	651a      	str	r2, [r3, #80]	@ 0x50
	BMP180.pres = 0;
 8004b24:	4b7c      	ldr	r3, [pc, #496]	@ (8004d18 <main+0x338>)
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	64da      	str	r2, [r3, #76]	@ 0x4c
	BMP180.startpres = 0;
 8004b2c:	4b7a      	ldr	r3, [pc, #488]	@ (8004d18 <main+0x338>)
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	655a      	str	r2, [r3, #84]	@ 0x54
	BMP180.temp = 0;
 8004b34:	4b78      	ldr	r3, [pc, #480]	@ (8004d18 <main+0x338>)
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	649a      	str	r2, [r3, #72]	@ 0x48
	BMP180.Raw_Data.pressure = 0;
 8004b3c:	4b76      	ldr	r3, [pc, #472]	@ (8004d18 <main+0x338>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	645a      	str	r2, [r3, #68]	@ 0x44
	BMP180.Raw_Data.temperature = 0;
 8004b42:	4b75      	ldr	r3, [pc, #468]	@ (8004d18 <main+0x338>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	641a      	str	r2, [r3, #64]	@ 0x40



	MYDRON.dronheight = 0;
 8004b48:	4b74      	ldr	r3, [pc, #464]	@ (8004d1c <main+0x33c>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a
	MYDRON.batterysize = 0;
 8004b50:	4b72      	ldr	r3, [pc, #456]	@ (8004d1c <main+0x33c>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
	MYDRON.Pitch.Angle_Error_Sum = 0;
 8004b58:	4b70      	ldr	r3, [pc, #448]	@ (8004d1c <main+0x33c>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	625a      	str	r2, [r3, #36]	@ 0x24
	MYDRON.Pitch.Angle_Error = 0;
 8004b5e:	4b6f      	ldr	r3, [pc, #444]	@ (8004d1c <main+0x33c>)
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	615a      	str	r2, [r3, #20]
	MYDRON.Pitch.Angular_Rate_Error = 0;
 8004b66:	4b6d      	ldr	r3, [pc, #436]	@ (8004d1c <main+0x33c>)
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	619a      	str	r2, [r3, #24]
	MYDRON.Pitch.Angular_Rate_Error_Sum = 0;
 8004b6e:	4b6b      	ldr	r3, [pc, #428]	@ (8004d1c <main+0x33c>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	629a      	str	r2, [r3, #40]	@ 0x28
	MYDRON.Pitch.Last_Wanted_rx = 0;
 8004b74:	4b69      	ldr	r3, [pc, #420]	@ (8004d1c <main+0x33c>)
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	605a      	str	r2, [r3, #4]
	MYDRON.Pitch.Now = 0;
 8004b7c:	4b67      	ldr	r3, [pc, #412]	@ (8004d1c <main+0x33c>)
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	611a      	str	r2, [r3, #16]
	MYDRON.Pitch.Old_Angle_Error = 0;
 8004b84:	4b65      	ldr	r3, [pc, #404]	@ (8004d1c <main+0x33c>)
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	61da      	str	r2, [r3, #28]
	MYDRON.Pitch.Old_Angular_Rate_Error = 0;
 8004b8c:	4b63      	ldr	r3, [pc, #396]	@ (8004d1c <main+0x33c>)
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	621a      	str	r2, [r3, #32]
	MYDRON.Pitch.Value = 0;
 8004b94:	4b61      	ldr	r3, [pc, #388]	@ (8004d1c <main+0x33c>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	859a      	strh	r2, [r3, #44]	@ 0x2c
	MYDRON.Pitch.Wanted = 0;
 8004b9a:	4b60      	ldr	r3, [pc, #384]	@ (8004d1c <main+0x33c>)
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	609a      	str	r2, [r3, #8]
	MYDRON.Pitch.Wanted_Factor = 0;
 8004ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8004d1c <main+0x33c>)
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	60da      	str	r2, [r3, #12]
	MYDRON.Pitch.Wanted_rx = 0;
 8004baa:	4b5c      	ldr	r3, [pc, #368]	@ (8004d1c <main+0x33c>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	801a      	strh	r2, [r3, #0]
	MYDRON.Pitch.Wanted_v = 0;
 8004bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8004d1c <main+0x33c>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	805a      	strh	r2, [r3, #2]
	MYDRON.Rool.Angle_Error_Sum = 0;
 8004bb6:	4b59      	ldr	r3, [pc, #356]	@ (8004d1c <main+0x33c>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	655a      	str	r2, [r3, #84]	@ 0x54
	MYDRON.Rool.Angle_Error = 0;
 8004bbc:	4b57      	ldr	r3, [pc, #348]	@ (8004d1c <main+0x33c>)
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	645a      	str	r2, [r3, #68]	@ 0x44
	MYDRON.Rool.Angular_Rate_Error = 0;
 8004bc4:	4b55      	ldr	r3, [pc, #340]	@ (8004d1c <main+0x33c>)
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	649a      	str	r2, [r3, #72]	@ 0x48
	MYDRON.Rool.Angular_Rate_Error_Sum = 0;
 8004bcc:	4b53      	ldr	r3, [pc, #332]	@ (8004d1c <main+0x33c>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	659a      	str	r2, [r3, #88]	@ 0x58
	MYDRON.Rool.Last_Wanted_rx = 0;
 8004bd2:	4b52      	ldr	r3, [pc, #328]	@ (8004d1c <main+0x33c>)
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	635a      	str	r2, [r3, #52]	@ 0x34
	MYDRON.Rool.Now = 0;
 8004bda:	4b50      	ldr	r3, [pc, #320]	@ (8004d1c <main+0x33c>)
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	641a      	str	r2, [r3, #64]	@ 0x40
	MYDRON.Rool.Old_Angle_Error = 0;
 8004be2:	4b4e      	ldr	r3, [pc, #312]	@ (8004d1c <main+0x33c>)
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	64da      	str	r2, [r3, #76]	@ 0x4c
	MYDRON.Rool.Old_Angular_Rate_Error = 0;
 8004bea:	4b4c      	ldr	r3, [pc, #304]	@ (8004d1c <main+0x33c>)
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	651a      	str	r2, [r3, #80]	@ 0x50
	MYDRON.Rool.Value = 0;
 8004bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8004d1c <main+0x33c>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	MYDRON.Rool.Wanted = 0;
 8004bfa:	4b48      	ldr	r3, [pc, #288]	@ (8004d1c <main+0x33c>)
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	639a      	str	r2, [r3, #56]	@ 0x38
	MYDRON.Rool.Wanted_Factor = 0;
 8004c02:	4b46      	ldr	r3, [pc, #280]	@ (8004d1c <main+0x33c>)
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	63da      	str	r2, [r3, #60]	@ 0x3c
	MYDRON.Rool.Wanted_rx = 0;
 8004c0a:	4b44      	ldr	r3, [pc, #272]	@ (8004d1c <main+0x33c>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	861a      	strh	r2, [r3, #48]	@ 0x30
	MYDRON.Rool.Wanted_v = 0;
 8004c10:	4b42      	ldr	r3, [pc, #264]	@ (8004d1c <main+0x33c>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	865a      	strh	r2, [r3, #50]	@ 0x32
	MYDRON.Yaw.Angle_Error_Sum = 0;
 8004c16:	4b41      	ldr	r3, [pc, #260]	@ (8004d1c <main+0x33c>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	MYDRON.Yaw.Angle_Error = 0;
 8004c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d1c <main+0x33c>)
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	675a      	str	r2, [r3, #116]	@ 0x74
	MYDRON.Yaw.Angular_Rate_Error = 0;
 8004c26:	4b3d      	ldr	r3, [pc, #244]	@ (8004d1c <main+0x33c>)
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	679a      	str	r2, [r3, #120]	@ 0x78
	MYDRON.Yaw.Angular_Rate_Error_Sum = 0;
 8004c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d1c <main+0x33c>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	MYDRON.Yaw.Last_Wanted_rx = 0;
 8004c36:	4b39      	ldr	r3, [pc, #228]	@ (8004d1c <main+0x33c>)
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	665a      	str	r2, [r3, #100]	@ 0x64
	MYDRON.Yaw.Now = 0;
 8004c3e:	4b37      	ldr	r3, [pc, #220]	@ (8004d1c <main+0x33c>)
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	671a      	str	r2, [r3, #112]	@ 0x70
	MYDRON.Yaw.Old_Angle_Error = 0;
 8004c46:	4b35      	ldr	r3, [pc, #212]	@ (8004d1c <main+0x33c>)
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	67da      	str	r2, [r3, #124]	@ 0x7c
	MYDRON.Yaw.Old_Angular_Rate_Error = 0;
 8004c4e:	4b33      	ldr	r3, [pc, #204]	@ (8004d1c <main+0x33c>)
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	MYDRON.Yaw.Value = 0;
 8004c58:	4b30      	ldr	r3, [pc, #192]	@ (8004d1c <main+0x33c>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
	MYDRON.Yaw.Wanted = 0;
 8004c60:	4b2e      	ldr	r3, [pc, #184]	@ (8004d1c <main+0x33c>)
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	669a      	str	r2, [r3, #104]	@ 0x68
	MYDRON.Yaw.Wanted_Factor = 0;
 8004c68:	4b2c      	ldr	r3, [pc, #176]	@ (8004d1c <main+0x33c>)
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	66da      	str	r2, [r3, #108]	@ 0x6c
	MYDRON.Yaw.Wanted_rx = 0;
 8004c70:	4b2a      	ldr	r3, [pc, #168]	@ (8004d1c <main+0x33c>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	MYDRON.Yaw.Wanted_v = 0;
 8004c78:	4b28      	ldr	r3, [pc, #160]	@ (8004d1c <main+0x33c>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	MYDRON.PID_Pitch.Angle_Factors[0] = 0;
 8004c80:	4b26      	ldr	r3, [pc, #152]	@ (8004d1c <main+0x33c>)
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	MYDRON.PID_Pitch.Angle_Factors[1] = 0;
 8004c8a:	4b24      	ldr	r3, [pc, #144]	@ (8004d1c <main+0x33c>)
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	MYDRON.PID_Pitch.Angle_Factors[2] = 0;
 8004c94:	4b21      	ldr	r3, [pc, #132]	@ (8004d1c <main+0x33c>)
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	MYDRON.PID_Pitch.Angle_Factors[3] = 0;
 8004c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8004d1c <main+0x33c>)
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	MYDRON.PID_Pitch.Angle_Factors[4] = 0;
 8004ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d1c <main+0x33c>)
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	MYDRON.PID_Pitch.Angular_Rate_Factors[0] = 0;
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d1c <main+0x33c>)
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	MYDRON.PID_Pitch.Angular_Rate_Factors[1] = 0;
 8004cbc:	4b17      	ldr	r3, [pc, #92]	@ (8004d1c <main+0x33c>)
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	MYDRON.PID_Pitch.Angular_Rate_Factors[2] = 0;
 8004cc6:	4b15      	ldr	r3, [pc, #84]	@ (8004d1c <main+0x33c>)
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	MYDRON.PID_Pitch.Angular_Rate_Factors[3] = 0;
 8004cd0:	4b12      	ldr	r3, [pc, #72]	@ (8004d1c <main+0x33c>)
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	MYDRON.PID_Pitch.Angular_Rate_Factors[4] = 0;
 8004cda:	4b10      	ldr	r3, [pc, #64]	@ (8004d1c <main+0x33c>)
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	MYDRON.PID_Pitch.Angle_Value = 0;
 8004ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8004d1c <main+0x33c>)
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	MYDRON.PID_Pitch.Angular_Rate_Value = 0;
 8004cee:	4b0b      	ldr	r3, [pc, #44]	@ (8004d1c <main+0x33c>)
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	MYDRON.PID_Rool.Angle_Factors[0] = 0;
 8004cf8:	4b08      	ldr	r3, [pc, #32]	@ (8004d1c <main+0x33c>)
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	e00f      	b.n	8004d20 <main+0x340>
 8004d00:	58021800 	.word	0x58021800
 8004d04:	0000007c 	.word	0x0000007c
 8004d08:	00004198 	.word	0x00004198
 8004d0c:	00000000 	.word	0x00000000
 8004d10:	42830000 	.word	0x42830000
 8004d14:	000000fc 	.word	0x000000fc
 8004d18:	0000009c 	.word	0x0000009c
 8004d1c:	00000188 	.word	0x00000188
 8004d20:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	MYDRON.PID_Rool.Angle_Factors[1] = 0;
 8004d24:	4bb2      	ldr	r3, [pc, #712]	@ (8004ff0 <main+0x610>)
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	MYDRON.PID_Rool.Angle_Factors[2] = 0;
 8004d2e:	4bb0      	ldr	r3, [pc, #704]	@ (8004ff0 <main+0x610>)
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	MYDRON.PID_Rool.Angle_Factors[3] = 0;
 8004d38:	4bad      	ldr	r3, [pc, #692]	@ (8004ff0 <main+0x610>)
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	MYDRON.PID_Rool.Angle_Factors[4] = 0;
 8004d42:	4bab      	ldr	r3, [pc, #684]	@ (8004ff0 <main+0x610>)
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	MYDRON.PID_Rool.Angular_Rate_Factors[0] = 0;
 8004d4c:	4ba8      	ldr	r3, [pc, #672]	@ (8004ff0 <main+0x610>)
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	MYDRON.PID_Rool.Angular_Rate_Factors[1] = 0;
 8004d56:	4ba6      	ldr	r3, [pc, #664]	@ (8004ff0 <main+0x610>)
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	MYDRON.PID_Rool.Angular_Rate_Factors[2] = 0;
 8004d60:	4ba3      	ldr	r3, [pc, #652]	@ (8004ff0 <main+0x610>)
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	MYDRON.PID_Rool.Angular_Rate_Factors[3] = 0;
 8004d6a:	4ba1      	ldr	r3, [pc, #644]	@ (8004ff0 <main+0x610>)
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	MYDRON.PID_Rool.Angular_Rate_Factors[4] = 0;
 8004d74:	4b9e      	ldr	r3, [pc, #632]	@ (8004ff0 <main+0x610>)
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	MYDRON.PID_Rool.Angle_Value = 0;
 8004d7e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ff0 <main+0x610>)
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	MYDRON.PID_Rool.Angular_Rate_Value = 0;
 8004d88:	4b99      	ldr	r3, [pc, #612]	@ (8004ff0 <main+0x610>)
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	MYDRON.PID_Yaw.Angle_Factors[0] = 0;
 8004d92:	4b97      	ldr	r3, [pc, #604]	@ (8004ff0 <main+0x610>)
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
	MYDRON.PID_Yaw.Angle_Factors[1] = 0;
 8004d9c:	4b94      	ldr	r3, [pc, #592]	@ (8004ff0 <main+0x610>)
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	MYDRON.PID_Yaw.Angle_Factors[2] = 0;
 8004da6:	4b92      	ldr	r3, [pc, #584]	@ (8004ff0 <main+0x610>)
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	MYDRON.PID_Yaw.Angle_Factors[3] = 0;
 8004db0:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff0 <main+0x610>)
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
	MYDRON.PID_Yaw.Angle_Factors[4] = 0;
 8004dba:	4b8d      	ldr	r3, [pc, #564]	@ (8004ff0 <main+0x610>)
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
	MYDRON.PID_Yaw.Angular_Rate_Factors[0] = 0;
 8004dc4:	4b8a      	ldr	r3, [pc, #552]	@ (8004ff0 <main+0x610>)
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
	MYDRON.PID_Yaw.Angular_Rate_Factors[1] = 0;
 8004dce:	4b88      	ldr	r3, [pc, #544]	@ (8004ff0 <main+0x610>)
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	MYDRON.PID_Yaw.Angular_Rate_Factors[2] = 0;
 8004dd8:	4b85      	ldr	r3, [pc, #532]	@ (8004ff0 <main+0x610>)
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
	MYDRON.PID_Yaw.Angular_Rate_Factors[3] = 0;
 8004de2:	4b83      	ldr	r3, [pc, #524]	@ (8004ff0 <main+0x610>)
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
	MYDRON.PID_Yaw.Angular_Rate_Factors[4] = 0;
 8004dec:	4b80      	ldr	r3, [pc, #512]	@ (8004ff0 <main+0x610>)
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
	MYDRON.PID_Yaw.Angle_Value = 0;
 8004df6:	4b7e      	ldr	r3, [pc, #504]	@ (8004ff0 <main+0x610>)
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
	MYDRON.PID_Yaw.Angular_Rate_Value = 0;
 8004e00:	4b7b      	ldr	r3, [pc, #492]	@ (8004ff0 <main+0x610>)
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
	MYDRON.Thrust.Now = 0;
 8004e0a:	4b79      	ldr	r3, [pc, #484]	@ (8004ff0 <main+0x610>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
	MYDRON.Thrust.Old_Speed_1 = 0;
 8004e12:	4b77      	ldr	r3, [pc, #476]	@ (8004ff0 <main+0x610>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	MYDRON.Thrust.Old_Speed_2 = 0;
 8004e1a:	4b75      	ldr	r3, [pc, #468]	@ (8004ff0 <main+0x610>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
	MYDRON.Thrust.Old_Speed_3 = 0;
 8004e22:	4b73      	ldr	r3, [pc, #460]	@ (8004ff0 <main+0x610>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	MYDRON.Thrust.Old_Speed_4 = 0;
 8004e2a:	4b71      	ldr	r3, [pc, #452]	@ (8004ff0 <main+0x610>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
	MYDRON.Thrust.Speed_1 = 0;
 8004e32:	4b6f      	ldr	r3, [pc, #444]	@ (8004ff0 <main+0x610>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	MYDRON.Thrust.Speed_2 = 0;
 8004e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ff0 <main+0x610>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	MYDRON.Thrust.Speed_3 = 0;
 8004e42:	4b6b      	ldr	r3, [pc, #428]	@ (8004ff0 <main+0x610>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	MYDRON.Thrust.Speed_4 = 0;
 8004e4a:	4b69      	ldr	r3, [pc, #420]	@ (8004ff0 <main+0x610>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
	MYDRON.Thrust.Thrust_Limit = 10000;
 8004e52:	4b67      	ldr	r3, [pc, #412]	@ (8004ff0 <main+0x610>)
 8004e54:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004e58:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	MYDRON.Thrust.Values = 0;
 8004e5c:	4964      	ldr	r1, [pc, #400]	@ (8004ff0 <main+0x610>)
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	MYDRON.Thrust.Wanted = 0;
 8004e6a:	4b61      	ldr	r3, [pc, #388]	@ (8004ff0 <main+0x610>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	MYDRON.Status.Battery = DRON_BATTERY_OK;
 8004e72:	4b5f      	ldr	r3, [pc, #380]	@ (8004ff0 <main+0x610>)
 8004e74:	2208      	movs	r2, #8
 8004e76:	f883 2155 	strb.w	r2, [r3, #341]	@ 0x155
	MYDRON.Status.Code = DRON_CODE_OK;
 8004e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ff0 <main+0x610>)
 8004e7c:	2205      	movs	r2, #5
 8004e7e:	f883 2156 	strb.w	r2, [r3, #342]	@ 0x156
	MYDRON.Status.Connection = DRON_CONNECTED;
 8004e82:	4b5b      	ldr	r3, [pc, #364]	@ (8004ff0 <main+0x610>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2154 	strb.w	r2, [r3, #340]	@ 0x154
	MYDRON.Status.Wobble = NO_WOBBLE;
 8004e8a:	4b59      	ldr	r3, [pc, #356]	@ (8004ff0 <main+0x610>)
 8004e8c:	220e      	movs	r2, #14
 8004e8e:	f883 2157 	strb.w	r2, [r3, #343]	@ 0x157
//  	PID_FAC_Yaw[2] = d_yawfactor;
//  	PID_FAC_Yaw[4] = 0;


  	//ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
  	Mag_Z = 0;
 8004e92:	4b58      	ldr	r3, [pc, #352]	@ (8004ff4 <main+0x614>)
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 8004e9a:	4b57      	ldr	r3, [pc, #348]	@ (8004ff8 <main+0x618>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	4b56      	ldr	r3, [pc, #344]	@ (8004ffc <main+0x61c>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 8004ea6:	4b56      	ldr	r3, [pc, #344]	@ (8005000 <main+0x620>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
//  	last_MYDRON.Yaw.Wanted_rx = 0;
//  	wanted_thrust = 0;
//  	thrust_limit = 10000;


  	FDP_D_Gain_AR = 0;
 8004eac:	4b55      	ldr	r3, [pc, #340]	@ (8005004 <main+0x624>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 0;
 8004eb2:	4b55      	ldr	r3, [pc, #340]	@ (8005008 <main+0x628>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	801a      	strh	r2, [r3, #0]
//  	SPEED4 = min_speed;
//  	OLD_SPEED1 = min_speed;
//  	OLD_SPEED2 = min_speed;
//  	OLD_SPEED3 = min_speed;
//  	OLD_SPEED4 = min_speed;
  	commandready = 0;
 8004eb8:	4b54      	ldr	r3, [pc, #336]	@ (800500c <main+0x62c>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 8004ebe:	4b54      	ldr	r3, [pc, #336]	@ (8005010 <main+0x630>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 8004ec4:	4b53      	ldr	r3, [pc, #332]	@ (8005014 <main+0x634>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8004eca:	4b53      	ldr	r3, [pc, #332]	@ (8005018 <main+0x638>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 8004ed0:	4b52      	ldr	r3, [pc, #328]	@ (800501c <main+0x63c>)
 8004ed2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004ed6:	601a      	str	r2, [r3, #0]
  	//MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
  	i = 0, loopnum = 0;
 8004ed8:	4b51      	ldr	r3, [pc, #324]	@ (8005020 <main+0x640>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	4b51      	ldr	r3, [pc, #324]	@ (8005024 <main+0x644>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
//  	MYDRON.Rool.Wanted_rx = 0;
//  	MYDRON.Yaw.Wanted_rx = 0;
//  	wanted_gz = 0 ;


  	data.ox = 0;
 8004ee4:	4b50      	ldr	r3, [pc, #320]	@ (8005028 <main+0x648>)
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 8004eec:	4b4e      	ldr	r3, [pc, #312]	@ (8005028 <main+0x648>)
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 8004ef4:	4b4c      	ldr	r3, [pc, #304]	@ (8005028 <main+0x648>)
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 8004efc:	4b4a      	ldr	r3, [pc, #296]	@ (8005028 <main+0x648>)
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 8004f04:	4b48      	ldr	r3, [pc, #288]	@ (8005028 <main+0x648>)
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 8004f0c:	4b46      	ldr	r3, [pc, #280]	@ (8005028 <main+0x648>)
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	609a      	str	r2, [r3, #8]
//  	pitch_ar_error = 0;
//  	rool_ar_error = 0;
//  	yaw_ar_error = 0;


  	NRF24_inte = 0;
 8004f14:	4b45      	ldr	r3, [pc, #276]	@ (800502c <main+0x64c>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 8004f1a:	4a45      	ldr	r2, [pc, #276]	@ (8005030 <main+0x650>)
 8004f1c:	f107 0308 	add.w	r3, r7, #8
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	4611      	mov	r1, r2
 8004f24:	8019      	strh	r1, [r3, #0]
 8004f26:	3302      	adds	r3, #2
 8004f28:	0c12      	lsrs	r2, r2, #16
 8004f2a:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 8004f2c:	4a41      	ldr	r2, [pc, #260]	@ (8005034 <main+0x654>)
 8004f2e:	1d3b      	adds	r3, r7, #4
 8004f30:	6812      	ldr	r2, [r2, #0]
 8004f32:	4611      	mov	r1, r2
 8004f34:	8019      	strh	r1, [r3, #0]
 8004f36:	3302      	adds	r3, #2
 8004f38:	0c12      	lsrs	r2, r2, #16
 8004f3a:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f42:	483d      	ldr	r0, [pc, #244]	@ (8005038 <main+0x658>)
 8004f44:	f008 fccc 	bl	800d8e0 <HAL_GPIO_WritePin>
  	LED_6_1;
 8004f48:	2201      	movs	r2, #1
 8004f4a:	2108      	movs	r1, #8
 8004f4c:	483b      	ldr	r0, [pc, #236]	@ (800503c <main+0x65c>)
 8004f4e:	f008 fcc7 	bl	800d8e0 <HAL_GPIO_WritePin>
  	LED_7_1;
 8004f52:	2201      	movs	r2, #1
 8004f54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f58:	4837      	ldr	r0, [pc, #220]	@ (8005038 <main+0x658>)
 8004f5a:	f008 fcc1 	bl	800d8e0 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f64:	4836      	ldr	r0, [pc, #216]	@ (8005040 <main+0x660>)
 8004f66:	f008 fcbb 	bl	800d8e0 <HAL_GPIO_WritePin>
  	LED_G_1;
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f70:	4832      	ldr	r0, [pc, #200]	@ (800503c <main+0x65c>)
 8004f72:	f008 fcb5 	bl	800d8e0 <HAL_GPIO_WritePin>
  	LED_Y_1;
 8004f76:	2201      	movs	r2, #1
 8004f78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004f7c:	4831      	ldr	r0, [pc, #196]	@ (8005044 <main+0x664>)
 8004f7e:	f008 fcaf 	bl	800d8e0 <HAL_GPIO_WritePin>
  	LED_R_1;
 8004f82:	2201      	movs	r2, #1
 8004f84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f88:	482e      	ldr	r0, [pc, #184]	@ (8005044 <main+0x664>)
 8004f8a:	f008 fca9 	bl	800d8e0 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 8004f8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f92:	f003 fb69 	bl	8008668 <HAL_Delay>
  	LED_G_0;
 8004f96:	2200      	movs	r2, #0
 8004f98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f9c:	4827      	ldr	r0, [pc, #156]	@ (800503c <main+0x65c>)
 8004f9e:	f008 fc9f 	bl	800d8e0 <HAL_GPIO_WritePin>
  	LED_Y_0;
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004fa8:	4826      	ldr	r0, [pc, #152]	@ (8005044 <main+0x664>)
 8004faa:	f008 fc99 	bl	800d8e0 <HAL_GPIO_WritePin>
  	LED_R_0;
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004fb4:	4823      	ldr	r0, [pc, #140]	@ (8005044 <main+0x664>)
 8004fb6:	f008 fc93 	bl	800d8e0 <HAL_GPIO_WritePin>
  	LED_5_0;
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004fc0:	481d      	ldr	r0, [pc, #116]	@ (8005038 <main+0x658>)
 8004fc2:	f008 fc8d 	bl	800d8e0 <HAL_GPIO_WritePin>
  	LED_6_0;
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2108      	movs	r1, #8
 8004fca:	481c      	ldr	r0, [pc, #112]	@ (800503c <main+0x65c>)
 8004fcc:	f008 fc88 	bl	800d8e0 <HAL_GPIO_WritePin>
  	LED_7_0;
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004fd6:	4818      	ldr	r0, [pc, #96]	@ (8005038 <main+0x658>)
 8004fd8:	f008 fc82 	bl	800d8e0 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004fe2:	4817      	ldr	r0, [pc, #92]	@ (8005040 <main+0x660>)
 8004fe4:	f008 fc7c 	bl	800d8e0 <HAL_GPIO_WritePin>


  	for(int i = 0; i < 4000; i++){
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	e036      	b.n	800505c <main+0x67c>
 8004fee:	bf00      	nop
 8004ff0:	00000188 	.word	0x00000188
 8004ff4:	00000054 	.word	0x00000054
 8004ff8:	00000074 	.word	0x00000074
 8004ffc:	00000078 	.word	0x00000078
 8005000:	00000080 	.word	0x00000080
 8005004:	00004194 	.word	0x00004194
 8005008:	00004196 	.word	0x00004196
 800500c:	000041ba 	.word	0x000041ba
 8005010:	000041bb 	.word	0x000041bb
 8005014:	000041c0 	.word	0x000041c0
 8005018:	000041c4 	.word	0x000041c4
 800501c:	000041cc 	.word	0x000041cc
 8005020:	000041d4 	.word	0x000041d4
 8005024:	000041d8 	.word	0x000041d8
 8005028:	00000084 	.word	0x00000084
 800502c:	000041dd 	.word	0x000041dd
 8005030:	0801e114 	.word	0x0801e114
 8005034:	0801e118 	.word	0x0801e118
 8005038:	58020000 	.word	0x58020000
 800503c:	58021000 	.word	0x58021000
 8005040:	58020c00 	.word	0x58020c00
 8005044:	58020400 	.word	0x58020400
  		Old_Data_stack.olddata[i] = 0;
 8005048:	4aae      	ldr	r2, [pc, #696]	@ (8005304 <main+0x924>)
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3301      	adds	r3, #1
 800505a:	61fb      	str	r3, [r7, #28]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8005062:	dbf1      	blt.n	8005048 <main+0x668>
  	}
  	Old_Data_stack.start_pointer = 0;
 8005064:	4ba7      	ldr	r3, [pc, #668]	@ (8005304 <main+0x924>)
 8005066:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800506a:	2200      	movs	r2, #0
 800506c:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 8005070:	4ba4      	ldr	r3, [pc, #656]	@ (8005304 <main+0x924>)
 8005072:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8005076:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800507a:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 800507e:	4ba2      	ldr	r3, [pc, #648]	@ (8005308 <main+0x928>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 8005084:	48a1      	ldr	r0, [pc, #644]	@ (800530c <main+0x92c>)
 8005086:	f010 fc65 	bl	8015954 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 800508a:	2201      	movs	r2, #1
 800508c:	499e      	ldr	r1, [pc, #632]	@ (8005308 <main+0x928>)
 800508e:	48a0      	ldr	r0, [pc, #640]	@ (8005310 <main+0x930>)
 8005090:	f004 f83c 	bl	800910c <HAL_ADC_Start_DMA>
  	LED_R_1;
 8005094:	2201      	movs	r2, #1
 8005096:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800509a:	489e      	ldr	r0, [pc, #632]	@ (8005314 <main+0x934>)
 800509c:	f008 fc20 	bl	800d8e0 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 80050a0:	bf00      	nop
 80050a2:	4b99      	ldr	r3, [pc, #612]	@ (8005308 <main+0x928>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0fb      	beq.n	80050a2 <main+0x6c2>

  	}
  	LED_R_0;
 80050aa:	2200      	movs	r2, #0
 80050ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80050b0:	4898      	ldr	r0, [pc, #608]	@ (8005314 <main+0x934>)
 80050b2:	f008 fc15 	bl	800d8e0 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 80050b6:	f7fe fd83 	bl	8003bc0 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 80050ba:	2104      	movs	r1, #4
 80050bc:	4896      	ldr	r0, [pc, #600]	@ (8005318 <main+0x938>)
 80050be:	f010 fda5 	bl	8015c0c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80050c2:	2108      	movs	r1, #8
 80050c4:	4894      	ldr	r0, [pc, #592]	@ (8005318 <main+0x938>)
 80050c6:	f010 fda1 	bl	8015c0c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80050ca:	210c      	movs	r1, #12
 80050cc:	4892      	ldr	r0, [pc, #584]	@ (8005318 <main+0x938>)
 80050ce:	f010 fd9d 	bl	8015c0c <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 80050d2:	4b92      	ldr	r3, [pc, #584]	@ (800531c <main+0x93c>)
 80050d4:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 fe8c 	bl	8006df8 <RGB_LED_For_BAT>
  	if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT)
 80050e0:	4b8e      	ldr	r3, [pc, #568]	@ (800531c <main+0x93c>)
 80050e2:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80050e6:	2b07      	cmp	r3, #7
 80050e8:	d107      	bne.n	80050fa <main+0x71a>
  	{
  		LED_R_1;
 80050ea:	2201      	movs	r2, #1
 80050ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80050f0:	4888      	ldr	r0, [pc, #544]	@ (8005314 <main+0x934>)
 80050f2:	f008 fbf5 	bl	800d8e0 <HAL_GPIO_WritePin>
  		while(1){
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <main+0x716>

  		}
  	}
  	if(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 80050fa:	4b88      	ldr	r3, [pc, #544]	@ (800531c <main+0x93c>)
 80050fc:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 8005100:	2b09      	cmp	r3, #9
 8005102:	d107      	bne.n	8005114 <main+0x734>
  		LED_R_1;
 8005104:	2201      	movs	r2, #1
 8005106:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800510a:	4882      	ldr	r0, [pc, #520]	@ (8005314 <main+0x934>)
 800510c:	f008 fbe8 	bl	800d8e0 <HAL_GPIO_WritePin>

  		while(1){
 8005110:	bf00      	nop
 8005112:	e7fd      	b.n	8005110 <main+0x730>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 8005114:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005118:	487e      	ldr	r0, [pc, #504]	@ (8005314 <main+0x934>)
 800511a:	f008 fbc9 	bl	800d8b0 <HAL_GPIO_ReadPin>
 800511e:	4603      	mov	r3, r0
 8005120:	461a      	mov	r2, r3
 8005122:	4b7f      	ldr	r3, [pc, #508]	@ (8005320 <main+0x940>)
 8005124:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 8005126:	4b7e      	ldr	r3, [pc, #504]	@ (8005320 <main+0x940>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d103      	bne.n	8005136 <main+0x756>
		SD_enable_Flag = 0;
 800512e:	4b7c      	ldr	r3, [pc, #496]	@ (8005320 <main+0x940>)
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	e002      	b.n	800513c <main+0x75c>
	}
	else{
		SD_enable_Flag = 1;
 8005136:	4b7a      	ldr	r3, [pc, #488]	@ (8005320 <main+0x940>)
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 800513c:	4b78      	ldr	r3, [pc, #480]	@ (8005320 <main+0x940>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d15f      	bne.n	8005204 <main+0x824>
		LED_uSD_1;
 8005144:	2201      	movs	r2, #1
 8005146:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800514a:	4876      	ldr	r0, [pc, #472]	@ (8005324 <main+0x944>)
 800514c:	f008 fbc8 	bl	800d8e0 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 8005150:	2201      	movs	r2, #1
 8005152:	4975      	ldr	r1, [pc, #468]	@ (8005328 <main+0x948>)
 8005154:	4875      	ldr	r0, [pc, #468]	@ (800532c <main+0x94c>)
 8005156:	f017 fc85 	bl	801ca64 <f_mount>
 800515a:	4603      	mov	r3, r0
 800515c:	461a      	mov	r2, r3
 800515e:	4b74      	ldr	r3, [pc, #464]	@ (8005330 <main+0x950>)
 8005160:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 8005162:	4874      	ldr	r0, [pc, #464]	@ (8005334 <main+0x954>)
 8005164:	f018 f8c8 	bl	801d2f8 <f_unlink>
 8005168:	4603      	mov	r3, r0
 800516a:	461a      	mov	r2, r3
 800516c:	4b70      	ldr	r3, [pc, #448]	@ (8005330 <main+0x950>)
 800516e:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 8005170:	2201      	movs	r2, #1
 8005172:	496d      	ldr	r1, [pc, #436]	@ (8005328 <main+0x948>)
 8005174:	486d      	ldr	r0, [pc, #436]	@ (800532c <main+0x94c>)
 8005176:	f017 fc75 	bl	801ca64 <f_mount>
 800517a:	4603      	mov	r3, r0
 800517c:	461a      	mov	r2, r3
 800517e:	4b6c      	ldr	r3, [pc, #432]	@ (8005330 <main+0x950>)
 8005180:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 8005182:	220a      	movs	r2, #10
 8005184:	496c      	ldr	r1, [pc, #432]	@ (8005338 <main+0x958>)
 8005186:	486d      	ldr	r0, [pc, #436]	@ (800533c <main+0x95c>)
 8005188:	f017 fcb2 	bl	801caf0 <f_open>
 800518c:	4603      	mov	r3, r0
 800518e:	461a      	mov	r2, r3
 8005190:	4b67      	ldr	r3, [pc, #412]	@ (8005330 <main+0x950>)
 8005192:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 8005194:	2200      	movs	r2, #0
 8005196:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800519a:	4862      	ldr	r0, [pc, #392]	@ (8005324 <main+0x944>)
 800519c:	f008 fba0 	bl	800d8e0 <HAL_GPIO_WritePin>

		LED_uSD_1;
 80051a0:	2201      	movs	r2, #1
 80051a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80051a6:	485f      	ldr	r0, [pc, #380]	@ (8005324 <main+0x944>)
 80051a8:	f008 fb9a 	bl	800d8e0 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 80051ac:	2300      	movs	r3, #0
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	e007      	b.n	80051c2 <main+0x7e2>
			DataToSendBuffer[i] = 49;
 80051b2:	4a63      	ldr	r2, [pc, #396]	@ (8005340 <main+0x960>)
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	4413      	add	r3, r2
 80051b8:	2231      	movs	r2, #49	@ 0x31
 80051ba:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	3301      	adds	r3, #1
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	4a5f      	ldr	r2, [pc, #380]	@ (8005344 <main+0x964>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	ddf3      	ble.n	80051b2 <main+0x7d2>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 80051ca:	4b5f      	ldr	r3, [pc, #380]	@ (8005348 <main+0x968>)
 80051cc:	2281      	movs	r2, #129	@ 0x81
 80051ce:	495c      	ldr	r1, [pc, #368]	@ (8005340 <main+0x960>)
 80051d0:	485a      	ldr	r0, [pc, #360]	@ (800533c <main+0x95c>)
 80051d2:	f017 fe55 	bl	801ce80 <f_write>
 80051d6:	4603      	mov	r3, r0
 80051d8:	461a      	mov	r2, r3
 80051da:	4b55      	ldr	r3, [pc, #340]	@ (8005330 <main+0x950>)
 80051dc:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 80051de:	4857      	ldr	r0, [pc, #348]	@ (800533c <main+0x95c>)
 80051e0:	f018 f860 	bl	801d2a4 <f_close>
 80051e4:	4603      	mov	r3, r0
 80051e6:	461a      	mov	r2, r3
 80051e8:	4b51      	ldr	r3, [pc, #324]	@ (8005330 <main+0x950>)
 80051ea:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 80051ec:	4b50      	ldr	r3, [pc, #320]	@ (8005330 <main+0x950>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <main+0x818>
			NVIC_SystemReset();
 80051f4:	f7ff fbde 	bl	80049b4 <__NVIC_SystemReset>
			while(1){

			}
		}
		LED_uSD_0;
 80051f8:	2200      	movs	r2, #0
 80051fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80051fe:	4849      	ldr	r0, [pc, #292]	@ (8005324 <main+0x944>)
 8005200:	f008 fb6e 	bl	800d8e0 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 8005204:	2201      	movs	r2, #1
 8005206:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800520a:	4850      	ldr	r0, [pc, #320]	@ (800534c <main+0x96c>)
 800520c:	f008 fb68 	bl	800d8e0 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 8005210:	484f      	ldr	r0, [pc, #316]	@ (8005350 <main+0x970>)
 8005212:	f7fb ffe1 	bl	80011d8 <MPU6050_INIT>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d107      	bne.n	800522c <main+0x84c>
			LED_R_1;
 800521c:	2201      	movs	r2, #1
 800521e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005222:	483c      	ldr	r0, [pc, #240]	@ (8005314 <main+0x934>)
 8005224:	f008 fb5c 	bl	800d8e0 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8005228:	f7ff fbc4 	bl	80049b4 <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 800522c:	2201      	movs	r2, #1
 800522e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005232:	4838      	ldr	r0, [pc, #224]	@ (8005314 <main+0x934>)
 8005234:	f008 fb54 	bl	800d8e0 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION();
 8005238:	f7fc f898 	bl	800136c <MPU6050_CALIBRATION>
		LED_Y_0;
 800523c:	2200      	movs	r2, #0
 800523e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005242:	4834      	ldr	r0, [pc, #208]	@ (8005314 <main+0x934>)
 8005244:	f008 fb4c 	bl	800d8e0 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 8005248:	4841      	ldr	r0, [pc, #260]	@ (8005350 <main+0x970>)
 800524a:	f7fb fa41 	bl	80006d0 <BMP180_init>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d107      	bne.n	8005264 <main+0x884>
			LED_R_1;
 8005254:	2201      	movs	r2, #1
 8005256:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800525a:	482e      	ldr	r0, [pc, #184]	@ (8005314 <main+0x934>)
 800525c:	f008 fb40 	bl	800d8e0 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8005260:	f7ff fba8 	bl	80049b4 <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 8005264:	2201      	movs	r2, #1
 8005266:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800526a:	482a      	ldr	r0, [pc, #168]	@ (8005314 <main+0x934>)
 800526c:	f008 fb38 	bl	800d8e0 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&BMP180.startpres);
 8005270:	4838      	ldr	r0, [pc, #224]	@ (8005354 <main+0x974>)
 8005272:	f7fb fd39 	bl	8000ce8 <BMP180_CALIBRATION>
		LED_Y_0;
 8005276:	2200      	movs	r2, #0
 8005278:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800527c:	4825      	ldr	r0, [pc, #148]	@ (8005314 <main+0x934>)
 800527e:	f008 fb2f 	bl	800d8e0 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 8005282:	4833      	ldr	r0, [pc, #204]	@ (8005350 <main+0x970>)
 8005284:	f7fb fe66 	bl	8000f54 <HMC5883L_Init>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d107      	bne.n	800529e <main+0x8be>
			LED_R_1;
 800528e:	2201      	movs	r2, #1
 8005290:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005294:	481f      	ldr	r0, [pc, #124]	@ (8005314 <main+0x934>)
 8005296:	f008 fb23 	bl	800d8e0 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 800529a:	f7ff fb8b 	bl	80049b4 <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 800529e:	2201      	movs	r2, #1
 80052a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052a4:	481b      	ldr	r0, [pc, #108]	@ (8005314 <main+0x934>)
 80052a6:	f008 fb1b 	bl	800d8e0 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 80052aa:	f7fb ff5f 	bl	800116c <HMC5883L_Calibration>
 80052ae:	4603      	mov	r3, r0
 80052b0:	461a      	mov	r2, r3
 80052b2:	4b29      	ldr	r3, [pc, #164]	@ (8005358 <main+0x978>)
 80052b4:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 80052b6:	2200      	movs	r2, #0
 80052b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052bc:	4815      	ldr	r0, [pc, #84]	@ (8005314 <main+0x934>)
 80052be:	f008 fb0f 	bl	800d8e0 <HAL_GPIO_WritePin>

		LED_5_0;
 80052c2:	2200      	movs	r2, #0
 80052c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052c8:	4820      	ldr	r0, [pc, #128]	@ (800534c <main+0x96c>)
 80052ca:	f008 fb09 	bl	800d8e0 <HAL_GPIO_WritePin>
//		MYDRON.YAW = 0;



	/////////////////////////////// nRF24
		LED_6_1;
 80052ce:	2201      	movs	r2, #1
 80052d0:	2108      	movs	r1, #8
 80052d2:	4822      	ldr	r0, [pc, #136]	@ (800535c <main+0x97c>)
 80052d4:	f008 fb04 	bl	800d8e0 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi1);
 80052d8:	4821      	ldr	r0, [pc, #132]	@ (8005360 <main+0x980>)
 80052da:	f7fd f9b7 	bl	800264c <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 80052de:	f107 0308 	add.w	r3, r7, #8
 80052e2:	4619      	mov	r1, r3
 80052e4:	2000      	movs	r0, #0
 80052e6:	f7fd f80e 	bl	8002306 <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 80052ea:	1d3b      	adds	r3, r7, #4
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fd f843 	bl	8002378 <nRF24_SetTXAddress>
		nRF24_TX_Mode();
 80052f2:	f7fc fe29 	bl	8001f48 <nRF24_TX_Mode>
		NRF24.NRF24_MODE = NRF24_Tx_Mode;
 80052f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005364 <main+0x984>)
 80052f8:	2202      	movs	r2, #2
 80052fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80



		for(int i = 0; i < 32; i++){
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e03a      	b.n	800537a <main+0x99a>
 8005304:	000002e8 	.word	0x000002e8
 8005308:	24000eb0 	.word	0x24000eb0
 800530c:	24000464 	.word	0x24000464
 8005310:	240000ac 	.word	0x240000ac
 8005314:	58020400 	.word	0x58020400
 8005318:	24000380 	.word	0x24000380
 800531c:	00000188 	.word	0x00000188
 8005320:	000041c8 	.word	0x000041c8
 8005324:	58020c00 	.word	0x58020c00
 8005328:	0801e0f8 	.word	0x0801e0f8
 800532c:	24000eb4 	.word	0x24000eb4
 8005330:	24001eec 	.word	0x24001eec
 8005334:	0801e0fc 	.word	0x0801e0fc
 8005338:	0801e108 	.word	0x0801e108
 800533c:	24001ef0 	.word	0x24001ef0
 8005340:	24002f28 	.word	0x24002f28
 8005344:	0001f7e7 	.word	0x0001f7e7
 8005348:	24002f24 	.word	0x24002f24
 800534c:	58020000 	.word	0x58020000
 8005350:	24000198 	.word	0x24000198
 8005354:	000000f0 	.word	0x000000f0
 8005358:	00000068 	.word	0x00000068
 800535c:	58021000 	.word	0x58021000
 8005360:	240001ec 	.word	0x240001ec
 8005364:	000000fc 	.word	0x000000fc
			NRF24.Txcode[i] = 0;
 8005368:	4ab3      	ldr	r2, [pc, #716]	@ (8005638 <main+0xc58>)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	4413      	add	r3, r2
 800536e:	3360      	adds	r3, #96	@ 0x60
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	3301      	adds	r3, #1
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b1f      	cmp	r3, #31
 800537e:	ddf3      	ble.n	8005368 <main+0x988>
		}
		NRF24.Txcode[22] = 'd';
 8005380:	4bad      	ldr	r3, [pc, #692]	@ (8005638 <main+0xc58>)
 8005382:	2264      	movs	r2, #100	@ 0x64
 8005384:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
		NRF24.Txcode[23] = 'r';
 8005388:	4bab      	ldr	r3, [pc, #684]	@ (8005638 <main+0xc58>)
 800538a:	2272      	movs	r2, #114	@ 0x72
 800538c:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
		NRF24.Txcode[24] = 'o';
 8005390:	4ba9      	ldr	r3, [pc, #676]	@ (8005638 <main+0xc58>)
 8005392:	226f      	movs	r2, #111	@ 0x6f
 8005394:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
		NRF24.Txcode[25] = 'n';
 8005398:	4ba7      	ldr	r3, [pc, #668]	@ (8005638 <main+0xc58>)
 800539a:	226e      	movs	r2, #110	@ 0x6e
 800539c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
		NRF24.Txcode[26] = '2';
 80053a0:	4ba5      	ldr	r3, [pc, #660]	@ (8005638 <main+0xc58>)
 80053a2:	2232      	movs	r2, #50	@ 0x32
 80053a4:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
		NRF24.Txcode[27] = 'c';
 80053a8:	4ba3      	ldr	r3, [pc, #652]	@ (8005638 <main+0xc58>)
 80053aa:	2263      	movs	r2, #99	@ 0x63
 80053ac:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
		NRF24.Txcode[28] = '1';
 80053b0:	4ba1      	ldr	r3, [pc, #644]	@ (8005638 <main+0xc58>)
 80053b2:	2231      	movs	r2, #49	@ 0x31
 80053b4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
		NRF24.Txcode[29] = 'z';
 80053b8:	4b9f      	ldr	r3, [pc, #636]	@ (8005638 <main+0xc58>)
 80053ba:	227a      	movs	r2, #122	@ 0x7a
 80053bc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
		NRF24.Txcode[30] = 'a';
 80053c0:	4b9d      	ldr	r3, [pc, #628]	@ (8005638 <main+0xc58>)
 80053c2:	2261      	movs	r2, #97	@ 0x61
 80053c4:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
		NRF24.Txcode[31] = '7';
 80053c8:	4b9b      	ldr	r3, [pc, #620]	@ (8005638 <main+0xc58>)
 80053ca:	2237      	movs	r2, #55	@ 0x37
 80053cc:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f



		nRF24_WriteTXPayload(NRF24.Txcode);
 80053d0:	489a      	ldr	r0, [pc, #616]	@ (800563c <main+0xc5c>)
 80053d2:	f7fd f881 	bl	80024d8 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 80053d6:	f7fd f8a1 	bl	800251c <nRF24_WaitTX>
		nRF24_RX_Mode();
 80053da:	f7fc fd7f 	bl	8001edc <nRF24_RX_Mode>
		NRF24.NRF24_MODE = NRF24_Rx_Mode;
 80053de:	4b96      	ldr	r3, [pc, #600]	@ (8005638 <main+0xc58>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

		uint8_t cunter = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 80053ea:	e022      	b.n	8005432 <main+0xa52>
			LED_G_1;
 80053ec:	2201      	movs	r2, #1
 80053ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053f2:	4893      	ldr	r0, [pc, #588]	@ (8005640 <main+0xc60>)
 80053f4:	f008 fa74 	bl	800d8e0 <HAL_GPIO_WritePin>
			LED_Y_1;
 80053f8:	2201      	movs	r2, #1
 80053fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80053fe:	4891      	ldr	r0, [pc, #580]	@ (8005644 <main+0xc64>)
 8005400:	f008 fa6e 	bl	800d8e0 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005404:	2001      	movs	r0, #1
 8005406:	f003 f92f 	bl	8008668 <HAL_Delay>
			LED_G_0;
 800540a:	2200      	movs	r2, #0
 800540c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005410:	488b      	ldr	r0, [pc, #556]	@ (8005640 <main+0xc60>)
 8005412:	f008 fa65 	bl	800d8e0 <HAL_GPIO_WritePin>
			LED_Y_0;
 8005416:	2200      	movs	r2, #0
 8005418:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800541c:	4889      	ldr	r0, [pc, #548]	@ (8005644 <main+0xc64>)
 800541e:	f008 fa5f 	bl	800d8e0 <HAL_GPIO_WritePin>

			cunter++;
 8005422:	7cfb      	ldrb	r3, [r7, #19]
 8005424:	3301      	adds	r3, #1
 8005426:	74fb      	strb	r3, [r7, #19]
			if(cunter == 200){
 8005428:	7cfb      	ldrb	r3, [r7, #19]
 800542a:	2bc8      	cmp	r3, #200	@ 0xc8
 800542c:	d101      	bne.n	8005432 <main+0xa52>
				NVIC_SystemReset();
 800542e:	f7ff fac1 	bl	80049b4 <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005432:	2000      	movs	r0, #0
 8005434:	f7fd f8ea 	bl	800260c <nRF24_IsBitSetInFifoStatus>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d0d6      	beq.n	80053ec <main+0xa0c>
			}
		}

		while(NRF24_inte != 1){
 800543e:	bf00      	nop
 8005440:	4b81      	ldr	r3, [pc, #516]	@ (8005648 <main+0xc68>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d1fb      	bne.n	8005440 <main+0xa60>

		}
		nRF24_ReadRXPaylaod(NRF24.RxData);
 8005448:	487b      	ldr	r0, [pc, #492]	@ (8005638 <main+0xc58>)
 800544a:	f7fd f88f 	bl	800256c <nRF24_ReadRXPaylaod>
		STARTUP = 0;
 800544e:	4b7f      	ldr	r3, [pc, #508]	@ (800564c <main+0xc6c>)
 8005450:	2200      	movs	r2, #0
 8005452:	701a      	strb	r2, [r3, #0]
		LED_6_0;
 8005454:	2200      	movs	r2, #0
 8005456:	2108      	movs	r1, #8
 8005458:	4879      	ldr	r0, [pc, #484]	@ (8005640 <main+0xc60>)
 800545a:	f008 fa41 	bl	800d8e0 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 800545e:	230c      	movs	r3, #12
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e00c      	b.n	800547e <main+0xa9e>
			NRF24.Rxcode[i] = NRF24.RxData[i];
 8005464:	4a74      	ldr	r2, [pc, #464]	@ (8005638 <main+0xc58>)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	7819      	ldrb	r1, [r3, #0]
 800546c:	4a72      	ldr	r2, [pc, #456]	@ (8005638 <main+0xc58>)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	3340      	adds	r3, #64	@ 0x40
 8005474:	460a      	mov	r2, r1
 8005476:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3301      	adds	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b15      	cmp	r3, #21
 8005482:	ddef      	ble.n	8005464 <main+0xa84>
		}
	///////////////////////////////////////////////////////////////////////
		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005484:	4872      	ldr	r0, [pc, #456]	@ (8005650 <main+0xc70>)
 8005486:	f010 fae3 	bl	8015a50 <HAL_TIM_Base_Start_IT>

		ESC_INT(&htim3);
 800548a:	4872      	ldr	r0, [pc, #456]	@ (8005654 <main+0xc74>)
 800548c:	f7fb fd18 	bl	8000ec0 <ESC_INT>

		LED_7_1;
 8005490:	2201      	movs	r2, #1
 8005492:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005496:	4870      	ldr	r0, [pc, #448]	@ (8005658 <main+0xc78>)
 8005498:	f008 fa22 	bl	800d8e0 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 800549c:	2201      	movs	r2, #1
 800549e:	496f      	ldr	r1, [pc, #444]	@ (800565c <main+0xc7c>)
 80054a0:	486f      	ldr	r0, [pc, #444]	@ (8005660 <main+0xc80>)
 80054a2:	f012 f931 	bl	8017708 <HAL_UART_Receive_IT>
		LED_7_0;
 80054a6:	2200      	movs	r2, #0
 80054a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80054ac:	486a      	ldr	r0, [pc, #424]	@ (8005658 <main+0xc78>)
 80054ae:	f008 fa17 	bl	800d8e0 <HAL_GPIO_WritePin>

//		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms

	  	RGB_LED_For_BAT(MYDRON.batterysize);
 80054b2:	4b6c      	ldr	r3, [pc, #432]	@ (8005664 <main+0xc84>)
 80054b4:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 fc9c 	bl	8006df8 <RGB_LED_For_BAT>

	  	if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT)
 80054c0:	4b68      	ldr	r3, [pc, #416]	@ (8005664 <main+0xc84>)
 80054c2:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80054c6:	2b07      	cmp	r3, #7
 80054c8:	d107      	bne.n	80054da <main+0xafa>
	  	{
	  		LED_R_1;
 80054ca:	2201      	movs	r2, #1
 80054cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80054d0:	485c      	ldr	r0, [pc, #368]	@ (8005644 <main+0xc64>)
 80054d2:	f008 fa05 	bl	800d8e0 <HAL_GPIO_WritePin>
	  		while(1){
 80054d6:	bf00      	nop
 80054d8:	e7fd      	b.n	80054d6 <main+0xaf6>

	  		}
	  	}

	  	if(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 80054da:	4b62      	ldr	r3, [pc, #392]	@ (8005664 <main+0xc84>)
 80054dc:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80054e0:	2b09      	cmp	r3, #9
 80054e2:	d107      	bne.n	80054f4 <main+0xb14>
	  		LED_R_1;
 80054e4:	2201      	movs	r2, #1
 80054e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80054ea:	4856      	ldr	r0, [pc, #344]	@ (8005644 <main+0xc64>)
 80054ec:	f008 f9f8 	bl	800d8e0 <HAL_GPIO_WritePin>
	  		while(1){
 80054f0:	bf00      	nop
 80054f2:	e7fd      	b.n	80054f0 <main+0xb10>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT){
 80054f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005664 <main+0xc84>)
 80054f6:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80054fa:	2b07      	cmp	r3, #7
 80054fc:	d10c      	bne.n	8005518 <main+0xb38>
	  			LED_R_1;
 80054fe:	2201      	movs	r2, #1
 8005500:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005504:	484f      	ldr	r0, [pc, #316]	@ (8005644 <main+0xc64>)
 8005506:	f008 f9eb 	bl	800d8e0 <HAL_GPIO_WritePin>
	  			MYDRON.Thrust.Thrust_Limit = MYDRON.Thrust.Now;
 800550a:	4b56      	ldr	r3, [pc, #344]	@ (8005664 <main+0xc84>)
 800550c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8005510:	b21a      	sxth	r2, r3
 8005512:	4b54      	ldr	r3, [pc, #336]	@ (8005664 <main+0xc84>)
 8005514:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	  		}
	  		if(MYDRON.Status.Battery == DRON_BATTERY_OK){
 8005518:	4b52      	ldr	r3, [pc, #328]	@ (8005664 <main+0xc84>)
 800551a:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 800551e:	2b08      	cmp	r3, #8
 8005520:	d104      	bne.n	800552c <main+0xb4c>
	  			MYDRON.Thrust.Thrust_Limit = 10000;
 8005522:	4b50      	ldr	r3, [pc, #320]	@ (8005664 <main+0xc84>)
 8005524:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005528:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	  		}
	  		if(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 800552c:	4b4d      	ldr	r3, [pc, #308]	@ (8005664 <main+0xc84>)
 800552e:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 8005532:	2b09      	cmp	r3, #9
 8005534:	d119      	bne.n	800556a <main+0xb8a>
	  			ESC_POWER_1;
 8005536:	2201      	movs	r2, #1
 8005538:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800553c:	484a      	ldr	r0, [pc, #296]	@ (8005668 <main+0xc88>)
 800553e:	f008 f9cf 	bl	800d8e0 <HAL_GPIO_WritePin>
	  			LED_R_1;
 8005542:	2201      	movs	r2, #1
 8005544:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005548:	483e      	ldr	r0, [pc, #248]	@ (8005644 <main+0xc64>)
 800554a:	f008 f9c9 	bl	800d8e0 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 800554e:	4847      	ldr	r0, [pc, #284]	@ (800566c <main+0xc8c>)
 8005550:	f017 fea8 	bl	801d2a4 <f_close>
	  			while(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 8005554:	e004      	b.n	8005560 <main+0xb80>
	  				HAL_Delay(10);
 8005556:	200a      	movs	r0, #10
 8005558:	f003 f886 	bl	8008668 <HAL_Delay>
	  				Get_batteryvalue();
 800555c:	f7fe fb30 	bl	8003bc0 <Get_batteryvalue>
	  			while(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 8005560:	4b40      	ldr	r3, [pc, #256]	@ (8005664 <main+0xc84>)
 8005562:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 8005566:	2b09      	cmp	r3, #9
 8005568:	d0f5      	beq.n	8005556 <main+0xb76>
	  			}
	  		}

	  		if(commandready == 1){
 800556a:	4b41      	ldr	r3, [pc, #260]	@ (8005670 <main+0xc90>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d111      	bne.n	8005596 <main+0xbb6>
	  			LED_7_1;
 8005572:	2201      	movs	r2, #1
 8005574:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005578:	4837      	ldr	r0, [pc, #220]	@ (8005658 <main+0xc78>)
 800557a:	f008 f9b1 	bl	800d8e0 <HAL_GPIO_WritePin>
	  			interpretcommand();
 800557e:	f7fd f8cf 	bl	8002720 <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005582:	493c      	ldr	r1, [pc, #240]	@ (8005674 <main+0xc94>)
 8005584:	483c      	ldr	r0, [pc, #240]	@ (8005678 <main+0xc98>)
 8005586:	f7fd f919 	bl	80027bc <executecommand>
	  			LED_7_0;
 800558a:	2200      	movs	r2, #0
 800558c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005590:	4831      	ldr	r0, [pc, #196]	@ (8005658 <main+0xc78>)
 8005592:	f008 f9a5 	bl	800d8e0 <HAL_GPIO_WritePin>
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005596:	4b39      	ldr	r3, [pc, #228]	@ (800567c <main+0xc9c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b01      	cmp	r3, #1
 800559c:	f040 8085 	bne.w	80056aa <main+0xcca>
 80055a0:	4b37      	ldr	r3, [pc, #220]	@ (8005680 <main+0xca0>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f040 8080 	bne.w	80056aa <main+0xcca>
 80055aa:	4b36      	ldr	r3, [pc, #216]	@ (8005684 <main+0xca4>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d17b      	bne.n	80056aa <main+0xcca>
	  			TIM_inte_SD = 0;
 80055b2:	4b32      	ldr	r3, [pc, #200]	@ (800567c <main+0xc9c>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 80055b8:	4b33      	ldr	r3, [pc, #204]	@ (8005688 <main+0xca8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 fdb1 	bl	8007124 <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 80055c2:	4b31      	ldr	r3, [pc, #196]	@ (8005688 <main+0xca8>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d12b      	bne.n	8005626 <main+0xc46>
	  				SD_In_Use = 1;
 80055ce:	4b2f      	ldr	r3, [pc, #188]	@ (800568c <main+0xcac>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 80055d4:	2201      	movs	r2, #1
 80055d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055da:	482d      	ldr	r0, [pc, #180]	@ (8005690 <main+0xcb0>)
 80055dc:	f008 f980 	bl	800d8e0 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 80055e0:	2232      	movs	r2, #50	@ 0x32
 80055e2:	492c      	ldr	r1, [pc, #176]	@ (8005694 <main+0xcb4>)
 80055e4:	4821      	ldr	r0, [pc, #132]	@ (800566c <main+0xc8c>)
 80055e6:	f017 fa83 	bl	801caf0 <f_open>
 80055ea:	4603      	mov	r3, r0
 80055ec:	461a      	mov	r2, r3
 80055ee:	4b24      	ldr	r3, [pc, #144]	@ (8005680 <main+0xca0>)
 80055f0:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 80055f2:	4b29      	ldr	r3, [pc, #164]	@ (8005698 <main+0xcb8>)
 80055f4:	4a29      	ldr	r2, [pc, #164]	@ (800569c <main+0xcbc>)
 80055f6:	492a      	ldr	r1, [pc, #168]	@ (80056a0 <main+0xcc0>)
 80055f8:	481c      	ldr	r0, [pc, #112]	@ (800566c <main+0xc8c>)
 80055fa:	f017 fc41 	bl	801ce80 <f_write>
 80055fe:	4603      	mov	r3, r0
 8005600:	461a      	mov	r2, r3
 8005602:	4b1f      	ldr	r3, [pc, #124]	@ (8005680 <main+0xca0>)
 8005604:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005606:	4819      	ldr	r0, [pc, #100]	@ (800566c <main+0xc8c>)
 8005608:	f017 fe4c 	bl	801d2a4 <f_close>
 800560c:	4603      	mov	r3, r0
 800560e:	461a      	mov	r2, r3
 8005610:	4b1b      	ldr	r3, [pc, #108]	@ (8005680 <main+0xca0>)
 8005612:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005614:	2200      	movs	r2, #0
 8005616:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800561a:	481d      	ldr	r0, [pc, #116]	@ (8005690 <main+0xcb0>)
 800561c:	f008 f960 	bl	800d8e0 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005620:	4b1a      	ldr	r3, [pc, #104]	@ (800568c <main+0xcac>)
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
	  				}

	  			Mainloop_Number = Mainloop_Number < 1000 ? Mainloop_Number+1 : 0;
 8005626:	4b18      	ldr	r3, [pc, #96]	@ (8005688 <main+0xca8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800562e:	d239      	bcs.n	80056a4 <main+0xcc4>
 8005630:	4b15      	ldr	r3, [pc, #84]	@ (8005688 <main+0xca8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3301      	adds	r3, #1
 8005636:	e036      	b.n	80056a6 <main+0xcc6>
 8005638:	000000fc 	.word	0x000000fc
 800563c:	0000015c 	.word	0x0000015c
 8005640:	58021000 	.word	0x58021000
 8005644:	58020400 	.word	0x58020400
 8005648:	000041dd 	.word	0x000041dd
 800564c:	0000007c 	.word	0x0000007c
 8005650:	240003cc 	.word	0x240003cc
 8005654:	24000418 	.word	0x24000418
 8005658:	58020000 	.word	0x58020000
 800565c:	000041bc 	.word	0x000041bc
 8005660:	240004b0 	.word	0x240004b0
 8005664:	00000188 	.word	0x00000188
 8005668:	58021800 	.word	0x58021800
 800566c:	24001ef0 	.word	0x24001ef0
 8005670:	000041ba 	.word	0x000041ba
 8005674:	0000419c 	.word	0x0000419c
 8005678:	000041ac 	.word	0x000041ac
 800567c:	00000074 	.word	0x00000074
 8005680:	24001eec 	.word	0x24001eec
 8005684:	000041c8 	.word	0x000041c8
 8005688:	000041c0 	.word	0x000041c0
 800568c:	000041c4 	.word	0x000041c4
 8005690:	58020c00 	.word	0x58020c00
 8005694:	0801e108 	.word	0x0801e108
 8005698:	24002f24 	.word	0x24002f24
 800569c:	0001f7e8 	.word	0x0001f7e8
 80056a0:	24002f28 	.word	0x24002f28
 80056a4:	2300      	movs	r3, #0
 80056a6:	4a17      	ldr	r2, [pc, #92]	@ (8005704 <main+0xd24>)
 80056a8:	6013      	str	r3, [r2, #0]
	  		}


	  		if(MYDRON.Status.Connection == DRON_DISCONNECTED){
 80056aa:	4b17      	ldr	r3, [pc, #92]	@ (8005708 <main+0xd28>)
 80056ac:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d118      	bne.n	80056e6 <main+0xd06>
	  			if(NRF24.Step == 0){
 80056b4:	4b15      	ldr	r3, [pc, #84]	@ (800570c <main+0xd2c>)
 80056b6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <main+0xcf4>
	  				NRF24.Step = 2;
 80056be:	4b13      	ldr	r3, [pc, #76]	@ (800570c <main+0xd2c>)
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	  				NRF24.Status = NRF24_Ready;
 80056c6:	4b11      	ldr	r3, [pc, #68]	@ (800570c <main+0xd2c>)
 80056c8:	2204      	movs	r2, #4
 80056ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	  				HAL_Delay(10);
 80056ce:	200a      	movs	r0, #10
 80056d0:	f002 ffca 	bl	8008668 <HAL_Delay>
	  			}
	  			if(NRF24.Step == 9){
 80056d4:	4b0d      	ldr	r3, [pc, #52]	@ (800570c <main+0xd2c>)
 80056d6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80056da:	2b09      	cmp	r3, #9
 80056dc:	d103      	bne.n	80056e6 <main+0xd06>
	  				NRF24.Step = 0;
 80056de:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <main+0xd2c>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

	  			}
	  		}
	  		if(TIM_inte == 1){
 80056e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005710 <main+0xd30>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	f47f af02 	bne.w	80054f4 <main+0xb14>
	  			LED_R_0;
 80056f0:	2200      	movs	r2, #0
 80056f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056f6:	4807      	ldr	r0, [pc, #28]	@ (8005714 <main+0xd34>)
 80056f8:	f008 f8f2 	bl	800d8e0 <HAL_GPIO_WritePin>
	  			TIM_inte = 0;
 80056fc:	4b04      	ldr	r3, [pc, #16]	@ (8005710 <main+0xd30>)
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
	  if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT){
 8005702:	e6f7      	b.n	80054f4 <main+0xb14>
 8005704:	000041c0 	.word	0x000041c0
 8005708:	00000188 	.word	0x00000188
 800570c:	000000fc 	.word	0x000000fc
 8005710:	00000078 	.word	0x00000078
 8005714:	58020400 	.word	0x58020400

08005718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b09c      	sub	sp, #112	@ 0x70
 800571c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800571e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005722:	224c      	movs	r2, #76	@ 0x4c
 8005724:	2100      	movs	r1, #0
 8005726:	4618      	mov	r0, r3
 8005728:	f017 ffb4 	bl	801d694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800572c:	1d3b      	adds	r3, r7, #4
 800572e:	2220      	movs	r2, #32
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f017 ffae 	bl	801d694 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005738:	2002      	movs	r0, #2
 800573a:	f00a fd79 	bl	8010230 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800573e:	2300      	movs	r3, #0
 8005740:	603b      	str	r3, [r7, #0]
 8005742:	4b2d      	ldr	r3, [pc, #180]	@ (80057f8 <SystemClock_Config+0xe0>)
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	4a2c      	ldr	r2, [pc, #176]	@ (80057f8 <SystemClock_Config+0xe0>)
 8005748:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800574c:	6193      	str	r3, [r2, #24]
 800574e:	4b2a      	ldr	r3, [pc, #168]	@ (80057f8 <SystemClock_Config+0xe0>)
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800575a:	bf00      	nop
 800575c:	4b26      	ldr	r3, [pc, #152]	@ (80057f8 <SystemClock_Config+0xe0>)
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005768:	d1f8      	bne.n	800575c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 800576a:	2311      	movs	r3, #17
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800576e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005772:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005774:	2380      	movs	r3, #128	@ 0x80
 8005776:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005778:	2310      	movs	r3, #16
 800577a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800577c:	2302      	movs	r3, #2
 800577e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005780:	2302      	movs	r3, #2
 8005782:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005784:	2303      	movs	r3, #3
 8005786:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005788:	2344      	movs	r3, #68	@ 0x44
 800578a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800578c:	2301      	movs	r3, #1
 800578e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005790:	2302      	movs	r3, #2
 8005792:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005794:	2302      	movs	r3, #2
 8005796:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005798:	230c      	movs	r3, #12
 800579a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800579c:	2300      	movs	r3, #0
 800579e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80057a0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80057a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057aa:	4618      	mov	r0, r3
 80057ac:	f00a fd7a 	bl	80102a4 <HAL_RCC_OscConfig>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80057b6:	f001 ff9b 	bl	80076f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057ba:	233f      	movs	r3, #63	@ 0x3f
 80057bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057be:	2303      	movs	r3, #3
 80057c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80057c6:	2308      	movs	r3, #8
 80057c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80057ca:	2340      	movs	r3, #64	@ 0x40
 80057cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80057ce:	2340      	movs	r3, #64	@ 0x40
 80057d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80057d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80057d8:	2340      	movs	r3, #64	@ 0x40
 80057da:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80057dc:	1d3b      	adds	r3, r7, #4
 80057de:	2103      	movs	r1, #3
 80057e0:	4618      	mov	r0, r3
 80057e2:	f00b f939 	bl	8010a58 <HAL_RCC_ClockConfig>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80057ec:	f001 ff80 	bl	80076f0 <Error_Handler>
  }
}
 80057f0:	bf00      	nop
 80057f2:	3770      	adds	r7, #112	@ 0x70
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	58024800 	.word	0x58024800

080057fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b0ae      	sub	sp, #184	@ 0xb8
 8005800:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005802:	463b      	mov	r3, r7
 8005804:	22b8      	movs	r2, #184	@ 0xb8
 8005806:	2100      	movs	r1, #0
 8005808:	4618      	mov	r0, r3
 800580a:	f017 ff43 	bl	801d694 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2
 800580e:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 800581a:	2316      	movs	r3, #22
 800581c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 800581e:	23c0      	movs	r3, #192	@ 0xc0
 8005820:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8005822:	2303      	movs	r3, #3
 8005824:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005826:	2302      	movs	r3, #2
 8005828:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800582a:	2302      	movs	r3, #2
 800582c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8005832:	2320      	movs	r3, #32
 8005834:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800583a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800583e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8005840:	2300      	movs	r3, #0
 8005842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005846:	463b      	mov	r3, r7
 8005848:	4618      	mov	r0, r3
 800584a:	f00b fc91 	bl	8011170 <HAL_RCCEx_PeriphCLKConfig>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8005854:	f001 ff4c 	bl	80076f0 <Error_Handler>
  }
}
 8005858:	bf00      	nop
 800585a:	37b8      	adds	r7, #184	@ 0xb8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4aaa      	ldr	r2, [pc, #680]	@ (8005b14 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	f040 81d6 	bne.w	8005c1e <HAL_TIM_PeriodElapsedCallback+0x3be>
	{
		TIM_inte_SD = 1;
 8005872:	4ba9      	ldr	r3, [pc, #676]	@ (8005b18 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8005874:	2201      	movs	r2, #1
 8005876:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 8005878:	4ba8      	ldr	r3, [pc, #672]	@ (8005b1c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 800587e:	4ba8      	ldr	r3, [pc, #672]	@ (8005b20 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3301      	adds	r3, #1
 8005884:	4aa6      	ldr	r2, [pc, #664]	@ (8005b20 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005886:	6013      	str	r3, [r2, #0]

		if(NRF24.Timer_1 == 0){
 8005888:	4ba6      	ldr	r3, [pc, #664]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800588a:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800588e:	2b00      	cmp	r3, #0
 8005890:	f040 8094 	bne.w	80059bc <HAL_TIM_PeriodElapsedCallback+0x15c>
			if(NRF24.Step == 2  && NRF24.Status == NRF24_Ready){
 8005894:	4ba3      	ldr	r3, [pc, #652]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005896:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800589a:	2b02      	cmp	r3, #2
 800589c:	d11c      	bne.n	80058d8 <HAL_TIM_PeriodElapsedCallback+0x78>
 800589e:	4ba1      	ldr	r3, [pc, #644]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80058a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d117      	bne.n	80058d8 <HAL_TIM_PeriodElapsedCallback+0x78>
				LED_6_1;
 80058a8:	2201      	movs	r2, #1
 80058aa:	2108      	movs	r1, #8
 80058ac:	489e      	ldr	r0, [pc, #632]	@ (8005b28 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80058ae:	f008 f817 	bl	800d8e0 <HAL_GPIO_WritePin>
				nRF24_TX_Mode();
 80058b2:	f7fc fb49 	bl	8001f48 <nRF24_TX_Mode>
				LED_6_0;
 80058b6:	2200      	movs	r2, #0
 80058b8:	2108      	movs	r1, #8
 80058ba:	489b      	ldr	r0, [pc, #620]	@ (8005b28 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80058bc:	f008 f810 	bl	800d8e0 <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 3
 80058c0:	4b98      	ldr	r3, [pc, #608]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80058c2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80058c6:	3301      	adds	r3, #1
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	4b96      	ldr	r3, [pc, #600]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80058cc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
				NRF24.Timer_1 = 1;
 80058d0:	4b94      	ldr	r3, [pc, #592]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			}
			if(NRF24.Step == 3 && NRF24.Timer_1 == 0){//todo
 80058d8:	4b92      	ldr	r3, [pc, #584]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80058da:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d12d      	bne.n	800593e <HAL_TIM_PeriodElapsedCallback+0xde>
 80058e2:	4b90      	ldr	r3, [pc, #576]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80058e4:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d128      	bne.n	800593e <HAL_TIM_PeriodElapsedCallback+0xde>
				NRF24.Status = NRF24_Ready;
 80058ec:	4b8d      	ldr	r3, [pc, #564]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80058ee:	2204      	movs	r2, #4
 80058f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
				NRF24.NRF24_MODE = NRF24_Tx_Mode;
 80058f4:	4b8b      	ldr	r3, [pc, #556]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				NRF24.TxData[10] = (MYDRON.Status.Connection == DRON_DISCONNECTED) ? 1: 0;
 80058fc:	4b8b      	ldr	r3, [pc, #556]	@ (8005b2c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80058fe:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8005902:	2b02      	cmp	r3, #2
 8005904:	bf0c      	ite	eq
 8005906:	2301      	moveq	r3, #1
 8005908:	2300      	movne	r3, #0
 800590a:	b2db      	uxtb	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	4b85      	ldr	r3, [pc, #532]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005910:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

				LED_6_1;
 8005914:	2201      	movs	r2, #1
 8005916:	2108      	movs	r1, #8
 8005918:	4883      	ldr	r0, [pc, #524]	@ (8005b28 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800591a:	f007 ffe1 	bl	800d8e0 <HAL_GPIO_WritePin>
				nRF24_WriteTXPayload_IT(NRF24.TxData);
 800591e:	4884      	ldr	r0, [pc, #528]	@ (8005b30 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005920:	f7fc fde8 	bl	80024f4 <nRF24_WriteTXPayload_IT>
				LED_6_0;
 8005924:	2200      	movs	r2, #0
 8005926:	2108      	movs	r1, #8
 8005928:	487f      	ldr	r0, [pc, #508]	@ (8005b28 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800592a:	f007 ffd9 	bl	800d8e0 <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 4
 800592e:	4b7d      	ldr	r3, [pc, #500]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005930:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005934:	3301      	adds	r3, #1
 8005936:	b2da      	uxtb	r2, r3
 8005938:	4b7a      	ldr	r3, [pc, #488]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800593a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			}
			if(NRF24.Step == 5){
 800593e:	4b79      	ldr	r3, [pc, #484]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005940:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005944:	2b05      	cmp	r3, #5
 8005946:	d10c      	bne.n	8005962 <HAL_TIM_PeriodElapsedCallback+0x102>
				NRF24_CE_LOW;
 8005948:	2200      	movs	r2, #0
 800594a:	2140      	movs	r1, #64	@ 0x40
 800594c:	4879      	ldr	r0, [pc, #484]	@ (8005b34 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800594e:	f007 ffc7 	bl	800d8e0 <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 6
 8005952:	4b74      	ldr	r3, [pc, #464]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005954:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005958:	3301      	adds	r3, #1
 800595a:	b2da      	uxtb	r2, r3
 800595c:	4b71      	ldr	r3, [pc, #452]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800595e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			}
			if(NRF24.Step == 6){
 8005962:	4b70      	ldr	r3, [pc, #448]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005964:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005968:	2b06      	cmp	r3, #6
 800596a:	d127      	bne.n	80059bc <HAL_TIM_PeriodElapsedCallback+0x15c>
				LED_6_1;
 800596c:	2201      	movs	r2, #1
 800596e:	2108      	movs	r1, #8
 8005970:	486d      	ldr	r0, [pc, #436]	@ (8005b28 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005972:	f007 ffb5 	bl	800d8e0 <HAL_GPIO_WritePin>
				uint8_t status = nRF24_ReadStatus();
 8005976:	f7fc fb72 	bl	800205e <nRF24_ReadStatus>
 800597a:	4603      	mov	r3, r0
 800597c:	72fb      	strb	r3, [r7, #11]
				if(((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS)))){//nRF24_WaitTX()
 800597e:	7afb      	ldrb	r3, [r7, #11]
 8005980:	f003 0310 	and.w	r3, r3, #16
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <HAL_TIM_PeriodElapsedCallback+0x132>
 8005988:	7afb      	ldrb	r3, [r7, #11]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00f      	beq.n	80059b2 <HAL_TIM_PeriodElapsedCallback+0x152>
					NRF24.Timer_2 = 1;
 8005992:	4b64      	ldr	r3, [pc, #400]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
					NRF24.Status = NRF24_Ready;
 800599a:	4b62      	ldr	r3, [pc, #392]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800599c:	2204      	movs	r2, #4
 800599e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
					NRF24.Step++;//Step 7
 80059a2:	4b60      	ldr	r3, [pc, #384]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80059a4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80059a8:	3301      	adds	r3, #1
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	4b5d      	ldr	r3, [pc, #372]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80059ae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
				}
				LED_6_0;
 80059b2:	2200      	movs	r2, #0
 80059b4:	2108      	movs	r1, #8
 80059b6:	485c      	ldr	r0, [pc, #368]	@ (8005b28 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80059b8:	f007 ff92 	bl	800d8e0 <HAL_GPIO_WritePin>
			}
		}
		if(NRF24.Timer_2 == 0 && NRF24.Step == 7 && NRF24.Status == NRF24_Ready){
 80059bc:	4b59      	ldr	r3, [pc, #356]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80059be:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d121      	bne.n	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1aa>
 80059c6:	4b57      	ldr	r3, [pc, #348]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80059c8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80059cc:	2b07      	cmp	r3, #7
 80059ce:	d11c      	bne.n	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1aa>
 80059d0:	4b54      	ldr	r3, [pc, #336]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80059d2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d117      	bne.n	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1aa>
			LED_6_1;
 80059da:	2201      	movs	r2, #1
 80059dc:	2108      	movs	r1, #8
 80059de:	4852      	ldr	r0, [pc, #328]	@ (8005b28 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80059e0:	f007 ff7e 	bl	800d8e0 <HAL_GPIO_WritePin>
			nRF24_RX_Mode();
 80059e4:	f7fc fa7a 	bl	8001edc <nRF24_RX_Mode>
			LED_6_0;
 80059e8:	2200      	movs	r2, #0
 80059ea:	2108      	movs	r1, #8
 80059ec:	484e      	ldr	r0, [pc, #312]	@ (8005b28 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80059ee:	f007 ff77 	bl	800d8e0 <HAL_GPIO_WritePin>
			NRF24.Timer_2 = 1;
 80059f2:	4b4c      	ldr	r3, [pc, #304]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			NRF24.Step++;//Step 8
 80059fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80059fc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005a00:	3301      	adds	r3, #1
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	4b47      	ldr	r3, [pc, #284]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a06:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		}
		if(NRF24.Timer_2 == 0 && NRF24.Step == 8){
 8005a0a:	4b46      	ldr	r3, [pc, #280]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a0c:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d110      	bne.n	8005a36 <HAL_TIM_PeriodElapsedCallback+0x1d6>
 8005a14:	4b43      	ldr	r3, [pc, #268]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a16:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d10b      	bne.n	8005a36 <HAL_TIM_PeriodElapsedCallback+0x1d6>
			NRF24.Status = NRF24_Ready;
 8005a1e:	4b41      	ldr	r3, [pc, #260]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a20:	2204      	movs	r2, #4
 8005a22:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			NRF24.NRF24_MODE = NRF24_Rx_Mode;
 8005a26:	4b3f      	ldr	r3, [pc, #252]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			NRF24.Step = 0;
 8005a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		}


		if(i == 0){// na calosc 100ms
 8005a36:	4b40      	ldr	r3, [pc, #256]	@ (8005b38 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d114      	bne.n	8005a68 <HAL_TIM_PeriodElapsedCallback+0x208>
			LED_5_1;
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a44:	483d      	ldr	r0, [pc, #244]	@ (8005b3c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005a46:	f007 ff4b 	bl	800d8e0 <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 8005a4a:	f7fa ff1b 	bl	8000884 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a54:	4839      	ldr	r0, [pc, #228]	@ (8005b3c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005a56:	f007 ff43 	bl	800d8e0 <HAL_GPIO_WritePin>

			RGB_LED_For_BAT(MYDRON.batterysize);
 8005a5a:	4b34      	ldr	r3, [pc, #208]	@ (8005b2c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8005a5c:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 f9c8 	bl	8006df8 <RGB_LED_For_BAT>
		}
//		if(i == 9){
//			BMP180_READ_temp_IT();
//		}
		if(i == 10){//2
 8005a68:	4b33      	ldr	r3, [pc, #204]	@ (8005b38 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b0a      	cmp	r3, #10
 8005a6e:	d10d      	bne.n	8005a8c <HAL_TIM_PeriodElapsedCallback+0x22c>
			LED_5_1;
 8005a70:	2201      	movs	r2, #1
 8005a72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a76:	4831      	ldr	r0, [pc, #196]	@ (8005b3c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005a78:	f007 ff32 	bl	800d8e0 <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 8005a7c:	f7fa fee6 	bl	800084c <BMP180_start_measurment_pres_IT>
			LED_5_0;
 8005a80:	2200      	movs	r2, #0
 8005a82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a86:	482d      	ldr	r0, [pc, #180]	@ (8005b3c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005a88:	f007 ff2a 	bl	800d8e0 <HAL_GPIO_WritePin>
		}


		if(i == 36){
 8005a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8005b38 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b24      	cmp	r3, #36	@ 0x24
 8005a92:	d10d      	bne.n	8005ab0 <HAL_TIM_PeriodElapsedCallback+0x250>
			LED_5_1;
 8005a94:	2201      	movs	r2, #1
 8005a96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a9a:	4828      	ldr	r0, [pc, #160]	@ (8005b3c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005a9c:	f007 ff20 	bl	800d8e0 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8005aa0:	f7fb fad8 	bl	8001054 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005aaa:	4824      	ldr	r0, [pc, #144]	@ (8005b3c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005aac:	f007 ff18 	bl	800d8e0 <HAL_GPIO_WritePin>
		}

		if(i == 40){//5
 8005ab0:	4b21      	ldr	r3, [pc, #132]	@ (8005b38 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b28      	cmp	r3, #40	@ 0x28
 8005ab6:	d159      	bne.n	8005b6c <HAL_TIM_PeriodElapsedCallback+0x30c>
			//BMP180_READ_pres_IT();
			BMP180.ampritude = BMP180.startpres - BMP180.pres;
 8005ab8:	4b21      	ldr	r3, [pc, #132]	@ (8005b40 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005aba:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8005abe:	4b20      	ldr	r3, [pc, #128]	@ (8005b40 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005ac0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8005ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b40 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005aca:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

			MYDRON.dronheight = (int16_t)BMP180_GET_height();
 8005ace:	f7fb f94f 	bl	8000d70 <BMP180_GET_height>
 8005ad2:	eef0 7a40 	vmov.f32	s15, s0
 8005ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ada:	ee17 3a90 	vmov	r3, s15
 8005ade:	b21a      	sxth	r2, r3
 8005ae0:	4b12      	ldr	r3, [pc, #72]	@ (8005b2c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8005ae2:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a
			convert_value_to_array(MYDRON.dronheight, NRF24.TxData, 0, 3);
 8005ae6:	4b11      	ldr	r3, [pc, #68]	@ (8005b2c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8005ae8:	f9b3 015a 	ldrsh.w	r0, [r3, #346]	@ 0x15a
 8005aec:	2303      	movs	r3, #3
 8005aee:	2200      	movs	r2, #0
 8005af0:	490f      	ldr	r1, [pc, #60]	@ (8005b30 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005af2:	f001 f8a4 	bl	8006c3e <convert_value_to_array>

			Get_batteryvalue();
 8005af6:	f7fe f863 	bl	8003bc0 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, NRF24.TxData, 3, 6);
 8005afa:	4b0c      	ldr	r3, [pc, #48]	@ (8005b2c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8005afc:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8005b00:	b218      	sxth	r0, r3
 8005b02:	2306      	movs	r3, #6
 8005b04:	2203      	movs	r2, #3
 8005b06:	490a      	ldr	r1, [pc, #40]	@ (8005b30 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005b08:	f001 f899 	bl	8006c3e <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	e029      	b.n	8005b66 <HAL_TIM_PeriodElapsedCallback+0x306>
 8005b12:	bf00      	nop
 8005b14:	240003cc 	.word	0x240003cc
 8005b18:	00000074 	.word	0x00000074
 8005b1c:	00000078 	.word	0x00000078
 8005b20:	00000080 	.word	0x00000080
 8005b24:	000000fc 	.word	0x000000fc
 8005b28:	58021000 	.word	0x58021000
 8005b2c:	00000188 	.word	0x00000188
 8005b30:	0000011c 	.word	0x0000011c
 8005b34:	58020400 	.word	0x58020400
 8005b38:	000041d4 	.word	0x000041d4
 8005b3c:	58020000 	.word	0x58020000
 8005b40:	0000009c 	.word	0x0000009c
				NRF24.TxData[22+i] = NRF24.Txcode[22+i];
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f103 0216 	add.w	r2, r3, #22
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3316      	adds	r3, #22
 8005b4e:	4936      	ldr	r1, [pc, #216]	@ (8005c28 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8005b50:	440a      	add	r2, r1
 8005b52:	f892 1060 	ldrb.w	r1, [r2, #96]	@ 0x60
 8005b56:	4a34      	ldr	r2, [pc, #208]	@ (8005c28 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8005b58:	4413      	add	r3, r2
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	f883 2020 	strb.w	r2, [r3, #32]
			for(int i = 0; i < 10; i++){
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3301      	adds	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b09      	cmp	r3, #9
 8005b6a:	ddeb      	ble.n	8005b44 <HAL_TIM_PeriodElapsedCallback+0x2e4>
			}
		}


		LED_5_1;
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b72:	482e      	ldr	r0, [pc, #184]	@ (8005c2c <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8005b74:	f007 feb4 	bl	800d8e0 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 8005b78:	f7fb fd58 	bl	800162c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b82:	482a      	ldr	r0, [pc, #168]	@ (8005c2c <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8005b84:	f007 feac 	bl	800d8e0 <HAL_GPIO_WritePin>

		i = (i == 100) ? 0 : i+1;
 8005b88:	4b29      	ldr	r3, [pc, #164]	@ (8005c30 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b64      	cmp	r3, #100	@ 0x64
 8005b8e:	d003      	beq.n	8005b98 <HAL_TIM_PeriodElapsedCallback+0x338>
 8005b90:	4b27      	ldr	r3, [pc, #156]	@ (8005c30 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3301      	adds	r3, #1
 8005b96:	e000      	b.n	8005b9a <HAL_TIM_PeriodElapsedCallback+0x33a>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4a25      	ldr	r2, [pc, #148]	@ (8005c30 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8005b9c:	6013      	str	r3, [r2, #0]

		if(NRF_TIM_Inte >= 1000){
 8005b9e:	4b25      	ldr	r3, [pc, #148]	@ (8005c34 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ba6:	d309      	bcc.n	8005bbc <HAL_TIM_PeriodElapsedCallback+0x35c>
			LED_R_1;
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bae:	4822      	ldr	r0, [pc, #136]	@ (8005c38 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8005bb0:	f007 fe96 	bl	800d8e0 <HAL_GPIO_WritePin>
			MYDRON.Status.Connection = DRON_DISCONNECTED;
 8005bb4:	4b21      	ldr	r3, [pc, #132]	@ (8005c3c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 2154 	strb.w	r2, [r3, #340]	@ 0x154
		}
		if(MYDRON.Status.Connection == DRON_DISCONNECTED){
 8005bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8005c3c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8005bbe:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d111      	bne.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x38a>
			MYDRON.Rool.Wanted = 0;
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c3c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	639a      	str	r2, [r3, #56]	@ 0x38
			MYDRON.Pitch.Wanted = 0;
 8005bce:	4b1b      	ldr	r3, [pc, #108]	@ (8005c3c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	609a      	str	r2, [r3, #8]
			MYDRON.Yaw.Wanted = 0;
 8005bd6:	4b19      	ldr	r3, [pc, #100]	@ (8005c3c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	669a      	str	r2, [r3, #104]	@ 0x68
			MYDRON.Thrust.Wanted = DRON_SLOWFALING;
 8005bde:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005be2:	b21a      	sxth	r2, r3
 8005be4:	4b15      	ldr	r3, [pc, #84]	@ (8005c3c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8005be6:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
		}
		(NRF24.Timer_1 != 0) ? NRF24.Timer_1--: 0;
 8005bea:	4b0f      	ldr	r3, [pc, #60]	@ (8005c28 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8005bec:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d007      	beq.n	8005c04 <HAL_TIM_PeriodElapsedCallback+0x3a4>
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8005c28 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8005bf6:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8005c28 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8005c00:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
		(NRF24.Timer_2 != 0) ? NRF24.Timer_2--: 0;
 8005c04:	4b08      	ldr	r3, [pc, #32]	@ (8005c28 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8005c06:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d007      	beq.n	8005c1e <HAL_TIM_PeriodElapsedCallback+0x3be>
 8005c0e:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8005c10:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	4b03      	ldr	r3, [pc, #12]	@ (8005c28 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8005c1a:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	}
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	000000fc 	.word	0x000000fc
 8005c2c:	58020000 	.word	0x58020000
 8005c30:	000041d4 	.word	0x000041d4
 8005c34:	00000080 	.word	0x00000080
 8005c38:	58020400 	.word	0x58020400
 8005c3c:	00000188 	.word	0x00000188

08005c40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c50:	d11b      	bne.n	8005c8a <HAL_GPIO_EXTI_Callback+0x4a>
	{
		NRF24_inte = 1;
 8005c52:	4b10      	ldr	r3, [pc, #64]	@ (8005c94 <HAL_GPIO_EXTI_Callback+0x54>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	701a      	strb	r2, [r3, #0]
		if(STARTUP == 0){
 8005c58:	4b0f      	ldr	r3, [pc, #60]	@ (8005c98 <HAL_GPIO_EXTI_Callback+0x58>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d114      	bne.n	8005c8a <HAL_GPIO_EXTI_Callback+0x4a>
			LED_6_1;
 8005c60:	2201      	movs	r2, #1
 8005c62:	2108      	movs	r1, #8
 8005c64:	480d      	ldr	r0, [pc, #52]	@ (8005c9c <HAL_GPIO_EXTI_Callback+0x5c>)
 8005c66:	f007 fe3b 	bl	800d8e0 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod_IT(NRF24.RxData);
 8005c6a:	480d      	ldr	r0, [pc, #52]	@ (8005ca0 <HAL_GPIO_EXTI_Callback+0x60>)
 8005c6c:	f7fc fc9a 	bl	80025a4 <nRF24_ReadRXPaylaod_IT>
			NRF24.Step++;//step 1
 8005c70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca0 <HAL_GPIO_EXTI_Callback+0x60>)
 8005c72:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005c76:	3301      	adds	r3, #1
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	4b09      	ldr	r3, [pc, #36]	@ (8005ca0 <HAL_GPIO_EXTI_Callback+0x60>)
 8005c7c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			LED_6_0;
 8005c80:	2200      	movs	r2, #0
 8005c82:	2108      	movs	r1, #8
 8005c84:	4805      	ldr	r0, [pc, #20]	@ (8005c9c <HAL_GPIO_EXTI_Callback+0x5c>)
 8005c86:	f007 fe2b 	bl	800d8e0 <HAL_GPIO_WritePin>
		}
	}
}
 8005c8a:	bf00      	nop
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	000041dd 	.word	0x000041dd
 8005c98:	0000007c 	.word	0x0000007c
 8005c9c:	58021000 	.word	0x58021000
 8005ca0:	000000fc 	.word	0x000000fc

08005ca4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 8005cac:	4b24      	ldr	r3, [pc, #144]	@ (8005d40 <HAL_UART_RxCpltCallback+0x9c>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4b24      	ldr	r3, [pc, #144]	@ (8005d44 <HAL_UART_RxCpltCallback+0xa0>)
 8005cb4:	7819      	ldrb	r1, [r3, #0]
 8005cb6:	4b24      	ldr	r3, [pc, #144]	@ (8005d48 <HAL_UART_RxCpltCallback+0xa4>)
 8005cb8:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 8005cba:	4b21      	ldr	r3, [pc, #132]	@ (8005d40 <HAL_UART_RxCpltCallback+0x9c>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	4b21      	ldr	r3, [pc, #132]	@ (8005d48 <HAL_UART_RxCpltCallback+0xa4>)
 8005cc2:	5c9b      	ldrb	r3, [r3, r2]
 8005cc4:	2b0d      	cmp	r3, #13
 8005cc6:	d11a      	bne.n	8005cfe <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 8005cc8:	230a      	movs	r3, #10
 8005cca:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8005ccc:	f107 010f 	add.w	r1, r7, #15
 8005cd0:	2364      	movs	r3, #100	@ 0x64
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	481d      	ldr	r0, [pc, #116]	@ (8005d4c <HAL_UART_RxCpltCallback+0xa8>)
 8005cd6:	f011 fbf5 	bl	80174c4 <HAL_UART_Transmit>
		Y = '\r';
 8005cda:	230d      	movs	r3, #13
 8005cdc:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8005cde:	f107 010f 	add.w	r1, r7, #15
 8005ce2:	2364      	movs	r3, #100	@ 0x64
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	4819      	ldr	r0, [pc, #100]	@ (8005d4c <HAL_UART_RxCpltCallback+0xa8>)
 8005ce8:	f011 fbec 	bl	80174c4 <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 8005cec:	4b14      	ldr	r3, [pc, #80]	@ (8005d40 <HAL_UART_RxCpltCallback+0x9c>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4b15      	ldr	r3, [pc, #84]	@ (8005d48 <HAL_UART_RxCpltCallback+0xa4>)
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8005cf8:	4b15      	ldr	r3, [pc, #84]	@ (8005d50 <HAL_UART_RxCpltCallback+0xac>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 8005cfe:	4b10      	ldr	r3, [pc, #64]	@ (8005d40 <HAL_UART_RxCpltCallback+0x9c>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	4b10      	ldr	r3, [pc, #64]	@ (8005d48 <HAL_UART_RxCpltCallback+0xa4>)
 8005d06:	4413      	add	r3, r2
 8005d08:	2201      	movs	r2, #1
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	480f      	ldr	r0, [pc, #60]	@ (8005d4c <HAL_UART_RxCpltCallback+0xa8>)
 8005d0e:	f011 fc67 	bl	80175e0 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005d12:	2201      	movs	r2, #1
 8005d14:	490b      	ldr	r1, [pc, #44]	@ (8005d44 <HAL_UART_RxCpltCallback+0xa0>)
 8005d16:	480d      	ldr	r0, [pc, #52]	@ (8005d4c <HAL_UART_RxCpltCallback+0xa8>)
 8005d18:	f011 fcf6 	bl	8017708 <HAL_UART_Receive_IT>
	command_ch_num++;
 8005d1c:	4b08      	ldr	r3, [pc, #32]	@ (8005d40 <HAL_UART_RxCpltCallback+0x9c>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	3301      	adds	r3, #1
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	4b06      	ldr	r3, [pc, #24]	@ (8005d40 <HAL_UART_RxCpltCallback+0x9c>)
 8005d26:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 8005d28:	4b09      	ldr	r3, [pc, #36]	@ (8005d50 <HAL_UART_RxCpltCallback+0xac>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d102      	bne.n	8005d36 <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 8005d30:	4b03      	ldr	r3, [pc, #12]	@ (8005d40 <HAL_UART_RxCpltCallback+0x9c>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	701a      	strb	r2, [r3, #0]
	}
}
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	000041bb 	.word	0x000041bb
 8005d44:	000041bc 	.word	0x000041bc
 8005d48:	000041b0 	.word	0x000041b0
 8005d4c:	240004b0 	.word	0x240004b0
 8005d50:	000041ba 	.word	0x000041ba

08005d54 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
//	}
//	if(BMP180.I2C_Tx_IRQ == 2){
//		BMP180_READ_pres_IT();
//		BMP180.I2C_Tx_IRQ = 0;
//	}
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b0d7      	sub	sp, #348	@ 0x15c
 8005d6c:	af54      	add	r7, sp, #336	@ 0x150
 8005d6e:	6078      	str	r0, [r7, #4]
	if(MPU6050.MPU6050_IRQ == 1){
 8005d70:	4bbd      	ldr	r3, [pc, #756]	@ (8006068 <HAL_I2C_MemRxCpltCallback+0x300>)
 8005d72:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	f040 84d3 	bne.w	8006722 <HAL_I2C_MemRxCpltCallback+0x9ba>
			MPU6050.MPU6050_IRQ = 0;
 8005d7c:	4bba      	ldr	r3, [pc, #744]	@ (8006068 <HAL_I2C_MemRxCpltCallback+0x300>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
			LED_G_1;
 8005d84:	2201      	movs	r2, #1
 8005d86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d8a:	48b8      	ldr	r0, [pc, #736]	@ (800606c <HAL_I2C_MemRxCpltCallback+0x304>)
 8005d8c:	f007 fda8 	bl	800d8e0 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT();
 8005d90:	f7fb fc68 	bl	8001664 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE();
 8005d94:	f7fb fbc0 	bl	8001518 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, Mag_Z);
 8005d98:	4bb5      	ldr	r3, [pc, #724]	@ (8006070 <HAL_I2C_MemRxCpltCallback+0x308>)
 8005d9a:	edd3 7a00 	vldr	s15, [r3]
 8005d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8005da2:	48b4      	ldr	r0, [pc, #720]	@ (8006074 <HAL_I2C_MemRxCpltCallback+0x30c>)
 8005da4:	f7fb fd0a 	bl	80017bc <MPU6050_GET_ACCANDGYR_FILTRED>


			MYDRON.Pitch.Now = data.x;
 8005da8:	4bb2      	ldr	r3, [pc, #712]	@ (8006074 <HAL_I2C_MemRxCpltCallback+0x30c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4ab2      	ldr	r2, [pc, #712]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005dae:	6113      	str	r3, [r2, #16]
			MYDRON.Rool.Now = data.y;
 8005db0:	4bb0      	ldr	r3, [pc, #704]	@ (8006074 <HAL_I2C_MemRxCpltCallback+0x30c>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	4ab0      	ldr	r2, [pc, #704]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005db6:	6413      	str	r3, [r2, #64]	@ 0x40
			MYDRON.Yaw.Now = data.z;
 8005db8:	4bae      	ldr	r3, [pc, #696]	@ (8006074 <HAL_I2C_MemRxCpltCallback+0x30c>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	4aae      	ldr	r2, [pc, #696]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005dbe:	6713      	str	r3, [r2, #112]	@ 0x70


			MYDRON.Rool.Wanted = (float)MYDRON.Rool.Wanted_rx/10;
 8005dc0:	4bad      	ldr	r3, [pc, #692]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005dc2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dce:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8005dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005dd6:	4ba8      	ldr	r3, [pc, #672]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005dd8:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			MYDRON.Pitch.Wanted = (float)MYDRON.Pitch.Wanted_rx/10;
 8005ddc:	4ba6      	ldr	r3, [pc, #664]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dea:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8005dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005df2:	4ba1      	ldr	r3, [pc, #644]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005df4:	edc3 7a02 	vstr	s15, [r3, #8]
			MYDRON.Yaw.Wanted = 0;//(float)MYDRON.Yaw.Wanted_rx/10;
 8005df8:	4b9f      	ldr	r3, [pc, #636]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	669a      	str	r2, [r3, #104]	@ 0x68
				  			/*
				  				 * FDP
				  				 */
			MYDRON.Rool.Wanted = (MYDRON.Rool.Wanted * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (MYDRON.Rool.Last_Wanted_rx * (1 / (1 + (FDP_FQ * looptime))));
 8005e00:	4b9d      	ldr	r3, [pc, #628]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005e02:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8005e06:	eddf 7a9d 	vldr	s15, [pc, #628]	@ 800607c <HAL_I2C_MemRxCpltCallback+0x314>
 8005e0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e0e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005e12:	eddf 7a9a 	vldr	s15, [pc, #616]	@ 800607c <HAL_I2C_MemRxCpltCallback+0x314>
 8005e16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e26:	4b94      	ldr	r3, [pc, #592]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005e28:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8005e2c:	eddf 7a93 	vldr	s15, [pc, #588]	@ 800607c <HAL_I2C_MemRxCpltCallback+0x314>
 8005e30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e34:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005e38:	ee37 6a86 	vadd.f32	s12, s15, s12
 8005e3c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005e40:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e4c:	4b8a      	ldr	r3, [pc, #552]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005e4e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			MYDRON.Pitch.Wanted = (MYDRON.Pitch.Wanted * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (MYDRON.Pitch.Last_Wanted_rx * (1 / (1 + (FDP_FQ * looptime))));
 8005e52:	4b89      	ldr	r3, [pc, #548]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005e54:	ed93 7a02 	vldr	s14, [r3, #8]
 8005e58:	eddf 7a88 	vldr	s15, [pc, #544]	@ 800607c <HAL_I2C_MemRxCpltCallback+0x314>
 8005e5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e60:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005e64:	eddf 7a85 	vldr	s15, [pc, #532]	@ 800607c <HAL_I2C_MemRxCpltCallback+0x314>
 8005e68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e78:	4b7f      	ldr	r3, [pc, #508]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005e7a:	edd3 6a01 	vldr	s13, [r3, #4]
 8005e7e:	eddf 7a7f 	vldr	s15, [pc, #508]	@ 800607c <HAL_I2C_MemRxCpltCallback+0x314>
 8005e82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e86:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005e8a:	ee37 6a86 	vadd.f32	s12, s15, s12
 8005e8e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005e92:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e9e:	4b76      	ldr	r3, [pc, #472]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005ea0:	edc3 7a02 	vstr	s15, [r3, #8]
			MYDRON.Yaw.Wanted = (MYDRON.Yaw.Wanted * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (MYDRON.Yaw.Last_Wanted_rx * (1 / (1 + (FDP_FQ * looptime))));
 8005ea4:	4b74      	ldr	r3, [pc, #464]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005ea6:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8005eaa:	eddf 7a74 	vldr	s15, [pc, #464]	@ 800607c <HAL_I2C_MemRxCpltCallback+0x314>
 8005eae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005eb2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005eb6:	eddf 7a71 	vldr	s15, [pc, #452]	@ 800607c <HAL_I2C_MemRxCpltCallback+0x314>
 8005eba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ebe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ec2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eca:	4b6b      	ldr	r3, [pc, #428]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005ecc:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8005ed0:	eddf 7a6a 	vldr	s15, [pc, #424]	@ 800607c <HAL_I2C_MemRxCpltCallback+0x314>
 8005ed4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ed8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005edc:	ee37 6a86 	vadd.f32	s12, s15, s12
 8005ee0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005ee4:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef0:	4b61      	ldr	r3, [pc, #388]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005ef2:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68


			MYDRON.Rool.Last_Wanted_rx = MYDRON.Rool.Wanted;
 8005ef6:	4b60      	ldr	r3, [pc, #384]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	4a5f      	ldr	r2, [pc, #380]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005efc:	6353      	str	r3, [r2, #52]	@ 0x34
			MYDRON.Pitch.Last_Wanted_rx = MYDRON.Pitch.Wanted;
 8005efe:	4b5e      	ldr	r3, [pc, #376]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	4a5d      	ldr	r2, [pc, #372]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f04:	6053      	str	r3, [r2, #4]
			MYDRON.Yaw.Last_Wanted_rx= MYDRON.Yaw.Wanted;
 8005f06:	4b5c      	ldr	r3, [pc, #368]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f0a:	4a5b      	ldr	r2, [pc, #364]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f0c:	6653      	str	r3, [r2, #100]	@ 0x64


			MYDRON.Pitch.Angle_Error = MYDRON.Pitch.Wanted - MYDRON.Pitch.Now;
 8005f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f10:	ed93 7a02 	vldr	s14, [r3, #8]
 8005f14:	4b58      	ldr	r3, [pc, #352]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f16:	edd3 7a04 	vldr	s15, [r3, #16]
 8005f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f1e:	4b56      	ldr	r3, [pc, #344]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f20:	edc3 7a05 	vstr	s15, [r3, #20]
			MYDRON.Rool.Angle_Error = MYDRON.Rool.Wanted - MYDRON.Rool.Now;
 8005f24:	4b54      	ldr	r3, [pc, #336]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f26:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8005f2a:	4b53      	ldr	r3, [pc, #332]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f2c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f34:	4b50      	ldr	r3, [pc, #320]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f36:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		  	MYDRON.Yaw.Angle_Error = MYDRON.Yaw.Wanted - MYDRON.Yaw.Now;
 8005f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f3c:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8005f40:	4b4d      	ldr	r3, [pc, #308]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f42:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8005f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f4c:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
		  	MYDRON.Pitch.Angular_Rate_Error = MYDRON.PID_Pitch.Angle_Value- MPU6050.Gyr.gx;
 8005f50:	4b49      	ldr	r3, [pc, #292]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f52:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 8005f56:	4b44      	ldr	r3, [pc, #272]	@ (8006068 <HAL_I2C_MemRxCpltCallback+0x300>)
 8005f58:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f60:	4b45      	ldr	r3, [pc, #276]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f62:	edc3 7a06 	vstr	s15, [r3, #24]
		  	MYDRON.Rool.Angular_Rate_Error = MYDRON.PID_Rool.Angle_Value- MPU6050.Gyr.gy;
 8005f66:	4b44      	ldr	r3, [pc, #272]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f68:	ed93 7a3b 	vldr	s14, [r3, #236]	@ 0xec
 8005f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8006068 <HAL_I2C_MemRxCpltCallback+0x300>)
 8005f6e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f76:	4b40      	ldr	r3, [pc, #256]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f78:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		  	MYDRON.Yaw.Angular_Rate_Error = MYDRON.PID_Yaw.Angle_Value- MPU6050.Gyr.gz;
 8005f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f7e:	ed93 7a48 	vldr	s14, [r3, #288]	@ 0x120
 8005f82:	4b39      	ldr	r3, [pc, #228]	@ (8006068 <HAL_I2C_MemRxCpltCallback+0x300>)
 8005f84:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f8e:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78


			MYDRON.Pitch.Angle_Error_Sum = (MYDRON.PID_Pitch.Status != 0) ? MYDRON.Pitch.Angle_Error_Sum : MYDRON.Pitch.Angle_Error_Sum + (MYDRON.Pitch.Angle_Error);//pitch_error -> pitch_error
 8005f92:	4b39      	ldr	r3, [pc, #228]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f94:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_I2C_MemRxCpltCallback+0x246>
 8005f9c:	4b36      	ldr	r3, [pc, #216]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa0:	ee07 3a90 	vmov	s15, r3
 8005fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fac:	e00c      	b.n	8005fc8 <HAL_I2C_MemRxCpltCallback+0x260>
 8005fae:	4b32      	ldr	r3, [pc, #200]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fba:	4b2f      	ldr	r3, [pc, #188]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005fbc:	edd3 7a05 	vldr	s15, [r3, #20]
 8005fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005fca:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			MYDRON.Rool.Angle_Error_Sum = (MYDRON.PID_Rool.Status != 0) ? MYDRON.Rool.Angle_Error_Sum : MYDRON.Rool.Angle_Error_Sum + (MYDRON.Rool.Angle_Error);//rool_error
 8005fce:	4b2a      	ldr	r3, [pc, #168]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005fd0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_I2C_MemRxCpltCallback+0x282>
 8005fd8:	4b27      	ldr	r3, [pc, #156]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fdc:	ee07 3a90 	vmov	s15, r3
 8005fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fe8:	e00c      	b.n	8006004 <HAL_I2C_MemRxCpltCallback+0x29c>
 8005fea:	4b23      	ldr	r3, [pc, #140]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ff6:	4b20      	ldr	r3, [pc, #128]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005ff8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8005ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006004:	4b1c      	ldr	r3, [pc, #112]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006006:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
			MYDRON.Yaw.Angle_Error_Sum = (MYDRON.PID_Yaw.Status != 0) ? MYDRON.Yaw.Angle_Error_Sum : MYDRON.Yaw.Angle_Error_Sum + (MYDRON.Yaw.Angle_Error);//yaw_error
 800600a:	4b1b      	ldr	r3, [pc, #108]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 800600c:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8006010:	2b00      	cmp	r3, #0
 8006012:	d009      	beq.n	8006028 <HAL_I2C_MemRxCpltCallback+0x2c0>
 8006014:	4b18      	ldr	r3, [pc, #96]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006026:	e00d      	b.n	8006044 <HAL_I2C_MemRxCpltCallback+0x2dc>
 8006028:	4b13      	ldr	r3, [pc, #76]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 800602a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006036:	4b10      	ldr	r3, [pc, #64]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006038:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 800603c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006044:	4b0c      	ldr	r3, [pc, #48]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006046:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

			MYDRON.Pitch.Angular_Rate_Error_Sum = (MYDRON.PID_Pitch.Status != 0) ? MYDRON.Pitch.Angular_Rate_Error_Sum : MYDRON.Pitch.Angular_Rate_Error_Sum + (MYDRON.Pitch.Angular_Rate_Error);//pitch_ar_error
 800604a:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 800604c:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d015      	beq.n	8006080 <HAL_I2C_MemRxCpltCallback+0x318>
 8006054:	4b08      	ldr	r3, [pc, #32]	@ (8006078 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006064:	e019      	b.n	800609a <HAL_I2C_MemRxCpltCallback+0x332>
 8006066:	bf00      	nop
 8006068:	00000000 	.word	0x00000000
 800606c:	58021000 	.word	0x58021000
 8006070:	00000054 	.word	0x00000054
 8006074:	00000084 	.word	0x00000084
 8006078:	00000188 	.word	0x00000188
 800607c:	3a83126f 	.word	0x3a83126f
 8006080:	4bc9      	ldr	r3, [pc, #804]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006084:	ee07 3a90 	vmov	s15, r3
 8006088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800608c:	4bc6      	ldr	r3, [pc, #792]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 800608e:	edd3 7a06 	vldr	s15, [r3, #24]
 8006092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800609a:	4bc3      	ldr	r3, [pc, #780]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 800609c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			MYDRON.Rool.Angular_Rate_Error_Sum = (MYDRON.PID_Rool.Status != 0) ? MYDRON.Rool.Angular_Rate_Error_Sum : MYDRON.Rool.Angular_Rate_Error_Sum + (MYDRON.Rool.Angular_Rate_Error);
 80060a0:	4bc1      	ldr	r3, [pc, #772]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80060a2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d008      	beq.n	80060bc <HAL_I2C_MemRxCpltCallback+0x354>
 80060aa:	4bbf      	ldr	r3, [pc, #764]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80060ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060ba:	e00c      	b.n	80060d6 <HAL_I2C_MemRxCpltCallback+0x36e>
 80060bc:	4bba      	ldr	r3, [pc, #744]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80060be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c0:	ee07 3a90 	vmov	s15, r3
 80060c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060c8:	4bb7      	ldr	r3, [pc, #732]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80060ca:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80060ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060d6:	4bb4      	ldr	r3, [pc, #720]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80060d8:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
			MYDRON.Yaw.Angular_Rate_Error_Sum = (MYDRON.PID_Yaw.Status != 0) ? MYDRON.Yaw.Angular_Rate_Error_Sum : MYDRON.Yaw.Angular_Rate_Error_Sum + (MYDRON.Yaw.Angular_Rate_Error);
 80060dc:	4bb2      	ldr	r3, [pc, #712]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80060de:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d009      	beq.n	80060fa <HAL_I2C_MemRxCpltCallback+0x392>
 80060e6:	4bb0      	ldr	r3, [pc, #704]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80060e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060f8:	e00d      	b.n	8006116 <HAL_I2C_MemRxCpltCallback+0x3ae>
 80060fa:	4bab      	ldr	r3, [pc, #684]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80060fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006100:	ee07 3a90 	vmov	s15, r3
 8006104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006108:	4ba7      	ldr	r3, [pc, #668]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 800610a:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 800610e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006116:	4ba4      	ldr	r3, [pc, #656]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006118:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
//
//			PID_cal(&MYDRON.PID_Pitch.Angular_Rate_Value, MYDRON.PID_Pitch.Angular_Rate_Factors, 4);// angle rate control
//			PID_cal(&MYDRON.PID_Rool.Angular_Rate_Value, MYDRON.PID_Rool.Angular_Rate_Factors, 5);
//			PID_cal(&MYDRON.PID_Yaw.Angular_Rate_Value, MYDRON.PID_Yaw.Angular_Rate_Factors, 6);

			PID_call(MYDRON);
 800611c:	4ca2      	ldr	r4, [pc, #648]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 800611e:	4668      	mov	r0, sp
 8006120:	f104 0310 	add.w	r3, r4, #16
 8006124:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8006128:	4619      	mov	r1, r3
 800612a:	f017 fae5 	bl	801d6f8 <memcpy>
 800612e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006132:	f7fd fc5b 	bl	80039ec <PID_call>


			MYDRON.Pitch.Old_Angle_Error = MYDRON.Pitch.Angle_Error;
 8006136:	4b9c      	ldr	r3, [pc, #624]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	4a9b      	ldr	r2, [pc, #620]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 800613c:	61d3      	str	r3, [r2, #28]
			MYDRON.Rool.Old_Angle_Error = MYDRON.Rool.Angle_Error;
 800613e:	4b9a      	ldr	r3, [pc, #616]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006142:	4a99      	ldr	r2, [pc, #612]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006144:	64d3      	str	r3, [r2, #76]	@ 0x4c
			MYDRON.Yaw.Old_Angle_Error = MYDRON.Yaw.Angle_Error;
 8006146:	4b98      	ldr	r3, [pc, #608]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800614a:	4a97      	ldr	r2, [pc, #604]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 800614c:	67d3      	str	r3, [r2, #124]	@ 0x7c

			MYDRON.Pitch.Old_Angle_Error = MYDRON.Pitch.Angular_Rate_Error;
 800614e:	4b96      	ldr	r3, [pc, #600]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	4a95      	ldr	r2, [pc, #596]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006154:	61d3      	str	r3, [r2, #28]
			MYDRON.Rool.Old_Angle_Error = MYDRON.Rool.Angular_Rate_Error;
 8006156:	4b94      	ldr	r3, [pc, #592]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800615a:	4a93      	ldr	r2, [pc, #588]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 800615c:	64d3      	str	r3, [r2, #76]	@ 0x4c
			MYDRON.Yaw.Old_Angle_Error = MYDRON.Yaw.Angular_Rate_Error;
 800615e:	4b92      	ldr	r3, [pc, #584]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006160:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006162:	4a91      	ldr	r2, [pc, #580]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006164:	67d3      	str	r3, [r2, #124]	@ 0x7c


			MYDRON.Pitch.Value  	= (MYDRON.PID_Pitch.Angular_Rate_Value > 5000) ? PITCH_MAX_VAL(): (MYDRON.PID_Pitch.Angular_Rate_Value < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 8006166:	4b90      	ldr	r3, [pc, #576]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006168:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 800616c:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 80063ac <HAL_I2C_MemRxCpltCallback+0x644>
 8006170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006178:	dd04      	ble.n	8006184 <HAL_I2C_MemRxCpltCallback+0x41c>
 800617a:	f001 fa0b 	bl	8007594 <PITCH_MAX_VAL>
 800617e:	4603      	mov	r3, r0
 8006180:	461a      	mov	r2, r3
 8006182:	e012      	b.n	80061aa <HAL_I2C_MemRxCpltCallback+0x442>
 8006184:	4b88      	ldr	r3, [pc, #544]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006186:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 800618a:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 80063b0 <HAL_I2C_MemRxCpltCallback+0x648>
 800618e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006196:	d504      	bpl.n	80061a2 <HAL_I2C_MemRxCpltCallback+0x43a>
 8006198:	f001 fa0c 	bl	80075b4 <PITCH_MIN_VAL>
 800619c:	4603      	mov	r3, r0
 800619e:	461a      	mov	r2, r3
 80061a0:	e003      	b.n	80061aa <HAL_I2C_MemRxCpltCallback+0x442>
 80061a2:	f001 fa4d 	bl	8007640 <PITCH_GOOD_VAL>
 80061a6:	4603      	mov	r3, r0
 80061a8:	461a      	mov	r2, r3
 80061aa:	4b7f      	ldr	r3, [pc, #508]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80061ac:	859a      	strh	r2, [r3, #44]	@ 0x2c
			MYDRON.Rool.Value 	    = (MYDRON.PID_Rool.Angular_Rate_Value > 5000) ? ROOL_MAX_VAL(): (MYDRON.PID_Rool.Angular_Rate_Value < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 80061ae:	4b7e      	ldr	r3, [pc, #504]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80061b0:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 80061b4:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 80063ac <HAL_I2C_MemRxCpltCallback+0x644>
 80061b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c0:	dd04      	ble.n	80061cc <HAL_I2C_MemRxCpltCallback+0x464>
 80061c2:	f001 f9c7 	bl	8007554 <ROOL_MAX_VAL>
 80061c6:	4603      	mov	r3, r0
 80061c8:	461a      	mov	r2, r3
 80061ca:	e012      	b.n	80061f2 <HAL_I2C_MemRxCpltCallback+0x48a>
 80061cc:	4b76      	ldr	r3, [pc, #472]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80061ce:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 80061d2:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 80063b0 <HAL_I2C_MemRxCpltCallback+0x648>
 80061d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061de:	d504      	bpl.n	80061ea <HAL_I2C_MemRxCpltCallback+0x482>
 80061e0:	f001 f9c8 	bl	8007574 <ROOL_MIN_VAL>
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	e003      	b.n	80061f2 <HAL_I2C_MemRxCpltCallback+0x48a>
 80061ea:	f001 fa13 	bl	8007614 <ROOL_GOOD_VAL>
 80061ee:	4603      	mov	r3, r0
 80061f0:	461a      	mov	r2, r3
 80061f2:	4b6d      	ldr	r3, [pc, #436]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80061f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			MYDRON.Yaw.Value  		= (MYDRON.PID_Yaw.Angular_Rate_Value > 5000) ? YAW_MAX_VAL(): (MYDRON.PID_Yaw.Angular_Rate_Value < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 80061f8:	4b6b      	ldr	r3, [pc, #428]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80061fa:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 80061fe:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80063ac <HAL_I2C_MemRxCpltCallback+0x644>
 8006202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620a:	dd04      	ble.n	8006216 <HAL_I2C_MemRxCpltCallback+0x4ae>
 800620c:	f001 f9e2 	bl	80075d4 <YAW_MAX_VAL>
 8006210:	4603      	mov	r3, r0
 8006212:	461a      	mov	r2, r3
 8006214:	e012      	b.n	800623c <HAL_I2C_MemRxCpltCallback+0x4d4>
 8006216:	4b64      	ldr	r3, [pc, #400]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006218:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 800621c:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80063b0 <HAL_I2C_MemRxCpltCallback+0x648>
 8006220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006228:	d504      	bpl.n	8006234 <HAL_I2C_MemRxCpltCallback+0x4cc>
 800622a:	f001 f9e3 	bl	80075f4 <YAW_MIN_VAL>
 800622e:	4603      	mov	r3, r0
 8006230:	461a      	mov	r2, r3
 8006232:	e003      	b.n	800623c <HAL_I2C_MemRxCpltCallback+0x4d4>
 8006234:	f001 fa1a 	bl	800766c <YAW_GOOD_VAL>
 8006238:	4603      	mov	r3, r0
 800623a:	461a      	mov	r2, r3
 800623c:	4b5a      	ldr	r3, [pc, #360]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 800623e:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 8006242:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006246:	f7fd faa7 	bl	8003798 <Thrust_filter>
			if(MYDRON.Thrust.Now > MYDRON.Thrust.Thrust_Limit){
 800624a:	4b57      	ldr	r3, [pc, #348]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 800624c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8006250:	461a      	mov	r2, r3
 8006252:	4b55      	ldr	r3, [pc, #340]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006254:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 8006258:	429a      	cmp	r2, r3
 800625a:	dd06      	ble.n	800626a <HAL_I2C_MemRxCpltCallback+0x502>
				MYDRON.Thrust.Now = MYDRON.Thrust.Thrust_Limit;
 800625c:	4b52      	ldr	r3, [pc, #328]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 800625e:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 8006262:	b29a      	uxth	r2, r3
 8006264:	4b50      	ldr	r3, [pc, #320]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006266:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			}


			Stack_Push(WartoscBezwgledna(MYDRON.PID_Pitch.Angle_Factors[4]));
 800626a:	4b4f      	ldr	r3, [pc, #316]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 800626c:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8006270:	eeb0 0a67 	vmov.f32	s0, s15
 8006274:	f000 fd82 	bl	8006d7c <WartoscBezwgledna>
 8006278:	eef0 7a40 	vmov.f32	s15, s0
 800627c:	eeb0 0a67 	vmov.f32	s0, s15
 8006280:	f001 f91c 	bl	80074bc <Stack_Push>
			Stack_Push(WartoscBezwgledna(MYDRON.PID_Pitch.Angle_Factors[4]));
 8006284:	4b48      	ldr	r3, [pc, #288]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006286:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 800628a:	eeb0 0a67 	vmov.f32	s0, s15
 800628e:	f000 fd75 	bl	8006d7c <WartoscBezwgledna>
 8006292:	eef0 7a40 	vmov.f32	s15, s0
 8006296:	eeb0 0a67 	vmov.f32	s0, s15
 800629a:	f001 f90f 	bl	80074bc <Stack_Push>
			Stack_Push(MYDRON.Pitch.Now);
 800629e:	4b42      	ldr	r3, [pc, #264]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80062a4:	eeb0 0a67 	vmov.f32	s0, s15
 80062a8:	f001 f908 	bl	80074bc <Stack_Push>
			Stack_Push(MYDRON.Rool.Now);
 80062ac:	4b3e      	ldr	r3, [pc, #248]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062ae:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80062b2:	eeb0 0a67 	vmov.f32	s0, s15
 80062b6:	f001 f901 	bl	80074bc <Stack_Push>


			MYDRON.Thrust.Speed_1 = (((uint32_t)((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value - MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value - MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500) : max_speed;//trust 7000 max
 80062ba:	4b3b      	ldr	r3, [pc, #236]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062bc:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80062c8:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8006390 <HAL_I2C_MemRxCpltCallback+0x628>
 80062cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80062d0:	4b35      	ldr	r3, [pc, #212]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062d2:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80062de:	ee36 6b07 	vadd.f64	d6, d6, d7
 80062e2:	4b31      	ldr	r3, [pc, #196]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062e4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80062e8:	ee07 3a90 	vmov	s15, r3
 80062ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80062f0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80062f4:	4b2c      	ldr	r3, [pc, #176]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062f6:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006302:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006306:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006398 <HAL_I2C_MemRxCpltCallback+0x630>
 800630a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800630e:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 80063a0 <HAL_I2C_MemRxCpltCallback+0x638>
 8006312:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006316:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800631a:	ee17 2a90 	vmov	r2, s15
 800631e:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006322:	429a      	cmp	r2, r3
 8006324:	d846      	bhi.n	80063b4 <HAL_I2C_MemRxCpltCallback+0x64c>
 8006326:	4b20      	ldr	r3, [pc, #128]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006328:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800632c:	ee07 3a90 	vmov	s15, r3
 8006330:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006334:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8006390 <HAL_I2C_MemRxCpltCallback+0x628>
 8006338:	ee27 6b06 	vmul.f64	d6, d7, d6
 800633c:	4b1a      	ldr	r3, [pc, #104]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 800633e:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800634a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800634e:	4b16      	ldr	r3, [pc, #88]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006350:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006354:	ee07 3a90 	vmov	s15, r3
 8006358:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800635c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006360:	4b11      	ldr	r3, [pc, #68]	@ (80063a8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006362:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800636e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006372:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006398 <HAL_I2C_MemRxCpltCallback+0x630>
 8006376:	ee37 7b06 	vadd.f64	d7, d7, d6
 800637a:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80063a0 <HAL_I2C_MemRxCpltCallback+0x638>
 800637e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006382:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006386:	ee17 3a90 	vmov	r3, s15
 800638a:	b29b      	uxth	r3, r3
 800638c:	e014      	b.n	80063b8 <HAL_I2C_MemRxCpltCallback+0x650>
 800638e:	bf00      	nop
 8006390:	66666666 	.word	0x66666666
 8006394:	3fe66666 	.word	0x3fe66666
 8006398:	00000000 	.word	0x00000000
 800639c:	40c48200 	.word	0x40c48200
 80063a0:	00000000 	.word	0x00000000
 80063a4:	407f4000 	.word	0x407f4000
 80063a8:	00000188 	.word	0x00000188
 80063ac:	459c4000 	.word	0x459c4000
 80063b0:	c59c4000 	.word	0xc59c4000
 80063b4:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 80063b8:	4aab      	ldr	r2, [pc, #684]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 80063ba:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
			MYDRON.Thrust.Speed_2 = (((uint32_t)((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value - MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value - MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500) : max_speed;//
 80063be:	4baa      	ldr	r3, [pc, #680]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 80063c0:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80063c4:	ee07 3a90 	vmov	s15, r3
 80063c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80063cc:	ed9f 6ba0 	vldr	d6, [pc, #640]	@ 8006650 <HAL_I2C_MemRxCpltCallback+0x8e8>
 80063d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80063d4:	4ba4      	ldr	r3, [pc, #656]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 80063d6:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80063e2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80063e6:	4ba0      	ldr	r3, [pc, #640]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 80063e8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80063ec:	ee07 3a90 	vmov	s15, r3
 80063f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80063f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80063f8:	4b9b      	ldr	r3, [pc, #620]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 80063fa:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006406:	ee36 7b47 	vsub.f64	d7, d6, d7
 800640a:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 8006658 <HAL_I2C_MemRxCpltCallback+0x8f0>
 800640e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006412:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 8006660 <HAL_I2C_MemRxCpltCallback+0x8f8>
 8006416:	ee37 7b06 	vadd.f64	d7, d7, d6
 800641a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800641e:	ee17 2a90 	vmov	r2, s15
 8006422:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006426:	429a      	cmp	r2, r3
 8006428:	d833      	bhi.n	8006492 <HAL_I2C_MemRxCpltCallback+0x72a>
 800642a:	4b8f      	ldr	r3, [pc, #572]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 800642c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8006430:	ee07 3a90 	vmov	s15, r3
 8006434:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006438:	ed9f 6b85 	vldr	d6, [pc, #532]	@ 8006650 <HAL_I2C_MemRxCpltCallback+0x8e8>
 800643c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006440:	4b89      	ldr	r3, [pc, #548]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006442:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800644e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006452:	4b85      	ldr	r3, [pc, #532]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006454:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006458:	ee07 3a90 	vmov	s15, r3
 800645c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006460:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006464:	4b80      	ldr	r3, [pc, #512]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006466:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006472:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006476:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8006658 <HAL_I2C_MemRxCpltCallback+0x8f0>
 800647a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800647e:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8006660 <HAL_I2C_MemRxCpltCallback+0x8f8>
 8006482:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006486:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800648a:	ee17 3a90 	vmov	r3, s15
 800648e:	b29b      	uxth	r3, r3
 8006490:	e001      	b.n	8006496 <HAL_I2C_MemRxCpltCallback+0x72e>
 8006492:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006496:	4a74      	ldr	r2, [pc, #464]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006498:	f8a2 30a2 	strh.w	r3, [r2, #162]	@ 0xa2
			MYDRON.Thrust.Speed_3 = (((uint32_t)((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value + MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value + MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500) : max_speed;//
 800649c:	4b72      	ldr	r3, [pc, #456]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 800649e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064aa:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8006650 <HAL_I2C_MemRxCpltCallback+0x8e8>
 80064ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80064b2:	4b6d      	ldr	r3, [pc, #436]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 80064b4:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 80064b8:	ee07 3a90 	vmov	s15, r3
 80064bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80064c4:	4b68      	ldr	r3, [pc, #416]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 80064c6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064d2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80064d6:	4b64      	ldr	r3, [pc, #400]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 80064d8:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80064e8:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 8006658 <HAL_I2C_MemRxCpltCallback+0x8f0>
 80064ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80064f0:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 8006660 <HAL_I2C_MemRxCpltCallback+0x8f8>
 80064f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80064f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80064fc:	ee17 2a90 	vmov	r2, s15
 8006500:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006504:	429a      	cmp	r2, r3
 8006506:	d833      	bhi.n	8006570 <HAL_I2C_MemRxCpltCallback+0x808>
 8006508:	4b57      	ldr	r3, [pc, #348]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 800650a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006516:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 8006650 <HAL_I2C_MemRxCpltCallback+0x8e8>
 800651a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800651e:	4b52      	ldr	r3, [pc, #328]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006520:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 8006524:	ee07 3a90 	vmov	s15, r3
 8006528:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800652c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006530:	4b4d      	ldr	r3, [pc, #308]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006532:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800653e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006542:	4b49      	ldr	r3, [pc, #292]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006544:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 8006548:	ee07 3a90 	vmov	s15, r3
 800654c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006550:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006554:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 8006658 <HAL_I2C_MemRxCpltCallback+0x8f0>
 8006558:	ee37 7b06 	vadd.f64	d7, d7, d6
 800655c:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 8006660 <HAL_I2C_MemRxCpltCallback+0x8f8>
 8006560:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006564:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006568:	ee17 3a90 	vmov	r3, s15
 800656c:	b29b      	uxth	r3, r3
 800656e:	e001      	b.n	8006574 <HAL_I2C_MemRxCpltCallback+0x80c>
 8006570:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006574:	4a3c      	ldr	r2, [pc, #240]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006576:	f8a2 30a4 	strh.w	r3, [r2, #164]	@ 0xa4
			MYDRON.Thrust.Speed_4 = (((uint32_t)((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value + MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value + MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500) : max_speed;//
 800657a:	4b3b      	ldr	r3, [pc, #236]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 800657c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8006580:	ee07 3a90 	vmov	s15, r3
 8006584:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006588:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8006650 <HAL_I2C_MemRxCpltCallback+0x8e8>
 800658c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006590:	4b35      	ldr	r3, [pc, #212]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006592:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800659e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80065a2:	4b31      	ldr	r3, [pc, #196]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 80065a4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80065a8:	ee07 3a90 	vmov	s15, r3
 80065ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065b0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80065b4:	4b2c      	ldr	r3, [pc, #176]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 80065b6:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80065c6:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006658 <HAL_I2C_MemRxCpltCallback+0x8f0>
 80065ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80065ce:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006660 <HAL_I2C_MemRxCpltCallback+0x8f8>
 80065d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80065d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80065da:	ee17 2a90 	vmov	r2, s15
 80065de:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d842      	bhi.n	800666c <HAL_I2C_MemRxCpltCallback+0x904>
 80065e6:	4b20      	ldr	r3, [pc, #128]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 80065e8:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80065ec:	ee07 3a90 	vmov	s15, r3
 80065f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065f4:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8006650 <HAL_I2C_MemRxCpltCallback+0x8e8>
 80065f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 80065fe:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800660a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800660e:	4b16      	ldr	r3, [pc, #88]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006610:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006614:	ee07 3a90 	vmov	s15, r3
 8006618:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800661c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006620:	4b11      	ldr	r3, [pc, #68]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006622:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800662e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006632:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006658 <HAL_I2C_MemRxCpltCallback+0x8f0>
 8006636:	ee37 7b06 	vadd.f64	d7, d7, d6
 800663a:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006660 <HAL_I2C_MemRxCpltCallback+0x8f8>
 800663e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006642:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006646:	ee17 3a90 	vmov	r3, s15
 800664a:	b29b      	uxth	r3, r3
 800664c:	e010      	b.n	8006670 <HAL_I2C_MemRxCpltCallback+0x908>
 800664e:	bf00      	nop
 8006650:	66666666 	.word	0x66666666
 8006654:	3fe66666 	.word	0x3fe66666
 8006658:	00000000 	.word	0x00000000
 800665c:	40c48200 	.word	0x40c48200
 8006660:	00000000 	.word	0x00000000
 8006664:	407f4000 	.word	0x407f4000
 8006668:	00000188 	.word	0x00000188
 800666c:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006670:	4a61      	ldr	r2, [pc, #388]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 8006672:	f8a2 30a6 	strh.w	r3, [r2, #166]	@ 0xa6

			if( MYDRON.Thrust.Speed_1 != MYDRON.Thrust.Old_Speed_1){
 8006676:	4b60      	ldr	r3, [pc, #384]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 8006678:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 800667c:	4b5e      	ldr	r3, [pc, #376]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 800667e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8006682:	429a      	cmp	r2, r3
 8006684:	d005      	beq.n	8006692 <HAL_I2C_MemRxCpltCallback+0x92a>
				ESC_1_SPEED( MYDRON.Thrust.Speed_1);
 8006686:	4b5c      	ldr	r3, [pc, #368]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 8006688:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800668c:	4618      	mov	r0, r3
 800668e:	f7fa fb8f 	bl	8000db0 <ESC_1_SPEED>
			}
			if( MYDRON.Thrust.Speed_2 != MYDRON.Thrust.Old_Speed_2){
 8006692:	4b59      	ldr	r3, [pc, #356]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 8006694:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	@ 0xa2
 8006698:	4b57      	ldr	r3, [pc, #348]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 800669a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 800669e:	429a      	cmp	r2, r3
 80066a0:	d005      	beq.n	80066ae <HAL_I2C_MemRxCpltCallback+0x946>
				ESC_2_SPEED( MYDRON.Thrust.Speed_2);
 80066a2:	4b55      	ldr	r3, [pc, #340]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80066a4:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fa fba3 	bl	8000df4 <ESC_2_SPEED>
			}
			if( MYDRON.Thrust.Speed_3 != MYDRON.Thrust.Old_Speed_3){
 80066ae:	4b52      	ldr	r3, [pc, #328]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80066b0:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	@ 0xa4
 80066b4:	4b50      	ldr	r3, [pc, #320]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80066b6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d005      	beq.n	80066ca <HAL_I2C_MemRxCpltCallback+0x962>
				ESC_3_SPEED( MYDRON.Thrust.Speed_3);
 80066be:	4b4e      	ldr	r3, [pc, #312]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80066c0:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fa fbb7 	bl	8000e38 <ESC_3_SPEED>
			}
			if( MYDRON.Thrust.Speed_4 != MYDRON.Thrust.Old_Speed_4){
 80066ca:	4b4b      	ldr	r3, [pc, #300]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80066cc:	f8b3 20a6 	ldrh.w	r2, [r3, #166]	@ 0xa6
 80066d0:	4b49      	ldr	r3, [pc, #292]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80066d2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d005      	beq.n	80066e6 <HAL_I2C_MemRxCpltCallback+0x97e>
				ESC_4_SPEED( MYDRON.Thrust.Speed_4);
 80066da:	4b47      	ldr	r3, [pc, #284]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80066dc:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fa fbcb 	bl	8000e7c <ESC_4_SPEED>
			}

			MYDRON.Thrust.Old_Speed_1 = MYDRON.Thrust.Speed_1;
 80066e6:	4b44      	ldr	r3, [pc, #272]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80066e8:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 80066ec:	4b42      	ldr	r3, [pc, #264]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80066ee:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
			MYDRON.Thrust.Old_Speed_2 = MYDRON.Thrust.Speed_2;
 80066f2:	4b41      	ldr	r3, [pc, #260]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80066f4:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	@ 0xa2
 80066f8:	4b3f      	ldr	r3, [pc, #252]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80066fa:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
			MYDRON.Thrust.Old_Speed_3 = MYDRON.Thrust.Speed_3;
 80066fe:	4b3e      	ldr	r3, [pc, #248]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 8006700:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	@ 0xa4
 8006704:	4b3c      	ldr	r3, [pc, #240]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 8006706:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			MYDRON.Thrust.Old_Speed_4 = MYDRON.Thrust.Speed_4;
 800670a:	4b3b      	ldr	r3, [pc, #236]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 800670c:	f8b3 20a6 	ldrh.w	r2, [r3, #166]	@ 0xa6
 8006710:	4b39      	ldr	r3, [pc, #228]	@ (80067f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 8006712:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

			LED_G_0;
 8006716:	2200      	movs	r2, #0
 8006718:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800671c:	4837      	ldr	r0, [pc, #220]	@ (80067fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 800671e:	f007 f8df 	bl	800d8e0 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 8006722:	4b37      	ldr	r3, [pc, #220]	@ (8006800 <HAL_I2C_MemRxCpltCallback+0xa98>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d125      	bne.n	8006776 <HAL_I2C_MemRxCpltCallback+0xa0e>
		HMC583L_IRQ = 0;
 800672a:	4b35      	ldr	r3, [pc, #212]	@ (8006800 <HAL_I2C_MemRxCpltCallback+0xa98>)
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
		HMC5883L_Get_Z_End_IT();
 8006730:	f7fa fcaa 	bl	8001088 <HMC5883L_Get_Z_End_IT>
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 8006734:	4b33      	ldr	r3, [pc, #204]	@ (8006804 <HAL_I2C_MemRxCpltCallback+0xa9c>)
 8006736:	edd3 7a00 	vldr	s15, [r3]
 800673a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800673e:	ed9f 6b28 	vldr	d6, [pc, #160]	@ 80067e0 <HAL_I2C_MemRxCpltCallback+0xa78>
 8006742:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006746:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 80067e8 <HAL_I2C_MemRxCpltCallback+0xa80>
 800674a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800674e:	4b2e      	ldr	r3, [pc, #184]	@ (8006808 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 8006750:	edd3 7a00 	vldr	s15, [r3]
 8006754:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006758:	ed9f 5b25 	vldr	d5, [pc, #148]	@ 80067f0 <HAL_I2C_MemRxCpltCallback+0xa88>
 800675c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006760:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006764:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006768:	4b26      	ldr	r3, [pc, #152]	@ (8006804 <HAL_I2C_MemRxCpltCallback+0xa9c>)
 800676a:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 800676e:	4b25      	ldr	r3, [pc, #148]	@ (8006804 <HAL_I2C_MemRxCpltCallback+0xa9c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a25      	ldr	r2, [pc, #148]	@ (8006808 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 8006774:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 8006776:	4b25      	ldr	r3, [pc, #148]	@ (800680c <HAL_I2C_MemRxCpltCallback+0xaa4>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d113      	bne.n	80067a6 <HAL_I2C_MemRxCpltCallback+0xa3e>
		BMP180.Raw_Data.temperature = BMP180_GET_temp_IT();
 800677e:	f7fa f807 	bl	8000790 <BMP180_GET_temp_IT>
 8006782:	4603      	mov	r3, r0
 8006784:	461a      	mov	r2, r3
 8006786:	4b22      	ldr	r3, [pc, #136]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 8006788:	641a      	str	r2, [r3, #64]	@ 0x40
		BMP180.temp = BMP180_GET_temp(BMP180.Raw_Data.temperature);
 800678a:	4b21      	ldr	r3, [pc, #132]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 800678c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678e:	b29b      	uxth	r3, r3
 8006790:	4618      	mov	r0, r3
 8006792:	f7fa f91d 	bl	80009d0 <BMP180_GET_temp>
 8006796:	eef0 7a40 	vmov.f32	s15, s0
 800679a:	4b1d      	ldr	r3, [pc, #116]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 800679c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		BMP180_IRQ = 0;
 80067a0:	4b1a      	ldr	r3, [pc, #104]	@ (800680c <HAL_I2C_MemRxCpltCallback+0xaa4>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 80067a6:	4b19      	ldr	r3, [pc, #100]	@ (800680c <HAL_I2C_MemRxCpltCallback+0xaa4>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d113      	bne.n	80067d6 <HAL_I2C_MemRxCpltCallback+0xa6e>
		BMP180.Raw_Data.pressure = BMP180_GET_pres_IT();
 80067ae:	f7fa f805 	bl	80007bc <BMP180_GET_pres_IT>
 80067b2:	4603      	mov	r3, r0
 80067b4:	461a      	mov	r2, r3
 80067b6:	4b16      	ldr	r3, [pc, #88]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 80067b8:	645a      	str	r2, [r3, #68]	@ 0x44
		BMP180.pres = BMP180_GET_pres(BMP180.Raw_Data.pressure);
 80067ba:	4b15      	ldr	r3, [pc, #84]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 80067bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067be:	b29b      	uxth	r3, r3
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fa f94f 	bl	8000a64 <BMP180_GET_pres>
 80067c6:	eef0 7a40 	vmov.f32	s15, s0
 80067ca:	4b11      	ldr	r3, [pc, #68]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 80067cc:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		BMP180_IRQ = 0;
 80067d0:	4b0e      	ldr	r3, [pc, #56]	@ (800680c <HAL_I2C_MemRxCpltCallback+0xaa4>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	701a      	strb	r2, [r3, #0]
	}
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd90      	pop	{r4, r7, pc}
 80067de:	bf00      	nop
 80067e0:	9999999a 	.word	0x9999999a
 80067e4:	3fc99999 	.word	0x3fc99999
 80067e8:	33333333 	.word	0x33333333
 80067ec:	3ff33333 	.word	0x3ff33333
 80067f0:	aaaaaaab 	.word	0xaaaaaaab
 80067f4:	3feaaaaa 	.word	0x3feaaaaa
 80067f8:	00000188 	.word	0x00000188
 80067fc:	58021000 	.word	0x58021000
 8006800:	000041d0 	.word	0x000041d0
 8006804:	00000054 	.word	0x00000054
 8006808:	00000064 	.word	0x00000064
 800680c:	000041d1 	.word	0x000041d1
 8006810:	0000009c 	.word	0x0000009c

08006814 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi){
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	if(NRF24.SPI_Tx_Inte == 1 && NRF24.Step == 4){
 800681c:	4b1a      	ldr	r3, [pc, #104]	@ (8006888 <HAL_SPI_TxCpltCallback+0x74>)
 800681e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006822:	2b00      	cmp	r3, #0
 8006824:	d02c      	beq.n	8006880 <HAL_SPI_TxCpltCallback+0x6c>
 8006826:	4b18      	ldr	r3, [pc, #96]	@ (8006888 <HAL_SPI_TxCpltCallback+0x74>)
 8006828:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800682c:	2b04      	cmp	r3, #4
 800682e:	d127      	bne.n	8006880 <HAL_SPI_TxCpltCallback+0x6c>
		LED_6_1;
 8006830:	2201      	movs	r2, #1
 8006832:	2108      	movs	r1, #8
 8006834:	4815      	ldr	r0, [pc, #84]	@ (800688c <HAL_SPI_TxCpltCallback+0x78>)
 8006836:	f007 f853 	bl	800d8e0 <HAL_GPIO_WritePin>
		NRF24_CSN_HIGH;
 800683a:	2201      	movs	r2, #1
 800683c:	2180      	movs	r1, #128	@ 0x80
 800683e:	4814      	ldr	r0, [pc, #80]	@ (8006890 <HAL_SPI_TxCpltCallback+0x7c>)
 8006840:	f007 f84e 	bl	800d8e0 <HAL_GPIO_WritePin>
		NRF24_CE_HIGH;//nRF24_WaitTX()
 8006844:	2201      	movs	r2, #1
 8006846:	2140      	movs	r1, #64	@ 0x40
 8006848:	4811      	ldr	r0, [pc, #68]	@ (8006890 <HAL_SPI_TxCpltCallback+0x7c>)
 800684a:	f007 f849 	bl	800d8e0 <HAL_GPIO_WritePin>
		LED_6_0;
 800684e:	2200      	movs	r2, #0
 8006850:	2108      	movs	r1, #8
 8006852:	480e      	ldr	r0, [pc, #56]	@ (800688c <HAL_SPI_TxCpltCallback+0x78>)
 8006854:	f007 f844 	bl	800d8e0 <HAL_GPIO_WritePin>
		//
		NRF24.Status = NRF24_Ready;
 8006858:	4b0b      	ldr	r3, [pc, #44]	@ (8006888 <HAL_SPI_TxCpltCallback+0x74>)
 800685a:	2204      	movs	r2, #4
 800685c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		NRF24.Timer_1 = 1;
 8006860:	4b09      	ldr	r3, [pc, #36]	@ (8006888 <HAL_SPI_TxCpltCallback+0x74>)
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
		//NRF24.Message_Status = 2;
		NRF24.SPI_Tx_Inte = 0;
 8006868:	4b07      	ldr	r3, [pc, #28]	@ (8006888 <HAL_SPI_TxCpltCallback+0x74>)
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
		NRF24.Step++;//Step 5
 8006870:	4b05      	ldr	r3, [pc, #20]	@ (8006888 <HAL_SPI_TxCpltCallback+0x74>)
 8006872:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006876:	3301      	adds	r3, #1
 8006878:	b2da      	uxtb	r2, r3
 800687a:	4b03      	ldr	r3, [pc, #12]	@ (8006888 <HAL_SPI_TxCpltCallback+0x74>)
 800687c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

	}
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	000000fc 	.word	0x000000fc
 800688c:	58021000 	.word	0x58021000
 8006890:	58020400 	.word	0x58020400

08006894 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi){//todo
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
	if(STARTUP == 0 && NRF24.SPI_Rx_Inte == 1 && NRF24.Step == 1){
 800689c:	4bac      	ldr	r3, [pc, #688]	@ (8006b50 <HAL_SPI_RxCpltCallback+0x2bc>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f040 8151 	bne.w	8006b48 <HAL_SPI_RxCpltCallback+0x2b4>
 80068a6:	4bab      	ldr	r3, [pc, #684]	@ (8006b54 <HAL_SPI_RxCpltCallback+0x2c0>)
 80068a8:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 814b 	beq.w	8006b48 <HAL_SPI_RxCpltCallback+0x2b4>
 80068b2:	4ba8      	ldr	r3, [pc, #672]	@ (8006b54 <HAL_SPI_RxCpltCallback+0x2c0>)
 80068b4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	f040 8145 	bne.w	8006b48 <HAL_SPI_RxCpltCallback+0x2b4>
		NRF24.SPI_Rx_Inte = 0;
 80068be:	4ba5      	ldr	r3, [pc, #660]	@ (8006b54 <HAL_SPI_RxCpltCallback+0x2c0>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a

		LED_6_1;
 80068c6:	2201      	movs	r2, #1
 80068c8:	2108      	movs	r1, #8
 80068ca:	48a3      	ldr	r0, [pc, #652]	@ (8006b58 <HAL_SPI_RxCpltCallback+0x2c4>)
 80068cc:	f007 f808 	bl	800d8e0 <HAL_GPIO_WritePin>
		nRF24_ReadRXPaylaod_IT_End();
 80068d0:	f7fb fe7c 	bl	80025cc <nRF24_ReadRXPaylaod_IT_End>
		LED_6_0;
 80068d4:	2200      	movs	r2, #0
 80068d6:	2108      	movs	r1, #8
 80068d8:	489f      	ldr	r0, [pc, #636]	@ (8006b58 <HAL_SPI_RxCpltCallback+0x2c4>)
 80068da:	f007 f801 	bl	800d8e0 <HAL_GPIO_WritePin>
		NRF24.Step++;//step 2
 80068de:	4b9d      	ldr	r3, [pc, #628]	@ (8006b54 <HAL_SPI_RxCpltCallback+0x2c0>)
 80068e0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80068e4:	3301      	adds	r3, #1
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	4b9a      	ldr	r3, [pc, #616]	@ (8006b54 <HAL_SPI_RxCpltCallback+0x2c0>)
 80068ea:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

		NRF24.Timer_1 = 2;
 80068ee:	4b99      	ldr	r3, [pc, #612]	@ (8006b54 <HAL_SPI_RxCpltCallback+0x2c0>)
 80068f0:	2202      	movs	r2, #2
 80068f2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86

		LED_Y_1;
 80068f6:	2201      	movs	r2, #1
 80068f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80068fc:	4897      	ldr	r0, [pc, #604]	@ (8006b5c <HAL_SPI_RxCpltCallback+0x2c8>)
 80068fe:	f006 ffef 	bl	800d8e0 <HAL_GPIO_WritePin>

		loopnum = 0;
 8006902:	4b97      	ldr	r3, [pc, #604]	@ (8006b60 <HAL_SPI_RxCpltCallback+0x2cc>)
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
		for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	e013      	b.n	8006936 <HAL_SPI_RxCpltCallback+0xa2>
			if(NRF24.RxData[12+abc] == NRF24.Rxcode[abc+12]){
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	330c      	adds	r3, #12
 8006912:	4a90      	ldr	r2, [pc, #576]	@ (8006b54 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006914:	5cd2      	ldrb	r2, [r2, r3]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	330c      	adds	r3, #12
 800691a:	498e      	ldr	r1, [pc, #568]	@ (8006b54 <HAL_SPI_RxCpltCallback+0x2c0>)
 800691c:	440b      	add	r3, r1
 800691e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006922:	429a      	cmp	r2, r3
 8006924:	d104      	bne.n	8006930 <HAL_SPI_RxCpltCallback+0x9c>
				loopnum++;
 8006926:	4b8e      	ldr	r3, [pc, #568]	@ (8006b60 <HAL_SPI_RxCpltCallback+0x2cc>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3301      	adds	r3, #1
 800692c:	4a8c      	ldr	r2, [pc, #560]	@ (8006b60 <HAL_SPI_RxCpltCallback+0x2cc>)
 800692e:	6013      	str	r3, [r2, #0]
		for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3301      	adds	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b09      	cmp	r3, #9
 800693a:	dde8      	ble.n	800690e <HAL_SPI_RxCpltCallback+0x7a>
			}
		}

		if(loopnum == 10){
 800693c:	4b88      	ldr	r3, [pc, #544]	@ (8006b60 <HAL_SPI_RxCpltCallback+0x2cc>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b0a      	cmp	r3, #10
 8006942:	f040 80ef 	bne.w	8006b24 <HAL_SPI_RxCpltCallback+0x290>
			convert_array_to_value(NRF24.RxData, &MYDRON.Pitch.Wanted_v, 0, 2);//pitch
 8006946:	2302      	movs	r3, #2
 8006948:	2200      	movs	r2, #0
 800694a:	4986      	ldr	r1, [pc, #536]	@ (8006b64 <HAL_SPI_RxCpltCallback+0x2d0>)
 800694c:	4881      	ldr	r0, [pc, #516]	@ (8006b54 <HAL_SPI_RxCpltCallback+0x2c0>)
 800694e:	f000 f925 	bl	8006b9c <convert_array_to_value>
			convert_array_to_value(NRF24.RxData, &MYDRON.Rool.Wanted_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 8006952:	2305      	movs	r3, #5
 8006954:	2203      	movs	r2, #3
 8006956:	4984      	ldr	r1, [pc, #528]	@ (8006b68 <HAL_SPI_RxCpltCallback+0x2d4>)
 8006958:	487e      	ldr	r0, [pc, #504]	@ (8006b54 <HAL_SPI_RxCpltCallback+0x2c0>)
 800695a:	f000 f91f 	bl	8006b9c <convert_array_to_value>
			if(wobble_strenght == 1){
 800695e:	4b83      	ldr	r3, [pc, #524]	@ (8006b6c <HAL_SPI_RxCpltCallback+0x2d8>)
 8006960:	edd3 7a00 	vldr	s15, [r3]
 8006964:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006968:	eef4 7a47 	vcmp.f32	s15, s14
 800696c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006970:	d105      	bne.n	800697e <HAL_SPI_RxCpltCallback+0xea>
				convert_array_to_value(NRF24.RxData, &MYDRON.Thrust.Wanted, 6, 8);//
 8006972:	2308      	movs	r3, #8
 8006974:	2206      	movs	r2, #6
 8006976:	497e      	ldr	r1, [pc, #504]	@ (8006b70 <HAL_SPI_RxCpltCallback+0x2dc>)
 8006978:	4876      	ldr	r0, [pc, #472]	@ (8006b54 <HAL_SPI_RxCpltCallback+0x2c0>)
 800697a:	f000 f90f 	bl	8006b9c <convert_array_to_value>
			}
			convert_array_to_value(NRF24.RxData, &MYDRON.Yaw.Wanted_v, 9, 11);//
 800697e:	230b      	movs	r3, #11
 8006980:	2209      	movs	r2, #9
 8006982:	497c      	ldr	r1, [pc, #496]	@ (8006b74 <HAL_SPI_RxCpltCallback+0x2e0>)
 8006984:	4873      	ldr	r0, [pc, #460]	@ (8006b54 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006986:	f000 f909 	bl	8006b9c <convert_array_to_value>
			MYDRON.Status.Connection = DRON_CONNECTED;
 800698a:	4b7b      	ldr	r3, [pc, #492]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2154 	strb.w	r2, [r3, #340]	@ 0x154

			if(NRF24.RxData[23] == 1){
 8006992:	4b70      	ldr	r3, [pc, #448]	@ (8006b54 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006994:	7ddb      	ldrb	r3, [r3, #23]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d11b      	bne.n	80069d2 <HAL_SPI_RxCpltCallback+0x13e>
				ESC_POWER_1;
 800699a:	2201      	movs	r2, #1
 800699c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80069a0:	4876      	ldr	r0, [pc, #472]	@ (8006b7c <HAL_SPI_RxCpltCallback+0x2e8>)
 80069a2:	f006 ff9d 	bl	800d8e0 <HAL_GPIO_WritePin>
				LED_R_1;
 80069a6:	2201      	movs	r2, #1
 80069a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80069ac:	486b      	ldr	r0, [pc, #428]	@ (8006b5c <HAL_SPI_RxCpltCallback+0x2c8>)
 80069ae:	f006 ff97 	bl	800d8e0 <HAL_GPIO_WritePin>
				if(SD_enable_Flag == 1){
 80069b2:	4b73      	ldr	r3, [pc, #460]	@ (8006b80 <HAL_SPI_RxCpltCallback+0x2ec>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d10b      	bne.n	80069d2 <HAL_SPI_RxCpltCallback+0x13e>
					f_close(&fil);
 80069ba:	4872      	ldr	r0, [pc, #456]	@ (8006b84 <HAL_SPI_RxCpltCallback+0x2f0>)
 80069bc:	f016 fc72 	bl	801d2a4 <f_close>
					fresult = f_mount(NULL, "/", 1);
 80069c0:	2201      	movs	r2, #1
 80069c2:	4971      	ldr	r1, [pc, #452]	@ (8006b88 <HAL_SPI_RxCpltCallback+0x2f4>)
 80069c4:	2000      	movs	r0, #0
 80069c6:	f016 f84d 	bl	801ca64 <f_mount>
 80069ca:	4603      	mov	r3, r0
 80069cc:	461a      	mov	r2, r3
 80069ce:	4b6f      	ldr	r3, [pc, #444]	@ (8006b8c <HAL_SPI_RxCpltCallback+0x2f8>)
 80069d0:	701a      	strb	r2, [r3, #0]
					}
			}

			if(MYDRON.Thrust.Wanted == 9999){
 80069d2:	4b69      	ldr	r3, [pc, #420]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 80069d4:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 80069d8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80069dc:	4293      	cmp	r3, r2
 80069de:	d103      	bne.n	80069e8 <HAL_SPI_RxCpltCallback+0x154>
				MYDRON.Thrust.Max_Flag = THRUST_MAX;
 80069e0:	4b65      	ldr	r3, [pc, #404]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 80069e2:	2210      	movs	r2, #16
 80069e4:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
		  	}
			MYDRON.Thrust.Wanted = MYDRON.Thrust.Wanted * 20;
 80069e8:	4b63      	ldr	r3, [pc, #396]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 80069ea:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	0092      	lsls	r2, r2, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	b21a      	sxth	r2, r3
 80069fc:	4b5e      	ldr	r3, [pc, #376]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 80069fe:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			MYDRON.Thrust.Wanted = MYDRON.Thrust.Wanted - 10000;
 8006a02:	4b5d      	ldr	r3, [pc, #372]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006a04:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	4b61      	ldr	r3, [pc, #388]	@ (8006b90 <HAL_SPI_RxCpltCallback+0x2fc>)
 8006a0c:	4413      	add	r3, r2
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	b21a      	sxth	r2, r3
 8006a12:	4b59      	ldr	r3, [pc, #356]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006a14:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			if(MYDRON.Thrust.Wanted < 0){
 8006a18:	4b57      	ldr	r3, [pc, #348]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006a1a:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	da03      	bge.n	8006a2a <HAL_SPI_RxCpltCallback+0x196>
				MYDRON.Thrust.Wanted = 0;
 8006a22:	4b55      	ldr	r3, [pc, #340]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			}

			MYDRON.Rool.Wanted_rx = (MYDRON.Rool.Wanted_v - 500)*MYDRON.Rool.Wanted_Factor;//MYDRON.Rool.Wanted_rx (-90 <-> 90)
 8006a2a:	4b53      	ldr	r3, [pc, #332]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006a2c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8006a30:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006a34:	ee07 3a90 	vmov	s15, r3
 8006a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a3c:	4b4e      	ldr	r3, [pc, #312]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006a3e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8006a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a4a:	ee17 3a90 	vmov	r3, s15
 8006a4e:	b21a      	sxth	r2, r3
 8006a50:	4b49      	ldr	r3, [pc, #292]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006a52:	861a      	strh	r2, [r3, #48]	@ 0x30
			MYDRON.Pitch.Wanted_rx = (MYDRON.Pitch.Wanted_v - 500)*MYDRON.Pitch.Wanted_Factor;// (-450 <-> 450)
 8006a54:	4b48      	ldr	r3, [pc, #288]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006a56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a5a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a66:	4b44      	ldr	r3, [pc, #272]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006a68:	edd3 7a03 	vldr	s15, [r3, #12]
 8006a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a74:	ee17 3a90 	vmov	r3, s15
 8006a78:	b21a      	sxth	r2, r3
 8006a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006a7c:	801a      	strh	r2, [r3, #0]
			MYDRON.Yaw.Wanted_rx = (MYDRON.Yaw.Wanted_v - 500)*MYDRON.Yaw.Wanted_Factor;// wanted yaw is in deg/s
 8006a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006a80:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 8006a84:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006a88:	ee07 3a90 	vmov	s15, r3
 8006a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a90:	4b39      	ldr	r3, [pc, #228]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006a92:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8006a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a9e:	ee17 3a90 	vmov	r3, s15
 8006aa2:	b21a      	sxth	r2, r3
 8006aa4:	4b34      	ldr	r3, [pc, #208]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006aa6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

			MYDRON.Rool.Wanted_rx = (MYDRON.Rool.Wanted_rx >= 300) ? 300 : (MYDRON.Rool.Wanted_rx <= -300) ? -300 : MYDRON.Rool.Wanted_rx;
 8006aaa:	4b33      	ldr	r3, [pc, #204]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006aac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006ab0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006ab4:	da08      	bge.n	8006ac8 <HAL_SPI_RxCpltCallback+0x234>
 8006ab6:	4b30      	ldr	r3, [pc, #192]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006ab8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006abc:	4a35      	ldr	r2, [pc, #212]	@ (8006b94 <HAL_SPI_RxCpltCallback+0x300>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	bfb8      	it	lt
 8006ac2:	4613      	movlt	r3, r2
 8006ac4:	b21b      	sxth	r3, r3
 8006ac6:	e001      	b.n	8006acc <HAL_SPI_RxCpltCallback+0x238>
 8006ac8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006acc:	4a2a      	ldr	r2, [pc, #168]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006ace:	8613      	strh	r3, [r2, #48]	@ 0x30
			MYDRON.Pitch.Wanted_rx = (MYDRON.Pitch.Wanted_rx >= 300) ? 300 : (MYDRON.Pitch.Wanted_rx <= -300) ? -300 : MYDRON.Pitch.Wanted_rx;
 8006ad0:	4b29      	ldr	r3, [pc, #164]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ad6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006ada:	da08      	bge.n	8006aee <HAL_SPI_RxCpltCallback+0x25a>
 8006adc:	4b26      	ldr	r3, [pc, #152]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8006b94 <HAL_SPI_RxCpltCallback+0x300>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	bfb8      	it	lt
 8006ae8:	4613      	movlt	r3, r2
 8006aea:	b21b      	sxth	r3, r3
 8006aec:	e001      	b.n	8006af2 <HAL_SPI_RxCpltCallback+0x25e>
 8006aee:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006af2:	4a21      	ldr	r2, [pc, #132]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006af4:	8013      	strh	r3, [r2, #0]
			MYDRON.Yaw.Wanted_rx = (MYDRON.Yaw.Wanted_rx >= 300) ? 300 : (MYDRON.Yaw.Wanted_rx <= -300) ? -300 : MYDRON.Yaw.Wanted_rx;
 8006af6:	4b20      	ldr	r3, [pc, #128]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006af8:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	@ 0x60
 8006afc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006b00:	da08      	bge.n	8006b14 <HAL_SPI_RxCpltCallback+0x280>
 8006b02:	4b1d      	ldr	r3, [pc, #116]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b04:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	@ 0x60
 8006b08:	4a22      	ldr	r2, [pc, #136]	@ (8006b94 <HAL_SPI_RxCpltCallback+0x300>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	bfb8      	it	lt
 8006b0e:	4613      	movlt	r3, r2
 8006b10:	b21b      	sxth	r3, r3
 8006b12:	e001      	b.n	8006b18 <HAL_SPI_RxCpltCallback+0x284>
 8006b14:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006b18:	4a17      	ldr	r2, [pc, #92]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b1a:	f8a2 3060 	strh.w	r3, [r2, #96]	@ 0x60

			NRF_TIM_Inte = 0;
 8006b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b98 <HAL_SPI_RxCpltCallback+0x304>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]
		}

		if(loopnum > 0 && loopnum < 10){
 8006b24:	4b0e      	ldr	r3, [pc, #56]	@ (8006b60 <HAL_SPI_RxCpltCallback+0x2cc>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d007      	beq.n	8006b3c <HAL_SPI_RxCpltCallback+0x2a8>
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b60 <HAL_SPI_RxCpltCallback+0x2cc>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b09      	cmp	r3, #9
 8006b32:	d803      	bhi.n	8006b3c <HAL_SPI_RxCpltCallback+0x2a8>
			MYDRON.Status.Connection = DRON_CONNECTION_ERROR;
 8006b34:	4b10      	ldr	r3, [pc, #64]	@ (8006b78 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b36:	2203      	movs	r2, #3
 8006b38:	f883 2154 	strb.w	r2, [r3, #340]	@ 0x154
		}
		LED_Y_0;
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006b42:	4806      	ldr	r0, [pc, #24]	@ (8006b5c <HAL_SPI_RxCpltCallback+0x2c8>)
 8006b44:	f006 fecc 	bl	800d8e0 <HAL_GPIO_WritePin>
	}
}
 8006b48:	bf00      	nop
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	0000007c 	.word	0x0000007c
 8006b54:	000000fc 	.word	0x000000fc
 8006b58:	58021000 	.word	0x58021000
 8006b5c:	58020400 	.word	0x58020400
 8006b60:	000041d8 	.word	0x000041d8
 8006b64:	0000018a 	.word	0x0000018a
 8006b68:	000001ba 	.word	0x000001ba
 8006b6c:	000041cc 	.word	0x000041cc
 8006b70:	0000021a 	.word	0x0000021a
 8006b74:	000001ea 	.word	0x000001ea
 8006b78:	00000188 	.word	0x00000188
 8006b7c:	58021800 	.word	0x58021800
 8006b80:	000041c8 	.word	0x000041c8
 8006b84:	24001ef0 	.word	0x24001ef0
 8006b88:	0801e0f8 	.word	0x0801e0f8
 8006b8c:	24001eec 	.word	0x24001eec
 8006b90:	ffffd8f0 	.word	0xffffd8f0
 8006b94:	fffffed4 	.word	0xfffffed4
 8006b98:	00000080 	.word	0x00000080

08006b9c <convert_array_to_value>:

void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	ed2d 8b04 	vpush	{d8-d9}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	4611      	mov	r1, r2
 8006bac:	461a      	mov	r2, r3
 8006bae:	460b      	mov	r3, r1
 8006bb0:	71fb      	strb	r3, [r7, #7]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 8006bbc:	79ba      	ldrb	r2, [r7, #6]
 8006bbe:	79fb      	ldrb	r3, [r7, #7]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	e02e      	b.n	8006c28 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd0:	ee07 3a90 	vmov	s15, r3
 8006bd4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8006bd8:	79fa      	ldrb	r2, [r7, #7]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	4413      	add	r3, r2
 8006bde:	461a      	mov	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006bfc:	eeb0 1b47 	vmov.f64	d1, d7
 8006c00:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006c04:	f016 fee0 	bl	801d9c8 <pow>
 8006c08:	eeb0 7b40 	vmov.f64	d7, d0
 8006c0c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8006c10:	ee38 7b07 	vadd.f64	d7, d8, d7
 8006c14:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006c18:	ee17 3a90 	vmov	r3, s15
 8006c1c:	b21a      	sxth	r2, r3
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	3301      	adds	r3, #1
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	dacc      	bge.n	8006bca <convert_array_to_value+0x2e>
	}

}
 8006c30:	bf00      	nop
 8006c32:	bf00      	nop
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	ecbd 8b04 	vpop	{d8-d9}
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8006c3e:	b590      	push	{r4, r7, lr}
 8006c40:	b087      	sub	sp, #28
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6039      	str	r1, [r7, #0]
 8006c46:	4611      	mov	r1, r2
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	80fb      	strh	r3, [r7, #6]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	717b      	strb	r3, [r7, #5]
 8006c52:	4613      	mov	r3, r2
 8006c54:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8006c5e:	793a      	ldrb	r2, [r7, #4]
 8006c60:	797b      	ldrb	r3, [r7, #5]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	e03e      	b.n	8006cea <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 8006c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d028      	beq.n	8006cc6 <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	200a      	movs	r0, #10
 8006c7e:	f000 f83d 	bl	8006cfc <potenga>
 8006c82:	4603      	mov	r3, r0
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	88fa      	ldrh	r2, [r7, #6]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	80fb      	strh	r3, [r7, #6]
			x++;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	3301      	adds	r3, #1
 8006c92:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 8006c94:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ca6:	eeb0 1b47 	vmov.f64	d1, d7
 8006caa:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006cae:	f016 fe8b 	bl	801d9c8 <pow>
 8006cb2:	eeb0 7b40 	vmov.f64	d7, d0
 8006cb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006cba:	ee17 3a90 	vmov	r3, s15
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	429c      	cmp	r4, r3
 8006cc2:	dad3      	bge.n	8006c6c <convert_value_to_array+0x2e>
 8006cc4:	e000      	b.n	8006cc8 <convert_value_to_array+0x8a>
				break;
 8006cc6:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 8006cc8:	797a      	ldrb	r2, [r7, #5]
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	4413      	add	r3, r2
 8006cce:	461a      	mov	r2, r3
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	613b      	str	r3, [r7, #16]
		x = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	dad0      	bge.n	8006c94 <convert_value_to_array+0x56>
	}
}
 8006cf2:	bf00      	nop
 8006cf4:	bf00      	nop
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd90      	pop	{r4, r7, pc}

08006cfc <potenga>:
uint32_t potenga(int a, int b){
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <potenga+0x18>
		return 1;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e02d      	b.n	8006d70 <potenga+0x74>
	}
	if(b == 1){
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <potenga+0x22>
		return a;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	e028      	b.n	8006d70 <potenga+0x74>
	}
	if(b > 1){
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	dd10      	ble.n	8006d46 <potenga+0x4a>
			for(int i = 1; i < b; i++){
 8006d24:	2301      	movs	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e007      	b.n	8006d3a <potenga+0x3e>
			a = a*c;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	fb02 f303 	mul.w	r3, r2, r3
 8006d32:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	3301      	adds	r3, #1
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	dbf3      	blt.n	8006d2a <potenga+0x2e>
		}
		return a;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	e014      	b.n	8006d70 <potenga+0x74>
	}
	if(b < 0){
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	da10      	bge.n	8006d6e <potenga+0x72>
		for(int i = 0; i < b; i++){
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	613b      	str	r3, [r7, #16]
 8006d50:	e007      	b.n	8006d62 <potenga+0x66>
			a = a/c;
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	fb92 f3f3 	sdiv	r3, r2, r3
 8006d5a:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	dbf3      	blt.n	8006d52 <potenga+0x56>
		}
		return a;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	e000      	b.n	8006d70 <potenga+0x74>
	}
	return a;
 8006d6e:	687b      	ldr	r3, [r7, #4]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <WartoscBezwgledna>:
float WartoscBezwgledna(float a){
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	ed87 0a01 	vstr	s0, [r7, #4]
	a = (a < 0) ? a*(-1) : a;
 8006d86:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d92:	d504      	bpl.n	8006d9e <WartoscBezwgledna+0x22>
 8006d94:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d98:	eef1 7a67 	vneg.f32	s15, s15
 8006d9c:	e001      	b.n	8006da2 <WartoscBezwgledna+0x26>
 8006d9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006da2:	edc7 7a01 	vstr	s15, [r7, #4]
	return a;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	ee07 3a90 	vmov	s15, r3
}
 8006dac:	eeb0 0a67 	vmov.f32	s0, s15
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
	...

08006dbc <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	71fb      	strb	r3, [r7, #7]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	71bb      	strb	r3, [r7, #6]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 8006dce:	4b09      	ldr	r3, [pc, #36]	@ (8006df4 <RGB_LED_Set_color+0x38>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	797a      	ldrb	r2, [r7, #5]
 8006dd4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 8006dd6:	4b07      	ldr	r3, [pc, #28]	@ (8006df4 <RGB_LED_Set_color+0x38>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	79fa      	ldrb	r2, [r7, #7]
 8006ddc:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 8006dde:	4b05      	ldr	r3, [pc, #20]	@ (8006df4 <RGB_LED_Set_color+0x38>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	79ba      	ldrb	r2, [r7, #6]
 8006de4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	24000380 	.word	0x24000380

08006df8 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	ee07 3a90 	vmov	s15, r3
 8006e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006e10:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8006e60 <RGB_LED_For_BAT+0x68>
 8006e14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e18:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8006e68 <RGB_LED_For_BAT+0x70>
 8006e1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e20:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e24:	edc7 7a00 	vstr	s15, [r7]
 8006e28:	783b      	ldrb	r3, [r7, #0]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	79fa      	ldrb	r2, [r7, #7]
 8006e2e:	ee07 2a90 	vmov	s15, r2
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006e3a:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006e60 <RGB_LED_For_BAT+0x68>
 8006e3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e46:	edc7 7a00 	vstr	s15, [r7]
 8006e4a:	783a      	ldrb	r2, [r7, #0]
 8006e4c:	b2d1      	uxtb	r1, r2
 8006e4e:	2200      	movs	r2, #0
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff ffb3 	bl	8006dbc <RGB_LED_Set_color>
}
 8006e56:	bf00      	nop
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	66666666 	.word	0x66666666
 8006e64:	40046666 	.word	0x40046666
 8006e68:	00000000 	.word	0x00000000
 8006e6c:	406fe000 	.word	0x406fe000

08006e70 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8006e70:	b590      	push	{r4, r7, lr}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6039      	str	r1, [r7, #0]
 8006e78:	4611      	mov	r1, r2
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	80fb      	strh	r3, [r7, #6]
 8006e80:	460b      	mov	r3, r1
 8006e82:	717b      	strb	r3, [r7, #5]
 8006e84:	4613      	mov	r3, r2
 8006e86:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8006e90:	793a      	ldrb	r2, [r7, #4]
 8006e92:	797b      	ldrb	r3, [r7, #5]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8006e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	da04      	bge.n	8006eaa <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8006ea0:	797b      	ldrb	r3, [r7, #5]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	222d      	movs	r2, #45	@ 0x2d
 8006ea8:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 8006eaa:	2301      	movs	r3, #1
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	e035      	b.n	8006f1c <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8006eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01d      	beq.n	8006ef4 <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	200a      	movs	r0, #10
 8006ec2:	f7ff ff1b 	bl	8006cfc <potenga>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	88fa      	ldrh	r2, [r7, #6]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	80fb      	strh	r3, [r7, #6]
			x++;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8006ed8:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	200a      	movs	r0, #10
 8006ee6:	f7ff ff09 	bl	8006cfc <potenga>
 8006eea:	4603      	mov	r3, r0
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	429c      	cmp	r4, r3
 8006ef0:	dade      	bge.n	8006eb0 <convert_value_to_array2+0x40>
 8006ef2:	e000      	b.n	8006ef6 <convert_value_to_array2+0x86>
				break;
 8006ef4:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	7979      	ldrb	r1, [r7, #5]
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	440b      	add	r3, r1
 8006f00:	4619      	mov	r1, r3
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	440b      	add	r3, r1
 8006f06:	3230      	adds	r2, #48	@ 0x30
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	613b      	str	r3, [r7, #16]
		x = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	dad9      	bge.n	8006ed8 <convert_value_to_array2+0x68>
	}
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd90      	pop	{r4, r7, pc}

08006f2e <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	ed2d 8b02 	vpush	{d8}
 8006f34:	b08c      	sub	sp, #48	@ 0x30
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	ed87 0a03 	vstr	s0, [r7, #12]
 8006f3c:	60b8      	str	r0, [r7, #8]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	71fb      	strb	r3, [r7, #7]
 8006f42:	4613      	mov	r3, r2
 8006f44:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 8006f4e:	79ba      	ldrb	r2, [r7, #6]
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 8006f5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f66:	d50a      	bpl.n	8006f7e <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	222d      	movs	r2, #45	@ 0x2d
 8006f70:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 8006f72:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f76:	eef1 7a67 	vneg.f32	s15, s15
 8006f7a:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 8006f7e:	2301      	movs	r3, #1
 8006f80:	61fb      	str	r3, [r7, #28]
 8006f82:	e021      	b.n	8006fc8 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f92:	eeb0 1b47 	vmov.f64	d1, d7
 8006f96:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006f9a:	f016 fd15 	bl	801d9c8 <pow>
 8006f9e:	eeb0 7b40 	vmov.f64	d7, d0
 8006fa2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006fa6:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 8006faa:	ed97 7a03 	vldr	s14, [r7, #12]
 8006fae:	edd7 7a04 	vldr	s15, [r7, #16]
 8006fb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fba:	da0b      	bge.n	8006fd4 <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	dbd8      	blt.n	8006f84 <convert_value_to_array3+0x56>
 8006fd2:	e000      	b.n	8006fd6 <convert_value_to_array3+0xa8>
			break;
 8006fd4:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dc07      	bgt.n	8006ff6 <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	4413      	add	r3, r2
 8006fee:	222e      	movs	r2, #46	@ 0x2e
 8006ff0:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	dd0a      	ble.n	8007012 <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 8006ffc:	79fa      	ldrb	r2, [r7, #7]
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	4413      	add	r3, r2
 8007002:	3301      	adds	r3, #1
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	4413      	add	r3, r2
 8007008:	222e      	movs	r2, #46	@ 0x2e
 800700a:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	3301      	adds	r3, #1
 8007010:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 8007012:	edd7 7a03 	vldr	s15, [r7, #12]
 8007016:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	1e5a      	subs	r2, r3, #1
 800701e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800702a:	eeb0 1b47 	vmov.f64	d1, d7
 800702e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007032:	f016 fcc9 	bl	801d9c8 <pow>
 8007036:	eeb0 7b40 	vmov.f64	d7, d0
 800703a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800703e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007042:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 8007046:	2300      	movs	r3, #0
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	e05f      	b.n	800710c <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 800704c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007058:	d93d      	bls.n	80070d6 <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 800705a:	edd7 7a03 	vldr	s15, [r7, #12]
 800705e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	1e5a      	subs	r2, r3, #1
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007072:	eeb0 1b47 	vmov.f64	d1, d7
 8007076:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800707a:	f016 fca5 	bl	801d9c8 <pow>
 800707e:	eeb0 7b40 	vmov.f64	d7, d0
 8007082:	ee38 7b47 	vsub.f64	d7, d8, d7
 8007086:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800708a:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 800708e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007090:	3301      	adds	r3, #1
 8007092:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	1e5a      	subs	r2, r3, #1
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070a4:	eeb0 1b47 	vmov.f64	d1, d7
 80070a8:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80070ac:	f016 fc8c 	bl	801d9c8 <pow>
 80070b0:	eeb0 7b40 	vmov.f64	d7, d0
 80070b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80070b8:	ee17 3a90 	vmov	r3, s15
 80070bc:	b29b      	uxth	r3, r3
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80070ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d2:	dabb      	bge.n	800704c <convert_value_to_array3+0x11e>
 80070d4:	e000      	b.n	80070d8 <convert_value_to_array3+0x1aa>
				break;
 80070d6:	bf00      	nop
		}

        if(loopnum == kropka){
 80070d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d102      	bne.n	80070e6 <convert_value_to_array3+0x1b8>
            loopnum++;
 80070e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e2:	3301      	adds	r3, #1
 80070e4:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 80070e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	79f9      	ldrb	r1, [r7, #7]
 80070ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ee:	440b      	add	r3, r1
 80070f0:	4619      	mov	r1, r3
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	440b      	add	r3, r1
 80070f6:	3230      	adds	r2, #48	@ 0x30
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80070fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fe:	3301      	adds	r3, #1
 8007100:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	3301      	adds	r3, #1
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	3b02      	subs	r3, #2
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	429a      	cmp	r2, r3
 8007114:	dbbe      	blt.n	8007094 <convert_value_to_array3+0x166>
	}
}
 8007116:	bf00      	nop
 8007118:	bf00      	nop
 800711a:	3730      	adds	r7, #48	@ 0x30
 800711c:	46bd      	mov	sp, r7
 800711e:	ecbd 8b02 	vpop	{d8}
 8007122:	bd80      	pop	{r7, pc}

08007124 <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 800712c:	4ba9      	ldr	r3, [pc, #676]	@ (80073d4 <uSD_Card_SendData_To_Buffer+0x2b0>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	b218      	sxth	r0, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	01db      	lsls	r3, r3, #7
 8007138:	b2da      	uxtb	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	01db      	lsls	r3, r3, #7
 8007140:	b2db      	uxtb	r3, r3
 8007142:	3308      	adds	r3, #8
 8007144:	b2db      	uxtb	r3, r3
 8007146:	49a4      	ldr	r1, [pc, #656]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007148:	f7ff fe92 	bl	8006e70 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	01db      	lsls	r3, r3, #7
 8007150:	3308      	adds	r3, #8
 8007152:	4aa1      	ldr	r2, [pc, #644]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007154:	2120      	movs	r1, #32
 8007156:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.Thrust.Speed_1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 8007158:	4ba0      	ldr	r3, [pc, #640]	@ (80073dc <uSD_Card_SendData_To_Buffer+0x2b8>)
 800715a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800715e:	b218      	sxth	r0, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	01db      	lsls	r3, r3, #7
 8007166:	b2db      	uxtb	r3, r3
 8007168:	3309      	adds	r3, #9
 800716a:	b2da      	uxtb	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	b2db      	uxtb	r3, r3
 8007170:	01db      	lsls	r3, r3, #7
 8007172:	b2db      	uxtb	r3, r3
 8007174:	330f      	adds	r3, #15
 8007176:	b2db      	uxtb	r3, r3
 8007178:	4997      	ldr	r1, [pc, #604]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800717a:	f7ff fe79 	bl	8006e70 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	01db      	lsls	r3, r3, #7
 8007182:	330f      	adds	r3, #15
 8007184:	4a94      	ldr	r2, [pc, #592]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007186:	2120      	movs	r1, #32
 8007188:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Thrust.Speed_2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 800718a:	4b94      	ldr	r3, [pc, #592]	@ (80073dc <uSD_Card_SendData_To_Buffer+0x2b8>)
 800718c:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 8007190:	b218      	sxth	r0, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	b2db      	uxtb	r3, r3
 8007196:	01db      	lsls	r3, r3, #7
 8007198:	b2db      	uxtb	r3, r3
 800719a:	3310      	adds	r3, #16
 800719c:	b2da      	uxtb	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	01db      	lsls	r3, r3, #7
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	3316      	adds	r3, #22
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	498b      	ldr	r1, [pc, #556]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80071ac:	f7ff fe60 	bl	8006e70 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	01db      	lsls	r3, r3, #7
 80071b4:	3316      	adds	r3, #22
 80071b6:	4a88      	ldr	r2, [pc, #544]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80071b8:	2120      	movs	r1, #32
 80071ba:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Thrust.Speed_3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 80071bc:	4b87      	ldr	r3, [pc, #540]	@ (80073dc <uSD_Card_SendData_To_Buffer+0x2b8>)
 80071be:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 80071c2:	b218      	sxth	r0, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	01db      	lsls	r3, r3, #7
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	3317      	adds	r3, #23
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	01db      	lsls	r3, r3, #7
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	331d      	adds	r3, #29
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	497e      	ldr	r1, [pc, #504]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80071de:	f7ff fe47 	bl	8006e70 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	01db      	lsls	r3, r3, #7
 80071e6:	331d      	adds	r3, #29
 80071e8:	4a7b      	ldr	r2, [pc, #492]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80071ea:	2120      	movs	r1, #32
 80071ec:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Thrust.Speed_4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 80071ee:	4b7b      	ldr	r3, [pc, #492]	@ (80073dc <uSD_Card_SendData_To_Buffer+0x2b8>)
 80071f0:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 80071f4:	b218      	sxth	r0, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	01db      	lsls	r3, r3, #7
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	331e      	adds	r3, #30
 8007200:	b2da      	uxtb	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	b2db      	uxtb	r3, r3
 8007206:	01db      	lsls	r3, r3, #7
 8007208:	b2db      	uxtb	r3, r3
 800720a:	3324      	adds	r3, #36	@ 0x24
 800720c:	b2db      	uxtb	r3, r3
 800720e:	4972      	ldr	r1, [pc, #456]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007210:	f7ff fe2e 	bl	8006e70 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	01db      	lsls	r3, r3, #7
 8007218:	3324      	adds	r3, #36	@ 0x24
 800721a:	4a6f      	ldr	r2, [pc, #444]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800721c:	2120      	movs	r1, #32
 800721e:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(MYDRON.Rool.Wanted, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 8007220:	4b6e      	ldr	r3, [pc, #440]	@ (80073dc <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007222:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	01db      	lsls	r3, r3, #7
 800722c:	b2db      	uxtb	r3, r3
 800722e:	3325      	adds	r3, #37	@ 0x25
 8007230:	b2d9      	uxtb	r1, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	b2db      	uxtb	r3, r3
 8007236:	01db      	lsls	r3, r3, #7
 8007238:	b2db      	uxtb	r3, r3
 800723a:	332d      	adds	r3, #45	@ 0x2d
 800723c:	b2db      	uxtb	r3, r3
 800723e:	461a      	mov	r2, r3
 8007240:	4865      	ldr	r0, [pc, #404]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007242:	eeb0 0a67 	vmov.f32	s0, s15
 8007246:	f7ff fe72 	bl	8006f2e <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	01db      	lsls	r3, r3, #7
 800724e:	332d      	adds	r3, #45	@ 0x2d
 8007250:	4a61      	ldr	r2, [pc, #388]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007252:	2120      	movs	r1, #32
 8007254:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(MYDRON.Pitch.Wanted, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 8007256:	4b61      	ldr	r3, [pc, #388]	@ (80073dc <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007258:	edd3 7a02 	vldr	s15, [r3, #8]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	01db      	lsls	r3, r3, #7
 8007262:	b2db      	uxtb	r3, r3
 8007264:	332e      	adds	r3, #46	@ 0x2e
 8007266:	b2d9      	uxtb	r1, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	01db      	lsls	r3, r3, #7
 800726e:	b2db      	uxtb	r3, r3
 8007270:	3336      	adds	r3, #54	@ 0x36
 8007272:	b2db      	uxtb	r3, r3
 8007274:	461a      	mov	r2, r3
 8007276:	4858      	ldr	r0, [pc, #352]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007278:	eeb0 0a67 	vmov.f32	s0, s15
 800727c:	f7ff fe57 	bl	8006f2e <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	01db      	lsls	r3, r3, #7
 8007284:	3336      	adds	r3, #54	@ 0x36
 8007286:	4a54      	ldr	r2, [pc, #336]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007288:	2120      	movs	r1, #32
 800728a:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(MYDRON.Yaw.Wanted, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 800728c:	4b53      	ldr	r3, [pc, #332]	@ (80073dc <uSD_Card_SendData_To_Buffer+0x2b8>)
 800728e:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	01db      	lsls	r3, r3, #7
 8007298:	b2db      	uxtb	r3, r3
 800729a:	3337      	adds	r3, #55	@ 0x37
 800729c:	b2d9      	uxtb	r1, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	01db      	lsls	r3, r3, #7
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	333f      	adds	r3, #63	@ 0x3f
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	484a      	ldr	r0, [pc, #296]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80072ae:	eeb0 0a67 	vmov.f32	s0, s15
 80072b2:	f7ff fe3c 	bl	8006f2e <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	01db      	lsls	r3, r3, #7
 80072ba:	333f      	adds	r3, #63	@ 0x3f
 80072bc:	4a46      	ldr	r2, [pc, #280]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80072be:	2120      	movs	r1, #32
 80072c0:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(MYDRON.Pitch.Angle_Error_Sum, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 80072c2:	4b46      	ldr	r3, [pc, #280]	@ (80073dc <uSD_Card_SendData_To_Buffer+0x2b8>)
 80072c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c6:	b218      	sxth	r0, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	01db      	lsls	r3, r3, #7
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	3340      	adds	r3, #64	@ 0x40
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	01db      	lsls	r3, r3, #7
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	3348      	adds	r3, #72	@ 0x48
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	493d      	ldr	r1, [pc, #244]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80072e2:	f7ff fdc5 	bl	8006e70 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	01db      	lsls	r3, r3, #7
 80072ea:	3348      	adds	r3, #72	@ 0x48
 80072ec:	4a3a      	ldr	r2, [pc, #232]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80072ee:	2120      	movs	r1, #32
 80072f0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Rool.Angle_Error_Sum, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 80072f2:	4b3a      	ldr	r3, [pc, #232]	@ (80073dc <uSD_Card_SendData_To_Buffer+0x2b8>)
 80072f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f6:	b218      	sxth	r0, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	01db      	lsls	r3, r3, #7
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	3349      	adds	r3, #73	@ 0x49
 8007302:	b2da      	uxtb	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	01db      	lsls	r3, r3, #7
 800730a:	b2db      	uxtb	r3, r3
 800730c:	3351      	adds	r3, #81	@ 0x51
 800730e:	b2db      	uxtb	r3, r3
 8007310:	4931      	ldr	r1, [pc, #196]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007312:	f7ff fdad 	bl	8006e70 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	01db      	lsls	r3, r3, #7
 800731a:	3351      	adds	r3, #81	@ 0x51
 800731c:	4a2e      	ldr	r2, [pc, #184]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800731e:	2120      	movs	r1, #32
 8007320:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Yaw.Angle_Error_Sum, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 8007322:	4b2e      	ldr	r3, [pc, #184]	@ (80073dc <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007328:	b218      	sxth	r0, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	01db      	lsls	r3, r3, #7
 8007330:	b2db      	uxtb	r3, r3
 8007332:	3352      	adds	r3, #82	@ 0x52
 8007334:	b2da      	uxtb	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	01db      	lsls	r3, r3, #7
 800733c:	b2db      	uxtb	r3, r3
 800733e:	335a      	adds	r3, #90	@ 0x5a
 8007340:	b2db      	uxtb	r3, r3
 8007342:	4925      	ldr	r1, [pc, #148]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007344:	f7ff fd94 	bl	8006e70 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	01db      	lsls	r3, r3, #7
 800734c:	335a      	adds	r3, #90	@ 0x5a
 800734e:	4a22      	ldr	r2, [pc, #136]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007350:	2120      	movs	r1, #32
 8007352:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 8007354:	4b22      	ldr	r3, [pc, #136]	@ (80073e0 <uSD_Card_SendData_To_Buffer+0x2bc>)
 8007356:	edd3 7a00 	vldr	s15, [r3]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	01db      	lsls	r3, r3, #7
 8007360:	b2db      	uxtb	r3, r3
 8007362:	335b      	adds	r3, #91	@ 0x5b
 8007364:	b2d9      	uxtb	r1, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	01db      	lsls	r3, r3, #7
 800736c:	b2db      	uxtb	r3, r3
 800736e:	3362      	adds	r3, #98	@ 0x62
 8007370:	b2db      	uxtb	r3, r3
 8007372:	461a      	mov	r2, r3
 8007374:	4818      	ldr	r0, [pc, #96]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007376:	eeb0 0a67 	vmov.f32	s0, s15
 800737a:	f7ff fdd8 	bl	8006f2e <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	01db      	lsls	r3, r3, #7
 8007382:	3362      	adds	r3, #98	@ 0x62
 8007384:	4a14      	ldr	r2, [pc, #80]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007386:	2120      	movs	r1, #32
 8007388:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 800738a:	4b15      	ldr	r3, [pc, #84]	@ (80073e0 <uSD_Card_SendData_To_Buffer+0x2bc>)
 800738c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	b2db      	uxtb	r3, r3
 8007394:	01db      	lsls	r3, r3, #7
 8007396:	b2db      	uxtb	r3, r3
 8007398:	3363      	adds	r3, #99	@ 0x63
 800739a:	b2d9      	uxtb	r1, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	01db      	lsls	r3, r3, #7
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	336a      	adds	r3, #106	@ 0x6a
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	461a      	mov	r2, r3
 80073aa:	480b      	ldr	r0, [pc, #44]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80073ac:	eeb0 0a67 	vmov.f32	s0, s15
 80073b0:	f7ff fdbd 	bl	8006f2e <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	01db      	lsls	r3, r3, #7
 80073b8:	336a      	adds	r3, #106	@ 0x6a
 80073ba:	4a07      	ldr	r2, [pc, #28]	@ (80073d8 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80073bc:	2120      	movs	r1, #32
 80073be:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 80073c0:	4b07      	ldr	r3, [pc, #28]	@ (80073e0 <uSD_Card_SendData_To_Buffer+0x2bc>)
 80073c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	01db      	lsls	r3, r3, #7
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	336b      	adds	r3, #107	@ 0x6b
 80073d0:	e008      	b.n	80073e4 <uSD_Card_SendData_To_Buffer+0x2c0>
 80073d2:	bf00      	nop
 80073d4:	000041c0 	.word	0x000041c0
 80073d8:	24002f28 	.word	0x24002f28
 80073dc:	00000188 	.word	0x00000188
 80073e0:	00000084 	.word	0x00000084
 80073e4:	b2d9      	uxtb	r1, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	01db      	lsls	r3, r3, #7
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	3372      	adds	r3, #114	@ 0x72
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	461a      	mov	r2, r3
 80073f4:	482e      	ldr	r0, [pc, #184]	@ (80074b0 <uSD_Card_SendData_To_Buffer+0x38c>)
 80073f6:	eeb0 0a67 	vmov.f32	s0, s15
 80073fa:	f7ff fd98 	bl	8006f2e <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	01db      	lsls	r3, r3, #7
 8007402:	3372      	adds	r3, #114	@ 0x72
 8007404:	4a2a      	ldr	r2, [pc, #168]	@ (80074b0 <uSD_Card_SendData_To_Buffer+0x38c>)
 8007406:	2120      	movs	r1, #32
 8007408:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 800740a:	4b2a      	ldr	r3, [pc, #168]	@ (80074b4 <uSD_Card_SendData_To_Buffer+0x390>)
 800740c:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8007410:	b218      	sxth	r0, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	01db      	lsls	r3, r3, #7
 8007418:	b2db      	uxtb	r3, r3
 800741a:	3373      	adds	r3, #115	@ 0x73
 800741c:	b2da      	uxtb	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	01db      	lsls	r3, r3, #7
 8007424:	b2db      	uxtb	r3, r3
 8007426:	3377      	adds	r3, #119	@ 0x77
 8007428:	b2db      	uxtb	r3, r3
 800742a:	4921      	ldr	r1, [pc, #132]	@ (80074b0 <uSD_Card_SendData_To_Buffer+0x38c>)
 800742c:	f7ff fd20 	bl	8006e70 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	01db      	lsls	r3, r3, #7
 8007434:	3377      	adds	r3, #119	@ 0x77
 8007436:	4a1e      	ldr	r2, [pc, #120]	@ (80074b0 <uSD_Card_SendData_To_Buffer+0x38c>)
 8007438:	2120      	movs	r1, #32
 800743a:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 800743c:	4b1d      	ldr	r3, [pc, #116]	@ (80074b4 <uSD_Card_SendData_To_Buffer+0x390>)
 800743e:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8007442:	b218      	sxth	r0, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	01db      	lsls	r3, r3, #7
 800744a:	b2db      	uxtb	r3, r3
 800744c:	3378      	adds	r3, #120	@ 0x78
 800744e:	b2da      	uxtb	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	01db      	lsls	r3, r3, #7
 8007456:	b2db      	uxtb	r3, r3
 8007458:	337a      	adds	r3, #122	@ 0x7a
 800745a:	b2db      	uxtb	r3, r3
 800745c:	4914      	ldr	r1, [pc, #80]	@ (80074b0 <uSD_Card_SendData_To_Buffer+0x38c>)
 800745e:	f7ff fd07 	bl	8006e70 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	01db      	lsls	r3, r3, #7
 8007466:	337a      	adds	r3, #122	@ 0x7a
 8007468:	4a11      	ldr	r2, [pc, #68]	@ (80074b0 <uSD_Card_SendData_To_Buffer+0x38c>)
 800746a:	2120      	movs	r1, #32
 800746c:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 800746e:	4b12      	ldr	r3, [pc, #72]	@ (80074b8 <uSD_Card_SendData_To_Buffer+0x394>)
 8007470:	edd3 7a00 	vldr	s15, [r3]
 8007474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007478:	ee17 3a90 	vmov	r3, s15
 800747c:	b218      	sxth	r0, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	01db      	lsls	r3, r3, #7
 8007484:	b2db      	uxtb	r3, r3
 8007486:	337b      	adds	r3, #123	@ 0x7b
 8007488:	b2da      	uxtb	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	b2db      	uxtb	r3, r3
 800748e:	01db      	lsls	r3, r3, #7
 8007490:	b2db      	uxtb	r3, r3
 8007492:	337f      	adds	r3, #127	@ 0x7f
 8007494:	b2db      	uxtb	r3, r3
 8007496:	4906      	ldr	r1, [pc, #24]	@ (80074b0 <uSD_Card_SendData_To_Buffer+0x38c>)
 8007498:	f7ff fcea 	bl	8006e70 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3301      	adds	r3, #1
 80074a0:	01db      	lsls	r3, r3, #7
 80074a2:	4a03      	ldr	r2, [pc, #12]	@ (80074b0 <uSD_Card_SendData_To_Buffer+0x38c>)
 80074a4:	210a      	movs	r1, #10
 80074a6:	54d1      	strb	r1, [r2, r3]
}
 80074a8:	bf00      	nop
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	24002f28 	.word	0x24002f28
 80074b4:	00000188 	.word	0x00000188
 80074b8:	00000054 	.word	0x00000054

080074bc <Stack_Push>:

void Stack_Push(float data){
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 80074c6:	4b22      	ldr	r3, [pc, #136]	@ (8007550 <Stack_Push+0x94>)
 80074c8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80074cc:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80074d0:	3301      	adds	r3, #1
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	4b1e      	ldr	r3, [pc, #120]	@ (8007550 <Stack_Push+0x94>)
 80074d6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80074da:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 80074de:	4b1c      	ldr	r3, [pc, #112]	@ (8007550 <Stack_Push+0x94>)
 80074e0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80074e4:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80074e8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80074ec:	d105      	bne.n	80074fa <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 80074ee:	4b18      	ldr	r3, [pc, #96]	@ (8007550 <Stack_Push+0x94>)
 80074f0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 80074fa:	4b15      	ldr	r3, [pc, #84]	@ (8007550 <Stack_Push+0x94>)
 80074fc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007500:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007504:	4a12      	ldr	r2, [pc, #72]	@ (8007550 <Stack_Push+0x94>)
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 800750e:	4b10      	ldr	r3, [pc, #64]	@ (8007550 <Stack_Push+0x94>)
 8007510:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007514:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007518:	3301      	adds	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	4b0c      	ldr	r3, [pc, #48]	@ (8007550 <Stack_Push+0x94>)
 800751e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007522:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 8007526:	4b0a      	ldr	r3, [pc, #40]	@ (8007550 <Stack_Push+0x94>)
 8007528:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800752c:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007530:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007534:	d105      	bne.n	8007542 <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 8007536:	4b06      	ldr	r3, [pc, #24]	@ (8007550 <Stack_Push+0x94>)
 8007538:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800753c:	2200      	movs	r2, #0
 800753e:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 8007542:	bf00      	nop
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	000002e8 	.word	0x000002e8

08007554 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 8007554:	b480      	push	{r7}
 8007556:	af00      	add	r7, sp, #0
	MYDRON.PID_Rool.Status = 2;
 8007558:	4b05      	ldr	r3, [pc, #20]	@ (8007570 <ROOL_MAX_VAL+0x1c>)
 800755a:	2202      	movs	r2, #2
 800755c:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
	return 5000;
 8007560:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007564:	4618      	mov	r0, r3
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	00000188 	.word	0x00000188

08007574 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 8007574:	b480      	push	{r7}
 8007576:	af00      	add	r7, sp, #0
	MYDRON.PID_Rool.Status = 1;
 8007578:	4b04      	ldr	r3, [pc, #16]	@ (800758c <ROOL_MIN_VAL+0x18>)
 800757a:	2201      	movs	r2, #1
 800757c:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
	return -5000;
 8007580:	4b03      	ldr	r3, [pc, #12]	@ (8007590 <ROOL_MIN_VAL+0x1c>)
}
 8007582:	4618      	mov	r0, r3
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	00000188 	.word	0x00000188
 8007590:	ffffec78 	.word	0xffffec78

08007594 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007594:	b480      	push	{r7}
 8007596:	af00      	add	r7, sp, #0
	MYDRON.PID_Pitch.Status = 2;
 8007598:	4b05      	ldr	r3, [pc, #20]	@ (80075b0 <PITCH_MAX_VAL+0x1c>)
 800759a:	2202      	movs	r2, #2
 800759c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	return 5000;
 80075a0:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	00000188 	.word	0x00000188

080075b4 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
	MYDRON.PID_Pitch.Status = 1;
 80075b8:	4b04      	ldr	r3, [pc, #16]	@ (80075cc <PITCH_MIN_VAL+0x18>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	return -5000;
 80075c0:	4b03      	ldr	r3, [pc, #12]	@ (80075d0 <PITCH_MIN_VAL+0x1c>)
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	00000188 	.word	0x00000188
 80075d0:	ffffec78 	.word	0xffffec78

080075d4 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
	MYDRON.PID_Yaw.Status = 2;
 80075d8:	4b05      	ldr	r3, [pc, #20]	@ (80075f0 <YAW_MAX_VAL+0x1c>)
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
	return 5000;
 80075e0:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	00000188 	.word	0x00000188

080075f4 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
	MYDRON.PID_Yaw.Status = 1;
 80075f8:	4b04      	ldr	r3, [pc, #16]	@ (800760c <YAW_MIN_VAL+0x18>)
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
	return -5000;
 8007600:	4b03      	ldr	r3, [pc, #12]	@ (8007610 <YAW_MIN_VAL+0x1c>)
}
 8007602:	4618      	mov	r0, r3
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	00000188 	.word	0x00000188
 8007610:	ffffec78 	.word	0xffffec78

08007614 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007614:	b480      	push	{r7}
 8007616:	af00      	add	r7, sp, #0
	MYDRON.PID_Rool.Status = 0;
 8007618:	4b08      	ldr	r3, [pc, #32]	@ (800763c <ROOL_GOOD_VAL+0x28>)
 800761a:	2200      	movs	r2, #0
 800761c:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
	return MYDRON.PID_Rool.Angular_Rate_Value;
 8007620:	4b06      	ldr	r3, [pc, #24]	@ (800763c <ROOL_GOOD_VAL+0x28>)
 8007622:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 8007626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800762a:	ee17 3a90 	vmov	r3, s15
 800762e:	b21b      	sxth	r3, r3
}
 8007630:	4618      	mov	r0, r3
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	00000188 	.word	0x00000188

08007640 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
	MYDRON.PID_Pitch.Status = 0;
 8007644:	4b08      	ldr	r3, [pc, #32]	@ (8007668 <PITCH_GOOD_VAL+0x28>)
 8007646:	2200      	movs	r2, #0
 8007648:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	return MYDRON.PID_Pitch.Angular_Rate_Value;
 800764c:	4b06      	ldr	r3, [pc, #24]	@ (8007668 <PITCH_GOOD_VAL+0x28>)
 800764e:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8007652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007656:	ee17 3a90 	vmov	r3, s15
 800765a:	b21b      	sxth	r3, r3
}
 800765c:	4618      	mov	r0, r3
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	00000188 	.word	0x00000188

0800766c <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 800766c:	b480      	push	{r7}
 800766e:	af00      	add	r7, sp, #0
	MYDRON.PID_Yaw.Status = 0;
 8007670:	4b08      	ldr	r3, [pc, #32]	@ (8007694 <YAW_GOOD_VAL+0x28>)
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
	return MYDRON.PID_Yaw.Angular_Rate_Value;
 8007678:	4b06      	ldr	r3, [pc, #24]	@ (8007694 <YAW_GOOD_VAL+0x28>)
 800767a:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 800767e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007682:	ee17 3a90 	vmov	r3, s15
 8007686:	b21b      	sxth	r3, r3
}
 8007688:	4618      	mov	r0, r3
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	00000188 	.word	0x00000188

08007698 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800769e:	463b      	mov	r3, r7
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	605a      	str	r2, [r3, #4]
 80076a6:	609a      	str	r2, [r3, #8]
 80076a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80076aa:	f003 f88f 	bl	800a7cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80076ae:	2301      	movs	r3, #1
 80076b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80076ba:	231f      	movs	r3, #31
 80076bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80076be:	2387      	movs	r3, #135	@ 0x87
 80076c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80076c6:	2300      	movs	r3, #0
 80076c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80076ca:	2301      	movs	r3, #1
 80076cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80076ce:	2301      	movs	r3, #1
 80076d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80076da:	463b      	mov	r3, r7
 80076dc:	4618      	mov	r0, r3
 80076de:	f003 f8ad 	bl	800a83c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80076e2:	2004      	movs	r0, #4
 80076e4:	f003 f88a 	bl	800a7fc <HAL_MPU_Enable>

}
 80076e8:	bf00      	nop
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80076f4:	b672      	cpsid	i
}
 80076f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80076f8:	bf00      	nop
 80076fa:	e7fd      	b.n	80076f8 <Error_Handler+0x8>

080076fc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007700:	4b27      	ldr	r3, [pc, #156]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007702:	4a28      	ldr	r2, [pc, #160]	@ (80077a4 <MX_SPI1_Init+0xa8>)
 8007704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007706:	4b26      	ldr	r3, [pc, #152]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007708:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800770c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800770e:	4b24      	ldr	r3, [pc, #144]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007710:	2200      	movs	r2, #0
 8007712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007714:	4b22      	ldr	r3, [pc, #136]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007716:	2207      	movs	r2, #7
 8007718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800771a:	4b21      	ldr	r3, [pc, #132]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 800771c:	2200      	movs	r2, #0
 800771e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007720:	4b1f      	ldr	r3, [pc, #124]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007722:	2200      	movs	r2, #0
 8007724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007726:	4b1e      	ldr	r3, [pc, #120]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007728:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800772c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800772e:	4b1c      	ldr	r3, [pc, #112]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007730:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007734:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007736:	4b1a      	ldr	r3, [pc, #104]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007738:	2200      	movs	r2, #0
 800773a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800773c:	4b18      	ldr	r3, [pc, #96]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 800773e:	2200      	movs	r2, #0
 8007740:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007742:	4b17      	ldr	r3, [pc, #92]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007744:	2200      	movs	r2, #0
 8007746:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8007748:	4b15      	ldr	r3, [pc, #84]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 800774a:	2200      	movs	r2, #0
 800774c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800774e:	4b14      	ldr	r3, [pc, #80]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007750:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007754:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007756:	4b12      	ldr	r3, [pc, #72]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007758:	2200      	movs	r2, #0
 800775a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800775c:	4b10      	ldr	r3, [pc, #64]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 800775e:	2200      	movs	r2, #0
 8007760:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007762:	4b0f      	ldr	r3, [pc, #60]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007764:	2200      	movs	r2, #0
 8007766:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007768:	4b0d      	ldr	r3, [pc, #52]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 800776a:	2200      	movs	r2, #0
 800776c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800776e:	4b0c      	ldr	r3, [pc, #48]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007770:	2200      	movs	r2, #0
 8007772:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007774:	4b0a      	ldr	r3, [pc, #40]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007776:	2200      	movs	r2, #0
 8007778:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800777a:	4b09      	ldr	r3, [pc, #36]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 800777c:	2200      	movs	r2, #0
 800777e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007780:	4b07      	ldr	r3, [pc, #28]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007782:	2200      	movs	r2, #0
 8007784:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007786:	4b06      	ldr	r3, [pc, #24]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 8007788:	2200      	movs	r2, #0
 800778a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800778c:	4804      	ldr	r0, [pc, #16]	@ (80077a0 <MX_SPI1_Init+0xa4>)
 800778e:	f00c f8d5 	bl	801393c <HAL_SPI_Init>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8007798:	f7ff ffaa 	bl	80076f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800779c:	bf00      	nop
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	240001ec 	.word	0x240001ec
 80077a4:	40013000 	.word	0x40013000

080077a8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80077ac:	4b27      	ldr	r3, [pc, #156]	@ (800784c <MX_SPI2_Init+0xa4>)
 80077ae:	4a28      	ldr	r2, [pc, #160]	@ (8007850 <MX_SPI2_Init+0xa8>)
 80077b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80077b2:	4b26      	ldr	r3, [pc, #152]	@ (800784c <MX_SPI2_Init+0xa4>)
 80077b4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80077b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80077ba:	4b24      	ldr	r3, [pc, #144]	@ (800784c <MX_SPI2_Init+0xa4>)
 80077bc:	2200      	movs	r2, #0
 80077be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80077c0:	4b22      	ldr	r3, [pc, #136]	@ (800784c <MX_SPI2_Init+0xa4>)
 80077c2:	2207      	movs	r2, #7
 80077c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80077c6:	4b21      	ldr	r3, [pc, #132]	@ (800784c <MX_SPI2_Init+0xa4>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80077cc:	4b1f      	ldr	r3, [pc, #124]	@ (800784c <MX_SPI2_Init+0xa4>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80077d2:	4b1e      	ldr	r3, [pc, #120]	@ (800784c <MX_SPI2_Init+0xa4>)
 80077d4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80077d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077da:	4b1c      	ldr	r3, [pc, #112]	@ (800784c <MX_SPI2_Init+0xa4>)
 80077dc:	2200      	movs	r2, #0
 80077de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80077e0:	4b1a      	ldr	r3, [pc, #104]	@ (800784c <MX_SPI2_Init+0xa4>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80077e6:	4b19      	ldr	r3, [pc, #100]	@ (800784c <MX_SPI2_Init+0xa4>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077ec:	4b17      	ldr	r3, [pc, #92]	@ (800784c <MX_SPI2_Init+0xa4>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80077f2:	4b16      	ldr	r3, [pc, #88]	@ (800784c <MX_SPI2_Init+0xa4>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80077f8:	4b14      	ldr	r3, [pc, #80]	@ (800784c <MX_SPI2_Init+0xa4>)
 80077fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80077fe:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007800:	4b12      	ldr	r3, [pc, #72]	@ (800784c <MX_SPI2_Init+0xa4>)
 8007802:	2200      	movs	r2, #0
 8007804:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007806:	4b11      	ldr	r3, [pc, #68]	@ (800784c <MX_SPI2_Init+0xa4>)
 8007808:	2200      	movs	r2, #0
 800780a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800780c:	4b0f      	ldr	r3, [pc, #60]	@ (800784c <MX_SPI2_Init+0xa4>)
 800780e:	2200      	movs	r2, #0
 8007810:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007812:	4b0e      	ldr	r3, [pc, #56]	@ (800784c <MX_SPI2_Init+0xa4>)
 8007814:	2200      	movs	r2, #0
 8007816:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007818:	4b0c      	ldr	r3, [pc, #48]	@ (800784c <MX_SPI2_Init+0xa4>)
 800781a:	2200      	movs	r2, #0
 800781c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800781e:	4b0b      	ldr	r3, [pc, #44]	@ (800784c <MX_SPI2_Init+0xa4>)
 8007820:	2200      	movs	r2, #0
 8007822:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007824:	4b09      	ldr	r3, [pc, #36]	@ (800784c <MX_SPI2_Init+0xa4>)
 8007826:	2200      	movs	r2, #0
 8007828:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800782a:	4b08      	ldr	r3, [pc, #32]	@ (800784c <MX_SPI2_Init+0xa4>)
 800782c:	2200      	movs	r2, #0
 800782e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007830:	4b06      	ldr	r3, [pc, #24]	@ (800784c <MX_SPI2_Init+0xa4>)
 8007832:	2200      	movs	r2, #0
 8007834:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007836:	4805      	ldr	r0, [pc, #20]	@ (800784c <MX_SPI2_Init+0xa4>)
 8007838:	f00c f880 	bl	801393c <HAL_SPI_Init>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8007842:	f7ff ff55 	bl	80076f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007846:	bf00      	nop
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	24000274 	.word	0x24000274
 8007850:	40003800 	.word	0x40003800

08007854 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08c      	sub	sp, #48	@ 0x30
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800785c:	f107 031c 	add.w	r3, r7, #28
 8007860:	2200      	movs	r2, #0
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	605a      	str	r2, [r3, #4]
 8007866:	609a      	str	r2, [r3, #8]
 8007868:	60da      	str	r2, [r3, #12]
 800786a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a60      	ldr	r2, [pc, #384]	@ (80079f4 <HAL_SPI_MspInit+0x1a0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d136      	bne.n	80078e4 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007876:	4b60      	ldr	r3, [pc, #384]	@ (80079f8 <HAL_SPI_MspInit+0x1a4>)
 8007878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800787c:	4a5e      	ldr	r2, [pc, #376]	@ (80079f8 <HAL_SPI_MspInit+0x1a4>)
 800787e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007882:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007886:	4b5c      	ldr	r3, [pc, #368]	@ (80079f8 <HAL_SPI_MspInit+0x1a4>)
 8007888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800788c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007890:	61bb      	str	r3, [r7, #24]
 8007892:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007894:	4b58      	ldr	r3, [pc, #352]	@ (80079f8 <HAL_SPI_MspInit+0x1a4>)
 8007896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800789a:	4a57      	ldr	r2, [pc, #348]	@ (80079f8 <HAL_SPI_MspInit+0x1a4>)
 800789c:	f043 0302 	orr.w	r3, r3, #2
 80078a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80078a4:	4b54      	ldr	r3, [pc, #336]	@ (80079f8 <HAL_SPI_MspInit+0x1a4>)
 80078a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB4(NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80078b2:	2338      	movs	r3, #56	@ 0x38
 80078b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078b6:	2302      	movs	r3, #2
 80078b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ba:	2300      	movs	r3, #0
 80078bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078be:	2300      	movs	r3, #0
 80078c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80078c2:	2305      	movs	r3, #5
 80078c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078c6:	f107 031c 	add.w	r3, r7, #28
 80078ca:	4619      	mov	r1, r3
 80078cc:	484b      	ldr	r0, [pc, #300]	@ (80079fc <HAL_SPI_MspInit+0x1a8>)
 80078ce:	f005 fe47 	bl	800d560 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80078d2:	2200      	movs	r2, #0
 80078d4:	2100      	movs	r1, #0
 80078d6:	2023      	movs	r0, #35	@ 0x23
 80078d8:	f002 ff43 	bl	800a762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80078dc:	2023      	movs	r0, #35	@ 0x23
 80078de:	f002 ff5a 	bl	800a796 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80078e2:	e082      	b.n	80079ea <HAL_SPI_MspInit+0x196>
  else if(spiHandle->Instance==SPI2)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a45      	ldr	r2, [pc, #276]	@ (8007a00 <HAL_SPI_MspInit+0x1ac>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d17d      	bne.n	80079ea <HAL_SPI_MspInit+0x196>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80078ee:	4b42      	ldr	r3, [pc, #264]	@ (80079f8 <HAL_SPI_MspInit+0x1a4>)
 80078f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078f4:	4a40      	ldr	r2, [pc, #256]	@ (80079f8 <HAL_SPI_MspInit+0x1a4>)
 80078f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80078fe:	4b3e      	ldr	r3, [pc, #248]	@ (80079f8 <HAL_SPI_MspInit+0x1a4>)
 8007900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007908:	613b      	str	r3, [r7, #16]
 800790a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800790c:	4b3a      	ldr	r3, [pc, #232]	@ (80079f8 <HAL_SPI_MspInit+0x1a4>)
 800790e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007912:	4a39      	ldr	r2, [pc, #228]	@ (80079f8 <HAL_SPI_MspInit+0x1a4>)
 8007914:	f043 0302 	orr.w	r3, r3, #2
 8007918:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800791c:	4b36      	ldr	r3, [pc, #216]	@ (80079f8 <HAL_SPI_MspInit+0x1a4>)
 800791e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800792a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800792e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007930:	2302      	movs	r3, #2
 8007932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007934:	2300      	movs	r3, #0
 8007936:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007938:	2301      	movs	r3, #1
 800793a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800793c:	2305      	movs	r3, #5
 800793e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007940:	f107 031c 	add.w	r3, r7, #28
 8007944:	4619      	mov	r1, r3
 8007946:	482d      	ldr	r0, [pc, #180]	@ (80079fc <HAL_SPI_MspInit+0x1a8>)
 8007948:	f005 fe0a 	bl	800d560 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800794c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8007950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007952:	2302      	movs	r3, #2
 8007954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007956:	2301      	movs	r3, #1
 8007958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800795a:	2301      	movs	r3, #1
 800795c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800795e:	2305      	movs	r3, #5
 8007960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007962:	f107 031c 	add.w	r3, r7, #28
 8007966:	4619      	mov	r1, r3
 8007968:	4824      	ldr	r0, [pc, #144]	@ (80079fc <HAL_SPI_MspInit+0x1a8>)
 800796a:	f005 fdf9 	bl	800d560 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream0;
 800796e:	4b25      	ldr	r3, [pc, #148]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 8007970:	4a25      	ldr	r2, [pc, #148]	@ (8007a08 <HAL_SPI_MspInit+0x1b4>)
 8007972:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8007974:	4b23      	ldr	r3, [pc, #140]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 8007976:	2228      	movs	r2, #40	@ 0x28
 8007978:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800797a:	4b22      	ldr	r3, [pc, #136]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 800797c:	2240      	movs	r2, #64	@ 0x40
 800797e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007980:	4b20      	ldr	r3, [pc, #128]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 8007982:	2200      	movs	r2, #0
 8007984:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007986:	4b1f      	ldr	r3, [pc, #124]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 8007988:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800798c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800798e:	4b1d      	ldr	r3, [pc, #116]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 8007990:	2200      	movs	r2, #0
 8007992:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007994:	4b1b      	ldr	r3, [pc, #108]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 8007996:	2200      	movs	r2, #0
 8007998:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800799a:	4b1a      	ldr	r3, [pc, #104]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 800799c:	2200      	movs	r2, #0
 800799e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80079a0:	4b18      	ldr	r3, [pc, #96]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80079a6:	4b17      	ldr	r3, [pc, #92]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 80079a8:	2204      	movs	r2, #4
 80079aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80079ac:	4b15      	ldr	r3, [pc, #84]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 80079ae:	2203      	movs	r2, #3
 80079b0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80079b2:	4b14      	ldr	r3, [pc, #80]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80079b8:	4b12      	ldr	r3, [pc, #72]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80079be:	4811      	ldr	r0, [pc, #68]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 80079c0:	f002 ff7c 	bl	800a8bc <HAL_DMA_Init>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <HAL_SPI_MspInit+0x17a>
      Error_Handler();
 80079ca:	f7ff fe91 	bl	80076f0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 80079d2:	679a      	str	r2, [r3, #120]	@ 0x78
 80079d4:	4a0b      	ldr	r2, [pc, #44]	@ (8007a04 <HAL_SPI_MspInit+0x1b0>)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80079da:	2200      	movs	r2, #0
 80079dc:	2100      	movs	r1, #0
 80079de:	2024      	movs	r0, #36	@ 0x24
 80079e0:	f002 febf 	bl	800a762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80079e4:	2024      	movs	r0, #36	@ 0x24
 80079e6:	f002 fed6 	bl	800a796 <HAL_NVIC_EnableIRQ>
}
 80079ea:	bf00      	nop
 80079ec:	3730      	adds	r7, #48	@ 0x30
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	40013000 	.word	0x40013000
 80079f8:	58024400 	.word	0x58024400
 80079fc:	58020400 	.word	0x58020400
 8007a00:	40003800 	.word	0x40003800
 8007a04:	240002fc 	.word	0x240002fc
 8007a08:	40020010 	.word	0x40020010

08007a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a12:	4b0a      	ldr	r3, [pc, #40]	@ (8007a3c <HAL_MspInit+0x30>)
 8007a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a18:	4a08      	ldr	r2, [pc, #32]	@ (8007a3c <HAL_MspInit+0x30>)
 8007a1a:	f043 0302 	orr.w	r3, r3, #2
 8007a1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007a22:	4b06      	ldr	r3, [pc, #24]	@ (8007a3c <HAL_MspInit+0x30>)
 8007a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	607b      	str	r3, [r7, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	58024400 	.word	0x58024400

08007a40 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8007a40:	b480      	push	{r7}
 8007a42:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007a44:	4b0b      	ldr	r3, [pc, #44]	@ (8007a74 <SDTimer_Handler+0x34>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <SDTimer_Handler+0x16>
    Timer1--;
 8007a4c:	4b09      	ldr	r3, [pc, #36]	@ (8007a74 <SDTimer_Handler+0x34>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	4a08      	ldr	r2, [pc, #32]	@ (8007a74 <SDTimer_Handler+0x34>)
 8007a54:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 8007a56:	4b08      	ldr	r3, [pc, #32]	@ (8007a78 <SDTimer_Handler+0x38>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <SDTimer_Handler+0x28>
    Timer2--;
 8007a5e:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <SDTimer_Handler+0x38>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3b01      	subs	r3, #1
 8007a64:	4a04      	ldr	r2, [pc, #16]	@ (8007a78 <SDTimer_Handler+0x38>)
 8007a66:	6013      	str	r3, [r2, #0]
}
 8007a68:	bf00      	nop
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	24000378 	.word	0x24000378
 8007a78:	2400037c 	.word	0x2400037c

08007a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 8007a80:	2200      	movs	r2, #0
 8007a82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a86:	480a      	ldr	r0, [pc, #40]	@ (8007ab0 <NMI_Handler+0x34>)
 8007a88:	f005 ff2a 	bl	800d8e0 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007a92:	4808      	ldr	r0, [pc, #32]	@ (8007ab4 <NMI_Handler+0x38>)
 8007a94:	f005 ff24 	bl	800d8e0 <HAL_GPIO_WritePin>
	LED_R_1;
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007a9e:	4805      	ldr	r0, [pc, #20]	@ (8007ab4 <NMI_Handler+0x38>)
 8007aa0:	f005 ff1e 	bl	800d8e0 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 8007aa4:	4804      	ldr	r0, [pc, #16]	@ (8007ab8 <NMI_Handler+0x3c>)
 8007aa6:	f015 fbfd 	bl	801d2a4 <f_close>
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007aaa:	bf00      	nop
 8007aac:	e7fd      	b.n	8007aaa <NMI_Handler+0x2e>
 8007aae:	bf00      	nop
 8007ab0:	58021000 	.word	0x58021000
 8007ab4:	58020400 	.word	0x58020400
 8007ab8:	24001ef0 	.word	0x24001ef0

08007abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007ac6:	480a      	ldr	r0, [pc, #40]	@ (8007af0 <HardFault_Handler+0x34>)
 8007ac8:	f005 ff0a 	bl	800d8e0 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007acc:	2200      	movs	r2, #0
 8007ace:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007ad2:	4808      	ldr	r0, [pc, #32]	@ (8007af4 <HardFault_Handler+0x38>)
 8007ad4:	f005 ff04 	bl	800d8e0 <HAL_GPIO_WritePin>
	LED_R_1;
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007ade:	4805      	ldr	r0, [pc, #20]	@ (8007af4 <HardFault_Handler+0x38>)
 8007ae0:	f005 fefe 	bl	800d8e0 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007ae4:	4804      	ldr	r0, [pc, #16]	@ (8007af8 <HardFault_Handler+0x3c>)
 8007ae6:	f015 fbdd 	bl	801d2a4 <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007aea:	bf00      	nop
 8007aec:	e7fd      	b.n	8007aea <HardFault_Handler+0x2e>
 8007aee:	bf00      	nop
 8007af0:	58021000 	.word	0x58021000
 8007af4:	58020400 	.word	0x58020400
 8007af8:	24001ef0 	.word	0x24001ef0

08007afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 8007b00:	2200      	movs	r2, #0
 8007b02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b06:	480a      	ldr	r0, [pc, #40]	@ (8007b30 <MemManage_Handler+0x34>)
 8007b08:	f005 feea 	bl	800d8e0 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007b12:	4808      	ldr	r0, [pc, #32]	@ (8007b34 <MemManage_Handler+0x38>)
 8007b14:	f005 fee4 	bl	800d8e0 <HAL_GPIO_WritePin>
	LED_R_1;
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007b1e:	4805      	ldr	r0, [pc, #20]	@ (8007b34 <MemManage_Handler+0x38>)
 8007b20:	f005 fede 	bl	800d8e0 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007b24:	4804      	ldr	r0, [pc, #16]	@ (8007b38 <MemManage_Handler+0x3c>)
 8007b26:	f015 fbbd 	bl	801d2a4 <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007b2a:	bf00      	nop
 8007b2c:	e7fd      	b.n	8007b2a <MemManage_Handler+0x2e>
 8007b2e:	bf00      	nop
 8007b30:	58021000 	.word	0x58021000
 8007b34:	58020400 	.word	0x58020400
 8007b38:	24001ef0 	.word	0x24001ef0

08007b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8007b40:	2201      	movs	r2, #1
 8007b42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b46:	480a      	ldr	r0, [pc, #40]	@ (8007b70 <BusFault_Handler+0x34>)
 8007b48:	f005 feca 	bl	800d8e0 <HAL_GPIO_WritePin>
	LED_Y_1;
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007b52:	4808      	ldr	r0, [pc, #32]	@ (8007b74 <BusFault_Handler+0x38>)
 8007b54:	f005 fec4 	bl	800d8e0 <HAL_GPIO_WritePin>
	LED_R_1;
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007b5e:	4805      	ldr	r0, [pc, #20]	@ (8007b74 <BusFault_Handler+0x38>)
 8007b60:	f005 febe 	bl	800d8e0 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007b64:	4804      	ldr	r0, [pc, #16]	@ (8007b78 <BusFault_Handler+0x3c>)
 8007b66:	f015 fb9d 	bl	801d2a4 <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007b6a:	bf00      	nop
 8007b6c:	e7fd      	b.n	8007b6a <BusFault_Handler+0x2e>
 8007b6e:	bf00      	nop
 8007b70:	58021000 	.word	0x58021000
 8007b74:	58020400 	.word	0x58020400
 8007b78:	24001ef0 	.word	0x24001ef0

08007b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 8007b80:	2200      	movs	r2, #0
 8007b82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b86:	480a      	ldr	r0, [pc, #40]	@ (8007bb0 <UsageFault_Handler+0x34>)
 8007b88:	f005 feaa 	bl	800d8e0 <HAL_GPIO_WritePin>
	LED_Y_1;
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007b92:	4808      	ldr	r0, [pc, #32]	@ (8007bb4 <UsageFault_Handler+0x38>)
 8007b94:	f005 fea4 	bl	800d8e0 <HAL_GPIO_WritePin>
	LED_R_1;
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007b9e:	4805      	ldr	r0, [pc, #20]	@ (8007bb4 <UsageFault_Handler+0x38>)
 8007ba0:	f005 fe9e 	bl	800d8e0 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007ba4:	4804      	ldr	r0, [pc, #16]	@ (8007bb8 <UsageFault_Handler+0x3c>)
 8007ba6:	f015 fb7d 	bl	801d2a4 <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <UsageFault_Handler+0x2e>
 8007bae:	bf00      	nop
 8007bb0:	58021000 	.word	0x58021000
 8007bb4:	58020400 	.word	0x58020400
 8007bb8:	24001ef0 	.word	0x24001ef0

08007bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007bc0:	bf00      	nop
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007bce:	bf00      	nop
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007bdc:	bf00      	nop
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
	...

08007be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8007bec:	4b08      	ldr	r3, [pc, #32]	@ (8007c10 <SysTick_Handler+0x28>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	4a07      	ldr	r2, [pc, #28]	@ (8007c10 <SysTick_Handler+0x28>)
 8007bf4:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8007bf6:	4b06      	ldr	r3, [pc, #24]	@ (8007c10 <SysTick_Handler+0x28>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b09      	cmp	r3, #9
 8007bfc:	d904      	bls.n	8007c08 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 8007bfe:	4b04      	ldr	r3, [pc, #16]	@ (8007c10 <SysTick_Handler+0x28>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8007c04:	f7ff ff1c 	bl	8007a40 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c08:	f000 fd0e 	bl	8008628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c0c:	bf00      	nop
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	24000374 	.word	0x24000374

08007c14 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8007c18:	4802      	ldr	r0, [pc, #8]	@ (8007c24 <DMA1_Stream0_IRQHandler+0x10>)
 8007c1a:	f004 f975 	bl	800bf08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007c1e:	bf00      	nop
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	240002fc 	.word	0x240002fc

08007c28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8007c2c:	4802      	ldr	r0, [pc, #8]	@ (8007c38 <ADC_IRQHandler+0x10>)
 8007c2e:	f001 fb49 	bl	80092c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007c32:	bf00      	nop
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	240000ac 	.word	0x240000ac

08007c3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007c40:	4802      	ldr	r0, [pc, #8]	@ (8007c4c <TIM2_IRQHandler+0x10>)
 8007c42:	f00e f956 	bl	8015ef2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007c46:	bf00      	nop
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	240003cc 	.word	0x240003cc

08007c50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007c54:	4802      	ldr	r0, [pc, #8]	@ (8007c60 <SPI1_IRQHandler+0x10>)
 8007c56:	f00d f9c5 	bl	8014fe4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007c5a:	bf00      	nop
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	240001ec 	.word	0x240001ec

08007c64 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007c68:	4802      	ldr	r0, [pc, #8]	@ (8007c74 <SPI2_IRQHandler+0x10>)
 8007c6a:	f00d f9bb 	bl	8014fe4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8007c6e:	bf00      	nop
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	24000274 	.word	0x24000274

08007c78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007c7c:	4802      	ldr	r0, [pc, #8]	@ (8007c88 <USART1_IRQHandler+0x10>)
 8007c7e:	f00f fd8f 	bl	80177a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007c82:	bf00      	nop
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	240004b0 	.word	0x240004b0

08007c8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8007c90:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007c94:	f005 fe3d 	bl	800d912 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007c98:	bf00      	nop
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007ca0:	4802      	ldr	r0, [pc, #8]	@ (8007cac <DMA2_Stream0_IRQHandler+0x10>)
 8007ca2:	f004 f931 	bl	800bf08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007ca6:	bf00      	nop
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	2400011c 	.word	0x2400011c

08007cb0 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8007cb4:	4802      	ldr	r0, [pc, #8]	@ (8007cc0 <I2C5_EV_IRQHandler+0x10>)
 8007cb6:	f006 fa21 	bl	800e0fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8007cba:	bf00      	nop
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	24000198 	.word	0x24000198

08007cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007cc8:	4b32      	ldr	r3, [pc, #200]	@ (8007d94 <SystemInit+0xd0>)
 8007cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cce:	4a31      	ldr	r2, [pc, #196]	@ (8007d94 <SystemInit+0xd0>)
 8007cd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007cd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8007d98 <SystemInit+0xd4>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 030f 	and.w	r3, r3, #15
 8007ce0:	2b06      	cmp	r3, #6
 8007ce2:	d807      	bhi.n	8007cf4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8007d98 <SystemInit+0xd4>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f023 030f 	bic.w	r3, r3, #15
 8007cec:	4a2a      	ldr	r2, [pc, #168]	@ (8007d98 <SystemInit+0xd4>)
 8007cee:	f043 0307 	orr.w	r3, r3, #7
 8007cf2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007cf4:	4b29      	ldr	r3, [pc, #164]	@ (8007d9c <SystemInit+0xd8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a28      	ldr	r2, [pc, #160]	@ (8007d9c <SystemInit+0xd8>)
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007d00:	4b26      	ldr	r3, [pc, #152]	@ (8007d9c <SystemInit+0xd8>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007d06:	4b25      	ldr	r3, [pc, #148]	@ (8007d9c <SystemInit+0xd8>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	4924      	ldr	r1, [pc, #144]	@ (8007d9c <SystemInit+0xd8>)
 8007d0c:	4b24      	ldr	r3, [pc, #144]	@ (8007da0 <SystemInit+0xdc>)
 8007d0e:	4013      	ands	r3, r2
 8007d10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007d12:	4b21      	ldr	r3, [pc, #132]	@ (8007d98 <SystemInit+0xd4>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0308 	and.w	r3, r3, #8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007d98 <SystemInit+0xd4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f023 030f 	bic.w	r3, r3, #15
 8007d26:	4a1c      	ldr	r2, [pc, #112]	@ (8007d98 <SystemInit+0xd4>)
 8007d28:	f043 0307 	orr.w	r3, r3, #7
 8007d2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8007d9c <SystemInit+0xd8>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007d34:	4b19      	ldr	r3, [pc, #100]	@ (8007d9c <SystemInit+0xd8>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007d3a:	4b18      	ldr	r3, [pc, #96]	@ (8007d9c <SystemInit+0xd8>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007d40:	4b16      	ldr	r3, [pc, #88]	@ (8007d9c <SystemInit+0xd8>)
 8007d42:	4a18      	ldr	r2, [pc, #96]	@ (8007da4 <SystemInit+0xe0>)
 8007d44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007d46:	4b15      	ldr	r3, [pc, #84]	@ (8007d9c <SystemInit+0xd8>)
 8007d48:	4a17      	ldr	r2, [pc, #92]	@ (8007da8 <SystemInit+0xe4>)
 8007d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007d4c:	4b13      	ldr	r3, [pc, #76]	@ (8007d9c <SystemInit+0xd8>)
 8007d4e:	4a17      	ldr	r2, [pc, #92]	@ (8007dac <SystemInit+0xe8>)
 8007d50:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007d52:	4b12      	ldr	r3, [pc, #72]	@ (8007d9c <SystemInit+0xd8>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007d58:	4b10      	ldr	r3, [pc, #64]	@ (8007d9c <SystemInit+0xd8>)
 8007d5a:	4a14      	ldr	r2, [pc, #80]	@ (8007dac <SystemInit+0xe8>)
 8007d5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d9c <SystemInit+0xd8>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007d64:	4b0d      	ldr	r3, [pc, #52]	@ (8007d9c <SystemInit+0xd8>)
 8007d66:	4a11      	ldr	r2, [pc, #68]	@ (8007dac <SystemInit+0xe8>)
 8007d68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d9c <SystemInit+0xd8>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007d70:	4b0a      	ldr	r3, [pc, #40]	@ (8007d9c <SystemInit+0xd8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a09      	ldr	r2, [pc, #36]	@ (8007d9c <SystemInit+0xd8>)
 8007d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007d7c:	4b07      	ldr	r3, [pc, #28]	@ (8007d9c <SystemInit+0xd8>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8007d82:	4b0b      	ldr	r3, [pc, #44]	@ (8007db0 <SystemInit+0xec>)
 8007d84:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8007d88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8007d8a:	bf00      	nop
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	e000ed00 	.word	0xe000ed00
 8007d98:	52002000 	.word	0x52002000
 8007d9c:	58024400 	.word	0x58024400
 8007da0:	eaf6ed7f 	.word	0xeaf6ed7f
 8007da4:	02020200 	.word	0x02020200
 8007da8:	01ff0000 	.word	0x01ff0000
 8007dac:	01010280 	.word	0x01010280
 8007db0:	52004000 	.word	0x52004000

08007db4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b098      	sub	sp, #96	@ 0x60
 8007db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007dba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	605a      	str	r2, [r3, #4]
 8007dc4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007dc6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	605a      	str	r2, [r3, #4]
 8007dd0:	609a      	str	r2, [r3, #8]
 8007dd2:	60da      	str	r2, [r3, #12]
 8007dd4:	611a      	str	r2, [r3, #16]
 8007dd6:	615a      	str	r2, [r3, #20]
 8007dd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007dda:	1d3b      	adds	r3, r7, #4
 8007ddc:	2234      	movs	r2, #52	@ 0x34
 8007dde:	2100      	movs	r1, #0
 8007de0:	4618      	mov	r0, r3
 8007de2:	f015 fc57 	bl	801d694 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007de6:	4b45      	ldr	r3, [pc, #276]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007de8:	4a45      	ldr	r2, [pc, #276]	@ (8007f00 <MX_TIM1_Init+0x14c>)
 8007dea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8007dec:	4b43      	ldr	r3, [pc, #268]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007dee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007df2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007df4:	4b41      	ldr	r3, [pc, #260]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8007dfa:	4b40      	ldr	r3, [pc, #256]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007dfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e02:	4b3e      	ldr	r3, [pc, #248]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007e08:	4b3c      	ldr	r3, [pc, #240]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007e10:	2280      	movs	r2, #128	@ 0x80
 8007e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007e14:	4839      	ldr	r0, [pc, #228]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007e16:	f00d fea1 	bl	8015b5c <HAL_TIM_PWM_Init>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8007e20:	f7ff fc66 	bl	80076f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e24:	2300      	movs	r3, #0
 8007e26:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007e30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007e34:	4619      	mov	r1, r3
 8007e36:	4831      	ldr	r0, [pc, #196]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007e38:	f00f f9ae 	bl	8017198 <HAL_TIMEx_MasterConfigSynchronization>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007e42:	f7ff fc55 	bl	80076f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007e46:	2360      	movs	r3, #96	@ 0x60
 8007e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007e52:	2300      	movs	r3, #0
 8007e54:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007e56:	2300      	movs	r3, #0
 8007e58:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007e62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007e66:	2204      	movs	r2, #4
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4824      	ldr	r0, [pc, #144]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007e6c:	f00e f9e4 	bl	8016238 <HAL_TIM_PWM_ConfigChannel>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8007e76:	f7ff fc3b 	bl	80076f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007e7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007e7e:	2208      	movs	r2, #8
 8007e80:	4619      	mov	r1, r3
 8007e82:	481e      	ldr	r0, [pc, #120]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007e84:	f00e f9d8 	bl	8016238 <HAL_TIM_PWM_ConfigChannel>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8007e8e:	f7ff fc2f 	bl	80076f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007e92:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007e96:	220c      	movs	r2, #12
 8007e98:	4619      	mov	r1, r3
 8007e9a:	4818      	ldr	r0, [pc, #96]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007e9c:	f00e f9cc 	bl	8016238 <HAL_TIM_PWM_ConfigChannel>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8007ea6:	f7ff fc23 	bl	80076f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007ebe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007ec2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007ecc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007eda:	1d3b      	adds	r3, r7, #4
 8007edc:	4619      	mov	r1, r3
 8007ede:	4807      	ldr	r0, [pc, #28]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007ee0:	f00f f9f6 	bl	80172d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8007eea:	f7ff fc01 	bl	80076f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007eee:	4803      	ldr	r0, [pc, #12]	@ (8007efc <MX_TIM1_Init+0x148>)
 8007ef0:	f000 f9da 	bl	80082a8 <HAL_TIM_MspPostInit>

}
 8007ef4:	bf00      	nop
 8007ef6:	3760      	adds	r7, #96	@ 0x60
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	24000380 	.word	0x24000380
 8007f00:	40010000 	.word	0x40010000

08007f04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f0a:	f107 0314 	add.w	r3, r7, #20
 8007f0e:	2200      	movs	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	605a      	str	r2, [r3, #4]
 8007f14:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007f16:	1d3b      	adds	r3, r7, #4
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	605a      	str	r2, [r3, #4]
 8007f1e:	609a      	str	r2, [r3, #8]
 8007f20:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007f22:	4b21      	ldr	r3, [pc, #132]	@ (8007fa8 <MX_TIM2_Init+0xa4>)
 8007f24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007f28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8007f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8007fa8 <MX_TIM2_Init+0xa4>)
 8007f2c:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8007f30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f32:	4b1d      	ldr	r3, [pc, #116]	@ (8007fa8 <MX_TIM2_Init+0xa4>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8007f38:	4b1b      	ldr	r3, [pc, #108]	@ (8007fa8 <MX_TIM2_Init+0xa4>)
 8007f3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007f3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f40:	4b19      	ldr	r3, [pc, #100]	@ (8007fa8 <MX_TIM2_Init+0xa4>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f46:	4b18      	ldr	r3, [pc, #96]	@ (8007fa8 <MX_TIM2_Init+0xa4>)
 8007f48:	2280      	movs	r2, #128	@ 0x80
 8007f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8007f4c:	4816      	ldr	r0, [pc, #88]	@ (8007fa8 <MX_TIM2_Init+0xa4>)
 8007f4e:	f00d ff79 	bl	8015e44 <HAL_TIM_IC_Init>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8007f58:	f7ff fbca 	bl	80076f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007f64:	f107 0314 	add.w	r3, r7, #20
 8007f68:	4619      	mov	r1, r3
 8007f6a:	480f      	ldr	r0, [pc, #60]	@ (8007fa8 <MX_TIM2_Init+0xa4>)
 8007f6c:	f00f f914 	bl	8017198 <HAL_TIMEx_MasterConfigSynchronization>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8007f76:	f7ff fbbb 	bl	80076f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007f82:	2300      	movs	r3, #0
 8007f84:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007f8a:	1d3b      	adds	r3, r7, #4
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4805      	ldr	r0, [pc, #20]	@ (8007fa8 <MX_TIM2_Init+0xa4>)
 8007f92:	f00e f8b5 	bl	8016100 <HAL_TIM_IC_ConfigChannel>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8007f9c:	f7ff fba8 	bl	80076f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007fa0:	bf00      	nop
 8007fa2:	3720      	adds	r7, #32
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	240003cc 	.word	0x240003cc

08007fac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08a      	sub	sp, #40	@ 0x28
 8007fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fb2:	f107 031c 	add.w	r3, r7, #28
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	605a      	str	r2, [r3, #4]
 8007fbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007fbe:	463b      	mov	r3, r7
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	605a      	str	r2, [r3, #4]
 8007fc6:	609a      	str	r2, [r3, #8]
 8007fc8:	60da      	str	r2, [r3, #12]
 8007fca:	611a      	str	r2, [r3, #16]
 8007fcc:	615a      	str	r2, [r3, #20]
 8007fce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007fd0:	4b32      	ldr	r3, [pc, #200]	@ (800809c <MX_TIM3_Init+0xf0>)
 8007fd2:	4a33      	ldr	r2, [pc, #204]	@ (80080a0 <MX_TIM3_Init+0xf4>)
 8007fd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8007fd6:	4b31      	ldr	r3, [pc, #196]	@ (800809c <MX_TIM3_Init+0xf0>)
 8007fd8:	221c      	movs	r2, #28
 8007fda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800809c <MX_TIM3_Init+0xf0>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8007fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800809c <MX_TIM3_Init+0xf0>)
 8007fe4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8007fe8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fea:	4b2c      	ldr	r3, [pc, #176]	@ (800809c <MX_TIM3_Init+0xf0>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800809c <MX_TIM3_Init+0xf0>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007ff6:	4829      	ldr	r0, [pc, #164]	@ (800809c <MX_TIM3_Init+0xf0>)
 8007ff8:	f00d fdb0 	bl	8015b5c <HAL_TIM_PWM_Init>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008002:	f7ff fb75 	bl	80076f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008006:	2300      	movs	r3, #0
 8008008:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800800a:	2300      	movs	r3, #0
 800800c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800800e:	f107 031c 	add.w	r3, r7, #28
 8008012:	4619      	mov	r1, r3
 8008014:	4821      	ldr	r0, [pc, #132]	@ (800809c <MX_TIM3_Init+0xf0>)
 8008016:	f00f f8bf 	bl	8017198 <HAL_TIMEx_MasterConfigSynchronization>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008020:	f7ff fb66 	bl	80076f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008024:	2360      	movs	r3, #96	@ 0x60
 8008026:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800802c:	2300      	movs	r3, #0
 800802e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008030:	2300      	movs	r3, #0
 8008032:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008034:	463b      	mov	r3, r7
 8008036:	2200      	movs	r2, #0
 8008038:	4619      	mov	r1, r3
 800803a:	4818      	ldr	r0, [pc, #96]	@ (800809c <MX_TIM3_Init+0xf0>)
 800803c:	f00e f8fc 	bl	8016238 <HAL_TIM_PWM_ConfigChannel>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008046:	f7ff fb53 	bl	80076f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800804a:	463b      	mov	r3, r7
 800804c:	2204      	movs	r2, #4
 800804e:	4619      	mov	r1, r3
 8008050:	4812      	ldr	r0, [pc, #72]	@ (800809c <MX_TIM3_Init+0xf0>)
 8008052:	f00e f8f1 	bl	8016238 <HAL_TIM_PWM_ConfigChannel>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800805c:	f7ff fb48 	bl	80076f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008060:	463b      	mov	r3, r7
 8008062:	2208      	movs	r2, #8
 8008064:	4619      	mov	r1, r3
 8008066:	480d      	ldr	r0, [pc, #52]	@ (800809c <MX_TIM3_Init+0xf0>)
 8008068:	f00e f8e6 	bl	8016238 <HAL_TIM_PWM_ConfigChannel>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008072:	f7ff fb3d 	bl	80076f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008076:	463b      	mov	r3, r7
 8008078:	220c      	movs	r2, #12
 800807a:	4619      	mov	r1, r3
 800807c:	4807      	ldr	r0, [pc, #28]	@ (800809c <MX_TIM3_Init+0xf0>)
 800807e:	f00e f8db 	bl	8016238 <HAL_TIM_PWM_ConfigChannel>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008088:	f7ff fb32 	bl	80076f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800808c:	4803      	ldr	r0, [pc, #12]	@ (800809c <MX_TIM3_Init+0xf0>)
 800808e:	f000 f90b 	bl	80082a8 <HAL_TIM_MspPostInit>

}
 8008092:	bf00      	nop
 8008094:	3728      	adds	r7, #40	@ 0x28
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	24000418 	.word	0x24000418
 80080a0:	40000400 	.word	0x40000400

080080a4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080aa:	f107 0310 	add.w	r3, r7, #16
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	605a      	str	r2, [r3, #4]
 80080b4:	609a      	str	r2, [r3, #8]
 80080b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080b8:	1d3b      	adds	r3, r7, #4
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	605a      	str	r2, [r3, #4]
 80080c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80080c2:	4b21      	ldr	r3, [pc, #132]	@ (8008148 <MX_TIM8_Init+0xa4>)
 80080c4:	4a21      	ldr	r2, [pc, #132]	@ (800814c <MX_TIM8_Init+0xa8>)
 80080c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 80080c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008148 <MX_TIM8_Init+0xa4>)
 80080ca:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 80080ce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008148 <MX_TIM8_Init+0xa4>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 80080d6:	4b1c      	ldr	r3, [pc, #112]	@ (8008148 <MX_TIM8_Init+0xa4>)
 80080d8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80080dc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080de:	4b1a      	ldr	r3, [pc, #104]	@ (8008148 <MX_TIM8_Init+0xa4>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80080e4:	4b18      	ldr	r3, [pc, #96]	@ (8008148 <MX_TIM8_Init+0xa4>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080ea:	4b17      	ldr	r3, [pc, #92]	@ (8008148 <MX_TIM8_Init+0xa4>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80080f0:	4815      	ldr	r0, [pc, #84]	@ (8008148 <MX_TIM8_Init+0xa4>)
 80080f2:	f00d fbd8 	bl	80158a6 <HAL_TIM_Base_Init>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 80080fc:	f7ff faf8 	bl	80076f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008100:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008104:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008106:	f107 0310 	add.w	r3, r7, #16
 800810a:	4619      	mov	r1, r3
 800810c:	480e      	ldr	r0, [pc, #56]	@ (8008148 <MX_TIM8_Init+0xa4>)
 800810e:	f00e f9a7 	bl	8016460 <HAL_TIM_ConfigClockSource>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8008118:	f7ff faea 	bl	80076f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800811c:	2320      	movs	r3, #32
 800811e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8008120:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008124:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800812a:	1d3b      	adds	r3, r7, #4
 800812c:	4619      	mov	r1, r3
 800812e:	4806      	ldr	r0, [pc, #24]	@ (8008148 <MX_TIM8_Init+0xa4>)
 8008130:	f00f f832 	bl	8017198 <HAL_TIMEx_MasterConfigSynchronization>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800813a:	f7ff fad9 	bl	80076f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800813e:	bf00      	nop
 8008140:	3720      	adds	r7, #32
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	24000464 	.word	0x24000464
 800814c:	40010400 	.word	0x40010400

08008150 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a16      	ldr	r2, [pc, #88]	@ (80081b8 <HAL_TIM_PWM_MspInit+0x68>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d10f      	bne.n	8008182 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008162:	4b16      	ldr	r3, [pc, #88]	@ (80081bc <HAL_TIM_PWM_MspInit+0x6c>)
 8008164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008168:	4a14      	ldr	r2, [pc, #80]	@ (80081bc <HAL_TIM_PWM_MspInit+0x6c>)
 800816a:	f043 0301 	orr.w	r3, r3, #1
 800816e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008172:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <HAL_TIM_PWM_MspInit+0x6c>)
 8008174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008180:	e013      	b.n	80081aa <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a0e      	ldr	r2, [pc, #56]	@ (80081c0 <HAL_TIM_PWM_MspInit+0x70>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d10e      	bne.n	80081aa <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800818c:	4b0b      	ldr	r3, [pc, #44]	@ (80081bc <HAL_TIM_PWM_MspInit+0x6c>)
 800818e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008192:	4a0a      	ldr	r2, [pc, #40]	@ (80081bc <HAL_TIM_PWM_MspInit+0x6c>)
 8008194:	f043 0302 	orr.w	r3, r3, #2
 8008198:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800819c:	4b07      	ldr	r3, [pc, #28]	@ (80081bc <HAL_TIM_PWM_MspInit+0x6c>)
 800819e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	60bb      	str	r3, [r7, #8]
 80081a8:	68bb      	ldr	r3, [r7, #8]
}
 80081aa:	bf00      	nop
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	40010000 	.word	0x40010000
 80081bc:	58024400 	.word	0x58024400
 80081c0:	40000400 	.word	0x40000400

080081c4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08a      	sub	sp, #40	@ 0x28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081cc:	f107 0314 	add.w	r3, r7, #20
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	609a      	str	r2, [r3, #8]
 80081d8:	60da      	str	r2, [r3, #12]
 80081da:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e4:	d135      	bne.n	8008252 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80081e6:	4b1d      	ldr	r3, [pc, #116]	@ (800825c <HAL_TIM_IC_MspInit+0x98>)
 80081e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081ec:	4a1b      	ldr	r2, [pc, #108]	@ (800825c <HAL_TIM_IC_MspInit+0x98>)
 80081ee:	f043 0301 	orr.w	r3, r3, #1
 80081f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80081f6:	4b19      	ldr	r3, [pc, #100]	@ (800825c <HAL_TIM_IC_MspInit+0x98>)
 80081f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	613b      	str	r3, [r7, #16]
 8008202:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008204:	4b15      	ldr	r3, [pc, #84]	@ (800825c <HAL_TIM_IC_MspInit+0x98>)
 8008206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800820a:	4a14      	ldr	r2, [pc, #80]	@ (800825c <HAL_TIM_IC_MspInit+0x98>)
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008214:	4b11      	ldr	r3, [pc, #68]	@ (800825c <HAL_TIM_IC_MspInit+0x98>)
 8008216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008222:	2301      	movs	r3, #1
 8008224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008226:	2302      	movs	r3, #2
 8008228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800822a:	2300      	movs	r3, #0
 800822c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800822e:	2300      	movs	r3, #0
 8008230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008232:	2301      	movs	r3, #1
 8008234:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008236:	f107 0314 	add.w	r3, r7, #20
 800823a:	4619      	mov	r1, r3
 800823c:	4808      	ldr	r0, [pc, #32]	@ (8008260 <HAL_TIM_IC_MspInit+0x9c>)
 800823e:	f005 f98f 	bl	800d560 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8008242:	2200      	movs	r2, #0
 8008244:	2101      	movs	r1, #1
 8008246:	201c      	movs	r0, #28
 8008248:	f002 fa8b 	bl	800a762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800824c:	201c      	movs	r0, #28
 800824e:	f002 faa2 	bl	800a796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008252:	bf00      	nop
 8008254:	3728      	adds	r7, #40	@ 0x28
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	58024400 	.word	0x58024400
 8008260:	58020000 	.word	0x58020000

08008264 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a0b      	ldr	r2, [pc, #44]	@ (80082a0 <HAL_TIM_Base_MspInit+0x3c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d10e      	bne.n	8008294 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008276:	4b0b      	ldr	r3, [pc, #44]	@ (80082a4 <HAL_TIM_Base_MspInit+0x40>)
 8008278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800827c:	4a09      	ldr	r2, [pc, #36]	@ (80082a4 <HAL_TIM_Base_MspInit+0x40>)
 800827e:	f043 0302 	orr.w	r3, r3, #2
 8008282:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008286:	4b07      	ldr	r3, [pc, #28]	@ (80082a4 <HAL_TIM_Base_MspInit+0x40>)
 8008288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	40010400 	.word	0x40010400
 80082a4:	58024400 	.word	0x58024400

080082a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	@ 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082b0:	f107 0314 	add.w	r3, r7, #20
 80082b4:	2200      	movs	r2, #0
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	605a      	str	r2, [r3, #4]
 80082ba:	609a      	str	r2, [r3, #8]
 80082bc:	60da      	str	r2, [r3, #12]
 80082be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a26      	ldr	r2, [pc, #152]	@ (8008360 <HAL_TIM_MspPostInit+0xb8>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d120      	bne.n	800830c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80082ca:	4b26      	ldr	r3, [pc, #152]	@ (8008364 <HAL_TIM_MspPostInit+0xbc>)
 80082cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082d0:	4a24      	ldr	r2, [pc, #144]	@ (8008364 <HAL_TIM_MspPostInit+0xbc>)
 80082d2:	f043 0310 	orr.w	r3, r3, #16
 80082d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80082da:	4b22      	ldr	r3, [pc, #136]	@ (8008364 <HAL_TIM_MspPostInit+0xbc>)
 80082dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082e0:	f003 0310 	and.w	r3, r3, #16
 80082e4:	613b      	str	r3, [r7, #16]
 80082e6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80082e8:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80082ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ee:	2302      	movs	r3, #2
 80082f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f2:	2300      	movs	r3, #0
 80082f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082f6:	2300      	movs	r3, #0
 80082f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80082fa:	2301      	movs	r3, #1
 80082fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80082fe:	f107 0314 	add.w	r3, r7, #20
 8008302:	4619      	mov	r1, r3
 8008304:	4818      	ldr	r0, [pc, #96]	@ (8008368 <HAL_TIM_MspPostInit+0xc0>)
 8008306:	f005 f92b 	bl	800d560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800830a:	e024      	b.n	8008356 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a16      	ldr	r2, [pc, #88]	@ (800836c <HAL_TIM_MspPostInit+0xc4>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d11f      	bne.n	8008356 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008316:	4b13      	ldr	r3, [pc, #76]	@ (8008364 <HAL_TIM_MspPostInit+0xbc>)
 8008318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800831c:	4a11      	ldr	r2, [pc, #68]	@ (8008364 <HAL_TIM_MspPostInit+0xbc>)
 800831e:	f043 0304 	orr.w	r3, r3, #4
 8008322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008326:	4b0f      	ldr	r3, [pc, #60]	@ (8008364 <HAL_TIM_MspPostInit+0xbc>)
 8008328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008334:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8008338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800833a:	2302      	movs	r3, #2
 800833c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800833e:	2300      	movs	r3, #0
 8008340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008342:	2300      	movs	r3, #0
 8008344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008346:	2302      	movs	r3, #2
 8008348:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800834a:	f107 0314 	add.w	r3, r7, #20
 800834e:	4619      	mov	r1, r3
 8008350:	4807      	ldr	r0, [pc, #28]	@ (8008370 <HAL_TIM_MspPostInit+0xc8>)
 8008352:	f005 f905 	bl	800d560 <HAL_GPIO_Init>
}
 8008356:	bf00      	nop
 8008358:	3728      	adds	r7, #40	@ 0x28
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	40010000 	.word	0x40010000
 8008364:	58024400 	.word	0x58024400
 8008368:	58021000 	.word	0x58021000
 800836c:	40000400 	.word	0x40000400
 8008370:	58020800 	.word	0x58020800

08008374 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008378:	4b22      	ldr	r3, [pc, #136]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 800837a:	4a23      	ldr	r2, [pc, #140]	@ (8008408 <MX_USART1_UART_Init+0x94>)
 800837c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800837e:	4b21      	ldr	r3, [pc, #132]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 8008380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008384:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008386:	4b1f      	ldr	r3, [pc, #124]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 8008388:	2200      	movs	r2, #0
 800838a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800838c:	4b1d      	ldr	r3, [pc, #116]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 800838e:	2200      	movs	r2, #0
 8008390:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008392:	4b1c      	ldr	r3, [pc, #112]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 8008394:	2200      	movs	r2, #0
 8008396:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008398:	4b1a      	ldr	r3, [pc, #104]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 800839a:	220c      	movs	r2, #12
 800839c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800839e:	4b19      	ldr	r3, [pc, #100]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80083a4:	4b17      	ldr	r3, [pc, #92]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80083aa:	4b16      	ldr	r3, [pc, #88]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80083b0:	4b14      	ldr	r3, [pc, #80]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80083b6:	4b13      	ldr	r3, [pc, #76]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80083bc:	4811      	ldr	r0, [pc, #68]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 80083be:	f00f f831 	bl	8017424 <HAL_UART_Init>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80083c8:	f7ff f992 	bl	80076f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80083cc:	2100      	movs	r1, #0
 80083ce:	480d      	ldr	r0, [pc, #52]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 80083d0:	f011 fee1 	bl	801a196 <HAL_UARTEx_SetTxFifoThreshold>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80083da:	f7ff f989 	bl	80076f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80083de:	2100      	movs	r1, #0
 80083e0:	4808      	ldr	r0, [pc, #32]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 80083e2:	f011 ff16 	bl	801a212 <HAL_UARTEx_SetRxFifoThreshold>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80083ec:	f7ff f980 	bl	80076f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80083f0:	4804      	ldr	r0, [pc, #16]	@ (8008404 <MX_USART1_UART_Init+0x90>)
 80083f2:	f011 fe97 	bl	801a124 <HAL_UARTEx_DisableFifoMode>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80083fc:	f7ff f978 	bl	80076f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008400:	bf00      	nop
 8008402:	bd80      	pop	{r7, pc}
 8008404:	240004b0 	.word	0x240004b0
 8008408:	40011000 	.word	0x40011000

0800840c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b0b8      	sub	sp, #224	@ 0xe0
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008414:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]
 800841c:	605a      	str	r2, [r3, #4]
 800841e:	609a      	str	r2, [r3, #8]
 8008420:	60da      	str	r2, [r3, #12]
 8008422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008424:	f107 0310 	add.w	r3, r7, #16
 8008428:	22b8      	movs	r2, #184	@ 0xb8
 800842a:	2100      	movs	r1, #0
 800842c:	4618      	mov	r0, r3
 800842e:	f015 f931 	bl	801d694 <memset>
  if(uartHandle->Instance==USART1)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a2b      	ldr	r2, [pc, #172]	@ (80084e4 <HAL_UART_MspInit+0xd8>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d14e      	bne.n	80084da <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800843c:	f04f 0201 	mov.w	r2, #1
 8008440:	f04f 0300 	mov.w	r3, #0
 8008444:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8008448:	2300      	movs	r3, #0
 800844a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800844e:	f107 0310 	add.w	r3, r7, #16
 8008452:	4618      	mov	r0, r3
 8008454:	f008 fe8c 	bl	8011170 <HAL_RCCEx_PeriphCLKConfig>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800845e:	f7ff f947 	bl	80076f0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008462:	4b21      	ldr	r3, [pc, #132]	@ (80084e8 <HAL_UART_MspInit+0xdc>)
 8008464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008468:	4a1f      	ldr	r2, [pc, #124]	@ (80084e8 <HAL_UART_MspInit+0xdc>)
 800846a:	f043 0310 	orr.w	r3, r3, #16
 800846e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008472:	4b1d      	ldr	r3, [pc, #116]	@ (80084e8 <HAL_UART_MspInit+0xdc>)
 8008474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008480:	4b19      	ldr	r3, [pc, #100]	@ (80084e8 <HAL_UART_MspInit+0xdc>)
 8008482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008486:	4a18      	ldr	r2, [pc, #96]	@ (80084e8 <HAL_UART_MspInit+0xdc>)
 8008488:	f043 0301 	orr.w	r3, r3, #1
 800848c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008490:	4b15      	ldr	r3, [pc, #84]	@ (80084e8 <HAL_UART_MspInit+0xdc>)
 8008492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	60bb      	str	r3, [r7, #8]
 800849c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800849e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80084a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084a6:	2302      	movs	r3, #2
 80084a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ac:	2300      	movs	r3, #0
 80084ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084b2:	2300      	movs	r3, #0
 80084b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80084b8:	2307      	movs	r3, #7
 80084ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084be:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80084c2:	4619      	mov	r1, r3
 80084c4:	4809      	ldr	r0, [pc, #36]	@ (80084ec <HAL_UART_MspInit+0xe0>)
 80084c6:	f005 f84b 	bl	800d560 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80084ca:	2200      	movs	r2, #0
 80084cc:	2100      	movs	r1, #0
 80084ce:	2025      	movs	r0, #37	@ 0x25
 80084d0:	f002 f947 	bl	800a762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80084d4:	2025      	movs	r0, #37	@ 0x25
 80084d6:	f002 f95e 	bl	800a796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80084da:	bf00      	nop
 80084dc:	37e0      	adds	r7, #224	@ 0xe0
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	40011000 	.word	0x40011000
 80084e8:	58024400 	.word	0x58024400
 80084ec:	58020000 	.word	0x58020000

080084f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80084f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008528 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80084f4:	f7ff fbe6 	bl	8007cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80084f8:	480c      	ldr	r0, [pc, #48]	@ (800852c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80084fa:	490d      	ldr	r1, [pc, #52]	@ (8008530 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80084fc:	4a0d      	ldr	r2, [pc, #52]	@ (8008534 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80084fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008500:	e002      	b.n	8008508 <LoopCopyDataInit>

08008502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008506:	3304      	adds	r3, #4

08008508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800850a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800850c:	d3f9      	bcc.n	8008502 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800850e:	4a0a      	ldr	r2, [pc, #40]	@ (8008538 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008510:	4c0a      	ldr	r4, [pc, #40]	@ (800853c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008514:	e001      	b.n	800851a <LoopFillZerobss>

08008516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008518:	3204      	adds	r2, #4

0800851a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800851a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800851c:	d3fb      	bcc.n	8008516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800851e:	f015 f8c7 	bl	801d6b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008522:	f7fc fa5d 	bl	80049e0 <main>
  bx  lr
 8008526:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008528:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800852c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008530:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8008534:	0801ff20 	.word	0x0801ff20
  ldr r2, =_sbss
 8008538:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800853c:	240008ac 	.word	0x240008ac

08008540 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008540:	e7fe      	b.n	8008540 <ADC3_IRQHandler>
	...

08008544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800854a:	2003      	movs	r0, #3
 800854c:	f002 f8fe 	bl	800a74c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008550:	f008 fc38 	bl	8010dc4 <HAL_RCC_GetSysClockFreq>
 8008554:	4602      	mov	r2, r0
 8008556:	4b15      	ldr	r3, [pc, #84]	@ (80085ac <HAL_Init+0x68>)
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	0a1b      	lsrs	r3, r3, #8
 800855c:	f003 030f 	and.w	r3, r3, #15
 8008560:	4913      	ldr	r1, [pc, #76]	@ (80085b0 <HAL_Init+0x6c>)
 8008562:	5ccb      	ldrb	r3, [r1, r3]
 8008564:	f003 031f 	and.w	r3, r3, #31
 8008568:	fa22 f303 	lsr.w	r3, r2, r3
 800856c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800856e:	4b0f      	ldr	r3, [pc, #60]	@ (80085ac <HAL_Init+0x68>)
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	f003 030f 	and.w	r3, r3, #15
 8008576:	4a0e      	ldr	r2, [pc, #56]	@ (80085b0 <HAL_Init+0x6c>)
 8008578:	5cd3      	ldrb	r3, [r2, r3]
 800857a:	f003 031f 	and.w	r3, r3, #31
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	fa22 f303 	lsr.w	r3, r2, r3
 8008584:	4a0b      	ldr	r2, [pc, #44]	@ (80085b4 <HAL_Init+0x70>)
 8008586:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008588:	4a0b      	ldr	r2, [pc, #44]	@ (80085b8 <HAL_Init+0x74>)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800858e:	200f      	movs	r0, #15
 8008590:	f000 f814 	bl	80085bc <HAL_InitTick>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e002      	b.n	80085a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800859e:	f7ff fa35 	bl	8007a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	58024400 	.word	0x58024400
 80085b0:	0801e168 	.word	0x0801e168
 80085b4:	24000008 	.word	0x24000008
 80085b8:	24000004 	.word	0x24000004

080085bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80085c4:	4b15      	ldr	r3, [pc, #84]	@ (800861c <HAL_InitTick+0x60>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e021      	b.n	8008614 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80085d0:	4b13      	ldr	r3, [pc, #76]	@ (8008620 <HAL_InitTick+0x64>)
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	4b11      	ldr	r3, [pc, #68]	@ (800861c <HAL_InitTick+0x60>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	4619      	mov	r1, r3
 80085da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80085de:	fbb3 f3f1 	udiv	r3, r3, r1
 80085e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e6:	4618      	mov	r0, r3
 80085e8:	f002 f8e3 	bl	800a7b2 <HAL_SYSTICK_Config>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e00e      	b.n	8008614 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b0f      	cmp	r3, #15
 80085fa:	d80a      	bhi.n	8008612 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80085fc:	2200      	movs	r2, #0
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	f04f 30ff 	mov.w	r0, #4294967295
 8008604:	f002 f8ad 	bl	800a762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008608:	4a06      	ldr	r2, [pc, #24]	@ (8008624 <HAL_InitTick+0x68>)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	e000      	b.n	8008614 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	24000010 	.word	0x24000010
 8008620:	24000004 	.word	0x24000004
 8008624:	2400000c 	.word	0x2400000c

08008628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800862c:	4b06      	ldr	r3, [pc, #24]	@ (8008648 <HAL_IncTick+0x20>)
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	4b06      	ldr	r3, [pc, #24]	@ (800864c <HAL_IncTick+0x24>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4413      	add	r3, r2
 8008638:	4a04      	ldr	r2, [pc, #16]	@ (800864c <HAL_IncTick+0x24>)
 800863a:	6013      	str	r3, [r2, #0]
}
 800863c:	bf00      	nop
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	24000010 	.word	0x24000010
 800864c:	24000544 	.word	0x24000544

08008650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008650:	b480      	push	{r7}
 8008652:	af00      	add	r7, sp, #0
  return uwTick;
 8008654:	4b03      	ldr	r3, [pc, #12]	@ (8008664 <HAL_GetTick+0x14>)
 8008656:	681b      	ldr	r3, [r3, #0]
}
 8008658:	4618      	mov	r0, r3
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	24000544 	.word	0x24000544

08008668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008670:	f7ff ffee 	bl	8008650 <HAL_GetTick>
 8008674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008680:	d005      	beq.n	800868e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008682:	4b0a      	ldr	r3, [pc, #40]	@ (80086ac <HAL_Delay+0x44>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	461a      	mov	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4413      	add	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800868e:	bf00      	nop
 8008690:	f7ff ffde 	bl	8008650 <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	429a      	cmp	r2, r3
 800869e:	d8f7      	bhi.n	8008690 <HAL_Delay+0x28>
  {
  }
}
 80086a0:	bf00      	nop
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	24000010 	.word	0x24000010

080086b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	431a      	orrs	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	609a      	str	r2, [r3, #8]
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	609a      	str	r2, [r3, #8]
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a18      	ldr	r2, [pc, #96]	@ (8008788 <LL_ADC_SetChannelPreselection+0x70>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d027      	beq.n	800877a <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008730:	2b00      	cmp	r3, #0
 8008732:	d107      	bne.n	8008744 <LL_ADC_SetChannelPreselection+0x2c>
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	0e9b      	lsrs	r3, r3, #26
 8008738:	f003 031f 	and.w	r3, r3, #31
 800873c:	2201      	movs	r2, #1
 800873e:	fa02 f303 	lsl.w	r3, r2, r3
 8008742:	e015      	b.n	8008770 <LL_ADC_SetChannelPreselection+0x58>
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	fa93 f3a3 	rbit	r3, r3
 800874e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 800875a:	2320      	movs	r3, #32
 800875c:	e003      	b.n	8008766 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	fab3 f383 	clz	r3, r3
 8008764:	b2db      	uxtb	r3, r3
 8008766:	f003 031f 	and.w	r3, r3, #31
 800876a:	2201      	movs	r2, #1
 800876c:	fa02 f303 	lsl.w	r3, r2, r3
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	69d2      	ldr	r2, [r2, #28]
 8008774:	431a      	orrs	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 800877a:	bf00      	nop
 800877c:	371c      	adds	r7, #28
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	58026000 	.word	0x58026000

0800878c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3360      	adds	r3, #96	@ 0x60
 800879e:	461a      	mov	r2, r3
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4a10      	ldr	r2, [pc, #64]	@ (80087ec <LL_ADC_SetOffset+0x60>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d10b      	bne.n	80087c8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	4313      	orrs	r3, r2
 80087be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80087c6:	e00b      	b.n	80087e0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	430b      	orrs	r3, r1
 80087da:	431a      	orrs	r2, r3
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	601a      	str	r2, [r3, #0]
}
 80087e0:	bf00      	nop
 80087e2:	371c      	adds	r7, #28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	58026000 	.word	0x58026000

080087f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3360      	adds	r3, #96	@ 0x60
 80087fe:	461a      	mov	r2, r3
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f003 031f 	and.w	r3, r3, #31
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	fa01 f303 	lsl.w	r3, r1, r3
 800883c:	431a      	orrs	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	611a      	str	r2, [r3, #16]
}
 8008842:	bf00      	nop
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
	...

08008850 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8008850:	b480      	push	{r7}
 8008852:	b087      	sub	sp, #28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4a0c      	ldr	r2, [pc, #48]	@ (8008890 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00e      	beq.n	8008882 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3360      	adds	r3, #96	@ 0x60
 8008868:	461a      	mov	r2, r3
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	431a      	orrs	r2, r3
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	601a      	str	r2, [r3, #0]
  }
}
 8008882:	bf00      	nop
 8008884:	371c      	adds	r7, #28
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	58026000 	.word	0x58026000

08008894 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4a0c      	ldr	r2, [pc, #48]	@ (80088d4 <LL_ADC_SetOffsetSaturation+0x40>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d10e      	bne.n	80088c6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3360      	adds	r3, #96	@ 0x60
 80088ac:	461a      	mov	r2, r3
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	431a      	orrs	r2, r3
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80088c6:	bf00      	nop
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	58026000 	.word	0x58026000

080088d8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008918 <LL_ADC_SetOffsetSign+0x40>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d10e      	bne.n	800890a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	3360      	adds	r3, #96	@ 0x60
 80088f0:	461a      	mov	r2, r3
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	431a      	orrs	r2, r3
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	58026000 	.word	0x58026000

0800891c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3360      	adds	r3, #96	@ 0x60
 800892c:	461a      	mov	r2, r3
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4a0c      	ldr	r2, [pc, #48]	@ (800896c <LL_ADC_SetOffsetState+0x50>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d108      	bne.n	8008950 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	431a      	orrs	r2, r3
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800894e:	e007      	b.n	8008960 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	431a      	orrs	r2, r3
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	601a      	str	r2, [r3, #0]
}
 8008960:	bf00      	nop
 8008962:	371c      	adds	r7, #28
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	58026000 	.word	0x58026000

08008970 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008980:	2b00      	cmp	r3, #0
 8008982:	d101      	bne.n	8008988 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008984:	2301      	movs	r3, #1
 8008986:	e000      	b.n	800898a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008996:	b480      	push	{r7}
 8008998:	b087      	sub	sp, #28
 800899a:	af00      	add	r7, sp, #0
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3330      	adds	r3, #48	@ 0x30
 80089a6:	461a      	mov	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	0a1b      	lsrs	r3, r3, #8
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	f003 030c 	and.w	r3, r3, #12
 80089b2:	4413      	add	r3, r2
 80089b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f003 031f 	and.w	r3, r3, #31
 80089c0:	211f      	movs	r1, #31
 80089c2:	fa01 f303 	lsl.w	r3, r1, r3
 80089c6:	43db      	mvns	r3, r3
 80089c8:	401a      	ands	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	0e9b      	lsrs	r3, r3, #26
 80089ce:	f003 011f 	and.w	r1, r3, #31
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f003 031f 	and.w	r3, r3, #31
 80089d8:	fa01 f303 	lsl.w	r3, r1, r3
 80089dc:	431a      	orrs	r2, r3
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80089e2:	bf00      	nop
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f023 0203 	bic.w	r2, r3, #3
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	431a      	orrs	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	60da      	str	r2, [r3, #12]
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f043 0201 	orr.w	r2, r3, #1
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	60da      	str	r2, [r3, #12]
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a08      	ldr	r2, [pc, #32]	@ (8008a64 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d107      	bne.n	8008a56 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f023 0203 	bic.w	r2, r3, #3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	60da      	str	r2, [r3, #12]
  }
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	58026000 	.word	0x58026000

08008a68 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a74:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e000      	b.n	8008a82 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b087      	sub	sp, #28
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	60f8      	str	r0, [r7, #12]
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3314      	adds	r3, #20
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	0e5b      	lsrs	r3, r3, #25
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	f003 0304 	and.w	r3, r3, #4
 8008aaa:	4413      	add	r3, r2
 8008aac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	0d1b      	lsrs	r3, r3, #20
 8008ab6:	f003 031f 	and.w	r3, r3, #31
 8008aba:	2107      	movs	r1, #7
 8008abc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac0:	43db      	mvns	r3, r3
 8008ac2:	401a      	ands	r2, r3
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	0d1b      	lsrs	r3, r3, #20
 8008ac8:	f003 031f 	and.w	r3, r3, #31
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008ad8:	bf00      	nop
 8008ada:	371c      	adds	r7, #28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4a1a      	ldr	r2, [pc, #104]	@ (8008b5c <LL_ADC_SetChannelSingleDiff+0x78>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d115      	bne.n	8008b24 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b04:	43db      	mvns	r3, r3
 8008b06:	401a      	ands	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f003 0318 	and.w	r3, r3, #24
 8008b0e:	4914      	ldr	r1, [pc, #80]	@ (8008b60 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008b10:	40d9      	lsrs	r1, r3
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	400b      	ands	r3, r1
 8008b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8008b22:	e014      	b.n	8008b4e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b30:	43db      	mvns	r3, r3
 8008b32:	401a      	ands	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f003 0318 	and.w	r3, r3, #24
 8008b3a:	4909      	ldr	r1, [pc, #36]	@ (8008b60 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008b3c:	40d9      	lsrs	r1, r3
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	400b      	ands	r3, r1
 8008b42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b46:	431a      	orrs	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8008b4e:	bf00      	nop
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	58026000 	.word	0x58026000
 8008b60:	000fffff 	.word	0x000fffff

08008b64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f003 031f 	and.w	r3, r3, #31
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	4b04      	ldr	r3, [pc, #16]	@ (8008bbc <LL_ADC_DisableDeepPowerDown+0x20>)
 8008baa:	4013      	ands	r3, r2
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	6093      	str	r3, [r2, #8]
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	5fffffc0 	.word	0x5fffffc0

08008bc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bd4:	d101      	bne.n	8008bda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e000      	b.n	8008bdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	689a      	ldr	r2, [r3, #8]
 8008bf4:	4b05      	ldr	r3, [pc, #20]	@ (8008c0c <LL_ADC_EnableInternalRegulator+0x24>)
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	6fffffc0 	.word	0x6fffffc0

08008c10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c24:	d101      	bne.n	8008c2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e000      	b.n	8008c2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689a      	ldr	r2, [r3, #8]
 8008c44:	4b05      	ldr	r3, [pc, #20]	@ (8008c5c <LL_ADC_Enable+0x24>)
 8008c46:	4013      	ands	r3, r2
 8008c48:	f043 0201 	orr.w	r2, r3, #1
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	7fffffc0 	.word	0x7fffffc0

08008c60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d101      	bne.n	8008c78 <LL_ADC_IsEnabled+0x18>
 8008c74:	2301      	movs	r3, #1
 8008c76:	e000      	b.n	8008c7a <LL_ADC_IsEnabled+0x1a>
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
	...

08008c88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	4b05      	ldr	r3, [pc, #20]	@ (8008cac <LL_ADC_REG_StartConversion+0x24>)
 8008c96:	4013      	ands	r3, r2
 8008c98:	f043 0204 	orr.w	r2, r3, #4
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	7fffffc0 	.word	0x7fffffc0

08008cb0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d101      	bne.n	8008cc8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e000      	b.n	8008cca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b08      	cmp	r3, #8
 8008ce8:	d101      	bne.n	8008cee <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008cea:	2301      	movs	r3, #1
 8008cec:	e000      	b.n	8008cf0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008cfc:	b590      	push	{r4, r7, lr}
 8008cfe:	b089      	sub	sp, #36	@ 0x24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e1ee      	b.n	80090f4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d109      	bne.n	8008d38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7fa fc7b 	bl	8003620 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7ff ff3f 	bl	8008bc0 <LL_ADC_IsDeepPowerDownEnabled>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d004      	beq.n	8008d52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff ff25 	bl	8008b9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7ff ff5a 	bl	8008c10 <LL_ADC_IsInternalRegulatorEnabled>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d114      	bne.n	8008d8c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7ff ff3e 	bl	8008be8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008d6c:	4b8e      	ldr	r3, [pc, #568]	@ (8008fa8 <HAL_ADC_Init+0x2ac>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	099b      	lsrs	r3, r3, #6
 8008d72:	4a8e      	ldr	r2, [pc, #568]	@ (8008fac <HAL_ADC_Init+0x2b0>)
 8008d74:	fba2 2303 	umull	r2, r3, r2, r3
 8008d78:	099b      	lsrs	r3, r3, #6
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008d7e:	e002      	b.n	8008d86 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1f9      	bne.n	8008d80 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7ff ff3d 	bl	8008c10 <LL_ADC_IsInternalRegulatorEnabled>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10d      	bne.n	8008db8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008da0:	f043 0210 	orr.w	r2, r3, #16
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dac:	f043 0201 	orr.w	r2, r3, #1
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff ff77 	bl	8008cb0 <LL_ADC_REG_IsConversionOngoing>
 8008dc2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dc8:	f003 0310 	and.w	r3, r3, #16
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f040 8188 	bne.w	80090e2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f040 8184 	bne.w	80090e2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dde:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8008de2:	f043 0202 	orr.w	r2, r3, #2
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7ff ff36 	bl	8008c60 <LL_ADC_IsEnabled>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d136      	bne.n	8008e68 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a6c      	ldr	r2, [pc, #432]	@ (8008fb0 <HAL_ADC_Init+0x2b4>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d004      	beq.n	8008e0e <HAL_ADC_Init+0x112>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a6a      	ldr	r2, [pc, #424]	@ (8008fb4 <HAL_ADC_Init+0x2b8>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d10e      	bne.n	8008e2c <HAL_ADC_Init+0x130>
 8008e0e:	4868      	ldr	r0, [pc, #416]	@ (8008fb0 <HAL_ADC_Init+0x2b4>)
 8008e10:	f7ff ff26 	bl	8008c60 <LL_ADC_IsEnabled>
 8008e14:	4604      	mov	r4, r0
 8008e16:	4867      	ldr	r0, [pc, #412]	@ (8008fb4 <HAL_ADC_Init+0x2b8>)
 8008e18:	f7ff ff22 	bl	8008c60 <LL_ADC_IsEnabled>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	4323      	orrs	r3, r4
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	bf0c      	ite	eq
 8008e24:	2301      	moveq	r3, #1
 8008e26:	2300      	movne	r3, #0
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	e008      	b.n	8008e3e <HAL_ADC_Init+0x142>
 8008e2c:	4862      	ldr	r0, [pc, #392]	@ (8008fb8 <HAL_ADC_Init+0x2bc>)
 8008e2e:	f7ff ff17 	bl	8008c60 <LL_ADC_IsEnabled>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	bf0c      	ite	eq
 8008e38:	2301      	moveq	r3, #1
 8008e3a:	2300      	movne	r3, #0
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d012      	beq.n	8008e68 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a5a      	ldr	r2, [pc, #360]	@ (8008fb0 <HAL_ADC_Init+0x2b4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d004      	beq.n	8008e56 <HAL_ADC_Init+0x15a>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a58      	ldr	r2, [pc, #352]	@ (8008fb4 <HAL_ADC_Init+0x2b8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d101      	bne.n	8008e5a <HAL_ADC_Init+0x15e>
 8008e56:	4a59      	ldr	r2, [pc, #356]	@ (8008fbc <HAL_ADC_Init+0x2c0>)
 8008e58:	e000      	b.n	8008e5c <HAL_ADC_Init+0x160>
 8008e5a:	4a59      	ldr	r2, [pc, #356]	@ (8008fc0 <HAL_ADC_Init+0x2c4>)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	4619      	mov	r1, r3
 8008e62:	4610      	mov	r0, r2
 8008e64:	f7ff fc24 	bl	80086b0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a52      	ldr	r2, [pc, #328]	@ (8008fb8 <HAL_ADC_Init+0x2bc>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d129      	bne.n	8008ec6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	7e5b      	ldrb	r3, [r3, #25]
 8008e76:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008e7c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8008e82:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	2b08      	cmp	r3, #8
 8008e8a:	d013      	beq.n	8008eb4 <HAL_ADC_Init+0x1b8>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	2b0c      	cmp	r3, #12
 8008e92:	d00d      	beq.n	8008eb0 <HAL_ADC_Init+0x1b4>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	2b1c      	cmp	r3, #28
 8008e9a:	d007      	beq.n	8008eac <HAL_ADC_Init+0x1b0>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	2b18      	cmp	r3, #24
 8008ea2:	d101      	bne.n	8008ea8 <HAL_ADC_Init+0x1ac>
 8008ea4:	2318      	movs	r3, #24
 8008ea6:	e006      	b.n	8008eb6 <HAL_ADC_Init+0x1ba>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	e004      	b.n	8008eb6 <HAL_ADC_Init+0x1ba>
 8008eac:	2310      	movs	r3, #16
 8008eae:	e002      	b.n	8008eb6 <HAL_ADC_Init+0x1ba>
 8008eb0:	2308      	movs	r3, #8
 8008eb2:	e000      	b.n	8008eb6 <HAL_ADC_Init+0x1ba>
 8008eb4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8008eb6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ebe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	61bb      	str	r3, [r7, #24]
 8008ec4:	e00e      	b.n	8008ee4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	7e5b      	ldrb	r3, [r3, #25]
 8008eca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8008ed0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8008ed6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ede:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d106      	bne.n	8008efc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	045b      	lsls	r3, r3, #17
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d009      	beq.n	8008f18 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f08:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f10:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a26      	ldr	r2, [pc, #152]	@ (8008fb8 <HAL_ADC_Init+0x2bc>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d115      	bne.n	8008f4e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	4b26      	ldr	r3, [pc, #152]	@ (8008fc4 <HAL_ADC_Init+0x2c8>)
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	6812      	ldr	r2, [r2, #0]
 8008f30:	69b9      	ldr	r1, [r7, #24]
 8008f32:	430b      	orrs	r3, r1
 8008f34:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	611a      	str	r2, [r3, #16]
 8008f4c:	e009      	b.n	8008f62 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	4b1c      	ldr	r3, [pc, #112]	@ (8008fc8 <HAL_ADC_Init+0x2cc>)
 8008f56:	4013      	ands	r3, r2
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	6812      	ldr	r2, [r2, #0]
 8008f5c:	69b9      	ldr	r1, [r7, #24]
 8008f5e:	430b      	orrs	r3, r1
 8008f60:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7ff fea2 	bl	8008cb0 <LL_ADC_REG_IsConversionOngoing>
 8008f6c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7ff feaf 	bl	8008cd6 <LL_ADC_INJ_IsConversionOngoing>
 8008f78:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f040 808e 	bne.w	800909e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f040 808a 	bne.w	800909e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb8 <HAL_ADC_Init+0x2bc>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d11b      	bne.n	8008fcc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	7e1b      	ldrb	r3, [r3, #24]
 8008f98:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008fa0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	61bb      	str	r3, [r7, #24]
 8008fa6:	e018      	b.n	8008fda <HAL_ADC_Init+0x2de>
 8008fa8:	24000004 	.word	0x24000004
 8008fac:	053e2d63 	.word	0x053e2d63
 8008fb0:	40022000 	.word	0x40022000
 8008fb4:	40022100 	.word	0x40022100
 8008fb8:	58026000 	.word	0x58026000
 8008fbc:	40022300 	.word	0x40022300
 8008fc0:	58026300 	.word	0x58026300
 8008fc4:	fff04007 	.word	0xfff04007
 8008fc8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	7e1b      	ldrb	r3, [r3, #24]
 8008fd0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68da      	ldr	r2, [r3, #12]
 8008fe0:	4b46      	ldr	r3, [pc, #280]	@ (80090fc <HAL_ADC_Init+0x400>)
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	6812      	ldr	r2, [r2, #0]
 8008fe8:	69b9      	ldr	r1, [r7, #24]
 8008fea:	430b      	orrs	r3, r1
 8008fec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d137      	bne.n	8009068 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a3f      	ldr	r2, [pc, #252]	@ (8009100 <HAL_ADC_Init+0x404>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d116      	bne.n	8009036 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	691a      	ldr	r2, [r3, #16]
 800900e:	4b3d      	ldr	r3, [pc, #244]	@ (8009104 <HAL_ADC_Init+0x408>)
 8009010:	4013      	ands	r3, r2
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800901a:	4311      	orrs	r1, r2
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009020:	4311      	orrs	r1, r2
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009026:	430a      	orrs	r2, r1
 8009028:	431a      	orrs	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f042 0201 	orr.w	r2, r2, #1
 8009032:	611a      	str	r2, [r3, #16]
 8009034:	e020      	b.n	8009078 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	691a      	ldr	r2, [r3, #16]
 800903c:	4b32      	ldr	r3, [pc, #200]	@ (8009108 <HAL_ADC_Init+0x40c>)
 800903e:	4013      	ands	r3, r2
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009044:	3a01      	subs	r2, #1
 8009046:	0411      	lsls	r1, r2, #16
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800904c:	4311      	orrs	r1, r2
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009052:	4311      	orrs	r1, r2
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009058:	430a      	orrs	r2, r1
 800905a:	431a      	orrs	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f042 0201 	orr.w	r2, r2, #1
 8009064:	611a      	str	r2, [r3, #16]
 8009066:	e007      	b.n	8009078 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691a      	ldr	r2, [r3, #16]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 0201 	bic.w	r2, r2, #1
 8009076:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	430a      	orrs	r2, r1
 800908c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a1b      	ldr	r2, [pc, #108]	@ (8009100 <HAL_ADC_Init+0x404>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d002      	beq.n	800909e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f001 f967 	bl	800a36c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d10c      	bne.n	80090c0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ac:	f023 010f 	bic.w	r1, r3, #15
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	1e5a      	subs	r2, r3, #1
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80090be:	e007      	b.n	80090d0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f022 020f 	bic.w	r2, r2, #15
 80090ce:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090d4:	f023 0303 	bic.w	r3, r3, #3
 80090d8:	f043 0201 	orr.w	r2, r3, #1
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	661a      	str	r2, [r3, #96]	@ 0x60
 80090e0:	e007      	b.n	80090f2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090e6:	f043 0210 	orr.w	r2, r3, #16
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80090f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3724      	adds	r7, #36	@ 0x24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd90      	pop	{r4, r7, pc}
 80090fc:	ffffbffc 	.word	0xffffbffc
 8009100:	58026000 	.word	0x58026000
 8009104:	fc00f81f 	.word	0xfc00f81f
 8009108:	fc00f81e 	.word	0xfc00f81e

0800910c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a60      	ldr	r2, [pc, #384]	@ (80092a0 <HAL_ADC_Start_DMA+0x194>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d004      	beq.n	800912c <HAL_ADC_Start_DMA+0x20>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a5f      	ldr	r2, [pc, #380]	@ (80092a4 <HAL_ADC_Start_DMA+0x198>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d101      	bne.n	8009130 <HAL_ADC_Start_DMA+0x24>
 800912c:	4b5e      	ldr	r3, [pc, #376]	@ (80092a8 <HAL_ADC_Start_DMA+0x19c>)
 800912e:	e000      	b.n	8009132 <HAL_ADC_Start_DMA+0x26>
 8009130:	4b5e      	ldr	r3, [pc, #376]	@ (80092ac <HAL_ADC_Start_DMA+0x1a0>)
 8009132:	4618      	mov	r0, r3
 8009134:	f7ff fd16 	bl	8008b64 <LL_ADC_GetMultimode>
 8009138:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fdb6 	bl	8008cb0 <LL_ADC_REG_IsConversionOngoing>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	f040 80a2 	bne.w	8009290 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009152:	2b01      	cmp	r3, #1
 8009154:	d101      	bne.n	800915a <HAL_ADC_Start_DMA+0x4e>
 8009156:	2302      	movs	r3, #2
 8009158:	e09d      	b.n	8009296 <HAL_ADC_Start_DMA+0x18a>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d006      	beq.n	8009176 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	2b05      	cmp	r3, #5
 800916c:	d003      	beq.n	8009176 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2b09      	cmp	r3, #9
 8009172:	f040 8086 	bne.w	8009282 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 ffda 	bl	800a130 <ADC_Enable>
 800917c:	4603      	mov	r3, r0
 800917e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009180:	7dfb      	ldrb	r3, [r7, #23]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d178      	bne.n	8009278 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800918a:	4b49      	ldr	r3, [pc, #292]	@ (80092b0 <HAL_ADC_Start_DMA+0x1a4>)
 800918c:	4013      	ands	r3, r2
 800918e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a42      	ldr	r2, [pc, #264]	@ (80092a4 <HAL_ADC_Start_DMA+0x198>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d002      	beq.n	80091a6 <HAL_ADC_Start_DMA+0x9a>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	e000      	b.n	80091a8 <HAL_ADC_Start_DMA+0x9c>
 80091a6:	4b3e      	ldr	r3, [pc, #248]	@ (80092a0 <HAL_ADC_Start_DMA+0x194>)
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	6812      	ldr	r2, [r2, #0]
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d002      	beq.n	80091b6 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d105      	bne.n	80091c2 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091ba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d006      	beq.n	80091dc <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091d2:	f023 0206 	bic.w	r2, r3, #6
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	665a      	str	r2, [r3, #100]	@ 0x64
 80091da:	e002      	b.n	80091e2 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091e6:	4a33      	ldr	r2, [pc, #204]	@ (80092b4 <HAL_ADC_Start_DMA+0x1a8>)
 80091e8:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ee:	4a32      	ldr	r2, [pc, #200]	@ (80092b8 <HAL_ADC_Start_DMA+0x1ac>)
 80091f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091f6:	4a31      	ldr	r2, [pc, #196]	@ (80092bc <HAL_ADC_Start_DMA+0x1b0>)
 80091f8:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	221c      	movs	r2, #28
 8009200:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f042 0210 	orr.w	r2, r2, #16
 8009218:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a28      	ldr	r2, [pc, #160]	@ (80092c0 <HAL_ADC_Start_DMA+0x1b4>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d10f      	bne.n	8009244 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800922e:	005b      	lsls	r3, r3, #1
 8009230:	4619      	mov	r1, r3
 8009232:	4610      	mov	r0, r2
 8009234:	f7ff fbfe 	bl	8008a34 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4618      	mov	r0, r3
 800923e:	f7ff fbe9 	bl	8008a14 <LL_ADC_EnableDMAReq>
 8009242:	e007      	b.n	8009254 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800924c:	4619      	mov	r1, r3
 800924e:	4610      	mov	r0, r2
 8009250:	f7ff fbcd 	bl	80089ee <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3340      	adds	r3, #64	@ 0x40
 800925e:	4619      	mov	r1, r3
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f001 fe82 	bl	800af6c <HAL_DMA_Start_IT>
 8009268:	4603      	mov	r3, r0
 800926a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4618      	mov	r0, r3
 8009272:	f7ff fd09 	bl	8008c88 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009276:	e00d      	b.n	8009294 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8009280:	e008      	b.n	8009294 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800928e:	e001      	b.n	8009294 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009290:	2302      	movs	r3, #2
 8009292:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009294:	7dfb      	ldrb	r3, [r7, #23]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	40022000 	.word	0x40022000
 80092a4:	40022100 	.word	0x40022100
 80092a8:	40022300 	.word	0x40022300
 80092ac:	58026300 	.word	0x58026300
 80092b0:	fffff0fe 	.word	0xfffff0fe
 80092b4:	0800a245 	.word	0x0800a245
 80092b8:	0800a31d 	.word	0x0800a31d
 80092bc:	0800a339 	.word	0x0800a339
 80092c0:	58026000 	.word	0x58026000

080092c4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08a      	sub	sp, #40	@ 0x28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80092cc:	2300      	movs	r3, #0
 80092ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a87      	ldr	r2, [pc, #540]	@ (8009504 <HAL_ADC_IRQHandler+0x240>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d004      	beq.n	80092f4 <HAL_ADC_IRQHandler+0x30>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a86      	ldr	r2, [pc, #536]	@ (8009508 <HAL_ADC_IRQHandler+0x244>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d101      	bne.n	80092f8 <HAL_ADC_IRQHandler+0x34>
 80092f4:	4b85      	ldr	r3, [pc, #532]	@ (800950c <HAL_ADC_IRQHandler+0x248>)
 80092f6:	e000      	b.n	80092fa <HAL_ADC_IRQHandler+0x36>
 80092f8:	4b85      	ldr	r3, [pc, #532]	@ (8009510 <HAL_ADC_IRQHandler+0x24c>)
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff fc32 	bl	8008b64 <LL_ADC_GetMultimode>
 8009300:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	f003 0302 	and.w	r3, r3, #2
 8009308:	2b00      	cmp	r3, #0
 800930a:	d017      	beq.n	800933c <HAL_ADC_IRQHandler+0x78>
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	2b00      	cmp	r3, #0
 8009314:	d012      	beq.n	800933c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800931a:	f003 0310 	and.w	r3, r3, #16
 800931e:	2b00      	cmp	r3, #0
 8009320:	d105      	bne.n	800932e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009326:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f001 f932 	bl	800a598 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2202      	movs	r2, #2
 800933a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	f003 0304 	and.w	r3, r3, #4
 8009342:	2b00      	cmp	r3, #0
 8009344:	d004      	beq.n	8009350 <HAL_ADC_IRQHandler+0x8c>
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10a      	bne.n	8009366 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 8083 	beq.w	8009462 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	f003 0308 	and.w	r3, r3, #8
 8009362:	2b00      	cmp	r3, #0
 8009364:	d07d      	beq.n	8009462 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800936a:	f003 0310 	and.w	r3, r3, #16
 800936e:	2b00      	cmp	r3, #0
 8009370:	d105      	bne.n	800937e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009376:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4618      	mov	r0, r3
 8009384:	f7ff faf4 	bl	8008970 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d062      	beq.n	8009454 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a5d      	ldr	r2, [pc, #372]	@ (8009508 <HAL_ADC_IRQHandler+0x244>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d002      	beq.n	800939e <HAL_ADC_IRQHandler+0xda>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	e000      	b.n	80093a0 <HAL_ADC_IRQHandler+0xdc>
 800939e:	4b59      	ldr	r3, [pc, #356]	@ (8009504 <HAL_ADC_IRQHandler+0x240>)
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	6812      	ldr	r2, [r2, #0]
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d008      	beq.n	80093ba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d005      	beq.n	80093ba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2b05      	cmp	r3, #5
 80093b2:	d002      	beq.n	80093ba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	2b09      	cmp	r3, #9
 80093b8:	d104      	bne.n	80093c4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	623b      	str	r3, [r7, #32]
 80093c2:	e00c      	b.n	80093de <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a4f      	ldr	r2, [pc, #316]	@ (8009508 <HAL_ADC_IRQHandler+0x244>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d002      	beq.n	80093d4 <HAL_ADC_IRQHandler+0x110>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	e000      	b.n	80093d6 <HAL_ADC_IRQHandler+0x112>
 80093d4:	4b4b      	ldr	r3, [pc, #300]	@ (8009504 <HAL_ADC_IRQHandler+0x240>)
 80093d6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d135      	bne.n	8009454 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0308 	and.w	r3, r3, #8
 80093f2:	2b08      	cmp	r3, #8
 80093f4:	d12e      	bne.n	8009454 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7ff fc58 	bl	8008cb0 <LL_ADC_REG_IsConversionOngoing>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d11a      	bne.n	800943c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 020c 	bic.w	r2, r2, #12
 8009414:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800941a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009426:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d112      	bne.n	8009454 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009432:	f043 0201 	orr.w	r2, r3, #1
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	661a      	str	r2, [r3, #96]	@ 0x60
 800943a:	e00b      	b.n	8009454 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009440:	f043 0210 	orr.w	r2, r3, #16
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800944c:	f043 0201 	orr.w	r2, r3, #1
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f96f 	bl	8009738 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	220c      	movs	r2, #12
 8009460:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	f003 0320 	and.w	r3, r3, #32
 8009468:	2b00      	cmp	r3, #0
 800946a:	d004      	beq.n	8009476 <HAL_ADC_IRQHandler+0x1b2>
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	f003 0320 	and.w	r3, r3, #32
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10b      	bne.n	800948e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 80a0 	beq.w	80095c2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009488:	2b00      	cmp	r3, #0
 800948a:	f000 809a 	beq.w	80095c2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009492:	f003 0310 	and.w	r3, r3, #16
 8009496:	2b00      	cmp	r3, #0
 8009498:	d105      	bne.n	80094a6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800949e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7ff fadc 	bl	8008a68 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80094b0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff fa5a 	bl	8008970 <LL_ADC_REG_IsTriggerSourceSWStart>
 80094bc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a11      	ldr	r2, [pc, #68]	@ (8009508 <HAL_ADC_IRQHandler+0x244>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d002      	beq.n	80094ce <HAL_ADC_IRQHandler+0x20a>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	e000      	b.n	80094d0 <HAL_ADC_IRQHandler+0x20c>
 80094ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009504 <HAL_ADC_IRQHandler+0x240>)
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	6812      	ldr	r2, [r2, #0]
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d008      	beq.n	80094ea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d005      	beq.n	80094ea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2b06      	cmp	r3, #6
 80094e2:	d002      	beq.n	80094ea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2b07      	cmp	r3, #7
 80094e8:	d104      	bne.n	80094f4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	623b      	str	r3, [r7, #32]
 80094f2:	e014      	b.n	800951e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a03      	ldr	r2, [pc, #12]	@ (8009508 <HAL_ADC_IRQHandler+0x244>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00a      	beq.n	8009514 <HAL_ADC_IRQHandler+0x250>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	e008      	b.n	8009516 <HAL_ADC_IRQHandler+0x252>
 8009504:	40022000 	.word	0x40022000
 8009508:	40022100 	.word	0x40022100
 800950c:	40022300 	.word	0x40022300
 8009510:	58026300 	.word	0x58026300
 8009514:	4b84      	ldr	r3, [pc, #528]	@ (8009728 <HAL_ADC_IRQHandler+0x464>)
 8009516:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d047      	beq.n	80095b4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800952a:	2b00      	cmp	r3, #0
 800952c:	d007      	beq.n	800953e <HAL_ADC_IRQHandler+0x27a>
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d03f      	beq.n	80095b4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800953a:	2b00      	cmp	r3, #0
 800953c:	d13a      	bne.n	80095b4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009548:	2b40      	cmp	r3, #64	@ 0x40
 800954a:	d133      	bne.n	80095b4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d12e      	bne.n	80095b4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff fbbb 	bl	8008cd6 <LL_ADC_INJ_IsConversionOngoing>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d11a      	bne.n	800959c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009574:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800957a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800958a:	2b00      	cmp	r3, #0
 800958c:	d112      	bne.n	80095b4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009592:	f043 0201 	orr.w	r2, r3, #1
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	661a      	str	r2, [r3, #96]	@ 0x60
 800959a:	e00b      	b.n	80095b4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095a0:	f043 0210 	orr.w	r2, r3, #16
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095ac:	f043 0201 	orr.w	r2, r3, #1
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 ffc7 	bl	800a548 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2260      	movs	r2, #96	@ 0x60
 80095c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d011      	beq.n	80095f0 <HAL_ADC_IRQHandler+0x32c>
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00c      	beq.n	80095f0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f8bc 	bl	8009760 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2280      	movs	r2, #128	@ 0x80
 80095ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d012      	beq.n	8009620 <HAL_ADC_IRQHandler+0x35c>
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00d      	beq.n	8009620 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009608:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 ffad 	bl	800a570 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800961e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009626:	2b00      	cmp	r3, #0
 8009628:	d012      	beq.n	8009650 <HAL_ADC_IRQHandler+0x38c>
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00d      	beq.n	8009650 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009638:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 ff9f 	bl	800a584 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800964e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	f003 0310 	and.w	r3, r3, #16
 8009656:	2b00      	cmp	r3, #0
 8009658:	d043      	beq.n	80096e2 <HAL_ADC_IRQHandler+0x41e>
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	f003 0310 	and.w	r3, r3, #16
 8009660:	2b00      	cmp	r3, #0
 8009662:	d03e      	beq.n	80096e2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009668:	2b00      	cmp	r3, #0
 800966a:	d102      	bne.n	8009672 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800966c:	2301      	movs	r3, #1
 800966e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009670:	e021      	b.n	80096b6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d015      	beq.n	80096a4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a2a      	ldr	r2, [pc, #168]	@ (8009728 <HAL_ADC_IRQHandler+0x464>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d004      	beq.n	800968c <HAL_ADC_IRQHandler+0x3c8>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a29      	ldr	r2, [pc, #164]	@ (800972c <HAL_ADC_IRQHandler+0x468>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d101      	bne.n	8009690 <HAL_ADC_IRQHandler+0x3cc>
 800968c:	4b28      	ldr	r3, [pc, #160]	@ (8009730 <HAL_ADC_IRQHandler+0x46c>)
 800968e:	e000      	b.n	8009692 <HAL_ADC_IRQHandler+0x3ce>
 8009690:	4b28      	ldr	r3, [pc, #160]	@ (8009734 <HAL_ADC_IRQHandler+0x470>)
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff fa74 	bl	8008b80 <LL_ADC_GetMultiDMATransfer>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00b      	beq.n	80096b6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800969e:	2301      	movs	r3, #1
 80096a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80096a2:	e008      	b.n	80096b6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	f003 0303 	and.w	r3, r3, #3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80096b2:	2301      	movs	r3, #1
 80096b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80096b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d10e      	bne.n	80096da <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096c0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096cc:	f043 0202 	orr.w	r2, r3, #2
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f84d 	bl	8009774 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2210      	movs	r2, #16
 80096e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d018      	beq.n	800971e <HAL_ADC_IRQHandler+0x45a>
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d013      	beq.n	800971e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096fa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009706:	f043 0208 	orr.w	r2, r3, #8
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009716:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 ff1f 	bl	800a55c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800971e:	bf00      	nop
 8009720:	3728      	adds	r7, #40	@ 0x28
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	40022000 	.word	0x40022000
 800972c:	40022100 	.word	0x40022100
 8009730:	40022300 	.word	0x40022300
 8009734:	58026300 	.word	0x58026300

08009738 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009788:	b590      	push	{r4, r7, lr}
 800978a:	b0a5      	sub	sp, #148	@ 0x94
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097a2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	4aa4      	ldr	r2, [pc, #656]	@ (8009a3c <HAL_ADC_ConfigChannel+0x2b4>)
 80097aa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d102      	bne.n	80097bc <HAL_ADC_ConfigChannel+0x34>
 80097b6:	2302      	movs	r3, #2
 80097b8:	f000 bca2 	b.w	800a100 <HAL_ADC_ConfigChannel+0x978>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff fa71 	bl	8008cb0 <LL_ADC_REG_IsConversionOngoing>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f040 8486 	bne.w	800a0e2 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	db31      	blt.n	8009842 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a97      	ldr	r2, [pc, #604]	@ (8009a40 <HAL_ADC_ConfigChannel+0x2b8>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d02c      	beq.n	8009842 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d108      	bne.n	8009806 <HAL_ADC_ConfigChannel+0x7e>
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	0e9b      	lsrs	r3, r3, #26
 80097fa:	f003 031f 	and.w	r3, r3, #31
 80097fe:	2201      	movs	r2, #1
 8009800:	fa02 f303 	lsl.w	r3, r2, r3
 8009804:	e016      	b.n	8009834 <HAL_ADC_ConfigChannel+0xac>
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800980c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800980e:	fa93 f3a3 	rbit	r3, r3
 8009812:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8009814:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009816:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8009818:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800981e:	2320      	movs	r3, #32
 8009820:	e003      	b.n	800982a <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8009822:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009824:	fab3 f383 	clz	r3, r3
 8009828:	b2db      	uxtb	r3, r3
 800982a:	f003 031f 	and.w	r3, r3, #31
 800982e:	2201      	movs	r2, #1
 8009830:	fa02 f303 	lsl.w	r3, r2, r3
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	6812      	ldr	r2, [r2, #0]
 8009838:	69d1      	ldr	r1, [r2, #28]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	6812      	ldr	r2, [r2, #0]
 800983e:	430b      	orrs	r3, r1
 8009840:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6818      	ldr	r0, [r3, #0]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	6859      	ldr	r1, [r3, #4]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	f7ff f8a1 	bl	8008996 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff fa29 	bl	8008cb0 <LL_ADC_REG_IsConversionOngoing>
 800985e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4618      	mov	r0, r3
 8009868:	f7ff fa35 	bl	8008cd6 <LL_ADC_INJ_IsConversionOngoing>
 800986c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009870:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009874:	2b00      	cmp	r3, #0
 8009876:	f040 824a 	bne.w	8009d0e <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800987a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800987e:	2b00      	cmp	r3, #0
 8009880:	f040 8245 	bne.w	8009d0e <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6818      	ldr	r0, [r3, #0]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	6819      	ldr	r1, [r3, #0]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	461a      	mov	r2, r3
 8009892:	f7ff f8fc 	bl	8008a8e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a69      	ldr	r2, [pc, #420]	@ (8009a40 <HAL_ADC_ConfigChannel+0x2b8>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d10d      	bne.n	80098bc <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	695a      	ldr	r2, [r3, #20]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	08db      	lsrs	r3, r3, #3
 80098ac:	f003 0303 	and.w	r3, r3, #3
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	fa02 f303 	lsl.w	r3, r2, r3
 80098b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80098ba:	e032      	b.n	8009922 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80098bc:	4b61      	ldr	r3, [pc, #388]	@ (8009a44 <HAL_ADC_ConfigChannel+0x2bc>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80098c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098c8:	d10b      	bne.n	80098e2 <HAL_ADC_ConfigChannel+0x15a>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	695a      	ldr	r2, [r3, #20]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	089b      	lsrs	r3, r3, #2
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	005b      	lsls	r3, r3, #1
 80098dc:	fa02 f303 	lsl.w	r3, r2, r3
 80098e0:	e01d      	b.n	800991e <HAL_ADC_ConfigChannel+0x196>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f003 0310 	and.w	r3, r3, #16
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10b      	bne.n	8009908 <HAL_ADC_ConfigChannel+0x180>
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	695a      	ldr	r2, [r3, #20]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	089b      	lsrs	r3, r3, #2
 80098fc:	f003 0307 	and.w	r3, r3, #7
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	fa02 f303 	lsl.w	r3, r2, r3
 8009906:	e00a      	b.n	800991e <HAL_ADC_ConfigChannel+0x196>
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	695a      	ldr	r2, [r3, #20]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	089b      	lsrs	r3, r3, #2
 8009914:	f003 0304 	and.w	r3, r3, #4
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	fa02 f303 	lsl.w	r3, r2, r3
 800991e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	2b04      	cmp	r3, #4
 8009928:	d048      	beq.n	80099bc <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6818      	ldr	r0, [r3, #0]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	6919      	ldr	r1, [r3, #16]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800993a:	f7fe ff27 	bl	800878c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a3f      	ldr	r2, [pc, #252]	@ (8009a40 <HAL_ADC_ConfigChannel+0x2b8>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d119      	bne.n	800997c <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6818      	ldr	r0, [r3, #0]
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	6919      	ldr	r1, [r3, #16]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	69db      	ldr	r3, [r3, #28]
 8009954:	461a      	mov	r2, r3
 8009956:	f7fe ffbf 	bl	80088d8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	6919      	ldr	r1, [r3, #16]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d102      	bne.n	8009972 <HAL_ADC_ConfigChannel+0x1ea>
 800996c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009970:	e000      	b.n	8009974 <HAL_ADC_ConfigChannel+0x1ec>
 8009972:	2300      	movs	r3, #0
 8009974:	461a      	mov	r2, r3
 8009976:	f7fe ff8d 	bl	8008894 <LL_ADC_SetOffsetSaturation>
 800997a:	e1c8      	b.n	8009d0e <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6818      	ldr	r0, [r3, #0]
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	6919      	ldr	r1, [r3, #16]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800998a:	2b01      	cmp	r3, #1
 800998c:	d102      	bne.n	8009994 <HAL_ADC_ConfigChannel+0x20c>
 800998e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009992:	e000      	b.n	8009996 <HAL_ADC_ConfigChannel+0x20e>
 8009994:	2300      	movs	r3, #0
 8009996:	461a      	mov	r2, r3
 8009998:	f7fe ff5a 	bl	8008850 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6818      	ldr	r0, [r3, #0]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	6919      	ldr	r1, [r3, #16]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	7e1b      	ldrb	r3, [r3, #24]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d102      	bne.n	80099b2 <HAL_ADC_ConfigChannel+0x22a>
 80099ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80099b0:	e000      	b.n	80099b4 <HAL_ADC_ConfigChannel+0x22c>
 80099b2:	2300      	movs	r3, #0
 80099b4:	461a      	mov	r2, r3
 80099b6:	f7fe ff31 	bl	800881c <LL_ADC_SetDataRightShift>
 80099ba:	e1a8      	b.n	8009d0e <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009a40 <HAL_ADC_ConfigChannel+0x2b8>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	f040 815b 	bne.w	8009c7e <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2100      	movs	r1, #0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe ff0e 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10a      	bne.n	80099f4 <HAL_ADC_ConfigChannel+0x26c>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2100      	movs	r1, #0
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe ff03 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 80099ea:	4603      	mov	r3, r0
 80099ec:	0e9b      	lsrs	r3, r3, #26
 80099ee:	f003 021f 	and.w	r2, r3, #31
 80099f2:	e017      	b.n	8009a24 <HAL_ADC_ConfigChannel+0x29c>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2100      	movs	r1, #0
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe fef8 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009a00:	4603      	mov	r3, r0
 8009a02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a06:	fa93 f3a3 	rbit	r3, r3
 8009a0a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8009a0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8009a10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8009a16:	2320      	movs	r3, #32
 8009a18:	e003      	b.n	8009a22 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8009a1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a1c:	fab3 f383 	clz	r3, r3
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	461a      	mov	r2, r3
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10b      	bne.n	8009a48 <HAL_ADC_ConfigChannel+0x2c0>
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	0e9b      	lsrs	r3, r3, #26
 8009a36:	f003 031f 	and.w	r3, r3, #31
 8009a3a:	e017      	b.n	8009a6c <HAL_ADC_ConfigChannel+0x2e4>
 8009a3c:	47ff0000 	.word	0x47ff0000
 8009a40:	58026000 	.word	0x58026000
 8009a44:	5c001000 	.word	0x5c001000
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a50:	fa93 f3a3 	rbit	r3, r3
 8009a54:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8009a56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a58:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8009a5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d101      	bne.n	8009a64 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8009a60:	2320      	movs	r3, #32
 8009a62:	e003      	b.n	8009a6c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8009a64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a66:	fab3 f383 	clz	r3, r3
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d106      	bne.n	8009a7e <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2200      	movs	r2, #0
 8009a76:	2100      	movs	r1, #0
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fe ff4f 	bl	800891c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2101      	movs	r1, #1
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fe feb3 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10a      	bne.n	8009aaa <HAL_ADC_ConfigChannel+0x322>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2101      	movs	r1, #1
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe fea8 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	0e9b      	lsrs	r3, r3, #26
 8009aa4:	f003 021f 	and.w	r2, r3, #31
 8009aa8:	e017      	b.n	8009ada <HAL_ADC_ConfigChannel+0x352>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2101      	movs	r1, #1
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fe fe9d 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009abc:	fa93 f3a3 	rbit	r3, r3
 8009ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8009ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ac4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8009ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d101      	bne.n	8009ad0 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8009acc:	2320      	movs	r3, #32
 8009ace:	e003      	b.n	8009ad8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8009ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ad2:	fab3 f383 	clz	r3, r3
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	461a      	mov	r2, r3
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d105      	bne.n	8009af2 <HAL_ADC_ConfigChannel+0x36a>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	0e9b      	lsrs	r3, r3, #26
 8009aec:	f003 031f 	and.w	r3, r3, #31
 8009af0:	e011      	b.n	8009b16 <HAL_ADC_ConfigChannel+0x38e>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009afa:	fa93 f3a3 	rbit	r3, r3
 8009afe:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8009b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b02:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8009b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8009b0a:	2320      	movs	r3, #32
 8009b0c:	e003      	b.n	8009b16 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8009b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b10:	fab3 f383 	clz	r3, r3
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d106      	bne.n	8009b28 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	2101      	movs	r1, #1
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe fefa 	bl	800891c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2102      	movs	r1, #2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fe fe5e 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009b34:	4603      	mov	r3, r0
 8009b36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10a      	bne.n	8009b54 <HAL_ADC_ConfigChannel+0x3cc>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2102      	movs	r1, #2
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe fe53 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	0e9b      	lsrs	r3, r3, #26
 8009b4e:	f003 021f 	and.w	r2, r3, #31
 8009b52:	e017      	b.n	8009b84 <HAL_ADC_ConfigChannel+0x3fc>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2102      	movs	r1, #2
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fe fe48 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009b60:	4603      	mov	r3, r0
 8009b62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b66:	fa93 f3a3 	rbit	r3, r3
 8009b6a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8009b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8009b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8009b76:	2320      	movs	r3, #32
 8009b78:	e003      	b.n	8009b82 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8009b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b7c:	fab3 f383 	clz	r3, r3
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	461a      	mov	r2, r3
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d105      	bne.n	8009b9c <HAL_ADC_ConfigChannel+0x414>
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	0e9b      	lsrs	r3, r3, #26
 8009b96:	f003 031f 	and.w	r3, r3, #31
 8009b9a:	e011      	b.n	8009bc0 <HAL_ADC_ConfigChannel+0x438>
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba4:	fa93 f3a3 	rbit	r3, r3
 8009ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8009baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8009bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8009bb4:	2320      	movs	r3, #32
 8009bb6:	e003      	b.n	8009bc0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8009bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bba:	fab3 f383 	clz	r3, r3
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d106      	bne.n	8009bd2 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2102      	movs	r1, #2
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe fea5 	bl	800891c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2103      	movs	r1, #3
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe fe09 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009bde:	4603      	mov	r3, r0
 8009be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10a      	bne.n	8009bfe <HAL_ADC_ConfigChannel+0x476>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2103      	movs	r1, #3
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe fdfe 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	0e9b      	lsrs	r3, r3, #26
 8009bf8:	f003 021f 	and.w	r2, r3, #31
 8009bfc:	e017      	b.n	8009c2e <HAL_ADC_ConfigChannel+0x4a6>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2103      	movs	r1, #3
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fe fdf3 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	fa93 f3a3 	rbit	r3, r3
 8009c14:	61fb      	str	r3, [r7, #28]
  return result;
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d101      	bne.n	8009c24 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8009c20:	2320      	movs	r3, #32
 8009c22:	e003      	b.n	8009c2c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8009c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c26:	fab3 f383 	clz	r3, r3
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d105      	bne.n	8009c46 <HAL_ADC_ConfigChannel+0x4be>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	0e9b      	lsrs	r3, r3, #26
 8009c40:	f003 031f 	and.w	r3, r3, #31
 8009c44:	e011      	b.n	8009c6a <HAL_ADC_ConfigChannel+0x4e2>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	fa93 f3a3 	rbit	r3, r3
 8009c52:	613b      	str	r3, [r7, #16]
  return result;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8009c5e:	2320      	movs	r3, #32
 8009c60:	e003      	b.n	8009c6a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	fab3 f383 	clz	r3, r3
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d14f      	bne.n	8009d0e <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2200      	movs	r2, #0
 8009c74:	2103      	movs	r1, #3
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe fe50 	bl	800891c <LL_ADC_SetOffsetState>
 8009c7c:	e047      	b.n	8009d0e <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	069b      	lsls	r3, r3, #26
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d107      	bne.n	8009ca2 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009ca0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ca8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	069b      	lsls	r3, r3, #26
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d107      	bne.n	8009cc6 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009cc4:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ccc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	069b      	lsls	r3, r3, #26
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d107      	bne.n	8009cea <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009ce8:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cf0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	069b      	lsls	r3, r3, #26
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d107      	bne.n	8009d0e <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009d0c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fe ffa4 	bl	8008c60 <LL_ADC_IsEnabled>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f040 81ea 	bne.w	800a0f4 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6818      	ldr	r0, [r3, #0]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	6819      	ldr	r1, [r3, #0]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	f7fe fed9 	bl	8008ae4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	4a7a      	ldr	r2, [pc, #488]	@ (8009f20 <HAL_ADC_ConfigChannel+0x798>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	f040 80e0 	bne.w	8009efe <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4977      	ldr	r1, [pc, #476]	@ (8009f24 <HAL_ADC_ConfigChannel+0x79c>)
 8009d48:	428b      	cmp	r3, r1
 8009d4a:	d147      	bne.n	8009ddc <HAL_ADC_ConfigChannel+0x654>
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4975      	ldr	r1, [pc, #468]	@ (8009f28 <HAL_ADC_ConfigChannel+0x7a0>)
 8009d52:	428b      	cmp	r3, r1
 8009d54:	d040      	beq.n	8009dd8 <HAL_ADC_ConfigChannel+0x650>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4974      	ldr	r1, [pc, #464]	@ (8009f2c <HAL_ADC_ConfigChannel+0x7a4>)
 8009d5c:	428b      	cmp	r3, r1
 8009d5e:	d039      	beq.n	8009dd4 <HAL_ADC_ConfigChannel+0x64c>
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4972      	ldr	r1, [pc, #456]	@ (8009f30 <HAL_ADC_ConfigChannel+0x7a8>)
 8009d66:	428b      	cmp	r3, r1
 8009d68:	d032      	beq.n	8009dd0 <HAL_ADC_ConfigChannel+0x648>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4971      	ldr	r1, [pc, #452]	@ (8009f34 <HAL_ADC_ConfigChannel+0x7ac>)
 8009d70:	428b      	cmp	r3, r1
 8009d72:	d02b      	beq.n	8009dcc <HAL_ADC_ConfigChannel+0x644>
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	496f      	ldr	r1, [pc, #444]	@ (8009f38 <HAL_ADC_ConfigChannel+0x7b0>)
 8009d7a:	428b      	cmp	r3, r1
 8009d7c:	d024      	beq.n	8009dc8 <HAL_ADC_ConfigChannel+0x640>
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	496e      	ldr	r1, [pc, #440]	@ (8009f3c <HAL_ADC_ConfigChannel+0x7b4>)
 8009d84:	428b      	cmp	r3, r1
 8009d86:	d01d      	beq.n	8009dc4 <HAL_ADC_ConfigChannel+0x63c>
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	496c      	ldr	r1, [pc, #432]	@ (8009f40 <HAL_ADC_ConfigChannel+0x7b8>)
 8009d8e:	428b      	cmp	r3, r1
 8009d90:	d016      	beq.n	8009dc0 <HAL_ADC_ConfigChannel+0x638>
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	496b      	ldr	r1, [pc, #428]	@ (8009f44 <HAL_ADC_ConfigChannel+0x7bc>)
 8009d98:	428b      	cmp	r3, r1
 8009d9a:	d00f      	beq.n	8009dbc <HAL_ADC_ConfigChannel+0x634>
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4969      	ldr	r1, [pc, #420]	@ (8009f48 <HAL_ADC_ConfigChannel+0x7c0>)
 8009da2:	428b      	cmp	r3, r1
 8009da4:	d008      	beq.n	8009db8 <HAL_ADC_ConfigChannel+0x630>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4968      	ldr	r1, [pc, #416]	@ (8009f4c <HAL_ADC_ConfigChannel+0x7c4>)
 8009dac:	428b      	cmp	r3, r1
 8009dae:	d101      	bne.n	8009db4 <HAL_ADC_ConfigChannel+0x62c>
 8009db0:	4b67      	ldr	r3, [pc, #412]	@ (8009f50 <HAL_ADC_ConfigChannel+0x7c8>)
 8009db2:	e0a0      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009db4:	2300      	movs	r3, #0
 8009db6:	e09e      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009db8:	4b66      	ldr	r3, [pc, #408]	@ (8009f54 <HAL_ADC_ConfigChannel+0x7cc>)
 8009dba:	e09c      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009dbc:	4b66      	ldr	r3, [pc, #408]	@ (8009f58 <HAL_ADC_ConfigChannel+0x7d0>)
 8009dbe:	e09a      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009dc0:	4b60      	ldr	r3, [pc, #384]	@ (8009f44 <HAL_ADC_ConfigChannel+0x7bc>)
 8009dc2:	e098      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009dc4:	4b5e      	ldr	r3, [pc, #376]	@ (8009f40 <HAL_ADC_ConfigChannel+0x7b8>)
 8009dc6:	e096      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009dc8:	4b64      	ldr	r3, [pc, #400]	@ (8009f5c <HAL_ADC_ConfigChannel+0x7d4>)
 8009dca:	e094      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009dcc:	4b64      	ldr	r3, [pc, #400]	@ (8009f60 <HAL_ADC_ConfigChannel+0x7d8>)
 8009dce:	e092      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009dd0:	4b64      	ldr	r3, [pc, #400]	@ (8009f64 <HAL_ADC_ConfigChannel+0x7dc>)
 8009dd2:	e090      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009dd4:	4b64      	ldr	r3, [pc, #400]	@ (8009f68 <HAL_ADC_ConfigChannel+0x7e0>)
 8009dd6:	e08e      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e08c      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4962      	ldr	r1, [pc, #392]	@ (8009f6c <HAL_ADC_ConfigChannel+0x7e4>)
 8009de2:	428b      	cmp	r3, r1
 8009de4:	d140      	bne.n	8009e68 <HAL_ADC_ConfigChannel+0x6e0>
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	494f      	ldr	r1, [pc, #316]	@ (8009f28 <HAL_ADC_ConfigChannel+0x7a0>)
 8009dec:	428b      	cmp	r3, r1
 8009dee:	d039      	beq.n	8009e64 <HAL_ADC_ConfigChannel+0x6dc>
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	494d      	ldr	r1, [pc, #308]	@ (8009f2c <HAL_ADC_ConfigChannel+0x7a4>)
 8009df6:	428b      	cmp	r3, r1
 8009df8:	d032      	beq.n	8009e60 <HAL_ADC_ConfigChannel+0x6d8>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	494c      	ldr	r1, [pc, #304]	@ (8009f30 <HAL_ADC_ConfigChannel+0x7a8>)
 8009e00:	428b      	cmp	r3, r1
 8009e02:	d02b      	beq.n	8009e5c <HAL_ADC_ConfigChannel+0x6d4>
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	494a      	ldr	r1, [pc, #296]	@ (8009f34 <HAL_ADC_ConfigChannel+0x7ac>)
 8009e0a:	428b      	cmp	r3, r1
 8009e0c:	d024      	beq.n	8009e58 <HAL_ADC_ConfigChannel+0x6d0>
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4949      	ldr	r1, [pc, #292]	@ (8009f38 <HAL_ADC_ConfigChannel+0x7b0>)
 8009e14:	428b      	cmp	r3, r1
 8009e16:	d01d      	beq.n	8009e54 <HAL_ADC_ConfigChannel+0x6cc>
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4947      	ldr	r1, [pc, #284]	@ (8009f3c <HAL_ADC_ConfigChannel+0x7b4>)
 8009e1e:	428b      	cmp	r3, r1
 8009e20:	d016      	beq.n	8009e50 <HAL_ADC_ConfigChannel+0x6c8>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4946      	ldr	r1, [pc, #280]	@ (8009f40 <HAL_ADC_ConfigChannel+0x7b8>)
 8009e28:	428b      	cmp	r3, r1
 8009e2a:	d00f      	beq.n	8009e4c <HAL_ADC_ConfigChannel+0x6c4>
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4944      	ldr	r1, [pc, #272]	@ (8009f44 <HAL_ADC_ConfigChannel+0x7bc>)
 8009e32:	428b      	cmp	r3, r1
 8009e34:	d008      	beq.n	8009e48 <HAL_ADC_ConfigChannel+0x6c0>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4944      	ldr	r1, [pc, #272]	@ (8009f4c <HAL_ADC_ConfigChannel+0x7c4>)
 8009e3c:	428b      	cmp	r3, r1
 8009e3e:	d101      	bne.n	8009e44 <HAL_ADC_ConfigChannel+0x6bc>
 8009e40:	4b43      	ldr	r3, [pc, #268]	@ (8009f50 <HAL_ADC_ConfigChannel+0x7c8>)
 8009e42:	e058      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009e44:	2300      	movs	r3, #0
 8009e46:	e056      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009e48:	4b43      	ldr	r3, [pc, #268]	@ (8009f58 <HAL_ADC_ConfigChannel+0x7d0>)
 8009e4a:	e054      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8009f44 <HAL_ADC_ConfigChannel+0x7bc>)
 8009e4e:	e052      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009e50:	4b3b      	ldr	r3, [pc, #236]	@ (8009f40 <HAL_ADC_ConfigChannel+0x7b8>)
 8009e52:	e050      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009e54:	4b41      	ldr	r3, [pc, #260]	@ (8009f5c <HAL_ADC_ConfigChannel+0x7d4>)
 8009e56:	e04e      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009e58:	4b41      	ldr	r3, [pc, #260]	@ (8009f60 <HAL_ADC_ConfigChannel+0x7d8>)
 8009e5a:	e04c      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009e5c:	4b41      	ldr	r3, [pc, #260]	@ (8009f64 <HAL_ADC_ConfigChannel+0x7dc>)
 8009e5e:	e04a      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009e60:	4b41      	ldr	r3, [pc, #260]	@ (8009f68 <HAL_ADC_ConfigChannel+0x7e0>)
 8009e62:	e048      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009e64:	2301      	movs	r3, #1
 8009e66:	e046      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4940      	ldr	r1, [pc, #256]	@ (8009f70 <HAL_ADC_ConfigChannel+0x7e8>)
 8009e6e:	428b      	cmp	r3, r1
 8009e70:	d140      	bne.n	8009ef4 <HAL_ADC_ConfigChannel+0x76c>
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	492c      	ldr	r1, [pc, #176]	@ (8009f28 <HAL_ADC_ConfigChannel+0x7a0>)
 8009e78:	428b      	cmp	r3, r1
 8009e7a:	d039      	beq.n	8009ef0 <HAL_ADC_ConfigChannel+0x768>
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	492a      	ldr	r1, [pc, #168]	@ (8009f2c <HAL_ADC_ConfigChannel+0x7a4>)
 8009e82:	428b      	cmp	r3, r1
 8009e84:	d032      	beq.n	8009eec <HAL_ADC_ConfigChannel+0x764>
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4929      	ldr	r1, [pc, #164]	@ (8009f30 <HAL_ADC_ConfigChannel+0x7a8>)
 8009e8c:	428b      	cmp	r3, r1
 8009e8e:	d02b      	beq.n	8009ee8 <HAL_ADC_ConfigChannel+0x760>
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4927      	ldr	r1, [pc, #156]	@ (8009f34 <HAL_ADC_ConfigChannel+0x7ac>)
 8009e96:	428b      	cmp	r3, r1
 8009e98:	d024      	beq.n	8009ee4 <HAL_ADC_ConfigChannel+0x75c>
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4926      	ldr	r1, [pc, #152]	@ (8009f38 <HAL_ADC_ConfigChannel+0x7b0>)
 8009ea0:	428b      	cmp	r3, r1
 8009ea2:	d01d      	beq.n	8009ee0 <HAL_ADC_ConfigChannel+0x758>
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4924      	ldr	r1, [pc, #144]	@ (8009f3c <HAL_ADC_ConfigChannel+0x7b4>)
 8009eaa:	428b      	cmp	r3, r1
 8009eac:	d016      	beq.n	8009edc <HAL_ADC_ConfigChannel+0x754>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4923      	ldr	r1, [pc, #140]	@ (8009f40 <HAL_ADC_ConfigChannel+0x7b8>)
 8009eb4:	428b      	cmp	r3, r1
 8009eb6:	d00f      	beq.n	8009ed8 <HAL_ADC_ConfigChannel+0x750>
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4926      	ldr	r1, [pc, #152]	@ (8009f58 <HAL_ADC_ConfigChannel+0x7d0>)
 8009ebe:	428b      	cmp	r3, r1
 8009ec0:	d008      	beq.n	8009ed4 <HAL_ADC_ConfigChannel+0x74c>
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	492b      	ldr	r1, [pc, #172]	@ (8009f74 <HAL_ADC_ConfigChannel+0x7ec>)
 8009ec8:	428b      	cmp	r3, r1
 8009eca:	d101      	bne.n	8009ed0 <HAL_ADC_ConfigChannel+0x748>
 8009ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8009f78 <HAL_ADC_ConfigChannel+0x7f0>)
 8009ece:	e012      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	e010      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009ed4:	4b27      	ldr	r3, [pc, #156]	@ (8009f74 <HAL_ADC_ConfigChannel+0x7ec>)
 8009ed6:	e00e      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8009f44 <HAL_ADC_ConfigChannel+0x7bc>)
 8009eda:	e00c      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009edc:	4b18      	ldr	r3, [pc, #96]	@ (8009f40 <HAL_ADC_ConfigChannel+0x7b8>)
 8009ede:	e00a      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8009f5c <HAL_ADC_ConfigChannel+0x7d4>)
 8009ee2:	e008      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8009f60 <HAL_ADC_ConfigChannel+0x7d8>)
 8009ee6:	e006      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8009f64 <HAL_ADC_ConfigChannel+0x7dc>)
 8009eea:	e004      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009eec:	4b1e      	ldr	r3, [pc, #120]	@ (8009f68 <HAL_ADC_ConfigChannel+0x7e0>)
 8009eee:	e002      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x76e>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4610      	mov	r0, r2
 8009efa:	f7fe fc0d 	bl	8008718 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f280 80f6 	bge.w	800a0f4 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a05      	ldr	r2, [pc, #20]	@ (8009f24 <HAL_ADC_ConfigChannel+0x79c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d004      	beq.n	8009f1c <HAL_ADC_ConfigChannel+0x794>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a15      	ldr	r2, [pc, #84]	@ (8009f6c <HAL_ADC_ConfigChannel+0x7e4>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d131      	bne.n	8009f80 <HAL_ADC_ConfigChannel+0x7f8>
 8009f1c:	4b17      	ldr	r3, [pc, #92]	@ (8009f7c <HAL_ADC_ConfigChannel+0x7f4>)
 8009f1e:	e030      	b.n	8009f82 <HAL_ADC_ConfigChannel+0x7fa>
 8009f20:	47ff0000 	.word	0x47ff0000
 8009f24:	40022000 	.word	0x40022000
 8009f28:	04300002 	.word	0x04300002
 8009f2c:	08600004 	.word	0x08600004
 8009f30:	0c900008 	.word	0x0c900008
 8009f34:	10c00010 	.word	0x10c00010
 8009f38:	14f00020 	.word	0x14f00020
 8009f3c:	2a000400 	.word	0x2a000400
 8009f40:	2e300800 	.word	0x2e300800
 8009f44:	32601000 	.word	0x32601000
 8009f48:	43210000 	.word	0x43210000
 8009f4c:	4b840000 	.word	0x4b840000
 8009f50:	4fb80000 	.word	0x4fb80000
 8009f54:	47520000 	.word	0x47520000
 8009f58:	36902000 	.word	0x36902000
 8009f5c:	25b00200 	.word	0x25b00200
 8009f60:	21800100 	.word	0x21800100
 8009f64:	1d500080 	.word	0x1d500080
 8009f68:	19200040 	.word	0x19200040
 8009f6c:	40022100 	.word	0x40022100
 8009f70:	58026000 	.word	0x58026000
 8009f74:	3ac04000 	.word	0x3ac04000
 8009f78:	3ef08000 	.word	0x3ef08000
 8009f7c:	40022300 	.word	0x40022300
 8009f80:	4b61      	ldr	r3, [pc, #388]	@ (800a108 <HAL_ADC_ConfigChannel+0x980>)
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fbba 	bl	80086fc <LL_ADC_GetCommonPathInternalCh>
 8009f88:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a5f      	ldr	r2, [pc, #380]	@ (800a10c <HAL_ADC_ConfigChannel+0x984>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d004      	beq.n	8009f9e <HAL_ADC_ConfigChannel+0x816>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a5d      	ldr	r2, [pc, #372]	@ (800a110 <HAL_ADC_ConfigChannel+0x988>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d10e      	bne.n	8009fbc <HAL_ADC_ConfigChannel+0x834>
 8009f9e:	485b      	ldr	r0, [pc, #364]	@ (800a10c <HAL_ADC_ConfigChannel+0x984>)
 8009fa0:	f7fe fe5e 	bl	8008c60 <LL_ADC_IsEnabled>
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	485a      	ldr	r0, [pc, #360]	@ (800a110 <HAL_ADC_ConfigChannel+0x988>)
 8009fa8:	f7fe fe5a 	bl	8008c60 <LL_ADC_IsEnabled>
 8009fac:	4603      	mov	r3, r0
 8009fae:	4323      	orrs	r3, r4
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	bf0c      	ite	eq
 8009fb4:	2301      	moveq	r3, #1
 8009fb6:	2300      	movne	r3, #0
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	e008      	b.n	8009fce <HAL_ADC_ConfigChannel+0x846>
 8009fbc:	4855      	ldr	r0, [pc, #340]	@ (800a114 <HAL_ADC_ConfigChannel+0x98c>)
 8009fbe:	f7fe fe4f 	bl	8008c60 <LL_ADC_IsEnabled>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	bf0c      	ite	eq
 8009fc8:	2301      	moveq	r3, #1
 8009fca:	2300      	movne	r3, #0
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d07d      	beq.n	800a0ce <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a50      	ldr	r2, [pc, #320]	@ (800a118 <HAL_ADC_ConfigChannel+0x990>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d130      	bne.n	800a03e <HAL_ADC_ConfigChannel+0x8b6>
 8009fdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009fde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d12b      	bne.n	800a03e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a4a      	ldr	r2, [pc, #296]	@ (800a114 <HAL_ADC_ConfigChannel+0x98c>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	f040 8081 	bne.w	800a0f4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a45      	ldr	r2, [pc, #276]	@ (800a10c <HAL_ADC_ConfigChannel+0x984>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d004      	beq.n	800a006 <HAL_ADC_ConfigChannel+0x87e>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a43      	ldr	r2, [pc, #268]	@ (800a110 <HAL_ADC_ConfigChannel+0x988>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d101      	bne.n	800a00a <HAL_ADC_ConfigChannel+0x882>
 800a006:	4a45      	ldr	r2, [pc, #276]	@ (800a11c <HAL_ADC_ConfigChannel+0x994>)
 800a008:	e000      	b.n	800a00c <HAL_ADC_ConfigChannel+0x884>
 800a00a:	4a3f      	ldr	r2, [pc, #252]	@ (800a108 <HAL_ADC_ConfigChannel+0x980>)
 800a00c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a00e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a012:	4619      	mov	r1, r3
 800a014:	4610      	mov	r0, r2
 800a016:	f7fe fb5e 	bl	80086d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a01a:	4b41      	ldr	r3, [pc, #260]	@ (800a120 <HAL_ADC_ConfigChannel+0x998>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	099b      	lsrs	r3, r3, #6
 800a020:	4a40      	ldr	r2, [pc, #256]	@ (800a124 <HAL_ADC_ConfigChannel+0x99c>)
 800a022:	fba2 2303 	umull	r2, r3, r2, r3
 800a026:	099b      	lsrs	r3, r3, #6
 800a028:	3301      	adds	r3, #1
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800a02e:	e002      	b.n	800a036 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3b01      	subs	r3, #1
 800a034:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1f9      	bne.n	800a030 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a03c:	e05a      	b.n	800a0f4 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a39      	ldr	r2, [pc, #228]	@ (800a128 <HAL_ADC_ConfigChannel+0x9a0>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d11e      	bne.n	800a086 <HAL_ADC_ConfigChannel+0x8fe>
 800a048:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a04a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d119      	bne.n	800a086 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a2f      	ldr	r2, [pc, #188]	@ (800a114 <HAL_ADC_ConfigChannel+0x98c>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d14b      	bne.n	800a0f4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a2a      	ldr	r2, [pc, #168]	@ (800a10c <HAL_ADC_ConfigChannel+0x984>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d004      	beq.n	800a070 <HAL_ADC_ConfigChannel+0x8e8>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a29      	ldr	r2, [pc, #164]	@ (800a110 <HAL_ADC_ConfigChannel+0x988>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d101      	bne.n	800a074 <HAL_ADC_ConfigChannel+0x8ec>
 800a070:	4a2a      	ldr	r2, [pc, #168]	@ (800a11c <HAL_ADC_ConfigChannel+0x994>)
 800a072:	e000      	b.n	800a076 <HAL_ADC_ConfigChannel+0x8ee>
 800a074:	4a24      	ldr	r2, [pc, #144]	@ (800a108 <HAL_ADC_ConfigChannel+0x980>)
 800a076:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a078:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a07c:	4619      	mov	r1, r3
 800a07e:	4610      	mov	r0, r2
 800a080:	f7fe fb29 	bl	80086d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a084:	e036      	b.n	800a0f4 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a28      	ldr	r2, [pc, #160]	@ (800a12c <HAL_ADC_ConfigChannel+0x9a4>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d131      	bne.n	800a0f4 <HAL_ADC_ConfigChannel+0x96c>
 800a090:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d12c      	bne.n	800a0f4 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a1d      	ldr	r2, [pc, #116]	@ (800a114 <HAL_ADC_ConfigChannel+0x98c>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d127      	bne.n	800a0f4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a18      	ldr	r2, [pc, #96]	@ (800a10c <HAL_ADC_ConfigChannel+0x984>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d004      	beq.n	800a0b8 <HAL_ADC_ConfigChannel+0x930>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a17      	ldr	r2, [pc, #92]	@ (800a110 <HAL_ADC_ConfigChannel+0x988>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d101      	bne.n	800a0bc <HAL_ADC_ConfigChannel+0x934>
 800a0b8:	4a18      	ldr	r2, [pc, #96]	@ (800a11c <HAL_ADC_ConfigChannel+0x994>)
 800a0ba:	e000      	b.n	800a0be <HAL_ADC_ConfigChannel+0x936>
 800a0bc:	4a12      	ldr	r2, [pc, #72]	@ (800a108 <HAL_ADC_ConfigChannel+0x980>)
 800a0be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a0c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	4610      	mov	r0, r2
 800a0c8:	f7fe fb05 	bl	80086d6 <LL_ADC_SetCommonPathInternalCh>
 800a0cc:	e012      	b.n	800a0f4 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0d2:	f043 0220 	orr.w	r2, r3, #32
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a0e0:	e008      	b.n	800a0f4 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0e6:	f043 0220 	orr.w	r2, r3, #32
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800a0fc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800a100:	4618      	mov	r0, r3
 800a102:	3794      	adds	r7, #148	@ 0x94
 800a104:	46bd      	mov	sp, r7
 800a106:	bd90      	pop	{r4, r7, pc}
 800a108:	58026300 	.word	0x58026300
 800a10c:	40022000 	.word	0x40022000
 800a110:	40022100 	.word	0x40022100
 800a114:	58026000 	.word	0x58026000
 800a118:	c7520000 	.word	0xc7520000
 800a11c:	40022300 	.word	0x40022300
 800a120:	24000004 	.word	0x24000004
 800a124:	053e2d63 	.word	0x053e2d63
 800a128:	c3210000 	.word	0xc3210000
 800a12c:	cb840000 	.word	0xcb840000

0800a130 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fe fd8f 	bl	8008c60 <LL_ADC_IsEnabled>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d16e      	bne.n	800a226 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	689a      	ldr	r2, [r3, #8]
 800a14e:	4b38      	ldr	r3, [pc, #224]	@ (800a230 <ADC_Enable+0x100>)
 800a150:	4013      	ands	r3, r2
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00d      	beq.n	800a172 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a15a:	f043 0210 	orr.w	r2, r3, #16
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a166:	f043 0201 	orr.w	r2, r3, #1
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e05a      	b.n	800a228 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe fd5e 	bl	8008c38 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a17c:	f7fe fa68 	bl	8008650 <HAL_GetTick>
 800a180:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a2b      	ldr	r2, [pc, #172]	@ (800a234 <ADC_Enable+0x104>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d004      	beq.n	800a196 <ADC_Enable+0x66>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a29      	ldr	r2, [pc, #164]	@ (800a238 <ADC_Enable+0x108>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d101      	bne.n	800a19a <ADC_Enable+0x6a>
 800a196:	4b29      	ldr	r3, [pc, #164]	@ (800a23c <ADC_Enable+0x10c>)
 800a198:	e000      	b.n	800a19c <ADC_Enable+0x6c>
 800a19a:	4b29      	ldr	r3, [pc, #164]	@ (800a240 <ADC_Enable+0x110>)
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe fce1 	bl	8008b64 <LL_ADC_GetMultimode>
 800a1a2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a23      	ldr	r2, [pc, #140]	@ (800a238 <ADC_Enable+0x108>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d002      	beq.n	800a1b4 <ADC_Enable+0x84>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	e000      	b.n	800a1b6 <ADC_Enable+0x86>
 800a1b4:	4b1f      	ldr	r3, [pc, #124]	@ (800a234 <ADC_Enable+0x104>)
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6812      	ldr	r2, [r2, #0]
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d02c      	beq.n	800a218 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d130      	bne.n	800a226 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a1c4:	e028      	b.n	800a218 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fe fd48 	bl	8008c60 <LL_ADC_IsEnabled>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d104      	bne.n	800a1e0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fe fd2c 	bl	8008c38 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a1e0:	f7fe fa36 	bl	8008650 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d914      	bls.n	800a218 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0301 	and.w	r3, r3, #1
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d00d      	beq.n	800a218 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a200:	f043 0210 	orr.w	r2, r3, #16
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a20c:	f043 0201 	orr.w	r2, r3, #1
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e007      	b.n	800a228 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	2b01      	cmp	r3, #1
 800a224:	d1cf      	bne.n	800a1c6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	8000003f 	.word	0x8000003f
 800a234:	40022000 	.word	0x40022000
 800a238:	40022100 	.word	0x40022100
 800a23c:	40022300 	.word	0x40022300
 800a240:	58026300 	.word	0x58026300

0800a244 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a250:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a256:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d14b      	bne.n	800a2f6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a262:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0308 	and.w	r3, r3, #8
 800a274:	2b00      	cmp	r3, #0
 800a276:	d021      	beq.n	800a2bc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7fe fb77 	bl	8008970 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d032      	beq.n	800a2ee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d12b      	bne.n	800a2ee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a29a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d11f      	bne.n	800a2ee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2b2:	f043 0201 	orr.w	r2, r3, #1
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	661a      	str	r2, [r3, #96]	@ 0x60
 800a2ba:	e018      	b.n	800a2ee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	f003 0303 	and.w	r3, r3, #3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d111      	bne.n	800a2ee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d105      	bne.n	800a2ee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2e6:	f043 0201 	orr.w	r2, r3, #1
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f7ff fa22 	bl	8009738 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a2f4:	e00e      	b.n	800a314 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2fa:	f003 0310 	and.w	r3, r3, #16
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d003      	beq.n	800a30a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7ff fa36 	bl	8009774 <HAL_ADC_ErrorCallback>
}
 800a308:	e004      	b.n	800a314 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a30e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	4798      	blx	r3
}
 800a314:	bf00      	nop
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a328:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f7ff fa0e 	bl	800974c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a330:	bf00      	nop
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a344:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a34a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a356:	f043 0204 	orr.w	r2, r3, #4
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f7ff fa08 	bl	8009774 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a364:	bf00      	nop
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a6c      	ldr	r2, [pc, #432]	@ (800a52c <ADC_ConfigureBoostMode+0x1c0>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d004      	beq.n	800a388 <ADC_ConfigureBoostMode+0x1c>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a6b      	ldr	r2, [pc, #428]	@ (800a530 <ADC_ConfigureBoostMode+0x1c4>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d109      	bne.n	800a39c <ADC_ConfigureBoostMode+0x30>
 800a388:	4b6a      	ldr	r3, [pc, #424]	@ (800a534 <ADC_ConfigureBoostMode+0x1c8>)
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a390:	2b00      	cmp	r3, #0
 800a392:	bf14      	ite	ne
 800a394:	2301      	movne	r3, #1
 800a396:	2300      	moveq	r3, #0
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	e008      	b.n	800a3ae <ADC_ConfigureBoostMode+0x42>
 800a39c:	4b66      	ldr	r3, [pc, #408]	@ (800a538 <ADC_ConfigureBoostMode+0x1cc>)
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	bf14      	ite	ne
 800a3a8:	2301      	movne	r3, #1
 800a3aa:	2300      	moveq	r3, #0
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d01c      	beq.n	800a3ec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800a3b2:	f006 fe81 	bl	80110b8 <HAL_RCC_GetHCLKFreq>
 800a3b6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a3c0:	d010      	beq.n	800a3e4 <ADC_ConfigureBoostMode+0x78>
 800a3c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a3c6:	d873      	bhi.n	800a4b0 <ADC_ConfigureBoostMode+0x144>
 800a3c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3cc:	d002      	beq.n	800a3d4 <ADC_ConfigureBoostMode+0x68>
 800a3ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3d2:	d16d      	bne.n	800a4b0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	0c1b      	lsrs	r3, r3, #16
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e0:	60fb      	str	r3, [r7, #12]
        break;
 800a3e2:	e068      	b.n	800a4b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	089b      	lsrs	r3, r3, #2
 800a3e8:	60fb      	str	r3, [r7, #12]
        break;
 800a3ea:	e064      	b.n	800a4b6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800a3ec:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a3f0:	f04f 0100 	mov.w	r1, #0
 800a3f4:	f008 f85c 	bl	80124b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a3f8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800a402:	d051      	beq.n	800a4a8 <ADC_ConfigureBoostMode+0x13c>
 800a404:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800a408:	d854      	bhi.n	800a4b4 <ADC_ConfigureBoostMode+0x148>
 800a40a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800a40e:	d047      	beq.n	800a4a0 <ADC_ConfigureBoostMode+0x134>
 800a410:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800a414:	d84e      	bhi.n	800a4b4 <ADC_ConfigureBoostMode+0x148>
 800a416:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800a41a:	d03d      	beq.n	800a498 <ADC_ConfigureBoostMode+0x12c>
 800a41c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800a420:	d848      	bhi.n	800a4b4 <ADC_ConfigureBoostMode+0x148>
 800a422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a426:	d033      	beq.n	800a490 <ADC_ConfigureBoostMode+0x124>
 800a428:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a42c:	d842      	bhi.n	800a4b4 <ADC_ConfigureBoostMode+0x148>
 800a42e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800a432:	d029      	beq.n	800a488 <ADC_ConfigureBoostMode+0x11c>
 800a434:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800a438:	d83c      	bhi.n	800a4b4 <ADC_ConfigureBoostMode+0x148>
 800a43a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a43e:	d01a      	beq.n	800a476 <ADC_ConfigureBoostMode+0x10a>
 800a440:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a444:	d836      	bhi.n	800a4b4 <ADC_ConfigureBoostMode+0x148>
 800a446:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a44a:	d014      	beq.n	800a476 <ADC_ConfigureBoostMode+0x10a>
 800a44c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a450:	d830      	bhi.n	800a4b4 <ADC_ConfigureBoostMode+0x148>
 800a452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a456:	d00e      	beq.n	800a476 <ADC_ConfigureBoostMode+0x10a>
 800a458:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a45c:	d82a      	bhi.n	800a4b4 <ADC_ConfigureBoostMode+0x148>
 800a45e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a462:	d008      	beq.n	800a476 <ADC_ConfigureBoostMode+0x10a>
 800a464:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a468:	d824      	bhi.n	800a4b4 <ADC_ConfigureBoostMode+0x148>
 800a46a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a46e:	d002      	beq.n	800a476 <ADC_ConfigureBoostMode+0x10a>
 800a470:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a474:	d11e      	bne.n	800a4b4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	0c9b      	lsrs	r3, r3, #18
 800a47c:	005b      	lsls	r3, r3, #1
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	fbb2 f3f3 	udiv	r3, r2, r3
 800a484:	60fb      	str	r3, [r7, #12]
        break;
 800a486:	e016      	b.n	800a4b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	091b      	lsrs	r3, r3, #4
 800a48c:	60fb      	str	r3, [r7, #12]
        break;
 800a48e:	e012      	b.n	800a4b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	095b      	lsrs	r3, r3, #5
 800a494:	60fb      	str	r3, [r7, #12]
        break;
 800a496:	e00e      	b.n	800a4b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	099b      	lsrs	r3, r3, #6
 800a49c:	60fb      	str	r3, [r7, #12]
        break;
 800a49e:	e00a      	b.n	800a4b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	09db      	lsrs	r3, r3, #7
 800a4a4:	60fb      	str	r3, [r7, #12]
        break;
 800a4a6:	e006      	b.n	800a4b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	0a1b      	lsrs	r3, r3, #8
 800a4ac:	60fb      	str	r3, [r7, #12]
        break;
 800a4ae:	e002      	b.n	800a4b6 <ADC_ConfigureBoostMode+0x14a>
        break;
 800a4b0:	bf00      	nop
 800a4b2:	e000      	b.n	800a4b6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800a4b4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	085b      	lsrs	r3, r3, #1
 800a4ba:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4a1f      	ldr	r2, [pc, #124]	@ (800a53c <ADC_ConfigureBoostMode+0x1d0>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d808      	bhi.n	800a4d6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	689a      	ldr	r2, [r3, #8]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a4d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800a4d4:	e025      	b.n	800a522 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	4a19      	ldr	r2, [pc, #100]	@ (800a540 <ADC_ConfigureBoostMode+0x1d4>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d80a      	bhi.n	800a4f4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4f0:	609a      	str	r2, [r3, #8]
}
 800a4f2:	e016      	b.n	800a522 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	4a13      	ldr	r2, [pc, #76]	@ (800a544 <ADC_ConfigureBoostMode+0x1d8>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d80a      	bhi.n	800a512 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a50e:	609a      	str	r2, [r3, #8]
}
 800a510:	e007      	b.n	800a522 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800a520:	609a      	str	r2, [r3, #8]
}
 800a522:	bf00      	nop
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	40022000 	.word	0x40022000
 800a530:	40022100 	.word	0x40022100
 800a534:	40022300 	.word	0x40022300
 800a538:	58026300 	.word	0x58026300
 800a53c:	005f5e10 	.word	0x005f5e10
 800a540:	00bebc20 	.word	0x00bebc20
 800a544:	017d7840 	.word	0x017d7840

0800a548 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800a5a0:	bf00      	nop
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <__NVIC_SetPriorityGrouping>:
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f003 0307 	and.w	r3, r3, #7
 800a5ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a5bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a5ec <__NVIC_SetPriorityGrouping+0x40>)
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a5d4:	4b06      	ldr	r3, [pc, #24]	@ (800a5f0 <__NVIC_SetPriorityGrouping+0x44>)
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a5da:	4a04      	ldr	r2, [pc, #16]	@ (800a5ec <__NVIC_SetPriorityGrouping+0x40>)
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	60d3      	str	r3, [r2, #12]
}
 800a5e0:	bf00      	nop
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	e000ed00 	.word	0xe000ed00
 800a5f0:	05fa0000 	.word	0x05fa0000

0800a5f4 <__NVIC_GetPriorityGrouping>:
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a5f8:	4b04      	ldr	r3, [pc, #16]	@ (800a60c <__NVIC_GetPriorityGrouping+0x18>)
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	0a1b      	lsrs	r3, r3, #8
 800a5fe:	f003 0307 	and.w	r3, r3, #7
}
 800a602:	4618      	mov	r0, r3
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	e000ed00 	.word	0xe000ed00

0800a610 <__NVIC_EnableIRQ>:
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a61a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	db0b      	blt.n	800a63a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a622:	88fb      	ldrh	r3, [r7, #6]
 800a624:	f003 021f 	and.w	r2, r3, #31
 800a628:	4907      	ldr	r1, [pc, #28]	@ (800a648 <__NVIC_EnableIRQ+0x38>)
 800a62a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a62e:	095b      	lsrs	r3, r3, #5
 800a630:	2001      	movs	r0, #1
 800a632:	fa00 f202 	lsl.w	r2, r0, r2
 800a636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a63a:	bf00      	nop
 800a63c:	370c      	adds	r7, #12
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	e000e100 	.word	0xe000e100

0800a64c <__NVIC_SetPriority>:
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	4603      	mov	r3, r0
 800a654:	6039      	str	r1, [r7, #0]
 800a656:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	db0a      	blt.n	800a676 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	b2da      	uxtb	r2, r3
 800a664:	490c      	ldr	r1, [pc, #48]	@ (800a698 <__NVIC_SetPriority+0x4c>)
 800a666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a66a:	0112      	lsls	r2, r2, #4
 800a66c:	b2d2      	uxtb	r2, r2
 800a66e:	440b      	add	r3, r1
 800a670:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a674:	e00a      	b.n	800a68c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	4908      	ldr	r1, [pc, #32]	@ (800a69c <__NVIC_SetPriority+0x50>)
 800a67c:	88fb      	ldrh	r3, [r7, #6]
 800a67e:	f003 030f 	and.w	r3, r3, #15
 800a682:	3b04      	subs	r3, #4
 800a684:	0112      	lsls	r2, r2, #4
 800a686:	b2d2      	uxtb	r2, r2
 800a688:	440b      	add	r3, r1
 800a68a:	761a      	strb	r2, [r3, #24]
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr
 800a698:	e000e100 	.word	0xe000e100
 800a69c:	e000ed00 	.word	0xe000ed00

0800a6a0 <NVIC_EncodePriority>:
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b089      	sub	sp, #36	@ 0x24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f003 0307 	and.w	r3, r3, #7
 800a6b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	f1c3 0307 	rsb	r3, r3, #7
 800a6ba:	2b04      	cmp	r3, #4
 800a6bc:	bf28      	it	cs
 800a6be:	2304      	movcs	r3, #4
 800a6c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	2b06      	cmp	r3, #6
 800a6c8:	d902      	bls.n	800a6d0 <NVIC_EncodePriority+0x30>
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	3b03      	subs	r3, #3
 800a6ce:	e000      	b.n	800a6d2 <NVIC_EncodePriority+0x32>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	fa02 f303 	lsl.w	r3, r2, r3
 800a6de:	43da      	mvns	r2, r3
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	401a      	ands	r2, r3
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a6e8:	f04f 31ff 	mov.w	r1, #4294967295
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a6f2:	43d9      	mvns	r1, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6f8:	4313      	orrs	r3, r2
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3724      	adds	r7, #36	@ 0x24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
	...

0800a708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	3b01      	subs	r3, #1
 800a714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a718:	d301      	bcc.n	800a71e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a71a:	2301      	movs	r3, #1
 800a71c:	e00f      	b.n	800a73e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a71e:	4a0a      	ldr	r2, [pc, #40]	@ (800a748 <SysTick_Config+0x40>)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3b01      	subs	r3, #1
 800a724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a726:	210f      	movs	r1, #15
 800a728:	f04f 30ff 	mov.w	r0, #4294967295
 800a72c:	f7ff ff8e 	bl	800a64c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a730:	4b05      	ldr	r3, [pc, #20]	@ (800a748 <SysTick_Config+0x40>)
 800a732:	2200      	movs	r2, #0
 800a734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a736:	4b04      	ldr	r3, [pc, #16]	@ (800a748 <SysTick_Config+0x40>)
 800a738:	2207      	movs	r2, #7
 800a73a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	e000e010 	.word	0xe000e010

0800a74c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7ff ff29 	bl	800a5ac <__NVIC_SetPriorityGrouping>
}
 800a75a:	bf00      	nop
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b086      	sub	sp, #24
 800a766:	af00      	add	r7, sp, #0
 800a768:	4603      	mov	r3, r0
 800a76a:	60b9      	str	r1, [r7, #8]
 800a76c:	607a      	str	r2, [r7, #4]
 800a76e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a770:	f7ff ff40 	bl	800a5f4 <__NVIC_GetPriorityGrouping>
 800a774:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	68b9      	ldr	r1, [r7, #8]
 800a77a:	6978      	ldr	r0, [r7, #20]
 800a77c:	f7ff ff90 	bl	800a6a0 <NVIC_EncodePriority>
 800a780:	4602      	mov	r2, r0
 800a782:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f7ff ff5f 	bl	800a64c <__NVIC_SetPriority>
}
 800a78e:	bf00      	nop
 800a790:	3718      	adds	r7, #24
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b082      	sub	sp, #8
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	4603      	mov	r3, r0
 800a79e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a7a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7ff ff33 	bl	800a610 <__NVIC_EnableIRQ>
}
 800a7aa:	bf00      	nop
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b082      	sub	sp, #8
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7ff ffa4 	bl	800a708 <SysTick_Config>
 800a7c0:	4603      	mov	r3, r0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
	...

0800a7cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800a7d0:	f3bf 8f5f 	dmb	sy
}
 800a7d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a7d6:	4b07      	ldr	r3, [pc, #28]	@ (800a7f4 <HAL_MPU_Disable+0x28>)
 800a7d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7da:	4a06      	ldr	r2, [pc, #24]	@ (800a7f4 <HAL_MPU_Disable+0x28>)
 800a7dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7e0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a7e2:	4b05      	ldr	r3, [pc, #20]	@ (800a7f8 <HAL_MPU_Disable+0x2c>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	605a      	str	r2, [r3, #4]
}
 800a7e8:	bf00      	nop
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	e000ed00 	.word	0xe000ed00
 800a7f8:	e000ed90 	.word	0xe000ed90

0800a7fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a804:	4a0b      	ldr	r2, [pc, #44]	@ (800a834 <HAL_MPU_Enable+0x38>)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f043 0301 	orr.w	r3, r3, #1
 800a80c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a80e:	4b0a      	ldr	r3, [pc, #40]	@ (800a838 <HAL_MPU_Enable+0x3c>)
 800a810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a812:	4a09      	ldr	r2, [pc, #36]	@ (800a838 <HAL_MPU_Enable+0x3c>)
 800a814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a818:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a81a:	f3bf 8f4f 	dsb	sy
}
 800a81e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a820:	f3bf 8f6f 	isb	sy
}
 800a824:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a826:	bf00      	nop
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	e000ed90 	.word	0xe000ed90
 800a838:	e000ed00 	.word	0xe000ed00

0800a83c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	785a      	ldrb	r2, [r3, #1]
 800a848:	4b1b      	ldr	r3, [pc, #108]	@ (800a8b8 <HAL_MPU_ConfigRegion+0x7c>)
 800a84a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800a84c:	4b1a      	ldr	r3, [pc, #104]	@ (800a8b8 <HAL_MPU_ConfigRegion+0x7c>)
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	4a19      	ldr	r2, [pc, #100]	@ (800a8b8 <HAL_MPU_ConfigRegion+0x7c>)
 800a852:	f023 0301 	bic.w	r3, r3, #1
 800a856:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800a858:	4a17      	ldr	r2, [pc, #92]	@ (800a8b8 <HAL_MPU_ConfigRegion+0x7c>)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	7b1b      	ldrb	r3, [r3, #12]
 800a864:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	7adb      	ldrb	r3, [r3, #11]
 800a86a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a86c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	7a9b      	ldrb	r3, [r3, #10]
 800a872:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a874:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	7b5b      	ldrb	r3, [r3, #13]
 800a87a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a87c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	7b9b      	ldrb	r3, [r3, #14]
 800a882:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a884:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	7bdb      	ldrb	r3, [r3, #15]
 800a88a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a88c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	7a5b      	ldrb	r3, [r3, #9]
 800a892:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a894:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	7a1b      	ldrb	r3, [r3, #8]
 800a89a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a89c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	7812      	ldrb	r2, [r2, #0]
 800a8a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a8a4:	4a04      	ldr	r2, [pc, #16]	@ (800a8b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a8a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a8a8:	6113      	str	r3, [r2, #16]
}
 800a8aa:	bf00      	nop
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	e000ed90 	.word	0xe000ed90

0800a8bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800a8c4:	f7fd fec4 	bl	8008650 <HAL_GetTick>
 800a8c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e312      	b.n	800aefa <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a66      	ldr	r2, [pc, #408]	@ (800aa74 <HAL_DMA_Init+0x1b8>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d04a      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a65      	ldr	r2, [pc, #404]	@ (800aa78 <HAL_DMA_Init+0x1bc>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d045      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a63      	ldr	r2, [pc, #396]	@ (800aa7c <HAL_DMA_Init+0x1c0>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d040      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a62      	ldr	r2, [pc, #392]	@ (800aa80 <HAL_DMA_Init+0x1c4>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d03b      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a60      	ldr	r2, [pc, #384]	@ (800aa84 <HAL_DMA_Init+0x1c8>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d036      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a5f      	ldr	r2, [pc, #380]	@ (800aa88 <HAL_DMA_Init+0x1cc>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d031      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a5d      	ldr	r2, [pc, #372]	@ (800aa8c <HAL_DMA_Init+0x1d0>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d02c      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a5c      	ldr	r2, [pc, #368]	@ (800aa90 <HAL_DMA_Init+0x1d4>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d027      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a5a      	ldr	r2, [pc, #360]	@ (800aa94 <HAL_DMA_Init+0x1d8>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d022      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a59      	ldr	r2, [pc, #356]	@ (800aa98 <HAL_DMA_Init+0x1dc>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d01d      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a57      	ldr	r2, [pc, #348]	@ (800aa9c <HAL_DMA_Init+0x1e0>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d018      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a56      	ldr	r2, [pc, #344]	@ (800aaa0 <HAL_DMA_Init+0x1e4>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d013      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a54      	ldr	r2, [pc, #336]	@ (800aaa4 <HAL_DMA_Init+0x1e8>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d00e      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a53      	ldr	r2, [pc, #332]	@ (800aaa8 <HAL_DMA_Init+0x1ec>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d009      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a51      	ldr	r2, [pc, #324]	@ (800aaac <HAL_DMA_Init+0x1f0>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d004      	beq.n	800a974 <HAL_DMA_Init+0xb8>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a50      	ldr	r2, [pc, #320]	@ (800aab0 <HAL_DMA_Init+0x1f4>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d101      	bne.n	800a978 <HAL_DMA_Init+0xbc>
 800a974:	2301      	movs	r3, #1
 800a976:	e000      	b.n	800a97a <HAL_DMA_Init+0xbe>
 800a978:	2300      	movs	r3, #0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 813c 	beq.w	800abf8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2202      	movs	r2, #2
 800a984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a37      	ldr	r2, [pc, #220]	@ (800aa74 <HAL_DMA_Init+0x1b8>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d04a      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a36      	ldr	r2, [pc, #216]	@ (800aa78 <HAL_DMA_Init+0x1bc>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d045      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a34      	ldr	r2, [pc, #208]	@ (800aa7c <HAL_DMA_Init+0x1c0>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d040      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a33      	ldr	r2, [pc, #204]	@ (800aa80 <HAL_DMA_Init+0x1c4>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d03b      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a31      	ldr	r2, [pc, #196]	@ (800aa84 <HAL_DMA_Init+0x1c8>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d036      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a30      	ldr	r2, [pc, #192]	@ (800aa88 <HAL_DMA_Init+0x1cc>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d031      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a2e      	ldr	r2, [pc, #184]	@ (800aa8c <HAL_DMA_Init+0x1d0>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d02c      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a2d      	ldr	r2, [pc, #180]	@ (800aa90 <HAL_DMA_Init+0x1d4>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d027      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a2b      	ldr	r2, [pc, #172]	@ (800aa94 <HAL_DMA_Init+0x1d8>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d022      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a2a      	ldr	r2, [pc, #168]	@ (800aa98 <HAL_DMA_Init+0x1dc>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d01d      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a28      	ldr	r2, [pc, #160]	@ (800aa9c <HAL_DMA_Init+0x1e0>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d018      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a27      	ldr	r2, [pc, #156]	@ (800aaa0 <HAL_DMA_Init+0x1e4>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d013      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a25      	ldr	r2, [pc, #148]	@ (800aaa4 <HAL_DMA_Init+0x1e8>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d00e      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a24      	ldr	r2, [pc, #144]	@ (800aaa8 <HAL_DMA_Init+0x1ec>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d009      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a22      	ldr	r2, [pc, #136]	@ (800aaac <HAL_DMA_Init+0x1f0>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d004      	beq.n	800aa30 <HAL_DMA_Init+0x174>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a21      	ldr	r2, [pc, #132]	@ (800aab0 <HAL_DMA_Init+0x1f4>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d108      	bne.n	800aa42 <HAL_DMA_Init+0x186>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f022 0201 	bic.w	r2, r2, #1
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	e007      	b.n	800aa52 <HAL_DMA_Init+0x196>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f022 0201 	bic.w	r2, r2, #1
 800aa50:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800aa52:	e02f      	b.n	800aab4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800aa54:	f7fd fdfc 	bl	8008650 <HAL_GetTick>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	1ad3      	subs	r3, r2, r3
 800aa5e:	2b05      	cmp	r3, #5
 800aa60:	d928      	bls.n	800aab4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2220      	movs	r2, #32
 800aa66:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2203      	movs	r2, #3
 800aa6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e242      	b.n	800aefa <HAL_DMA_Init+0x63e>
 800aa74:	40020010 	.word	0x40020010
 800aa78:	40020028 	.word	0x40020028
 800aa7c:	40020040 	.word	0x40020040
 800aa80:	40020058 	.word	0x40020058
 800aa84:	40020070 	.word	0x40020070
 800aa88:	40020088 	.word	0x40020088
 800aa8c:	400200a0 	.word	0x400200a0
 800aa90:	400200b8 	.word	0x400200b8
 800aa94:	40020410 	.word	0x40020410
 800aa98:	40020428 	.word	0x40020428
 800aa9c:	40020440 	.word	0x40020440
 800aaa0:	40020458 	.word	0x40020458
 800aaa4:	40020470 	.word	0x40020470
 800aaa8:	40020488 	.word	0x40020488
 800aaac:	400204a0 	.word	0x400204a0
 800aab0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 0301 	and.w	r3, r3, #1
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1c8      	bne.n	800aa54 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	4b83      	ldr	r3, [pc, #524]	@ (800acdc <HAL_DMA_Init+0x420>)
 800aace:	4013      	ands	r3, r2
 800aad0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800aada:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	691b      	ldr	r3, [r3, #16]
 800aae0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aae6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aaf2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab04:	2b04      	cmp	r3, #4
 800ab06:	d107      	bne.n	800ab18 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab10:	4313      	orrs	r3, r2
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	2b28      	cmp	r3, #40	@ 0x28
 800ab1e:	d903      	bls.n	800ab28 <HAL_DMA_Init+0x26c>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab26:	d91f      	bls.n	800ab68 <HAL_DMA_Init+0x2ac>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab2e:	d903      	bls.n	800ab38 <HAL_DMA_Init+0x27c>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	2b42      	cmp	r3, #66	@ 0x42
 800ab36:	d917      	bls.n	800ab68 <HAL_DMA_Init+0x2ac>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	2b46      	cmp	r3, #70	@ 0x46
 800ab3e:	d903      	bls.n	800ab48 <HAL_DMA_Init+0x28c>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	2b48      	cmp	r3, #72	@ 0x48
 800ab46:	d90f      	bls.n	800ab68 <HAL_DMA_Init+0x2ac>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	2b4e      	cmp	r3, #78	@ 0x4e
 800ab4e:	d903      	bls.n	800ab58 <HAL_DMA_Init+0x29c>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	2b52      	cmp	r3, #82	@ 0x52
 800ab56:	d907      	bls.n	800ab68 <HAL_DMA_Init+0x2ac>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	2b73      	cmp	r3, #115	@ 0x73
 800ab5e:	d905      	bls.n	800ab6c <HAL_DMA_Init+0x2b0>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	2b77      	cmp	r3, #119	@ 0x77
 800ab66:	d801      	bhi.n	800ab6c <HAL_DMA_Init+0x2b0>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e000      	b.n	800ab6e <HAL_DMA_Init+0x2b2>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d003      	beq.n	800ab7a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab78:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f023 0307 	bic.w	r3, r3, #7
 800ab90:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	d117      	bne.n	800abd4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	4313      	orrs	r3, r2
 800abac:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00e      	beq.n	800abd4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f002 fb48 	bl	800d24c <DMA_CheckFifoParam>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d008      	beq.n	800abd4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2240      	movs	r2, #64	@ 0x40
 800abc6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	e192      	b.n	800aefa <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	697a      	ldr	r2, [r7, #20]
 800abda:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f002 fa83 	bl	800d0e8 <DMA_CalcBaseAndBitshift>
 800abe2:	4603      	mov	r3, r0
 800abe4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abea:	f003 031f 	and.w	r3, r3, #31
 800abee:	223f      	movs	r2, #63	@ 0x3f
 800abf0:	409a      	lsls	r2, r3
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	609a      	str	r2, [r3, #8]
 800abf6:	e0c8      	b.n	800ad8a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a38      	ldr	r2, [pc, #224]	@ (800ace0 <HAL_DMA_Init+0x424>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d022      	beq.n	800ac48 <HAL_DMA_Init+0x38c>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a37      	ldr	r2, [pc, #220]	@ (800ace4 <HAL_DMA_Init+0x428>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d01d      	beq.n	800ac48 <HAL_DMA_Init+0x38c>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a35      	ldr	r2, [pc, #212]	@ (800ace8 <HAL_DMA_Init+0x42c>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d018      	beq.n	800ac48 <HAL_DMA_Init+0x38c>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a34      	ldr	r2, [pc, #208]	@ (800acec <HAL_DMA_Init+0x430>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d013      	beq.n	800ac48 <HAL_DMA_Init+0x38c>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a32      	ldr	r2, [pc, #200]	@ (800acf0 <HAL_DMA_Init+0x434>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d00e      	beq.n	800ac48 <HAL_DMA_Init+0x38c>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a31      	ldr	r2, [pc, #196]	@ (800acf4 <HAL_DMA_Init+0x438>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d009      	beq.n	800ac48 <HAL_DMA_Init+0x38c>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a2f      	ldr	r2, [pc, #188]	@ (800acf8 <HAL_DMA_Init+0x43c>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d004      	beq.n	800ac48 <HAL_DMA_Init+0x38c>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a2e      	ldr	r2, [pc, #184]	@ (800acfc <HAL_DMA_Init+0x440>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d101      	bne.n	800ac4c <HAL_DMA_Init+0x390>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e000      	b.n	800ac4e <HAL_DMA_Init+0x392>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f000 8092 	beq.w	800ad78 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a21      	ldr	r2, [pc, #132]	@ (800ace0 <HAL_DMA_Init+0x424>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d021      	beq.n	800aca2 <HAL_DMA_Init+0x3e6>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a20      	ldr	r2, [pc, #128]	@ (800ace4 <HAL_DMA_Init+0x428>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d01c      	beq.n	800aca2 <HAL_DMA_Init+0x3e6>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a1e      	ldr	r2, [pc, #120]	@ (800ace8 <HAL_DMA_Init+0x42c>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d017      	beq.n	800aca2 <HAL_DMA_Init+0x3e6>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a1d      	ldr	r2, [pc, #116]	@ (800acec <HAL_DMA_Init+0x430>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d012      	beq.n	800aca2 <HAL_DMA_Init+0x3e6>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a1b      	ldr	r2, [pc, #108]	@ (800acf0 <HAL_DMA_Init+0x434>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d00d      	beq.n	800aca2 <HAL_DMA_Init+0x3e6>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a1a      	ldr	r2, [pc, #104]	@ (800acf4 <HAL_DMA_Init+0x438>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d008      	beq.n	800aca2 <HAL_DMA_Init+0x3e6>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a18      	ldr	r2, [pc, #96]	@ (800acf8 <HAL_DMA_Init+0x43c>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d003      	beq.n	800aca2 <HAL_DMA_Init+0x3e6>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a17      	ldr	r2, [pc, #92]	@ (800acfc <HAL_DMA_Init+0x440>)
 800aca0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2202      	movs	r2, #2
 800aca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	4b10      	ldr	r3, [pc, #64]	@ (800ad00 <HAL_DMA_Init+0x444>)
 800acbe:	4013      	ands	r3, r2
 800acc0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	2b40      	cmp	r3, #64	@ 0x40
 800acc8:	d01c      	beq.n	800ad04 <HAL_DMA_Init+0x448>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	2b80      	cmp	r3, #128	@ 0x80
 800acd0:	d102      	bne.n	800acd8 <HAL_DMA_Init+0x41c>
 800acd2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800acd6:	e016      	b.n	800ad06 <HAL_DMA_Init+0x44a>
 800acd8:	2300      	movs	r3, #0
 800acda:	e014      	b.n	800ad06 <HAL_DMA_Init+0x44a>
 800acdc:	fe10803f 	.word	0xfe10803f
 800ace0:	58025408 	.word	0x58025408
 800ace4:	5802541c 	.word	0x5802541c
 800ace8:	58025430 	.word	0x58025430
 800acec:	58025444 	.word	0x58025444
 800acf0:	58025458 	.word	0x58025458
 800acf4:	5802546c 	.word	0x5802546c
 800acf8:	58025480 	.word	0x58025480
 800acfc:	58025494 	.word	0x58025494
 800ad00:	fffe000f 	.word	0xfffe000f
 800ad04:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	68d2      	ldr	r2, [r2, #12]
 800ad0a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ad0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800ad14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800ad1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	699b      	ldr	r3, [r3, #24]
 800ad22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800ad24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	69db      	ldr	r3, [r3, #28]
 800ad2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ad2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ad34:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	461a      	mov	r2, r3
 800ad4a:	4b6e      	ldr	r3, [pc, #440]	@ (800af04 <HAL_DMA_Init+0x648>)
 800ad4c:	4413      	add	r3, r2
 800ad4e:	4a6e      	ldr	r2, [pc, #440]	@ (800af08 <HAL_DMA_Init+0x64c>)
 800ad50:	fba2 2303 	umull	r2, r3, r2, r3
 800ad54:	091b      	lsrs	r3, r3, #4
 800ad56:	009a      	lsls	r2, r3, #2
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f002 f9c3 	bl	800d0e8 <DMA_CalcBaseAndBitshift>
 800ad62:	4603      	mov	r3, r0
 800ad64:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad6a:	f003 031f 	and.w	r3, r3, #31
 800ad6e:	2201      	movs	r2, #1
 800ad70:	409a      	lsls	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	605a      	str	r2, [r3, #4]
 800ad76:	e008      	b.n	800ad8a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2240      	movs	r2, #64	@ 0x40
 800ad7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2203      	movs	r2, #3
 800ad82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e0b7      	b.n	800aefa <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a5f      	ldr	r2, [pc, #380]	@ (800af0c <HAL_DMA_Init+0x650>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d072      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a5d      	ldr	r2, [pc, #372]	@ (800af10 <HAL_DMA_Init+0x654>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d06d      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a5c      	ldr	r2, [pc, #368]	@ (800af14 <HAL_DMA_Init+0x658>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d068      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a5a      	ldr	r2, [pc, #360]	@ (800af18 <HAL_DMA_Init+0x65c>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d063      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a59      	ldr	r2, [pc, #356]	@ (800af1c <HAL_DMA_Init+0x660>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d05e      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a57      	ldr	r2, [pc, #348]	@ (800af20 <HAL_DMA_Init+0x664>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d059      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a56      	ldr	r2, [pc, #344]	@ (800af24 <HAL_DMA_Init+0x668>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d054      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a54      	ldr	r2, [pc, #336]	@ (800af28 <HAL_DMA_Init+0x66c>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d04f      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a53      	ldr	r2, [pc, #332]	@ (800af2c <HAL_DMA_Init+0x670>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d04a      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a51      	ldr	r2, [pc, #324]	@ (800af30 <HAL_DMA_Init+0x674>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d045      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a50      	ldr	r2, [pc, #320]	@ (800af34 <HAL_DMA_Init+0x678>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d040      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a4e      	ldr	r2, [pc, #312]	@ (800af38 <HAL_DMA_Init+0x67c>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d03b      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a4d      	ldr	r2, [pc, #308]	@ (800af3c <HAL_DMA_Init+0x680>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d036      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a4b      	ldr	r2, [pc, #300]	@ (800af40 <HAL_DMA_Init+0x684>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d031      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a4a      	ldr	r2, [pc, #296]	@ (800af44 <HAL_DMA_Init+0x688>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d02c      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a48      	ldr	r2, [pc, #288]	@ (800af48 <HAL_DMA_Init+0x68c>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d027      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a47      	ldr	r2, [pc, #284]	@ (800af4c <HAL_DMA_Init+0x690>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d022      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a45      	ldr	r2, [pc, #276]	@ (800af50 <HAL_DMA_Init+0x694>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d01d      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a44      	ldr	r2, [pc, #272]	@ (800af54 <HAL_DMA_Init+0x698>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d018      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a42      	ldr	r2, [pc, #264]	@ (800af58 <HAL_DMA_Init+0x69c>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d013      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a41      	ldr	r2, [pc, #260]	@ (800af5c <HAL_DMA_Init+0x6a0>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d00e      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a3f      	ldr	r2, [pc, #252]	@ (800af60 <HAL_DMA_Init+0x6a4>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d009      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a3e      	ldr	r2, [pc, #248]	@ (800af64 <HAL_DMA_Init+0x6a8>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d004      	beq.n	800ae7a <HAL_DMA_Init+0x5be>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a3c      	ldr	r2, [pc, #240]	@ (800af68 <HAL_DMA_Init+0x6ac>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d101      	bne.n	800ae7e <HAL_DMA_Init+0x5c2>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e000      	b.n	800ae80 <HAL_DMA_Init+0x5c4>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d032      	beq.n	800aeea <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f002 fa5d 	bl	800d344 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	2b80      	cmp	r3, #128	@ 0x80
 800ae90:	d102      	bne.n	800ae98 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aea0:	b2d2      	uxtb	r2, r2
 800aea2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800aeac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d010      	beq.n	800aed8 <HAL_DMA_Init+0x61c>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	2b08      	cmp	r3, #8
 800aebc:	d80c      	bhi.n	800aed8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f002 fada 	bl	800d478 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aec8:	2200      	movs	r2, #0
 800aeca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800aed4:	605a      	str	r2, [r3, #4]
 800aed6:	e008      	b.n	800aeea <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3718      	adds	r7, #24
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	a7fdabf8 	.word	0xa7fdabf8
 800af08:	cccccccd 	.word	0xcccccccd
 800af0c:	40020010 	.word	0x40020010
 800af10:	40020028 	.word	0x40020028
 800af14:	40020040 	.word	0x40020040
 800af18:	40020058 	.word	0x40020058
 800af1c:	40020070 	.word	0x40020070
 800af20:	40020088 	.word	0x40020088
 800af24:	400200a0 	.word	0x400200a0
 800af28:	400200b8 	.word	0x400200b8
 800af2c:	40020410 	.word	0x40020410
 800af30:	40020428 	.word	0x40020428
 800af34:	40020440 	.word	0x40020440
 800af38:	40020458 	.word	0x40020458
 800af3c:	40020470 	.word	0x40020470
 800af40:	40020488 	.word	0x40020488
 800af44:	400204a0 	.word	0x400204a0
 800af48:	400204b8 	.word	0x400204b8
 800af4c:	58025408 	.word	0x58025408
 800af50:	5802541c 	.word	0x5802541c
 800af54:	58025430 	.word	0x58025430
 800af58:	58025444 	.word	0x58025444
 800af5c:	58025458 	.word	0x58025458
 800af60:	5802546c 	.word	0x5802546c
 800af64:	58025480 	.word	0x58025480
 800af68:	58025494 	.word	0x58025494

0800af6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
 800af78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d101      	bne.n	800af88 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	e226      	b.n	800b3d6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d101      	bne.n	800af96 <HAL_DMA_Start_IT+0x2a>
 800af92:	2302      	movs	r3, #2
 800af94:	e21f      	b.n	800b3d6 <HAL_DMA_Start_IT+0x46a>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	f040 820a 	bne.w	800b3c0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2202      	movs	r2, #2
 800afb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a68      	ldr	r2, [pc, #416]	@ (800b160 <HAL_DMA_Start_IT+0x1f4>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d04a      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a66      	ldr	r2, [pc, #408]	@ (800b164 <HAL_DMA_Start_IT+0x1f8>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d045      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a65      	ldr	r2, [pc, #404]	@ (800b168 <HAL_DMA_Start_IT+0x1fc>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d040      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a63      	ldr	r2, [pc, #396]	@ (800b16c <HAL_DMA_Start_IT+0x200>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d03b      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a62      	ldr	r2, [pc, #392]	@ (800b170 <HAL_DMA_Start_IT+0x204>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d036      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a60      	ldr	r2, [pc, #384]	@ (800b174 <HAL_DMA_Start_IT+0x208>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d031      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a5f      	ldr	r2, [pc, #380]	@ (800b178 <HAL_DMA_Start_IT+0x20c>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d02c      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a5d      	ldr	r2, [pc, #372]	@ (800b17c <HAL_DMA_Start_IT+0x210>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d027      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a5c      	ldr	r2, [pc, #368]	@ (800b180 <HAL_DMA_Start_IT+0x214>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d022      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a5a      	ldr	r2, [pc, #360]	@ (800b184 <HAL_DMA_Start_IT+0x218>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d01d      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a59      	ldr	r2, [pc, #356]	@ (800b188 <HAL_DMA_Start_IT+0x21c>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d018      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a57      	ldr	r2, [pc, #348]	@ (800b18c <HAL_DMA_Start_IT+0x220>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d013      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a56      	ldr	r2, [pc, #344]	@ (800b190 <HAL_DMA_Start_IT+0x224>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d00e      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a54      	ldr	r2, [pc, #336]	@ (800b194 <HAL_DMA_Start_IT+0x228>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d009      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a53      	ldr	r2, [pc, #332]	@ (800b198 <HAL_DMA_Start_IT+0x22c>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d004      	beq.n	800b05a <HAL_DMA_Start_IT+0xee>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a51      	ldr	r2, [pc, #324]	@ (800b19c <HAL_DMA_Start_IT+0x230>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d108      	bne.n	800b06c <HAL_DMA_Start_IT+0x100>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f022 0201 	bic.w	r2, r2, #1
 800b068:	601a      	str	r2, [r3, #0]
 800b06a:	e007      	b.n	800b07c <HAL_DMA_Start_IT+0x110>
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f022 0201 	bic.w	r2, r2, #1
 800b07a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	68b9      	ldr	r1, [r7, #8]
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f001 fe84 	bl	800cd90 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a34      	ldr	r2, [pc, #208]	@ (800b160 <HAL_DMA_Start_IT+0x1f4>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d04a      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a33      	ldr	r2, [pc, #204]	@ (800b164 <HAL_DMA_Start_IT+0x1f8>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d045      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a31      	ldr	r2, [pc, #196]	@ (800b168 <HAL_DMA_Start_IT+0x1fc>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d040      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a30      	ldr	r2, [pc, #192]	@ (800b16c <HAL_DMA_Start_IT+0x200>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d03b      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a2e      	ldr	r2, [pc, #184]	@ (800b170 <HAL_DMA_Start_IT+0x204>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d036      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a2d      	ldr	r2, [pc, #180]	@ (800b174 <HAL_DMA_Start_IT+0x208>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d031      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a2b      	ldr	r2, [pc, #172]	@ (800b178 <HAL_DMA_Start_IT+0x20c>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d02c      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a2a      	ldr	r2, [pc, #168]	@ (800b17c <HAL_DMA_Start_IT+0x210>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d027      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a28      	ldr	r2, [pc, #160]	@ (800b180 <HAL_DMA_Start_IT+0x214>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d022      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a27      	ldr	r2, [pc, #156]	@ (800b184 <HAL_DMA_Start_IT+0x218>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d01d      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a25      	ldr	r2, [pc, #148]	@ (800b188 <HAL_DMA_Start_IT+0x21c>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d018      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a24      	ldr	r2, [pc, #144]	@ (800b18c <HAL_DMA_Start_IT+0x220>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d013      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a22      	ldr	r2, [pc, #136]	@ (800b190 <HAL_DMA_Start_IT+0x224>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d00e      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a21      	ldr	r2, [pc, #132]	@ (800b194 <HAL_DMA_Start_IT+0x228>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d009      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a1f      	ldr	r2, [pc, #124]	@ (800b198 <HAL_DMA_Start_IT+0x22c>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d004      	beq.n	800b128 <HAL_DMA_Start_IT+0x1bc>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a1e      	ldr	r2, [pc, #120]	@ (800b19c <HAL_DMA_Start_IT+0x230>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d101      	bne.n	800b12c <HAL_DMA_Start_IT+0x1c0>
 800b128:	2301      	movs	r3, #1
 800b12a:	e000      	b.n	800b12e <HAL_DMA_Start_IT+0x1c2>
 800b12c:	2300      	movs	r3, #0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d036      	beq.n	800b1a0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f023 021e 	bic.w	r2, r3, #30
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f042 0216 	orr.w	r2, r2, #22
 800b144:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d03e      	beq.n	800b1cc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f042 0208 	orr.w	r2, r2, #8
 800b15c:	601a      	str	r2, [r3, #0]
 800b15e:	e035      	b.n	800b1cc <HAL_DMA_Start_IT+0x260>
 800b160:	40020010 	.word	0x40020010
 800b164:	40020028 	.word	0x40020028
 800b168:	40020040 	.word	0x40020040
 800b16c:	40020058 	.word	0x40020058
 800b170:	40020070 	.word	0x40020070
 800b174:	40020088 	.word	0x40020088
 800b178:	400200a0 	.word	0x400200a0
 800b17c:	400200b8 	.word	0x400200b8
 800b180:	40020410 	.word	0x40020410
 800b184:	40020428 	.word	0x40020428
 800b188:	40020440 	.word	0x40020440
 800b18c:	40020458 	.word	0x40020458
 800b190:	40020470 	.word	0x40020470
 800b194:	40020488 	.word	0x40020488
 800b198:	400204a0 	.word	0x400204a0
 800b19c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f023 020e 	bic.w	r2, r3, #14
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f042 020a 	orr.w	r2, r2, #10
 800b1b2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d007      	beq.n	800b1cc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f042 0204 	orr.w	r2, r2, #4
 800b1ca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a83      	ldr	r2, [pc, #524]	@ (800b3e0 <HAL_DMA_Start_IT+0x474>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d072      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a82      	ldr	r2, [pc, #520]	@ (800b3e4 <HAL_DMA_Start_IT+0x478>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d06d      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a80      	ldr	r2, [pc, #512]	@ (800b3e8 <HAL_DMA_Start_IT+0x47c>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d068      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a7f      	ldr	r2, [pc, #508]	@ (800b3ec <HAL_DMA_Start_IT+0x480>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d063      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a7d      	ldr	r2, [pc, #500]	@ (800b3f0 <HAL_DMA_Start_IT+0x484>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d05e      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a7c      	ldr	r2, [pc, #496]	@ (800b3f4 <HAL_DMA_Start_IT+0x488>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d059      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a7a      	ldr	r2, [pc, #488]	@ (800b3f8 <HAL_DMA_Start_IT+0x48c>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d054      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a79      	ldr	r2, [pc, #484]	@ (800b3fc <HAL_DMA_Start_IT+0x490>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d04f      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a77      	ldr	r2, [pc, #476]	@ (800b400 <HAL_DMA_Start_IT+0x494>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d04a      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a76      	ldr	r2, [pc, #472]	@ (800b404 <HAL_DMA_Start_IT+0x498>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d045      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a74      	ldr	r2, [pc, #464]	@ (800b408 <HAL_DMA_Start_IT+0x49c>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d040      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a73      	ldr	r2, [pc, #460]	@ (800b40c <HAL_DMA_Start_IT+0x4a0>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d03b      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a71      	ldr	r2, [pc, #452]	@ (800b410 <HAL_DMA_Start_IT+0x4a4>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d036      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a70      	ldr	r2, [pc, #448]	@ (800b414 <HAL_DMA_Start_IT+0x4a8>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d031      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a6e      	ldr	r2, [pc, #440]	@ (800b418 <HAL_DMA_Start_IT+0x4ac>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d02c      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a6d      	ldr	r2, [pc, #436]	@ (800b41c <HAL_DMA_Start_IT+0x4b0>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d027      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a6b      	ldr	r2, [pc, #428]	@ (800b420 <HAL_DMA_Start_IT+0x4b4>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d022      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a6a      	ldr	r2, [pc, #424]	@ (800b424 <HAL_DMA_Start_IT+0x4b8>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d01d      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a68      	ldr	r2, [pc, #416]	@ (800b428 <HAL_DMA_Start_IT+0x4bc>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d018      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a67      	ldr	r2, [pc, #412]	@ (800b42c <HAL_DMA_Start_IT+0x4c0>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d013      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a65      	ldr	r2, [pc, #404]	@ (800b430 <HAL_DMA_Start_IT+0x4c4>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d00e      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4a64      	ldr	r2, [pc, #400]	@ (800b434 <HAL_DMA_Start_IT+0x4c8>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d009      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a62      	ldr	r2, [pc, #392]	@ (800b438 <HAL_DMA_Start_IT+0x4cc>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d004      	beq.n	800b2bc <HAL_DMA_Start_IT+0x350>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a61      	ldr	r2, [pc, #388]	@ (800b43c <HAL_DMA_Start_IT+0x4d0>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d101      	bne.n	800b2c0 <HAL_DMA_Start_IT+0x354>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e000      	b.n	800b2c2 <HAL_DMA_Start_IT+0x356>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d01a      	beq.n	800b2fc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d007      	beq.n	800b2e4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b2e2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d007      	beq.n	800b2fc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b2fa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a37      	ldr	r2, [pc, #220]	@ (800b3e0 <HAL_DMA_Start_IT+0x474>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d04a      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a36      	ldr	r2, [pc, #216]	@ (800b3e4 <HAL_DMA_Start_IT+0x478>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d045      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a34      	ldr	r2, [pc, #208]	@ (800b3e8 <HAL_DMA_Start_IT+0x47c>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d040      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a33      	ldr	r2, [pc, #204]	@ (800b3ec <HAL_DMA_Start_IT+0x480>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d03b      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a31      	ldr	r2, [pc, #196]	@ (800b3f0 <HAL_DMA_Start_IT+0x484>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d036      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a30      	ldr	r2, [pc, #192]	@ (800b3f4 <HAL_DMA_Start_IT+0x488>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d031      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a2e      	ldr	r2, [pc, #184]	@ (800b3f8 <HAL_DMA_Start_IT+0x48c>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d02c      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a2d      	ldr	r2, [pc, #180]	@ (800b3fc <HAL_DMA_Start_IT+0x490>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d027      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a2b      	ldr	r2, [pc, #172]	@ (800b400 <HAL_DMA_Start_IT+0x494>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d022      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a2a      	ldr	r2, [pc, #168]	@ (800b404 <HAL_DMA_Start_IT+0x498>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d01d      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a28      	ldr	r2, [pc, #160]	@ (800b408 <HAL_DMA_Start_IT+0x49c>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d018      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a27      	ldr	r2, [pc, #156]	@ (800b40c <HAL_DMA_Start_IT+0x4a0>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d013      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a25      	ldr	r2, [pc, #148]	@ (800b410 <HAL_DMA_Start_IT+0x4a4>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d00e      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a24      	ldr	r2, [pc, #144]	@ (800b414 <HAL_DMA_Start_IT+0x4a8>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d009      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a22      	ldr	r2, [pc, #136]	@ (800b418 <HAL_DMA_Start_IT+0x4ac>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d004      	beq.n	800b39c <HAL_DMA_Start_IT+0x430>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a21      	ldr	r2, [pc, #132]	@ (800b41c <HAL_DMA_Start_IT+0x4b0>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d108      	bne.n	800b3ae <HAL_DMA_Start_IT+0x442>
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f042 0201 	orr.w	r2, r2, #1
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	e012      	b.n	800b3d4 <HAL_DMA_Start_IT+0x468>
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f042 0201 	orr.w	r2, r2, #1
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	e009      	b.n	800b3d4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b3c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b3d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3718      	adds	r7, #24
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	40020010 	.word	0x40020010
 800b3e4:	40020028 	.word	0x40020028
 800b3e8:	40020040 	.word	0x40020040
 800b3ec:	40020058 	.word	0x40020058
 800b3f0:	40020070 	.word	0x40020070
 800b3f4:	40020088 	.word	0x40020088
 800b3f8:	400200a0 	.word	0x400200a0
 800b3fc:	400200b8 	.word	0x400200b8
 800b400:	40020410 	.word	0x40020410
 800b404:	40020428 	.word	0x40020428
 800b408:	40020440 	.word	0x40020440
 800b40c:	40020458 	.word	0x40020458
 800b410:	40020470 	.word	0x40020470
 800b414:	40020488 	.word	0x40020488
 800b418:	400204a0 	.word	0x400204a0
 800b41c:	400204b8 	.word	0x400204b8
 800b420:	58025408 	.word	0x58025408
 800b424:	5802541c 	.word	0x5802541c
 800b428:	58025430 	.word	0x58025430
 800b42c:	58025444 	.word	0x58025444
 800b430:	58025458 	.word	0x58025458
 800b434:	5802546c 	.word	0x5802546c
 800b438:	58025480 	.word	0x58025480
 800b43c:	58025494 	.word	0x58025494

0800b440 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800b448:	f7fd f902 	bl	8008650 <HAL_GetTick>
 800b44c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d101      	bne.n	800b458 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	e2dc      	b.n	800ba12 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	2b02      	cmp	r3, #2
 800b462:	d008      	beq.n	800b476 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2280      	movs	r2, #128	@ 0x80
 800b468:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e2cd      	b.n	800ba12 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a76      	ldr	r2, [pc, #472]	@ (800b654 <HAL_DMA_Abort+0x214>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d04a      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a74      	ldr	r2, [pc, #464]	@ (800b658 <HAL_DMA_Abort+0x218>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d045      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a73      	ldr	r2, [pc, #460]	@ (800b65c <HAL_DMA_Abort+0x21c>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d040      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a71      	ldr	r2, [pc, #452]	@ (800b660 <HAL_DMA_Abort+0x220>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d03b      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a70      	ldr	r2, [pc, #448]	@ (800b664 <HAL_DMA_Abort+0x224>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d036      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a6e      	ldr	r2, [pc, #440]	@ (800b668 <HAL_DMA_Abort+0x228>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d031      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a6d      	ldr	r2, [pc, #436]	@ (800b66c <HAL_DMA_Abort+0x22c>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d02c      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a6b      	ldr	r2, [pc, #428]	@ (800b670 <HAL_DMA_Abort+0x230>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d027      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a6a      	ldr	r2, [pc, #424]	@ (800b674 <HAL_DMA_Abort+0x234>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d022      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a68      	ldr	r2, [pc, #416]	@ (800b678 <HAL_DMA_Abort+0x238>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d01d      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a67      	ldr	r2, [pc, #412]	@ (800b67c <HAL_DMA_Abort+0x23c>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d018      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a65      	ldr	r2, [pc, #404]	@ (800b680 <HAL_DMA_Abort+0x240>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d013      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a64      	ldr	r2, [pc, #400]	@ (800b684 <HAL_DMA_Abort+0x244>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d00e      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a62      	ldr	r2, [pc, #392]	@ (800b688 <HAL_DMA_Abort+0x248>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d009      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a61      	ldr	r2, [pc, #388]	@ (800b68c <HAL_DMA_Abort+0x24c>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d004      	beq.n	800b516 <HAL_DMA_Abort+0xd6>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a5f      	ldr	r2, [pc, #380]	@ (800b690 <HAL_DMA_Abort+0x250>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d101      	bne.n	800b51a <HAL_DMA_Abort+0xda>
 800b516:	2301      	movs	r3, #1
 800b518:	e000      	b.n	800b51c <HAL_DMA_Abort+0xdc>
 800b51a:	2300      	movs	r3, #0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d013      	beq.n	800b548 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f022 021e 	bic.w	r2, r2, #30
 800b52e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	695a      	ldr	r2, [r3, #20]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b53e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	617b      	str	r3, [r7, #20]
 800b546:	e00a      	b.n	800b55e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f022 020e 	bic.w	r2, r2, #14
 800b556:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a3c      	ldr	r2, [pc, #240]	@ (800b654 <HAL_DMA_Abort+0x214>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d072      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a3a      	ldr	r2, [pc, #232]	@ (800b658 <HAL_DMA_Abort+0x218>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d06d      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a39      	ldr	r2, [pc, #228]	@ (800b65c <HAL_DMA_Abort+0x21c>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d068      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a37      	ldr	r2, [pc, #220]	@ (800b660 <HAL_DMA_Abort+0x220>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d063      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a36      	ldr	r2, [pc, #216]	@ (800b664 <HAL_DMA_Abort+0x224>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d05e      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a34      	ldr	r2, [pc, #208]	@ (800b668 <HAL_DMA_Abort+0x228>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d059      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a33      	ldr	r2, [pc, #204]	@ (800b66c <HAL_DMA_Abort+0x22c>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d054      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a31      	ldr	r2, [pc, #196]	@ (800b670 <HAL_DMA_Abort+0x230>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d04f      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a30      	ldr	r2, [pc, #192]	@ (800b674 <HAL_DMA_Abort+0x234>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d04a      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a2e      	ldr	r2, [pc, #184]	@ (800b678 <HAL_DMA_Abort+0x238>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d045      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a2d      	ldr	r2, [pc, #180]	@ (800b67c <HAL_DMA_Abort+0x23c>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d040      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a2b      	ldr	r2, [pc, #172]	@ (800b680 <HAL_DMA_Abort+0x240>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d03b      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a2a      	ldr	r2, [pc, #168]	@ (800b684 <HAL_DMA_Abort+0x244>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d036      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a28      	ldr	r2, [pc, #160]	@ (800b688 <HAL_DMA_Abort+0x248>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d031      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a27      	ldr	r2, [pc, #156]	@ (800b68c <HAL_DMA_Abort+0x24c>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d02c      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a25      	ldr	r2, [pc, #148]	@ (800b690 <HAL_DMA_Abort+0x250>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d027      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a24      	ldr	r2, [pc, #144]	@ (800b694 <HAL_DMA_Abort+0x254>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d022      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a22      	ldr	r2, [pc, #136]	@ (800b698 <HAL_DMA_Abort+0x258>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d01d      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a21      	ldr	r2, [pc, #132]	@ (800b69c <HAL_DMA_Abort+0x25c>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d018      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a1f      	ldr	r2, [pc, #124]	@ (800b6a0 <HAL_DMA_Abort+0x260>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d013      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a1e      	ldr	r2, [pc, #120]	@ (800b6a4 <HAL_DMA_Abort+0x264>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d00e      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a1c      	ldr	r2, [pc, #112]	@ (800b6a8 <HAL_DMA_Abort+0x268>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d009      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a1b      	ldr	r2, [pc, #108]	@ (800b6ac <HAL_DMA_Abort+0x26c>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d004      	beq.n	800b64e <HAL_DMA_Abort+0x20e>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a19      	ldr	r2, [pc, #100]	@ (800b6b0 <HAL_DMA_Abort+0x270>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d132      	bne.n	800b6b4 <HAL_DMA_Abort+0x274>
 800b64e:	2301      	movs	r3, #1
 800b650:	e031      	b.n	800b6b6 <HAL_DMA_Abort+0x276>
 800b652:	bf00      	nop
 800b654:	40020010 	.word	0x40020010
 800b658:	40020028 	.word	0x40020028
 800b65c:	40020040 	.word	0x40020040
 800b660:	40020058 	.word	0x40020058
 800b664:	40020070 	.word	0x40020070
 800b668:	40020088 	.word	0x40020088
 800b66c:	400200a0 	.word	0x400200a0
 800b670:	400200b8 	.word	0x400200b8
 800b674:	40020410 	.word	0x40020410
 800b678:	40020428 	.word	0x40020428
 800b67c:	40020440 	.word	0x40020440
 800b680:	40020458 	.word	0x40020458
 800b684:	40020470 	.word	0x40020470
 800b688:	40020488 	.word	0x40020488
 800b68c:	400204a0 	.word	0x400204a0
 800b690:	400204b8 	.word	0x400204b8
 800b694:	58025408 	.word	0x58025408
 800b698:	5802541c 	.word	0x5802541c
 800b69c:	58025430 	.word	0x58025430
 800b6a0:	58025444 	.word	0x58025444
 800b6a4:	58025458 	.word	0x58025458
 800b6a8:	5802546c 	.word	0x5802546c
 800b6ac:	58025480 	.word	0x58025480
 800b6b0:	58025494 	.word	0x58025494
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d007      	beq.n	800b6ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b6c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a6d      	ldr	r2, [pc, #436]	@ (800b884 <HAL_DMA_Abort+0x444>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d04a      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a6b      	ldr	r2, [pc, #428]	@ (800b888 <HAL_DMA_Abort+0x448>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d045      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a6a      	ldr	r2, [pc, #424]	@ (800b88c <HAL_DMA_Abort+0x44c>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d040      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a68      	ldr	r2, [pc, #416]	@ (800b890 <HAL_DMA_Abort+0x450>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d03b      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a67      	ldr	r2, [pc, #412]	@ (800b894 <HAL_DMA_Abort+0x454>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d036      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a65      	ldr	r2, [pc, #404]	@ (800b898 <HAL_DMA_Abort+0x458>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d031      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a64      	ldr	r2, [pc, #400]	@ (800b89c <HAL_DMA_Abort+0x45c>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d02c      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a62      	ldr	r2, [pc, #392]	@ (800b8a0 <HAL_DMA_Abort+0x460>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d027      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a61      	ldr	r2, [pc, #388]	@ (800b8a4 <HAL_DMA_Abort+0x464>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d022      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a5f      	ldr	r2, [pc, #380]	@ (800b8a8 <HAL_DMA_Abort+0x468>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d01d      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a5e      	ldr	r2, [pc, #376]	@ (800b8ac <HAL_DMA_Abort+0x46c>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d018      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a5c      	ldr	r2, [pc, #368]	@ (800b8b0 <HAL_DMA_Abort+0x470>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d013      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a5b      	ldr	r2, [pc, #364]	@ (800b8b4 <HAL_DMA_Abort+0x474>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d00e      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a59      	ldr	r2, [pc, #356]	@ (800b8b8 <HAL_DMA_Abort+0x478>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d009      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a58      	ldr	r2, [pc, #352]	@ (800b8bc <HAL_DMA_Abort+0x47c>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d004      	beq.n	800b76a <HAL_DMA_Abort+0x32a>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a56      	ldr	r2, [pc, #344]	@ (800b8c0 <HAL_DMA_Abort+0x480>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d108      	bne.n	800b77c <HAL_DMA_Abort+0x33c>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f022 0201 	bic.w	r2, r2, #1
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	e007      	b.n	800b78c <HAL_DMA_Abort+0x34c>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f022 0201 	bic.w	r2, r2, #1
 800b78a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800b78c:	e013      	b.n	800b7b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b78e:	f7fc ff5f 	bl	8008650 <HAL_GetTick>
 800b792:	4602      	mov	r2, r0
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	2b05      	cmp	r3, #5
 800b79a:	d90c      	bls.n	800b7b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2220      	movs	r2, #32
 800b7a0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2203      	movs	r2, #3
 800b7a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e12d      	b.n	800ba12 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d1e5      	bne.n	800b78e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a2f      	ldr	r2, [pc, #188]	@ (800b884 <HAL_DMA_Abort+0x444>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d04a      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a2d      	ldr	r2, [pc, #180]	@ (800b888 <HAL_DMA_Abort+0x448>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d045      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a2c      	ldr	r2, [pc, #176]	@ (800b88c <HAL_DMA_Abort+0x44c>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d040      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a2a      	ldr	r2, [pc, #168]	@ (800b890 <HAL_DMA_Abort+0x450>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d03b      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a29      	ldr	r2, [pc, #164]	@ (800b894 <HAL_DMA_Abort+0x454>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d036      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a27      	ldr	r2, [pc, #156]	@ (800b898 <HAL_DMA_Abort+0x458>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d031      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a26      	ldr	r2, [pc, #152]	@ (800b89c <HAL_DMA_Abort+0x45c>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d02c      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a24      	ldr	r2, [pc, #144]	@ (800b8a0 <HAL_DMA_Abort+0x460>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d027      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a23      	ldr	r2, [pc, #140]	@ (800b8a4 <HAL_DMA_Abort+0x464>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d022      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a21      	ldr	r2, [pc, #132]	@ (800b8a8 <HAL_DMA_Abort+0x468>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d01d      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a20      	ldr	r2, [pc, #128]	@ (800b8ac <HAL_DMA_Abort+0x46c>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d018      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a1e      	ldr	r2, [pc, #120]	@ (800b8b0 <HAL_DMA_Abort+0x470>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d013      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a1d      	ldr	r2, [pc, #116]	@ (800b8b4 <HAL_DMA_Abort+0x474>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d00e      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a1b      	ldr	r2, [pc, #108]	@ (800b8b8 <HAL_DMA_Abort+0x478>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d009      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a1a      	ldr	r2, [pc, #104]	@ (800b8bc <HAL_DMA_Abort+0x47c>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d004      	beq.n	800b862 <HAL_DMA_Abort+0x422>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a18      	ldr	r2, [pc, #96]	@ (800b8c0 <HAL_DMA_Abort+0x480>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d101      	bne.n	800b866 <HAL_DMA_Abort+0x426>
 800b862:	2301      	movs	r3, #1
 800b864:	e000      	b.n	800b868 <HAL_DMA_Abort+0x428>
 800b866:	2300      	movs	r3, #0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d02b      	beq.n	800b8c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b870:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b876:	f003 031f 	and.w	r3, r3, #31
 800b87a:	223f      	movs	r2, #63	@ 0x3f
 800b87c:	409a      	lsls	r2, r3
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	609a      	str	r2, [r3, #8]
 800b882:	e02a      	b.n	800b8da <HAL_DMA_Abort+0x49a>
 800b884:	40020010 	.word	0x40020010
 800b888:	40020028 	.word	0x40020028
 800b88c:	40020040 	.word	0x40020040
 800b890:	40020058 	.word	0x40020058
 800b894:	40020070 	.word	0x40020070
 800b898:	40020088 	.word	0x40020088
 800b89c:	400200a0 	.word	0x400200a0
 800b8a0:	400200b8 	.word	0x400200b8
 800b8a4:	40020410 	.word	0x40020410
 800b8a8:	40020428 	.word	0x40020428
 800b8ac:	40020440 	.word	0x40020440
 800b8b0:	40020458 	.word	0x40020458
 800b8b4:	40020470 	.word	0x40020470
 800b8b8:	40020488 	.word	0x40020488
 800b8bc:	400204a0 	.word	0x400204a0
 800b8c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8ce:	f003 031f 	and.w	r3, r3, #31
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	409a      	lsls	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a4f      	ldr	r2, [pc, #316]	@ (800ba1c <HAL_DMA_Abort+0x5dc>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d072      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a4d      	ldr	r2, [pc, #308]	@ (800ba20 <HAL_DMA_Abort+0x5e0>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d06d      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a4c      	ldr	r2, [pc, #304]	@ (800ba24 <HAL_DMA_Abort+0x5e4>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d068      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a4a      	ldr	r2, [pc, #296]	@ (800ba28 <HAL_DMA_Abort+0x5e8>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d063      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a49      	ldr	r2, [pc, #292]	@ (800ba2c <HAL_DMA_Abort+0x5ec>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d05e      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a47      	ldr	r2, [pc, #284]	@ (800ba30 <HAL_DMA_Abort+0x5f0>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d059      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a46      	ldr	r2, [pc, #280]	@ (800ba34 <HAL_DMA_Abort+0x5f4>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d054      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a44      	ldr	r2, [pc, #272]	@ (800ba38 <HAL_DMA_Abort+0x5f8>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d04f      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a43      	ldr	r2, [pc, #268]	@ (800ba3c <HAL_DMA_Abort+0x5fc>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d04a      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a41      	ldr	r2, [pc, #260]	@ (800ba40 <HAL_DMA_Abort+0x600>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d045      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a40      	ldr	r2, [pc, #256]	@ (800ba44 <HAL_DMA_Abort+0x604>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d040      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a3e      	ldr	r2, [pc, #248]	@ (800ba48 <HAL_DMA_Abort+0x608>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d03b      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a3d      	ldr	r2, [pc, #244]	@ (800ba4c <HAL_DMA_Abort+0x60c>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d036      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a3b      	ldr	r2, [pc, #236]	@ (800ba50 <HAL_DMA_Abort+0x610>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d031      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a3a      	ldr	r2, [pc, #232]	@ (800ba54 <HAL_DMA_Abort+0x614>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d02c      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a38      	ldr	r2, [pc, #224]	@ (800ba58 <HAL_DMA_Abort+0x618>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d027      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a37      	ldr	r2, [pc, #220]	@ (800ba5c <HAL_DMA_Abort+0x61c>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d022      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a35      	ldr	r2, [pc, #212]	@ (800ba60 <HAL_DMA_Abort+0x620>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d01d      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a34      	ldr	r2, [pc, #208]	@ (800ba64 <HAL_DMA_Abort+0x624>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d018      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a32      	ldr	r2, [pc, #200]	@ (800ba68 <HAL_DMA_Abort+0x628>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d013      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a31      	ldr	r2, [pc, #196]	@ (800ba6c <HAL_DMA_Abort+0x62c>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d00e      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a2f      	ldr	r2, [pc, #188]	@ (800ba70 <HAL_DMA_Abort+0x630>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d009      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a2e      	ldr	r2, [pc, #184]	@ (800ba74 <HAL_DMA_Abort+0x634>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d004      	beq.n	800b9ca <HAL_DMA_Abort+0x58a>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a2c      	ldr	r2, [pc, #176]	@ (800ba78 <HAL_DMA_Abort+0x638>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d101      	bne.n	800b9ce <HAL_DMA_Abort+0x58e>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e000      	b.n	800b9d0 <HAL_DMA_Abort+0x590>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d015      	beq.n	800ba00 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b9dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00c      	beq.n	800ba00 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b9f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b9fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3718      	adds	r7, #24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	40020010 	.word	0x40020010
 800ba20:	40020028 	.word	0x40020028
 800ba24:	40020040 	.word	0x40020040
 800ba28:	40020058 	.word	0x40020058
 800ba2c:	40020070 	.word	0x40020070
 800ba30:	40020088 	.word	0x40020088
 800ba34:	400200a0 	.word	0x400200a0
 800ba38:	400200b8 	.word	0x400200b8
 800ba3c:	40020410 	.word	0x40020410
 800ba40:	40020428 	.word	0x40020428
 800ba44:	40020440 	.word	0x40020440
 800ba48:	40020458 	.word	0x40020458
 800ba4c:	40020470 	.word	0x40020470
 800ba50:	40020488 	.word	0x40020488
 800ba54:	400204a0 	.word	0x400204a0
 800ba58:	400204b8 	.word	0x400204b8
 800ba5c:	58025408 	.word	0x58025408
 800ba60:	5802541c 	.word	0x5802541c
 800ba64:	58025430 	.word	0x58025430
 800ba68:	58025444 	.word	0x58025444
 800ba6c:	58025458 	.word	0x58025458
 800ba70:	5802546c 	.word	0x5802546c
 800ba74:	58025480 	.word	0x58025480
 800ba78:	58025494 	.word	0x58025494

0800ba7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d101      	bne.n	800ba8e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e237      	b.n	800befe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d004      	beq.n	800baa4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2280      	movs	r2, #128	@ 0x80
 800ba9e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	e22c      	b.n	800befe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a5c      	ldr	r2, [pc, #368]	@ (800bc1c <HAL_DMA_Abort_IT+0x1a0>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d04a      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a5b      	ldr	r2, [pc, #364]	@ (800bc20 <HAL_DMA_Abort_IT+0x1a4>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d045      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a59      	ldr	r2, [pc, #356]	@ (800bc24 <HAL_DMA_Abort_IT+0x1a8>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d040      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a58      	ldr	r2, [pc, #352]	@ (800bc28 <HAL_DMA_Abort_IT+0x1ac>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d03b      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a56      	ldr	r2, [pc, #344]	@ (800bc2c <HAL_DMA_Abort_IT+0x1b0>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d036      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a55      	ldr	r2, [pc, #340]	@ (800bc30 <HAL_DMA_Abort_IT+0x1b4>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d031      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a53      	ldr	r2, [pc, #332]	@ (800bc34 <HAL_DMA_Abort_IT+0x1b8>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d02c      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a52      	ldr	r2, [pc, #328]	@ (800bc38 <HAL_DMA_Abort_IT+0x1bc>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d027      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a50      	ldr	r2, [pc, #320]	@ (800bc3c <HAL_DMA_Abort_IT+0x1c0>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d022      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a4f      	ldr	r2, [pc, #316]	@ (800bc40 <HAL_DMA_Abort_IT+0x1c4>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d01d      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a4d      	ldr	r2, [pc, #308]	@ (800bc44 <HAL_DMA_Abort_IT+0x1c8>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d018      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a4c      	ldr	r2, [pc, #304]	@ (800bc48 <HAL_DMA_Abort_IT+0x1cc>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d013      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a4a      	ldr	r2, [pc, #296]	@ (800bc4c <HAL_DMA_Abort_IT+0x1d0>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d00e      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a49      	ldr	r2, [pc, #292]	@ (800bc50 <HAL_DMA_Abort_IT+0x1d4>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d009      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a47      	ldr	r2, [pc, #284]	@ (800bc54 <HAL_DMA_Abort_IT+0x1d8>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d004      	beq.n	800bb44 <HAL_DMA_Abort_IT+0xc8>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a46      	ldr	r2, [pc, #280]	@ (800bc58 <HAL_DMA_Abort_IT+0x1dc>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d101      	bne.n	800bb48 <HAL_DMA_Abort_IT+0xcc>
 800bb44:	2301      	movs	r3, #1
 800bb46:	e000      	b.n	800bb4a <HAL_DMA_Abort_IT+0xce>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	f000 8086 	beq.w	800bc5c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2204      	movs	r2, #4
 800bb54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a2f      	ldr	r2, [pc, #188]	@ (800bc1c <HAL_DMA_Abort_IT+0x1a0>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d04a      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a2e      	ldr	r2, [pc, #184]	@ (800bc20 <HAL_DMA_Abort_IT+0x1a4>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d045      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a2c      	ldr	r2, [pc, #176]	@ (800bc24 <HAL_DMA_Abort_IT+0x1a8>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d040      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a2b      	ldr	r2, [pc, #172]	@ (800bc28 <HAL_DMA_Abort_IT+0x1ac>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d03b      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a29      	ldr	r2, [pc, #164]	@ (800bc2c <HAL_DMA_Abort_IT+0x1b0>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d036      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a28      	ldr	r2, [pc, #160]	@ (800bc30 <HAL_DMA_Abort_IT+0x1b4>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d031      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a26      	ldr	r2, [pc, #152]	@ (800bc34 <HAL_DMA_Abort_IT+0x1b8>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d02c      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a25      	ldr	r2, [pc, #148]	@ (800bc38 <HAL_DMA_Abort_IT+0x1bc>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d027      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a23      	ldr	r2, [pc, #140]	@ (800bc3c <HAL_DMA_Abort_IT+0x1c0>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d022      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a22      	ldr	r2, [pc, #136]	@ (800bc40 <HAL_DMA_Abort_IT+0x1c4>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d01d      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a20      	ldr	r2, [pc, #128]	@ (800bc44 <HAL_DMA_Abort_IT+0x1c8>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d018      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a1f      	ldr	r2, [pc, #124]	@ (800bc48 <HAL_DMA_Abort_IT+0x1cc>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d013      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a1d      	ldr	r2, [pc, #116]	@ (800bc4c <HAL_DMA_Abort_IT+0x1d0>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d00e      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a1c      	ldr	r2, [pc, #112]	@ (800bc50 <HAL_DMA_Abort_IT+0x1d4>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d009      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a1a      	ldr	r2, [pc, #104]	@ (800bc54 <HAL_DMA_Abort_IT+0x1d8>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d004      	beq.n	800bbf8 <HAL_DMA_Abort_IT+0x17c>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a19      	ldr	r2, [pc, #100]	@ (800bc58 <HAL_DMA_Abort_IT+0x1dc>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d108      	bne.n	800bc0a <HAL_DMA_Abort_IT+0x18e>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f022 0201 	bic.w	r2, r2, #1
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	e178      	b.n	800befc <HAL_DMA_Abort_IT+0x480>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f022 0201 	bic.w	r2, r2, #1
 800bc18:	601a      	str	r2, [r3, #0]
 800bc1a:	e16f      	b.n	800befc <HAL_DMA_Abort_IT+0x480>
 800bc1c:	40020010 	.word	0x40020010
 800bc20:	40020028 	.word	0x40020028
 800bc24:	40020040 	.word	0x40020040
 800bc28:	40020058 	.word	0x40020058
 800bc2c:	40020070 	.word	0x40020070
 800bc30:	40020088 	.word	0x40020088
 800bc34:	400200a0 	.word	0x400200a0
 800bc38:	400200b8 	.word	0x400200b8
 800bc3c:	40020410 	.word	0x40020410
 800bc40:	40020428 	.word	0x40020428
 800bc44:	40020440 	.word	0x40020440
 800bc48:	40020458 	.word	0x40020458
 800bc4c:	40020470 	.word	0x40020470
 800bc50:	40020488 	.word	0x40020488
 800bc54:	400204a0 	.word	0x400204a0
 800bc58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f022 020e 	bic.w	r2, r2, #14
 800bc6a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a6c      	ldr	r2, [pc, #432]	@ (800be24 <HAL_DMA_Abort_IT+0x3a8>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d04a      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a6b      	ldr	r2, [pc, #428]	@ (800be28 <HAL_DMA_Abort_IT+0x3ac>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d045      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a69      	ldr	r2, [pc, #420]	@ (800be2c <HAL_DMA_Abort_IT+0x3b0>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d040      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a68      	ldr	r2, [pc, #416]	@ (800be30 <HAL_DMA_Abort_IT+0x3b4>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d03b      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a66      	ldr	r2, [pc, #408]	@ (800be34 <HAL_DMA_Abort_IT+0x3b8>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d036      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a65      	ldr	r2, [pc, #404]	@ (800be38 <HAL_DMA_Abort_IT+0x3bc>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d031      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a63      	ldr	r2, [pc, #396]	@ (800be3c <HAL_DMA_Abort_IT+0x3c0>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d02c      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a62      	ldr	r2, [pc, #392]	@ (800be40 <HAL_DMA_Abort_IT+0x3c4>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d027      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a60      	ldr	r2, [pc, #384]	@ (800be44 <HAL_DMA_Abort_IT+0x3c8>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d022      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a5f      	ldr	r2, [pc, #380]	@ (800be48 <HAL_DMA_Abort_IT+0x3cc>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d01d      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a5d      	ldr	r2, [pc, #372]	@ (800be4c <HAL_DMA_Abort_IT+0x3d0>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d018      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a5c      	ldr	r2, [pc, #368]	@ (800be50 <HAL_DMA_Abort_IT+0x3d4>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d013      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a5a      	ldr	r2, [pc, #360]	@ (800be54 <HAL_DMA_Abort_IT+0x3d8>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d00e      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a59      	ldr	r2, [pc, #356]	@ (800be58 <HAL_DMA_Abort_IT+0x3dc>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d009      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a57      	ldr	r2, [pc, #348]	@ (800be5c <HAL_DMA_Abort_IT+0x3e0>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d004      	beq.n	800bd0c <HAL_DMA_Abort_IT+0x290>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a56      	ldr	r2, [pc, #344]	@ (800be60 <HAL_DMA_Abort_IT+0x3e4>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d108      	bne.n	800bd1e <HAL_DMA_Abort_IT+0x2a2>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f022 0201 	bic.w	r2, r2, #1
 800bd1a:	601a      	str	r2, [r3, #0]
 800bd1c:	e007      	b.n	800bd2e <HAL_DMA_Abort_IT+0x2b2>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f022 0201 	bic.w	r2, r2, #1
 800bd2c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a3c      	ldr	r2, [pc, #240]	@ (800be24 <HAL_DMA_Abort_IT+0x3a8>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d072      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a3a      	ldr	r2, [pc, #232]	@ (800be28 <HAL_DMA_Abort_IT+0x3ac>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d06d      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a39      	ldr	r2, [pc, #228]	@ (800be2c <HAL_DMA_Abort_IT+0x3b0>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d068      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a37      	ldr	r2, [pc, #220]	@ (800be30 <HAL_DMA_Abort_IT+0x3b4>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d063      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a36      	ldr	r2, [pc, #216]	@ (800be34 <HAL_DMA_Abort_IT+0x3b8>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d05e      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a34      	ldr	r2, [pc, #208]	@ (800be38 <HAL_DMA_Abort_IT+0x3bc>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d059      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a33      	ldr	r2, [pc, #204]	@ (800be3c <HAL_DMA_Abort_IT+0x3c0>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d054      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a31      	ldr	r2, [pc, #196]	@ (800be40 <HAL_DMA_Abort_IT+0x3c4>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d04f      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a30      	ldr	r2, [pc, #192]	@ (800be44 <HAL_DMA_Abort_IT+0x3c8>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d04a      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a2e      	ldr	r2, [pc, #184]	@ (800be48 <HAL_DMA_Abort_IT+0x3cc>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d045      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a2d      	ldr	r2, [pc, #180]	@ (800be4c <HAL_DMA_Abort_IT+0x3d0>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d040      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a2b      	ldr	r2, [pc, #172]	@ (800be50 <HAL_DMA_Abort_IT+0x3d4>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d03b      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a2a      	ldr	r2, [pc, #168]	@ (800be54 <HAL_DMA_Abort_IT+0x3d8>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d036      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a28      	ldr	r2, [pc, #160]	@ (800be58 <HAL_DMA_Abort_IT+0x3dc>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d031      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a27      	ldr	r2, [pc, #156]	@ (800be5c <HAL_DMA_Abort_IT+0x3e0>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d02c      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a25      	ldr	r2, [pc, #148]	@ (800be60 <HAL_DMA_Abort_IT+0x3e4>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d027      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a24      	ldr	r2, [pc, #144]	@ (800be64 <HAL_DMA_Abort_IT+0x3e8>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d022      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a22      	ldr	r2, [pc, #136]	@ (800be68 <HAL_DMA_Abort_IT+0x3ec>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d01d      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a21      	ldr	r2, [pc, #132]	@ (800be6c <HAL_DMA_Abort_IT+0x3f0>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d018      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a1f      	ldr	r2, [pc, #124]	@ (800be70 <HAL_DMA_Abort_IT+0x3f4>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d013      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a1e      	ldr	r2, [pc, #120]	@ (800be74 <HAL_DMA_Abort_IT+0x3f8>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d00e      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a1c      	ldr	r2, [pc, #112]	@ (800be78 <HAL_DMA_Abort_IT+0x3fc>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d009      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a1b      	ldr	r2, [pc, #108]	@ (800be7c <HAL_DMA_Abort_IT+0x400>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d004      	beq.n	800be1e <HAL_DMA_Abort_IT+0x3a2>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a19      	ldr	r2, [pc, #100]	@ (800be80 <HAL_DMA_Abort_IT+0x404>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d132      	bne.n	800be84 <HAL_DMA_Abort_IT+0x408>
 800be1e:	2301      	movs	r3, #1
 800be20:	e031      	b.n	800be86 <HAL_DMA_Abort_IT+0x40a>
 800be22:	bf00      	nop
 800be24:	40020010 	.word	0x40020010
 800be28:	40020028 	.word	0x40020028
 800be2c:	40020040 	.word	0x40020040
 800be30:	40020058 	.word	0x40020058
 800be34:	40020070 	.word	0x40020070
 800be38:	40020088 	.word	0x40020088
 800be3c:	400200a0 	.word	0x400200a0
 800be40:	400200b8 	.word	0x400200b8
 800be44:	40020410 	.word	0x40020410
 800be48:	40020428 	.word	0x40020428
 800be4c:	40020440 	.word	0x40020440
 800be50:	40020458 	.word	0x40020458
 800be54:	40020470 	.word	0x40020470
 800be58:	40020488 	.word	0x40020488
 800be5c:	400204a0 	.word	0x400204a0
 800be60:	400204b8 	.word	0x400204b8
 800be64:	58025408 	.word	0x58025408
 800be68:	5802541c 	.word	0x5802541c
 800be6c:	58025430 	.word	0x58025430
 800be70:	58025444 	.word	0x58025444
 800be74:	58025458 	.word	0x58025458
 800be78:	5802546c 	.word	0x5802546c
 800be7c:	58025480 	.word	0x58025480
 800be80:	58025494 	.word	0x58025494
 800be84:	2300      	movs	r3, #0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d028      	beq.n	800bedc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800be98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bea4:	f003 031f 	and.w	r3, r3, #31
 800bea8:	2201      	movs	r2, #1
 800beaa:	409a      	lsls	r2, r3
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800beb8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00c      	beq.n	800bedc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800becc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bed0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800beda:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d003      	beq.n	800befc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800befc:	2300      	movs	r3, #0
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop

0800bf08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08a      	sub	sp, #40	@ 0x28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800bf10:	2300      	movs	r3, #0
 800bf12:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bf14:	4b67      	ldr	r3, [pc, #412]	@ (800c0b4 <HAL_DMA_IRQHandler+0x1ac>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a67      	ldr	r2, [pc, #412]	@ (800c0b8 <HAL_DMA_IRQHandler+0x1b0>)
 800bf1a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf1e:	0a9b      	lsrs	r3, r3, #10
 800bf20:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf26:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf2c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800bf2e:	6a3b      	ldr	r3, [r7, #32]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a5f      	ldr	r2, [pc, #380]	@ (800c0bc <HAL_DMA_IRQHandler+0x1b4>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d04a      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a5d      	ldr	r2, [pc, #372]	@ (800c0c0 <HAL_DMA_IRQHandler+0x1b8>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d045      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a5c      	ldr	r2, [pc, #368]	@ (800c0c4 <HAL_DMA_IRQHandler+0x1bc>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d040      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a5a      	ldr	r2, [pc, #360]	@ (800c0c8 <HAL_DMA_IRQHandler+0x1c0>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d03b      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a59      	ldr	r2, [pc, #356]	@ (800c0cc <HAL_DMA_IRQHandler+0x1c4>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d036      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a57      	ldr	r2, [pc, #348]	@ (800c0d0 <HAL_DMA_IRQHandler+0x1c8>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d031      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a56      	ldr	r2, [pc, #344]	@ (800c0d4 <HAL_DMA_IRQHandler+0x1cc>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d02c      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a54      	ldr	r2, [pc, #336]	@ (800c0d8 <HAL_DMA_IRQHandler+0x1d0>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d027      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a53      	ldr	r2, [pc, #332]	@ (800c0dc <HAL_DMA_IRQHandler+0x1d4>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d022      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a51      	ldr	r2, [pc, #324]	@ (800c0e0 <HAL_DMA_IRQHandler+0x1d8>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d01d      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a50      	ldr	r2, [pc, #320]	@ (800c0e4 <HAL_DMA_IRQHandler+0x1dc>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d018      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a4e      	ldr	r2, [pc, #312]	@ (800c0e8 <HAL_DMA_IRQHandler+0x1e0>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d013      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a4d      	ldr	r2, [pc, #308]	@ (800c0ec <HAL_DMA_IRQHandler+0x1e4>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d00e      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a4b      	ldr	r2, [pc, #300]	@ (800c0f0 <HAL_DMA_IRQHandler+0x1e8>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d009      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a4a      	ldr	r2, [pc, #296]	@ (800c0f4 <HAL_DMA_IRQHandler+0x1ec>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d004      	beq.n	800bfda <HAL_DMA_IRQHandler+0xd2>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a48      	ldr	r2, [pc, #288]	@ (800c0f8 <HAL_DMA_IRQHandler+0x1f0>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d101      	bne.n	800bfde <HAL_DMA_IRQHandler+0xd6>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e000      	b.n	800bfe0 <HAL_DMA_IRQHandler+0xd8>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f000 842b 	beq.w	800c83c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfea:	f003 031f 	and.w	r3, r3, #31
 800bfee:	2208      	movs	r2, #8
 800bff0:	409a      	lsls	r2, r3
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	4013      	ands	r3, r2
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f000 80a2 	beq.w	800c140 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a2e      	ldr	r2, [pc, #184]	@ (800c0bc <HAL_DMA_IRQHandler+0x1b4>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d04a      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a2d      	ldr	r2, [pc, #180]	@ (800c0c0 <HAL_DMA_IRQHandler+0x1b8>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d045      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a2b      	ldr	r2, [pc, #172]	@ (800c0c4 <HAL_DMA_IRQHandler+0x1bc>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d040      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a2a      	ldr	r2, [pc, #168]	@ (800c0c8 <HAL_DMA_IRQHandler+0x1c0>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d03b      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a28      	ldr	r2, [pc, #160]	@ (800c0cc <HAL_DMA_IRQHandler+0x1c4>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d036      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a27      	ldr	r2, [pc, #156]	@ (800c0d0 <HAL_DMA_IRQHandler+0x1c8>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d031      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a25      	ldr	r2, [pc, #148]	@ (800c0d4 <HAL_DMA_IRQHandler+0x1cc>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d02c      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a24      	ldr	r2, [pc, #144]	@ (800c0d8 <HAL_DMA_IRQHandler+0x1d0>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d027      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a22      	ldr	r2, [pc, #136]	@ (800c0dc <HAL_DMA_IRQHandler+0x1d4>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d022      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a21      	ldr	r2, [pc, #132]	@ (800c0e0 <HAL_DMA_IRQHandler+0x1d8>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d01d      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a1f      	ldr	r2, [pc, #124]	@ (800c0e4 <HAL_DMA_IRQHandler+0x1dc>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d018      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a1e      	ldr	r2, [pc, #120]	@ (800c0e8 <HAL_DMA_IRQHandler+0x1e0>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d013      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a1c      	ldr	r2, [pc, #112]	@ (800c0ec <HAL_DMA_IRQHandler+0x1e4>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d00e      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a1b      	ldr	r2, [pc, #108]	@ (800c0f0 <HAL_DMA_IRQHandler+0x1e8>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d009      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a19      	ldr	r2, [pc, #100]	@ (800c0f4 <HAL_DMA_IRQHandler+0x1ec>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d004      	beq.n	800c09c <HAL_DMA_IRQHandler+0x194>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a18      	ldr	r2, [pc, #96]	@ (800c0f8 <HAL_DMA_IRQHandler+0x1f0>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d12f      	bne.n	800c0fc <HAL_DMA_IRQHandler+0x1f4>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 0304 	and.w	r3, r3, #4
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	bf14      	ite	ne
 800c0aa:	2301      	movne	r3, #1
 800c0ac:	2300      	moveq	r3, #0
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	e02e      	b.n	800c110 <HAL_DMA_IRQHandler+0x208>
 800c0b2:	bf00      	nop
 800c0b4:	24000004 	.word	0x24000004
 800c0b8:	1b4e81b5 	.word	0x1b4e81b5
 800c0bc:	40020010 	.word	0x40020010
 800c0c0:	40020028 	.word	0x40020028
 800c0c4:	40020040 	.word	0x40020040
 800c0c8:	40020058 	.word	0x40020058
 800c0cc:	40020070 	.word	0x40020070
 800c0d0:	40020088 	.word	0x40020088
 800c0d4:	400200a0 	.word	0x400200a0
 800c0d8:	400200b8 	.word	0x400200b8
 800c0dc:	40020410 	.word	0x40020410
 800c0e0:	40020428 	.word	0x40020428
 800c0e4:	40020440 	.word	0x40020440
 800c0e8:	40020458 	.word	0x40020458
 800c0ec:	40020470 	.word	0x40020470
 800c0f0:	40020488 	.word	0x40020488
 800c0f4:	400204a0 	.word	0x400204a0
 800c0f8:	400204b8 	.word	0x400204b8
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f003 0308 	and.w	r3, r3, #8
 800c106:	2b00      	cmp	r3, #0
 800c108:	bf14      	ite	ne
 800c10a:	2301      	movne	r3, #1
 800c10c:	2300      	moveq	r3, #0
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	2b00      	cmp	r3, #0
 800c112:	d015      	beq.n	800c140 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f022 0204 	bic.w	r2, r2, #4
 800c122:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c128:	f003 031f 	and.w	r3, r3, #31
 800c12c:	2208      	movs	r2, #8
 800c12e:	409a      	lsls	r2, r3
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c138:	f043 0201 	orr.w	r2, r3, #1
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c144:	f003 031f 	and.w	r3, r3, #31
 800c148:	69ba      	ldr	r2, [r7, #24]
 800c14a:	fa22 f303 	lsr.w	r3, r2, r3
 800c14e:	f003 0301 	and.w	r3, r3, #1
 800c152:	2b00      	cmp	r3, #0
 800c154:	d06e      	beq.n	800c234 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a69      	ldr	r2, [pc, #420]	@ (800c300 <HAL_DMA_IRQHandler+0x3f8>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d04a      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a67      	ldr	r2, [pc, #412]	@ (800c304 <HAL_DMA_IRQHandler+0x3fc>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d045      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a66      	ldr	r2, [pc, #408]	@ (800c308 <HAL_DMA_IRQHandler+0x400>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d040      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a64      	ldr	r2, [pc, #400]	@ (800c30c <HAL_DMA_IRQHandler+0x404>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d03b      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a63      	ldr	r2, [pc, #396]	@ (800c310 <HAL_DMA_IRQHandler+0x408>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d036      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a61      	ldr	r2, [pc, #388]	@ (800c314 <HAL_DMA_IRQHandler+0x40c>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d031      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a60      	ldr	r2, [pc, #384]	@ (800c318 <HAL_DMA_IRQHandler+0x410>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d02c      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a5e      	ldr	r2, [pc, #376]	@ (800c31c <HAL_DMA_IRQHandler+0x414>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d027      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a5d      	ldr	r2, [pc, #372]	@ (800c320 <HAL_DMA_IRQHandler+0x418>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d022      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a5b      	ldr	r2, [pc, #364]	@ (800c324 <HAL_DMA_IRQHandler+0x41c>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d01d      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a5a      	ldr	r2, [pc, #360]	@ (800c328 <HAL_DMA_IRQHandler+0x420>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d018      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a58      	ldr	r2, [pc, #352]	@ (800c32c <HAL_DMA_IRQHandler+0x424>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d013      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a57      	ldr	r2, [pc, #348]	@ (800c330 <HAL_DMA_IRQHandler+0x428>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d00e      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a55      	ldr	r2, [pc, #340]	@ (800c334 <HAL_DMA_IRQHandler+0x42c>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d009      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a54      	ldr	r2, [pc, #336]	@ (800c338 <HAL_DMA_IRQHandler+0x430>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d004      	beq.n	800c1f6 <HAL_DMA_IRQHandler+0x2ee>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a52      	ldr	r2, [pc, #328]	@ (800c33c <HAL_DMA_IRQHandler+0x434>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d10a      	bne.n	800c20c <HAL_DMA_IRQHandler+0x304>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	695b      	ldr	r3, [r3, #20]
 800c1fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c200:	2b00      	cmp	r3, #0
 800c202:	bf14      	ite	ne
 800c204:	2301      	movne	r3, #1
 800c206:	2300      	moveq	r3, #0
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	e003      	b.n	800c214 <HAL_DMA_IRQHandler+0x30c>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2300      	movs	r3, #0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00d      	beq.n	800c234 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c21c:	f003 031f 	and.w	r3, r3, #31
 800c220:	2201      	movs	r2, #1
 800c222:	409a      	lsls	r2, r3
 800c224:	6a3b      	ldr	r3, [r7, #32]
 800c226:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c22c:	f043 0202 	orr.w	r2, r3, #2
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c238:	f003 031f 	and.w	r3, r3, #31
 800c23c:	2204      	movs	r2, #4
 800c23e:	409a      	lsls	r2, r3
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	4013      	ands	r3, r2
 800c244:	2b00      	cmp	r3, #0
 800c246:	f000 808f 	beq.w	800c368 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a2c      	ldr	r2, [pc, #176]	@ (800c300 <HAL_DMA_IRQHandler+0x3f8>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d04a      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a2a      	ldr	r2, [pc, #168]	@ (800c304 <HAL_DMA_IRQHandler+0x3fc>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d045      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a29      	ldr	r2, [pc, #164]	@ (800c308 <HAL_DMA_IRQHandler+0x400>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d040      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a27      	ldr	r2, [pc, #156]	@ (800c30c <HAL_DMA_IRQHandler+0x404>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d03b      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a26      	ldr	r2, [pc, #152]	@ (800c310 <HAL_DMA_IRQHandler+0x408>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d036      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a24      	ldr	r2, [pc, #144]	@ (800c314 <HAL_DMA_IRQHandler+0x40c>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d031      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a23      	ldr	r2, [pc, #140]	@ (800c318 <HAL_DMA_IRQHandler+0x410>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d02c      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a21      	ldr	r2, [pc, #132]	@ (800c31c <HAL_DMA_IRQHandler+0x414>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d027      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a20      	ldr	r2, [pc, #128]	@ (800c320 <HAL_DMA_IRQHandler+0x418>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d022      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a1e      	ldr	r2, [pc, #120]	@ (800c324 <HAL_DMA_IRQHandler+0x41c>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d01d      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a1d      	ldr	r2, [pc, #116]	@ (800c328 <HAL_DMA_IRQHandler+0x420>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d018      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a1b      	ldr	r2, [pc, #108]	@ (800c32c <HAL_DMA_IRQHandler+0x424>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d013      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a1a      	ldr	r2, [pc, #104]	@ (800c330 <HAL_DMA_IRQHandler+0x428>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d00e      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a18      	ldr	r2, [pc, #96]	@ (800c334 <HAL_DMA_IRQHandler+0x42c>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d009      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a17      	ldr	r2, [pc, #92]	@ (800c338 <HAL_DMA_IRQHandler+0x430>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d004      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x3e2>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a15      	ldr	r2, [pc, #84]	@ (800c33c <HAL_DMA_IRQHandler+0x434>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d12a      	bne.n	800c340 <HAL_DMA_IRQHandler+0x438>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f003 0302 	and.w	r3, r3, #2
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	bf14      	ite	ne
 800c2f8:	2301      	movne	r3, #1
 800c2fa:	2300      	moveq	r3, #0
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	e023      	b.n	800c348 <HAL_DMA_IRQHandler+0x440>
 800c300:	40020010 	.word	0x40020010
 800c304:	40020028 	.word	0x40020028
 800c308:	40020040 	.word	0x40020040
 800c30c:	40020058 	.word	0x40020058
 800c310:	40020070 	.word	0x40020070
 800c314:	40020088 	.word	0x40020088
 800c318:	400200a0 	.word	0x400200a0
 800c31c:	400200b8 	.word	0x400200b8
 800c320:	40020410 	.word	0x40020410
 800c324:	40020428 	.word	0x40020428
 800c328:	40020440 	.word	0x40020440
 800c32c:	40020458 	.word	0x40020458
 800c330:	40020470 	.word	0x40020470
 800c334:	40020488 	.word	0x40020488
 800c338:	400204a0 	.word	0x400204a0
 800c33c:	400204b8 	.word	0x400204b8
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2300      	movs	r3, #0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00d      	beq.n	800c368 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c350:	f003 031f 	and.w	r3, r3, #31
 800c354:	2204      	movs	r2, #4
 800c356:	409a      	lsls	r2, r3
 800c358:	6a3b      	ldr	r3, [r7, #32]
 800c35a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c360:	f043 0204 	orr.w	r2, r3, #4
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c36c:	f003 031f 	and.w	r3, r3, #31
 800c370:	2210      	movs	r2, #16
 800c372:	409a      	lsls	r2, r3
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	4013      	ands	r3, r2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f000 80a6 	beq.w	800c4ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a85      	ldr	r2, [pc, #532]	@ (800c598 <HAL_DMA_IRQHandler+0x690>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d04a      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a83      	ldr	r2, [pc, #524]	@ (800c59c <HAL_DMA_IRQHandler+0x694>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d045      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a82      	ldr	r2, [pc, #520]	@ (800c5a0 <HAL_DMA_IRQHandler+0x698>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d040      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a80      	ldr	r2, [pc, #512]	@ (800c5a4 <HAL_DMA_IRQHandler+0x69c>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d03b      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a7f      	ldr	r2, [pc, #508]	@ (800c5a8 <HAL_DMA_IRQHandler+0x6a0>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d036      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a7d      	ldr	r2, [pc, #500]	@ (800c5ac <HAL_DMA_IRQHandler+0x6a4>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d031      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a7c      	ldr	r2, [pc, #496]	@ (800c5b0 <HAL_DMA_IRQHandler+0x6a8>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d02c      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a7a      	ldr	r2, [pc, #488]	@ (800c5b4 <HAL_DMA_IRQHandler+0x6ac>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d027      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a79      	ldr	r2, [pc, #484]	@ (800c5b8 <HAL_DMA_IRQHandler+0x6b0>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d022      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a77      	ldr	r2, [pc, #476]	@ (800c5bc <HAL_DMA_IRQHandler+0x6b4>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d01d      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a76      	ldr	r2, [pc, #472]	@ (800c5c0 <HAL_DMA_IRQHandler+0x6b8>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d018      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a74      	ldr	r2, [pc, #464]	@ (800c5c4 <HAL_DMA_IRQHandler+0x6bc>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d013      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a73      	ldr	r2, [pc, #460]	@ (800c5c8 <HAL_DMA_IRQHandler+0x6c0>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d00e      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a71      	ldr	r2, [pc, #452]	@ (800c5cc <HAL_DMA_IRQHandler+0x6c4>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d009      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a70      	ldr	r2, [pc, #448]	@ (800c5d0 <HAL_DMA_IRQHandler+0x6c8>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d004      	beq.n	800c41e <HAL_DMA_IRQHandler+0x516>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a6e      	ldr	r2, [pc, #440]	@ (800c5d4 <HAL_DMA_IRQHandler+0x6cc>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d10a      	bne.n	800c434 <HAL_DMA_IRQHandler+0x52c>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 0308 	and.w	r3, r3, #8
 800c428:	2b00      	cmp	r3, #0
 800c42a:	bf14      	ite	ne
 800c42c:	2301      	movne	r3, #1
 800c42e:	2300      	moveq	r3, #0
 800c430:	b2db      	uxtb	r3, r3
 800c432:	e009      	b.n	800c448 <HAL_DMA_IRQHandler+0x540>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 0304 	and.w	r3, r3, #4
 800c43e:	2b00      	cmp	r3, #0
 800c440:	bf14      	ite	ne
 800c442:	2301      	movne	r3, #1
 800c444:	2300      	moveq	r3, #0
 800c446:	b2db      	uxtb	r3, r3
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d03e      	beq.n	800c4ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c450:	f003 031f 	and.w	r3, r3, #31
 800c454:	2210      	movs	r2, #16
 800c456:	409a      	lsls	r2, r3
 800c458:	6a3b      	ldr	r3, [r7, #32]
 800c45a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c466:	2b00      	cmp	r3, #0
 800c468:	d018      	beq.n	800c49c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d108      	bne.n	800c48a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d024      	beq.n	800c4ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	4798      	blx	r3
 800c488:	e01f      	b.n	800c4ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d01b      	beq.n	800c4ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	4798      	blx	r3
 800c49a:	e016      	b.n	800c4ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d107      	bne.n	800c4ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f022 0208 	bic.w	r2, r2, #8
 800c4b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d003      	beq.n	800c4ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4ce:	f003 031f 	and.w	r3, r3, #31
 800c4d2:	2220      	movs	r2, #32
 800c4d4:	409a      	lsls	r2, r3
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	4013      	ands	r3, r2
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f000 8110 	beq.w	800c700 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a2c      	ldr	r2, [pc, #176]	@ (800c598 <HAL_DMA_IRQHandler+0x690>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d04a      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a2b      	ldr	r2, [pc, #172]	@ (800c59c <HAL_DMA_IRQHandler+0x694>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d045      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a29      	ldr	r2, [pc, #164]	@ (800c5a0 <HAL_DMA_IRQHandler+0x698>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d040      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a28      	ldr	r2, [pc, #160]	@ (800c5a4 <HAL_DMA_IRQHandler+0x69c>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d03b      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a26      	ldr	r2, [pc, #152]	@ (800c5a8 <HAL_DMA_IRQHandler+0x6a0>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d036      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a25      	ldr	r2, [pc, #148]	@ (800c5ac <HAL_DMA_IRQHandler+0x6a4>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d031      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a23      	ldr	r2, [pc, #140]	@ (800c5b0 <HAL_DMA_IRQHandler+0x6a8>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d02c      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a22      	ldr	r2, [pc, #136]	@ (800c5b4 <HAL_DMA_IRQHandler+0x6ac>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d027      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a20      	ldr	r2, [pc, #128]	@ (800c5b8 <HAL_DMA_IRQHandler+0x6b0>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d022      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a1f      	ldr	r2, [pc, #124]	@ (800c5bc <HAL_DMA_IRQHandler+0x6b4>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d01d      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a1d      	ldr	r2, [pc, #116]	@ (800c5c0 <HAL_DMA_IRQHandler+0x6b8>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d018      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4a1c      	ldr	r2, [pc, #112]	@ (800c5c4 <HAL_DMA_IRQHandler+0x6bc>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d013      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a1a      	ldr	r2, [pc, #104]	@ (800c5c8 <HAL_DMA_IRQHandler+0x6c0>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d00e      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a19      	ldr	r2, [pc, #100]	@ (800c5cc <HAL_DMA_IRQHandler+0x6c4>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d009      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a17      	ldr	r2, [pc, #92]	@ (800c5d0 <HAL_DMA_IRQHandler+0x6c8>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d004      	beq.n	800c580 <HAL_DMA_IRQHandler+0x678>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a16      	ldr	r2, [pc, #88]	@ (800c5d4 <HAL_DMA_IRQHandler+0x6cc>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d12b      	bne.n	800c5d8 <HAL_DMA_IRQHandler+0x6d0>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 0310 	and.w	r3, r3, #16
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	bf14      	ite	ne
 800c58e:	2301      	movne	r3, #1
 800c590:	2300      	moveq	r3, #0
 800c592:	b2db      	uxtb	r3, r3
 800c594:	e02a      	b.n	800c5ec <HAL_DMA_IRQHandler+0x6e4>
 800c596:	bf00      	nop
 800c598:	40020010 	.word	0x40020010
 800c59c:	40020028 	.word	0x40020028
 800c5a0:	40020040 	.word	0x40020040
 800c5a4:	40020058 	.word	0x40020058
 800c5a8:	40020070 	.word	0x40020070
 800c5ac:	40020088 	.word	0x40020088
 800c5b0:	400200a0 	.word	0x400200a0
 800c5b4:	400200b8 	.word	0x400200b8
 800c5b8:	40020410 	.word	0x40020410
 800c5bc:	40020428 	.word	0x40020428
 800c5c0:	40020440 	.word	0x40020440
 800c5c4:	40020458 	.word	0x40020458
 800c5c8:	40020470 	.word	0x40020470
 800c5cc:	40020488 	.word	0x40020488
 800c5d0:	400204a0 	.word	0x400204a0
 800c5d4:	400204b8 	.word	0x400204b8
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f003 0302 	and.w	r3, r3, #2
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	bf14      	ite	ne
 800c5e6:	2301      	movne	r3, #1
 800c5e8:	2300      	moveq	r3, #0
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f000 8087 	beq.w	800c700 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5f6:	f003 031f 	and.w	r3, r3, #31
 800c5fa:	2220      	movs	r2, #32
 800c5fc:	409a      	lsls	r2, r3
 800c5fe:	6a3b      	ldr	r3, [r7, #32]
 800c600:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b04      	cmp	r3, #4
 800c60c:	d139      	bne.n	800c682 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f022 0216 	bic.w	r2, r2, #22
 800c61c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	695a      	ldr	r2, [r3, #20]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c62c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c632:	2b00      	cmp	r3, #0
 800c634:	d103      	bne.n	800c63e <HAL_DMA_IRQHandler+0x736>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d007      	beq.n	800c64e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f022 0208 	bic.w	r2, r2, #8
 800c64c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c652:	f003 031f 	and.w	r3, r3, #31
 800c656:	223f      	movs	r2, #63	@ 0x3f
 800c658:	409a      	lsls	r2, r3
 800c65a:	6a3b      	ldr	r3, [r7, #32]
 800c65c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2201      	movs	r2, #1
 800c662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2200      	movs	r2, #0
 800c66a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c672:	2b00      	cmp	r3, #0
 800c674:	f000 834a 	beq.w	800cd0c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	4798      	blx	r3
          }
          return;
 800c680:	e344      	b.n	800cd0c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d018      	beq.n	800c6c2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d108      	bne.n	800c6b0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d02c      	beq.n	800c700 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	4798      	blx	r3
 800c6ae:	e027      	b.n	800c700 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d023      	beq.n	800c700 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	4798      	blx	r3
 800c6c0:	e01e      	b.n	800c700 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d10f      	bne.n	800c6f0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f022 0210 	bic.w	r2, r2, #16
 800c6de:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d003      	beq.n	800c700 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c704:	2b00      	cmp	r3, #0
 800c706:	f000 8306 	beq.w	800cd16 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c70e:	f003 0301 	and.w	r3, r3, #1
 800c712:	2b00      	cmp	r3, #0
 800c714:	f000 8088 	beq.w	800c828 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2204      	movs	r2, #4
 800c71c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a7a      	ldr	r2, [pc, #488]	@ (800c910 <HAL_DMA_IRQHandler+0xa08>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d04a      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a79      	ldr	r2, [pc, #484]	@ (800c914 <HAL_DMA_IRQHandler+0xa0c>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d045      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a77      	ldr	r2, [pc, #476]	@ (800c918 <HAL_DMA_IRQHandler+0xa10>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d040      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4a76      	ldr	r2, [pc, #472]	@ (800c91c <HAL_DMA_IRQHandler+0xa14>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d03b      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a74      	ldr	r2, [pc, #464]	@ (800c920 <HAL_DMA_IRQHandler+0xa18>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d036      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a73      	ldr	r2, [pc, #460]	@ (800c924 <HAL_DMA_IRQHandler+0xa1c>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d031      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a71      	ldr	r2, [pc, #452]	@ (800c928 <HAL_DMA_IRQHandler+0xa20>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d02c      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a70      	ldr	r2, [pc, #448]	@ (800c92c <HAL_DMA_IRQHandler+0xa24>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d027      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a6e      	ldr	r2, [pc, #440]	@ (800c930 <HAL_DMA_IRQHandler+0xa28>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d022      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a6d      	ldr	r2, [pc, #436]	@ (800c934 <HAL_DMA_IRQHandler+0xa2c>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d01d      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a6b      	ldr	r2, [pc, #428]	@ (800c938 <HAL_DMA_IRQHandler+0xa30>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d018      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a6a      	ldr	r2, [pc, #424]	@ (800c93c <HAL_DMA_IRQHandler+0xa34>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d013      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a68      	ldr	r2, [pc, #416]	@ (800c940 <HAL_DMA_IRQHandler+0xa38>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d00e      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a67      	ldr	r2, [pc, #412]	@ (800c944 <HAL_DMA_IRQHandler+0xa3c>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d009      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a65      	ldr	r2, [pc, #404]	@ (800c948 <HAL_DMA_IRQHandler+0xa40>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d004      	beq.n	800c7c0 <HAL_DMA_IRQHandler+0x8b8>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a64      	ldr	r2, [pc, #400]	@ (800c94c <HAL_DMA_IRQHandler+0xa44>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d108      	bne.n	800c7d2 <HAL_DMA_IRQHandler+0x8ca>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f022 0201 	bic.w	r2, r2, #1
 800c7ce:	601a      	str	r2, [r3, #0]
 800c7d0:	e007      	b.n	800c7e2 <HAL_DMA_IRQHandler+0x8da>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f022 0201 	bic.w	r2, r2, #1
 800c7e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	60fb      	str	r3, [r7, #12]
 800c7e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d307      	bcc.n	800c7fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f003 0301 	and.w	r3, r3, #1
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1f2      	bne.n	800c7e2 <HAL_DMA_IRQHandler+0x8da>
 800c7fc:	e000      	b.n	800c800 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800c7fe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f003 0301 	and.w	r3, r3, #1
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d004      	beq.n	800c818 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2203      	movs	r2, #3
 800c812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800c816:	e003      	b.n	800c820 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f000 8272 	beq.w	800cd16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	4798      	blx	r3
 800c83a:	e26c      	b.n	800cd16 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a43      	ldr	r2, [pc, #268]	@ (800c950 <HAL_DMA_IRQHandler+0xa48>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d022      	beq.n	800c88c <HAL_DMA_IRQHandler+0x984>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a42      	ldr	r2, [pc, #264]	@ (800c954 <HAL_DMA_IRQHandler+0xa4c>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d01d      	beq.n	800c88c <HAL_DMA_IRQHandler+0x984>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a40      	ldr	r2, [pc, #256]	@ (800c958 <HAL_DMA_IRQHandler+0xa50>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d018      	beq.n	800c88c <HAL_DMA_IRQHandler+0x984>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a3f      	ldr	r2, [pc, #252]	@ (800c95c <HAL_DMA_IRQHandler+0xa54>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d013      	beq.n	800c88c <HAL_DMA_IRQHandler+0x984>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a3d      	ldr	r2, [pc, #244]	@ (800c960 <HAL_DMA_IRQHandler+0xa58>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d00e      	beq.n	800c88c <HAL_DMA_IRQHandler+0x984>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a3c      	ldr	r2, [pc, #240]	@ (800c964 <HAL_DMA_IRQHandler+0xa5c>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d009      	beq.n	800c88c <HAL_DMA_IRQHandler+0x984>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a3a      	ldr	r2, [pc, #232]	@ (800c968 <HAL_DMA_IRQHandler+0xa60>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d004      	beq.n	800c88c <HAL_DMA_IRQHandler+0x984>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a39      	ldr	r2, [pc, #228]	@ (800c96c <HAL_DMA_IRQHandler+0xa64>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d101      	bne.n	800c890 <HAL_DMA_IRQHandler+0x988>
 800c88c:	2301      	movs	r3, #1
 800c88e:	e000      	b.n	800c892 <HAL_DMA_IRQHandler+0x98a>
 800c890:	2300      	movs	r3, #0
 800c892:	2b00      	cmp	r3, #0
 800c894:	f000 823f 	beq.w	800cd16 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8a4:	f003 031f 	and.w	r3, r3, #31
 800c8a8:	2204      	movs	r2, #4
 800c8aa:	409a      	lsls	r2, r3
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	4013      	ands	r3, r2
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f000 80cd 	beq.w	800ca50 <HAL_DMA_IRQHandler+0xb48>
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f000 80c7 	beq.w	800ca50 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8c6:	f003 031f 	and.w	r3, r3, #31
 800c8ca:	2204      	movs	r2, #4
 800c8cc:	409a      	lsls	r2, r3
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d049      	beq.n	800c970 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d109      	bne.n	800c8fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	f000 8210 	beq.w	800cd10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c8f8:	e20a      	b.n	800cd10 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f000 8206 	beq.w	800cd10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c90c:	e200      	b.n	800cd10 <HAL_DMA_IRQHandler+0xe08>
 800c90e:	bf00      	nop
 800c910:	40020010 	.word	0x40020010
 800c914:	40020028 	.word	0x40020028
 800c918:	40020040 	.word	0x40020040
 800c91c:	40020058 	.word	0x40020058
 800c920:	40020070 	.word	0x40020070
 800c924:	40020088 	.word	0x40020088
 800c928:	400200a0 	.word	0x400200a0
 800c92c:	400200b8 	.word	0x400200b8
 800c930:	40020410 	.word	0x40020410
 800c934:	40020428 	.word	0x40020428
 800c938:	40020440 	.word	0x40020440
 800c93c:	40020458 	.word	0x40020458
 800c940:	40020470 	.word	0x40020470
 800c944:	40020488 	.word	0x40020488
 800c948:	400204a0 	.word	0x400204a0
 800c94c:	400204b8 	.word	0x400204b8
 800c950:	58025408 	.word	0x58025408
 800c954:	5802541c 	.word	0x5802541c
 800c958:	58025430 	.word	0x58025430
 800c95c:	58025444 	.word	0x58025444
 800c960:	58025458 	.word	0x58025458
 800c964:	5802546c 	.word	0x5802546c
 800c968:	58025480 	.word	0x58025480
 800c96c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	f003 0320 	and.w	r3, r3, #32
 800c976:	2b00      	cmp	r3, #0
 800c978:	d160      	bne.n	800ca3c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a7f      	ldr	r2, [pc, #508]	@ (800cb7c <HAL_DMA_IRQHandler+0xc74>)
 800c980:	4293      	cmp	r3, r2
 800c982:	d04a      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a7d      	ldr	r2, [pc, #500]	@ (800cb80 <HAL_DMA_IRQHandler+0xc78>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d045      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a7c      	ldr	r2, [pc, #496]	@ (800cb84 <HAL_DMA_IRQHandler+0xc7c>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d040      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a7a      	ldr	r2, [pc, #488]	@ (800cb88 <HAL_DMA_IRQHandler+0xc80>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d03b      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a79      	ldr	r2, [pc, #484]	@ (800cb8c <HAL_DMA_IRQHandler+0xc84>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d036      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a77      	ldr	r2, [pc, #476]	@ (800cb90 <HAL_DMA_IRQHandler+0xc88>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d031      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a76      	ldr	r2, [pc, #472]	@ (800cb94 <HAL_DMA_IRQHandler+0xc8c>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d02c      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a74      	ldr	r2, [pc, #464]	@ (800cb98 <HAL_DMA_IRQHandler+0xc90>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d027      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a73      	ldr	r2, [pc, #460]	@ (800cb9c <HAL_DMA_IRQHandler+0xc94>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d022      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a71      	ldr	r2, [pc, #452]	@ (800cba0 <HAL_DMA_IRQHandler+0xc98>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d01d      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a70      	ldr	r2, [pc, #448]	@ (800cba4 <HAL_DMA_IRQHandler+0xc9c>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d018      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a6e      	ldr	r2, [pc, #440]	@ (800cba8 <HAL_DMA_IRQHandler+0xca0>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d013      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a6d      	ldr	r2, [pc, #436]	@ (800cbac <HAL_DMA_IRQHandler+0xca4>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d00e      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a6b      	ldr	r2, [pc, #428]	@ (800cbb0 <HAL_DMA_IRQHandler+0xca8>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d009      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a6a      	ldr	r2, [pc, #424]	@ (800cbb4 <HAL_DMA_IRQHandler+0xcac>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d004      	beq.n	800ca1a <HAL_DMA_IRQHandler+0xb12>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a68      	ldr	r2, [pc, #416]	@ (800cbb8 <HAL_DMA_IRQHandler+0xcb0>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d108      	bne.n	800ca2c <HAL_DMA_IRQHandler+0xb24>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f022 0208 	bic.w	r2, r2, #8
 800ca28:	601a      	str	r2, [r3, #0]
 800ca2a:	e007      	b.n	800ca3c <HAL_DMA_IRQHandler+0xb34>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f022 0204 	bic.w	r2, r2, #4
 800ca3a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f000 8165 	beq.w	800cd10 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ca4e:	e15f      	b.n	800cd10 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca54:	f003 031f 	and.w	r3, r3, #31
 800ca58:	2202      	movs	r2, #2
 800ca5a:	409a      	lsls	r2, r3
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	4013      	ands	r3, r2
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	f000 80c5 	beq.w	800cbf0 <HAL_DMA_IRQHandler+0xce8>
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	f003 0302 	and.w	r3, r3, #2
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 80bf 	beq.w	800cbf0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca76:	f003 031f 	and.w	r3, r3, #31
 800ca7a:	2202      	movs	r2, #2
 800ca7c:	409a      	lsls	r2, r3
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d018      	beq.n	800cabe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d109      	bne.n	800caaa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f000 813a 	beq.w	800cd14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800caa8:	e134      	b.n	800cd14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f000 8130 	beq.w	800cd14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cabc:	e12a      	b.n	800cd14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	f003 0320 	and.w	r3, r3, #32
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f040 8089 	bne.w	800cbdc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a2b      	ldr	r2, [pc, #172]	@ (800cb7c <HAL_DMA_IRQHandler+0xc74>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d04a      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a29      	ldr	r2, [pc, #164]	@ (800cb80 <HAL_DMA_IRQHandler+0xc78>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d045      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a28      	ldr	r2, [pc, #160]	@ (800cb84 <HAL_DMA_IRQHandler+0xc7c>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d040      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a26      	ldr	r2, [pc, #152]	@ (800cb88 <HAL_DMA_IRQHandler+0xc80>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d03b      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a25      	ldr	r2, [pc, #148]	@ (800cb8c <HAL_DMA_IRQHandler+0xc84>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d036      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a23      	ldr	r2, [pc, #140]	@ (800cb90 <HAL_DMA_IRQHandler+0xc88>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d031      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a22      	ldr	r2, [pc, #136]	@ (800cb94 <HAL_DMA_IRQHandler+0xc8c>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d02c      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a20      	ldr	r2, [pc, #128]	@ (800cb98 <HAL_DMA_IRQHandler+0xc90>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d027      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4a1f      	ldr	r2, [pc, #124]	@ (800cb9c <HAL_DMA_IRQHandler+0xc94>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d022      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a1d      	ldr	r2, [pc, #116]	@ (800cba0 <HAL_DMA_IRQHandler+0xc98>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d01d      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a1c      	ldr	r2, [pc, #112]	@ (800cba4 <HAL_DMA_IRQHandler+0xc9c>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d018      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a1a      	ldr	r2, [pc, #104]	@ (800cba8 <HAL_DMA_IRQHandler+0xca0>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d013      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a19      	ldr	r2, [pc, #100]	@ (800cbac <HAL_DMA_IRQHandler+0xca4>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d00e      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a17      	ldr	r2, [pc, #92]	@ (800cbb0 <HAL_DMA_IRQHandler+0xca8>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d009      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a16      	ldr	r2, [pc, #88]	@ (800cbb4 <HAL_DMA_IRQHandler+0xcac>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d004      	beq.n	800cb6a <HAL_DMA_IRQHandler+0xc62>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a14      	ldr	r2, [pc, #80]	@ (800cbb8 <HAL_DMA_IRQHandler+0xcb0>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d128      	bne.n	800cbbc <HAL_DMA_IRQHandler+0xcb4>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f022 0214 	bic.w	r2, r2, #20
 800cb78:	601a      	str	r2, [r3, #0]
 800cb7a:	e027      	b.n	800cbcc <HAL_DMA_IRQHandler+0xcc4>
 800cb7c:	40020010 	.word	0x40020010
 800cb80:	40020028 	.word	0x40020028
 800cb84:	40020040 	.word	0x40020040
 800cb88:	40020058 	.word	0x40020058
 800cb8c:	40020070 	.word	0x40020070
 800cb90:	40020088 	.word	0x40020088
 800cb94:	400200a0 	.word	0x400200a0
 800cb98:	400200b8 	.word	0x400200b8
 800cb9c:	40020410 	.word	0x40020410
 800cba0:	40020428 	.word	0x40020428
 800cba4:	40020440 	.word	0x40020440
 800cba8:	40020458 	.word	0x40020458
 800cbac:	40020470 	.word	0x40020470
 800cbb0:	40020488 	.word	0x40020488
 800cbb4:	400204a0 	.word	0x400204a0
 800cbb8:	400204b8 	.word	0x400204b8
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f022 020a 	bic.w	r2, r2, #10
 800cbca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	f000 8097 	beq.w	800cd14 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cbee:	e091      	b.n	800cd14 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbf4:	f003 031f 	and.w	r3, r3, #31
 800cbf8:	2208      	movs	r2, #8
 800cbfa:	409a      	lsls	r2, r3
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	4013      	ands	r3, r2
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f000 8088 	beq.w	800cd16 <HAL_DMA_IRQHandler+0xe0e>
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	f003 0308 	and.w	r3, r3, #8
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f000 8082 	beq.w	800cd16 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a41      	ldr	r2, [pc, #260]	@ (800cd1c <HAL_DMA_IRQHandler+0xe14>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d04a      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a3f      	ldr	r2, [pc, #252]	@ (800cd20 <HAL_DMA_IRQHandler+0xe18>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d045      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a3e      	ldr	r2, [pc, #248]	@ (800cd24 <HAL_DMA_IRQHandler+0xe1c>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d040      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a3c      	ldr	r2, [pc, #240]	@ (800cd28 <HAL_DMA_IRQHandler+0xe20>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d03b      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a3b      	ldr	r2, [pc, #236]	@ (800cd2c <HAL_DMA_IRQHandler+0xe24>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d036      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a39      	ldr	r2, [pc, #228]	@ (800cd30 <HAL_DMA_IRQHandler+0xe28>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d031      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a38      	ldr	r2, [pc, #224]	@ (800cd34 <HAL_DMA_IRQHandler+0xe2c>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d02c      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a36      	ldr	r2, [pc, #216]	@ (800cd38 <HAL_DMA_IRQHandler+0xe30>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d027      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a35      	ldr	r2, [pc, #212]	@ (800cd3c <HAL_DMA_IRQHandler+0xe34>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d022      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a33      	ldr	r2, [pc, #204]	@ (800cd40 <HAL_DMA_IRQHandler+0xe38>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d01d      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a32      	ldr	r2, [pc, #200]	@ (800cd44 <HAL_DMA_IRQHandler+0xe3c>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d018      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a30      	ldr	r2, [pc, #192]	@ (800cd48 <HAL_DMA_IRQHandler+0xe40>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d013      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a2f      	ldr	r2, [pc, #188]	@ (800cd4c <HAL_DMA_IRQHandler+0xe44>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d00e      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a2d      	ldr	r2, [pc, #180]	@ (800cd50 <HAL_DMA_IRQHandler+0xe48>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d009      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4a2c      	ldr	r2, [pc, #176]	@ (800cd54 <HAL_DMA_IRQHandler+0xe4c>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d004      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0xdaa>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a2a      	ldr	r2, [pc, #168]	@ (800cd58 <HAL_DMA_IRQHandler+0xe50>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d108      	bne.n	800ccc4 <HAL_DMA_IRQHandler+0xdbc>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f022 021c 	bic.w	r2, r2, #28
 800ccc0:	601a      	str	r2, [r3, #0]
 800ccc2:	e007      	b.n	800ccd4 <HAL_DMA_IRQHandler+0xdcc>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f022 020e 	bic.w	r2, r2, #14
 800ccd2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccd8:	f003 031f 	and.w	r3, r3, #31
 800ccdc:	2201      	movs	r2, #1
 800ccde:	409a      	lsls	r2, r3
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2201      	movs	r2, #1
 800cce8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2201      	movs	r2, #1
 800ccee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d009      	beq.n	800cd16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	4798      	blx	r3
 800cd0a:	e004      	b.n	800cd16 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800cd0c:	bf00      	nop
 800cd0e:	e002      	b.n	800cd16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cd10:	bf00      	nop
 800cd12:	e000      	b.n	800cd16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cd14:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800cd16:	3728      	adds	r7, #40	@ 0x28
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	40020010 	.word	0x40020010
 800cd20:	40020028 	.word	0x40020028
 800cd24:	40020040 	.word	0x40020040
 800cd28:	40020058 	.word	0x40020058
 800cd2c:	40020070 	.word	0x40020070
 800cd30:	40020088 	.word	0x40020088
 800cd34:	400200a0 	.word	0x400200a0
 800cd38:	400200b8 	.word	0x400200b8
 800cd3c:	40020410 	.word	0x40020410
 800cd40:	40020428 	.word	0x40020428
 800cd44:	40020440 	.word	0x40020440
 800cd48:	40020458 	.word	0x40020458
 800cd4c:	40020470 	.word	0x40020470
 800cd50:	40020488 	.word	0x40020488
 800cd54:	400204a0 	.word	0x400204a0
 800cd58:	400204b8 	.word	0x400204b8

0800cd5c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800cd6a:	b2db      	uxtb	r3, r3
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	370c      	adds	r7, #12
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b087      	sub	sp, #28
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	607a      	str	r2, [r7, #4]
 800cd9c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cda2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cda8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4a7f      	ldr	r2, [pc, #508]	@ (800cfac <DMA_SetConfig+0x21c>)
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	d072      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a7d      	ldr	r2, [pc, #500]	@ (800cfb0 <DMA_SetConfig+0x220>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d06d      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a7c      	ldr	r2, [pc, #496]	@ (800cfb4 <DMA_SetConfig+0x224>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d068      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a7a      	ldr	r2, [pc, #488]	@ (800cfb8 <DMA_SetConfig+0x228>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d063      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a79      	ldr	r2, [pc, #484]	@ (800cfbc <DMA_SetConfig+0x22c>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d05e      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a77      	ldr	r2, [pc, #476]	@ (800cfc0 <DMA_SetConfig+0x230>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d059      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a76      	ldr	r2, [pc, #472]	@ (800cfc4 <DMA_SetConfig+0x234>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d054      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a74      	ldr	r2, [pc, #464]	@ (800cfc8 <DMA_SetConfig+0x238>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d04f      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a73      	ldr	r2, [pc, #460]	@ (800cfcc <DMA_SetConfig+0x23c>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d04a      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a71      	ldr	r2, [pc, #452]	@ (800cfd0 <DMA_SetConfig+0x240>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d045      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a70      	ldr	r2, [pc, #448]	@ (800cfd4 <DMA_SetConfig+0x244>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d040      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a6e      	ldr	r2, [pc, #440]	@ (800cfd8 <DMA_SetConfig+0x248>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d03b      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a6d      	ldr	r2, [pc, #436]	@ (800cfdc <DMA_SetConfig+0x24c>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d036      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a6b      	ldr	r2, [pc, #428]	@ (800cfe0 <DMA_SetConfig+0x250>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d031      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a6a      	ldr	r2, [pc, #424]	@ (800cfe4 <DMA_SetConfig+0x254>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d02c      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a68      	ldr	r2, [pc, #416]	@ (800cfe8 <DMA_SetConfig+0x258>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d027      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a67      	ldr	r2, [pc, #412]	@ (800cfec <DMA_SetConfig+0x25c>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d022      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a65      	ldr	r2, [pc, #404]	@ (800cff0 <DMA_SetConfig+0x260>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d01d      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a64      	ldr	r2, [pc, #400]	@ (800cff4 <DMA_SetConfig+0x264>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d018      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a62      	ldr	r2, [pc, #392]	@ (800cff8 <DMA_SetConfig+0x268>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d013      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a61      	ldr	r2, [pc, #388]	@ (800cffc <DMA_SetConfig+0x26c>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d00e      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a5f      	ldr	r2, [pc, #380]	@ (800d000 <DMA_SetConfig+0x270>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d009      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a5e      	ldr	r2, [pc, #376]	@ (800d004 <DMA_SetConfig+0x274>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d004      	beq.n	800ce9a <DMA_SetConfig+0x10a>
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a5c      	ldr	r2, [pc, #368]	@ (800d008 <DMA_SetConfig+0x278>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d101      	bne.n	800ce9e <DMA_SetConfig+0x10e>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e000      	b.n	800cea0 <DMA_SetConfig+0x110>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00d      	beq.n	800cec0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ceac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d004      	beq.n	800cec0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ceba:	68fa      	ldr	r2, [r7, #12]
 800cebc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800cebe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a39      	ldr	r2, [pc, #228]	@ (800cfac <DMA_SetConfig+0x21c>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d04a      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a38      	ldr	r2, [pc, #224]	@ (800cfb0 <DMA_SetConfig+0x220>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d045      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a36      	ldr	r2, [pc, #216]	@ (800cfb4 <DMA_SetConfig+0x224>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d040      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a35      	ldr	r2, [pc, #212]	@ (800cfb8 <DMA_SetConfig+0x228>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d03b      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a33      	ldr	r2, [pc, #204]	@ (800cfbc <DMA_SetConfig+0x22c>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d036      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a32      	ldr	r2, [pc, #200]	@ (800cfc0 <DMA_SetConfig+0x230>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d031      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a30      	ldr	r2, [pc, #192]	@ (800cfc4 <DMA_SetConfig+0x234>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d02c      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a2f      	ldr	r2, [pc, #188]	@ (800cfc8 <DMA_SetConfig+0x238>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d027      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a2d      	ldr	r2, [pc, #180]	@ (800cfcc <DMA_SetConfig+0x23c>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d022      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a2c      	ldr	r2, [pc, #176]	@ (800cfd0 <DMA_SetConfig+0x240>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d01d      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a2a      	ldr	r2, [pc, #168]	@ (800cfd4 <DMA_SetConfig+0x244>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d018      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a29      	ldr	r2, [pc, #164]	@ (800cfd8 <DMA_SetConfig+0x248>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d013      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a27      	ldr	r2, [pc, #156]	@ (800cfdc <DMA_SetConfig+0x24c>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d00e      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a26      	ldr	r2, [pc, #152]	@ (800cfe0 <DMA_SetConfig+0x250>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d009      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a24      	ldr	r2, [pc, #144]	@ (800cfe4 <DMA_SetConfig+0x254>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d004      	beq.n	800cf60 <DMA_SetConfig+0x1d0>
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a23      	ldr	r2, [pc, #140]	@ (800cfe8 <DMA_SetConfig+0x258>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d101      	bne.n	800cf64 <DMA_SetConfig+0x1d4>
 800cf60:	2301      	movs	r3, #1
 800cf62:	e000      	b.n	800cf66 <DMA_SetConfig+0x1d6>
 800cf64:	2300      	movs	r3, #0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d059      	beq.n	800d01e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf6e:	f003 031f 	and.w	r3, r3, #31
 800cf72:	223f      	movs	r2, #63	@ 0x3f
 800cf74:	409a      	lsls	r2, r3
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800cf88:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	683a      	ldr	r2, [r7, #0]
 800cf90:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	689b      	ldr	r3, [r3, #8]
 800cf96:	2b40      	cmp	r3, #64	@ 0x40
 800cf98:	d138      	bne.n	800d00c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	68ba      	ldr	r2, [r7, #8]
 800cfa8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800cfaa:	e086      	b.n	800d0ba <DMA_SetConfig+0x32a>
 800cfac:	40020010 	.word	0x40020010
 800cfb0:	40020028 	.word	0x40020028
 800cfb4:	40020040 	.word	0x40020040
 800cfb8:	40020058 	.word	0x40020058
 800cfbc:	40020070 	.word	0x40020070
 800cfc0:	40020088 	.word	0x40020088
 800cfc4:	400200a0 	.word	0x400200a0
 800cfc8:	400200b8 	.word	0x400200b8
 800cfcc:	40020410 	.word	0x40020410
 800cfd0:	40020428 	.word	0x40020428
 800cfd4:	40020440 	.word	0x40020440
 800cfd8:	40020458 	.word	0x40020458
 800cfdc:	40020470 	.word	0x40020470
 800cfe0:	40020488 	.word	0x40020488
 800cfe4:	400204a0 	.word	0x400204a0
 800cfe8:	400204b8 	.word	0x400204b8
 800cfec:	58025408 	.word	0x58025408
 800cff0:	5802541c 	.word	0x5802541c
 800cff4:	58025430 	.word	0x58025430
 800cff8:	58025444 	.word	0x58025444
 800cffc:	58025458 	.word	0x58025458
 800d000:	5802546c 	.word	0x5802546c
 800d004:	58025480 	.word	0x58025480
 800d008:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68ba      	ldr	r2, [r7, #8]
 800d012:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	60da      	str	r2, [r3, #12]
}
 800d01c:	e04d      	b.n	800d0ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a29      	ldr	r2, [pc, #164]	@ (800d0c8 <DMA_SetConfig+0x338>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d022      	beq.n	800d06e <DMA_SetConfig+0x2de>
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a27      	ldr	r2, [pc, #156]	@ (800d0cc <DMA_SetConfig+0x33c>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d01d      	beq.n	800d06e <DMA_SetConfig+0x2de>
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a26      	ldr	r2, [pc, #152]	@ (800d0d0 <DMA_SetConfig+0x340>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d018      	beq.n	800d06e <DMA_SetConfig+0x2de>
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a24      	ldr	r2, [pc, #144]	@ (800d0d4 <DMA_SetConfig+0x344>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d013      	beq.n	800d06e <DMA_SetConfig+0x2de>
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4a23      	ldr	r2, [pc, #140]	@ (800d0d8 <DMA_SetConfig+0x348>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d00e      	beq.n	800d06e <DMA_SetConfig+0x2de>
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a21      	ldr	r2, [pc, #132]	@ (800d0dc <DMA_SetConfig+0x34c>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d009      	beq.n	800d06e <DMA_SetConfig+0x2de>
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a20      	ldr	r2, [pc, #128]	@ (800d0e0 <DMA_SetConfig+0x350>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d004      	beq.n	800d06e <DMA_SetConfig+0x2de>
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a1e      	ldr	r2, [pc, #120]	@ (800d0e4 <DMA_SetConfig+0x354>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d101      	bne.n	800d072 <DMA_SetConfig+0x2e2>
 800d06e:	2301      	movs	r3, #1
 800d070:	e000      	b.n	800d074 <DMA_SetConfig+0x2e4>
 800d072:	2300      	movs	r3, #0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d020      	beq.n	800d0ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d07c:	f003 031f 	and.w	r3, r3, #31
 800d080:	2201      	movs	r2, #1
 800d082:	409a      	lsls	r2, r3
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	683a      	ldr	r2, [r7, #0]
 800d08e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	2b40      	cmp	r3, #64	@ 0x40
 800d096:	d108      	bne.n	800d0aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	60da      	str	r2, [r3, #12]
}
 800d0a8:	e007      	b.n	800d0ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	68ba      	ldr	r2, [r7, #8]
 800d0b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	60da      	str	r2, [r3, #12]
}
 800d0ba:	bf00      	nop
 800d0bc:	371c      	adds	r7, #28
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	58025408 	.word	0x58025408
 800d0cc:	5802541c 	.word	0x5802541c
 800d0d0:	58025430 	.word	0x58025430
 800d0d4:	58025444 	.word	0x58025444
 800d0d8:	58025458 	.word	0x58025458
 800d0dc:	5802546c 	.word	0x5802546c
 800d0e0:	58025480 	.word	0x58025480
 800d0e4:	58025494 	.word	0x58025494

0800d0e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a42      	ldr	r2, [pc, #264]	@ (800d200 <DMA_CalcBaseAndBitshift+0x118>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d04a      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a41      	ldr	r2, [pc, #260]	@ (800d204 <DMA_CalcBaseAndBitshift+0x11c>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d045      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a3f      	ldr	r2, [pc, #252]	@ (800d208 <DMA_CalcBaseAndBitshift+0x120>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d040      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a3e      	ldr	r2, [pc, #248]	@ (800d20c <DMA_CalcBaseAndBitshift+0x124>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d03b      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a3c      	ldr	r2, [pc, #240]	@ (800d210 <DMA_CalcBaseAndBitshift+0x128>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d036      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a3b      	ldr	r2, [pc, #236]	@ (800d214 <DMA_CalcBaseAndBitshift+0x12c>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d031      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a39      	ldr	r2, [pc, #228]	@ (800d218 <DMA_CalcBaseAndBitshift+0x130>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d02c      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4a38      	ldr	r2, [pc, #224]	@ (800d21c <DMA_CalcBaseAndBitshift+0x134>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d027      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a36      	ldr	r2, [pc, #216]	@ (800d220 <DMA_CalcBaseAndBitshift+0x138>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d022      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a35      	ldr	r2, [pc, #212]	@ (800d224 <DMA_CalcBaseAndBitshift+0x13c>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d01d      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a33      	ldr	r2, [pc, #204]	@ (800d228 <DMA_CalcBaseAndBitshift+0x140>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d018      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4a32      	ldr	r2, [pc, #200]	@ (800d22c <DMA_CalcBaseAndBitshift+0x144>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d013      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a30      	ldr	r2, [pc, #192]	@ (800d230 <DMA_CalcBaseAndBitshift+0x148>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d00e      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a2f      	ldr	r2, [pc, #188]	@ (800d234 <DMA_CalcBaseAndBitshift+0x14c>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d009      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a2d      	ldr	r2, [pc, #180]	@ (800d238 <DMA_CalcBaseAndBitshift+0x150>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d004      	beq.n	800d190 <DMA_CalcBaseAndBitshift+0xa8>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a2c      	ldr	r2, [pc, #176]	@ (800d23c <DMA_CalcBaseAndBitshift+0x154>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d101      	bne.n	800d194 <DMA_CalcBaseAndBitshift+0xac>
 800d190:	2301      	movs	r3, #1
 800d192:	e000      	b.n	800d196 <DMA_CalcBaseAndBitshift+0xae>
 800d194:	2300      	movs	r3, #0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d024      	beq.n	800d1e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	3b10      	subs	r3, #16
 800d1a2:	4a27      	ldr	r2, [pc, #156]	@ (800d240 <DMA_CalcBaseAndBitshift+0x158>)
 800d1a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d1a8:	091b      	lsrs	r3, r3, #4
 800d1aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f003 0307 	and.w	r3, r3, #7
 800d1b2:	4a24      	ldr	r2, [pc, #144]	@ (800d244 <DMA_CalcBaseAndBitshift+0x15c>)
 800d1b4:	5cd3      	ldrb	r3, [r2, r3]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2b03      	cmp	r3, #3
 800d1c0:	d908      	bls.n	800d1d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	4b1f      	ldr	r3, [pc, #124]	@ (800d248 <DMA_CalcBaseAndBitshift+0x160>)
 800d1ca:	4013      	ands	r3, r2
 800d1cc:	1d1a      	adds	r2, r3, #4
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	659a      	str	r2, [r3, #88]	@ 0x58
 800d1d2:	e00d      	b.n	800d1f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	461a      	mov	r2, r3
 800d1da:	4b1b      	ldr	r3, [pc, #108]	@ (800d248 <DMA_CalcBaseAndBitshift+0x160>)
 800d1dc:	4013      	ands	r3, r2
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	6593      	str	r3, [r2, #88]	@ 0x58
 800d1e2:	e005      	b.n	800d1f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	40020010 	.word	0x40020010
 800d204:	40020028 	.word	0x40020028
 800d208:	40020040 	.word	0x40020040
 800d20c:	40020058 	.word	0x40020058
 800d210:	40020070 	.word	0x40020070
 800d214:	40020088 	.word	0x40020088
 800d218:	400200a0 	.word	0x400200a0
 800d21c:	400200b8 	.word	0x400200b8
 800d220:	40020410 	.word	0x40020410
 800d224:	40020428 	.word	0x40020428
 800d228:	40020440 	.word	0x40020440
 800d22c:	40020458 	.word	0x40020458
 800d230:	40020470 	.word	0x40020470
 800d234:	40020488 	.word	0x40020488
 800d238:	400204a0 	.word	0x400204a0
 800d23c:	400204b8 	.word	0x400204b8
 800d240:	aaaaaaab 	.word	0xaaaaaaab
 800d244:	0801e178 	.word	0x0801e178
 800d248:	fffffc00 	.word	0xfffffc00

0800d24c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b085      	sub	sp, #20
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d254:	2300      	movs	r3, #0
 800d256:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	699b      	ldr	r3, [r3, #24]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d120      	bne.n	800d2a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d264:	2b03      	cmp	r3, #3
 800d266:	d858      	bhi.n	800d31a <DMA_CheckFifoParam+0xce>
 800d268:	a201      	add	r2, pc, #4	@ (adr r2, 800d270 <DMA_CheckFifoParam+0x24>)
 800d26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26e:	bf00      	nop
 800d270:	0800d281 	.word	0x0800d281
 800d274:	0800d293 	.word	0x0800d293
 800d278:	0800d281 	.word	0x0800d281
 800d27c:	0800d31b 	.word	0x0800d31b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d284:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d048      	beq.n	800d31e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d290:	e045      	b.n	800d31e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d296:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d29a:	d142      	bne.n	800d322 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800d29c:	2301      	movs	r3, #1
 800d29e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d2a0:	e03f      	b.n	800d322 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	699b      	ldr	r3, [r3, #24]
 800d2a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2aa:	d123      	bne.n	800d2f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2b0:	2b03      	cmp	r3, #3
 800d2b2:	d838      	bhi.n	800d326 <DMA_CheckFifoParam+0xda>
 800d2b4:	a201      	add	r2, pc, #4	@ (adr r2, 800d2bc <DMA_CheckFifoParam+0x70>)
 800d2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ba:	bf00      	nop
 800d2bc:	0800d2cd 	.word	0x0800d2cd
 800d2c0:	0800d2d3 	.word	0x0800d2d3
 800d2c4:	0800d2cd 	.word	0x0800d2cd
 800d2c8:	0800d2e5 	.word	0x0800d2e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	73fb      	strb	r3, [r7, #15]
        break;
 800d2d0:	e030      	b.n	800d334 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d025      	beq.n	800d32a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d2e2:	e022      	b.n	800d32a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d2ec:	d11f      	bne.n	800d32e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d2f2:	e01c      	b.n	800d32e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2f8:	2b02      	cmp	r3, #2
 800d2fa:	d902      	bls.n	800d302 <DMA_CheckFifoParam+0xb6>
 800d2fc:	2b03      	cmp	r3, #3
 800d2fe:	d003      	beq.n	800d308 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800d300:	e018      	b.n	800d334 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800d302:	2301      	movs	r3, #1
 800d304:	73fb      	strb	r3, [r7, #15]
        break;
 800d306:	e015      	b.n	800d334 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d30c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00e      	beq.n	800d332 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800d314:	2301      	movs	r3, #1
 800d316:	73fb      	strb	r3, [r7, #15]
    break;
 800d318:	e00b      	b.n	800d332 <DMA_CheckFifoParam+0xe6>
        break;
 800d31a:	bf00      	nop
 800d31c:	e00a      	b.n	800d334 <DMA_CheckFifoParam+0xe8>
        break;
 800d31e:	bf00      	nop
 800d320:	e008      	b.n	800d334 <DMA_CheckFifoParam+0xe8>
        break;
 800d322:	bf00      	nop
 800d324:	e006      	b.n	800d334 <DMA_CheckFifoParam+0xe8>
        break;
 800d326:	bf00      	nop
 800d328:	e004      	b.n	800d334 <DMA_CheckFifoParam+0xe8>
        break;
 800d32a:	bf00      	nop
 800d32c:	e002      	b.n	800d334 <DMA_CheckFifoParam+0xe8>
        break;
 800d32e:	bf00      	nop
 800d330:	e000      	b.n	800d334 <DMA_CheckFifoParam+0xe8>
    break;
 800d332:	bf00      	nop
    }
  }

  return status;
 800d334:	7bfb      	ldrb	r3, [r7, #15]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3714      	adds	r7, #20
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop

0800d344 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a38      	ldr	r2, [pc, #224]	@ (800d438 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d022      	beq.n	800d3a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a36      	ldr	r2, [pc, #216]	@ (800d43c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d01d      	beq.n	800d3a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a35      	ldr	r2, [pc, #212]	@ (800d440 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d018      	beq.n	800d3a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4a33      	ldr	r2, [pc, #204]	@ (800d444 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d013      	beq.n	800d3a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a32      	ldr	r2, [pc, #200]	@ (800d448 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d00e      	beq.n	800d3a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a30      	ldr	r2, [pc, #192]	@ (800d44c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d009      	beq.n	800d3a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4a2f      	ldr	r2, [pc, #188]	@ (800d450 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d004      	beq.n	800d3a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a2d      	ldr	r2, [pc, #180]	@ (800d454 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d101      	bne.n	800d3a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e000      	b.n	800d3a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d01a      	beq.n	800d3e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	b2db      	uxtb	r3, r3
 800d3b2:	3b08      	subs	r3, #8
 800d3b4:	4a28      	ldr	r2, [pc, #160]	@ (800d458 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800d3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ba:	091b      	lsrs	r3, r3, #4
 800d3bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800d3be:	68fa      	ldr	r2, [r7, #12]
 800d3c0:	4b26      	ldr	r3, [pc, #152]	@ (800d45c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800d3c2:	4413      	add	r3, r2
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4a24      	ldr	r2, [pc, #144]	@ (800d460 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800d3d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f003 031f 	and.w	r3, r3, #31
 800d3d8:	2201      	movs	r2, #1
 800d3da:	409a      	lsls	r2, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800d3e0:	e024      	b.n	800d42c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	3b10      	subs	r3, #16
 800d3ea:	4a1e      	ldr	r2, [pc, #120]	@ (800d464 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800d3ec:	fba2 2303 	umull	r2, r3, r2, r3
 800d3f0:	091b      	lsrs	r3, r3, #4
 800d3f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	4a1c      	ldr	r2, [pc, #112]	@ (800d468 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d806      	bhi.n	800d40a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	4a1b      	ldr	r2, [pc, #108]	@ (800d46c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d902      	bls.n	800d40a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	3308      	adds	r3, #8
 800d408:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800d40a:	68fa      	ldr	r2, [r7, #12]
 800d40c:	4b18      	ldr	r3, [pc, #96]	@ (800d470 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800d40e:	4413      	add	r3, r2
 800d410:	009b      	lsls	r3, r3, #2
 800d412:	461a      	mov	r2, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	4a16      	ldr	r2, [pc, #88]	@ (800d474 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800d41c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f003 031f 	and.w	r3, r3, #31
 800d424:	2201      	movs	r2, #1
 800d426:	409a      	lsls	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d42c:	bf00      	nop
 800d42e:	3714      	adds	r7, #20
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr
 800d438:	58025408 	.word	0x58025408
 800d43c:	5802541c 	.word	0x5802541c
 800d440:	58025430 	.word	0x58025430
 800d444:	58025444 	.word	0x58025444
 800d448:	58025458 	.word	0x58025458
 800d44c:	5802546c 	.word	0x5802546c
 800d450:	58025480 	.word	0x58025480
 800d454:	58025494 	.word	0x58025494
 800d458:	cccccccd 	.word	0xcccccccd
 800d45c:	16009600 	.word	0x16009600
 800d460:	58025880 	.word	0x58025880
 800d464:	aaaaaaab 	.word	0xaaaaaaab
 800d468:	400204b8 	.word	0x400204b8
 800d46c:	4002040f 	.word	0x4002040f
 800d470:	10008200 	.word	0x10008200
 800d474:	40020880 	.word	0x40020880

0800d478 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	b2db      	uxtb	r3, r3
 800d486:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d04a      	beq.n	800d524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2b08      	cmp	r3, #8
 800d492:	d847      	bhi.n	800d524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a25      	ldr	r2, [pc, #148]	@ (800d530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d022      	beq.n	800d4e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a24      	ldr	r2, [pc, #144]	@ (800d534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d01d      	beq.n	800d4e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a22      	ldr	r2, [pc, #136]	@ (800d538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d018      	beq.n	800d4e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a21      	ldr	r2, [pc, #132]	@ (800d53c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d013      	beq.n	800d4e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a1f      	ldr	r2, [pc, #124]	@ (800d540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d00e      	beq.n	800d4e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a1e      	ldr	r2, [pc, #120]	@ (800d544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d009      	beq.n	800d4e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a1c      	ldr	r2, [pc, #112]	@ (800d548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d004      	beq.n	800d4e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a1b      	ldr	r2, [pc, #108]	@ (800d54c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d101      	bne.n	800d4e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e000      	b.n	800d4ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00a      	beq.n	800d504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	4b17      	ldr	r3, [pc, #92]	@ (800d550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800d4f2:	4413      	add	r3, r2
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4a15      	ldr	r2, [pc, #84]	@ (800d554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800d500:	671a      	str	r2, [r3, #112]	@ 0x70
 800d502:	e009      	b.n	800d518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	4b14      	ldr	r3, [pc, #80]	@ (800d558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800d508:	4413      	add	r3, r2
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	461a      	mov	r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	4a11      	ldr	r2, [pc, #68]	@ (800d55c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800d516:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	3b01      	subs	r3, #1
 800d51c:	2201      	movs	r2, #1
 800d51e:	409a      	lsls	r2, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800d524:	bf00      	nop
 800d526:	3714      	adds	r7, #20
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr
 800d530:	58025408 	.word	0x58025408
 800d534:	5802541c 	.word	0x5802541c
 800d538:	58025430 	.word	0x58025430
 800d53c:	58025444 	.word	0x58025444
 800d540:	58025458 	.word	0x58025458
 800d544:	5802546c 	.word	0x5802546c
 800d548:	58025480 	.word	0x58025480
 800d54c:	58025494 	.word	0x58025494
 800d550:	1600963f 	.word	0x1600963f
 800d554:	58025940 	.word	0x58025940
 800d558:	1000823f 	.word	0x1000823f
 800d55c:	40020940 	.word	0x40020940

0800d560 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800d560:	b480      	push	{r7}
 800d562:	b089      	sub	sp, #36	@ 0x24
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d56a:	2300      	movs	r3, #0
 800d56c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d56e:	4b86      	ldr	r3, [pc, #536]	@ (800d788 <HAL_GPIO_Init+0x228>)
 800d570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d572:	e18c      	b.n	800d88e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	2101      	movs	r1, #1
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	fa01 f303 	lsl.w	r3, r1, r3
 800d580:	4013      	ands	r3, r2
 800d582:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	2b00      	cmp	r3, #0
 800d588:	f000 817e 	beq.w	800d888 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	f003 0303 	and.w	r3, r3, #3
 800d594:	2b01      	cmp	r3, #1
 800d596:	d005      	beq.n	800d5a4 <HAL_GPIO_Init+0x44>
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	f003 0303 	and.w	r3, r3, #3
 800d5a0:	2b02      	cmp	r3, #2
 800d5a2:	d130      	bne.n	800d606 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	005b      	lsls	r3, r3, #1
 800d5ae:	2203      	movs	r2, #3
 800d5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5b4:	43db      	mvns	r3, r3
 800d5b6:	69ba      	ldr	r2, [r7, #24]
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	68da      	ldr	r2, [r3, #12]
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	005b      	lsls	r3, r3, #1
 800d5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d5c8:	69ba      	ldr	r2, [r7, #24]
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	69ba      	ldr	r2, [r7, #24]
 800d5d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d5da:	2201      	movs	r2, #1
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e2:	43db      	mvns	r3, r3
 800d5e4:	69ba      	ldr	r2, [r7, #24]
 800d5e6:	4013      	ands	r3, r2
 800d5e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	091b      	lsrs	r3, r3, #4
 800d5f0:	f003 0201 	and.w	r2, r3, #1
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5fa:	69ba      	ldr	r2, [r7, #24]
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	69ba      	ldr	r2, [r7, #24]
 800d604:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	f003 0303 	and.w	r3, r3, #3
 800d60e:	2b03      	cmp	r3, #3
 800d610:	d017      	beq.n	800d642 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	005b      	lsls	r3, r3, #1
 800d61c:	2203      	movs	r2, #3
 800d61e:	fa02 f303 	lsl.w	r3, r2, r3
 800d622:	43db      	mvns	r3, r3
 800d624:	69ba      	ldr	r2, [r7, #24]
 800d626:	4013      	ands	r3, r2
 800d628:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	689a      	ldr	r2, [r3, #8]
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	005b      	lsls	r3, r3, #1
 800d632:	fa02 f303 	lsl.w	r3, r2, r3
 800d636:	69ba      	ldr	r2, [r7, #24]
 800d638:	4313      	orrs	r3, r2
 800d63a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	69ba      	ldr	r2, [r7, #24]
 800d640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	f003 0303 	and.w	r3, r3, #3
 800d64a:	2b02      	cmp	r3, #2
 800d64c:	d123      	bne.n	800d696 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	08da      	lsrs	r2, r3, #3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	3208      	adds	r2, #8
 800d656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d65a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d65c:	69fb      	ldr	r3, [r7, #28]
 800d65e:	f003 0307 	and.w	r3, r3, #7
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	220f      	movs	r2, #15
 800d666:	fa02 f303 	lsl.w	r3, r2, r3
 800d66a:	43db      	mvns	r3, r3
 800d66c:	69ba      	ldr	r2, [r7, #24]
 800d66e:	4013      	ands	r3, r2
 800d670:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	691a      	ldr	r2, [r3, #16]
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	f003 0307 	and.w	r3, r3, #7
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	fa02 f303 	lsl.w	r3, r2, r3
 800d682:	69ba      	ldr	r2, [r7, #24]
 800d684:	4313      	orrs	r3, r2
 800d686:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	08da      	lsrs	r2, r3, #3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	3208      	adds	r2, #8
 800d690:	69b9      	ldr	r1, [r7, #24]
 800d692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d69c:	69fb      	ldr	r3, [r7, #28]
 800d69e:	005b      	lsls	r3, r3, #1
 800d6a0:	2203      	movs	r2, #3
 800d6a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d6a6:	43db      	mvns	r3, r3
 800d6a8:	69ba      	ldr	r2, [r7, #24]
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	f003 0203 	and.w	r2, r3, #3
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	005b      	lsls	r3, r3, #1
 800d6ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d6be:	69ba      	ldr	r2, [r7, #24]
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	69ba      	ldr	r2, [r7, #24]
 800d6c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f000 80d8 	beq.w	800d888 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d6d8:	4b2c      	ldr	r3, [pc, #176]	@ (800d78c <HAL_GPIO_Init+0x22c>)
 800d6da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d6de:	4a2b      	ldr	r2, [pc, #172]	@ (800d78c <HAL_GPIO_Init+0x22c>)
 800d6e0:	f043 0302 	orr.w	r3, r3, #2
 800d6e4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800d6e8:	4b28      	ldr	r3, [pc, #160]	@ (800d78c <HAL_GPIO_Init+0x22c>)
 800d6ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d6ee:	f003 0302 	and.w	r3, r3, #2
 800d6f2:	60fb      	str	r3, [r7, #12]
 800d6f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d6f6:	4a26      	ldr	r2, [pc, #152]	@ (800d790 <HAL_GPIO_Init+0x230>)
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	089b      	lsrs	r3, r3, #2
 800d6fc:	3302      	adds	r3, #2
 800d6fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	f003 0303 	and.w	r3, r3, #3
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	220f      	movs	r2, #15
 800d70e:	fa02 f303 	lsl.w	r3, r2, r3
 800d712:	43db      	mvns	r3, r3
 800d714:	69ba      	ldr	r2, [r7, #24]
 800d716:	4013      	ands	r3, r2
 800d718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4a1d      	ldr	r2, [pc, #116]	@ (800d794 <HAL_GPIO_Init+0x234>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d04a      	beq.n	800d7b8 <HAL_GPIO_Init+0x258>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	4a1c      	ldr	r2, [pc, #112]	@ (800d798 <HAL_GPIO_Init+0x238>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d02b      	beq.n	800d782 <HAL_GPIO_Init+0x222>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4a1b      	ldr	r2, [pc, #108]	@ (800d79c <HAL_GPIO_Init+0x23c>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d025      	beq.n	800d77e <HAL_GPIO_Init+0x21e>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4a1a      	ldr	r2, [pc, #104]	@ (800d7a0 <HAL_GPIO_Init+0x240>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d01f      	beq.n	800d77a <HAL_GPIO_Init+0x21a>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	4a19      	ldr	r2, [pc, #100]	@ (800d7a4 <HAL_GPIO_Init+0x244>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d019      	beq.n	800d776 <HAL_GPIO_Init+0x216>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	4a18      	ldr	r2, [pc, #96]	@ (800d7a8 <HAL_GPIO_Init+0x248>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d013      	beq.n	800d772 <HAL_GPIO_Init+0x212>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4a17      	ldr	r2, [pc, #92]	@ (800d7ac <HAL_GPIO_Init+0x24c>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d00d      	beq.n	800d76e <HAL_GPIO_Init+0x20e>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	4a16      	ldr	r2, [pc, #88]	@ (800d7b0 <HAL_GPIO_Init+0x250>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d007      	beq.n	800d76a <HAL_GPIO_Init+0x20a>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4a15      	ldr	r2, [pc, #84]	@ (800d7b4 <HAL_GPIO_Init+0x254>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d101      	bne.n	800d766 <HAL_GPIO_Init+0x206>
 800d762:	2309      	movs	r3, #9
 800d764:	e029      	b.n	800d7ba <HAL_GPIO_Init+0x25a>
 800d766:	230a      	movs	r3, #10
 800d768:	e027      	b.n	800d7ba <HAL_GPIO_Init+0x25a>
 800d76a:	2307      	movs	r3, #7
 800d76c:	e025      	b.n	800d7ba <HAL_GPIO_Init+0x25a>
 800d76e:	2306      	movs	r3, #6
 800d770:	e023      	b.n	800d7ba <HAL_GPIO_Init+0x25a>
 800d772:	2305      	movs	r3, #5
 800d774:	e021      	b.n	800d7ba <HAL_GPIO_Init+0x25a>
 800d776:	2304      	movs	r3, #4
 800d778:	e01f      	b.n	800d7ba <HAL_GPIO_Init+0x25a>
 800d77a:	2303      	movs	r3, #3
 800d77c:	e01d      	b.n	800d7ba <HAL_GPIO_Init+0x25a>
 800d77e:	2302      	movs	r3, #2
 800d780:	e01b      	b.n	800d7ba <HAL_GPIO_Init+0x25a>
 800d782:	2301      	movs	r3, #1
 800d784:	e019      	b.n	800d7ba <HAL_GPIO_Init+0x25a>
 800d786:	bf00      	nop
 800d788:	58000080 	.word	0x58000080
 800d78c:	58024400 	.word	0x58024400
 800d790:	58000400 	.word	0x58000400
 800d794:	58020000 	.word	0x58020000
 800d798:	58020400 	.word	0x58020400
 800d79c:	58020800 	.word	0x58020800
 800d7a0:	58020c00 	.word	0x58020c00
 800d7a4:	58021000 	.word	0x58021000
 800d7a8:	58021400 	.word	0x58021400
 800d7ac:	58021800 	.word	0x58021800
 800d7b0:	58021c00 	.word	0x58021c00
 800d7b4:	58022400 	.word	0x58022400
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	69fa      	ldr	r2, [r7, #28]
 800d7bc:	f002 0203 	and.w	r2, r2, #3
 800d7c0:	0092      	lsls	r2, r2, #2
 800d7c2:	4093      	lsls	r3, r2
 800d7c4:	69ba      	ldr	r2, [r7, #24]
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d7ca:	4938      	ldr	r1, [pc, #224]	@ (800d8ac <HAL_GPIO_Init+0x34c>)
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	089b      	lsrs	r3, r3, #2
 800d7d0:	3302      	adds	r3, #2
 800d7d2:	69ba      	ldr	r2, [r7, #24]
 800d7d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d7d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	43db      	mvns	r3, r3
 800d7e4:	69ba      	ldr	r2, [r7, #24]
 800d7e6:	4013      	ands	r3, r2
 800d7e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d003      	beq.n	800d7fe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800d7f6:	69ba      	ldr	r2, [r7, #24]
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800d7fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	43db      	mvns	r3, r3
 800d812:	69ba      	ldr	r2, [r7, #24]
 800d814:	4013      	ands	r3, r2
 800d816:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d820:	2b00      	cmp	r3, #0
 800d822:	d003      	beq.n	800d82c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800d824:	69ba      	ldr	r2, [r7, #24]
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	4313      	orrs	r3, r2
 800d82a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800d82c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	43db      	mvns	r3, r3
 800d83e:	69ba      	ldr	r2, [r7, #24]
 800d840:	4013      	ands	r3, r2
 800d842:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d003      	beq.n	800d858 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800d850:	69ba      	ldr	r2, [r7, #24]
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	4313      	orrs	r3, r2
 800d856:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	69ba      	ldr	r2, [r7, #24]
 800d85c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	43db      	mvns	r3, r3
 800d868:	69ba      	ldr	r2, [r7, #24]
 800d86a:	4013      	ands	r3, r2
 800d86c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d876:	2b00      	cmp	r3, #0
 800d878:	d003      	beq.n	800d882 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800d87a:	69ba      	ldr	r2, [r7, #24]
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	4313      	orrs	r3, r2
 800d880:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	69ba      	ldr	r2, [r7, #24]
 800d886:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	3301      	adds	r3, #1
 800d88c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	fa22 f303 	lsr.w	r3, r2, r3
 800d898:	2b00      	cmp	r3, #0
 800d89a:	f47f ae6b 	bne.w	800d574 <HAL_GPIO_Init+0x14>
  }
}
 800d89e:	bf00      	nop
 800d8a0:	bf00      	nop
 800d8a2:	3724      	adds	r7, #36	@ 0x24
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr
 800d8ac:	58000400 	.word	0x58000400

0800d8b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	691a      	ldr	r2, [r3, #16]
 800d8c0:	887b      	ldrh	r3, [r7, #2]
 800d8c2:	4013      	ands	r3, r2
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d002      	beq.n	800d8ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	73fb      	strb	r3, [r7, #15]
 800d8cc:	e001      	b.n	800d8d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3714      	adds	r7, #20
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	807b      	strh	r3, [r7, #2]
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d8f0:	787b      	ldrb	r3, [r7, #1]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d003      	beq.n	800d8fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d8f6:	887a      	ldrh	r2, [r7, #2]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800d8fc:	e003      	b.n	800d906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d8fe:	887b      	ldrh	r3, [r7, #2]
 800d900:	041a      	lsls	r2, r3, #16
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	619a      	str	r2, [r3, #24]
}
 800d906:	bf00      	nop
 800d908:	370c      	adds	r7, #12
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr

0800d912 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b082      	sub	sp, #8
 800d916:	af00      	add	r7, sp, #0
 800d918:	4603      	mov	r3, r0
 800d91a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800d91c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d920:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d924:	88fb      	ldrh	r3, [r7, #6]
 800d926:	4013      	ands	r3, r2
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d008      	beq.n	800d93e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d92c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d930:	88fb      	ldrh	r3, [r7, #6]
 800d932:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d936:	88fb      	ldrh	r3, [r7, #6]
 800d938:	4618      	mov	r0, r3
 800d93a:	f7f8 f981 	bl	8005c40 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800d93e:	bf00      	nop
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
	...

0800d948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d101      	bne.n	800d95a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d956:	2301      	movs	r3, #1
 800d958:	e08b      	b.n	800da72 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d960:	b2db      	uxtb	r3, r3
 800d962:	2b00      	cmp	r3, #0
 800d964:	d106      	bne.n	800d974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7f6 ffae 	bl	80048d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2224      	movs	r2, #36	@ 0x24
 800d978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f022 0201 	bic.w	r2, r2, #1
 800d98a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800d998:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	689a      	ldr	r2, [r3, #8]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d9a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d107      	bne.n	800d9c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	689a      	ldr	r2, [r3, #8]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d9be:	609a      	str	r2, [r3, #8]
 800d9c0:	e006      	b.n	800d9d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	689a      	ldr	r2, [r3, #8]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800d9ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	d108      	bne.n	800d9ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d9e6:	605a      	str	r2, [r3, #4]
 800d9e8:	e007      	b.n	800d9fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	685a      	ldr	r2, [r3, #4]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d9f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	6859      	ldr	r1, [r3, #4]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	4b1d      	ldr	r3, [pc, #116]	@ (800da7c <HAL_I2C_Init+0x134>)
 800da06:	430b      	orrs	r3, r1
 800da08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	68da      	ldr	r2, [r3, #12]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800da18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	691a      	ldr	r2, [r3, #16]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	695b      	ldr	r3, [r3, #20]
 800da22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	699b      	ldr	r3, [r3, #24]
 800da2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	430a      	orrs	r2, r1
 800da32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	69d9      	ldr	r1, [r3, #28]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6a1a      	ldr	r2, [r3, #32]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	430a      	orrs	r2, r1
 800da42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f042 0201 	orr.w	r2, r2, #1
 800da52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2200      	movs	r2, #0
 800da58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2220      	movs	r2, #32
 800da5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800da70:	2300      	movs	r3, #0
}
 800da72:	4618      	mov	r0, r3
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	02008000 	.word	0x02008000

0800da80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b088      	sub	sp, #32
 800da84:	af02      	add	r7, sp, #8
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	4608      	mov	r0, r1
 800da8a:	4611      	mov	r1, r2
 800da8c:	461a      	mov	r2, r3
 800da8e:	4603      	mov	r3, r0
 800da90:	817b      	strh	r3, [r7, #10]
 800da92:	460b      	mov	r3, r1
 800da94:	813b      	strh	r3, [r7, #8]
 800da96:	4613      	mov	r3, r2
 800da98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	2b20      	cmp	r3, #32
 800daa4:	f040 80f9 	bne.w	800dc9a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800daa8:	6a3b      	ldr	r3, [r7, #32]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d002      	beq.n	800dab4 <HAL_I2C_Mem_Write+0x34>
 800daae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d105      	bne.n	800dac0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800daba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	e0ed      	b.n	800dc9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d101      	bne.n	800dace <HAL_I2C_Mem_Write+0x4e>
 800daca:	2302      	movs	r3, #2
 800dacc:	e0e6      	b.n	800dc9c <HAL_I2C_Mem_Write+0x21c>
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2201      	movs	r2, #1
 800dad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dad6:	f7fa fdbb 	bl	8008650 <HAL_GetTick>
 800dada:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	9300      	str	r3, [sp, #0]
 800dae0:	2319      	movs	r3, #25
 800dae2:	2201      	movs	r2, #1
 800dae4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800dae8:	68f8      	ldr	r0, [r7, #12]
 800daea:	f002 f80e 	bl	800fb0a <I2C_WaitOnFlagUntilTimeout>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d001      	beq.n	800daf8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800daf4:	2301      	movs	r3, #1
 800daf6:	e0d1      	b.n	800dc9c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2221      	movs	r2, #33	@ 0x21
 800dafc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2240      	movs	r2, #64	@ 0x40
 800db04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2200      	movs	r2, #0
 800db0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6a3a      	ldr	r2, [r7, #32]
 800db12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800db18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2200      	movs	r2, #0
 800db1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800db20:	88f8      	ldrh	r0, [r7, #6]
 800db22:	893a      	ldrh	r2, [r7, #8]
 800db24:	8979      	ldrh	r1, [r7, #10]
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	9301      	str	r3, [sp, #4]
 800db2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	4603      	mov	r3, r0
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f001 f95b 	bl	800edec <I2C_RequestMemoryWrite>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d005      	beq.n	800db48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2200      	movs	r2, #0
 800db40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800db44:	2301      	movs	r3, #1
 800db46:	e0a9      	b.n	800dc9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	2bff      	cmp	r3, #255	@ 0xff
 800db50:	d90e      	bls.n	800db70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	22ff      	movs	r2, #255	@ 0xff
 800db56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	8979      	ldrh	r1, [r7, #10]
 800db60:	2300      	movs	r3, #0
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800db68:	68f8      	ldr	r0, [r7, #12]
 800db6a:	f002 f991 	bl	800fe90 <I2C_TransferConfig>
 800db6e:	e00f      	b.n	800db90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db74:	b29a      	uxth	r2, r3
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	8979      	ldrh	r1, [r7, #10]
 800db82:	2300      	movs	r3, #0
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800db8a:	68f8      	ldr	r0, [r7, #12]
 800db8c:	f002 f980 	bl	800fe90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f002 f811 	bl	800fbbc <I2C_WaitOnTXISFlagUntilTimeout>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800dba0:	2301      	movs	r3, #1
 800dba2:	e07b      	b.n	800dc9c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dba8:	781a      	ldrb	r2, [r3, #0]
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbb4:	1c5a      	adds	r2, r3, #1
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	b29a      	uxth	r2, r3
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d034      	beq.n	800dc48 <HAL_I2C_Mem_Write+0x1c8>
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d130      	bne.n	800dc48 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	9300      	str	r3, [sp, #0]
 800dbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbec:	2200      	movs	r2, #0
 800dbee:	2180      	movs	r1, #128	@ 0x80
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f001 ff8a 	bl	800fb0a <I2C_WaitOnFlagUntilTimeout>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d001      	beq.n	800dc00 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	e04d      	b.n	800dc9c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	2bff      	cmp	r3, #255	@ 0xff
 800dc08:	d90e      	bls.n	800dc28 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	22ff      	movs	r2, #255	@ 0xff
 800dc0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc14:	b2da      	uxtb	r2, r3
 800dc16:	8979      	ldrh	r1, [r7, #10]
 800dc18:	2300      	movs	r3, #0
 800dc1a:	9300      	str	r3, [sp, #0]
 800dc1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	f002 f935 	bl	800fe90 <I2C_TransferConfig>
 800dc26:	e00f      	b.n	800dc48 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc36:	b2da      	uxtb	r2, r3
 800dc38:	8979      	ldrh	r1, [r7, #10]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	9300      	str	r3, [sp, #0]
 800dc3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	f002 f924 	bl	800fe90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d19e      	bne.n	800db90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc52:	697a      	ldr	r2, [r7, #20]
 800dc54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f001 fff7 	bl	800fc4a <I2C_WaitOnSTOPFlagUntilTimeout>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	e01a      	b.n	800dc9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2220      	movs	r2, #32
 800dc6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	6859      	ldr	r1, [r3, #4]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	4b0a      	ldr	r3, [pc, #40]	@ (800dca4 <HAL_I2C_Mem_Write+0x224>)
 800dc7a:	400b      	ands	r3, r1
 800dc7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2220      	movs	r2, #32
 800dc82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800dc96:	2300      	movs	r3, #0
 800dc98:	e000      	b.n	800dc9c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800dc9a:	2302      	movs	r3, #2
  }
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3718      	adds	r7, #24
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	fe00e800 	.word	0xfe00e800

0800dca8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b088      	sub	sp, #32
 800dcac:	af02      	add	r7, sp, #8
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	4608      	mov	r0, r1
 800dcb2:	4611      	mov	r1, r2
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	817b      	strh	r3, [r7, #10]
 800dcba:	460b      	mov	r3, r1
 800dcbc:	813b      	strh	r3, [r7, #8]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	2b20      	cmp	r3, #32
 800dccc:	f040 80fd 	bne.w	800deca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800dcd0:	6a3b      	ldr	r3, [r7, #32]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d002      	beq.n	800dcdc <HAL_I2C_Mem_Read+0x34>
 800dcd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d105      	bne.n	800dce8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dce2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800dce4:	2301      	movs	r3, #1
 800dce6:	e0f1      	b.n	800decc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d101      	bne.n	800dcf6 <HAL_I2C_Mem_Read+0x4e>
 800dcf2:	2302      	movs	r3, #2
 800dcf4:	e0ea      	b.n	800decc <HAL_I2C_Mem_Read+0x224>
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dcfe:	f7fa fca7 	bl	8008650 <HAL_GetTick>
 800dd02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	9300      	str	r3, [sp, #0]
 800dd08:	2319      	movs	r3, #25
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f001 fefa 	bl	800fb0a <I2C_WaitOnFlagUntilTimeout>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d001      	beq.n	800dd20 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e0d5      	b.n	800decc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2222      	movs	r2, #34	@ 0x22
 800dd24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2240      	movs	r2, #64	@ 0x40
 800dd2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2200      	movs	r2, #0
 800dd34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	6a3a      	ldr	r2, [r7, #32]
 800dd3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dd40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2200      	movs	r2, #0
 800dd46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dd48:	88f8      	ldrh	r0, [r7, #6]
 800dd4a:	893a      	ldrh	r2, [r7, #8]
 800dd4c:	8979      	ldrh	r1, [r7, #10]
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	9301      	str	r3, [sp, #4]
 800dd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	4603      	mov	r3, r0
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f001 f89b 	bl	800ee94 <I2C_RequestMemoryRead>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d005      	beq.n	800dd70 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2200      	movs	r2, #0
 800dd68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	e0ad      	b.n	800decc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	2bff      	cmp	r3, #255	@ 0xff
 800dd78:	d90e      	bls.n	800dd98 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	22ff      	movs	r2, #255	@ 0xff
 800dd7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd84:	b2da      	uxtb	r2, r3
 800dd86:	8979      	ldrh	r1, [r7, #10]
 800dd88:	4b52      	ldr	r3, [pc, #328]	@ (800ded4 <HAL_I2C_Mem_Read+0x22c>)
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	f002 f87d 	bl	800fe90 <I2C_TransferConfig>
 800dd96:	e00f      	b.n	800ddb8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dda6:	b2da      	uxtb	r2, r3
 800dda8:	8979      	ldrh	r1, [r7, #10]
 800ddaa:	4b4a      	ldr	r3, [pc, #296]	@ (800ded4 <HAL_I2C_Mem_Read+0x22c>)
 800ddac:	9300      	str	r3, [sp, #0]
 800ddae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	f002 f86c 	bl	800fe90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	2104      	movs	r1, #4
 800ddc2:	68f8      	ldr	r0, [r7, #12]
 800ddc4:	f001 fea1 	bl	800fb0a <I2C_WaitOnFlagUntilTimeout>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d001      	beq.n	800ddd2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e07c      	b.n	800decc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dddc:	b2d2      	uxtb	r2, r2
 800ddde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dde4:	1c5a      	adds	r2, r3, #1
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	b29a      	uxth	r2, r3
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de08:	b29b      	uxth	r3, r3
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d034      	beq.n	800de78 <HAL_I2C_Mem_Read+0x1d0>
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de12:	2b00      	cmp	r3, #0
 800de14:	d130      	bne.n	800de78 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de1c:	2200      	movs	r2, #0
 800de1e:	2180      	movs	r1, #128	@ 0x80
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f001 fe72 	bl	800fb0a <I2C_WaitOnFlagUntilTimeout>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d001      	beq.n	800de30 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800de2c:	2301      	movs	r3, #1
 800de2e:	e04d      	b.n	800decc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de34:	b29b      	uxth	r3, r3
 800de36:	2bff      	cmp	r3, #255	@ 0xff
 800de38:	d90e      	bls.n	800de58 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	22ff      	movs	r2, #255	@ 0xff
 800de3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de44:	b2da      	uxtb	r2, r3
 800de46:	8979      	ldrh	r1, [r7, #10]
 800de48:	2300      	movs	r3, #0
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f002 f81d 	bl	800fe90 <I2C_TransferConfig>
 800de56:	e00f      	b.n	800de78 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de66:	b2da      	uxtb	r2, r3
 800de68:	8979      	ldrh	r1, [r7, #10]
 800de6a:	2300      	movs	r3, #0
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800de72:	68f8      	ldr	r0, [r7, #12]
 800de74:	f002 f80c 	bl	800fe90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d19a      	bne.n	800ddb8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800de82:	697a      	ldr	r2, [r7, #20]
 800de84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f001 fedf 	bl	800fc4a <I2C_WaitOnSTOPFlagUntilTimeout>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d001      	beq.n	800de96 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	e01a      	b.n	800decc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2220      	movs	r2, #32
 800de9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	6859      	ldr	r1, [r3, #4]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	4b0b      	ldr	r3, [pc, #44]	@ (800ded8 <HAL_I2C_Mem_Read+0x230>)
 800deaa:	400b      	ands	r3, r1
 800deac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2220      	movs	r2, #32
 800deb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2200      	movs	r2, #0
 800deba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2200      	movs	r2, #0
 800dec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800dec6:	2300      	movs	r3, #0
 800dec8:	e000      	b.n	800decc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800deca:	2302      	movs	r3, #2
  }
}
 800decc:	4618      	mov	r0, r3
 800dece:	3718      	adds	r7, #24
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	80002400 	.word	0x80002400
 800ded8:	fe00e800 	.word	0xfe00e800

0800dedc <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b086      	sub	sp, #24
 800dee0:	af02      	add	r7, sp, #8
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	4608      	mov	r0, r1
 800dee6:	4611      	mov	r1, r2
 800dee8:	461a      	mov	r2, r3
 800deea:	4603      	mov	r3, r0
 800deec:	817b      	strh	r3, [r7, #10]
 800deee:	460b      	mov	r3, r1
 800def0:	813b      	strh	r3, [r7, #8]
 800def2:	4613      	mov	r3, r2
 800def4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800defc:	b2db      	uxtb	r3, r3
 800defe:	2b20      	cmp	r3, #32
 800df00:	d16a      	bne.n	800dfd8 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <HAL_I2C_Mem_Write_IT+0x32>
 800df08:	8bbb      	ldrh	r3, [r7, #28]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d105      	bne.n	800df1a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df14:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800df16:	2301      	movs	r3, #1
 800df18:	e05f      	b.n	800dfda <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	699b      	ldr	r3, [r3, #24]
 800df20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800df24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800df28:	d101      	bne.n	800df2e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800df2a:	2302      	movs	r3, #2
 800df2c:	e055      	b.n	800dfda <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800df34:	2b01      	cmp	r3, #1
 800df36:	d101      	bne.n	800df3c <HAL_I2C_Mem_Write_IT+0x60>
 800df38:	2302      	movs	r3, #2
 800df3a:	e04e      	b.n	800dfda <HAL_I2C_Mem_Write_IT+0xfe>
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2201      	movs	r2, #1
 800df40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2221      	movs	r2, #33	@ 0x21
 800df48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2240      	movs	r2, #64	@ 0x40
 800df50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2200      	movs	r2, #0
 800df58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2200      	movs	r2, #0
 800df5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	69ba      	ldr	r2, [r7, #24]
 800df64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	8bba      	ldrh	r2, [r7, #28]
 800df6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	4a1d      	ldr	r2, [pc, #116]	@ (800dfe4 <HAL_I2C_Mem_Write_IT+0x108>)
 800df70:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	4a1c      	ldr	r2, [pc, #112]	@ (800dfe8 <HAL_I2C_Mem_Write_IT+0x10c>)
 800df76:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800df78:	897a      	ldrh	r2, [r7, #10]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800df7e:	88fb      	ldrh	r3, [r7, #6]
 800df80:	2b01      	cmp	r3, #1
 800df82:	d109      	bne.n	800df98 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800df84:	893b      	ldrh	r3, [r7, #8]
 800df86:	b2da      	uxtb	r2, r3
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	f04f 32ff 	mov.w	r2, #4294967295
 800df94:	651a      	str	r2, [r3, #80]	@ 0x50
 800df96:	e00b      	b.n	800dfb0 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800df98:	893b      	ldrh	r3, [r7, #8]
 800df9a:	0a1b      	lsrs	r3, r3, #8
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	b2da      	uxtb	r2, r3
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800dfa6:	893b      	ldrh	r3, [r7, #8]
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	461a      	mov	r2, r3
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800dfb0:	88fb      	ldrh	r3, [r7, #6]
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	8979      	ldrh	r1, [r7, #10]
 800dfb6:	4b0d      	ldr	r3, [pc, #52]	@ (800dfec <HAL_I2C_Mem_Write_IT+0x110>)
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f001 ff66 	bl	800fe90 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dfcc:	2101      	movs	r1, #1
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f001 ff90 	bl	800fef4 <I2C_Enable_IRQ>

    return HAL_OK;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	e000      	b.n	800dfda <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800dfd8:	2302      	movs	r3, #2
  }
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	ffff0000 	.word	0xffff0000
 800dfe8:	0800e1d9 	.word	0x0800e1d9
 800dfec:	80002000 	.word	0x80002000

0800dff0 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af02      	add	r7, sp, #8
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	4608      	mov	r0, r1
 800dffa:	4611      	mov	r1, r2
 800dffc:	461a      	mov	r2, r3
 800dffe:	4603      	mov	r3, r0
 800e000:	817b      	strh	r3, [r7, #10]
 800e002:	460b      	mov	r3, r1
 800e004:	813b      	strh	r3, [r7, #8]
 800e006:	4613      	mov	r3, r2
 800e008:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b20      	cmp	r3, #32
 800e014:	d166      	bne.n	800e0e4 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d002      	beq.n	800e022 <HAL_I2C_Mem_Read_IT+0x32>
 800e01c:	8bbb      	ldrh	r3, [r7, #28]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d105      	bne.n	800e02e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e028:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e02a:	2301      	movs	r3, #1
 800e02c:	e05b      	b.n	800e0e6 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	699b      	ldr	r3, [r3, #24]
 800e034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e03c:	d101      	bne.n	800e042 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800e03e:	2302      	movs	r3, #2
 800e040:	e051      	b.n	800e0e6 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d101      	bne.n	800e050 <HAL_I2C_Mem_Read_IT+0x60>
 800e04c:	2302      	movs	r3, #2
 800e04e:	e04a      	b.n	800e0e6 <HAL_I2C_Mem_Read_IT+0xf6>
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2201      	movs	r2, #1
 800e054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2222      	movs	r2, #34	@ 0x22
 800e05c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2240      	movs	r2, #64	@ 0x40
 800e064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2200      	movs	r2, #0
 800e06c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	69ba      	ldr	r2, [r7, #24]
 800e072:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	8bba      	ldrh	r2, [r7, #28]
 800e078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	4a1c      	ldr	r2, [pc, #112]	@ (800e0f0 <HAL_I2C_Mem_Read_IT+0x100>)
 800e07e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	4a1c      	ldr	r2, [pc, #112]	@ (800e0f4 <HAL_I2C_Mem_Read_IT+0x104>)
 800e084:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800e086:	897a      	ldrh	r2, [r7, #10]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e08c:	88fb      	ldrh	r3, [r7, #6]
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d109      	bne.n	800e0a6 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e092:	893b      	ldrh	r3, [r7, #8]
 800e094:	b2da      	uxtb	r2, r3
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f04f 32ff 	mov.w	r2, #4294967295
 800e0a2:	651a      	str	r2, [r3, #80]	@ 0x50
 800e0a4:	e00b      	b.n	800e0be <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e0a6:	893b      	ldrh	r3, [r7, #8]
 800e0a8:	0a1b      	lsrs	r3, r3, #8
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800e0b4:	893b      	ldrh	r3, [r7, #8]
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e0be:	88fb      	ldrh	r3, [r7, #6]
 800e0c0:	b2da      	uxtb	r2, r3
 800e0c2:	8979      	ldrh	r1, [r7, #10]
 800e0c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e0f8 <HAL_I2C_Mem_Read_IT+0x108>)
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f001 fee0 	bl	800fe90 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e0d8:	2101      	movs	r1, #1
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f001 ff0a 	bl	800fef4 <I2C_Enable_IRQ>

    return HAL_OK;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	e000      	b.n	800e0e6 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800e0e4:	2302      	movs	r3, #2
  }
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	ffff0000 	.word	0xffff0000
 800e0f4:	0800e1d9 	.word	0x0800e1d9
 800e0f8:	80002000 	.word	0x80002000

0800e0fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	699b      	ldr	r3, [r3, #24]
 800e10a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d005      	beq.n	800e128 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e120:	68ba      	ldr	r2, [r7, #8]
 800e122:	68f9      	ldr	r1, [r7, #12]
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	4798      	blx	r3
  }
}
 800e128:	bf00      	nop
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800e138:	bf00      	nop
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr

0800e144 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800e14c:	bf00      	nop
 800e14e:	370c      	adds	r7, #12
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800e160:	bf00      	nop
 800e162:	370c      	adds	r7, #12
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr

0800e16c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800e174:	bf00      	nop
 800e176:	370c      	adds	r7, #12
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	460b      	mov	r3, r1
 800e18a:	70fb      	strb	r3, [r7, #3]
 800e18c:	4613      	mov	r3, r2
 800e18e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800e190:	bf00      	nop
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800e1a4:	bf00      	nop
 800e1a6:	370c      	adds	r7, #12
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b083      	sub	sp, #12
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800e1b8:	bf00      	nop
 800e1ba:	370c      	adds	r7, #12
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800e1cc:	bf00      	nop
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b088      	sub	sp, #32
 800e1dc:	af02      	add	r7, sp, #8
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800e1e4:	4b8d      	ldr	r3, [pc, #564]	@ (800e41c <I2C_Mem_ISR_IT+0x244>)
 800e1e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d101      	bne.n	800e1fa <I2C_Mem_ISR_IT+0x22>
 800e1f6:	2302      	movs	r3, #2
 800e1f8:	e10c      	b.n	800e414 <I2C_Mem_ISR_IT+0x23c>
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	f003 0310 	and.w	r3, r3, #16
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d012      	beq.n	800e232 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00d      	beq.n	800e232 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2210      	movs	r2, #16
 800e21c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e222:	f043 0204 	orr.w	r2, r3, #4
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f001 fc2b 	bl	800fa86 <I2C_Flush_TXDR>
 800e230:	e0dd      	b.n	800e3ee <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	f003 0304 	and.w	r3, r3, #4
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d022      	beq.n	800e282 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e242:	2b00      	cmp	r3, #0
 800e244:	d01d      	beq.n	800e282 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	f023 0304 	bic.w	r3, r3, #4
 800e24c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e258:	b2d2      	uxtb	r2, r2
 800e25a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e260:	1c5a      	adds	r2, r3, #1
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e26a:	3b01      	subs	r3, #1
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e276:	b29b      	uxth	r3, r3
 800e278:	3b01      	subs	r3, #1
 800e27a:	b29a      	uxth	r2, r3
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e280:	e0b5      	b.n	800e3ee <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	f003 0302 	and.w	r3, r3, #2
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d02c      	beq.n	800e2e6 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e292:	2b00      	cmp	r3, #0
 800e294:	d027      	beq.n	800e2e6 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e29e:	d118      	bne.n	800e2d2 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2a4:	781a      	ldrb	r2, [r3, #0]
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2b0:	1c5a      	adds	r2, r3, #1
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e2ba:	3b01      	subs	r3, #1
 800e2bc:	b29a      	uxth	r2, r3
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	b29a      	uxth	r2, r3
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800e2d0:	e08d      	b.n	800e3ee <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	68fa      	ldr	r2, [r7, #12]
 800e2d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e2da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800e2e4:	e083      	b.n	800e3ee <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d03c      	beq.n	800e36a <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d037      	beq.n	800e36a <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	2b00      	cmp	r3, #0
 800e302:	d02c      	beq.n	800e35e <I2C_Mem_ISR_IT+0x186>
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d128      	bne.n	800e35e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e310:	b29b      	uxth	r3, r3
 800e312:	2bff      	cmp	r3, #255	@ 0xff
 800e314:	d910      	bls.n	800e338 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	22ff      	movs	r2, #255	@ 0xff
 800e31a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e320:	b299      	uxth	r1, r3
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e326:	b2da      	uxtb	r2, r3
 800e328:	2300      	movs	r3, #0
 800e32a:	9300      	str	r3, [sp, #0]
 800e32c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f001 fdad 	bl	800fe90 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e336:	e017      	b.n	800e368 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e346:	b299      	uxth	r1, r3
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e34c:	b2da      	uxtb	r2, r3
 800e34e:	2300      	movs	r3, #0
 800e350:	9300      	str	r3, [sp, #0]
 800e352:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e356:	68f8      	ldr	r0, [r7, #12]
 800e358:	f001 fd9a 	bl	800fe90 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e35c:	e004      	b.n	800e368 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e35e:	2140      	movs	r1, #64	@ 0x40
 800e360:	68f8      	ldr	r0, [r7, #12]
 800e362:	f001 fa79 	bl	800f858 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e366:	e042      	b.n	800e3ee <I2C_Mem_ISR_IT+0x216>
 800e368:	e041      	b.n	800e3ee <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e370:	2b00      	cmp	r3, #0
 800e372:	d03c      	beq.n	800e3ee <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d037      	beq.n	800e3ee <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e37e:	2101      	movs	r1, #1
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f001 fe3b 	bl	800fffc <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e386:	2102      	movs	r1, #2
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f001 fdb3 	bl	800fef4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e394:	b2db      	uxtb	r3, r3
 800e396:	2b22      	cmp	r3, #34	@ 0x22
 800e398:	d101      	bne.n	800e39e <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800e39a:	4b21      	ldr	r3, [pc, #132]	@ (800e420 <I2C_Mem_ISR_IT+0x248>)
 800e39c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	2bff      	cmp	r3, #255	@ 0xff
 800e3a6:	d910      	bls.n	800e3ca <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	22ff      	movs	r2, #255	@ 0xff
 800e3ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3b2:	b299      	uxth	r1, r3
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3b8:	b2da      	uxtb	r2, r3
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	9300      	str	r3, [sp, #0]
 800e3be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f001 fd64 	bl	800fe90 <I2C_TransferConfig>
 800e3c8:	e011      	b.n	800e3ee <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3d8:	b299      	uxth	r1, r3
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3de:	b2da      	uxtb	r2, r3
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	9300      	str	r3, [sp, #0]
 800e3e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f001 fd51 	bl	800fe90 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	f003 0320 	and.w	r3, r3, #32
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d008      	beq.n	800e40a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d003      	beq.n	800e40a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800e402:	6939      	ldr	r1, [r7, #16]
 800e404:	68f8      	ldr	r0, [r7, #12]
 800e406:	f000 feb7 	bl	800f178 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2200      	movs	r2, #0
 800e40e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e412:	2300      	movs	r3, #0
}
 800e414:	4618      	mov	r0, r3
 800e416:	3718      	adds	r7, #24
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	80002000 	.word	0x80002000
 800e420:	80002400 	.word	0x80002400

0800e424 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b086      	sub	sp, #24
 800e428:	af00      	add	r7, sp, #0
 800e42a:	60f8      	str	r0, [r7, #12]
 800e42c:	60b9      	str	r1, [r7, #8]
 800e42e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e434:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e440:	2b01      	cmp	r3, #1
 800e442:	d101      	bne.n	800e448 <I2C_Slave_ISR_IT+0x24>
 800e444:	2302      	movs	r3, #2
 800e446:	e0e2      	b.n	800e60e <I2C_Slave_ISR_IT+0x1ea>
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2201      	movs	r2, #1
 800e44c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	f003 0320 	and.w	r3, r3, #32
 800e456:	2b00      	cmp	r3, #0
 800e458:	d009      	beq.n	800e46e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e460:	2b00      	cmp	r3, #0
 800e462:	d004      	beq.n	800e46e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800e464:	6939      	ldr	r1, [r7, #16]
 800e466:	68f8      	ldr	r0, [r7, #12]
 800e468:	f000 ff4e 	bl	800f308 <I2C_ITSlaveCplt>
 800e46c:	e0ca      	b.n	800e604 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	f003 0310 	and.w	r3, r3, #16
 800e474:	2b00      	cmp	r3, #0
 800e476:	d04b      	beq.n	800e510 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d046      	beq.n	800e510 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e486:	b29b      	uxth	r3, r3
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d128      	bne.n	800e4de <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e492:	b2db      	uxtb	r3, r3
 800e494:	2b28      	cmp	r3, #40	@ 0x28
 800e496:	d108      	bne.n	800e4aa <I2C_Slave_ISR_IT+0x86>
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e49e:	d104      	bne.n	800e4aa <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800e4a0:	6939      	ldr	r1, [r7, #16]
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f001 f984 	bl	800f7b0 <I2C_ITListenCplt>
 800e4a8:	e031      	b.n	800e50e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	2b29      	cmp	r3, #41	@ 0x29
 800e4b4:	d10e      	bne.n	800e4d4 <I2C_Slave_ISR_IT+0xb0>
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e4bc:	d00a      	beq.n	800e4d4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2210      	movs	r2, #16
 800e4c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800e4c6:	68f8      	ldr	r0, [r7, #12]
 800e4c8:	f001 fadd 	bl	800fa86 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e4cc:	68f8      	ldr	r0, [r7, #12]
 800e4ce:	f000 fdf6 	bl	800f0be <I2C_ITSlaveSeqCplt>
 800e4d2:	e01c      	b.n	800e50e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2210      	movs	r2, #16
 800e4da:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800e4dc:	e08f      	b.n	800e5fe <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2210      	movs	r2, #16
 800e4e4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4ea:	f043 0204 	orr.w	r2, r3, #4
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d003      	beq.n	800e500 <I2C_Slave_ISR_IT+0xdc>
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e4fe:	d17e      	bne.n	800e5fe <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e504:	4619      	mov	r1, r3
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f001 f9a6 	bl	800f858 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800e50c:	e077      	b.n	800e5fe <I2C_Slave_ISR_IT+0x1da>
 800e50e:	e076      	b.n	800e5fe <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	f003 0304 	and.w	r3, r3, #4
 800e516:	2b00      	cmp	r3, #0
 800e518:	d02f      	beq.n	800e57a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e520:	2b00      	cmp	r3, #0
 800e522:	d02a      	beq.n	800e57a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e528:	b29b      	uxth	r3, r3
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d018      	beq.n	800e560 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e538:	b2d2      	uxtb	r2, r2
 800e53a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e540:	1c5a      	adds	r2, r3, #1
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e54a:	3b01      	subs	r3, #1
 800e54c:	b29a      	uxth	r2, r3
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e556:	b29b      	uxth	r3, r3
 800e558:	3b01      	subs	r3, #1
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e564:	b29b      	uxth	r3, r3
 800e566:	2b00      	cmp	r3, #0
 800e568:	d14b      	bne.n	800e602 <I2C_Slave_ISR_IT+0x1de>
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e570:	d047      	beq.n	800e602 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f000 fda3 	bl	800f0be <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800e578:	e043      	b.n	800e602 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	f003 0308 	and.w	r3, r3, #8
 800e580:	2b00      	cmp	r3, #0
 800e582:	d009      	beq.n	800e598 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d004      	beq.n	800e598 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800e58e:	6939      	ldr	r1, [r7, #16]
 800e590:	68f8      	ldr	r0, [r7, #12]
 800e592:	f000 fcd3 	bl	800ef3c <I2C_ITAddrCplt>
 800e596:	e035      	b.n	800e604 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	f003 0302 	and.w	r3, r3, #2
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d030      	beq.n	800e604 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d02b      	beq.n	800e604 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d018      	beq.n	800e5e8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5ba:	781a      	ldrb	r2, [r3, #0]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5c6:	1c5a      	adds	r2, r3, #1
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	3b01      	subs	r3, #1
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e5e6:	e00d      	b.n	800e604 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e5ee:	d002      	beq.n	800e5f6 <I2C_Slave_ISR_IT+0x1d2>
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d106      	bne.n	800e604 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e5f6:	68f8      	ldr	r0, [r7, #12]
 800e5f8:	f000 fd61 	bl	800f0be <I2C_ITSlaveSeqCplt>
 800e5fc:	e002      	b.n	800e604 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800e5fe:	bf00      	nop
 800e600:	e000      	b.n	800e604 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800e602:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2200      	movs	r2, #0
 800e608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e60c:	2300      	movs	r3, #0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3718      	adds	r7, #24
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}

0800e616 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800e616:	b580      	push	{r7, lr}
 800e618:	b088      	sub	sp, #32
 800e61a:	af02      	add	r7, sp, #8
 800e61c:	60f8      	str	r0, [r7, #12]
 800e61e:	60b9      	str	r1, [r7, #8]
 800e620:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d101      	bne.n	800e630 <I2C_Master_ISR_DMA+0x1a>
 800e62c:	2302      	movs	r3, #2
 800e62e:	e0d9      	b.n	800e7e4 <I2C_Master_ISR_DMA+0x1ce>
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2201      	movs	r2, #1
 800e634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	f003 0310 	and.w	r3, r3, #16
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d016      	beq.n	800e670 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d011      	beq.n	800e670 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2210      	movs	r2, #16
 800e652:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e658:	f043 0204 	orr.w	r2, r3, #4
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e660:	2120      	movs	r1, #32
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f001 fc46 	bl	800fef4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f001 fa0c 	bl	800fa86 <I2C_Flush_TXDR>
 800e66e:	e0b4      	b.n	800e7da <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e676:	2b00      	cmp	r3, #0
 800e678:	d071      	beq.n	800e75e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e680:	2b00      	cmp	r3, #0
 800e682:	d06c      	beq.n	800e75e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e692:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e698:	b29b      	uxth	r3, r3
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d04e      	beq.n	800e73c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6aa:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	2bff      	cmp	r3, #255	@ 0xff
 800e6b4:	d906      	bls.n	800e6c4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	22ff      	movs	r2, #255	@ 0xff
 800e6ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800e6bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e6c0:	617b      	str	r3, [r7, #20]
 800e6c2:	e010      	b.n	800e6e6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e6d6:	d003      	beq.n	800e6e0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6dc:	617b      	str	r3, [r7, #20]
 800e6de:	e002      	b.n	800e6e6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800e6e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e6e4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6ea:	b2da      	uxtb	r2, r3
 800e6ec:	8a79      	ldrh	r1, [r7, #18]
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	68f8      	ldr	r0, [r7, #12]
 800e6f6:	f001 fbcb 	bl	800fe90 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6fe:	b29a      	uxth	r2, r3
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e704:	1ad3      	subs	r3, r2, r3
 800e706:	b29a      	uxth	r2, r3
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e712:	b2db      	uxtb	r3, r3
 800e714:	2b22      	cmp	r3, #34	@ 0x22
 800e716:	d108      	bne.n	800e72a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	681a      	ldr	r2, [r3, #0]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e726:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e728:	e057      	b.n	800e7da <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e738:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e73a:	e04e      	b.n	800e7da <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e746:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e74a:	d003      	beq.n	800e754 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f000 fc79 	bl	800f044 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800e752:	e042      	b.n	800e7da <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e754:	2140      	movs	r1, #64	@ 0x40
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	f001 f87e 	bl	800f858 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800e75c:	e03d      	b.n	800e7da <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e764:	2b00      	cmp	r3, #0
 800e766:	d028      	beq.n	800e7ba <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d023      	beq.n	800e7ba <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e776:	b29b      	uxth	r3, r3
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d119      	bne.n	800e7b0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e786:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e78a:	d025      	beq.n	800e7d8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e790:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e794:	d108      	bne.n	800e7a8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	685a      	ldr	r2, [r3, #4]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e7a4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800e7a6:	e017      	b.n	800e7d8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	f000 fc4b 	bl	800f044 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800e7ae:	e013      	b.n	800e7d8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e7b0:	2140      	movs	r1, #64	@ 0x40
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	f001 f850 	bl	800f858 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800e7b8:	e00e      	b.n	800e7d8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	f003 0320 	and.w	r3, r3, #32
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d00a      	beq.n	800e7da <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d005      	beq.n	800e7da <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800e7ce:	68b9      	ldr	r1, [r7, #8]
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f000 fcd1 	bl	800f178 <I2C_ITMasterCplt>
 800e7d6:	e000      	b.n	800e7da <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800e7d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3718      	adds	r7, #24
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b088      	sub	sp, #32
 800e7f0:	af02      	add	r7, sp, #8
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800e7f8:	4b8d      	ldr	r3, [pc, #564]	@ (800ea30 <I2C_Mem_ISR_DMA+0x244>)
 800e7fa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e802:	2b01      	cmp	r3, #1
 800e804:	d101      	bne.n	800e80a <I2C_Mem_ISR_DMA+0x1e>
 800e806:	2302      	movs	r3, #2
 800e808:	e10e      	b.n	800ea28 <I2C_Mem_ISR_DMA+0x23c>
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2201      	movs	r2, #1
 800e80e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	f003 0310 	and.w	r3, r3, #16
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d016      	beq.n	800e84a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e822:	2b00      	cmp	r3, #0
 800e824:	d011      	beq.n	800e84a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	2210      	movs	r2, #16
 800e82c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e832:	f043 0204 	orr.w	r2, r3, #4
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e83a:	2120      	movs	r1, #32
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	f001 fb59 	bl	800fef4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e842:	68f8      	ldr	r0, [r7, #12]
 800e844:	f001 f91f 	bl	800fa86 <I2C_Flush_TXDR>
 800e848:	e0e9      	b.n	800ea1e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	f003 0302 	and.w	r3, r3, #2
 800e850:	2b00      	cmp	r3, #0
 800e852:	d00e      	beq.n	800e872 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d009      	beq.n	800e872 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	68fa      	ldr	r2, [r7, #12]
 800e864:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e866:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f04f 32ff 	mov.w	r2, #4294967295
 800e86e:	651a      	str	r2, [r3, #80]	@ 0x50
 800e870:	e0d5      	b.n	800ea1e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d05f      	beq.n	800e93c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e882:	2b00      	cmp	r3, #0
 800e884:	d05a      	beq.n	800e93c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e886:	2101      	movs	r1, #1
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f001 fbb7 	bl	800fffc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800e88e:	2110      	movs	r1, #16
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f001 fb2f 	bl	800fef4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d048      	beq.n	800e932 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	2bff      	cmp	r3, #255	@ 0xff
 800e8a8:	d910      	bls.n	800e8cc <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	22ff      	movs	r2, #255	@ 0xff
 800e8ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8b4:	b299      	uxth	r1, r3
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8ba:	b2da      	uxtb	r2, r3
 800e8bc:	2300      	movs	r3, #0
 800e8be:	9300      	str	r3, [sp, #0]
 800e8c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e8c4:	68f8      	ldr	r0, [r7, #12]
 800e8c6:	f001 fae3 	bl	800fe90 <I2C_TransferConfig>
 800e8ca:	e011      	b.n	800e8f0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8d0:	b29a      	uxth	r2, r3
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8da:	b299      	uxth	r1, r3
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8e0:	b2da      	uxtb	r2, r3
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	9300      	str	r3, [sp, #0]
 800e8e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f001 fad0 	bl	800fe90 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8f4:	b29a      	uxth	r2, r3
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8fa:	1ad3      	subs	r3, r2, r3
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	2b22      	cmp	r3, #34	@ 0x22
 800e90c:	d108      	bne.n	800e920 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e91c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e91e:	e07e      	b.n	800ea1e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e92e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e930:	e075      	b.n	800ea1e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e932:	2140      	movs	r1, #64	@ 0x40
 800e934:	68f8      	ldr	r0, [r7, #12]
 800e936:	f000 ff8f 	bl	800f858 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800e93a:	e070      	b.n	800ea1e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e942:	2b00      	cmp	r3, #0
 800e944:	d05d      	beq.n	800ea02 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d058      	beq.n	800ea02 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e950:	2101      	movs	r1, #1
 800e952:	68f8      	ldr	r0, [r7, #12]
 800e954:	f001 fb52 	bl	800fffc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800e958:	2110      	movs	r1, #16
 800e95a:	68f8      	ldr	r0, [r7, #12]
 800e95c:	f001 faca 	bl	800fef4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e966:	b2db      	uxtb	r3, r3
 800e968:	2b22      	cmp	r3, #34	@ 0x22
 800e96a:	d101      	bne.n	800e970 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800e96c:	4b31      	ldr	r3, [pc, #196]	@ (800ea34 <I2C_Mem_ISR_DMA+0x248>)
 800e96e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e974:	b29b      	uxth	r3, r3
 800e976:	2bff      	cmp	r3, #255	@ 0xff
 800e978:	d910      	bls.n	800e99c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	22ff      	movs	r2, #255	@ 0xff
 800e97e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e984:	b299      	uxth	r1, r3
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e98a:	b2da      	uxtb	r2, r3
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e994:	68f8      	ldr	r0, [r7, #12]
 800e996:	f001 fa7b 	bl	800fe90 <I2C_TransferConfig>
 800e99a:	e011      	b.n	800e9c0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e9aa:	b299      	uxth	r1, r3
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9b0:	b2da      	uxtb	r2, r3
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	9300      	str	r3, [sp, #0]
 800e9b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e9ba:	68f8      	ldr	r0, [r7, #12]
 800e9bc:	f001 fa68 	bl	800fe90 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9c4:	b29a      	uxth	r2, r3
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9ca:	1ad3      	subs	r3, r2, r3
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	2b22      	cmp	r3, #34	@ 0x22
 800e9dc:	d108      	bne.n	800e9f0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e9ec:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e9ee:	e016      	b.n	800ea1e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e9fe:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ea00:	e00d      	b.n	800ea1e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	f003 0320 	and.w	r3, r3, #32
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d008      	beq.n	800ea1e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d003      	beq.n	800ea1e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800ea16:	68b9      	ldr	r1, [r7, #8]
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f000 fbad 	bl	800f178 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ea26:	2300      	movs	r3, #0
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3718      	adds	r7, #24
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	80002000 	.word	0x80002000
 800ea34:	80002400 	.word	0x80002400

0800ea38 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b088      	sub	sp, #32
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea48:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d101      	bne.n	800ea5c <I2C_Slave_ISR_DMA+0x24>
 800ea58:	2302      	movs	r3, #2
 800ea5a:	e1c2      	b.n	800ede2 <I2C_Slave_ISR_DMA+0x3aa>
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2201      	movs	r2, #1
 800ea60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	f003 0320 	and.w	r3, r3, #32
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d009      	beq.n	800ea82 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d004      	beq.n	800ea82 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800ea78:	68b9      	ldr	r1, [r7, #8]
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f000 fc44 	bl	800f308 <I2C_ITSlaveCplt>
 800ea80:	e1aa      	b.n	800edd8 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	f003 0310 	and.w	r3, r3, #16
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	f000 8197 	beq.w	800edbc <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	f000 8191 	beq.w	800edbc <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d105      	bne.n	800eab0 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	f000 817f 	beq.w	800edae <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d07b      	beq.n	800ebb0 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d076      	beq.n	800ebb0 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4a74      	ldr	r2, [pc, #464]	@ (800ec9c <I2C_Slave_ISR_DMA+0x264>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d059      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a72      	ldr	r2, [pc, #456]	@ (800eca0 <I2C_Slave_ISR_DMA+0x268>)
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d053      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a70      	ldr	r2, [pc, #448]	@ (800eca4 <I2C_Slave_ISR_DMA+0x26c>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d04d      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4a6e      	ldr	r2, [pc, #440]	@ (800eca8 <I2C_Slave_ISR_DMA+0x270>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d047      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4a6c      	ldr	r2, [pc, #432]	@ (800ecac <I2C_Slave_ISR_DMA+0x274>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d041      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4a6a      	ldr	r2, [pc, #424]	@ (800ecb0 <I2C_Slave_ISR_DMA+0x278>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d03b      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4a68      	ldr	r2, [pc, #416]	@ (800ecb4 <I2C_Slave_ISR_DMA+0x27c>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d035      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	4a66      	ldr	r2, [pc, #408]	@ (800ecb8 <I2C_Slave_ISR_DMA+0x280>)
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d02f      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	4a64      	ldr	r2, [pc, #400]	@ (800ecbc <I2C_Slave_ISR_DMA+0x284>)
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d029      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	4a62      	ldr	r2, [pc, #392]	@ (800ecc0 <I2C_Slave_ISR_DMA+0x288>)
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d023      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a60      	ldr	r2, [pc, #384]	@ (800ecc4 <I2C_Slave_ISR_DMA+0x28c>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d01d      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a5e      	ldr	r2, [pc, #376]	@ (800ecc8 <I2C_Slave_ISR_DMA+0x290>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d017      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4a5c      	ldr	r2, [pc, #368]	@ (800eccc <I2C_Slave_ISR_DMA+0x294>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d011      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4a5a      	ldr	r2, [pc, #360]	@ (800ecd0 <I2C_Slave_ISR_DMA+0x298>)
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d00b      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	4a58      	ldr	r2, [pc, #352]	@ (800ecd4 <I2C_Slave_ISR_DMA+0x29c>)
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d005      	beq.n	800eb82 <I2C_Slave_ISR_DMA+0x14a>
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4a56      	ldr	r2, [pc, #344]	@ (800ecd8 <I2C_Slave_ISR_DMA+0x2a0>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d109      	bne.n	800eb96 <I2C_Slave_ISR_DMA+0x15e>
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	bf0c      	ite	eq
 800eb8e:	2301      	moveq	r3, #1
 800eb90:	2300      	movne	r3, #0
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	e008      	b.n	800eba8 <I2C_Slave_ISR_DMA+0x170>
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	bf0c      	ite	eq
 800eba2:	2301      	moveq	r3, #1
 800eba4:	2300      	movne	r3, #0
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d001      	beq.n	800ebb0 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800ebac:	2301      	movs	r3, #1
 800ebae:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f000 809e 	beq.w	800ecf6 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f000 8098 	beq.w	800ecf6 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4a33      	ldr	r2, [pc, #204]	@ (800ec9c <I2C_Slave_ISR_DMA+0x264>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d059      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	4a31      	ldr	r2, [pc, #196]	@ (800eca0 <I2C_Slave_ISR_DMA+0x268>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d053      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4a2f      	ldr	r2, [pc, #188]	@ (800eca4 <I2C_Slave_ISR_DMA+0x26c>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d04d      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4a2d      	ldr	r2, [pc, #180]	@ (800eca8 <I2C_Slave_ISR_DMA+0x270>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d047      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4a2b      	ldr	r2, [pc, #172]	@ (800ecac <I2C_Slave_ISR_DMA+0x274>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d041      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4a29      	ldr	r2, [pc, #164]	@ (800ecb0 <I2C_Slave_ISR_DMA+0x278>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d03b      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4a27      	ldr	r2, [pc, #156]	@ (800ecb4 <I2C_Slave_ISR_DMA+0x27c>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d035      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4a25      	ldr	r2, [pc, #148]	@ (800ecb8 <I2C_Slave_ISR_DMA+0x280>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d02f      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	4a23      	ldr	r2, [pc, #140]	@ (800ecbc <I2C_Slave_ISR_DMA+0x284>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d029      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4a21      	ldr	r2, [pc, #132]	@ (800ecc0 <I2C_Slave_ISR_DMA+0x288>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d023      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a1f      	ldr	r2, [pc, #124]	@ (800ecc4 <I2C_Slave_ISR_DMA+0x28c>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d01d      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4a1d      	ldr	r2, [pc, #116]	@ (800ecc8 <I2C_Slave_ISR_DMA+0x290>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d017      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a1b      	ldr	r2, [pc, #108]	@ (800eccc <I2C_Slave_ISR_DMA+0x294>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d011      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4a19      	ldr	r2, [pc, #100]	@ (800ecd0 <I2C_Slave_ISR_DMA+0x298>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d00b      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4a17      	ldr	r2, [pc, #92]	@ (800ecd4 <I2C_Slave_ISR_DMA+0x29c>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d005      	beq.n	800ec86 <I2C_Slave_ISR_DMA+0x24e>
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a15      	ldr	r2, [pc, #84]	@ (800ecd8 <I2C_Slave_ISR_DMA+0x2a0>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d12a      	bne.n	800ecdc <I2C_Slave_ISR_DMA+0x2a4>
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	bf0c      	ite	eq
 800ec92:	2301      	moveq	r3, #1
 800ec94:	2300      	movne	r3, #0
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	e029      	b.n	800ecee <I2C_Slave_ISR_DMA+0x2b6>
 800ec9a:	bf00      	nop
 800ec9c:	40020010 	.word	0x40020010
 800eca0:	40020028 	.word	0x40020028
 800eca4:	40020040 	.word	0x40020040
 800eca8:	40020058 	.word	0x40020058
 800ecac:	40020070 	.word	0x40020070
 800ecb0:	40020088 	.word	0x40020088
 800ecb4:	400200a0 	.word	0x400200a0
 800ecb8:	400200b8 	.word	0x400200b8
 800ecbc:	40020410 	.word	0x40020410
 800ecc0:	40020428 	.word	0x40020428
 800ecc4:	40020440 	.word	0x40020440
 800ecc8:	40020458 	.word	0x40020458
 800eccc:	40020470 	.word	0x40020470
 800ecd0:	40020488 	.word	0x40020488
 800ecd4:	400204a0 	.word	0x400204a0
 800ecd8:	400204b8 	.word	0x400204b8
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	bf0c      	ite	eq
 800ece8:	2301      	moveq	r3, #1
 800ecea:	2300      	movne	r3, #0
 800ecec:	b2db      	uxtb	r3, r3
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d001      	beq.n	800ecf6 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d128      	bne.n	800ed4e <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	2b28      	cmp	r3, #40	@ 0x28
 800ed06:	d108      	bne.n	800ed1a <I2C_Slave_ISR_DMA+0x2e2>
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ed0e:	d104      	bne.n	800ed1a <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ed10:	68b9      	ldr	r1, [r7, #8]
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f000 fd4c 	bl	800f7b0 <I2C_ITListenCplt>
 800ed18:	e048      	b.n	800edac <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	2b29      	cmp	r3, #41	@ 0x29
 800ed24:	d10e      	bne.n	800ed44 <I2C_Slave_ISR_DMA+0x30c>
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ed2c:	d00a      	beq.n	800ed44 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	2210      	movs	r2, #16
 800ed34:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ed36:	68f8      	ldr	r0, [r7, #12]
 800ed38:	f000 fea5 	bl	800fa86 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ed3c:	68f8      	ldr	r0, [r7, #12]
 800ed3e:	f000 f9be 	bl	800f0be <I2C_ITSlaveSeqCplt>
 800ed42:	e033      	b.n	800edac <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2210      	movs	r2, #16
 800ed4a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ed4c:	e034      	b.n	800edb8 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	2210      	movs	r2, #16
 800ed54:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed5a:	f043 0204 	orr.w	r2, r3, #4
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ed68:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d003      	beq.n	800ed78 <I2C_Slave_ISR_DMA+0x340>
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ed76:	d11f      	bne.n	800edb8 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ed78:	7dfb      	ldrb	r3, [r7, #23]
 800ed7a:	2b21      	cmp	r3, #33	@ 0x21
 800ed7c:	d002      	beq.n	800ed84 <I2C_Slave_ISR_DMA+0x34c>
 800ed7e:	7dfb      	ldrb	r3, [r7, #23]
 800ed80:	2b29      	cmp	r3, #41	@ 0x29
 800ed82:	d103      	bne.n	800ed8c <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2221      	movs	r2, #33	@ 0x21
 800ed88:	631a      	str	r2, [r3, #48]	@ 0x30
 800ed8a:	e008      	b.n	800ed9e <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ed8c:	7dfb      	ldrb	r3, [r7, #23]
 800ed8e:	2b22      	cmp	r3, #34	@ 0x22
 800ed90:	d002      	beq.n	800ed98 <I2C_Slave_ISR_DMA+0x360>
 800ed92:	7dfb      	ldrb	r3, [r7, #23]
 800ed94:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed96:	d102      	bne.n	800ed9e <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2222      	movs	r2, #34	@ 0x22
 800ed9c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eda2:	4619      	mov	r1, r3
 800eda4:	68f8      	ldr	r0, [r7, #12]
 800eda6:	f000 fd57 	bl	800f858 <I2C_ITError>
      if (treatdmanack == 1U)
 800edaa:	e005      	b.n	800edb8 <I2C_Slave_ISR_DMA+0x380>
 800edac:	e004      	b.n	800edb8 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	2210      	movs	r2, #16
 800edb4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800edb6:	e00f      	b.n	800edd8 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800edb8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800edba:	e00d      	b.n	800edd8 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	f003 0308 	and.w	r3, r3, #8
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d008      	beq.n	800edd8 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d003      	beq.n	800edd8 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800edd0:	68b9      	ldr	r1, [r7, #8]
 800edd2:	68f8      	ldr	r0, [r7, #12]
 800edd4:	f000 f8b2 	bl	800ef3c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2200      	movs	r2, #0
 800eddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ede0:	2300      	movs	r3, #0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3720      	adds	r7, #32
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop

0800edec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b086      	sub	sp, #24
 800edf0:	af02      	add	r7, sp, #8
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	4608      	mov	r0, r1
 800edf6:	4611      	mov	r1, r2
 800edf8:	461a      	mov	r2, r3
 800edfa:	4603      	mov	r3, r0
 800edfc:	817b      	strh	r3, [r7, #10]
 800edfe:	460b      	mov	r3, r1
 800ee00:	813b      	strh	r3, [r7, #8]
 800ee02:	4613      	mov	r3, r2
 800ee04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ee06:	88fb      	ldrh	r3, [r7, #6]
 800ee08:	b2da      	uxtb	r2, r3
 800ee0a:	8979      	ldrh	r1, [r7, #10]
 800ee0c:	4b20      	ldr	r3, [pc, #128]	@ (800ee90 <I2C_RequestMemoryWrite+0xa4>)
 800ee0e:	9300      	str	r3, [sp, #0]
 800ee10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ee14:	68f8      	ldr	r0, [r7, #12]
 800ee16:	f001 f83b 	bl	800fe90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ee1a:	69fa      	ldr	r2, [r7, #28]
 800ee1c:	69b9      	ldr	r1, [r7, #24]
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f000 fecc 	bl	800fbbc <I2C_WaitOnTXISFlagUntilTimeout>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d001      	beq.n	800ee2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e02c      	b.n	800ee88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ee2e:	88fb      	ldrh	r3, [r7, #6]
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d105      	bne.n	800ee40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ee34:	893b      	ldrh	r3, [r7, #8]
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	629a      	str	r2, [r3, #40]	@ 0x28
 800ee3e:	e015      	b.n	800ee6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ee40:	893b      	ldrh	r3, [r7, #8]
 800ee42:	0a1b      	lsrs	r3, r3, #8
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	b2da      	uxtb	r2, r3
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ee4e:	69fa      	ldr	r2, [r7, #28]
 800ee50:	69b9      	ldr	r1, [r7, #24]
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f000 feb2 	bl	800fbbc <I2C_WaitOnTXISFlagUntilTimeout>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d001      	beq.n	800ee62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	e012      	b.n	800ee88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ee62:	893b      	ldrh	r3, [r7, #8]
 800ee64:	b2da      	uxtb	r2, r3
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	2200      	movs	r2, #0
 800ee74:	2180      	movs	r1, #128	@ 0x80
 800ee76:	68f8      	ldr	r0, [r7, #12]
 800ee78:	f000 fe47 	bl	800fb0a <I2C_WaitOnFlagUntilTimeout>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d001      	beq.n	800ee86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ee82:	2301      	movs	r3, #1
 800ee84:	e000      	b.n	800ee88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ee86:	2300      	movs	r3, #0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3710      	adds	r7, #16
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	80002000 	.word	0x80002000

0800ee94 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b086      	sub	sp, #24
 800ee98:	af02      	add	r7, sp, #8
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	4608      	mov	r0, r1
 800ee9e:	4611      	mov	r1, r2
 800eea0:	461a      	mov	r2, r3
 800eea2:	4603      	mov	r3, r0
 800eea4:	817b      	strh	r3, [r7, #10]
 800eea6:	460b      	mov	r3, r1
 800eea8:	813b      	strh	r3, [r7, #8]
 800eeaa:	4613      	mov	r3, r2
 800eeac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800eeae:	88fb      	ldrh	r3, [r7, #6]
 800eeb0:	b2da      	uxtb	r2, r3
 800eeb2:	8979      	ldrh	r1, [r7, #10]
 800eeb4:	4b20      	ldr	r3, [pc, #128]	@ (800ef38 <I2C_RequestMemoryRead+0xa4>)
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	2300      	movs	r3, #0
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f000 ffe8 	bl	800fe90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800eec0:	69fa      	ldr	r2, [r7, #28]
 800eec2:	69b9      	ldr	r1, [r7, #24]
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	f000 fe79 	bl	800fbbc <I2C_WaitOnTXISFlagUntilTimeout>
 800eeca:	4603      	mov	r3, r0
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d001      	beq.n	800eed4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800eed0:	2301      	movs	r3, #1
 800eed2:	e02c      	b.n	800ef2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800eed4:	88fb      	ldrh	r3, [r7, #6]
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d105      	bne.n	800eee6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800eeda:	893b      	ldrh	r3, [r7, #8]
 800eedc:	b2da      	uxtb	r2, r3
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	629a      	str	r2, [r3, #40]	@ 0x28
 800eee4:	e015      	b.n	800ef12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800eee6:	893b      	ldrh	r3, [r7, #8]
 800eee8:	0a1b      	lsrs	r3, r3, #8
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	b2da      	uxtb	r2, r3
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800eef4:	69fa      	ldr	r2, [r7, #28]
 800eef6:	69b9      	ldr	r1, [r7, #24]
 800eef8:	68f8      	ldr	r0, [r7, #12]
 800eefa:	f000 fe5f 	bl	800fbbc <I2C_WaitOnTXISFlagUntilTimeout>
 800eefe:	4603      	mov	r3, r0
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d001      	beq.n	800ef08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ef04:	2301      	movs	r3, #1
 800ef06:	e012      	b.n	800ef2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ef08:	893b      	ldrh	r3, [r7, #8]
 800ef0a:	b2da      	uxtb	r2, r3
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	9300      	str	r3, [sp, #0]
 800ef16:	69bb      	ldr	r3, [r7, #24]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	2140      	movs	r1, #64	@ 0x40
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	f000 fdf4 	bl	800fb0a <I2C_WaitOnFlagUntilTimeout>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d001      	beq.n	800ef2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	e000      	b.n	800ef2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3710      	adds	r7, #16
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	80002000 	.word	0x80002000

0800ef3c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef4c:	b2db      	uxtb	r3, r3
 800ef4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ef52:	2b28      	cmp	r3, #40	@ 0x28
 800ef54:	d16a      	bne.n	800f02c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	699b      	ldr	r3, [r3, #24]
 800ef5c:	0c1b      	lsrs	r3, r3, #16
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	f003 0301 	and.w	r3, r3, #1
 800ef64:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	699b      	ldr	r3, [r3, #24]
 800ef6c:	0c1b      	lsrs	r3, r3, #16
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ef74:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	689b      	ldr	r3, [r3, #8]
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ef82:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ef90:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	2b02      	cmp	r3, #2
 800ef98:	d138      	bne.n	800f00c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800ef9a:	897b      	ldrh	r3, [r7, #10]
 800ef9c:	09db      	lsrs	r3, r3, #7
 800ef9e:	b29a      	uxth	r2, r3
 800efa0:	89bb      	ldrh	r3, [r7, #12]
 800efa2:	4053      	eors	r3, r2
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	f003 0306 	and.w	r3, r3, #6
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d11c      	bne.n	800efe8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800efae:	897b      	ldrh	r3, [r7, #10]
 800efb0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800efb6:	1c5a      	adds	r2, r3, #1
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800efc0:	2b02      	cmp	r3, #2
 800efc2:	d13b      	bne.n	800f03c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	2208      	movs	r2, #8
 800efd0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800efda:	89ba      	ldrh	r2, [r7, #12]
 800efdc:	7bfb      	ldrb	r3, [r7, #15]
 800efde:	4619      	mov	r1, r3
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f7ff f8cd 	bl	800e180 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800efe6:	e029      	b.n	800f03c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800efe8:	893b      	ldrh	r3, [r7, #8]
 800efea:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800efec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f001 f803 	bl	800fffc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2200      	movs	r2, #0
 800effa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800effe:	89ba      	ldrh	r2, [r7, #12]
 800f000:	7bfb      	ldrb	r3, [r7, #15]
 800f002:	4619      	mov	r1, r3
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f7ff f8bb 	bl	800e180 <HAL_I2C_AddrCallback>
}
 800f00a:	e017      	b.n	800f03c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f00c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f000 fff3 	bl	800fffc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2200      	movs	r2, #0
 800f01a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f01e:	89ba      	ldrh	r2, [r7, #12]
 800f020:	7bfb      	ldrb	r3, [r7, #15]
 800f022:	4619      	mov	r1, r3
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7ff f8ab 	bl	800e180 <HAL_I2C_AddrCallback>
}
 800f02a:	e007      	b.n	800f03c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2208      	movs	r2, #8
 800f032:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2200      	movs	r2, #0
 800f038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800f03c:	bf00      	nop
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2200      	movs	r2, #0
 800f050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	2b21      	cmp	r3, #33	@ 0x21
 800f05e:	d115      	bne.n	800f08c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2220      	movs	r2, #32
 800f064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2211      	movs	r2, #17
 800f06c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2200      	movs	r2, #0
 800f072:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f074:	2101      	movs	r1, #1
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f000 ffc0 	bl	800fffc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2200      	movs	r2, #0
 800f080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7ff f853 	bl	800e130 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f08a:	e014      	b.n	800f0b6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2220      	movs	r2, #32
 800f090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2212      	movs	r2, #18
 800f098:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f0a0:	2102      	movs	r1, #2
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f000 ffaa 	bl	800fffc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f7ff f847 	bl	800e144 <HAL_I2C_MasterRxCpltCallback>
}
 800f0b6:	bf00      	nop
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b084      	sub	sp, #16
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d008      	beq.n	800f0f2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f0ee:	601a      	str	r2, [r3, #0]
 800f0f0:	e00c      	b.n	800f10c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d007      	beq.n	800f10c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f10a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f112:	b2db      	uxtb	r3, r3
 800f114:	2b29      	cmp	r3, #41	@ 0x29
 800f116:	d112      	bne.n	800f13e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2228      	movs	r2, #40	@ 0x28
 800f11c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2221      	movs	r2, #33	@ 0x21
 800f124:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f126:	2101      	movs	r1, #1
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f000 ff67 	bl	800fffc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f7ff f80e 	bl	800e158 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f13c:	e017      	b.n	800f16e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f144:	b2db      	uxtb	r3, r3
 800f146:	2b2a      	cmp	r3, #42	@ 0x2a
 800f148:	d111      	bne.n	800f16e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2228      	movs	r2, #40	@ 0x28
 800f14e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2222      	movs	r2, #34	@ 0x22
 800f156:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f158:	2102      	movs	r1, #2
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 ff4e 	bl	800fffc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f7fe ffff 	bl	800e16c <HAL_I2C_SlaveRxCpltCallback>
}
 800f16e:	bf00      	nop
 800f170:	3710      	adds	r7, #16
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
	...

0800f178 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2220      	movs	r2, #32
 800f18c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f194:	b2db      	uxtb	r3, r3
 800f196:	2b21      	cmp	r3, #33	@ 0x21
 800f198:	d107      	bne.n	800f1aa <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f19a:	2101      	movs	r1, #1
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f000 ff2d 	bl	800fffc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2211      	movs	r2, #17
 800f1a6:	631a      	str	r2, [r3, #48]	@ 0x30
 800f1a8:	e00c      	b.n	800f1c4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f1b0:	b2db      	uxtb	r3, r3
 800f1b2:	2b22      	cmp	r3, #34	@ 0x22
 800f1b4:	d106      	bne.n	800f1c4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f1b6:	2102      	movs	r1, #2
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f000 ff1f 	bl	800fffc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2212      	movs	r2, #18
 800f1c2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	6859      	ldr	r1, [r3, #4]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	4b4c      	ldr	r3, [pc, #304]	@ (800f300 <I2C_ITMasterCplt+0x188>)
 800f1d0:	400b      	ands	r3, r1
 800f1d2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	4a49      	ldr	r2, [pc, #292]	@ (800f304 <I2C_ITMasterCplt+0x18c>)
 800f1de:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	f003 0310 	and.w	r3, r3, #16
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d009      	beq.n	800f1fe <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2210      	movs	r2, #16
 800f1f0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1f6:	f043 0204 	orr.w	r2, r3, #4
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f204:	b2db      	uxtb	r3, r3
 800f206:	2b60      	cmp	r3, #96	@ 0x60
 800f208:	d10a      	bne.n	800f220 <I2C_ITMasterCplt+0xa8>
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	f003 0304 	and.w	r3, r3, #4
 800f210:	2b00      	cmp	r3, #0
 800f212:	d005      	beq.n	800f220 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800f21e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 fc30 	bl	800fa86 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f22a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f232:	b2db      	uxtb	r3, r3
 800f234:	2b60      	cmp	r3, #96	@ 0x60
 800f236:	d002      	beq.n	800f23e <I2C_ITMasterCplt+0xc6>
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d006      	beq.n	800f24c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f242:	4619      	mov	r1, r3
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 fb07 	bl	800f858 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f24a:	e054      	b.n	800f2f6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f252:	b2db      	uxtb	r3, r3
 800f254:	2b21      	cmp	r3, #33	@ 0x21
 800f256:	d124      	bne.n	800f2a2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2220      	movs	r2, #32
 800f25c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2200      	movs	r2, #0
 800f264:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	2b40      	cmp	r3, #64	@ 0x40
 800f270:	d10b      	bne.n	800f28a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2200      	movs	r2, #0
 800f27e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f7f6 fd66 	bl	8005d54 <HAL_I2C_MemTxCpltCallback>
}
 800f288:	e035      	b.n	800f2f6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2200      	movs	r2, #0
 800f28e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2200      	movs	r2, #0
 800f296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f7fe ff48 	bl	800e130 <HAL_I2C_MasterTxCpltCallback>
}
 800f2a0:	e029      	b.n	800f2f6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f2a8:	b2db      	uxtb	r3, r3
 800f2aa:	2b22      	cmp	r3, #34	@ 0x22
 800f2ac:	d123      	bne.n	800f2f6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2220      	movs	r2, #32
 800f2b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	2b40      	cmp	r3, #64	@ 0x40
 800f2c6:	d10b      	bne.n	800f2e0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f7f6 fd45 	bl	8005d68 <HAL_I2C_MemRxCpltCallback>
}
 800f2de:	e00a      	b.n	800f2f6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f7fe ff27 	bl	800e144 <HAL_I2C_MasterRxCpltCallback>
}
 800f2f6:	bf00      	nop
 800f2f8:	3718      	adds	r7, #24
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	fe00e800 	.word	0xfe00e800
 800f304:	ffff0000 	.word	0xffff0000

0800f308 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b086      	sub	sp, #24
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f322:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f32a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2220      	movs	r2, #32
 800f332:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f334:	7afb      	ldrb	r3, [r7, #11]
 800f336:	2b21      	cmp	r3, #33	@ 0x21
 800f338:	d002      	beq.n	800f340 <I2C_ITSlaveCplt+0x38>
 800f33a:	7afb      	ldrb	r3, [r7, #11]
 800f33c:	2b29      	cmp	r3, #41	@ 0x29
 800f33e:	d108      	bne.n	800f352 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800f340:	f248 0101 	movw	r1, #32769	@ 0x8001
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 fe59 	bl	800fffc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2221      	movs	r2, #33	@ 0x21
 800f34e:	631a      	str	r2, [r3, #48]	@ 0x30
 800f350:	e019      	b.n	800f386 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f352:	7afb      	ldrb	r3, [r7, #11]
 800f354:	2b22      	cmp	r3, #34	@ 0x22
 800f356:	d002      	beq.n	800f35e <I2C_ITSlaveCplt+0x56>
 800f358:	7afb      	ldrb	r3, [r7, #11]
 800f35a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f35c:	d108      	bne.n	800f370 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800f35e:	f248 0102 	movw	r1, #32770	@ 0x8002
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f000 fe4a 	bl	800fffc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2222      	movs	r2, #34	@ 0x22
 800f36c:	631a      	str	r2, [r3, #48]	@ 0x30
 800f36e:	e00a      	b.n	800f386 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800f370:	7afb      	ldrb	r3, [r7, #11]
 800f372:	2b28      	cmp	r3, #40	@ 0x28
 800f374:	d107      	bne.n	800f386 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800f376:	f248 0103 	movw	r1, #32771	@ 0x8003
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 fe3e 	bl	800fffc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	685a      	ldr	r2, [r3, #4]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f394:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	6859      	ldr	r1, [r3, #4]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681a      	ldr	r2, [r3, #0]
 800f3a0:	4b7f      	ldr	r3, [pc, #508]	@ (800f5a0 <I2C_ITSlaveCplt+0x298>)
 800f3a2:	400b      	ands	r3, r1
 800f3a4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f000 fb6d 	bl	800fa86 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d07a      	beq.n	800f4ac <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f3c4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f000 8111 	beq.w	800f5f2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	4a73      	ldr	r2, [pc, #460]	@ (800f5a4 <I2C_ITSlaveCplt+0x29c>)
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d059      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	4a71      	ldr	r2, [pc, #452]	@ (800f5a8 <I2C_ITSlaveCplt+0x2a0>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d053      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	4a6f      	ldr	r2, [pc, #444]	@ (800f5ac <I2C_ITSlaveCplt+0x2a4>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d04d      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	4a6d      	ldr	r2, [pc, #436]	@ (800f5b0 <I2C_ITSlaveCplt+0x2a8>)
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	d047      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4a6b      	ldr	r2, [pc, #428]	@ (800f5b4 <I2C_ITSlaveCplt+0x2ac>)
 800f408:	4293      	cmp	r3, r2
 800f40a:	d041      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4a69      	ldr	r2, [pc, #420]	@ (800f5b8 <I2C_ITSlaveCplt+0x2b0>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d03b      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	4a67      	ldr	r2, [pc, #412]	@ (800f5bc <I2C_ITSlaveCplt+0x2b4>)
 800f420:	4293      	cmp	r3, r2
 800f422:	d035      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4a65      	ldr	r2, [pc, #404]	@ (800f5c0 <I2C_ITSlaveCplt+0x2b8>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d02f      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a63      	ldr	r2, [pc, #396]	@ (800f5c4 <I2C_ITSlaveCplt+0x2bc>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d029      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	4a61      	ldr	r2, [pc, #388]	@ (800f5c8 <I2C_ITSlaveCplt+0x2c0>)
 800f444:	4293      	cmp	r3, r2
 800f446:	d023      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4a5f      	ldr	r2, [pc, #380]	@ (800f5cc <I2C_ITSlaveCplt+0x2c4>)
 800f450:	4293      	cmp	r3, r2
 800f452:	d01d      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	4a5d      	ldr	r2, [pc, #372]	@ (800f5d0 <I2C_ITSlaveCplt+0x2c8>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d017      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	4a5b      	ldr	r2, [pc, #364]	@ (800f5d4 <I2C_ITSlaveCplt+0x2cc>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d011      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4a59      	ldr	r2, [pc, #356]	@ (800f5d8 <I2C_ITSlaveCplt+0x2d0>)
 800f474:	4293      	cmp	r3, r2
 800f476:	d00b      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	4a57      	ldr	r2, [pc, #348]	@ (800f5dc <I2C_ITSlaveCplt+0x2d4>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d005      	beq.n	800f490 <I2C_ITSlaveCplt+0x188>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4a55      	ldr	r2, [pc, #340]	@ (800f5e0 <I2C_ITSlaveCplt+0x2d8>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d105      	bne.n	800f49c <I2C_ITSlaveCplt+0x194>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	b29b      	uxth	r3, r3
 800f49a:	e004      	b.n	800f4a6 <I2C_ITSlaveCplt+0x19e>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	687a      	ldr	r2, [r7, #4]
 800f4a8:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800f4aa:	e0a2      	b.n	800f5f2 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	f000 809d 	beq.w	800f5f2 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f4c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f000 8090 	beq.w	800f5f2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4a32      	ldr	r2, [pc, #200]	@ (800f5a4 <I2C_ITSlaveCplt+0x29c>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d059      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	4a30      	ldr	r2, [pc, #192]	@ (800f5a8 <I2C_ITSlaveCplt+0x2a0>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d053      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4a2e      	ldr	r2, [pc, #184]	@ (800f5ac <I2C_ITSlaveCplt+0x2a4>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d04d      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a2c      	ldr	r2, [pc, #176]	@ (800f5b0 <I2C_ITSlaveCplt+0x2a8>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d047      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4a2a      	ldr	r2, [pc, #168]	@ (800f5b4 <I2C_ITSlaveCplt+0x2ac>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d041      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	4a28      	ldr	r2, [pc, #160]	@ (800f5b8 <I2C_ITSlaveCplt+0x2b0>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d03b      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a26      	ldr	r2, [pc, #152]	@ (800f5bc <I2C_ITSlaveCplt+0x2b4>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d035      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	4a24      	ldr	r2, [pc, #144]	@ (800f5c0 <I2C_ITSlaveCplt+0x2b8>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d02f      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	4a22      	ldr	r2, [pc, #136]	@ (800f5c4 <I2C_ITSlaveCplt+0x2bc>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d029      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a20      	ldr	r2, [pc, #128]	@ (800f5c8 <I2C_ITSlaveCplt+0x2c0>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d023      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a1e      	ldr	r2, [pc, #120]	@ (800f5cc <I2C_ITSlaveCplt+0x2c4>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d01d      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4a1c      	ldr	r2, [pc, #112]	@ (800f5d0 <I2C_ITSlaveCplt+0x2c8>)
 800f55e:	4293      	cmp	r3, r2
 800f560:	d017      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	4a1a      	ldr	r2, [pc, #104]	@ (800f5d4 <I2C_ITSlaveCplt+0x2cc>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d011      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a18      	ldr	r2, [pc, #96]	@ (800f5d8 <I2C_ITSlaveCplt+0x2d0>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d00b      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4a16      	ldr	r2, [pc, #88]	@ (800f5dc <I2C_ITSlaveCplt+0x2d4>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d005      	beq.n	800f592 <I2C_ITSlaveCplt+0x28a>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4a14      	ldr	r2, [pc, #80]	@ (800f5e0 <I2C_ITSlaveCplt+0x2d8>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d128      	bne.n	800f5e4 <I2C_ITSlaveCplt+0x2dc>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	e027      	b.n	800f5ee <I2C_ITSlaveCplt+0x2e6>
 800f59e:	bf00      	nop
 800f5a0:	fe00e800 	.word	0xfe00e800
 800f5a4:	40020010 	.word	0x40020010
 800f5a8:	40020028 	.word	0x40020028
 800f5ac:	40020040 	.word	0x40020040
 800f5b0:	40020058 	.word	0x40020058
 800f5b4:	40020070 	.word	0x40020070
 800f5b8:	40020088 	.word	0x40020088
 800f5bc:	400200a0 	.word	0x400200a0
 800f5c0:	400200b8 	.word	0x400200b8
 800f5c4:	40020410 	.word	0x40020410
 800f5c8:	40020428 	.word	0x40020428
 800f5cc:	40020440 	.word	0x40020440
 800f5d0:	40020458 	.word	0x40020458
 800f5d4:	40020470 	.word	0x40020470
 800f5d8:	40020488 	.word	0x40020488
 800f5dc:	400204a0 	.word	0x400204a0
 800f5e0:	400204b8 	.word	0x400204b8
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	f003 0304 	and.w	r3, r3, #4
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d020      	beq.n	800f63e <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	f023 0304 	bic.w	r3, r3, #4
 800f602:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f60e:	b2d2      	uxtb	r2, r2
 800f610:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f616:	1c5a      	adds	r2, r3, #1
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f620:	2b00      	cmp	r3, #0
 800f622:	d00c      	beq.n	800f63e <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f628:	3b01      	subs	r3, #1
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f634:	b29b      	uxth	r3, r3
 800f636:	3b01      	subs	r3, #1
 800f638:	b29a      	uxth	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f642:	b29b      	uxth	r3, r3
 800f644:	2b00      	cmp	r3, #0
 800f646:	d005      	beq.n	800f654 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f64c:	f043 0204 	orr.w	r2, r3, #4
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	f003 0310 	and.w	r3, r3, #16
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d049      	beq.n	800f6f2 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f664:	2b00      	cmp	r3, #0
 800f666:	d044      	beq.n	800f6f2 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d128      	bne.n	800f6c4 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f678:	b2db      	uxtb	r3, r3
 800f67a:	2b28      	cmp	r3, #40	@ 0x28
 800f67c:	d108      	bne.n	800f690 <I2C_ITSlaveCplt+0x388>
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f684:	d104      	bne.n	800f690 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f686:	6979      	ldr	r1, [r7, #20]
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 f891 	bl	800f7b0 <I2C_ITListenCplt>
 800f68e:	e030      	b.n	800f6f2 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f696:	b2db      	uxtb	r3, r3
 800f698:	2b29      	cmp	r3, #41	@ 0x29
 800f69a:	d10e      	bne.n	800f6ba <I2C_ITSlaveCplt+0x3b2>
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f6a2:	d00a      	beq.n	800f6ba <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2210      	movs	r2, #16
 800f6aa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f000 f9ea 	bl	800fa86 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f7ff fd03 	bl	800f0be <I2C_ITSlaveSeqCplt>
 800f6b8:	e01b      	b.n	800f6f2 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2210      	movs	r2, #16
 800f6c0:	61da      	str	r2, [r3, #28]
 800f6c2:	e016      	b.n	800f6f2 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2210      	movs	r2, #16
 800f6ca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6d0:	f043 0204 	orr.w	r2, r3, #4
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d003      	beq.n	800f6e6 <I2C_ITSlaveCplt+0x3de>
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f6e4:	d105      	bne.n	800f6f2 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 f8b3 	bl	800f858 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f704:	2b00      	cmp	r3, #0
 800f706:	d010      	beq.n	800f72a <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f70c:	4619      	mov	r1, r3
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f000 f8a2 	bl	800f858 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	2b28      	cmp	r3, #40	@ 0x28
 800f71e:	d141      	bne.n	800f7a4 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800f720:	6979      	ldr	r1, [r7, #20]
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 f844 	bl	800f7b0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f728:	e03c      	b.n	800f7a4 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f72e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f732:	d014      	beq.n	800f75e <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f7ff fcc2 	bl	800f0be <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	4a1b      	ldr	r2, [pc, #108]	@ (800f7ac <I2C_ITSlaveCplt+0x4a4>)
 800f73e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2220      	movs	r2, #32
 800f744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2200      	movs	r2, #0
 800f74c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2200      	movs	r2, #0
 800f752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f7fe fd20 	bl	800e19c <HAL_I2C_ListenCpltCallback>
}
 800f75c:	e022      	b.n	800f7a4 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f764:	b2db      	uxtb	r3, r3
 800f766:	2b22      	cmp	r3, #34	@ 0x22
 800f768:	d10e      	bne.n	800f788 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2220      	movs	r2, #32
 800f76e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2200      	movs	r2, #0
 800f776:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2200      	movs	r2, #0
 800f77c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f7fe fcf3 	bl	800e16c <HAL_I2C_SlaveRxCpltCallback>
}
 800f786:	e00d      	b.n	800f7a4 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2220      	movs	r2, #32
 800f78c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2200      	movs	r2, #0
 800f794:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2200      	movs	r2, #0
 800f79a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f7fe fcda 	bl	800e158 <HAL_I2C_SlaveTxCpltCallback>
}
 800f7a4:	bf00      	nop
 800f7a6:	3718      	adds	r7, #24
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}
 800f7ac:	ffff0000 	.word	0xffff0000

0800f7b0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4a25      	ldr	r2, [pc, #148]	@ (800f854 <I2C_ITListenCplt+0xa4>)
 800f7be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2220      	movs	r2, #32
 800f7ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	f003 0304 	and.w	r3, r3, #4
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d022      	beq.n	800f82c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7f0:	b2d2      	uxtb	r2, r2
 800f7f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7f8:	1c5a      	adds	r2, r3, #1
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f802:	2b00      	cmp	r3, #0
 800f804:	d012      	beq.n	800f82c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f80a:	3b01      	subs	r3, #1
 800f80c:	b29a      	uxth	r2, r3
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f816:	b29b      	uxth	r3, r3
 800f818:	3b01      	subs	r3, #1
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f824:	f043 0204 	orr.w	r2, r3, #4
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800f82c:	f248 0103 	movw	r1, #32771	@ 0x8003
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f000 fbe3 	bl	800fffc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	2210      	movs	r2, #16
 800f83c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2200      	movs	r2, #0
 800f842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7fe fca8 	bl	800e19c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800f84c:	bf00      	nop
 800f84e:	3708      	adds	r7, #8
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}
 800f854:	ffff0000 	.word	0xffff0000

0800f858 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f868:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2200      	movs	r2, #0
 800f86e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4a6d      	ldr	r2, [pc, #436]	@ (800fa2c <I2C_ITError+0x1d4>)
 800f876:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	431a      	orrs	r2, r3
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800f88a:	7bfb      	ldrb	r3, [r7, #15]
 800f88c:	2b28      	cmp	r3, #40	@ 0x28
 800f88e:	d005      	beq.n	800f89c <I2C_ITError+0x44>
 800f890:	7bfb      	ldrb	r3, [r7, #15]
 800f892:	2b29      	cmp	r3, #41	@ 0x29
 800f894:	d002      	beq.n	800f89c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800f896:	7bfb      	ldrb	r3, [r7, #15]
 800f898:	2b2a      	cmp	r3, #42	@ 0x2a
 800f89a:	d10b      	bne.n	800f8b4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800f89c:	2103      	movs	r1, #3
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f000 fbac 	bl	800fffc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2228      	movs	r2, #40	@ 0x28
 800f8a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a60      	ldr	r2, [pc, #384]	@ (800fa30 <I2C_ITError+0x1d8>)
 800f8b0:	635a      	str	r2, [r3, #52]	@ 0x34
 800f8b2:	e030      	b.n	800f916 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800f8b4:	f248 0103 	movw	r1, #32771	@ 0x8003
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f000 fb9f 	bl	800fffc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 f8e1 	bl	800fa86 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	2b60      	cmp	r3, #96	@ 0x60
 800f8ce:	d01f      	beq.n	800f910 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2220      	movs	r2, #32
 800f8d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	699b      	ldr	r3, [r3, #24]
 800f8de:	f003 0320 	and.w	r3, r3, #32
 800f8e2:	2b20      	cmp	r3, #32
 800f8e4:	d114      	bne.n	800f910 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	699b      	ldr	r3, [r3, #24]
 800f8ec:	f003 0310 	and.w	r3, r3, #16
 800f8f0:	2b10      	cmp	r3, #16
 800f8f2:	d109      	bne.n	800f908 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2210      	movs	r2, #16
 800f8fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f900:	f043 0204 	orr.w	r2, r3, #4
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	2220      	movs	r2, #32
 800f90e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2200      	movs	r2, #0
 800f914:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f91a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f920:	2b00      	cmp	r3, #0
 800f922:	d039      	beq.n	800f998 <I2C_ITError+0x140>
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	2b11      	cmp	r3, #17
 800f928:	d002      	beq.n	800f930 <I2C_ITError+0xd8>
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	2b21      	cmp	r3, #33	@ 0x21
 800f92e:	d133      	bne.n	800f998 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f93a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f93e:	d107      	bne.n	800f950 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f94e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f954:	4618      	mov	r0, r3
 800f956:	f7fd fa01 	bl	800cd5c <HAL_DMA_GetState>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	d017      	beq.n	800f990 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f964:	4a33      	ldr	r2, [pc, #204]	@ (800fa34 <I2C_ITError+0x1dc>)
 800f966:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f974:	4618      	mov	r0, r3
 800f976:	f7fc f881 	bl	800ba7c <HAL_DMA_Abort_IT>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d04d      	beq.n	800fa1c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800f98a:	4610      	mov	r0, r2
 800f98c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800f98e:	e045      	b.n	800fa1c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f000 f851 	bl	800fa38 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800f996:	e041      	b.n	800fa1c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d039      	beq.n	800fa14 <I2C_ITError+0x1bc>
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	2b12      	cmp	r3, #18
 800f9a4:	d002      	beq.n	800f9ac <I2C_ITError+0x154>
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	2b22      	cmp	r3, #34	@ 0x22
 800f9aa:	d133      	bne.n	800fa14 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f9b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f9ba:	d107      	bne.n	800f9cc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f9ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fd f9c3 	bl	800cd5c <HAL_DMA_GetState>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d017      	beq.n	800fa0c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9e0:	4a14      	ldr	r2, [pc, #80]	@ (800fa34 <I2C_ITError+0x1dc>)
 800f9e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7fc f843 	bl	800ba7c <HAL_DMA_Abort_IT>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d011      	beq.n	800fa20 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa02:	687a      	ldr	r2, [r7, #4]
 800fa04:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800fa06:	4610      	mov	r0, r2
 800fa08:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fa0a:	e009      	b.n	800fa20 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f000 f813 	bl	800fa38 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fa12:	e005      	b.n	800fa20 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f000 f80f 	bl	800fa38 <I2C_TreatErrorCallback>
  }
}
 800fa1a:	e002      	b.n	800fa22 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fa1c:	bf00      	nop
 800fa1e:	e000      	b.n	800fa22 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fa20:	bf00      	nop
}
 800fa22:	bf00      	nop
 800fa24:	3710      	adds	r7, #16
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	ffff0000 	.word	0xffff0000
 800fa30:	0800e425 	.word	0x0800e425
 800fa34:	0800facf 	.word	0x0800facf

0800fa38 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa46:	b2db      	uxtb	r3, r3
 800fa48:	2b60      	cmp	r3, #96	@ 0x60
 800fa4a:	d10e      	bne.n	800fa6a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2220      	movs	r2, #32
 800fa50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2200      	movs	r2, #0
 800fa58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f7fe fbae 	bl	800e1c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fa68:	e009      	b.n	800fa7e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2200      	movs	r2, #0
 800fa74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7fe fb99 	bl	800e1b0 <HAL_I2C_ErrorCallback>
}
 800fa7e:	bf00      	nop
 800fa80:	3708      	adds	r7, #8
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}

0800fa86 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800fa86:	b480      	push	{r7}
 800fa88:	b083      	sub	sp, #12
 800fa8a:	af00      	add	r7, sp, #0
 800fa8c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	699b      	ldr	r3, [r3, #24]
 800fa94:	f003 0302 	and.w	r3, r3, #2
 800fa98:	2b02      	cmp	r3, #2
 800fa9a:	d103      	bne.n	800faa4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2200      	movs	r2, #0
 800faa2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	699b      	ldr	r3, [r3, #24]
 800faaa:	f003 0301 	and.w	r3, r3, #1
 800faae:	2b01      	cmp	r3, #1
 800fab0:	d007      	beq.n	800fac2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	699a      	ldr	r2, [r3, #24]
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f042 0201 	orr.w	r2, r2, #1
 800fac0:	619a      	str	r2, [r3, #24]
  }
}
 800fac2:	bf00      	nop
 800fac4:	370c      	adds	r7, #12
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr

0800face <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b084      	sub	sp, #16
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fada:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d003      	beq.n	800faec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fae8:	2200      	movs	r2, #0
 800faea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d003      	beq.n	800fafc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faf8:	2200      	movs	r2, #0
 800fafa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f7ff ff9b 	bl	800fa38 <I2C_TreatErrorCallback>
}
 800fb02:	bf00      	nop
 800fb04:	3710      	adds	r7, #16
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b084      	sub	sp, #16
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	60f8      	str	r0, [r7, #12]
 800fb12:	60b9      	str	r1, [r7, #8]
 800fb14:	603b      	str	r3, [r7, #0]
 800fb16:	4613      	mov	r3, r2
 800fb18:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fb1a:	e03b      	b.n	800fb94 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fb1c:	69ba      	ldr	r2, [r7, #24]
 800fb1e:	6839      	ldr	r1, [r7, #0]
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f000 f8d5 	bl	800fcd0 <I2C_IsErrorOccurred>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	e041      	b.n	800fbb4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb36:	d02d      	beq.n	800fb94 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb38:	f7f8 fd8a 	bl	8008650 <HAL_GetTick>
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	69bb      	ldr	r3, [r7, #24]
 800fb40:	1ad3      	subs	r3, r2, r3
 800fb42:	683a      	ldr	r2, [r7, #0]
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d302      	bcc.n	800fb4e <I2C_WaitOnFlagUntilTimeout+0x44>
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d122      	bne.n	800fb94 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	699a      	ldr	r2, [r3, #24]
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	4013      	ands	r3, r2
 800fb58:	68ba      	ldr	r2, [r7, #8]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	bf0c      	ite	eq
 800fb5e:	2301      	moveq	r3, #1
 800fb60:	2300      	movne	r3, #0
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	461a      	mov	r2, r3
 800fb66:	79fb      	ldrb	r3, [r7, #7]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d113      	bne.n	800fb94 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb70:	f043 0220 	orr.w	r2, r3, #32
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2220      	movs	r2, #32
 800fb7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2200      	movs	r2, #0
 800fb84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800fb90:	2301      	movs	r3, #1
 800fb92:	e00f      	b.n	800fbb4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	699a      	ldr	r2, [r3, #24]
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	4013      	ands	r3, r2
 800fb9e:	68ba      	ldr	r2, [r7, #8]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	bf0c      	ite	eq
 800fba4:	2301      	moveq	r3, #1
 800fba6:	2300      	movne	r3, #0
 800fba8:	b2db      	uxtb	r3, r3
 800fbaa:	461a      	mov	r2, r3
 800fbac:	79fb      	ldrb	r3, [r7, #7]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d0b4      	beq.n	800fb1c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fbb2:	2300      	movs	r3, #0
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3710      	adds	r7, #16
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	60f8      	str	r0, [r7, #12]
 800fbc4:	60b9      	str	r1, [r7, #8]
 800fbc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800fbc8:	e033      	b.n	800fc32 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	68b9      	ldr	r1, [r7, #8]
 800fbce:	68f8      	ldr	r0, [r7, #12]
 800fbd0:	f000 f87e 	bl	800fcd0 <I2C_IsErrorOccurred>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d001      	beq.n	800fbde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fbda:	2301      	movs	r3, #1
 800fbdc:	e031      	b.n	800fc42 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbe4:	d025      	beq.n	800fc32 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fbe6:	f7f8 fd33 	bl	8008650 <HAL_GetTick>
 800fbea:	4602      	mov	r2, r0
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	1ad3      	subs	r3, r2, r3
 800fbf0:	68ba      	ldr	r2, [r7, #8]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d302      	bcc.n	800fbfc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d11a      	bne.n	800fc32 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	699b      	ldr	r3, [r3, #24]
 800fc02:	f003 0302 	and.w	r3, r3, #2
 800fc06:	2b02      	cmp	r3, #2
 800fc08:	d013      	beq.n	800fc32 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc0e:	f043 0220 	orr.w	r2, r3, #32
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2220      	movs	r2, #32
 800fc1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2200      	movs	r2, #0
 800fc22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800fc2e:	2301      	movs	r3, #1
 800fc30:	e007      	b.n	800fc42 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	699b      	ldr	r3, [r3, #24]
 800fc38:	f003 0302 	and.w	r3, r3, #2
 800fc3c:	2b02      	cmp	r3, #2
 800fc3e:	d1c4      	bne.n	800fbca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800fc40:	2300      	movs	r3, #0
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	b084      	sub	sp, #16
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	60f8      	str	r0, [r7, #12]
 800fc52:	60b9      	str	r1, [r7, #8]
 800fc54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fc56:	e02f      	b.n	800fcb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	68b9      	ldr	r1, [r7, #8]
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f000 f837 	bl	800fcd0 <I2C_IsErrorOccurred>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d001      	beq.n	800fc6c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	e02d      	b.n	800fcc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fc6c:	f7f8 fcf0 	bl	8008650 <HAL_GetTick>
 800fc70:	4602      	mov	r2, r0
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	1ad3      	subs	r3, r2, r3
 800fc76:	68ba      	ldr	r2, [r7, #8]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d302      	bcc.n	800fc82 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d11a      	bne.n	800fcb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	699b      	ldr	r3, [r3, #24]
 800fc88:	f003 0320 	and.w	r3, r3, #32
 800fc8c:	2b20      	cmp	r3, #32
 800fc8e:	d013      	beq.n	800fcb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc94:	f043 0220 	orr.w	r2, r3, #32
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2220      	movs	r2, #32
 800fca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2200      	movs	r2, #0
 800fca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	e007      	b.n	800fcc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	699b      	ldr	r3, [r3, #24]
 800fcbe:	f003 0320 	and.w	r3, r3, #32
 800fcc2:	2b20      	cmp	r3, #32
 800fcc4:	d1c8      	bne.n	800fc58 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800fcc6:	2300      	movs	r3, #0
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3710      	adds	r7, #16
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b08a      	sub	sp, #40	@ 0x28
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	699b      	ldr	r3, [r3, #24]
 800fce8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800fcea:	2300      	movs	r3, #0
 800fcec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800fcf2:	69bb      	ldr	r3, [r7, #24]
 800fcf4:	f003 0310 	and.w	r3, r3, #16
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d068      	beq.n	800fdce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	2210      	movs	r2, #16
 800fd02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800fd04:	e049      	b.n	800fd9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd0c:	d045      	beq.n	800fd9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800fd0e:	f7f8 fc9f 	bl	8008650 <HAL_GetTick>
 800fd12:	4602      	mov	r2, r0
 800fd14:	69fb      	ldr	r3, [r7, #28]
 800fd16:	1ad3      	subs	r3, r2, r3
 800fd18:	68ba      	ldr	r2, [r7, #8]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d302      	bcc.n	800fd24 <I2C_IsErrorOccurred+0x54>
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d13a      	bne.n	800fd9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fd2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fd36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	699b      	ldr	r3, [r3, #24]
 800fd3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fd42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fd46:	d121      	bne.n	800fd8c <I2C_IsErrorOccurred+0xbc>
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fd4e:	d01d      	beq.n	800fd8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800fd50:	7cfb      	ldrb	r3, [r7, #19]
 800fd52:	2b20      	cmp	r3, #32
 800fd54:	d01a      	beq.n	800fd8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	685a      	ldr	r2, [r3, #4]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fd64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800fd66:	f7f8 fc73 	bl	8008650 <HAL_GetTick>
 800fd6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fd6c:	e00e      	b.n	800fd8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800fd6e:	f7f8 fc6f 	bl	8008650 <HAL_GetTick>
 800fd72:	4602      	mov	r2, r0
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	1ad3      	subs	r3, r2, r3
 800fd78:	2b19      	cmp	r3, #25
 800fd7a:	d907      	bls.n	800fd8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800fd7c:	6a3b      	ldr	r3, [r7, #32]
 800fd7e:	f043 0320 	orr.w	r3, r3, #32
 800fd82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800fd84:	2301      	movs	r3, #1
 800fd86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800fd8a:	e006      	b.n	800fd9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	699b      	ldr	r3, [r3, #24]
 800fd92:	f003 0320 	and.w	r3, r3, #32
 800fd96:	2b20      	cmp	r3, #32
 800fd98:	d1e9      	bne.n	800fd6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	699b      	ldr	r3, [r3, #24]
 800fda0:	f003 0320 	and.w	r3, r3, #32
 800fda4:	2b20      	cmp	r3, #32
 800fda6:	d003      	beq.n	800fdb0 <I2C_IsErrorOccurred+0xe0>
 800fda8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d0aa      	beq.n	800fd06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800fdb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d103      	bne.n	800fdc0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2220      	movs	r2, #32
 800fdbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800fdc0:	6a3b      	ldr	r3, [r7, #32]
 800fdc2:	f043 0304 	orr.w	r3, r3, #4
 800fdc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	699b      	ldr	r3, [r3, #24]
 800fdd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800fdd6:	69bb      	ldr	r3, [r7, #24]
 800fdd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d00b      	beq.n	800fdf8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800fde0:	6a3b      	ldr	r3, [r7, #32]
 800fde2:	f043 0301 	orr.w	r3, r3, #1
 800fde6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fdf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800fdf8:	69bb      	ldr	r3, [r7, #24]
 800fdfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d00b      	beq.n	800fe1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800fe02:	6a3b      	ldr	r3, [r7, #32]
 800fe04:	f043 0308 	orr.w	r3, r3, #8
 800fe08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fe12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800fe14:	2301      	movs	r3, #1
 800fe16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800fe1a:	69bb      	ldr	r3, [r7, #24]
 800fe1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d00b      	beq.n	800fe3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800fe24:	6a3b      	ldr	r3, [r7, #32]
 800fe26:	f043 0302 	orr.w	r3, r3, #2
 800fe2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800fe36:	2301      	movs	r3, #1
 800fe38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800fe3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d01c      	beq.n	800fe7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	f7ff fe1e 	bl	800fa86 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	6859      	ldr	r1, [r3, #4]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	4b0d      	ldr	r3, [pc, #52]	@ (800fe8c <I2C_IsErrorOccurred+0x1bc>)
 800fe56:	400b      	ands	r3, r1
 800fe58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fe5e:	6a3b      	ldr	r3, [r7, #32]
 800fe60:	431a      	orrs	r2, r3
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2220      	movs	r2, #32
 800fe6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2200      	movs	r2, #0
 800fe72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800fe7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3728      	adds	r7, #40	@ 0x28
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	fe00e800 	.word	0xfe00e800

0800fe90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b087      	sub	sp, #28
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	607b      	str	r3, [r7, #4]
 800fe9a:	460b      	mov	r3, r1
 800fe9c:	817b      	strh	r3, [r7, #10]
 800fe9e:	4613      	mov	r3, r2
 800fea0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800fea2:	897b      	ldrh	r3, [r7, #10]
 800fea4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800fea8:	7a7b      	ldrb	r3, [r7, #9]
 800feaa:	041b      	lsls	r3, r3, #16
 800feac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800feb0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800feb6:	6a3b      	ldr	r3, [r7, #32]
 800feb8:	4313      	orrs	r3, r2
 800feba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800febe:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	685a      	ldr	r2, [r3, #4]
 800fec6:	6a3b      	ldr	r3, [r7, #32]
 800fec8:	0d5b      	lsrs	r3, r3, #21
 800feca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800fece:	4b08      	ldr	r3, [pc, #32]	@ (800fef0 <I2C_TransferConfig+0x60>)
 800fed0:	430b      	orrs	r3, r1
 800fed2:	43db      	mvns	r3, r3
 800fed4:	ea02 0103 	and.w	r1, r2, r3
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	697a      	ldr	r2, [r7, #20]
 800fede:	430a      	orrs	r2, r1
 800fee0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800fee2:	bf00      	nop
 800fee4:	371c      	adds	r7, #28
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr
 800feee:	bf00      	nop
 800fef0:	03ff63ff 	.word	0x03ff63ff

0800fef4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b085      	sub	sp, #20
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	460b      	mov	r3, r1
 800fefe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ff00:	2300      	movs	r3, #0
 800ff02:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff08:	4a39      	ldr	r2, [pc, #228]	@ (800fff0 <I2C_Enable_IRQ+0xfc>)
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d032      	beq.n	800ff74 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800ff12:	4a38      	ldr	r2, [pc, #224]	@ (800fff4 <I2C_Enable_IRQ+0x100>)
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d02d      	beq.n	800ff74 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800ff1c:	4a36      	ldr	r2, [pc, #216]	@ (800fff8 <I2C_Enable_IRQ+0x104>)
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	d028      	beq.n	800ff74 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ff22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	da03      	bge.n	800ff32 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800ff30:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ff32:	887b      	ldrh	r3, [r7, #2]
 800ff34:	f003 0301 	and.w	r3, r3, #1
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d003      	beq.n	800ff44 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800ff42:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ff44:	887b      	ldrh	r3, [r7, #2]
 800ff46:	f003 0302 	and.w	r3, r3, #2
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d003      	beq.n	800ff56 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800ff54:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ff56:	887b      	ldrh	r3, [r7, #2]
 800ff58:	2b10      	cmp	r3, #16
 800ff5a:	d103      	bne.n	800ff64 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800ff62:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ff64:	887b      	ldrh	r3, [r7, #2]
 800ff66:	2b20      	cmp	r3, #32
 800ff68:	d133      	bne.n	800ffd2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	f043 0320 	orr.w	r3, r3, #32
 800ff70:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ff72:	e02e      	b.n	800ffd2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ff74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	da03      	bge.n	800ff84 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800ff82:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ff84:	887b      	ldrh	r3, [r7, #2]
 800ff86:	f003 0301 	and.w	r3, r3, #1
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d003      	beq.n	800ff96 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800ff94:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ff96:	887b      	ldrh	r3, [r7, #2]
 800ff98:	f003 0302 	and.w	r3, r3, #2
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d003      	beq.n	800ffa8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800ffa6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ffa8:	887b      	ldrh	r3, [r7, #2]
 800ffaa:	2b10      	cmp	r3, #16
 800ffac:	d103      	bne.n	800ffb6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800ffb4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ffb6:	887b      	ldrh	r3, [r7, #2]
 800ffb8:	2b20      	cmp	r3, #32
 800ffba:	d103      	bne.n	800ffc4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ffc2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ffc4:	887b      	ldrh	r3, [r7, #2]
 800ffc6:	2b40      	cmp	r3, #64	@ 0x40
 800ffc8:	d103      	bne.n	800ffd2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffd0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	6819      	ldr	r1, [r3, #0]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	430a      	orrs	r2, r1
 800ffe0:	601a      	str	r2, [r3, #0]
}
 800ffe2:	bf00      	nop
 800ffe4:	3714      	adds	r7, #20
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop
 800fff0:	0800e617 	.word	0x0800e617
 800fff4:	0800ea39 	.word	0x0800ea39
 800fff8:	0800e7ed 	.word	0x0800e7ed

0800fffc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b085      	sub	sp, #20
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	460b      	mov	r3, r1
 8010006:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010008:	2300      	movs	r3, #0
 801000a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801000c:	887b      	ldrh	r3, [r7, #2]
 801000e:	f003 0301 	and.w	r3, r3, #1
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00f      	beq.n	8010036 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 801001c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010024:	b2db      	uxtb	r3, r3
 8010026:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 801002a:	2b28      	cmp	r3, #40	@ 0x28
 801002c:	d003      	beq.n	8010036 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010034:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010036:	887b      	ldrh	r3, [r7, #2]
 8010038:	f003 0302 	and.w	r3, r3, #2
 801003c:	2b00      	cmp	r3, #0
 801003e:	d00f      	beq.n	8010060 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010046:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801004e:	b2db      	uxtb	r3, r3
 8010050:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010054:	2b28      	cmp	r3, #40	@ 0x28
 8010056:	d003      	beq.n	8010060 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 801005e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010060:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010064:	2b00      	cmp	r3, #0
 8010066:	da03      	bge.n	8010070 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 801006e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010070:	887b      	ldrh	r3, [r7, #2]
 8010072:	2b10      	cmp	r3, #16
 8010074:	d103      	bne.n	801007e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 801007c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 801007e:	887b      	ldrh	r3, [r7, #2]
 8010080:	2b20      	cmp	r3, #32
 8010082:	d103      	bne.n	801008c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f043 0320 	orr.w	r3, r3, #32
 801008a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801008c:	887b      	ldrh	r3, [r7, #2]
 801008e:	2b40      	cmp	r3, #64	@ 0x40
 8010090:	d103      	bne.n	801009a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010098:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	6819      	ldr	r1, [r3, #0]
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	43da      	mvns	r2, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	400a      	ands	r2, r1
 80100aa:	601a      	str	r2, [r3, #0]
}
 80100ac:	bf00      	nop
 80100ae:	3714      	adds	r7, #20
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100c8:	b2db      	uxtb	r3, r3
 80100ca:	2b20      	cmp	r3, #32
 80100cc:	d138      	bne.n	8010140 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d101      	bne.n	80100dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80100d8:	2302      	movs	r3, #2
 80100da:	e032      	b.n	8010142 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2201      	movs	r2, #1
 80100e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2224      	movs	r2, #36	@ 0x24
 80100e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f022 0201 	bic.w	r2, r2, #1
 80100fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	681a      	ldr	r2, [r3, #0]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801010a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	6819      	ldr	r1, [r3, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	683a      	ldr	r2, [r7, #0]
 8010118:	430a      	orrs	r2, r1
 801011a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f042 0201 	orr.w	r2, r2, #1
 801012a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2220      	movs	r2, #32
 8010130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2200      	movs	r2, #0
 8010138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801013c:	2300      	movs	r3, #0
 801013e:	e000      	b.n	8010142 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010140:	2302      	movs	r3, #2
  }
}
 8010142:	4618      	mov	r0, r3
 8010144:	370c      	adds	r7, #12
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr

0801014e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801014e:	b480      	push	{r7}
 8010150:	b085      	sub	sp, #20
 8010152:	af00      	add	r7, sp, #0
 8010154:	6078      	str	r0, [r7, #4]
 8010156:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801015e:	b2db      	uxtb	r3, r3
 8010160:	2b20      	cmp	r3, #32
 8010162:	d139      	bne.n	80101d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801016a:	2b01      	cmp	r3, #1
 801016c:	d101      	bne.n	8010172 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801016e:	2302      	movs	r3, #2
 8010170:	e033      	b.n	80101da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2201      	movs	r2, #1
 8010176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2224      	movs	r2, #36	@ 0x24
 801017e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	681a      	ldr	r2, [r3, #0]
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f022 0201 	bic.w	r2, r2, #1
 8010190:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80101a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	021b      	lsls	r3, r3, #8
 80101a6:	68fa      	ldr	r2, [r7, #12]
 80101a8:	4313      	orrs	r3, r2
 80101aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68fa      	ldr	r2, [r7, #12]
 80101b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	681a      	ldr	r2, [r3, #0]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f042 0201 	orr.w	r2, r2, #1
 80101c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2220      	movs	r2, #32
 80101c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2200      	movs	r2, #0
 80101d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80101d4:	2300      	movs	r3, #0
 80101d6:	e000      	b.n	80101da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80101d8:	2302      	movs	r3, #2
  }
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3714      	adds	r7, #20
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr
	...

080101e8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80101f0:	4b0d      	ldr	r3, [pc, #52]	@ (8010228 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80101f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80101f6:	4a0c      	ldr	r2, [pc, #48]	@ (8010228 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80101f8:	f043 0302 	orr.w	r3, r3, #2
 80101fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010200:	4b09      	ldr	r3, [pc, #36]	@ (8010228 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010206:	f003 0302 	and.w	r3, r3, #2
 801020a:	60fb      	str	r3, [r7, #12]
 801020c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 801020e:	4b07      	ldr	r3, [pc, #28]	@ (801022c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010210:	685a      	ldr	r2, [r3, #4]
 8010212:	4906      	ldr	r1, [pc, #24]	@ (801022c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	4313      	orrs	r3, r2
 8010218:	604b      	str	r3, [r1, #4]
}
 801021a:	bf00      	nop
 801021c:	3714      	adds	r7, #20
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop
 8010228:	58024400 	.word	0x58024400
 801022c:	58000400 	.word	0x58000400

08010230 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8010238:	4b19      	ldr	r3, [pc, #100]	@ (80102a0 <HAL_PWREx_ConfigSupply+0x70>)
 801023a:	68db      	ldr	r3, [r3, #12]
 801023c:	f003 0304 	and.w	r3, r3, #4
 8010240:	2b04      	cmp	r3, #4
 8010242:	d00a      	beq.n	801025a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8010244:	4b16      	ldr	r3, [pc, #88]	@ (80102a0 <HAL_PWREx_ConfigSupply+0x70>)
 8010246:	68db      	ldr	r3, [r3, #12]
 8010248:	f003 0307 	and.w	r3, r3, #7
 801024c:	687a      	ldr	r2, [r7, #4]
 801024e:	429a      	cmp	r2, r3
 8010250:	d001      	beq.n	8010256 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8010252:	2301      	movs	r3, #1
 8010254:	e01f      	b.n	8010296 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8010256:	2300      	movs	r3, #0
 8010258:	e01d      	b.n	8010296 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801025a:	4b11      	ldr	r3, [pc, #68]	@ (80102a0 <HAL_PWREx_ConfigSupply+0x70>)
 801025c:	68db      	ldr	r3, [r3, #12]
 801025e:	f023 0207 	bic.w	r2, r3, #7
 8010262:	490f      	ldr	r1, [pc, #60]	@ (80102a0 <HAL_PWREx_ConfigSupply+0x70>)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	4313      	orrs	r3, r2
 8010268:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801026a:	f7f8 f9f1 	bl	8008650 <HAL_GetTick>
 801026e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010270:	e009      	b.n	8010286 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8010272:	f7f8 f9ed 	bl	8008650 <HAL_GetTick>
 8010276:	4602      	mov	r2, r0
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	1ad3      	subs	r3, r2, r3
 801027c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010280:	d901      	bls.n	8010286 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8010282:	2301      	movs	r3, #1
 8010284:	e007      	b.n	8010296 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010286:	4b06      	ldr	r3, [pc, #24]	@ (80102a0 <HAL_PWREx_ConfigSupply+0x70>)
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801028e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010292:	d1ee      	bne.n	8010272 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8010294:	2300      	movs	r3, #0
}
 8010296:	4618      	mov	r0, r3
 8010298:	3710      	adds	r7, #16
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	58024800 	.word	0x58024800

080102a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b08c      	sub	sp, #48	@ 0x30
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d101      	bne.n	80102b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80102b2:	2301      	movs	r3, #1
 80102b4:	e3c8      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	f003 0301 	and.w	r3, r3, #1
 80102be:	2b00      	cmp	r3, #0
 80102c0:	f000 8087 	beq.w	80103d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80102c4:	4b88      	ldr	r3, [pc, #544]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 80102c6:	691b      	ldr	r3, [r3, #16]
 80102c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80102cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80102ce:	4b86      	ldr	r3, [pc, #536]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 80102d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80102d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102d6:	2b10      	cmp	r3, #16
 80102d8:	d007      	beq.n	80102ea <HAL_RCC_OscConfig+0x46>
 80102da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102dc:	2b18      	cmp	r3, #24
 80102de:	d110      	bne.n	8010302 <HAL_RCC_OscConfig+0x5e>
 80102e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102e2:	f003 0303 	and.w	r3, r3, #3
 80102e6:	2b02      	cmp	r3, #2
 80102e8:	d10b      	bne.n	8010302 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80102ea:	4b7f      	ldr	r3, [pc, #508]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d06c      	beq.n	80103d0 <HAL_RCC_OscConfig+0x12c>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d168      	bne.n	80103d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80102fe:	2301      	movs	r3, #1
 8010300:	e3a2      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801030a:	d106      	bne.n	801031a <HAL_RCC_OscConfig+0x76>
 801030c:	4b76      	ldr	r3, [pc, #472]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	4a75      	ldr	r2, [pc, #468]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010316:	6013      	str	r3, [r2, #0]
 8010318:	e02e      	b.n	8010378 <HAL_RCC_OscConfig+0xd4>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d10c      	bne.n	801033c <HAL_RCC_OscConfig+0x98>
 8010322:	4b71      	ldr	r3, [pc, #452]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4a70      	ldr	r2, [pc, #448]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801032c:	6013      	str	r3, [r2, #0]
 801032e:	4b6e      	ldr	r3, [pc, #440]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	4a6d      	ldr	r2, [pc, #436]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010334:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010338:	6013      	str	r3, [r2, #0]
 801033a:	e01d      	b.n	8010378 <HAL_RCC_OscConfig+0xd4>
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010344:	d10c      	bne.n	8010360 <HAL_RCC_OscConfig+0xbc>
 8010346:	4b68      	ldr	r3, [pc, #416]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4a67      	ldr	r2, [pc, #412]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 801034c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010350:	6013      	str	r3, [r2, #0]
 8010352:	4b65      	ldr	r3, [pc, #404]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4a64      	ldr	r2, [pc, #400]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801035c:	6013      	str	r3, [r2, #0]
 801035e:	e00b      	b.n	8010378 <HAL_RCC_OscConfig+0xd4>
 8010360:	4b61      	ldr	r3, [pc, #388]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4a60      	ldr	r2, [pc, #384]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801036a:	6013      	str	r3, [r2, #0]
 801036c:	4b5e      	ldr	r3, [pc, #376]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4a5d      	ldr	r2, [pc, #372]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d013      	beq.n	80103a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010380:	f7f8 f966 	bl	8008650 <HAL_GetTick>
 8010384:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010386:	e008      	b.n	801039a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010388:	f7f8 f962 	bl	8008650 <HAL_GetTick>
 801038c:	4602      	mov	r2, r0
 801038e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010390:	1ad3      	subs	r3, r2, r3
 8010392:	2b64      	cmp	r3, #100	@ 0x64
 8010394:	d901      	bls.n	801039a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8010396:	2303      	movs	r3, #3
 8010398:	e356      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801039a:	4b53      	ldr	r3, [pc, #332]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d0f0      	beq.n	8010388 <HAL_RCC_OscConfig+0xe4>
 80103a6:	e014      	b.n	80103d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80103a8:	f7f8 f952 	bl	8008650 <HAL_GetTick>
 80103ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80103ae:	e008      	b.n	80103c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80103b0:	f7f8 f94e 	bl	8008650 <HAL_GetTick>
 80103b4:	4602      	mov	r2, r0
 80103b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103b8:	1ad3      	subs	r3, r2, r3
 80103ba:	2b64      	cmp	r3, #100	@ 0x64
 80103bc:	d901      	bls.n	80103c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80103be:	2303      	movs	r3, #3
 80103c0:	e342      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80103c2:	4b49      	ldr	r3, [pc, #292]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d1f0      	bne.n	80103b0 <HAL_RCC_OscConfig+0x10c>
 80103ce:	e000      	b.n	80103d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80103d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	f003 0302 	and.w	r3, r3, #2
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f000 808c 	beq.w	80104f8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80103e0:	4b41      	ldr	r3, [pc, #260]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 80103e2:	691b      	ldr	r3, [r3, #16]
 80103e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80103e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80103ea:	4b3f      	ldr	r3, [pc, #252]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 80103ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80103f0:	6a3b      	ldr	r3, [r7, #32]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d007      	beq.n	8010406 <HAL_RCC_OscConfig+0x162>
 80103f6:	6a3b      	ldr	r3, [r7, #32]
 80103f8:	2b18      	cmp	r3, #24
 80103fa:	d137      	bne.n	801046c <HAL_RCC_OscConfig+0x1c8>
 80103fc:	69fb      	ldr	r3, [r7, #28]
 80103fe:	f003 0303 	and.w	r3, r3, #3
 8010402:	2b00      	cmp	r3, #0
 8010404:	d132      	bne.n	801046c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010406:	4b38      	ldr	r3, [pc, #224]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	f003 0304 	and.w	r3, r3, #4
 801040e:	2b00      	cmp	r3, #0
 8010410:	d005      	beq.n	801041e <HAL_RCC_OscConfig+0x17a>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	68db      	ldr	r3, [r3, #12]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d101      	bne.n	801041e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801041a:	2301      	movs	r3, #1
 801041c:	e314      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801041e:	4b32      	ldr	r3, [pc, #200]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	f023 0219 	bic.w	r2, r3, #25
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	68db      	ldr	r3, [r3, #12]
 801042a:	492f      	ldr	r1, [pc, #188]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 801042c:	4313      	orrs	r3, r2
 801042e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010430:	f7f8 f90e 	bl	8008650 <HAL_GetTick>
 8010434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010436:	e008      	b.n	801044a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010438:	f7f8 f90a 	bl	8008650 <HAL_GetTick>
 801043c:	4602      	mov	r2, r0
 801043e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010440:	1ad3      	subs	r3, r2, r3
 8010442:	2b02      	cmp	r3, #2
 8010444:	d901      	bls.n	801044a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8010446:	2303      	movs	r3, #3
 8010448:	e2fe      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801044a:	4b27      	ldr	r3, [pc, #156]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f003 0304 	and.w	r3, r3, #4
 8010452:	2b00      	cmp	r3, #0
 8010454:	d0f0      	beq.n	8010438 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010456:	4b24      	ldr	r3, [pc, #144]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	691b      	ldr	r3, [r3, #16]
 8010462:	061b      	lsls	r3, r3, #24
 8010464:	4920      	ldr	r1, [pc, #128]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010466:	4313      	orrs	r3, r2
 8010468:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801046a:	e045      	b.n	80104f8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	68db      	ldr	r3, [r3, #12]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d026      	beq.n	80104c2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010474:	4b1c      	ldr	r3, [pc, #112]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f023 0219 	bic.w	r2, r3, #25
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	68db      	ldr	r3, [r3, #12]
 8010480:	4919      	ldr	r1, [pc, #100]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 8010482:	4313      	orrs	r3, r2
 8010484:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010486:	f7f8 f8e3 	bl	8008650 <HAL_GetTick>
 801048a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801048c:	e008      	b.n	80104a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801048e:	f7f8 f8df 	bl	8008650 <HAL_GetTick>
 8010492:	4602      	mov	r2, r0
 8010494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010496:	1ad3      	subs	r3, r2, r3
 8010498:	2b02      	cmp	r3, #2
 801049a:	d901      	bls.n	80104a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 801049c:	2303      	movs	r3, #3
 801049e:	e2d3      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80104a0:	4b11      	ldr	r3, [pc, #68]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	f003 0304 	and.w	r3, r3, #4
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d0f0      	beq.n	801048e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80104ac:	4b0e      	ldr	r3, [pc, #56]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	691b      	ldr	r3, [r3, #16]
 80104b8:	061b      	lsls	r3, r3, #24
 80104ba:	490b      	ldr	r1, [pc, #44]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 80104bc:	4313      	orrs	r3, r2
 80104be:	604b      	str	r3, [r1, #4]
 80104c0:	e01a      	b.n	80104f8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80104c2:	4b09      	ldr	r3, [pc, #36]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	4a08      	ldr	r2, [pc, #32]	@ (80104e8 <HAL_RCC_OscConfig+0x244>)
 80104c8:	f023 0301 	bic.w	r3, r3, #1
 80104cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80104ce:	f7f8 f8bf 	bl	8008650 <HAL_GetTick>
 80104d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80104d4:	e00a      	b.n	80104ec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80104d6:	f7f8 f8bb 	bl	8008650 <HAL_GetTick>
 80104da:	4602      	mov	r2, r0
 80104dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104de:	1ad3      	subs	r3, r2, r3
 80104e0:	2b02      	cmp	r3, #2
 80104e2:	d903      	bls.n	80104ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80104e4:	2303      	movs	r3, #3
 80104e6:	e2af      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
 80104e8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80104ec:	4b96      	ldr	r3, [pc, #600]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f003 0304 	and.w	r3, r3, #4
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d1ee      	bne.n	80104d6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	f003 0310 	and.w	r3, r3, #16
 8010500:	2b00      	cmp	r3, #0
 8010502:	d06a      	beq.n	80105da <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010504:	4b90      	ldr	r3, [pc, #576]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010506:	691b      	ldr	r3, [r3, #16]
 8010508:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801050c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801050e:	4b8e      	ldr	r3, [pc, #568]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010512:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010514:	69bb      	ldr	r3, [r7, #24]
 8010516:	2b08      	cmp	r3, #8
 8010518:	d007      	beq.n	801052a <HAL_RCC_OscConfig+0x286>
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	2b18      	cmp	r3, #24
 801051e:	d11b      	bne.n	8010558 <HAL_RCC_OscConfig+0x2b4>
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	f003 0303 	and.w	r3, r3, #3
 8010526:	2b01      	cmp	r3, #1
 8010528:	d116      	bne.n	8010558 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801052a:	4b87      	ldr	r3, [pc, #540]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010532:	2b00      	cmp	r3, #0
 8010534:	d005      	beq.n	8010542 <HAL_RCC_OscConfig+0x29e>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	69db      	ldr	r3, [r3, #28]
 801053a:	2b80      	cmp	r3, #128	@ 0x80
 801053c:	d001      	beq.n	8010542 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801053e:	2301      	movs	r3, #1
 8010540:	e282      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010542:	4b81      	ldr	r3, [pc, #516]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010544:	68db      	ldr	r3, [r3, #12]
 8010546:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6a1b      	ldr	r3, [r3, #32]
 801054e:	061b      	lsls	r3, r3, #24
 8010550:	497d      	ldr	r1, [pc, #500]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010552:	4313      	orrs	r3, r2
 8010554:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010556:	e040      	b.n	80105da <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	69db      	ldr	r3, [r3, #28]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d023      	beq.n	80105a8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8010560:	4b79      	ldr	r3, [pc, #484]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	4a78      	ldr	r2, [pc, #480]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801056a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801056c:	f7f8 f870 	bl	8008650 <HAL_GetTick>
 8010570:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010572:	e008      	b.n	8010586 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8010574:	f7f8 f86c 	bl	8008650 <HAL_GetTick>
 8010578:	4602      	mov	r2, r0
 801057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801057c:	1ad3      	subs	r3, r2, r3
 801057e:	2b02      	cmp	r3, #2
 8010580:	d901      	bls.n	8010586 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8010582:	2303      	movs	r3, #3
 8010584:	e260      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010586:	4b70      	ldr	r3, [pc, #448]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801058e:	2b00      	cmp	r3, #0
 8010590:	d0f0      	beq.n	8010574 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010592:	4b6d      	ldr	r3, [pc, #436]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6a1b      	ldr	r3, [r3, #32]
 801059e:	061b      	lsls	r3, r3, #24
 80105a0:	4969      	ldr	r1, [pc, #420]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 80105a2:	4313      	orrs	r3, r2
 80105a4:	60cb      	str	r3, [r1, #12]
 80105a6:	e018      	b.n	80105da <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80105a8:	4b67      	ldr	r3, [pc, #412]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	4a66      	ldr	r2, [pc, #408]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 80105ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80105b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80105b4:	f7f8 f84c 	bl	8008650 <HAL_GetTick>
 80105b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80105ba:	e008      	b.n	80105ce <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80105bc:	f7f8 f848 	bl	8008650 <HAL_GetTick>
 80105c0:	4602      	mov	r2, r0
 80105c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	2b02      	cmp	r3, #2
 80105c8:	d901      	bls.n	80105ce <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80105ca:	2303      	movs	r3, #3
 80105cc:	e23c      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80105ce:	4b5e      	ldr	r3, [pc, #376]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d1f0      	bne.n	80105bc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	f003 0308 	and.w	r3, r3, #8
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d036      	beq.n	8010654 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	695b      	ldr	r3, [r3, #20]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d019      	beq.n	8010622 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80105ee:	4b56      	ldr	r3, [pc, #344]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 80105f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105f2:	4a55      	ldr	r2, [pc, #340]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 80105f4:	f043 0301 	orr.w	r3, r3, #1
 80105f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80105fa:	f7f8 f829 	bl	8008650 <HAL_GetTick>
 80105fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010600:	e008      	b.n	8010614 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010602:	f7f8 f825 	bl	8008650 <HAL_GetTick>
 8010606:	4602      	mov	r2, r0
 8010608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801060a:	1ad3      	subs	r3, r2, r3
 801060c:	2b02      	cmp	r3, #2
 801060e:	d901      	bls.n	8010614 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8010610:	2303      	movs	r3, #3
 8010612:	e219      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010614:	4b4c      	ldr	r3, [pc, #304]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010618:	f003 0302 	and.w	r3, r3, #2
 801061c:	2b00      	cmp	r3, #0
 801061e:	d0f0      	beq.n	8010602 <HAL_RCC_OscConfig+0x35e>
 8010620:	e018      	b.n	8010654 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010622:	4b49      	ldr	r3, [pc, #292]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010626:	4a48      	ldr	r2, [pc, #288]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010628:	f023 0301 	bic.w	r3, r3, #1
 801062c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801062e:	f7f8 f80f 	bl	8008650 <HAL_GetTick>
 8010632:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010634:	e008      	b.n	8010648 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010636:	f7f8 f80b 	bl	8008650 <HAL_GetTick>
 801063a:	4602      	mov	r2, r0
 801063c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801063e:	1ad3      	subs	r3, r2, r3
 8010640:	2b02      	cmp	r3, #2
 8010642:	d901      	bls.n	8010648 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8010644:	2303      	movs	r3, #3
 8010646:	e1ff      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010648:	4b3f      	ldr	r3, [pc, #252]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 801064a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801064c:	f003 0302 	and.w	r3, r3, #2
 8010650:	2b00      	cmp	r3, #0
 8010652:	d1f0      	bne.n	8010636 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f003 0320 	and.w	r3, r3, #32
 801065c:	2b00      	cmp	r3, #0
 801065e:	d036      	beq.n	80106ce <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	699b      	ldr	r3, [r3, #24]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d019      	beq.n	801069c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010668:	4b37      	ldr	r3, [pc, #220]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4a36      	ldr	r2, [pc, #216]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 801066e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8010672:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010674:	f7f7 ffec 	bl	8008650 <HAL_GetTick>
 8010678:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801067a:	e008      	b.n	801068e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801067c:	f7f7 ffe8 	bl	8008650 <HAL_GetTick>
 8010680:	4602      	mov	r2, r0
 8010682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010684:	1ad3      	subs	r3, r2, r3
 8010686:	2b02      	cmp	r3, #2
 8010688:	d901      	bls.n	801068e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 801068a:	2303      	movs	r3, #3
 801068c:	e1dc      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801068e:	4b2e      	ldr	r3, [pc, #184]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010696:	2b00      	cmp	r3, #0
 8010698:	d0f0      	beq.n	801067c <HAL_RCC_OscConfig+0x3d8>
 801069a:	e018      	b.n	80106ce <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801069c:	4b2a      	ldr	r3, [pc, #168]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	4a29      	ldr	r2, [pc, #164]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 80106a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80106a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80106a8:	f7f7 ffd2 	bl	8008650 <HAL_GetTick>
 80106ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80106ae:	e008      	b.n	80106c2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80106b0:	f7f7 ffce 	bl	8008650 <HAL_GetTick>
 80106b4:	4602      	mov	r2, r0
 80106b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	2b02      	cmp	r3, #2
 80106bc:	d901      	bls.n	80106c2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80106be:	2303      	movs	r3, #3
 80106c0:	e1c2      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80106c2:	4b21      	ldr	r3, [pc, #132]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d1f0      	bne.n	80106b0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f003 0304 	and.w	r3, r3, #4
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f000 8086 	beq.w	80107e8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80106dc:	4b1b      	ldr	r3, [pc, #108]	@ (801074c <HAL_RCC_OscConfig+0x4a8>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a1a      	ldr	r2, [pc, #104]	@ (801074c <HAL_RCC_OscConfig+0x4a8>)
 80106e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80106e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80106e8:	f7f7 ffb2 	bl	8008650 <HAL_GetTick>
 80106ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80106ee:	e008      	b.n	8010702 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80106f0:	f7f7 ffae 	bl	8008650 <HAL_GetTick>
 80106f4:	4602      	mov	r2, r0
 80106f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106f8:	1ad3      	subs	r3, r2, r3
 80106fa:	2b64      	cmp	r3, #100	@ 0x64
 80106fc:	d901      	bls.n	8010702 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80106fe:	2303      	movs	r3, #3
 8010700:	e1a2      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010702:	4b12      	ldr	r3, [pc, #72]	@ (801074c <HAL_RCC_OscConfig+0x4a8>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801070a:	2b00      	cmp	r3, #0
 801070c:	d0f0      	beq.n	80106f0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	2b01      	cmp	r3, #1
 8010714:	d106      	bne.n	8010724 <HAL_RCC_OscConfig+0x480>
 8010716:	4b0c      	ldr	r3, [pc, #48]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801071a:	4a0b      	ldr	r2, [pc, #44]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 801071c:	f043 0301 	orr.w	r3, r3, #1
 8010720:	6713      	str	r3, [r2, #112]	@ 0x70
 8010722:	e032      	b.n	801078a <HAL_RCC_OscConfig+0x4e6>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	689b      	ldr	r3, [r3, #8]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d111      	bne.n	8010750 <HAL_RCC_OscConfig+0x4ac>
 801072c:	4b06      	ldr	r3, [pc, #24]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 801072e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010730:	4a05      	ldr	r2, [pc, #20]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 8010732:	f023 0301 	bic.w	r3, r3, #1
 8010736:	6713      	str	r3, [r2, #112]	@ 0x70
 8010738:	4b03      	ldr	r3, [pc, #12]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 801073a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801073c:	4a02      	ldr	r2, [pc, #8]	@ (8010748 <HAL_RCC_OscConfig+0x4a4>)
 801073e:	f023 0304 	bic.w	r3, r3, #4
 8010742:	6713      	str	r3, [r2, #112]	@ 0x70
 8010744:	e021      	b.n	801078a <HAL_RCC_OscConfig+0x4e6>
 8010746:	bf00      	nop
 8010748:	58024400 	.word	0x58024400
 801074c:	58024800 	.word	0x58024800
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	2b05      	cmp	r3, #5
 8010756:	d10c      	bne.n	8010772 <HAL_RCC_OscConfig+0x4ce>
 8010758:	4b83      	ldr	r3, [pc, #524]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 801075a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801075c:	4a82      	ldr	r2, [pc, #520]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 801075e:	f043 0304 	orr.w	r3, r3, #4
 8010762:	6713      	str	r3, [r2, #112]	@ 0x70
 8010764:	4b80      	ldr	r3, [pc, #512]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010768:	4a7f      	ldr	r2, [pc, #508]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 801076a:	f043 0301 	orr.w	r3, r3, #1
 801076e:	6713      	str	r3, [r2, #112]	@ 0x70
 8010770:	e00b      	b.n	801078a <HAL_RCC_OscConfig+0x4e6>
 8010772:	4b7d      	ldr	r3, [pc, #500]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010776:	4a7c      	ldr	r2, [pc, #496]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010778:	f023 0301 	bic.w	r3, r3, #1
 801077c:	6713      	str	r3, [r2, #112]	@ 0x70
 801077e:	4b7a      	ldr	r3, [pc, #488]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010782:	4a79      	ldr	r2, [pc, #484]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010784:	f023 0304 	bic.w	r3, r3, #4
 8010788:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	689b      	ldr	r3, [r3, #8]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d015      	beq.n	80107be <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010792:	f7f7 ff5d 	bl	8008650 <HAL_GetTick>
 8010796:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010798:	e00a      	b.n	80107b0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801079a:	f7f7 ff59 	bl	8008650 <HAL_GetTick>
 801079e:	4602      	mov	r2, r0
 80107a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a2:	1ad3      	subs	r3, r2, r3
 80107a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d901      	bls.n	80107b0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80107ac:	2303      	movs	r3, #3
 80107ae:	e14b      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80107b0:	4b6d      	ldr	r3, [pc, #436]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80107b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107b4:	f003 0302 	and.w	r3, r3, #2
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d0ee      	beq.n	801079a <HAL_RCC_OscConfig+0x4f6>
 80107bc:	e014      	b.n	80107e8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80107be:	f7f7 ff47 	bl	8008650 <HAL_GetTick>
 80107c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80107c4:	e00a      	b.n	80107dc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80107c6:	f7f7 ff43 	bl	8008650 <HAL_GetTick>
 80107ca:	4602      	mov	r2, r0
 80107cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ce:	1ad3      	subs	r3, r2, r3
 80107d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d901      	bls.n	80107dc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80107d8:	2303      	movs	r3, #3
 80107da:	e135      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80107dc:	4b62      	ldr	r3, [pc, #392]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80107de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107e0:	f003 0302 	and.w	r3, r3, #2
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d1ee      	bne.n	80107c6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	f000 812a 	beq.w	8010a46 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80107f2:	4b5d      	ldr	r3, [pc, #372]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80107f4:	691b      	ldr	r3, [r3, #16]
 80107f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80107fa:	2b18      	cmp	r3, #24
 80107fc:	f000 80ba 	beq.w	8010974 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010804:	2b02      	cmp	r3, #2
 8010806:	f040 8095 	bne.w	8010934 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801080a:	4b57      	ldr	r3, [pc, #348]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	4a56      	ldr	r2, [pc, #344]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010810:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010816:	f7f7 ff1b 	bl	8008650 <HAL_GetTick>
 801081a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801081c:	e008      	b.n	8010830 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801081e:	f7f7 ff17 	bl	8008650 <HAL_GetTick>
 8010822:	4602      	mov	r2, r0
 8010824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010826:	1ad3      	subs	r3, r2, r3
 8010828:	2b02      	cmp	r3, #2
 801082a:	d901      	bls.n	8010830 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 801082c:	2303      	movs	r3, #3
 801082e:	e10b      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010830:	4b4d      	ldr	r3, [pc, #308]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010838:	2b00      	cmp	r3, #0
 801083a:	d1f0      	bne.n	801081e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801083c:	4b4a      	ldr	r3, [pc, #296]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 801083e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010840:	4b4a      	ldr	r3, [pc, #296]	@ (801096c <HAL_RCC_OscConfig+0x6c8>)
 8010842:	4013      	ands	r3, r2
 8010844:	687a      	ldr	r2, [r7, #4]
 8010846:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8010848:	687a      	ldr	r2, [r7, #4]
 801084a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801084c:	0112      	lsls	r2, r2, #4
 801084e:	430a      	orrs	r2, r1
 8010850:	4945      	ldr	r1, [pc, #276]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010852:	4313      	orrs	r3, r2
 8010854:	628b      	str	r3, [r1, #40]	@ 0x28
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801085a:	3b01      	subs	r3, #1
 801085c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010864:	3b01      	subs	r3, #1
 8010866:	025b      	lsls	r3, r3, #9
 8010868:	b29b      	uxth	r3, r3
 801086a:	431a      	orrs	r2, r3
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010870:	3b01      	subs	r3, #1
 8010872:	041b      	lsls	r3, r3, #16
 8010874:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010878:	431a      	orrs	r2, r3
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801087e:	3b01      	subs	r3, #1
 8010880:	061b      	lsls	r3, r3, #24
 8010882:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010886:	4938      	ldr	r1, [pc, #224]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010888:	4313      	orrs	r3, r2
 801088a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801088c:	4b36      	ldr	r3, [pc, #216]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 801088e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010890:	4a35      	ldr	r2, [pc, #212]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010892:	f023 0301 	bic.w	r3, r3, #1
 8010896:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010898:	4b33      	ldr	r3, [pc, #204]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 801089a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801089c:	4b34      	ldr	r3, [pc, #208]	@ (8010970 <HAL_RCC_OscConfig+0x6cc>)
 801089e:	4013      	ands	r3, r2
 80108a0:	687a      	ldr	r2, [r7, #4]
 80108a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80108a4:	00d2      	lsls	r2, r2, #3
 80108a6:	4930      	ldr	r1, [pc, #192]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80108a8:	4313      	orrs	r3, r2
 80108aa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80108ac:	4b2e      	ldr	r3, [pc, #184]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80108ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108b0:	f023 020c 	bic.w	r2, r3, #12
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108b8:	492b      	ldr	r1, [pc, #172]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80108ba:	4313      	orrs	r3, r2
 80108bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80108be:	4b2a      	ldr	r3, [pc, #168]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80108c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108c2:	f023 0202 	bic.w	r2, r3, #2
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108ca:	4927      	ldr	r1, [pc, #156]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80108cc:	4313      	orrs	r3, r2
 80108ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80108d0:	4b25      	ldr	r3, [pc, #148]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80108d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108d4:	4a24      	ldr	r2, [pc, #144]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80108d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80108da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80108dc:	4b22      	ldr	r3, [pc, #136]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80108de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108e0:	4a21      	ldr	r2, [pc, #132]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80108e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80108e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80108e8:	4b1f      	ldr	r3, [pc, #124]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80108ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108ec:	4a1e      	ldr	r2, [pc, #120]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80108ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80108f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80108f4:	4b1c      	ldr	r3, [pc, #112]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80108f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108f8:	4a1b      	ldr	r2, [pc, #108]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 80108fa:	f043 0301 	orr.w	r3, r3, #1
 80108fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010900:	4b19      	ldr	r3, [pc, #100]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4a18      	ldr	r2, [pc, #96]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801090a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801090c:	f7f7 fea0 	bl	8008650 <HAL_GetTick>
 8010910:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010912:	e008      	b.n	8010926 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010914:	f7f7 fe9c 	bl	8008650 <HAL_GetTick>
 8010918:	4602      	mov	r2, r0
 801091a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801091c:	1ad3      	subs	r3, r2, r3
 801091e:	2b02      	cmp	r3, #2
 8010920:	d901      	bls.n	8010926 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8010922:	2303      	movs	r3, #3
 8010924:	e090      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010926:	4b10      	ldr	r3, [pc, #64]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801092e:	2b00      	cmp	r3, #0
 8010930:	d0f0      	beq.n	8010914 <HAL_RCC_OscConfig+0x670>
 8010932:	e088      	b.n	8010a46 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010934:	4b0c      	ldr	r3, [pc, #48]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4a0b      	ldr	r2, [pc, #44]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 801093a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801093e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010940:	f7f7 fe86 	bl	8008650 <HAL_GetTick>
 8010944:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010946:	e008      	b.n	801095a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010948:	f7f7 fe82 	bl	8008650 <HAL_GetTick>
 801094c:	4602      	mov	r2, r0
 801094e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010950:	1ad3      	subs	r3, r2, r3
 8010952:	2b02      	cmp	r3, #2
 8010954:	d901      	bls.n	801095a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8010956:	2303      	movs	r3, #3
 8010958:	e076      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801095a:	4b03      	ldr	r3, [pc, #12]	@ (8010968 <HAL_RCC_OscConfig+0x6c4>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010962:	2b00      	cmp	r3, #0
 8010964:	d1f0      	bne.n	8010948 <HAL_RCC_OscConfig+0x6a4>
 8010966:	e06e      	b.n	8010a46 <HAL_RCC_OscConfig+0x7a2>
 8010968:	58024400 	.word	0x58024400
 801096c:	fffffc0c 	.word	0xfffffc0c
 8010970:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8010974:	4b36      	ldr	r3, [pc, #216]	@ (8010a50 <HAL_RCC_OscConfig+0x7ac>)
 8010976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010978:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801097a:	4b35      	ldr	r3, [pc, #212]	@ (8010a50 <HAL_RCC_OscConfig+0x7ac>)
 801097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801097e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010984:	2b01      	cmp	r3, #1
 8010986:	d031      	beq.n	80109ec <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	f003 0203 	and.w	r2, r3, #3
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010992:	429a      	cmp	r2, r3
 8010994:	d12a      	bne.n	80109ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010996:	693b      	ldr	r3, [r7, #16]
 8010998:	091b      	lsrs	r3, r3, #4
 801099a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d122      	bne.n	80109ec <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80109b2:	429a      	cmp	r2, r3
 80109b4:	d11a      	bne.n	80109ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	0a5b      	lsrs	r3, r3, #9
 80109ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d111      	bne.n	80109ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	0c1b      	lsrs	r3, r3, #16
 80109cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d108      	bne.n	80109ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	0e1b      	lsrs	r3, r3, #24
 80109de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d001      	beq.n	80109f0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80109ec:	2301      	movs	r3, #1
 80109ee:	e02b      	b.n	8010a48 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80109f0:	4b17      	ldr	r3, [pc, #92]	@ (8010a50 <HAL_RCC_OscConfig+0x7ac>)
 80109f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109f4:	08db      	lsrs	r3, r3, #3
 80109f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80109fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010a00:	693a      	ldr	r2, [r7, #16]
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d01f      	beq.n	8010a46 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8010a06:	4b12      	ldr	r3, [pc, #72]	@ (8010a50 <HAL_RCC_OscConfig+0x7ac>)
 8010a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a0a:	4a11      	ldr	r2, [pc, #68]	@ (8010a50 <HAL_RCC_OscConfig+0x7ac>)
 8010a0c:	f023 0301 	bic.w	r3, r3, #1
 8010a10:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010a12:	f7f7 fe1d 	bl	8008650 <HAL_GetTick>
 8010a16:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8010a18:	bf00      	nop
 8010a1a:	f7f7 fe19 	bl	8008650 <HAL_GetTick>
 8010a1e:	4602      	mov	r2, r0
 8010a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d0f9      	beq.n	8010a1a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010a26:	4b0a      	ldr	r3, [pc, #40]	@ (8010a50 <HAL_RCC_OscConfig+0x7ac>)
 8010a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8010a54 <HAL_RCC_OscConfig+0x7b0>)
 8010a2c:	4013      	ands	r3, r2
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8010a32:	00d2      	lsls	r2, r2, #3
 8010a34:	4906      	ldr	r1, [pc, #24]	@ (8010a50 <HAL_RCC_OscConfig+0x7ac>)
 8010a36:	4313      	orrs	r3, r2
 8010a38:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8010a3a:	4b05      	ldr	r3, [pc, #20]	@ (8010a50 <HAL_RCC_OscConfig+0x7ac>)
 8010a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a3e:	4a04      	ldr	r2, [pc, #16]	@ (8010a50 <HAL_RCC_OscConfig+0x7ac>)
 8010a40:	f043 0301 	orr.w	r3, r3, #1
 8010a44:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8010a46:	2300      	movs	r3, #0
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3730      	adds	r7, #48	@ 0x30
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	58024400 	.word	0x58024400
 8010a54:	ffff0007 	.word	0xffff0007

08010a58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b086      	sub	sp, #24
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d101      	bne.n	8010a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	e19c      	b.n	8010da6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010a6c:	4b8a      	ldr	r3, [pc, #552]	@ (8010c98 <HAL_RCC_ClockConfig+0x240>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f003 030f 	and.w	r3, r3, #15
 8010a74:	683a      	ldr	r2, [r7, #0]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d910      	bls.n	8010a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010a7a:	4b87      	ldr	r3, [pc, #540]	@ (8010c98 <HAL_RCC_ClockConfig+0x240>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	f023 020f 	bic.w	r2, r3, #15
 8010a82:	4985      	ldr	r1, [pc, #532]	@ (8010c98 <HAL_RCC_ClockConfig+0x240>)
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	4313      	orrs	r3, r2
 8010a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010a8a:	4b83      	ldr	r3, [pc, #524]	@ (8010c98 <HAL_RCC_ClockConfig+0x240>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f003 030f 	and.w	r3, r3, #15
 8010a92:	683a      	ldr	r2, [r7, #0]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d001      	beq.n	8010a9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010a98:	2301      	movs	r3, #1
 8010a9a:	e184      	b.n	8010da6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f003 0304 	and.w	r3, r3, #4
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d010      	beq.n	8010aca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	691a      	ldr	r2, [r3, #16]
 8010aac:	4b7b      	ldr	r3, [pc, #492]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010aae:	699b      	ldr	r3, [r3, #24]
 8010ab0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d908      	bls.n	8010aca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010ab8:	4b78      	ldr	r3, [pc, #480]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010aba:	699b      	ldr	r3, [r3, #24]
 8010abc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	691b      	ldr	r3, [r3, #16]
 8010ac4:	4975      	ldr	r1, [pc, #468]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010ac6:	4313      	orrs	r3, r2
 8010ac8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	f003 0308 	and.w	r3, r3, #8
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d010      	beq.n	8010af8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	695a      	ldr	r2, [r3, #20]
 8010ada:	4b70      	ldr	r3, [pc, #448]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010adc:	69db      	ldr	r3, [r3, #28]
 8010ade:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d908      	bls.n	8010af8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010ae6:	4b6d      	ldr	r3, [pc, #436]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010ae8:	69db      	ldr	r3, [r3, #28]
 8010aea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	695b      	ldr	r3, [r3, #20]
 8010af2:	496a      	ldr	r1, [pc, #424]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010af4:	4313      	orrs	r3, r2
 8010af6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f003 0310 	and.w	r3, r3, #16
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d010      	beq.n	8010b26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	699a      	ldr	r2, [r3, #24]
 8010b08:	4b64      	ldr	r3, [pc, #400]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010b0a:	69db      	ldr	r3, [r3, #28]
 8010b0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d908      	bls.n	8010b26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010b14:	4b61      	ldr	r3, [pc, #388]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010b16:	69db      	ldr	r3, [r3, #28]
 8010b18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	699b      	ldr	r3, [r3, #24]
 8010b20:	495e      	ldr	r1, [pc, #376]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010b22:	4313      	orrs	r3, r2
 8010b24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	f003 0320 	and.w	r3, r3, #32
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d010      	beq.n	8010b54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	69da      	ldr	r2, [r3, #28]
 8010b36:	4b59      	ldr	r3, [pc, #356]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010b38:	6a1b      	ldr	r3, [r3, #32]
 8010b3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d908      	bls.n	8010b54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8010b42:	4b56      	ldr	r3, [pc, #344]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010b44:	6a1b      	ldr	r3, [r3, #32]
 8010b46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	69db      	ldr	r3, [r3, #28]
 8010b4e:	4953      	ldr	r1, [pc, #332]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010b50:	4313      	orrs	r3, r2
 8010b52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f003 0302 	and.w	r3, r3, #2
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d010      	beq.n	8010b82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	68da      	ldr	r2, [r3, #12]
 8010b64:	4b4d      	ldr	r3, [pc, #308]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010b66:	699b      	ldr	r3, [r3, #24]
 8010b68:	f003 030f 	and.w	r3, r3, #15
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d908      	bls.n	8010b82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010b70:	4b4a      	ldr	r3, [pc, #296]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010b72:	699b      	ldr	r3, [r3, #24]
 8010b74:	f023 020f 	bic.w	r2, r3, #15
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	68db      	ldr	r3, [r3, #12]
 8010b7c:	4947      	ldr	r1, [pc, #284]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f003 0301 	and.w	r3, r3, #1
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d055      	beq.n	8010c3a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8010b8e:	4b43      	ldr	r3, [pc, #268]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010b90:	699b      	ldr	r3, [r3, #24]
 8010b92:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	689b      	ldr	r3, [r3, #8]
 8010b9a:	4940      	ldr	r1, [pc, #256]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010b9c:	4313      	orrs	r3, r2
 8010b9e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	2b02      	cmp	r3, #2
 8010ba6:	d107      	bne.n	8010bb8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d121      	bne.n	8010bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	e0f6      	b.n	8010da6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	685b      	ldr	r3, [r3, #4]
 8010bbc:	2b03      	cmp	r3, #3
 8010bbe:	d107      	bne.n	8010bd0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010bc0:	4b36      	ldr	r3, [pc, #216]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d115      	bne.n	8010bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010bcc:	2301      	movs	r3, #1
 8010bce:	e0ea      	b.n	8010da6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	2b01      	cmp	r3, #1
 8010bd6:	d107      	bne.n	8010be8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010bd8:	4b30      	ldr	r3, [pc, #192]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d109      	bne.n	8010bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010be4:	2301      	movs	r3, #1
 8010be6:	e0de      	b.n	8010da6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010be8:	4b2c      	ldr	r3, [pc, #176]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f003 0304 	and.w	r3, r3, #4
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d101      	bne.n	8010bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	e0d6      	b.n	8010da6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010bf8:	4b28      	ldr	r3, [pc, #160]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010bfa:	691b      	ldr	r3, [r3, #16]
 8010bfc:	f023 0207 	bic.w	r2, r3, #7
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	4925      	ldr	r1, [pc, #148]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010c06:	4313      	orrs	r3, r2
 8010c08:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010c0a:	f7f7 fd21 	bl	8008650 <HAL_GetTick>
 8010c0e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010c10:	e00a      	b.n	8010c28 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c12:	f7f7 fd1d 	bl	8008650 <HAL_GetTick>
 8010c16:	4602      	mov	r2, r0
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	1ad3      	subs	r3, r2, r3
 8010c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d901      	bls.n	8010c28 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8010c24:	2303      	movs	r3, #3
 8010c26:	e0be      	b.n	8010da6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010c28:	4b1c      	ldr	r3, [pc, #112]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010c2a:	691b      	ldr	r3, [r3, #16]
 8010c2c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	00db      	lsls	r3, r3, #3
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d1eb      	bne.n	8010c12 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f003 0302 	and.w	r3, r3, #2
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d010      	beq.n	8010c68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	68da      	ldr	r2, [r3, #12]
 8010c4a:	4b14      	ldr	r3, [pc, #80]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010c4c:	699b      	ldr	r3, [r3, #24]
 8010c4e:	f003 030f 	and.w	r3, r3, #15
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d208      	bcs.n	8010c68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010c56:	4b11      	ldr	r3, [pc, #68]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010c58:	699b      	ldr	r3, [r3, #24]
 8010c5a:	f023 020f 	bic.w	r2, r3, #15
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	490e      	ldr	r1, [pc, #56]	@ (8010c9c <HAL_RCC_ClockConfig+0x244>)
 8010c64:	4313      	orrs	r3, r2
 8010c66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010c68:	4b0b      	ldr	r3, [pc, #44]	@ (8010c98 <HAL_RCC_ClockConfig+0x240>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	f003 030f 	and.w	r3, r3, #15
 8010c70:	683a      	ldr	r2, [r7, #0]
 8010c72:	429a      	cmp	r2, r3
 8010c74:	d214      	bcs.n	8010ca0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010c76:	4b08      	ldr	r3, [pc, #32]	@ (8010c98 <HAL_RCC_ClockConfig+0x240>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f023 020f 	bic.w	r2, r3, #15
 8010c7e:	4906      	ldr	r1, [pc, #24]	@ (8010c98 <HAL_RCC_ClockConfig+0x240>)
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	4313      	orrs	r3, r2
 8010c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010c86:	4b04      	ldr	r3, [pc, #16]	@ (8010c98 <HAL_RCC_ClockConfig+0x240>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f003 030f 	and.w	r3, r3, #15
 8010c8e:	683a      	ldr	r2, [r7, #0]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d005      	beq.n	8010ca0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8010c94:	2301      	movs	r3, #1
 8010c96:	e086      	b.n	8010da6 <HAL_RCC_ClockConfig+0x34e>
 8010c98:	52002000 	.word	0x52002000
 8010c9c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	f003 0304 	and.w	r3, r3, #4
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d010      	beq.n	8010cce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	691a      	ldr	r2, [r3, #16]
 8010cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010cb2:	699b      	ldr	r3, [r3, #24]
 8010cb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d208      	bcs.n	8010cce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010cbc:	4b3c      	ldr	r3, [pc, #240]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010cbe:	699b      	ldr	r3, [r3, #24]
 8010cc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	691b      	ldr	r3, [r3, #16]
 8010cc8:	4939      	ldr	r1, [pc, #228]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010cca:	4313      	orrs	r3, r2
 8010ccc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f003 0308 	and.w	r3, r3, #8
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d010      	beq.n	8010cfc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	695a      	ldr	r2, [r3, #20]
 8010cde:	4b34      	ldr	r3, [pc, #208]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010ce0:	69db      	ldr	r3, [r3, #28]
 8010ce2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d208      	bcs.n	8010cfc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010cea:	4b31      	ldr	r3, [pc, #196]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010cec:	69db      	ldr	r3, [r3, #28]
 8010cee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	695b      	ldr	r3, [r3, #20]
 8010cf6:	492e      	ldr	r1, [pc, #184]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	f003 0310 	and.w	r3, r3, #16
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d010      	beq.n	8010d2a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	699a      	ldr	r2, [r3, #24]
 8010d0c:	4b28      	ldr	r3, [pc, #160]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010d0e:	69db      	ldr	r3, [r3, #28]
 8010d10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010d14:	429a      	cmp	r2, r3
 8010d16:	d208      	bcs.n	8010d2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010d18:	4b25      	ldr	r3, [pc, #148]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010d1a:	69db      	ldr	r3, [r3, #28]
 8010d1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	699b      	ldr	r3, [r3, #24]
 8010d24:	4922      	ldr	r1, [pc, #136]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010d26:	4313      	orrs	r3, r2
 8010d28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f003 0320 	and.w	r3, r3, #32
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d010      	beq.n	8010d58 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	69da      	ldr	r2, [r3, #28]
 8010d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010d3c:	6a1b      	ldr	r3, [r3, #32]
 8010d3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d208      	bcs.n	8010d58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8010d46:	4b1a      	ldr	r3, [pc, #104]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010d48:	6a1b      	ldr	r3, [r3, #32]
 8010d4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	69db      	ldr	r3, [r3, #28]
 8010d52:	4917      	ldr	r1, [pc, #92]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010d54:	4313      	orrs	r3, r2
 8010d56:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010d58:	f000 f834 	bl	8010dc4 <HAL_RCC_GetSysClockFreq>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	4b14      	ldr	r3, [pc, #80]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010d60:	699b      	ldr	r3, [r3, #24]
 8010d62:	0a1b      	lsrs	r3, r3, #8
 8010d64:	f003 030f 	and.w	r3, r3, #15
 8010d68:	4912      	ldr	r1, [pc, #72]	@ (8010db4 <HAL_RCC_ClockConfig+0x35c>)
 8010d6a:	5ccb      	ldrb	r3, [r1, r3]
 8010d6c:	f003 031f 	and.w	r3, r3, #31
 8010d70:	fa22 f303 	lsr.w	r3, r2, r3
 8010d74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010d76:	4b0e      	ldr	r3, [pc, #56]	@ (8010db0 <HAL_RCC_ClockConfig+0x358>)
 8010d78:	699b      	ldr	r3, [r3, #24]
 8010d7a:	f003 030f 	and.w	r3, r3, #15
 8010d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8010db4 <HAL_RCC_ClockConfig+0x35c>)
 8010d80:	5cd3      	ldrb	r3, [r2, r3]
 8010d82:	f003 031f 	and.w	r3, r3, #31
 8010d86:	693a      	ldr	r2, [r7, #16]
 8010d88:	fa22 f303 	lsr.w	r3, r2, r3
 8010d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8010db8 <HAL_RCC_ClockConfig+0x360>)
 8010d8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010d90:	4a0a      	ldr	r2, [pc, #40]	@ (8010dbc <HAL_RCC_ClockConfig+0x364>)
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8010d96:	4b0a      	ldr	r3, [pc, #40]	@ (8010dc0 <HAL_RCC_ClockConfig+0x368>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7f7 fc0e 	bl	80085bc <HAL_InitTick>
 8010da0:	4603      	mov	r3, r0
 8010da2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8010da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3718      	adds	r7, #24
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	58024400 	.word	0x58024400
 8010db4:	0801e168 	.word	0x0801e168
 8010db8:	24000008 	.word	0x24000008
 8010dbc:	24000004 	.word	0x24000004
 8010dc0:	2400000c 	.word	0x2400000c

08010dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b089      	sub	sp, #36	@ 0x24
 8010dc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010dca:	4bb3      	ldr	r3, [pc, #716]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010dcc:	691b      	ldr	r3, [r3, #16]
 8010dce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010dd2:	2b18      	cmp	r3, #24
 8010dd4:	f200 8155 	bhi.w	8011082 <HAL_RCC_GetSysClockFreq+0x2be>
 8010dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8010de0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8010dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dde:	bf00      	nop
 8010de0:	08010e45 	.word	0x08010e45
 8010de4:	08011083 	.word	0x08011083
 8010de8:	08011083 	.word	0x08011083
 8010dec:	08011083 	.word	0x08011083
 8010df0:	08011083 	.word	0x08011083
 8010df4:	08011083 	.word	0x08011083
 8010df8:	08011083 	.word	0x08011083
 8010dfc:	08011083 	.word	0x08011083
 8010e00:	08010e6b 	.word	0x08010e6b
 8010e04:	08011083 	.word	0x08011083
 8010e08:	08011083 	.word	0x08011083
 8010e0c:	08011083 	.word	0x08011083
 8010e10:	08011083 	.word	0x08011083
 8010e14:	08011083 	.word	0x08011083
 8010e18:	08011083 	.word	0x08011083
 8010e1c:	08011083 	.word	0x08011083
 8010e20:	08010e71 	.word	0x08010e71
 8010e24:	08011083 	.word	0x08011083
 8010e28:	08011083 	.word	0x08011083
 8010e2c:	08011083 	.word	0x08011083
 8010e30:	08011083 	.word	0x08011083
 8010e34:	08011083 	.word	0x08011083
 8010e38:	08011083 	.word	0x08011083
 8010e3c:	08011083 	.word	0x08011083
 8010e40:	08010e77 	.word	0x08010e77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e44:	4b94      	ldr	r3, [pc, #592]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	f003 0320 	and.w	r3, r3, #32
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d009      	beq.n	8010e64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e50:	4b91      	ldr	r3, [pc, #580]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	08db      	lsrs	r3, r3, #3
 8010e56:	f003 0303 	and.w	r3, r3, #3
 8010e5a:	4a90      	ldr	r2, [pc, #576]	@ (801109c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8010e60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8010e62:	e111      	b.n	8011088 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8010e64:	4b8d      	ldr	r3, [pc, #564]	@ (801109c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010e66:	61bb      	str	r3, [r7, #24]
      break;
 8010e68:	e10e      	b.n	8011088 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8010e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80110a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010e6c:	61bb      	str	r3, [r7, #24]
      break;
 8010e6e:	e10b      	b.n	8011088 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8010e70:	4b8c      	ldr	r3, [pc, #560]	@ (80110a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8010e72:	61bb      	str	r3, [r7, #24]
      break;
 8010e74:	e108      	b.n	8011088 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010e76:	4b88      	ldr	r3, [pc, #544]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e7a:	f003 0303 	and.w	r3, r3, #3
 8010e7e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8010e80:	4b85      	ldr	r3, [pc, #532]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e84:	091b      	lsrs	r3, r3, #4
 8010e86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010e8a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8010e8c:	4b82      	ldr	r3, [pc, #520]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e90:	f003 0301 	and.w	r3, r3, #1
 8010e94:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010e96:	4b80      	ldr	r3, [pc, #512]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e9a:	08db      	lsrs	r3, r3, #3
 8010e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ea0:	68fa      	ldr	r2, [r7, #12]
 8010ea2:	fb02 f303 	mul.w	r3, r2, r3
 8010ea6:	ee07 3a90 	vmov	s15, r3
 8010eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	f000 80e1 	beq.w	801107c <HAL_RCC_GetSysClockFreq+0x2b8>
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	2b02      	cmp	r3, #2
 8010ebe:	f000 8083 	beq.w	8010fc8 <HAL_RCC_GetSysClockFreq+0x204>
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	2b02      	cmp	r3, #2
 8010ec6:	f200 80a1 	bhi.w	801100c <HAL_RCC_GetSysClockFreq+0x248>
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d003      	beq.n	8010ed8 <HAL_RCC_GetSysClockFreq+0x114>
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	d056      	beq.n	8010f84 <HAL_RCC_GetSysClockFreq+0x1c0>
 8010ed6:	e099      	b.n	801100c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	f003 0320 	and.w	r3, r3, #32
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d02d      	beq.n	8010f40 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ee4:	4b6c      	ldr	r3, [pc, #432]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	08db      	lsrs	r3, r3, #3
 8010eea:	f003 0303 	and.w	r3, r3, #3
 8010eee:	4a6b      	ldr	r2, [pc, #428]	@ (801109c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8010ef4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	ee07 3a90 	vmov	s15, r3
 8010efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	ee07 3a90 	vmov	s15, r3
 8010f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f0e:	4b62      	ldr	r3, [pc, #392]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f16:	ee07 3a90 	vmov	s15, r3
 8010f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8010f22:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80110a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8010f3e:	e087      	b.n	8011050 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	ee07 3a90 	vmov	s15, r3
 8010f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f4a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80110ac <HAL_RCC_GetSysClockFreq+0x2e8>
 8010f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f52:	4b51      	ldr	r3, [pc, #324]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f5a:	ee07 3a90 	vmov	s15, r3
 8010f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8010f66:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80110a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8010f82:	e065      	b.n	8011050 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	ee07 3a90 	vmov	s15, r3
 8010f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f8e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80110b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8010f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f96:	4b40      	ldr	r3, [pc, #256]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f9e:	ee07 3a90 	vmov	s15, r3
 8010fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8010faa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80110a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8010fc6:	e043      	b.n	8011050 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010fc8:	693b      	ldr	r3, [r7, #16]
 8010fca:	ee07 3a90 	vmov	s15, r3
 8010fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fd2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80110b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8010fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010fda:	4b2f      	ldr	r3, [pc, #188]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fe2:	ee07 3a90 	vmov	s15, r3
 8010fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8010fee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80110a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801100a:	e021      	b.n	8011050 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	ee07 3a90 	vmov	s15, r3
 8011012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011016:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80110b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801101a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801101e:	4b1e      	ldr	r3, [pc, #120]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011026:	ee07 3a90 	vmov	s15, r3
 801102a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801102e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011032:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80110a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801103a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801103e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011046:	ee67 7a27 	vmul.f32	s15, s14, s15
 801104a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801104e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011050:	4b11      	ldr	r3, [pc, #68]	@ (8011098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011054:	0a5b      	lsrs	r3, r3, #9
 8011056:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801105a:	3301      	adds	r3, #1
 801105c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	ee07 3a90 	vmov	s15, r3
 8011064:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011068:	edd7 6a07 	vldr	s13, [r7, #28]
 801106c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011074:	ee17 3a90 	vmov	r3, s15
 8011078:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801107a:	e005      	b.n	8011088 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801107c:	2300      	movs	r3, #0
 801107e:	61bb      	str	r3, [r7, #24]
      break;
 8011080:	e002      	b.n	8011088 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011082:	4b07      	ldr	r3, [pc, #28]	@ (80110a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011084:	61bb      	str	r3, [r7, #24]
      break;
 8011086:	bf00      	nop
  }

  return sysclockfreq;
 8011088:	69bb      	ldr	r3, [r7, #24]
}
 801108a:	4618      	mov	r0, r3
 801108c:	3724      	adds	r7, #36	@ 0x24
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop
 8011098:	58024400 	.word	0x58024400
 801109c:	03d09000 	.word	0x03d09000
 80110a0:	003d0900 	.word	0x003d0900
 80110a4:	016e3600 	.word	0x016e3600
 80110a8:	46000000 	.word	0x46000000
 80110ac:	4c742400 	.word	0x4c742400
 80110b0:	4a742400 	.word	0x4a742400
 80110b4:	4bb71b00 	.word	0x4bb71b00

080110b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b082      	sub	sp, #8
 80110bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80110be:	f7ff fe81 	bl	8010dc4 <HAL_RCC_GetSysClockFreq>
 80110c2:	4602      	mov	r2, r0
 80110c4:	4b10      	ldr	r3, [pc, #64]	@ (8011108 <HAL_RCC_GetHCLKFreq+0x50>)
 80110c6:	699b      	ldr	r3, [r3, #24]
 80110c8:	0a1b      	lsrs	r3, r3, #8
 80110ca:	f003 030f 	and.w	r3, r3, #15
 80110ce:	490f      	ldr	r1, [pc, #60]	@ (801110c <HAL_RCC_GetHCLKFreq+0x54>)
 80110d0:	5ccb      	ldrb	r3, [r1, r3]
 80110d2:	f003 031f 	and.w	r3, r3, #31
 80110d6:	fa22 f303 	lsr.w	r3, r2, r3
 80110da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80110dc:	4b0a      	ldr	r3, [pc, #40]	@ (8011108 <HAL_RCC_GetHCLKFreq+0x50>)
 80110de:	699b      	ldr	r3, [r3, #24]
 80110e0:	f003 030f 	and.w	r3, r3, #15
 80110e4:	4a09      	ldr	r2, [pc, #36]	@ (801110c <HAL_RCC_GetHCLKFreq+0x54>)
 80110e6:	5cd3      	ldrb	r3, [r2, r3]
 80110e8:	f003 031f 	and.w	r3, r3, #31
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	fa22 f303 	lsr.w	r3, r2, r3
 80110f2:	4a07      	ldr	r2, [pc, #28]	@ (8011110 <HAL_RCC_GetHCLKFreq+0x58>)
 80110f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80110f6:	4a07      	ldr	r2, [pc, #28]	@ (8011114 <HAL_RCC_GetHCLKFreq+0x5c>)
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80110fc:	4b04      	ldr	r3, [pc, #16]	@ (8011110 <HAL_RCC_GetHCLKFreq+0x58>)
 80110fe:	681b      	ldr	r3, [r3, #0]
}
 8011100:	4618      	mov	r0, r3
 8011102:	3708      	adds	r7, #8
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}
 8011108:	58024400 	.word	0x58024400
 801110c:	0801e168 	.word	0x0801e168
 8011110:	24000008 	.word	0x24000008
 8011114:	24000004 	.word	0x24000004

08011118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801111c:	f7ff ffcc 	bl	80110b8 <HAL_RCC_GetHCLKFreq>
 8011120:	4602      	mov	r2, r0
 8011122:	4b06      	ldr	r3, [pc, #24]	@ (801113c <HAL_RCC_GetPCLK1Freq+0x24>)
 8011124:	69db      	ldr	r3, [r3, #28]
 8011126:	091b      	lsrs	r3, r3, #4
 8011128:	f003 0307 	and.w	r3, r3, #7
 801112c:	4904      	ldr	r1, [pc, #16]	@ (8011140 <HAL_RCC_GetPCLK1Freq+0x28>)
 801112e:	5ccb      	ldrb	r3, [r1, r3]
 8011130:	f003 031f 	and.w	r3, r3, #31
 8011134:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011138:	4618      	mov	r0, r3
 801113a:	bd80      	pop	{r7, pc}
 801113c:	58024400 	.word	0x58024400
 8011140:	0801e168 	.word	0x0801e168

08011144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8011148:	f7ff ffb6 	bl	80110b8 <HAL_RCC_GetHCLKFreq>
 801114c:	4602      	mov	r2, r0
 801114e:	4b06      	ldr	r3, [pc, #24]	@ (8011168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011150:	69db      	ldr	r3, [r3, #28]
 8011152:	0a1b      	lsrs	r3, r3, #8
 8011154:	f003 0307 	and.w	r3, r3, #7
 8011158:	4904      	ldr	r1, [pc, #16]	@ (801116c <HAL_RCC_GetPCLK2Freq+0x28>)
 801115a:	5ccb      	ldrb	r3, [r1, r3]
 801115c:	f003 031f 	and.w	r3, r3, #31
 8011160:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011164:	4618      	mov	r0, r3
 8011166:	bd80      	pop	{r7, pc}
 8011168:	58024400 	.word	0x58024400
 801116c:	0801e168 	.word	0x0801e168

08011170 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011174:	b0c6      	sub	sp, #280	@ 0x118
 8011176:	af00      	add	r7, sp, #0
 8011178:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801117c:	2300      	movs	r3, #0
 801117e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011182:	2300      	movs	r3, #0
 8011184:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011190:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8011194:	2500      	movs	r5, #0
 8011196:	ea54 0305 	orrs.w	r3, r4, r5
 801119a:	d049      	beq.n	8011230 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801119c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80111a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80111a6:	d02f      	beq.n	8011208 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80111a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80111ac:	d828      	bhi.n	8011200 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80111ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80111b2:	d01a      	beq.n	80111ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80111b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80111b8:	d822      	bhi.n	8011200 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d003      	beq.n	80111c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80111be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80111c2:	d007      	beq.n	80111d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80111c4:	e01c      	b.n	8011200 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80111c6:	4bab      	ldr	r3, [pc, #684]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80111c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111ca:	4aaa      	ldr	r2, [pc, #680]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80111cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80111d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80111d2:	e01a      	b.n	801120a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80111d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80111d8:	3308      	adds	r3, #8
 80111da:	2102      	movs	r1, #2
 80111dc:	4618      	mov	r0, r3
 80111de:	f002 fa49 	bl	8013674 <RCCEx_PLL2_Config>
 80111e2:	4603      	mov	r3, r0
 80111e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80111e8:	e00f      	b.n	801120a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80111ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80111ee:	3328      	adds	r3, #40	@ 0x28
 80111f0:	2102      	movs	r1, #2
 80111f2:	4618      	mov	r0, r3
 80111f4:	f002 faf0 	bl	80137d8 <RCCEx_PLL3_Config>
 80111f8:	4603      	mov	r3, r0
 80111fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80111fe:	e004      	b.n	801120a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011200:	2301      	movs	r3, #1
 8011202:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011206:	e000      	b.n	801120a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8011208:	bf00      	nop
    }

    if (ret == HAL_OK)
 801120a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801120e:	2b00      	cmp	r3, #0
 8011210:	d10a      	bne.n	8011228 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8011212:	4b98      	ldr	r3, [pc, #608]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011216:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801121a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801121e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011220:	4a94      	ldr	r2, [pc, #592]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011222:	430b      	orrs	r3, r1
 8011224:	6513      	str	r3, [r2, #80]	@ 0x50
 8011226:	e003      	b.n	8011230 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011228:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801122c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8011230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011238:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801123c:	f04f 0900 	mov.w	r9, #0
 8011240:	ea58 0309 	orrs.w	r3, r8, r9
 8011244:	d047      	beq.n	80112d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8011246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801124a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801124c:	2b04      	cmp	r3, #4
 801124e:	d82a      	bhi.n	80112a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8011250:	a201      	add	r2, pc, #4	@ (adr r2, 8011258 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8011252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011256:	bf00      	nop
 8011258:	0801126d 	.word	0x0801126d
 801125c:	0801127b 	.word	0x0801127b
 8011260:	08011291 	.word	0x08011291
 8011264:	080112af 	.word	0x080112af
 8011268:	080112af 	.word	0x080112af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801126c:	4b81      	ldr	r3, [pc, #516]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801126e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011270:	4a80      	ldr	r2, [pc, #512]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011278:	e01a      	b.n	80112b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801127a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801127e:	3308      	adds	r3, #8
 8011280:	2100      	movs	r1, #0
 8011282:	4618      	mov	r0, r3
 8011284:	f002 f9f6 	bl	8013674 <RCCEx_PLL2_Config>
 8011288:	4603      	mov	r3, r0
 801128a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801128e:	e00f      	b.n	80112b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011294:	3328      	adds	r3, #40	@ 0x28
 8011296:	2100      	movs	r1, #0
 8011298:	4618      	mov	r0, r3
 801129a:	f002 fa9d 	bl	80137d8 <RCCEx_PLL3_Config>
 801129e:	4603      	mov	r3, r0
 80112a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80112a4:	e004      	b.n	80112b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80112a6:	2301      	movs	r3, #1
 80112a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80112ac:	e000      	b.n	80112b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80112ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80112b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d10a      	bne.n	80112ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80112b8:	4b6e      	ldr	r3, [pc, #440]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80112ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80112bc:	f023 0107 	bic.w	r1, r3, #7
 80112c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80112c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112c6:	4a6b      	ldr	r2, [pc, #428]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80112c8:	430b      	orrs	r3, r1
 80112ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80112cc:	e003      	b.n	80112d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80112ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80112d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80112d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80112da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112de:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80112e2:	f04f 0b00 	mov.w	fp, #0
 80112e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80112ea:	d05b      	beq.n	80113a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80112ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80112f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80112f4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80112f8:	d03b      	beq.n	8011372 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80112fa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80112fe:	d834      	bhi.n	801136a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011300:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011304:	d037      	beq.n	8011376 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8011306:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801130a:	d82e      	bhi.n	801136a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801130c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011310:	d033      	beq.n	801137a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8011312:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011316:	d828      	bhi.n	801136a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011318:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801131c:	d01a      	beq.n	8011354 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 801131e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011322:	d822      	bhi.n	801136a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011324:	2b00      	cmp	r3, #0
 8011326:	d003      	beq.n	8011330 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8011328:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801132c:	d007      	beq.n	801133e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 801132e:	e01c      	b.n	801136a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011330:	4b50      	ldr	r3, [pc, #320]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011334:	4a4f      	ldr	r2, [pc, #316]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801133a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801133c:	e01e      	b.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801133e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011342:	3308      	adds	r3, #8
 8011344:	2100      	movs	r1, #0
 8011346:	4618      	mov	r0, r3
 8011348:	f002 f994 	bl	8013674 <RCCEx_PLL2_Config>
 801134c:	4603      	mov	r3, r0
 801134e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011352:	e013      	b.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011358:	3328      	adds	r3, #40	@ 0x28
 801135a:	2100      	movs	r1, #0
 801135c:	4618      	mov	r0, r3
 801135e:	f002 fa3b 	bl	80137d8 <RCCEx_PLL3_Config>
 8011362:	4603      	mov	r3, r0
 8011364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011368:	e008      	b.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801136a:	2301      	movs	r3, #1
 801136c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011370:	e004      	b.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011372:	bf00      	nop
 8011374:	e002      	b.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011376:	bf00      	nop
 8011378:	e000      	b.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801137a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801137c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011380:	2b00      	cmp	r3, #0
 8011382:	d10b      	bne.n	801139c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011384:	4b3b      	ldr	r3, [pc, #236]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011388:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801138c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011390:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011394:	4a37      	ldr	r2, [pc, #220]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011396:	430b      	orrs	r3, r1
 8011398:	6593      	str	r3, [r2, #88]	@ 0x58
 801139a:	e003      	b.n	80113a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801139c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80113a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80113a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80113a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80113b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80113b4:	2300      	movs	r3, #0
 80113b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80113ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80113be:	460b      	mov	r3, r1
 80113c0:	4313      	orrs	r3, r2
 80113c2:	d05d      	beq.n	8011480 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80113c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80113c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80113cc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80113d0:	d03b      	beq.n	801144a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80113d2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80113d6:	d834      	bhi.n	8011442 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80113d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80113dc:	d037      	beq.n	801144e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80113de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80113e2:	d82e      	bhi.n	8011442 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80113e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80113e8:	d033      	beq.n	8011452 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80113ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80113ee:	d828      	bhi.n	8011442 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80113f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80113f4:	d01a      	beq.n	801142c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80113f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80113fa:	d822      	bhi.n	8011442 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d003      	beq.n	8011408 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011400:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011404:	d007      	beq.n	8011416 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8011406:	e01c      	b.n	8011442 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011408:	4b1a      	ldr	r3, [pc, #104]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801140a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801140c:	4a19      	ldr	r2, [pc, #100]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801140e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011414:	e01e      	b.n	8011454 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801141a:	3308      	adds	r3, #8
 801141c:	2100      	movs	r1, #0
 801141e:	4618      	mov	r0, r3
 8011420:	f002 f928 	bl	8013674 <RCCEx_PLL2_Config>
 8011424:	4603      	mov	r3, r0
 8011426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801142a:	e013      	b.n	8011454 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801142c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011430:	3328      	adds	r3, #40	@ 0x28
 8011432:	2100      	movs	r1, #0
 8011434:	4618      	mov	r0, r3
 8011436:	f002 f9cf 	bl	80137d8 <RCCEx_PLL3_Config>
 801143a:	4603      	mov	r3, r0
 801143c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011440:	e008      	b.n	8011454 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011442:	2301      	movs	r3, #1
 8011444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011448:	e004      	b.n	8011454 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801144a:	bf00      	nop
 801144c:	e002      	b.n	8011454 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801144e:	bf00      	nop
 8011450:	e000      	b.n	8011454 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011458:	2b00      	cmp	r3, #0
 801145a:	d10d      	bne.n	8011478 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801145c:	4b05      	ldr	r3, [pc, #20]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801145e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011460:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8011464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011468:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801146c:	4a01      	ldr	r2, [pc, #4]	@ (8011474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801146e:	430b      	orrs	r3, r1
 8011470:	6593      	str	r3, [r2, #88]	@ 0x58
 8011472:	e005      	b.n	8011480 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8011474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011478:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801147c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8011480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011488:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801148c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8011490:	2300      	movs	r3, #0
 8011492:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8011496:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801149a:	460b      	mov	r3, r1
 801149c:	4313      	orrs	r3, r2
 801149e:	d03a      	beq.n	8011516 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80114a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80114a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114a6:	2b30      	cmp	r3, #48	@ 0x30
 80114a8:	d01f      	beq.n	80114ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80114aa:	2b30      	cmp	r3, #48	@ 0x30
 80114ac:	d819      	bhi.n	80114e2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80114ae:	2b20      	cmp	r3, #32
 80114b0:	d00c      	beq.n	80114cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80114b2:	2b20      	cmp	r3, #32
 80114b4:	d815      	bhi.n	80114e2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d019      	beq.n	80114ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80114ba:	2b10      	cmp	r3, #16
 80114bc:	d111      	bne.n	80114e2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80114be:	4baa      	ldr	r3, [pc, #680]	@ (8011768 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80114c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114c2:	4aa9      	ldr	r2, [pc, #676]	@ (8011768 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80114c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80114c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80114ca:	e011      	b.n	80114f0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80114cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80114d0:	3308      	adds	r3, #8
 80114d2:	2102      	movs	r1, #2
 80114d4:	4618      	mov	r0, r3
 80114d6:	f002 f8cd 	bl	8013674 <RCCEx_PLL2_Config>
 80114da:	4603      	mov	r3, r0
 80114dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80114e0:	e006      	b.n	80114f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80114e2:	2301      	movs	r3, #1
 80114e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80114e8:	e002      	b.n	80114f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80114ea:	bf00      	nop
 80114ec:	e000      	b.n	80114f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80114ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80114f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d10a      	bne.n	801150e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80114f8:	4b9b      	ldr	r3, [pc, #620]	@ (8011768 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80114fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8011500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011506:	4a98      	ldr	r2, [pc, #608]	@ (8011768 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011508:	430b      	orrs	r3, r1
 801150a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801150c:	e003      	b.n	8011516 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801150e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011512:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801151e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8011522:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011526:	2300      	movs	r3, #0
 8011528:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801152c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8011530:	460b      	mov	r3, r1
 8011532:	4313      	orrs	r3, r2
 8011534:	d051      	beq.n	80115da <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8011536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801153a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801153c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011540:	d035      	beq.n	80115ae <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8011542:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011546:	d82e      	bhi.n	80115a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011548:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801154c:	d031      	beq.n	80115b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 801154e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011552:	d828      	bhi.n	80115a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011558:	d01a      	beq.n	8011590 <HAL_RCCEx_PeriphCLKConfig+0x420>
 801155a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801155e:	d822      	bhi.n	80115a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011560:	2b00      	cmp	r3, #0
 8011562:	d003      	beq.n	801156c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8011564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011568:	d007      	beq.n	801157a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 801156a:	e01c      	b.n	80115a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801156c:	4b7e      	ldr	r3, [pc, #504]	@ (8011768 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011570:	4a7d      	ldr	r2, [pc, #500]	@ (8011768 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011576:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8011578:	e01c      	b.n	80115b4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801157a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801157e:	3308      	adds	r3, #8
 8011580:	2100      	movs	r1, #0
 8011582:	4618      	mov	r0, r3
 8011584:	f002 f876 	bl	8013674 <RCCEx_PLL2_Config>
 8011588:	4603      	mov	r3, r0
 801158a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801158e:	e011      	b.n	80115b4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011594:	3328      	adds	r3, #40	@ 0x28
 8011596:	2100      	movs	r1, #0
 8011598:	4618      	mov	r0, r3
 801159a:	f002 f91d 	bl	80137d8 <RCCEx_PLL3_Config>
 801159e:	4603      	mov	r3, r0
 80115a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80115a4:	e006      	b.n	80115b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80115a6:	2301      	movs	r3, #1
 80115a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80115ac:	e002      	b.n	80115b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80115ae:	bf00      	nop
 80115b0:	e000      	b.n	80115b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80115b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80115b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d10a      	bne.n	80115d2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80115bc:	4b6a      	ldr	r3, [pc, #424]	@ (8011768 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80115be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80115c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80115c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80115c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80115ca:	4a67      	ldr	r2, [pc, #412]	@ (8011768 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80115cc:	430b      	orrs	r3, r1
 80115ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80115d0:	e003      	b.n	80115da <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80115d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80115d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80115da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80115de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80115e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80115ea:	2300      	movs	r3, #0
 80115ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80115f0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80115f4:	460b      	mov	r3, r1
 80115f6:	4313      	orrs	r3, r2
 80115f8:	d053      	beq.n	80116a2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80115fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80115fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011604:	d033      	beq.n	801166e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8011606:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801160a:	d82c      	bhi.n	8011666 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801160c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011610:	d02f      	beq.n	8011672 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8011612:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011616:	d826      	bhi.n	8011666 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011618:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801161c:	d02b      	beq.n	8011676 <HAL_RCCEx_PeriphCLKConfig+0x506>
 801161e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011622:	d820      	bhi.n	8011666 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011624:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011628:	d012      	beq.n	8011650 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 801162a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801162e:	d81a      	bhi.n	8011666 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011630:	2b00      	cmp	r3, #0
 8011632:	d022      	beq.n	801167a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8011634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011638:	d115      	bne.n	8011666 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801163a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801163e:	3308      	adds	r3, #8
 8011640:	2101      	movs	r1, #1
 8011642:	4618      	mov	r0, r3
 8011644:	f002 f816 	bl	8013674 <RCCEx_PLL2_Config>
 8011648:	4603      	mov	r3, r0
 801164a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801164e:	e015      	b.n	801167c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011654:	3328      	adds	r3, #40	@ 0x28
 8011656:	2101      	movs	r1, #1
 8011658:	4618      	mov	r0, r3
 801165a:	f002 f8bd 	bl	80137d8 <RCCEx_PLL3_Config>
 801165e:	4603      	mov	r3, r0
 8011660:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8011664:	e00a      	b.n	801167c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011666:	2301      	movs	r3, #1
 8011668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801166c:	e006      	b.n	801167c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801166e:	bf00      	nop
 8011670:	e004      	b.n	801167c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011672:	bf00      	nop
 8011674:	e002      	b.n	801167c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011676:	bf00      	nop
 8011678:	e000      	b.n	801167c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801167a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801167c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011680:	2b00      	cmp	r3, #0
 8011682:	d10a      	bne.n	801169a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8011684:	4b38      	ldr	r3, [pc, #224]	@ (8011768 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011688:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801168c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011692:	4a35      	ldr	r2, [pc, #212]	@ (8011768 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011694:	430b      	orrs	r3, r1
 8011696:	6513      	str	r3, [r2, #80]	@ 0x50
 8011698:	e003      	b.n	80116a2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801169a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801169e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80116a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116aa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80116ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80116b2:	2300      	movs	r3, #0
 80116b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80116b8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80116bc:	460b      	mov	r3, r1
 80116be:	4313      	orrs	r3, r2
 80116c0:	d058      	beq.n	8011774 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80116c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80116ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80116ce:	d033      	beq.n	8011738 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80116d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80116d4:	d82c      	bhi.n	8011730 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80116d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80116da:	d02f      	beq.n	801173c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80116dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80116e0:	d826      	bhi.n	8011730 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80116e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80116e6:	d02b      	beq.n	8011740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80116e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80116ec:	d820      	bhi.n	8011730 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80116ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80116f2:	d012      	beq.n	801171a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80116f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80116f8:	d81a      	bhi.n	8011730 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d022      	beq.n	8011744 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80116fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011702:	d115      	bne.n	8011730 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011708:	3308      	adds	r3, #8
 801170a:	2101      	movs	r1, #1
 801170c:	4618      	mov	r0, r3
 801170e:	f001 ffb1 	bl	8013674 <RCCEx_PLL2_Config>
 8011712:	4603      	mov	r3, r0
 8011714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8011718:	e015      	b.n	8011746 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801171a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801171e:	3328      	adds	r3, #40	@ 0x28
 8011720:	2101      	movs	r1, #1
 8011722:	4618      	mov	r0, r3
 8011724:	f002 f858 	bl	80137d8 <RCCEx_PLL3_Config>
 8011728:	4603      	mov	r3, r0
 801172a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801172e:	e00a      	b.n	8011746 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8011730:	2301      	movs	r3, #1
 8011732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011736:	e006      	b.n	8011746 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011738:	bf00      	nop
 801173a:	e004      	b.n	8011746 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801173c:	bf00      	nop
 801173e:	e002      	b.n	8011746 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011740:	bf00      	nop
 8011742:	e000      	b.n	8011746 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011746:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801174a:	2b00      	cmp	r3, #0
 801174c:	d10e      	bne.n	801176c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801174e:	4b06      	ldr	r3, [pc, #24]	@ (8011768 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011752:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8011756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801175a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801175e:	4a02      	ldr	r2, [pc, #8]	@ (8011768 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011760:	430b      	orrs	r3, r1
 8011762:	6593      	str	r3, [r2, #88]	@ 0x58
 8011764:	e006      	b.n	8011774 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8011766:	bf00      	nop
 8011768:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801176c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011770:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8011774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8011780:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011784:	2300      	movs	r3, #0
 8011786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801178a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801178e:	460b      	mov	r3, r1
 8011790:	4313      	orrs	r3, r2
 8011792:	d037      	beq.n	8011804 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8011794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801179a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801179e:	d00e      	beq.n	80117be <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80117a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80117a4:	d816      	bhi.n	80117d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d018      	beq.n	80117dc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80117aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80117ae:	d111      	bne.n	80117d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80117b0:	4bc4      	ldr	r3, [pc, #784]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80117b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117b4:	4ac3      	ldr	r2, [pc, #780]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80117b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80117ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80117bc:	e00f      	b.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80117be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80117c2:	3308      	adds	r3, #8
 80117c4:	2101      	movs	r1, #1
 80117c6:	4618      	mov	r0, r3
 80117c8:	f001 ff54 	bl	8013674 <RCCEx_PLL2_Config>
 80117cc:	4603      	mov	r3, r0
 80117ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80117d2:	e004      	b.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80117d4:	2301      	movs	r3, #1
 80117d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80117da:	e000      	b.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80117dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80117de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d10a      	bne.n	80117fc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80117e6:	4bb7      	ldr	r3, [pc, #732]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80117e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80117ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80117f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117f4:	4ab3      	ldr	r2, [pc, #716]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80117f6:	430b      	orrs	r3, r1
 80117f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80117fa:	e003      	b.n	8011804 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80117fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8011804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8011810:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011814:	2300      	movs	r3, #0
 8011816:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801181a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801181e:	460b      	mov	r3, r1
 8011820:	4313      	orrs	r3, r2
 8011822:	d039      	beq.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8011824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801182a:	2b03      	cmp	r3, #3
 801182c:	d81c      	bhi.n	8011868 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801182e:	a201      	add	r2, pc, #4	@ (adr r2, 8011834 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8011830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011834:	08011871 	.word	0x08011871
 8011838:	08011845 	.word	0x08011845
 801183c:	08011853 	.word	0x08011853
 8011840:	08011871 	.word	0x08011871
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011844:	4b9f      	ldr	r3, [pc, #636]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011848:	4a9e      	ldr	r2, [pc, #632]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801184a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801184e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8011850:	e00f      	b.n	8011872 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011856:	3308      	adds	r3, #8
 8011858:	2102      	movs	r1, #2
 801185a:	4618      	mov	r0, r3
 801185c:	f001 ff0a 	bl	8013674 <RCCEx_PLL2_Config>
 8011860:	4603      	mov	r3, r0
 8011862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8011866:	e004      	b.n	8011872 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8011868:	2301      	movs	r3, #1
 801186a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801186e:	e000      	b.n	8011872 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8011870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011872:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011876:	2b00      	cmp	r3, #0
 8011878:	d10a      	bne.n	8011890 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801187a:	4b92      	ldr	r3, [pc, #584]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801187e:	f023 0103 	bic.w	r1, r3, #3
 8011882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011888:	4a8e      	ldr	r2, [pc, #568]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801188a:	430b      	orrs	r3, r1
 801188c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801188e:	e003      	b.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011894:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80118a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80118a8:	2300      	movs	r3, #0
 80118aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80118ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80118b2:	460b      	mov	r3, r1
 80118b4:	4313      	orrs	r3, r2
 80118b6:	f000 8099 	beq.w	80119ec <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80118ba:	4b83      	ldr	r3, [pc, #524]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	4a82      	ldr	r2, [pc, #520]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80118c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80118c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80118c6:	f7f6 fec3 	bl	8008650 <HAL_GetTick>
 80118ca:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80118ce:	e00b      	b.n	80118e8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80118d0:	f7f6 febe 	bl	8008650 <HAL_GetTick>
 80118d4:	4602      	mov	r2, r0
 80118d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80118da:	1ad3      	subs	r3, r2, r3
 80118dc:	2b64      	cmp	r3, #100	@ 0x64
 80118de:	d903      	bls.n	80118e8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80118e0:	2303      	movs	r3, #3
 80118e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80118e6:	e005      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80118e8:	4b77      	ldr	r3, [pc, #476]	@ (8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d0ed      	beq.n	80118d0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80118f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d173      	bne.n	80119e4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80118fc:	4b71      	ldr	r3, [pc, #452]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80118fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011904:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011908:	4053      	eors	r3, r2
 801190a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801190e:	2b00      	cmp	r3, #0
 8011910:	d015      	beq.n	801193e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011912:	4b6c      	ldr	r3, [pc, #432]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801191a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801191e:	4b69      	ldr	r3, [pc, #420]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011922:	4a68      	ldr	r2, [pc, #416]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011928:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801192a:	4b66      	ldr	r3, [pc, #408]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801192c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801192e:	4a65      	ldr	r2, [pc, #404]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011934:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8011936:	4a63      	ldr	r2, [pc, #396]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801193c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801193e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011942:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011946:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801194a:	d118      	bne.n	801197e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801194c:	f7f6 fe80 	bl	8008650 <HAL_GetTick>
 8011950:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011954:	e00d      	b.n	8011972 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011956:	f7f6 fe7b 	bl	8008650 <HAL_GetTick>
 801195a:	4602      	mov	r2, r0
 801195c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8011960:	1ad2      	subs	r2, r2, r3
 8011962:	f241 3388 	movw	r3, #5000	@ 0x1388
 8011966:	429a      	cmp	r2, r3
 8011968:	d903      	bls.n	8011972 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 801196a:	2303      	movs	r3, #3
 801196c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8011970:	e005      	b.n	801197e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011972:	4b54      	ldr	r3, [pc, #336]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011976:	f003 0302 	and.w	r3, r3, #2
 801197a:	2b00      	cmp	r3, #0
 801197c:	d0eb      	beq.n	8011956 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801197e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011982:	2b00      	cmp	r3, #0
 8011984:	d129      	bne.n	80119da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801198a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801198e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011992:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011996:	d10e      	bne.n	80119b6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8011998:	4b4a      	ldr	r3, [pc, #296]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801199a:	691b      	ldr	r3, [r3, #16]
 801199c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80119a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80119a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80119a8:	091a      	lsrs	r2, r3, #4
 80119aa:	4b48      	ldr	r3, [pc, #288]	@ (8011acc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80119ac:	4013      	ands	r3, r2
 80119ae:	4a45      	ldr	r2, [pc, #276]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80119b0:	430b      	orrs	r3, r1
 80119b2:	6113      	str	r3, [r2, #16]
 80119b4:	e005      	b.n	80119c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80119b6:	4b43      	ldr	r3, [pc, #268]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80119b8:	691b      	ldr	r3, [r3, #16]
 80119ba:	4a42      	ldr	r2, [pc, #264]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80119bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80119c0:	6113      	str	r3, [r2, #16]
 80119c2:	4b40      	ldr	r3, [pc, #256]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80119c4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80119c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80119ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80119ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80119d2:	4a3c      	ldr	r2, [pc, #240]	@ (8011ac4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80119d4:	430b      	orrs	r3, r1
 80119d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80119d8:	e008      	b.n	80119ec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80119da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80119de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80119e2:	e003      	b.n	80119ec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80119e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80119e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80119ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80119f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f4:	f002 0301 	and.w	r3, r2, #1
 80119f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80119fc:	2300      	movs	r3, #0
 80119fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011a02:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8011a06:	460b      	mov	r3, r1
 8011a08:	4313      	orrs	r3, r2
 8011a0a:	f000 808f 	beq.w	8011b2c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8011a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a14:	2b28      	cmp	r3, #40	@ 0x28
 8011a16:	d871      	bhi.n	8011afc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8011a18:	a201      	add	r2, pc, #4	@ (adr r2, 8011a20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8011a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a1e:	bf00      	nop
 8011a20:	08011b05 	.word	0x08011b05
 8011a24:	08011afd 	.word	0x08011afd
 8011a28:	08011afd 	.word	0x08011afd
 8011a2c:	08011afd 	.word	0x08011afd
 8011a30:	08011afd 	.word	0x08011afd
 8011a34:	08011afd 	.word	0x08011afd
 8011a38:	08011afd 	.word	0x08011afd
 8011a3c:	08011afd 	.word	0x08011afd
 8011a40:	08011ad1 	.word	0x08011ad1
 8011a44:	08011afd 	.word	0x08011afd
 8011a48:	08011afd 	.word	0x08011afd
 8011a4c:	08011afd 	.word	0x08011afd
 8011a50:	08011afd 	.word	0x08011afd
 8011a54:	08011afd 	.word	0x08011afd
 8011a58:	08011afd 	.word	0x08011afd
 8011a5c:	08011afd 	.word	0x08011afd
 8011a60:	08011ae7 	.word	0x08011ae7
 8011a64:	08011afd 	.word	0x08011afd
 8011a68:	08011afd 	.word	0x08011afd
 8011a6c:	08011afd 	.word	0x08011afd
 8011a70:	08011afd 	.word	0x08011afd
 8011a74:	08011afd 	.word	0x08011afd
 8011a78:	08011afd 	.word	0x08011afd
 8011a7c:	08011afd 	.word	0x08011afd
 8011a80:	08011b05 	.word	0x08011b05
 8011a84:	08011afd 	.word	0x08011afd
 8011a88:	08011afd 	.word	0x08011afd
 8011a8c:	08011afd 	.word	0x08011afd
 8011a90:	08011afd 	.word	0x08011afd
 8011a94:	08011afd 	.word	0x08011afd
 8011a98:	08011afd 	.word	0x08011afd
 8011a9c:	08011afd 	.word	0x08011afd
 8011aa0:	08011b05 	.word	0x08011b05
 8011aa4:	08011afd 	.word	0x08011afd
 8011aa8:	08011afd 	.word	0x08011afd
 8011aac:	08011afd 	.word	0x08011afd
 8011ab0:	08011afd 	.word	0x08011afd
 8011ab4:	08011afd 	.word	0x08011afd
 8011ab8:	08011afd 	.word	0x08011afd
 8011abc:	08011afd 	.word	0x08011afd
 8011ac0:	08011b05 	.word	0x08011b05
 8011ac4:	58024400 	.word	0x58024400
 8011ac8:	58024800 	.word	0x58024800
 8011acc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ad4:	3308      	adds	r3, #8
 8011ad6:	2101      	movs	r1, #1
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f001 fdcb 	bl	8013674 <RCCEx_PLL2_Config>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8011ae4:	e00f      	b.n	8011b06 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011aea:	3328      	adds	r3, #40	@ 0x28
 8011aec:	2101      	movs	r1, #1
 8011aee:	4618      	mov	r0, r3
 8011af0:	f001 fe72 	bl	80137d8 <RCCEx_PLL3_Config>
 8011af4:	4603      	mov	r3, r0
 8011af6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8011afa:	e004      	b.n	8011b06 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011afc:	2301      	movs	r3, #1
 8011afe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011b02:	e000      	b.n	8011b06 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8011b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011b06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d10a      	bne.n	8011b24 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8011b0e:	4bbf      	ldr	r3, [pc, #764]	@ (8011e0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b12:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8011b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b1c:	4abb      	ldr	r2, [pc, #748]	@ (8011e0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011b1e:	430b      	orrs	r3, r1
 8011b20:	6553      	str	r3, [r2, #84]	@ 0x54
 8011b22:	e003      	b.n	8011b2c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011b28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8011b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b34:	f002 0302 	and.w	r3, r2, #2
 8011b38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011b42:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8011b46:	460b      	mov	r3, r1
 8011b48:	4313      	orrs	r3, r2
 8011b4a:	d041      	beq.n	8011bd0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8011b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b52:	2b05      	cmp	r3, #5
 8011b54:	d824      	bhi.n	8011ba0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8011b56:	a201      	add	r2, pc, #4	@ (adr r2, 8011b5c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8011b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b5c:	08011ba9 	.word	0x08011ba9
 8011b60:	08011b75 	.word	0x08011b75
 8011b64:	08011b8b 	.word	0x08011b8b
 8011b68:	08011ba9 	.word	0x08011ba9
 8011b6c:	08011ba9 	.word	0x08011ba9
 8011b70:	08011ba9 	.word	0x08011ba9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b78:	3308      	adds	r3, #8
 8011b7a:	2101      	movs	r1, #1
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f001 fd79 	bl	8013674 <RCCEx_PLL2_Config>
 8011b82:	4603      	mov	r3, r0
 8011b84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8011b88:	e00f      	b.n	8011baa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b8e:	3328      	adds	r3, #40	@ 0x28
 8011b90:	2101      	movs	r1, #1
 8011b92:	4618      	mov	r0, r3
 8011b94:	f001 fe20 	bl	80137d8 <RCCEx_PLL3_Config>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8011b9e:	e004      	b.n	8011baa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011ba6:	e000      	b.n	8011baa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8011ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011baa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d10a      	bne.n	8011bc8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8011bb2:	4b96      	ldr	r3, [pc, #600]	@ (8011e0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011bb6:	f023 0107 	bic.w	r1, r3, #7
 8011bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011bc0:	4a92      	ldr	r2, [pc, #584]	@ (8011e0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011bc2:	430b      	orrs	r3, r1
 8011bc4:	6553      	str	r3, [r2, #84]	@ 0x54
 8011bc6:	e003      	b.n	8011bd0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011bcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd8:	f002 0304 	and.w	r3, r2, #4
 8011bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011be0:	2300      	movs	r3, #0
 8011be2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011be6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8011bea:	460b      	mov	r3, r1
 8011bec:	4313      	orrs	r3, r2
 8011bee:	d044      	beq.n	8011c7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8011bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011bf8:	2b05      	cmp	r3, #5
 8011bfa:	d825      	bhi.n	8011c48 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8011bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8011c04 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8011bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c02:	bf00      	nop
 8011c04:	08011c51 	.word	0x08011c51
 8011c08:	08011c1d 	.word	0x08011c1d
 8011c0c:	08011c33 	.word	0x08011c33
 8011c10:	08011c51 	.word	0x08011c51
 8011c14:	08011c51 	.word	0x08011c51
 8011c18:	08011c51 	.word	0x08011c51
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c20:	3308      	adds	r3, #8
 8011c22:	2101      	movs	r1, #1
 8011c24:	4618      	mov	r0, r3
 8011c26:	f001 fd25 	bl	8013674 <RCCEx_PLL2_Config>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8011c30:	e00f      	b.n	8011c52 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c36:	3328      	adds	r3, #40	@ 0x28
 8011c38:	2101      	movs	r1, #1
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f001 fdcc 	bl	80137d8 <RCCEx_PLL3_Config>
 8011c40:	4603      	mov	r3, r0
 8011c42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8011c46:	e004      	b.n	8011c52 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011c48:	2301      	movs	r3, #1
 8011c4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011c4e:	e000      	b.n	8011c52 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8011c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011c52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d10b      	bne.n	8011c72 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011c5a:	4b6c      	ldr	r3, [pc, #432]	@ (8011e0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011c5e:	f023 0107 	bic.w	r1, r3, #7
 8011c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011c6a:	4a68      	ldr	r2, [pc, #416]	@ (8011e0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011c6c:	430b      	orrs	r3, r1
 8011c6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8011c70:	e003      	b.n	8011c7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011c76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c82:	f002 0320 	and.w	r3, r2, #32
 8011c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011c90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8011c94:	460b      	mov	r3, r1
 8011c96:	4313      	orrs	r3, r2
 8011c98:	d055      	beq.n	8011d46 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8011c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011ca6:	d033      	beq.n	8011d10 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8011ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011cac:	d82c      	bhi.n	8011d08 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8011cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011cb2:	d02f      	beq.n	8011d14 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8011cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011cb8:	d826      	bhi.n	8011d08 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8011cba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011cbe:	d02b      	beq.n	8011d18 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8011cc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011cc4:	d820      	bhi.n	8011d08 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8011cc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011cca:	d012      	beq.n	8011cf2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8011ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011cd0:	d81a      	bhi.n	8011d08 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d022      	beq.n	8011d1c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8011cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011cda:	d115      	bne.n	8011d08 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ce0:	3308      	adds	r3, #8
 8011ce2:	2100      	movs	r1, #0
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f001 fcc5 	bl	8013674 <RCCEx_PLL2_Config>
 8011cea:	4603      	mov	r3, r0
 8011cec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8011cf0:	e015      	b.n	8011d1e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cf6:	3328      	adds	r3, #40	@ 0x28
 8011cf8:	2102      	movs	r1, #2
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f001 fd6c 	bl	80137d8 <RCCEx_PLL3_Config>
 8011d00:	4603      	mov	r3, r0
 8011d02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8011d06:	e00a      	b.n	8011d1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011d08:	2301      	movs	r3, #1
 8011d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011d0e:	e006      	b.n	8011d1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8011d10:	bf00      	nop
 8011d12:	e004      	b.n	8011d1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8011d14:	bf00      	nop
 8011d16:	e002      	b.n	8011d1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8011d18:	bf00      	nop
 8011d1a:	e000      	b.n	8011d1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8011d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011d1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d10b      	bne.n	8011d3e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011d26:	4b39      	ldr	r3, [pc, #228]	@ (8011e0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d2a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8011d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011d36:	4a35      	ldr	r2, [pc, #212]	@ (8011e0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011d38:	430b      	orrs	r3, r1
 8011d3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8011d3c:	e003      	b.n	8011d46 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8011d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8011d52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011d56:	2300      	movs	r3, #0
 8011d58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011d5c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8011d60:	460b      	mov	r3, r1
 8011d62:	4313      	orrs	r3, r2
 8011d64:	d058      	beq.n	8011e18 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8011d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011d6e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8011d72:	d033      	beq.n	8011ddc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8011d74:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8011d78:	d82c      	bhi.n	8011dd4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011d7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011d7e:	d02f      	beq.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8011d80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011d84:	d826      	bhi.n	8011dd4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011d86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011d8a:	d02b      	beq.n	8011de4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8011d8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011d90:	d820      	bhi.n	8011dd4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011d92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011d96:	d012      	beq.n	8011dbe <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8011d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011d9c:	d81a      	bhi.n	8011dd4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d022      	beq.n	8011de8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8011da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011da6:	d115      	bne.n	8011dd4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dac:	3308      	adds	r3, #8
 8011dae:	2100      	movs	r1, #0
 8011db0:	4618      	mov	r0, r3
 8011db2:	f001 fc5f 	bl	8013674 <RCCEx_PLL2_Config>
 8011db6:	4603      	mov	r3, r0
 8011db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8011dbc:	e015      	b.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dc2:	3328      	adds	r3, #40	@ 0x28
 8011dc4:	2102      	movs	r1, #2
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f001 fd06 	bl	80137d8 <RCCEx_PLL3_Config>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8011dd2:	e00a      	b.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011dda:	e006      	b.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8011ddc:	bf00      	nop
 8011dde:	e004      	b.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8011de0:	bf00      	nop
 8011de2:	e002      	b.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8011de4:	bf00      	nop
 8011de6:	e000      	b.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8011de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011dea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d10e      	bne.n	8011e10 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011df2:	4b06      	ldr	r3, [pc, #24]	@ (8011e0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011df6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8011dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011e02:	4a02      	ldr	r2, [pc, #8]	@ (8011e0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011e04:	430b      	orrs	r3, r1
 8011e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8011e08:	e006      	b.n	8011e18 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8011e0a:	bf00      	nop
 8011e0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8011e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e20:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8011e24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011e28:	2300      	movs	r3, #0
 8011e2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011e2e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8011e32:	460b      	mov	r3, r1
 8011e34:	4313      	orrs	r3, r2
 8011e36:	d055      	beq.n	8011ee4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8011e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011e40:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8011e44:	d033      	beq.n	8011eae <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8011e46:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8011e4a:	d82c      	bhi.n	8011ea6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011e50:	d02f      	beq.n	8011eb2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8011e52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011e56:	d826      	bhi.n	8011ea6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011e58:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8011e5c:	d02b      	beq.n	8011eb6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8011e5e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8011e62:	d820      	bhi.n	8011ea6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011e64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011e68:	d012      	beq.n	8011e90 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8011e6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011e6e:	d81a      	bhi.n	8011ea6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d022      	beq.n	8011eba <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8011e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011e78:	d115      	bne.n	8011ea6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e7e:	3308      	adds	r3, #8
 8011e80:	2100      	movs	r1, #0
 8011e82:	4618      	mov	r0, r3
 8011e84:	f001 fbf6 	bl	8013674 <RCCEx_PLL2_Config>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8011e8e:	e015      	b.n	8011ebc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e94:	3328      	adds	r3, #40	@ 0x28
 8011e96:	2102      	movs	r1, #2
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f001 fc9d 	bl	80137d8 <RCCEx_PLL3_Config>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8011ea4:	e00a      	b.n	8011ebc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011eac:	e006      	b.n	8011ebc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8011eae:	bf00      	nop
 8011eb0:	e004      	b.n	8011ebc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8011eb2:	bf00      	nop
 8011eb4:	e002      	b.n	8011ebc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8011eb6:	bf00      	nop
 8011eb8:	e000      	b.n	8011ebc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8011eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d10b      	bne.n	8011edc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8011ec4:	4ba0      	ldr	r3, [pc, #640]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011ec8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8011ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011ed4:	4a9c      	ldr	r2, [pc, #624]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011ed6:	430b      	orrs	r3, r1
 8011ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8011eda:	e003      	b.n	8011ee4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011edc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ee0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8011ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eec:	f002 0308 	and.w	r3, r2, #8
 8011ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011efa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8011efe:	460b      	mov	r3, r1
 8011f00:	4313      	orrs	r3, r2
 8011f02:	d01e      	beq.n	8011f42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8011f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011f10:	d10c      	bne.n	8011f2c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8011f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f16:	3328      	adds	r3, #40	@ 0x28
 8011f18:	2102      	movs	r1, #2
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f001 fc5c 	bl	80137d8 <RCCEx_PLL3_Config>
 8011f20:	4603      	mov	r3, r0
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d002      	beq.n	8011f2c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8011f26:	2301      	movs	r3, #1
 8011f28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8011f2c:	4b86      	ldr	r3, [pc, #536]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011f30:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011f3c:	4a82      	ldr	r2, [pc, #520]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011f3e:	430b      	orrs	r3, r1
 8011f40:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4a:	f002 0310 	and.w	r3, r2, #16
 8011f4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011f52:	2300      	movs	r3, #0
 8011f54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011f58:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8011f5c:	460b      	mov	r3, r1
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	d01e      	beq.n	8011fa0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8011f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011f6e:	d10c      	bne.n	8011f8a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8011f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f74:	3328      	adds	r3, #40	@ 0x28
 8011f76:	2102      	movs	r1, #2
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f001 fc2d 	bl	80137d8 <RCCEx_PLL3_Config>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d002      	beq.n	8011f8a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8011f84:	2301      	movs	r3, #1
 8011f86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011f8a:	4b6f      	ldr	r3, [pc, #444]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8011f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011f9a:	4a6b      	ldr	r2, [pc, #428]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011f9c:	430b      	orrs	r3, r1
 8011f9e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8011fac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011fae:	2300      	movs	r3, #0
 8011fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011fb2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8011fb6:	460b      	mov	r3, r1
 8011fb8:	4313      	orrs	r3, r2
 8011fba:	d03e      	beq.n	801203a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8011fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011fc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011fc8:	d022      	beq.n	8012010 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8011fca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011fce:	d81b      	bhi.n	8012008 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d003      	beq.n	8011fdc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8011fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011fd8:	d00b      	beq.n	8011ff2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8011fda:	e015      	b.n	8012008 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fe0:	3308      	adds	r3, #8
 8011fe2:	2100      	movs	r1, #0
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f001 fb45 	bl	8013674 <RCCEx_PLL2_Config>
 8011fea:	4603      	mov	r3, r0
 8011fec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8011ff0:	e00f      	b.n	8012012 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ff6:	3328      	adds	r3, #40	@ 0x28
 8011ff8:	2102      	movs	r1, #2
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f001 fbec 	bl	80137d8 <RCCEx_PLL3_Config>
 8012000:	4603      	mov	r3, r0
 8012002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012006:	e004      	b.n	8012012 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012008:	2301      	movs	r3, #1
 801200a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801200e:	e000      	b.n	8012012 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012012:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012016:	2b00      	cmp	r3, #0
 8012018:	d10b      	bne.n	8012032 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801201a:	4b4b      	ldr	r3, [pc, #300]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801201e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012026:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801202a:	4a47      	ldr	r2, [pc, #284]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801202c:	430b      	orrs	r3, r1
 801202e:	6593      	str	r3, [r2, #88]	@ 0x58
 8012030:	e003      	b.n	801203a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012032:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012036:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801203a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012042:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012046:	673b      	str	r3, [r7, #112]	@ 0x70
 8012048:	2300      	movs	r3, #0
 801204a:	677b      	str	r3, [r7, #116]	@ 0x74
 801204c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012050:	460b      	mov	r3, r1
 8012052:	4313      	orrs	r3, r2
 8012054:	d03b      	beq.n	80120ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801205a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801205e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012062:	d01f      	beq.n	80120a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012064:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012068:	d818      	bhi.n	801209c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 801206a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801206e:	d003      	beq.n	8012078 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012070:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012074:	d007      	beq.n	8012086 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012076:	e011      	b.n	801209c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012078:	4b33      	ldr	r3, [pc, #204]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801207c:	4a32      	ldr	r2, [pc, #200]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801207e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012082:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012084:	e00f      	b.n	80120a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801208a:	3328      	adds	r3, #40	@ 0x28
 801208c:	2101      	movs	r1, #1
 801208e:	4618      	mov	r0, r3
 8012090:	f001 fba2 	bl	80137d8 <RCCEx_PLL3_Config>
 8012094:	4603      	mov	r3, r0
 8012096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 801209a:	e004      	b.n	80120a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801209c:	2301      	movs	r3, #1
 801209e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80120a2:	e000      	b.n	80120a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80120a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80120a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d10b      	bne.n	80120c6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80120ae:	4b26      	ldr	r3, [pc, #152]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80120b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80120b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80120b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80120be:	4a22      	ldr	r2, [pc, #136]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80120c0:	430b      	orrs	r3, r1
 80120c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80120c4:	e003      	b.n	80120ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80120c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80120ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80120ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80120da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80120dc:	2300      	movs	r3, #0
 80120de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80120e0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80120e4:	460b      	mov	r3, r1
 80120e6:	4313      	orrs	r3, r2
 80120e8:	d034      	beq.n	8012154 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80120ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d003      	beq.n	80120fc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80120f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80120f8:	d007      	beq.n	801210a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80120fa:	e011      	b.n	8012120 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80120fc:	4b12      	ldr	r3, [pc, #72]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80120fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012100:	4a11      	ldr	r2, [pc, #68]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012108:	e00e      	b.n	8012128 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801210a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801210e:	3308      	adds	r3, #8
 8012110:	2102      	movs	r1, #2
 8012112:	4618      	mov	r0, r3
 8012114:	f001 faae 	bl	8013674 <RCCEx_PLL2_Config>
 8012118:	4603      	mov	r3, r0
 801211a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801211e:	e003      	b.n	8012128 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8012120:	2301      	movs	r3, #1
 8012122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801212c:	2b00      	cmp	r3, #0
 801212e:	d10d      	bne.n	801214c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012130:	4b05      	ldr	r3, [pc, #20]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012134:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801213c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801213e:	4a02      	ldr	r2, [pc, #8]	@ (8012148 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012140:	430b      	orrs	r3, r1
 8012142:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012144:	e006      	b.n	8012154 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8012146:	bf00      	nop
 8012148:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801214c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012150:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801215c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8012160:	663b      	str	r3, [r7, #96]	@ 0x60
 8012162:	2300      	movs	r3, #0
 8012164:	667b      	str	r3, [r7, #100]	@ 0x64
 8012166:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801216a:	460b      	mov	r3, r1
 801216c:	4313      	orrs	r3, r2
 801216e:	d00c      	beq.n	801218a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012174:	3328      	adds	r3, #40	@ 0x28
 8012176:	2102      	movs	r1, #2
 8012178:	4618      	mov	r0, r3
 801217a:	f001 fb2d 	bl	80137d8 <RCCEx_PLL3_Config>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d002      	beq.n	801218a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8012184:	2301      	movs	r3, #1
 8012186:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801218a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012192:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8012196:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012198:	2300      	movs	r3, #0
 801219a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801219c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80121a0:	460b      	mov	r3, r1
 80121a2:	4313      	orrs	r3, r2
 80121a4:	d036      	beq.n	8012214 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80121a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80121ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80121b0:	d018      	beq.n	80121e4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80121b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80121b6:	d811      	bhi.n	80121dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80121b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121bc:	d014      	beq.n	80121e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80121be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121c2:	d80b      	bhi.n	80121dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d011      	beq.n	80121ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80121c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80121cc:	d106      	bne.n	80121dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80121ce:	4bb7      	ldr	r3, [pc, #732]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80121d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121d2:	4ab6      	ldr	r2, [pc, #728]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80121d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80121d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80121da:	e008      	b.n	80121ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80121dc:	2301      	movs	r3, #1
 80121de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80121e2:	e004      	b.n	80121ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80121e4:	bf00      	nop
 80121e6:	e002      	b.n	80121ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80121e8:	bf00      	nop
 80121ea:	e000      	b.n	80121ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80121ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80121ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d10a      	bne.n	801220c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80121f6:	4bad      	ldr	r3, [pc, #692]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80121f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80121fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80121fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012202:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012204:	4aa9      	ldr	r2, [pc, #676]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012206:	430b      	orrs	r3, r1
 8012208:	6553      	str	r3, [r2, #84]	@ 0x54
 801220a:	e003      	b.n	8012214 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801220c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012210:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8012214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801221c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8012220:	653b      	str	r3, [r7, #80]	@ 0x50
 8012222:	2300      	movs	r3, #0
 8012224:	657b      	str	r3, [r7, #84]	@ 0x54
 8012226:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801222a:	460b      	mov	r3, r1
 801222c:	4313      	orrs	r3, r2
 801222e:	d009      	beq.n	8012244 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012230:	4b9e      	ldr	r3, [pc, #632]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012234:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801223c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801223e:	4a9b      	ldr	r2, [pc, #620]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012240:	430b      	orrs	r3, r1
 8012242:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8012244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8012250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012252:	2300      	movs	r3, #0
 8012254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012256:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801225a:	460b      	mov	r3, r1
 801225c:	4313      	orrs	r3, r2
 801225e:	d009      	beq.n	8012274 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8012260:	4b92      	ldr	r3, [pc, #584]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012264:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8012268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801226c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801226e:	4a8f      	ldr	r2, [pc, #572]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012270:	430b      	orrs	r3, r1
 8012272:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8012274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801227c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8012280:	643b      	str	r3, [r7, #64]	@ 0x40
 8012282:	2300      	movs	r3, #0
 8012284:	647b      	str	r3, [r7, #68]	@ 0x44
 8012286:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801228a:	460b      	mov	r3, r1
 801228c:	4313      	orrs	r3, r2
 801228e:	d00e      	beq.n	80122ae <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012290:	4b86      	ldr	r3, [pc, #536]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012292:	691b      	ldr	r3, [r3, #16]
 8012294:	4a85      	ldr	r2, [pc, #532]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012296:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801229a:	6113      	str	r3, [r2, #16]
 801229c:	4b83      	ldr	r3, [pc, #524]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801229e:	6919      	ldr	r1, [r3, #16]
 80122a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80122a8:	4a80      	ldr	r2, [pc, #512]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80122aa:	430b      	orrs	r3, r1
 80122ac:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80122ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80122ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80122bc:	2300      	movs	r3, #0
 80122be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80122c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80122c4:	460b      	mov	r3, r1
 80122c6:	4313      	orrs	r3, r2
 80122c8:	d009      	beq.n	80122de <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80122ca:	4b78      	ldr	r3, [pc, #480]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80122cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80122ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80122d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80122d8:	4a74      	ldr	r2, [pc, #464]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80122da:	430b      	orrs	r3, r1
 80122dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80122de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80122ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80122ec:	2300      	movs	r3, #0
 80122ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80122f0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80122f4:	460b      	mov	r3, r1
 80122f6:	4313      	orrs	r3, r2
 80122f8:	d00a      	beq.n	8012310 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80122fa:	4b6c      	ldr	r3, [pc, #432]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80122fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80122fe:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8012302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801230a:	4a68      	ldr	r2, [pc, #416]	@ (80124ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801230c:	430b      	orrs	r3, r1
 801230e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8012310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012318:	2100      	movs	r1, #0
 801231a:	62b9      	str	r1, [r7, #40]	@ 0x28
 801231c:	f003 0301 	and.w	r3, r3, #1
 8012320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012322:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8012326:	460b      	mov	r3, r1
 8012328:	4313      	orrs	r3, r2
 801232a:	d011      	beq.n	8012350 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801232c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012330:	3308      	adds	r3, #8
 8012332:	2100      	movs	r1, #0
 8012334:	4618      	mov	r0, r3
 8012336:	f001 f99d 	bl	8013674 <RCCEx_PLL2_Config>
 801233a:	4603      	mov	r3, r0
 801233c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012344:	2b00      	cmp	r3, #0
 8012346:	d003      	beq.n	8012350 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801234c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8012350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012358:	2100      	movs	r1, #0
 801235a:	6239      	str	r1, [r7, #32]
 801235c:	f003 0302 	and.w	r3, r3, #2
 8012360:	627b      	str	r3, [r7, #36]	@ 0x24
 8012362:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8012366:	460b      	mov	r3, r1
 8012368:	4313      	orrs	r3, r2
 801236a:	d011      	beq.n	8012390 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801236c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012370:	3308      	adds	r3, #8
 8012372:	2101      	movs	r1, #1
 8012374:	4618      	mov	r0, r3
 8012376:	f001 f97d 	bl	8013674 <RCCEx_PLL2_Config>
 801237a:	4603      	mov	r3, r0
 801237c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012384:	2b00      	cmp	r3, #0
 8012386:	d003      	beq.n	8012390 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012388:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801238c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8012390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012398:	2100      	movs	r1, #0
 801239a:	61b9      	str	r1, [r7, #24]
 801239c:	f003 0304 	and.w	r3, r3, #4
 80123a0:	61fb      	str	r3, [r7, #28]
 80123a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80123a6:	460b      	mov	r3, r1
 80123a8:	4313      	orrs	r3, r2
 80123aa:	d011      	beq.n	80123d0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80123ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123b0:	3308      	adds	r3, #8
 80123b2:	2102      	movs	r1, #2
 80123b4:	4618      	mov	r0, r3
 80123b6:	f001 f95d 	bl	8013674 <RCCEx_PLL2_Config>
 80123ba:	4603      	mov	r3, r0
 80123bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80123c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d003      	beq.n	80123d0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80123c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80123d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d8:	2100      	movs	r1, #0
 80123da:	6139      	str	r1, [r7, #16]
 80123dc:	f003 0308 	and.w	r3, r3, #8
 80123e0:	617b      	str	r3, [r7, #20]
 80123e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80123e6:	460b      	mov	r3, r1
 80123e8:	4313      	orrs	r3, r2
 80123ea:	d011      	beq.n	8012410 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80123ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123f0:	3328      	adds	r3, #40	@ 0x28
 80123f2:	2100      	movs	r1, #0
 80123f4:	4618      	mov	r0, r3
 80123f6:	f001 f9ef 	bl	80137d8 <RCCEx_PLL3_Config>
 80123fa:	4603      	mov	r3, r0
 80123fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8012400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012404:	2b00      	cmp	r3, #0
 8012406:	d003      	beq.n	8012410 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801240c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8012410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012418:	2100      	movs	r1, #0
 801241a:	60b9      	str	r1, [r7, #8]
 801241c:	f003 0310 	and.w	r3, r3, #16
 8012420:	60fb      	str	r3, [r7, #12]
 8012422:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8012426:	460b      	mov	r3, r1
 8012428:	4313      	orrs	r3, r2
 801242a:	d011      	beq.n	8012450 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801242c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012430:	3328      	adds	r3, #40	@ 0x28
 8012432:	2101      	movs	r1, #1
 8012434:	4618      	mov	r0, r3
 8012436:	f001 f9cf 	bl	80137d8 <RCCEx_PLL3_Config>
 801243a:	4603      	mov	r3, r0
 801243c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012440:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012444:	2b00      	cmp	r3, #0
 8012446:	d003      	beq.n	8012450 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801244c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8012450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012458:	2100      	movs	r1, #0
 801245a:	6039      	str	r1, [r7, #0]
 801245c:	f003 0320 	and.w	r3, r3, #32
 8012460:	607b      	str	r3, [r7, #4]
 8012462:	e9d7 1200 	ldrd	r1, r2, [r7]
 8012466:	460b      	mov	r3, r1
 8012468:	4313      	orrs	r3, r2
 801246a:	d011      	beq.n	8012490 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801246c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012470:	3328      	adds	r3, #40	@ 0x28
 8012472:	2102      	movs	r1, #2
 8012474:	4618      	mov	r0, r3
 8012476:	f001 f9af 	bl	80137d8 <RCCEx_PLL3_Config>
 801247a:	4603      	mov	r3, r0
 801247c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012480:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012484:	2b00      	cmp	r3, #0
 8012486:	d003      	beq.n	8012490 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801248c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8012490:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8012494:	2b00      	cmp	r3, #0
 8012496:	d101      	bne.n	801249c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8012498:	2300      	movs	r3, #0
 801249a:	e000      	b.n	801249e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 801249c:	2301      	movs	r3, #1
}
 801249e:	4618      	mov	r0, r3
 80124a0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80124a4:	46bd      	mov	sp, r7
 80124a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80124aa:	bf00      	nop
 80124ac:	58024400 	.word	0x58024400

080124b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b090      	sub	sp, #64	@ 0x40
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80124ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80124be:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80124c2:	430b      	orrs	r3, r1
 80124c4:	f040 8094 	bne.w	80125f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80124c8:	4b9b      	ldr	r3, [pc, #620]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80124ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80124cc:	f003 0307 	and.w	r3, r3, #7
 80124d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80124d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124d4:	2b04      	cmp	r3, #4
 80124d6:	f200 8087 	bhi.w	80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80124da:	a201      	add	r2, pc, #4	@ (adr r2, 80124e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80124dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124e0:	080124f5 	.word	0x080124f5
 80124e4:	0801251d 	.word	0x0801251d
 80124e8:	08012545 	.word	0x08012545
 80124ec:	080125e1 	.word	0x080125e1
 80124f0:	0801256d 	.word	0x0801256d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80124f4:	4b90      	ldr	r3, [pc, #576]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80124fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012500:	d108      	bne.n	8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012506:	4618      	mov	r0, r3
 8012508:	f000 ff62 	bl	80133d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801250c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801250e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012510:	f000 bc93 	b.w	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012514:	2300      	movs	r3, #0
 8012516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012518:	f000 bc8f 	b.w	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801251c:	4b86      	ldr	r3, [pc, #536]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012528:	d108      	bne.n	801253c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801252a:	f107 0318 	add.w	r3, r7, #24
 801252e:	4618      	mov	r0, r3
 8012530:	f000 fca6 	bl	8012e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012534:	69bb      	ldr	r3, [r7, #24]
 8012536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012538:	f000 bc7f 	b.w	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801253c:	2300      	movs	r3, #0
 801253e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012540:	f000 bc7b 	b.w	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012544:	4b7c      	ldr	r3, [pc, #496]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801254c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012550:	d108      	bne.n	8012564 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012552:	f107 030c 	add.w	r3, r7, #12
 8012556:	4618      	mov	r0, r3
 8012558:	f000 fde6 	bl	8013128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012560:	f000 bc6b 	b.w	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012564:	2300      	movs	r3, #0
 8012566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012568:	f000 bc67 	b.w	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801256c:	4b72      	ldr	r3, [pc, #456]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801256e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012570:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012574:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012576:	4b70      	ldr	r3, [pc, #448]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	f003 0304 	and.w	r3, r3, #4
 801257e:	2b04      	cmp	r3, #4
 8012580:	d10c      	bne.n	801259c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8012582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012584:	2b00      	cmp	r3, #0
 8012586:	d109      	bne.n	801259c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012588:	4b6b      	ldr	r3, [pc, #428]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	08db      	lsrs	r3, r3, #3
 801258e:	f003 0303 	and.w	r3, r3, #3
 8012592:	4a6a      	ldr	r2, [pc, #424]	@ (801273c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8012594:	fa22 f303 	lsr.w	r3, r2, r3
 8012598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801259a:	e01f      	b.n	80125dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801259c:	4b66      	ldr	r3, [pc, #408]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80125a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80125a8:	d106      	bne.n	80125b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80125aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80125b0:	d102      	bne.n	80125b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80125b2:	4b63      	ldr	r3, [pc, #396]	@ (8012740 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80125b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80125b6:	e011      	b.n	80125dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80125b8:	4b5f      	ldr	r3, [pc, #380]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80125c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80125c4:	d106      	bne.n	80125d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80125c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80125cc:	d102      	bne.n	80125d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80125ce:	4b5d      	ldr	r3, [pc, #372]	@ (8012744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80125d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80125d2:	e003      	b.n	80125dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80125d4:	2300      	movs	r3, #0
 80125d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80125d8:	f000 bc2f 	b.w	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80125dc:	f000 bc2d 	b.w	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80125e0:	4b59      	ldr	r3, [pc, #356]	@ (8012748 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80125e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80125e4:	f000 bc29 	b.w	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80125e8:	2300      	movs	r3, #0
 80125ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80125ec:	f000 bc25 	b.w	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80125f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125f4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80125f8:	430b      	orrs	r3, r1
 80125fa:	f040 80a7 	bne.w	801274c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80125fe:	4b4e      	ldr	r3, [pc, #312]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012602:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8012606:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8012608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801260a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801260e:	d054      	beq.n	80126ba <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8012610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012612:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012616:	f200 808b 	bhi.w	8012730 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801261a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801261c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012620:	f000 8083 	beq.w	801272a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8012624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012626:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801262a:	f200 8081 	bhi.w	8012730 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801262e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012630:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012634:	d02f      	beq.n	8012696 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8012636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012638:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801263c:	d878      	bhi.n	8012730 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801263e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012640:	2b00      	cmp	r3, #0
 8012642:	d004      	beq.n	801264e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8012644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012646:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801264a:	d012      	beq.n	8012672 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 801264c:	e070      	b.n	8012730 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801264e:	4b3a      	ldr	r3, [pc, #232]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012656:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801265a:	d107      	bne.n	801266c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801265c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012660:	4618      	mov	r0, r3
 8012662:	f000 feb5 	bl	80133d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801266a:	e3e6      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801266c:	2300      	movs	r3, #0
 801266e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012670:	e3e3      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012672:	4b31      	ldr	r3, [pc, #196]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801267a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801267e:	d107      	bne.n	8012690 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012680:	f107 0318 	add.w	r3, r7, #24
 8012684:	4618      	mov	r0, r3
 8012686:	f000 fbfb 	bl	8012e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801268a:	69bb      	ldr	r3, [r7, #24]
 801268c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801268e:	e3d4      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012690:	2300      	movs	r3, #0
 8012692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012694:	e3d1      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012696:	4b28      	ldr	r3, [pc, #160]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801269e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80126a2:	d107      	bne.n	80126b4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80126a4:	f107 030c 	add.w	r3, r7, #12
 80126a8:	4618      	mov	r0, r3
 80126aa:	f000 fd3d 	bl	8013128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80126b2:	e3c2      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80126b4:	2300      	movs	r3, #0
 80126b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80126b8:	e3bf      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80126ba:	4b1f      	ldr	r3, [pc, #124]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80126bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80126be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80126c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80126c4:	4b1c      	ldr	r3, [pc, #112]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	f003 0304 	and.w	r3, r3, #4
 80126cc:	2b04      	cmp	r3, #4
 80126ce:	d10c      	bne.n	80126ea <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80126d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d109      	bne.n	80126ea <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80126d6:	4b18      	ldr	r3, [pc, #96]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	08db      	lsrs	r3, r3, #3
 80126dc:	f003 0303 	and.w	r3, r3, #3
 80126e0:	4a16      	ldr	r2, [pc, #88]	@ (801273c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80126e2:	fa22 f303 	lsr.w	r3, r2, r3
 80126e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126e8:	e01e      	b.n	8012728 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80126ea:	4b13      	ldr	r3, [pc, #76]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80126f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80126f6:	d106      	bne.n	8012706 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80126f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80126fe:	d102      	bne.n	8012706 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012700:	4b0f      	ldr	r3, [pc, #60]	@ (8012740 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8012702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012704:	e010      	b.n	8012728 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012706:	4b0c      	ldr	r3, [pc, #48]	@ (8012738 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801270e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012712:	d106      	bne.n	8012722 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8012714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801271a:	d102      	bne.n	8012722 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801271c:	4b09      	ldr	r3, [pc, #36]	@ (8012744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801271e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012720:	e002      	b.n	8012728 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012722:	2300      	movs	r3, #0
 8012724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012726:	e388      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012728:	e387      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801272a:	4b07      	ldr	r3, [pc, #28]	@ (8012748 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801272c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801272e:	e384      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8012730:	2300      	movs	r3, #0
 8012732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012734:	e381      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012736:	bf00      	nop
 8012738:	58024400 	.word	0x58024400
 801273c:	03d09000 	.word	0x03d09000
 8012740:	003d0900 	.word	0x003d0900
 8012744:	016e3600 	.word	0x016e3600
 8012748:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801274c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012750:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8012754:	430b      	orrs	r3, r1
 8012756:	f040 809c 	bne.w	8012892 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801275a:	4b9e      	ldr	r3, [pc, #632]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801275c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801275e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8012762:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8012764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012766:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801276a:	d054      	beq.n	8012816 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801276c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801276e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012772:	f200 808b 	bhi.w	801288c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8012776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012778:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801277c:	f000 8083 	beq.w	8012886 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8012780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012782:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012786:	f200 8081 	bhi.w	801288c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801278a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801278c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012790:	d02f      	beq.n	80127f2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8012792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012794:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012798:	d878      	bhi.n	801288c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801279a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801279c:	2b00      	cmp	r3, #0
 801279e:	d004      	beq.n	80127aa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80127a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80127a6:	d012      	beq.n	80127ce <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80127a8:	e070      	b.n	801288c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80127aa:	4b8a      	ldr	r3, [pc, #552]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80127b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80127b6:	d107      	bne.n	80127c8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80127b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80127bc:	4618      	mov	r0, r3
 80127be:	f000 fe07 	bl	80133d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80127c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80127c6:	e338      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80127c8:	2300      	movs	r3, #0
 80127ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127cc:	e335      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80127ce:	4b81      	ldr	r3, [pc, #516]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80127d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80127da:	d107      	bne.n	80127ec <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80127dc:	f107 0318 	add.w	r3, r7, #24
 80127e0:	4618      	mov	r0, r3
 80127e2:	f000 fb4d 	bl	8012e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80127e6:	69bb      	ldr	r3, [r7, #24]
 80127e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80127ea:	e326      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80127ec:	2300      	movs	r3, #0
 80127ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127f0:	e323      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80127f2:	4b78      	ldr	r3, [pc, #480]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80127fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80127fe:	d107      	bne.n	8012810 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012800:	f107 030c 	add.w	r3, r7, #12
 8012804:	4618      	mov	r0, r3
 8012806:	f000 fc8f 	bl	8013128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801280e:	e314      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012810:	2300      	movs	r3, #0
 8012812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012814:	e311      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012816:	4b6f      	ldr	r3, [pc, #444]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801281a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801281e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012820:	4b6c      	ldr	r3, [pc, #432]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	f003 0304 	and.w	r3, r3, #4
 8012828:	2b04      	cmp	r3, #4
 801282a:	d10c      	bne.n	8012846 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 801282c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801282e:	2b00      	cmp	r3, #0
 8012830:	d109      	bne.n	8012846 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012832:	4b68      	ldr	r3, [pc, #416]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	08db      	lsrs	r3, r3, #3
 8012838:	f003 0303 	and.w	r3, r3, #3
 801283c:	4a66      	ldr	r2, [pc, #408]	@ (80129d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801283e:	fa22 f303 	lsr.w	r3, r2, r3
 8012842:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012844:	e01e      	b.n	8012884 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012846:	4b63      	ldr	r3, [pc, #396]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801284e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012852:	d106      	bne.n	8012862 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8012854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012856:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801285a:	d102      	bne.n	8012862 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801285c:	4b5f      	ldr	r3, [pc, #380]	@ (80129dc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801285e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012860:	e010      	b.n	8012884 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012862:	4b5c      	ldr	r3, [pc, #368]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801286a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801286e:	d106      	bne.n	801287e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8012870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012876:	d102      	bne.n	801287e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012878:	4b59      	ldr	r3, [pc, #356]	@ (80129e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801287a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801287c:	e002      	b.n	8012884 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801287e:	2300      	movs	r3, #0
 8012880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012882:	e2da      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012884:	e2d9      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012886:	4b57      	ldr	r3, [pc, #348]	@ (80129e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8012888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801288a:	e2d6      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801288c:	2300      	movs	r3, #0
 801288e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012890:	e2d3      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8012892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012896:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801289a:	430b      	orrs	r3, r1
 801289c:	f040 80a7 	bne.w	80129ee <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80128a0:	4b4c      	ldr	r3, [pc, #304]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80128a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80128a4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80128a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80128aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80128b0:	d055      	beq.n	801295e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80128b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80128b8:	f200 8096 	bhi.w	80129e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80128bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80128c2:	f000 8084 	beq.w	80129ce <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80128c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80128cc:	f200 808c 	bhi.w	80129e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80128d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80128d6:	d030      	beq.n	801293a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80128d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80128de:	f200 8083 	bhi.w	80129e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80128e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d004      	beq.n	80128f2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80128e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80128ee:	d012      	beq.n	8012916 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80128f0:	e07a      	b.n	80129e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80128f2:	4b38      	ldr	r3, [pc, #224]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80128fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80128fe:	d107      	bne.n	8012910 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012904:	4618      	mov	r0, r3
 8012906:	f000 fd63 	bl	80133d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801290a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801290c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801290e:	e294      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012910:	2300      	movs	r3, #0
 8012912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012914:	e291      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012916:	4b2f      	ldr	r3, [pc, #188]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801291e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012922:	d107      	bne.n	8012934 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012924:	f107 0318 	add.w	r3, r7, #24
 8012928:	4618      	mov	r0, r3
 801292a:	f000 faa9 	bl	8012e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801292e:	69bb      	ldr	r3, [r7, #24]
 8012930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012932:	e282      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012934:	2300      	movs	r3, #0
 8012936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012938:	e27f      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801293a:	4b26      	ldr	r3, [pc, #152]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012942:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012946:	d107      	bne.n	8012958 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012948:	f107 030c 	add.w	r3, r7, #12
 801294c:	4618      	mov	r0, r3
 801294e:	f000 fbeb 	bl	8013128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012956:	e270      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012958:	2300      	movs	r3, #0
 801295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801295c:	e26d      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801295e:	4b1d      	ldr	r3, [pc, #116]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012962:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012966:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012968:	4b1a      	ldr	r3, [pc, #104]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	f003 0304 	and.w	r3, r3, #4
 8012970:	2b04      	cmp	r3, #4
 8012972:	d10c      	bne.n	801298e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8012974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012976:	2b00      	cmp	r3, #0
 8012978:	d109      	bne.n	801298e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801297a:	4b16      	ldr	r3, [pc, #88]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	08db      	lsrs	r3, r3, #3
 8012980:	f003 0303 	and.w	r3, r3, #3
 8012984:	4a14      	ldr	r2, [pc, #80]	@ (80129d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8012986:	fa22 f303 	lsr.w	r3, r2, r3
 801298a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801298c:	e01e      	b.n	80129cc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801298e:	4b11      	ldr	r3, [pc, #68]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801299a:	d106      	bne.n	80129aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 801299c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801299e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80129a2:	d102      	bne.n	80129aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80129a4:	4b0d      	ldr	r3, [pc, #52]	@ (80129dc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80129a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129a8:	e010      	b.n	80129cc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80129aa:	4b0a      	ldr	r3, [pc, #40]	@ (80129d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80129b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80129b6:	d106      	bne.n	80129c6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80129b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80129be:	d102      	bne.n	80129c6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80129c0:	4b07      	ldr	r3, [pc, #28]	@ (80129e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80129c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129c4:	e002      	b.n	80129cc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80129c6:	2300      	movs	r3, #0
 80129c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80129ca:	e236      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80129cc:	e235      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80129ce:	4b05      	ldr	r3, [pc, #20]	@ (80129e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80129d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80129d2:	e232      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80129d4:	58024400 	.word	0x58024400
 80129d8:	03d09000 	.word	0x03d09000
 80129dc:	003d0900 	.word	0x003d0900
 80129e0:	016e3600 	.word	0x016e3600
 80129e4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80129e8:	2300      	movs	r3, #0
 80129ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80129ec:	e225      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80129ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80129f2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80129f6:	430b      	orrs	r3, r1
 80129f8:	f040 8085 	bne.w	8012b06 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80129fc:	4b9c      	ldr	r3, [pc, #624]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80129fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012a00:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8012a04:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8012a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012a0c:	d06b      	beq.n	8012ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8012a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012a14:	d874      	bhi.n	8012b00 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012a1c:	d056      	beq.n	8012acc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8012a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012a24:	d86c      	bhi.n	8012b00 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012a2c:	d03b      	beq.n	8012aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8012a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012a34:	d864      	bhi.n	8012b00 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012a3c:	d021      	beq.n	8012a82 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8012a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012a44:	d85c      	bhi.n	8012b00 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d004      	beq.n	8012a56 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8012a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a52:	d004      	beq.n	8012a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8012a54:	e054      	b.n	8012b00 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8012a56:	f7fe fb5f 	bl	8011118 <HAL_RCC_GetPCLK1Freq>
 8012a5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012a5c:	e1ed      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012a5e:	4b84      	ldr	r3, [pc, #528]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012a66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012a6a:	d107      	bne.n	8012a7c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012a6c:	f107 0318 	add.w	r3, r7, #24
 8012a70:	4618      	mov	r0, r3
 8012a72:	f000 fa05 	bl	8012e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012a76:	69fb      	ldr	r3, [r7, #28]
 8012a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012a7a:	e1de      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a80:	e1db      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012a82:	4b7b      	ldr	r3, [pc, #492]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012a8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012a8e:	d107      	bne.n	8012aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012a90:	f107 030c 	add.w	r3, r7, #12
 8012a94:	4618      	mov	r0, r3
 8012a96:	f000 fb47 	bl	8013128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012a9e:	e1cc      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012aa4:	e1c9      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012aa6:	4b72      	ldr	r3, [pc, #456]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	f003 0304 	and.w	r3, r3, #4
 8012aae:	2b04      	cmp	r3, #4
 8012ab0:	d109      	bne.n	8012ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012ab2:	4b6f      	ldr	r3, [pc, #444]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	08db      	lsrs	r3, r3, #3
 8012ab8:	f003 0303 	and.w	r3, r3, #3
 8012abc:	4a6d      	ldr	r2, [pc, #436]	@ (8012c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8012abe:	fa22 f303 	lsr.w	r3, r2, r3
 8012ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ac4:	e1b9      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012aca:	e1b6      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8012acc:	4b68      	ldr	r3, [pc, #416]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ad8:	d102      	bne.n	8012ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8012ada:	4b67      	ldr	r3, [pc, #412]	@ (8012c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8012adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ade:	e1ac      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ae4:	e1a9      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012ae6:	4b62      	ldr	r3, [pc, #392]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012aee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012af2:	d102      	bne.n	8012afa <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8012af4:	4b61      	ldr	r3, [pc, #388]	@ (8012c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8012af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012af8:	e19f      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012afa:	2300      	movs	r3, #0
 8012afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012afe:	e19c      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8012b00:	2300      	movs	r3, #0
 8012b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b04:	e199      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8012b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b0a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8012b0e:	430b      	orrs	r3, r1
 8012b10:	d173      	bne.n	8012bfa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8012b12:	4b57      	ldr	r3, [pc, #348]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8012b1a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012b22:	d02f      	beq.n	8012b84 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8012b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012b2a:	d863      	bhi.n	8012bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8012b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d004      	beq.n	8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8012b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b38:	d012      	beq.n	8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8012b3a:	e05b      	b.n	8012bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012b3c:	4b4c      	ldr	r3, [pc, #304]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012b44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012b48:	d107      	bne.n	8012b5a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012b4a:	f107 0318 	add.w	r3, r7, #24
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f000 f996 	bl	8012e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012b54:	69bb      	ldr	r3, [r7, #24]
 8012b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012b58:	e16f      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b5e:	e16c      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012b60:	4b43      	ldr	r3, [pc, #268]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b6c:	d107      	bne.n	8012b7e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012b6e:	f107 030c 	add.w	r3, r7, #12
 8012b72:	4618      	mov	r0, r3
 8012b74:	f000 fad8 	bl	8013128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012b7c:	e15d      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b82:	e15a      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012b84:	4b3a      	ldr	r3, [pc, #232]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012b88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012b8c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012b8e:	4b38      	ldr	r3, [pc, #224]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	f003 0304 	and.w	r3, r3, #4
 8012b96:	2b04      	cmp	r3, #4
 8012b98:	d10c      	bne.n	8012bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8012b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d109      	bne.n	8012bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012ba0:	4b33      	ldr	r3, [pc, #204]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	08db      	lsrs	r3, r3, #3
 8012ba6:	f003 0303 	and.w	r3, r3, #3
 8012baa:	4a32      	ldr	r2, [pc, #200]	@ (8012c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8012bac:	fa22 f303 	lsr.w	r3, r2, r3
 8012bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012bb2:	e01e      	b.n	8012bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012bc0:	d106      	bne.n	8012bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8012bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012bc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012bc8:	d102      	bne.n	8012bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012bca:	4b2b      	ldr	r3, [pc, #172]	@ (8012c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8012bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012bce:	e010      	b.n	8012bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012bd0:	4b27      	ldr	r3, [pc, #156]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012bdc:	d106      	bne.n	8012bec <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8012bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012be4:	d102      	bne.n	8012bec <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012be6:	4b25      	ldr	r3, [pc, #148]	@ (8012c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8012be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012bea:	e002      	b.n	8012bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012bec:	2300      	movs	r3, #0
 8012bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012bf0:	e123      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012bf2:	e122      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012bf8:	e11f      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8012bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012bfe:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8012c02:	430b      	orrs	r3, r1
 8012c04:	d13c      	bne.n	8012c80 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8012c06:	4b1a      	ldr	r3, [pc, #104]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012c0e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d004      	beq.n	8012c20 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8012c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012c1c:	d012      	beq.n	8012c44 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8012c1e:	e023      	b.n	8012c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012c20:	4b13      	ldr	r3, [pc, #76]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012c28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012c2c:	d107      	bne.n	8012c3e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012c32:	4618      	mov	r0, r3
 8012c34:	f000 fbcc 	bl	80133d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c3c:	e0fd      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c42:	e0fa      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012c44:	4b0a      	ldr	r3, [pc, #40]	@ (8012c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012c4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012c50:	d107      	bne.n	8012c62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012c52:	f107 0318 	add.w	r3, r7, #24
 8012c56:	4618      	mov	r0, r3
 8012c58:	f000 f912 	bl	8012e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8012c5c:	6a3b      	ldr	r3, [r7, #32]
 8012c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c60:	e0eb      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c62:	2300      	movs	r3, #0
 8012c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c66:	e0e8      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c6c:	e0e5      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012c6e:	bf00      	nop
 8012c70:	58024400 	.word	0x58024400
 8012c74:	03d09000 	.word	0x03d09000
 8012c78:	003d0900 	.word	0x003d0900
 8012c7c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8012c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c84:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8012c88:	430b      	orrs	r3, r1
 8012c8a:	f040 8085 	bne.w	8012d98 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8012c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8012e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012c92:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8012c96:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012c9e:	d06b      	beq.n	8012d78 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8012ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012ca6:	d874      	bhi.n	8012d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8012ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012cae:	d056      	beq.n	8012d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8012cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012cb6:	d86c      	bhi.n	8012d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8012cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012cbe:	d03b      	beq.n	8012d38 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8012cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012cc6:	d864      	bhi.n	8012d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8012cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012cce:	d021      	beq.n	8012d14 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8012cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012cd6:	d85c      	bhi.n	8012d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8012cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d004      	beq.n	8012ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8012cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ce0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012ce4:	d004      	beq.n	8012cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8012ce6:	e054      	b.n	8012d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8012ce8:	f000 f8b4 	bl	8012e54 <HAL_RCCEx_GetD3PCLK1Freq>
 8012cec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012cee:	e0a4      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012cf0:	4b54      	ldr	r3, [pc, #336]	@ (8012e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012cf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012cfc:	d107      	bne.n	8012d0e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012cfe:	f107 0318 	add.w	r3, r7, #24
 8012d02:	4618      	mov	r0, r3
 8012d04:	f000 f8bc 	bl	8012e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012d08:	69fb      	ldr	r3, [r7, #28]
 8012d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012d0c:	e095      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d12:	e092      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012d14:	4b4b      	ldr	r3, [pc, #300]	@ (8012e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012d20:	d107      	bne.n	8012d32 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012d22:	f107 030c 	add.w	r3, r7, #12
 8012d26:	4618      	mov	r0, r3
 8012d28:	f000 f9fe 	bl	8013128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012d2c:	693b      	ldr	r3, [r7, #16]
 8012d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012d30:	e083      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012d32:	2300      	movs	r3, #0
 8012d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d36:	e080      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012d38:	4b42      	ldr	r3, [pc, #264]	@ (8012e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	f003 0304 	and.w	r3, r3, #4
 8012d40:	2b04      	cmp	r3, #4
 8012d42:	d109      	bne.n	8012d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012d44:	4b3f      	ldr	r3, [pc, #252]	@ (8012e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	08db      	lsrs	r3, r3, #3
 8012d4a:	f003 0303 	and.w	r3, r3, #3
 8012d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8012e48 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8012d50:	fa22 f303 	lsr.w	r3, r2, r3
 8012d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012d56:	e070      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012d58:	2300      	movs	r3, #0
 8012d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d5c:	e06d      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8012d5e:	4b39      	ldr	r3, [pc, #228]	@ (8012e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d6a:	d102      	bne.n	8012d72 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8012d6c:	4b37      	ldr	r3, [pc, #220]	@ (8012e4c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8012d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012d70:	e063      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012d72:	2300      	movs	r3, #0
 8012d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d76:	e060      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012d78:	4b32      	ldr	r3, [pc, #200]	@ (8012e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012d84:	d102      	bne.n	8012d8c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8012d86:	4b32      	ldr	r3, [pc, #200]	@ (8012e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8012d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012d8a:	e056      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d90:	e053      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8012d92:	2300      	movs	r3, #0
 8012d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d96:	e050      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8012d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d9c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8012da0:	430b      	orrs	r3, r1
 8012da2:	d148      	bne.n	8012e36 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8012da4:	4b27      	ldr	r3, [pc, #156]	@ (8012e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012da8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012dac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012db0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012db4:	d02a      	beq.n	8012e0c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8012db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012dbc:	d838      	bhi.n	8012e30 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8012dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d004      	beq.n	8012dce <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8012dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012dca:	d00d      	beq.n	8012de8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8012dcc:	e030      	b.n	8012e30 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012dce:	4b1d      	ldr	r3, [pc, #116]	@ (8012e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012dd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012dda:	d102      	bne.n	8012de2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8012ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8012e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8012dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012de0:	e02b      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012de2:	2300      	movs	r3, #0
 8012de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012de6:	e028      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012de8:	4b16      	ldr	r3, [pc, #88]	@ (8012e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012df0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012df4:	d107      	bne.n	8012e06 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f000 fae8 	bl	80133d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012e04:	e019      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012e06:	2300      	movs	r3, #0
 8012e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e0a:	e016      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8012e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012e14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012e18:	d107      	bne.n	8012e2a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012e1a:	f107 0318 	add.w	r3, r7, #24
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f000 f82e 	bl	8012e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012e24:	69fb      	ldr	r3, [r7, #28]
 8012e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012e28:	e007      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e2e:	e004      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8012e30:	2300      	movs	r3, #0
 8012e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e34:	e001      	b.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8012e36:	2300      	movs	r3, #0
 8012e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8012e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	3740      	adds	r7, #64	@ 0x40
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bd80      	pop	{r7, pc}
 8012e44:	58024400 	.word	0x58024400
 8012e48:	03d09000 	.word	0x03d09000
 8012e4c:	003d0900 	.word	0x003d0900
 8012e50:	016e3600 	.word	0x016e3600

08012e54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8012e58:	f7fe f92e 	bl	80110b8 <HAL_RCC_GetHCLKFreq>
 8012e5c:	4602      	mov	r2, r0
 8012e5e:	4b06      	ldr	r3, [pc, #24]	@ (8012e78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8012e60:	6a1b      	ldr	r3, [r3, #32]
 8012e62:	091b      	lsrs	r3, r3, #4
 8012e64:	f003 0307 	and.w	r3, r3, #7
 8012e68:	4904      	ldr	r1, [pc, #16]	@ (8012e7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8012e6a:	5ccb      	ldrb	r3, [r1, r3]
 8012e6c:	f003 031f 	and.w	r3, r3, #31
 8012e70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	bd80      	pop	{r7, pc}
 8012e78:	58024400 	.word	0x58024400
 8012e7c:	0801e168 	.word	0x0801e168

08012e80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8012e80:	b480      	push	{r7}
 8012e82:	b089      	sub	sp, #36	@ 0x24
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012e88:	4ba1      	ldr	r3, [pc, #644]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e8c:	f003 0303 	and.w	r3, r3, #3
 8012e90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8012e92:	4b9f      	ldr	r3, [pc, #636]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e96:	0b1b      	lsrs	r3, r3, #12
 8012e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012e9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8012e9e:	4b9c      	ldr	r3, [pc, #624]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ea2:	091b      	lsrs	r3, r3, #4
 8012ea4:	f003 0301 	and.w	r3, r3, #1
 8012ea8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8012eaa:	4b99      	ldr	r3, [pc, #612]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012eae:	08db      	lsrs	r3, r3, #3
 8012eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012eb4:	693a      	ldr	r2, [r7, #16]
 8012eb6:	fb02 f303 	mul.w	r3, r2, r3
 8012eba:	ee07 3a90 	vmov	s15, r3
 8012ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ec2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	f000 8111 	beq.w	80130f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8012ece:	69bb      	ldr	r3, [r7, #24]
 8012ed0:	2b02      	cmp	r3, #2
 8012ed2:	f000 8083 	beq.w	8012fdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8012ed6:	69bb      	ldr	r3, [r7, #24]
 8012ed8:	2b02      	cmp	r3, #2
 8012eda:	f200 80a1 	bhi.w	8013020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8012ede:	69bb      	ldr	r3, [r7, #24]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d003      	beq.n	8012eec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8012ee4:	69bb      	ldr	r3, [r7, #24]
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	d056      	beq.n	8012f98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8012eea:	e099      	b.n	8013020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012eec:	4b88      	ldr	r3, [pc, #544]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	f003 0320 	and.w	r3, r3, #32
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d02d      	beq.n	8012f54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012ef8:	4b85      	ldr	r3, [pc, #532]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	08db      	lsrs	r3, r3, #3
 8012efe:	f003 0303 	and.w	r3, r3, #3
 8012f02:	4a84      	ldr	r2, [pc, #528]	@ (8013114 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8012f04:	fa22 f303 	lsr.w	r3, r2, r3
 8012f08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	ee07 3a90 	vmov	s15, r3
 8012f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	ee07 3a90 	vmov	s15, r3
 8012f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012f22:	4b7b      	ldr	r3, [pc, #492]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f2a:	ee07 3a90 	vmov	s15, r3
 8012f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8012f36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8012f52:	e087      	b.n	8013064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	ee07 3a90 	vmov	s15, r3
 8012f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012f5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801311c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8012f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012f66:	4b6a      	ldr	r3, [pc, #424]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f6e:	ee07 3a90 	vmov	s15, r3
 8012f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8012f7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012f96:	e065      	b.n	8013064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	ee07 3a90 	vmov	s15, r3
 8012f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012fa2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8012fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012faa:	4b59      	ldr	r3, [pc, #356]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012fb2:	ee07 3a90 	vmov	s15, r3
 8012fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8012fbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012fda:	e043      	b.n	8013064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012fdc:	697b      	ldr	r3, [r7, #20]
 8012fde:	ee07 3a90 	vmov	s15, r3
 8012fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012fe6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013124 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8012fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012fee:	4b48      	ldr	r3, [pc, #288]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ff6:	ee07 3a90 	vmov	s15, r3
 8012ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8013002:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801300a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801300e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013016:	ee67 7a27 	vmul.f32	s15, s14, s15
 801301a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801301e:	e021      	b.n	8013064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	ee07 3a90 	vmov	s15, r3
 8013026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801302a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801302e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013032:	4b37      	ldr	r3, [pc, #220]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801303a:	ee07 3a90 	vmov	s15, r3
 801303e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013042:	ed97 6a03 	vldr	s12, [r7, #12]
 8013046:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801304a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801304e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801305a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801305e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013062:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013064:	4b2a      	ldr	r3, [pc, #168]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013068:	0a5b      	lsrs	r3, r3, #9
 801306a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801306e:	ee07 3a90 	vmov	s15, r3
 8013072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801307a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801307e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801308a:	ee17 2a90 	vmov	r2, s15
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013092:	4b1f      	ldr	r3, [pc, #124]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013096:	0c1b      	lsrs	r3, r3, #16
 8013098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801309c:	ee07 3a90 	vmov	s15, r3
 80130a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80130a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80130ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80130b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80130b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80130b8:	ee17 2a90 	vmov	r2, s15
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80130c0:	4b13      	ldr	r3, [pc, #76]	@ (8013110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80130c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130c4:	0e1b      	lsrs	r3, r3, #24
 80130c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80130ca:	ee07 3a90 	vmov	s15, r3
 80130ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80130d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80130da:	edd7 6a07 	vldr	s13, [r7, #28]
 80130de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80130e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80130e6:	ee17 2a90 	vmov	r2, s15
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80130ee:	e008      	b.n	8013102 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2200      	movs	r2, #0
 80130f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	2200      	movs	r2, #0
 80130fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2200      	movs	r2, #0
 8013100:	609a      	str	r2, [r3, #8]
}
 8013102:	bf00      	nop
 8013104:	3724      	adds	r7, #36	@ 0x24
 8013106:	46bd      	mov	sp, r7
 8013108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310c:	4770      	bx	lr
 801310e:	bf00      	nop
 8013110:	58024400 	.word	0x58024400
 8013114:	03d09000 	.word	0x03d09000
 8013118:	46000000 	.word	0x46000000
 801311c:	4c742400 	.word	0x4c742400
 8013120:	4a742400 	.word	0x4a742400
 8013124:	4bb71b00 	.word	0x4bb71b00

08013128 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8013128:	b480      	push	{r7}
 801312a:	b089      	sub	sp, #36	@ 0x24
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013130:	4ba1      	ldr	r3, [pc, #644]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013134:	f003 0303 	and.w	r3, r3, #3
 8013138:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801313a:	4b9f      	ldr	r3, [pc, #636]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801313c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801313e:	0d1b      	lsrs	r3, r3, #20
 8013140:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013144:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013146:	4b9c      	ldr	r3, [pc, #624]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801314a:	0a1b      	lsrs	r3, r3, #8
 801314c:	f003 0301 	and.w	r3, r3, #1
 8013150:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8013152:	4b99      	ldr	r3, [pc, #612]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013156:	08db      	lsrs	r3, r3, #3
 8013158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801315c:	693a      	ldr	r2, [r7, #16]
 801315e:	fb02 f303 	mul.w	r3, r2, r3
 8013162:	ee07 3a90 	vmov	s15, r3
 8013166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801316a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	2b00      	cmp	r3, #0
 8013172:	f000 8111 	beq.w	8013398 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8013176:	69bb      	ldr	r3, [r7, #24]
 8013178:	2b02      	cmp	r3, #2
 801317a:	f000 8083 	beq.w	8013284 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801317e:	69bb      	ldr	r3, [r7, #24]
 8013180:	2b02      	cmp	r3, #2
 8013182:	f200 80a1 	bhi.w	80132c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013186:	69bb      	ldr	r3, [r7, #24]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d003      	beq.n	8013194 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801318c:	69bb      	ldr	r3, [r7, #24]
 801318e:	2b01      	cmp	r3, #1
 8013190:	d056      	beq.n	8013240 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013192:	e099      	b.n	80132c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013194:	4b88      	ldr	r3, [pc, #544]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	f003 0320 	and.w	r3, r3, #32
 801319c:	2b00      	cmp	r3, #0
 801319e:	d02d      	beq.n	80131fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80131a0:	4b85      	ldr	r3, [pc, #532]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	08db      	lsrs	r3, r3, #3
 80131a6:	f003 0303 	and.w	r3, r3, #3
 80131aa:	4a84      	ldr	r2, [pc, #528]	@ (80133bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80131ac:	fa22 f303 	lsr.w	r3, r2, r3
 80131b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	ee07 3a90 	vmov	s15, r3
 80131b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80131bc:	697b      	ldr	r3, [r7, #20]
 80131be:	ee07 3a90 	vmov	s15, r3
 80131c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80131c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80131ca:	4b7b      	ldr	r3, [pc, #492]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80131cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80131ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131d2:	ee07 3a90 	vmov	s15, r3
 80131d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80131da:	ed97 6a03 	vldr	s12, [r7, #12]
 80131de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80133c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80131e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80131e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80131ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80131ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80131f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80131f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80131fa:	e087      	b.n	801330c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	ee07 3a90 	vmov	s15, r3
 8013202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013206:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80133c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801320e:	4b6a      	ldr	r3, [pc, #424]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013216:	ee07 3a90 	vmov	s15, r3
 801321a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801321e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013222:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80133c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801322a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801322e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013236:	ee67 7a27 	vmul.f32	s15, s14, s15
 801323a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801323e:	e065      	b.n	801330c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	ee07 3a90 	vmov	s15, r3
 8013246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801324a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80133c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801324e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013252:	4b59      	ldr	r3, [pc, #356]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801325a:	ee07 3a90 	vmov	s15, r3
 801325e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013262:	ed97 6a03 	vldr	s12, [r7, #12]
 8013266:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80133c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801326a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801326e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801327a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801327e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013282:	e043      	b.n	801330c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	ee07 3a90 	vmov	s15, r3
 801328a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801328e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80133cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013296:	4b48      	ldr	r3, [pc, #288]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801329a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801329e:	ee07 3a90 	vmov	s15, r3
 80132a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80132a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80132aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80133c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80132ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80132b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80132b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80132ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80132be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80132c6:	e021      	b.n	801330c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	ee07 3a90 	vmov	s15, r3
 80132ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80133c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80132d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80132da:	4b37      	ldr	r3, [pc, #220]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132e2:	ee07 3a90 	vmov	s15, r3
 80132e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80132ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80132ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80133c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80132f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80132f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80132fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80132fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801330a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801330c:	4b2a      	ldr	r3, [pc, #168]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013310:	0a5b      	lsrs	r3, r3, #9
 8013312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013316:	ee07 3a90 	vmov	s15, r3
 801331a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801331e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013322:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013326:	edd7 6a07 	vldr	s13, [r7, #28]
 801332a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801332e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013332:	ee17 2a90 	vmov	r2, s15
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801333a:	4b1f      	ldr	r3, [pc, #124]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801333e:	0c1b      	lsrs	r3, r3, #16
 8013340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013344:	ee07 3a90 	vmov	s15, r3
 8013348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801334c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013350:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013354:	edd7 6a07 	vldr	s13, [r7, #28]
 8013358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801335c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013360:	ee17 2a90 	vmov	r2, s15
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8013368:	4b13      	ldr	r3, [pc, #76]	@ (80133b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801336c:	0e1b      	lsrs	r3, r3, #24
 801336e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013372:	ee07 3a90 	vmov	s15, r3
 8013376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801337a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801337e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013382:	edd7 6a07 	vldr	s13, [r7, #28]
 8013386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801338a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801338e:	ee17 2a90 	vmov	r2, s15
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8013396:	e008      	b.n	80133aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2200      	movs	r2, #0
 801339c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	2200      	movs	r2, #0
 80133a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2200      	movs	r2, #0
 80133a8:	609a      	str	r2, [r3, #8]
}
 80133aa:	bf00      	nop
 80133ac:	3724      	adds	r7, #36	@ 0x24
 80133ae:	46bd      	mov	sp, r7
 80133b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b4:	4770      	bx	lr
 80133b6:	bf00      	nop
 80133b8:	58024400 	.word	0x58024400
 80133bc:	03d09000 	.word	0x03d09000
 80133c0:	46000000 	.word	0x46000000
 80133c4:	4c742400 	.word	0x4c742400
 80133c8:	4a742400 	.word	0x4a742400
 80133cc:	4bb71b00 	.word	0x4bb71b00

080133d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80133d0:	b480      	push	{r7}
 80133d2:	b089      	sub	sp, #36	@ 0x24
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80133d8:	4ba0      	ldr	r3, [pc, #640]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80133da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133dc:	f003 0303 	and.w	r3, r3, #3
 80133e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80133e2:	4b9e      	ldr	r3, [pc, #632]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80133e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133e6:	091b      	lsrs	r3, r3, #4
 80133e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80133ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80133ee:	4b9b      	ldr	r3, [pc, #620]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80133f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133f2:	f003 0301 	and.w	r3, r3, #1
 80133f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80133f8:	4b98      	ldr	r3, [pc, #608]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80133fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80133fc:	08db      	lsrs	r3, r3, #3
 80133fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013402:	693a      	ldr	r2, [r7, #16]
 8013404:	fb02 f303 	mul.w	r3, r2, r3
 8013408:	ee07 3a90 	vmov	s15, r3
 801340c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013410:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	2b00      	cmp	r3, #0
 8013418:	f000 8111 	beq.w	801363e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801341c:	69bb      	ldr	r3, [r7, #24]
 801341e:	2b02      	cmp	r3, #2
 8013420:	f000 8083 	beq.w	801352a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	2b02      	cmp	r3, #2
 8013428:	f200 80a1 	bhi.w	801356e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801342c:	69bb      	ldr	r3, [r7, #24]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d003      	beq.n	801343a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8013432:	69bb      	ldr	r3, [r7, #24]
 8013434:	2b01      	cmp	r3, #1
 8013436:	d056      	beq.n	80134e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8013438:	e099      	b.n	801356e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801343a:	4b88      	ldr	r3, [pc, #544]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	f003 0320 	and.w	r3, r3, #32
 8013442:	2b00      	cmp	r3, #0
 8013444:	d02d      	beq.n	80134a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013446:	4b85      	ldr	r3, [pc, #532]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	08db      	lsrs	r3, r3, #3
 801344c:	f003 0303 	and.w	r3, r3, #3
 8013450:	4a83      	ldr	r2, [pc, #524]	@ (8013660 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8013452:	fa22 f303 	lsr.w	r3, r2, r3
 8013456:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	ee07 3a90 	vmov	s15, r3
 801345e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	ee07 3a90 	vmov	s15, r3
 8013468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801346c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013470:	4b7a      	ldr	r3, [pc, #488]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013478:	ee07 3a90 	vmov	s15, r3
 801347c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013480:	ed97 6a03 	vldr	s12, [r7, #12]
 8013484:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8013664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801348c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013490:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013498:	ee67 7a27 	vmul.f32	s15, s14, s15
 801349c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80134a0:	e087      	b.n	80135b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80134a2:	697b      	ldr	r3, [r7, #20]
 80134a4:	ee07 3a90 	vmov	s15, r3
 80134a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134ac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8013668 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80134b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80134b4:	4b69      	ldr	r3, [pc, #420]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80134b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134bc:	ee07 3a90 	vmov	s15, r3
 80134c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80134c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80134c8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8013664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80134cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80134d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80134d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80134d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80134dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80134e4:	e065      	b.n	80135b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	ee07 3a90 	vmov	s15, r3
 80134ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134f0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801366c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80134f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80134f8:	4b58      	ldr	r3, [pc, #352]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80134fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013500:	ee07 3a90 	vmov	s15, r3
 8013504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013508:	ed97 6a03 	vldr	s12, [r7, #12]
 801350c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8013664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013518:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801351c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013524:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013528:	e043      	b.n	80135b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	ee07 3a90 	vmov	s15, r3
 8013530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013534:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8013670 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8013538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801353c:	4b47      	ldr	r3, [pc, #284]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013544:	ee07 3a90 	vmov	s15, r3
 8013548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801354c:	ed97 6a03 	vldr	s12, [r7, #12]
 8013550:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8013664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801355c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013568:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801356c:	e021      	b.n	80135b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	ee07 3a90 	vmov	s15, r3
 8013574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013578:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8013668 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801357c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013580:	4b36      	ldr	r3, [pc, #216]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013588:	ee07 3a90 	vmov	s15, r3
 801358c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013590:	ed97 6a03 	vldr	s12, [r7, #12]
 8013594:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8013664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801359c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80135a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80135a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80135a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80135b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80135b2:	4b2a      	ldr	r3, [pc, #168]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80135b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135b6:	0a5b      	lsrs	r3, r3, #9
 80135b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80135bc:	ee07 3a90 	vmov	s15, r3
 80135c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80135c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80135c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80135cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80135d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80135d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80135d8:	ee17 2a90 	vmov	r2, s15
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80135e0:	4b1e      	ldr	r3, [pc, #120]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80135e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135e4:	0c1b      	lsrs	r3, r3, #16
 80135e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80135ea:	ee07 3a90 	vmov	s15, r3
 80135ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80135f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80135f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80135fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80135fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013606:	ee17 2a90 	vmov	r2, s15
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801360e:	4b13      	ldr	r3, [pc, #76]	@ (801365c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013612:	0e1b      	lsrs	r3, r3, #24
 8013614:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013618:	ee07 3a90 	vmov	s15, r3
 801361c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013620:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013624:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013628:	edd7 6a07 	vldr	s13, [r7, #28]
 801362c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013634:	ee17 2a90 	vmov	r2, s15
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801363c:	e008      	b.n	8013650 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2200      	movs	r2, #0
 8013642:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2200      	movs	r2, #0
 8013648:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2200      	movs	r2, #0
 801364e:	609a      	str	r2, [r3, #8]
}
 8013650:	bf00      	nop
 8013652:	3724      	adds	r7, #36	@ 0x24
 8013654:	46bd      	mov	sp, r7
 8013656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365a:	4770      	bx	lr
 801365c:	58024400 	.word	0x58024400
 8013660:	03d09000 	.word	0x03d09000
 8013664:	46000000 	.word	0x46000000
 8013668:	4c742400 	.word	0x4c742400
 801366c:	4a742400 	.word	0x4a742400
 8013670:	4bb71b00 	.word	0x4bb71b00

08013674 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801367e:	2300      	movs	r3, #0
 8013680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013682:	4b53      	ldr	r3, [pc, #332]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013686:	f003 0303 	and.w	r3, r3, #3
 801368a:	2b03      	cmp	r3, #3
 801368c:	d101      	bne.n	8013692 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801368e:	2301      	movs	r3, #1
 8013690:	e099      	b.n	80137c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8013692:	4b4f      	ldr	r3, [pc, #316]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	4a4e      	ldr	r2, [pc, #312]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013698:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801369c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801369e:	f7f4 ffd7 	bl	8008650 <HAL_GetTick>
 80136a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80136a4:	e008      	b.n	80136b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80136a6:	f7f4 ffd3 	bl	8008650 <HAL_GetTick>
 80136aa:	4602      	mov	r2, r0
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	1ad3      	subs	r3, r2, r3
 80136b0:	2b02      	cmp	r3, #2
 80136b2:	d901      	bls.n	80136b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80136b4:	2303      	movs	r3, #3
 80136b6:	e086      	b.n	80137c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80136b8:	4b45      	ldr	r3, [pc, #276]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d1f0      	bne.n	80136a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80136c4:	4b42      	ldr	r3, [pc, #264]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 80136c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	031b      	lsls	r3, r3, #12
 80136d2:	493f      	ldr	r1, [pc, #252]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 80136d4:	4313      	orrs	r3, r2
 80136d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	685b      	ldr	r3, [r3, #4]
 80136dc:	3b01      	subs	r3, #1
 80136de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	689b      	ldr	r3, [r3, #8]
 80136e6:	3b01      	subs	r3, #1
 80136e8:	025b      	lsls	r3, r3, #9
 80136ea:	b29b      	uxth	r3, r3
 80136ec:	431a      	orrs	r2, r3
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	68db      	ldr	r3, [r3, #12]
 80136f2:	3b01      	subs	r3, #1
 80136f4:	041b      	lsls	r3, r3, #16
 80136f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80136fa:	431a      	orrs	r2, r3
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	691b      	ldr	r3, [r3, #16]
 8013700:	3b01      	subs	r3, #1
 8013702:	061b      	lsls	r3, r3, #24
 8013704:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013708:	4931      	ldr	r1, [pc, #196]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 801370a:	4313      	orrs	r3, r2
 801370c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801370e:	4b30      	ldr	r3, [pc, #192]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013712:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	695b      	ldr	r3, [r3, #20]
 801371a:	492d      	ldr	r1, [pc, #180]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 801371c:	4313      	orrs	r3, r2
 801371e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8013720:	4b2b      	ldr	r3, [pc, #172]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013724:	f023 0220 	bic.w	r2, r3, #32
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	699b      	ldr	r3, [r3, #24]
 801372c:	4928      	ldr	r1, [pc, #160]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 801372e:	4313      	orrs	r3, r2
 8013730:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8013732:	4b27      	ldr	r3, [pc, #156]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013736:	4a26      	ldr	r2, [pc, #152]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013738:	f023 0310 	bic.w	r3, r3, #16
 801373c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801373e:	4b24      	ldr	r3, [pc, #144]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013740:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013742:	4b24      	ldr	r3, [pc, #144]	@ (80137d4 <RCCEx_PLL2_Config+0x160>)
 8013744:	4013      	ands	r3, r2
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	69d2      	ldr	r2, [r2, #28]
 801374a:	00d2      	lsls	r2, r2, #3
 801374c:	4920      	ldr	r1, [pc, #128]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 801374e:	4313      	orrs	r3, r2
 8013750:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8013752:	4b1f      	ldr	r3, [pc, #124]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013756:	4a1e      	ldr	r2, [pc, #120]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013758:	f043 0310 	orr.w	r3, r3, #16
 801375c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d106      	bne.n	8013772 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8013764:	4b1a      	ldr	r3, [pc, #104]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013768:	4a19      	ldr	r2, [pc, #100]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 801376a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801376e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013770:	e00f      	b.n	8013792 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	2b01      	cmp	r3, #1
 8013776:	d106      	bne.n	8013786 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8013778:	4b15      	ldr	r3, [pc, #84]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 801377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801377c:	4a14      	ldr	r2, [pc, #80]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 801377e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013782:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013784:	e005      	b.n	8013792 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8013786:	4b12      	ldr	r3, [pc, #72]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801378a:	4a11      	ldr	r2, [pc, #68]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 801378c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013790:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8013792:	4b0f      	ldr	r3, [pc, #60]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	4a0e      	ldr	r2, [pc, #56]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 8013798:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801379c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801379e:	f7f4 ff57 	bl	8008650 <HAL_GetTick>
 80137a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80137a4:	e008      	b.n	80137b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80137a6:	f7f4 ff53 	bl	8008650 <HAL_GetTick>
 80137aa:	4602      	mov	r2, r0
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	1ad3      	subs	r3, r2, r3
 80137b0:	2b02      	cmp	r3, #2
 80137b2:	d901      	bls.n	80137b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80137b4:	2303      	movs	r3, #3
 80137b6:	e006      	b.n	80137c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80137b8:	4b05      	ldr	r3, [pc, #20]	@ (80137d0 <RCCEx_PLL2_Config+0x15c>)
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d0f0      	beq.n	80137a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80137c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80137c6:	4618      	mov	r0, r3
 80137c8:	3710      	adds	r7, #16
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
 80137ce:	bf00      	nop
 80137d0:	58024400 	.word	0x58024400
 80137d4:	ffff0007 	.word	0xffff0007

080137d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80137e2:	2300      	movs	r3, #0
 80137e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80137e6:	4b53      	ldr	r3, [pc, #332]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80137e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137ea:	f003 0303 	and.w	r3, r3, #3
 80137ee:	2b03      	cmp	r3, #3
 80137f0:	d101      	bne.n	80137f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80137f2:	2301      	movs	r3, #1
 80137f4:	e099      	b.n	801392a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80137f6:	4b4f      	ldr	r3, [pc, #316]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	4a4e      	ldr	r2, [pc, #312]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80137fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013802:	f7f4 ff25 	bl	8008650 <HAL_GetTick>
 8013806:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013808:	e008      	b.n	801381c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801380a:	f7f4 ff21 	bl	8008650 <HAL_GetTick>
 801380e:	4602      	mov	r2, r0
 8013810:	68bb      	ldr	r3, [r7, #8]
 8013812:	1ad3      	subs	r3, r2, r3
 8013814:	2b02      	cmp	r3, #2
 8013816:	d901      	bls.n	801381c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013818:	2303      	movs	r3, #3
 801381a:	e086      	b.n	801392a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801381c:	4b45      	ldr	r3, [pc, #276]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013824:	2b00      	cmp	r3, #0
 8013826:	d1f0      	bne.n	801380a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8013828:	4b42      	ldr	r3, [pc, #264]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 801382a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801382c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	051b      	lsls	r3, r3, #20
 8013836:	493f      	ldr	r1, [pc, #252]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 8013838:	4313      	orrs	r3, r2
 801383a:	628b      	str	r3, [r1, #40]	@ 0x28
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	685b      	ldr	r3, [r3, #4]
 8013840:	3b01      	subs	r3, #1
 8013842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	689b      	ldr	r3, [r3, #8]
 801384a:	3b01      	subs	r3, #1
 801384c:	025b      	lsls	r3, r3, #9
 801384e:	b29b      	uxth	r3, r3
 8013850:	431a      	orrs	r2, r3
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	68db      	ldr	r3, [r3, #12]
 8013856:	3b01      	subs	r3, #1
 8013858:	041b      	lsls	r3, r3, #16
 801385a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801385e:	431a      	orrs	r2, r3
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	691b      	ldr	r3, [r3, #16]
 8013864:	3b01      	subs	r3, #1
 8013866:	061b      	lsls	r3, r3, #24
 8013868:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801386c:	4931      	ldr	r1, [pc, #196]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 801386e:	4313      	orrs	r3, r2
 8013870:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8013872:	4b30      	ldr	r3, [pc, #192]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 8013874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013876:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	695b      	ldr	r3, [r3, #20]
 801387e:	492d      	ldr	r1, [pc, #180]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 8013880:	4313      	orrs	r3, r2
 8013882:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8013884:	4b2b      	ldr	r3, [pc, #172]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 8013886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013888:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	699b      	ldr	r3, [r3, #24]
 8013890:	4928      	ldr	r1, [pc, #160]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 8013892:	4313      	orrs	r3, r2
 8013894:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8013896:	4b27      	ldr	r3, [pc, #156]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 8013898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801389a:	4a26      	ldr	r2, [pc, #152]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 801389c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80138a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80138a2:	4b24      	ldr	r3, [pc, #144]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80138a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80138a6:	4b24      	ldr	r3, [pc, #144]	@ (8013938 <RCCEx_PLL3_Config+0x160>)
 80138a8:	4013      	ands	r3, r2
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	69d2      	ldr	r2, [r2, #28]
 80138ae:	00d2      	lsls	r2, r2, #3
 80138b0:	4920      	ldr	r1, [pc, #128]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80138b2:	4313      	orrs	r3, r2
 80138b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80138b6:	4b1f      	ldr	r3, [pc, #124]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80138b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138ba:	4a1e      	ldr	r2, [pc, #120]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80138bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80138c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d106      	bne.n	80138d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80138c8:	4b1a      	ldr	r3, [pc, #104]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80138ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138cc:	4a19      	ldr	r2, [pc, #100]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80138ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80138d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80138d4:	e00f      	b.n	80138f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	2b01      	cmp	r3, #1
 80138da:	d106      	bne.n	80138ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80138dc:	4b15      	ldr	r3, [pc, #84]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80138de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138e0:	4a14      	ldr	r2, [pc, #80]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80138e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80138e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80138e8:	e005      	b.n	80138f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80138ea:	4b12      	ldr	r3, [pc, #72]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80138ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138ee:	4a11      	ldr	r2, [pc, #68]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80138f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80138f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80138f6:	4b0f      	ldr	r3, [pc, #60]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	4a0e      	ldr	r2, [pc, #56]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 80138fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013902:	f7f4 fea5 	bl	8008650 <HAL_GetTick>
 8013906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013908:	e008      	b.n	801391c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801390a:	f7f4 fea1 	bl	8008650 <HAL_GetTick>
 801390e:	4602      	mov	r2, r0
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	1ad3      	subs	r3, r2, r3
 8013914:	2b02      	cmp	r3, #2
 8013916:	d901      	bls.n	801391c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013918:	2303      	movs	r3, #3
 801391a:	e006      	b.n	801392a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801391c:	4b05      	ldr	r3, [pc, #20]	@ (8013934 <RCCEx_PLL3_Config+0x15c>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013924:	2b00      	cmp	r3, #0
 8013926:	d0f0      	beq.n	801390a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8013928:	7bfb      	ldrb	r3, [r7, #15]
}
 801392a:	4618      	mov	r0, r3
 801392c:	3710      	adds	r7, #16
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
 8013932:	bf00      	nop
 8013934:	58024400 	.word	0x58024400
 8013938:	ffff0007 	.word	0xffff0007

0801393c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b084      	sub	sp, #16
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d101      	bne.n	801394e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801394a:	2301      	movs	r3, #1
 801394c:	e10f      	b.n	8013b6e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2200      	movs	r2, #0
 8013952:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	4a87      	ldr	r2, [pc, #540]	@ (8013b78 <HAL_SPI_Init+0x23c>)
 801395a:	4293      	cmp	r3, r2
 801395c:	d00f      	beq.n	801397e <HAL_SPI_Init+0x42>
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	4a86      	ldr	r2, [pc, #536]	@ (8013b7c <HAL_SPI_Init+0x240>)
 8013964:	4293      	cmp	r3, r2
 8013966:	d00a      	beq.n	801397e <HAL_SPI_Init+0x42>
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	4a84      	ldr	r2, [pc, #528]	@ (8013b80 <HAL_SPI_Init+0x244>)
 801396e:	4293      	cmp	r3, r2
 8013970:	d005      	beq.n	801397e <HAL_SPI_Init+0x42>
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	68db      	ldr	r3, [r3, #12]
 8013976:	2b0f      	cmp	r3, #15
 8013978:	d901      	bls.n	801397e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801397a:	2301      	movs	r3, #1
 801397c:	e0f7      	b.n	8013b6e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f001 ff76 	bl	8015870 <SPI_GetPacketSize>
 8013984:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	4a7b      	ldr	r2, [pc, #492]	@ (8013b78 <HAL_SPI_Init+0x23c>)
 801398c:	4293      	cmp	r3, r2
 801398e:	d00c      	beq.n	80139aa <HAL_SPI_Init+0x6e>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	4a79      	ldr	r2, [pc, #484]	@ (8013b7c <HAL_SPI_Init+0x240>)
 8013996:	4293      	cmp	r3, r2
 8013998:	d007      	beq.n	80139aa <HAL_SPI_Init+0x6e>
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	4a78      	ldr	r2, [pc, #480]	@ (8013b80 <HAL_SPI_Init+0x244>)
 80139a0:	4293      	cmp	r3, r2
 80139a2:	d002      	beq.n	80139aa <HAL_SPI_Init+0x6e>
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	2b08      	cmp	r3, #8
 80139a8:	d811      	bhi.n	80139ce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80139ae:	4a72      	ldr	r2, [pc, #456]	@ (8013b78 <HAL_SPI_Init+0x23c>)
 80139b0:	4293      	cmp	r3, r2
 80139b2:	d009      	beq.n	80139c8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	4a70      	ldr	r2, [pc, #448]	@ (8013b7c <HAL_SPI_Init+0x240>)
 80139ba:	4293      	cmp	r3, r2
 80139bc:	d004      	beq.n	80139c8 <HAL_SPI_Init+0x8c>
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	4a6f      	ldr	r2, [pc, #444]	@ (8013b80 <HAL_SPI_Init+0x244>)
 80139c4:	4293      	cmp	r3, r2
 80139c6:	d104      	bne.n	80139d2 <HAL_SPI_Init+0x96>
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	2b10      	cmp	r3, #16
 80139cc:	d901      	bls.n	80139d2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80139ce:	2301      	movs	r3, #1
 80139d0:	e0cd      	b.n	8013b6e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80139d8:	b2db      	uxtb	r3, r3
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d106      	bne.n	80139ec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2200      	movs	r2, #0
 80139e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80139e6:	6878      	ldr	r0, [r7, #4]
 80139e8:	f7f3 ff34 	bl	8007854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	2202      	movs	r2, #2
 80139f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	681a      	ldr	r2, [r3, #0]
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	f022 0201 	bic.w	r2, r2, #1
 8013a02:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	689b      	ldr	r3, [r3, #8]
 8013a0a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8013a0e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	699b      	ldr	r3, [r3, #24]
 8013a14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013a18:	d119      	bne.n	8013a4e <HAL_SPI_Init+0x112>
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	685b      	ldr	r3, [r3, #4]
 8013a1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013a22:	d103      	bne.n	8013a2c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d008      	beq.n	8013a3e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d10c      	bne.n	8013a4e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8013a38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013a3c:	d107      	bne.n	8013a4e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	681a      	ldr	r2, [r3, #0]
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8013a4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	685b      	ldr	r3, [r3, #4]
 8013a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d00f      	beq.n	8013a7a <HAL_SPI_Init+0x13e>
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	68db      	ldr	r3, [r3, #12]
 8013a5e:	2b06      	cmp	r3, #6
 8013a60:	d90b      	bls.n	8013a7a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	430a      	orrs	r2, r1
 8013a76:	601a      	str	r2, [r3, #0]
 8013a78:	e007      	b.n	8013a8a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013a88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	69da      	ldr	r2, [r3, #28]
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a92:	431a      	orrs	r2, r3
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	431a      	orrs	r2, r3
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a9c:	ea42 0103 	orr.w	r1, r2, r3
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	68da      	ldr	r2, [r3, #12]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	430a      	orrs	r2, r1
 8013aaa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ab4:	431a      	orrs	r2, r3
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013aba:	431a      	orrs	r2, r3
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	699b      	ldr	r3, [r3, #24]
 8013ac0:	431a      	orrs	r2, r3
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	691b      	ldr	r3, [r3, #16]
 8013ac6:	431a      	orrs	r2, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	695b      	ldr	r3, [r3, #20]
 8013acc:	431a      	orrs	r2, r3
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6a1b      	ldr	r3, [r3, #32]
 8013ad2:	431a      	orrs	r2, r3
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	685b      	ldr	r3, [r3, #4]
 8013ad8:	431a      	orrs	r2, r3
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ade:	431a      	orrs	r2, r3
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	689b      	ldr	r3, [r3, #8]
 8013ae4:	431a      	orrs	r2, r3
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013aea:	ea42 0103 	orr.w	r1, r2, r3
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	430a      	orrs	r2, r1
 8013af8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	685b      	ldr	r3, [r3, #4]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d113      	bne.n	8013b2a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	689b      	ldr	r3, [r3, #8]
 8013b08:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013b14:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	689b      	ldr	r3, [r3, #8]
 8013b1c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8013b28:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	f022 0201 	bic.w	r2, r2, #1
 8013b38:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	685b      	ldr	r3, [r3, #4]
 8013b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d00a      	beq.n	8013b5c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	68db      	ldr	r3, [r3, #12]
 8013b4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	430a      	orrs	r2, r1
 8013b5a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2201      	movs	r2, #1
 8013b68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8013b6c:	2300      	movs	r3, #0
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3710      	adds	r7, #16
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}
 8013b76:	bf00      	nop
 8013b78:	40013000 	.word	0x40013000
 8013b7c:	40003800 	.word	0x40003800
 8013b80:	40003c00 	.word	0x40003c00

08013b84 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b088      	sub	sp, #32
 8013b88:	af02      	add	r7, sp, #8
 8013b8a:	60f8      	str	r0, [r7, #12]
 8013b8c:	60b9      	str	r1, [r7, #8]
 8013b8e:	603b      	str	r3, [r7, #0]
 8013b90:	4613      	mov	r3, r2
 8013b92:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	3320      	adds	r3, #32
 8013b9a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013b9c:	f7f4 fd58 	bl	8008650 <HAL_GetTick>
 8013ba0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8013ba8:	b2db      	uxtb	r3, r3
 8013baa:	2b01      	cmp	r3, #1
 8013bac:	d001      	beq.n	8013bb2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8013bae:	2302      	movs	r3, #2
 8013bb0:	e1d1      	b.n	8013f56 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d002      	beq.n	8013bbe <HAL_SPI_Transmit+0x3a>
 8013bb8:	88fb      	ldrh	r3, [r7, #6]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d101      	bne.n	8013bc2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8013bbe:	2301      	movs	r3, #1
 8013bc0:	e1c9      	b.n	8013f56 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013bc8:	2b01      	cmp	r3, #1
 8013bca:	d101      	bne.n	8013bd0 <HAL_SPI_Transmit+0x4c>
 8013bcc:	2302      	movs	r3, #2
 8013bce:	e1c2      	b.n	8013f56 <HAL_SPI_Transmit+0x3d2>
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	2201      	movs	r2, #1
 8013bd4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	2203      	movs	r2, #3
 8013bdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	2200      	movs	r2, #0
 8013be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	68ba      	ldr	r2, [r7, #8]
 8013bec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	88fa      	ldrh	r2, [r7, #6]
 8013bf2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	88fa      	ldrh	r2, [r7, #6]
 8013bfa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	2200      	movs	r2, #0
 8013c02:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	2200      	movs	r2, #0
 8013c08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	2200      	movs	r2, #0
 8013c10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	2200      	movs	r2, #0
 8013c18:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	689b      	ldr	r3, [r3, #8]
 8013c24:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8013c28:	d108      	bne.n	8013c3c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	681a      	ldr	r2, [r3, #0]
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013c38:	601a      	str	r2, [r3, #0]
 8013c3a:	e009      	b.n	8013c50 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	68db      	ldr	r3, [r3, #12]
 8013c42:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8013c4e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	685a      	ldr	r2, [r3, #4]
 8013c56:	4b96      	ldr	r3, [pc, #600]	@ (8013eb0 <HAL_SPI_Transmit+0x32c>)
 8013c58:	4013      	ands	r3, r2
 8013c5a:	88f9      	ldrh	r1, [r7, #6]
 8013c5c:	68fa      	ldr	r2, [r7, #12]
 8013c5e:	6812      	ldr	r2, [r2, #0]
 8013c60:	430b      	orrs	r3, r1
 8013c62:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	681a      	ldr	r2, [r3, #0]
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	f042 0201 	orr.w	r2, r2, #1
 8013c72:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	685b      	ldr	r3, [r3, #4]
 8013c78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013c7c:	d107      	bne.n	8013c8e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	681a      	ldr	r2, [r3, #0]
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013c8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	68db      	ldr	r3, [r3, #12]
 8013c92:	2b0f      	cmp	r3, #15
 8013c94:	d947      	bls.n	8013d26 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8013c96:	e03f      	b.n	8013d18 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	695b      	ldr	r3, [r3, #20]
 8013c9e:	f003 0302 	and.w	r3, r3, #2
 8013ca2:	2b02      	cmp	r3, #2
 8013ca4:	d114      	bne.n	8013cd0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	6812      	ldr	r2, [r2, #0]
 8013cb0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013cb6:	1d1a      	adds	r2, r3, #4
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013cc2:	b29b      	uxth	r3, r3
 8013cc4:	3b01      	subs	r3, #1
 8013cc6:	b29a      	uxth	r2, r3
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013cce:	e023      	b.n	8013d18 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013cd0:	f7f4 fcbe 	bl	8008650 <HAL_GetTick>
 8013cd4:	4602      	mov	r2, r0
 8013cd6:	693b      	ldr	r3, [r7, #16]
 8013cd8:	1ad3      	subs	r3, r2, r3
 8013cda:	683a      	ldr	r2, [r7, #0]
 8013cdc:	429a      	cmp	r2, r3
 8013cde:	d803      	bhi.n	8013ce8 <HAL_SPI_Transmit+0x164>
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ce6:	d102      	bne.n	8013cee <HAL_SPI_Transmit+0x16a>
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d114      	bne.n	8013d18 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8013cee:	68f8      	ldr	r0, [r7, #12]
 8013cf0:	f001 fcf0 	bl	80156d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013cfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	2201      	movs	r2, #1
 8013d08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	2200      	movs	r2, #0
 8013d10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8013d14:	2303      	movs	r3, #3
 8013d16:	e11e      	b.n	8013f56 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013d1e:	b29b      	uxth	r3, r3
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d1b9      	bne.n	8013c98 <HAL_SPI_Transmit+0x114>
 8013d24:	e0f1      	b.n	8013f0a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	68db      	ldr	r3, [r3, #12]
 8013d2a:	2b07      	cmp	r3, #7
 8013d2c:	f240 80e6 	bls.w	8013efc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8013d30:	e05d      	b.n	8013dee <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	695b      	ldr	r3, [r3, #20]
 8013d38:	f003 0302 	and.w	r3, r3, #2
 8013d3c:	2b02      	cmp	r3, #2
 8013d3e:	d132      	bne.n	8013da6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013d46:	b29b      	uxth	r3, r3
 8013d48:	2b01      	cmp	r3, #1
 8013d4a:	d918      	bls.n	8013d7e <HAL_SPI_Transmit+0x1fa>
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d014      	beq.n	8013d7e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	6812      	ldr	r2, [r2, #0]
 8013d5e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013d64:	1d1a      	adds	r2, r3, #4
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	3b02      	subs	r3, #2
 8013d74:	b29a      	uxth	r2, r3
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013d7c:	e037      	b.n	8013dee <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013d82:	881a      	ldrh	r2, [r3, #0]
 8013d84:	697b      	ldr	r3, [r7, #20]
 8013d86:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013d8c:	1c9a      	adds	r2, r3, #2
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013d98:	b29b      	uxth	r3, r3
 8013d9a:	3b01      	subs	r3, #1
 8013d9c:	b29a      	uxth	r2, r3
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013da4:	e023      	b.n	8013dee <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013da6:	f7f4 fc53 	bl	8008650 <HAL_GetTick>
 8013daa:	4602      	mov	r2, r0
 8013dac:	693b      	ldr	r3, [r7, #16]
 8013dae:	1ad3      	subs	r3, r2, r3
 8013db0:	683a      	ldr	r2, [r7, #0]
 8013db2:	429a      	cmp	r2, r3
 8013db4:	d803      	bhi.n	8013dbe <HAL_SPI_Transmit+0x23a>
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dbc:	d102      	bne.n	8013dc4 <HAL_SPI_Transmit+0x240>
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d114      	bne.n	8013dee <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8013dc4:	68f8      	ldr	r0, [r7, #12]
 8013dc6:	f001 fc85 	bl	80156d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013dd0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	2201      	movs	r2, #1
 8013dde:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	2200      	movs	r2, #0
 8013de6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8013dea:	2303      	movs	r3, #3
 8013dec:	e0b3      	b.n	8013f56 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013df4:	b29b      	uxth	r3, r3
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d19b      	bne.n	8013d32 <HAL_SPI_Transmit+0x1ae>
 8013dfa:	e086      	b.n	8013f0a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	695b      	ldr	r3, [r3, #20]
 8013e02:	f003 0302 	and.w	r3, r3, #2
 8013e06:	2b02      	cmp	r3, #2
 8013e08:	d154      	bne.n	8013eb4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	2b03      	cmp	r3, #3
 8013e14:	d918      	bls.n	8013e48 <HAL_SPI_Transmit+0x2c4>
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e1a:	2b40      	cmp	r3, #64	@ 0x40
 8013e1c:	d914      	bls.n	8013e48 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	6812      	ldr	r2, [r2, #0]
 8013e28:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013e2e:	1d1a      	adds	r2, r3, #4
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	3b04      	subs	r3, #4
 8013e3e:	b29a      	uxth	r2, r3
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013e46:	e059      	b.n	8013efc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013e4e:	b29b      	uxth	r3, r3
 8013e50:	2b01      	cmp	r3, #1
 8013e52:	d917      	bls.n	8013e84 <HAL_SPI_Transmit+0x300>
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d013      	beq.n	8013e84 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013e60:	881a      	ldrh	r2, [r3, #0]
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013e6a:	1c9a      	adds	r2, r3, #2
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	3b02      	subs	r3, #2
 8013e7a:	b29a      	uxth	r2, r3
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013e82:	e03b      	b.n	8013efc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	3320      	adds	r3, #32
 8013e8e:	7812      	ldrb	r2, [r2, #0]
 8013e90:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013e96:	1c5a      	adds	r2, r3, #1
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013ea2:	b29b      	uxth	r3, r3
 8013ea4:	3b01      	subs	r3, #1
 8013ea6:	b29a      	uxth	r2, r3
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013eae:	e025      	b.n	8013efc <HAL_SPI_Transmit+0x378>
 8013eb0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013eb4:	f7f4 fbcc 	bl	8008650 <HAL_GetTick>
 8013eb8:	4602      	mov	r2, r0
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	1ad3      	subs	r3, r2, r3
 8013ebe:	683a      	ldr	r2, [r7, #0]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d803      	bhi.n	8013ecc <HAL_SPI_Transmit+0x348>
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eca:	d102      	bne.n	8013ed2 <HAL_SPI_Transmit+0x34e>
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d114      	bne.n	8013efc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8013ed2:	68f8      	ldr	r0, [r7, #12]
 8013ed4:	f001 fbfe 	bl	80156d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013ede:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	2201      	movs	r2, #1
 8013eec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8013ef8:	2303      	movs	r3, #3
 8013efa:	e02c      	b.n	8013f56 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013f02:	b29b      	uxth	r3, r3
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	f47f af79 	bne.w	8013dfc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8013f0a:	693b      	ldr	r3, [r7, #16]
 8013f0c:	9300      	str	r3, [sp, #0]
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	2200      	movs	r2, #0
 8013f12:	2108      	movs	r1, #8
 8013f14:	68f8      	ldr	r0, [r7, #12]
 8013f16:	f001 fc7d 	bl	8015814 <SPI_WaitOnFlagUntilTimeout>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d007      	beq.n	8013f30 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013f26:	f043 0220 	orr.w	r2, r3, #32
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8013f30:	68f8      	ldr	r0, [r7, #12]
 8013f32:	f001 fbcf 	bl	80156d4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	2201      	movs	r2, #1
 8013f3a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	2200      	movs	r2, #0
 8013f42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d001      	beq.n	8013f54 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8013f50:	2301      	movs	r3, #1
 8013f52:	e000      	b.n	8013f56 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8013f54:	2300      	movs	r3, #0
  }
}
 8013f56:	4618      	mov	r0, r3
 8013f58:	3718      	adds	r7, #24
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	bd80      	pop	{r7, pc}
 8013f5e:	bf00      	nop

08013f60 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b088      	sub	sp, #32
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	60f8      	str	r0, [r7, #12]
 8013f68:	60b9      	str	r1, [r7, #8]
 8013f6a:	603b      	str	r3, [r7, #0]
 8013f6c:	4613      	mov	r3, r2
 8013f6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f74:	095b      	lsrs	r3, r3, #5
 8013f76:	b29b      	uxth	r3, r3
 8013f78:	3301      	adds	r3, #1
 8013f7a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	3330      	adds	r3, #48	@ 0x30
 8013f82:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013f84:	f7f4 fb64 	bl	8008650 <HAL_GetTick>
 8013f88:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8013f90:	b2db      	uxtb	r3, r3
 8013f92:	2b01      	cmp	r3, #1
 8013f94:	d001      	beq.n	8013f9a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8013f96:	2302      	movs	r3, #2
 8013f98:	e250      	b.n	801443c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d002      	beq.n	8013fa6 <HAL_SPI_Receive+0x46>
 8013fa0:	88fb      	ldrh	r3, [r7, #6]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d101      	bne.n	8013faa <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	e248      	b.n	801443c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013fb0:	2b01      	cmp	r3, #1
 8013fb2:	d101      	bne.n	8013fb8 <HAL_SPI_Receive+0x58>
 8013fb4:	2302      	movs	r3, #2
 8013fb6:	e241      	b.n	801443c <HAL_SPI_Receive+0x4dc>
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	2201      	movs	r2, #1
 8013fbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	2204      	movs	r2, #4
 8013fc4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	2200      	movs	r2, #0
 8013fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	68ba      	ldr	r2, [r7, #8]
 8013fd4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	88fa      	ldrh	r2, [r7, #6]
 8013fda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	88fa      	ldrh	r2, [r7, #6]
 8013fe2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	2200      	movs	r2, #0
 8013fea:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	2200      	movs	r2, #0
 8013ff0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	2200      	movs	r2, #0
 8014000:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	2200      	movs	r2, #0
 8014006:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	689b      	ldr	r3, [r3, #8]
 801400c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014010:	d108      	bne.n	8014024 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014020:	601a      	str	r2, [r3, #0]
 8014022:	e009      	b.n	8014038 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	68db      	ldr	r3, [r3, #12]
 801402a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014036:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	685a      	ldr	r2, [r3, #4]
 801403e:	4b95      	ldr	r3, [pc, #596]	@ (8014294 <HAL_SPI_Receive+0x334>)
 8014040:	4013      	ands	r3, r2
 8014042:	88f9      	ldrh	r1, [r7, #6]
 8014044:	68fa      	ldr	r2, [r7, #12]
 8014046:	6812      	ldr	r2, [r2, #0]
 8014048:	430b      	orrs	r3, r1
 801404a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	681a      	ldr	r2, [r3, #0]
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	f042 0201 	orr.w	r2, r2, #1
 801405a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014064:	d107      	bne.n	8014076 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	681a      	ldr	r2, [r3, #0]
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014074:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	68db      	ldr	r3, [r3, #12]
 801407a:	2b0f      	cmp	r3, #15
 801407c:	d96c      	bls.n	8014158 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 801407e:	e064      	b.n	801414a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	695b      	ldr	r3, [r3, #20]
 8014086:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	695b      	ldr	r3, [r3, #20]
 801408e:	f003 0301 	and.w	r3, r3, #1
 8014092:	2b01      	cmp	r3, #1
 8014094:	d114      	bne.n	80140c0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	681a      	ldr	r2, [r3, #0]
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801409e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80140a0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80140a6:	1d1a      	adds	r2, r3, #4
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80140b2:	b29b      	uxth	r3, r3
 80140b4:	3b01      	subs	r3, #1
 80140b6:	b29a      	uxth	r2, r3
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80140be:	e044      	b.n	801414a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80140c6:	b29b      	uxth	r3, r3
 80140c8:	8bfa      	ldrh	r2, [r7, #30]
 80140ca:	429a      	cmp	r2, r3
 80140cc:	d919      	bls.n	8014102 <HAL_SPI_Receive+0x1a2>
 80140ce:	693b      	ldr	r3, [r7, #16]
 80140d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d014      	beq.n	8014102 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	681a      	ldr	r2, [r3, #0]
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80140e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80140e2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80140e8:	1d1a      	adds	r2, r3, #4
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80140f4:	b29b      	uxth	r3, r3
 80140f6:	3b01      	subs	r3, #1
 80140f8:	b29a      	uxth	r2, r3
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014100:	e023      	b.n	801414a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014102:	f7f4 faa5 	bl	8008650 <HAL_GetTick>
 8014106:	4602      	mov	r2, r0
 8014108:	697b      	ldr	r3, [r7, #20]
 801410a:	1ad3      	subs	r3, r2, r3
 801410c:	683a      	ldr	r2, [r7, #0]
 801410e:	429a      	cmp	r2, r3
 8014110:	d803      	bhi.n	801411a <HAL_SPI_Receive+0x1ba>
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014118:	d102      	bne.n	8014120 <HAL_SPI_Receive+0x1c0>
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d114      	bne.n	801414a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014120:	68f8      	ldr	r0, [r7, #12]
 8014122:	f001 fad7 	bl	80156d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801412c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	2201      	movs	r2, #1
 801413a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	2200      	movs	r2, #0
 8014142:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014146:	2303      	movs	r3, #3
 8014148:	e178      	b.n	801443c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014150:	b29b      	uxth	r3, r3
 8014152:	2b00      	cmp	r3, #0
 8014154:	d194      	bne.n	8014080 <HAL_SPI_Receive+0x120>
 8014156:	e15e      	b.n	8014416 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	68db      	ldr	r3, [r3, #12]
 801415c:	2b07      	cmp	r3, #7
 801415e:	f240 8153 	bls.w	8014408 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014162:	e08f      	b.n	8014284 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	695b      	ldr	r3, [r3, #20]
 801416a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	695b      	ldr	r3, [r3, #20]
 8014172:	f003 0301 	and.w	r3, r3, #1
 8014176:	2b01      	cmp	r3, #1
 8014178:	d114      	bne.n	80141a4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801417e:	69ba      	ldr	r2, [r7, #24]
 8014180:	8812      	ldrh	r2, [r2, #0]
 8014182:	b292      	uxth	r2, r2
 8014184:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801418a:	1c9a      	adds	r2, r3, #2
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014196:	b29b      	uxth	r3, r3
 8014198:	3b01      	subs	r3, #1
 801419a:	b29a      	uxth	r2, r3
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80141a2:	e06f      	b.n	8014284 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	8bfa      	ldrh	r2, [r7, #30]
 80141ae:	429a      	cmp	r2, r3
 80141b0:	d924      	bls.n	80141fc <HAL_SPI_Receive+0x29c>
 80141b2:	693b      	ldr	r3, [r7, #16]
 80141b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d01f      	beq.n	80141fc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80141c0:	69ba      	ldr	r2, [r7, #24]
 80141c2:	8812      	ldrh	r2, [r2, #0]
 80141c4:	b292      	uxth	r2, r2
 80141c6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80141cc:	1c9a      	adds	r2, r3, #2
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80141d6:	69ba      	ldr	r2, [r7, #24]
 80141d8:	8812      	ldrh	r2, [r2, #0]
 80141da:	b292      	uxth	r2, r2
 80141dc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80141e2:	1c9a      	adds	r2, r3, #2
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80141ee:	b29b      	uxth	r3, r3
 80141f0:	3b02      	subs	r3, #2
 80141f2:	b29a      	uxth	r2, r3
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80141fa:	e043      	b.n	8014284 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014202:	b29b      	uxth	r3, r3
 8014204:	2b01      	cmp	r3, #1
 8014206:	d119      	bne.n	801423c <HAL_SPI_Receive+0x2dc>
 8014208:	693b      	ldr	r3, [r7, #16]
 801420a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801420e:	2b00      	cmp	r3, #0
 8014210:	d014      	beq.n	801423c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014216:	69ba      	ldr	r2, [r7, #24]
 8014218:	8812      	ldrh	r2, [r2, #0]
 801421a:	b292      	uxth	r2, r2
 801421c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014222:	1c9a      	adds	r2, r3, #2
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801422e:	b29b      	uxth	r3, r3
 8014230:	3b01      	subs	r3, #1
 8014232:	b29a      	uxth	r2, r3
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801423a:	e023      	b.n	8014284 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801423c:	f7f4 fa08 	bl	8008650 <HAL_GetTick>
 8014240:	4602      	mov	r2, r0
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	1ad3      	subs	r3, r2, r3
 8014246:	683a      	ldr	r2, [r7, #0]
 8014248:	429a      	cmp	r2, r3
 801424a:	d803      	bhi.n	8014254 <HAL_SPI_Receive+0x2f4>
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014252:	d102      	bne.n	801425a <HAL_SPI_Receive+0x2fa>
 8014254:	683b      	ldr	r3, [r7, #0]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d114      	bne.n	8014284 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801425a:	68f8      	ldr	r0, [r7, #12]
 801425c:	f001 fa3a 	bl	80156d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014266:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	2201      	movs	r2, #1
 8014274:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	2200      	movs	r2, #0
 801427c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014280:	2303      	movs	r3, #3
 8014282:	e0db      	b.n	801443c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801428a:	b29b      	uxth	r3, r3
 801428c:	2b00      	cmp	r3, #0
 801428e:	f47f af69 	bne.w	8014164 <HAL_SPI_Receive+0x204>
 8014292:	e0c0      	b.n	8014416 <HAL_SPI_Receive+0x4b6>
 8014294:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	695b      	ldr	r3, [r3, #20]
 801429e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	695b      	ldr	r3, [r3, #20]
 80142a6:	f003 0301 	and.w	r3, r3, #1
 80142aa:	2b01      	cmp	r3, #1
 80142ac:	d117      	bne.n	80142de <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80142ba:	7812      	ldrb	r2, [r2, #0]
 80142bc:	b2d2      	uxtb	r2, r2
 80142be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80142c4:	1c5a      	adds	r2, r3, #1
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	3b01      	subs	r3, #1
 80142d4:	b29a      	uxth	r2, r3
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80142dc:	e094      	b.n	8014408 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80142e4:	b29b      	uxth	r3, r3
 80142e6:	8bfa      	ldrh	r2, [r7, #30]
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d946      	bls.n	801437a <HAL_SPI_Receive+0x41a>
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d041      	beq.n	801437a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014302:	7812      	ldrb	r2, [r2, #0]
 8014304:	b2d2      	uxtb	r2, r2
 8014306:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801430c:	1c5a      	adds	r2, r3, #1
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801431e:	7812      	ldrb	r2, [r2, #0]
 8014320:	b2d2      	uxtb	r2, r2
 8014322:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014328:	1c5a      	adds	r2, r3, #1
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801433a:	7812      	ldrb	r2, [r2, #0]
 801433c:	b2d2      	uxtb	r2, r2
 801433e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014344:	1c5a      	adds	r2, r3, #1
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014356:	7812      	ldrb	r2, [r2, #0]
 8014358:	b2d2      	uxtb	r2, r2
 801435a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014360:	1c5a      	adds	r2, r3, #1
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801436c:	b29b      	uxth	r3, r3
 801436e:	3b04      	subs	r3, #4
 8014370:	b29a      	uxth	r2, r3
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014378:	e046      	b.n	8014408 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014380:	b29b      	uxth	r3, r3
 8014382:	2b03      	cmp	r3, #3
 8014384:	d81c      	bhi.n	80143c0 <HAL_SPI_Receive+0x460>
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801438c:	2b00      	cmp	r3, #0
 801438e:	d017      	beq.n	80143c0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801439c:	7812      	ldrb	r2, [r2, #0]
 801439e:	b2d2      	uxtb	r2, r2
 80143a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80143a6:	1c5a      	adds	r2, r3, #1
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	3b01      	subs	r3, #1
 80143b6:	b29a      	uxth	r2, r3
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80143be:	e023      	b.n	8014408 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80143c0:	f7f4 f946 	bl	8008650 <HAL_GetTick>
 80143c4:	4602      	mov	r2, r0
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	1ad3      	subs	r3, r2, r3
 80143ca:	683a      	ldr	r2, [r7, #0]
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d803      	bhi.n	80143d8 <HAL_SPI_Receive+0x478>
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143d6:	d102      	bne.n	80143de <HAL_SPI_Receive+0x47e>
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d114      	bne.n	8014408 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80143de:	68f8      	ldr	r0, [r7, #12]
 80143e0:	f001 f978 	bl	80156d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80143ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	2201      	movs	r2, #1
 80143f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	2200      	movs	r2, #0
 8014400:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014404:	2303      	movs	r3, #3
 8014406:	e019      	b.n	801443c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801440e:	b29b      	uxth	r3, r3
 8014410:	2b00      	cmp	r3, #0
 8014412:	f47f af41 	bne.w	8014298 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014416:	68f8      	ldr	r0, [r7, #12]
 8014418:	f001 f95c 	bl	80156d4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	2201      	movs	r2, #1
 8014420:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	2200      	movs	r2, #0
 8014428:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014432:	2b00      	cmp	r3, #0
 8014434:	d001      	beq.n	801443a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8014436:	2301      	movs	r3, #1
 8014438:	e000      	b.n	801443c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 801443a:	2300      	movs	r3, #0
  }
}
 801443c:	4618      	mov	r0, r3
 801443e:	3720      	adds	r7, #32
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}

08014444 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b08e      	sub	sp, #56	@ 0x38
 8014448:	af02      	add	r7, sp, #8
 801444a:	60f8      	str	r0, [r7, #12]
 801444c:	60b9      	str	r1, [r7, #8]
 801444e:	607a      	str	r2, [r7, #4]
 8014450:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	3320      	adds	r3, #32
 8014458:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	3330      	adds	r3, #48	@ 0x30
 8014460:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014466:	095b      	lsrs	r3, r3, #5
 8014468:	b29b      	uxth	r3, r3
 801446a:	3301      	adds	r3, #1
 801446c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801446e:	f7f4 f8ef 	bl	8008650 <HAL_GetTick>
 8014472:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8014474:	887b      	ldrh	r3, [r7, #2]
 8014476:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8014478:	887b      	ldrh	r3, [r7, #2]
 801447a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014482:	b2db      	uxtb	r3, r3
 8014484:	2b01      	cmp	r3, #1
 8014486:	d001      	beq.n	801448c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8014488:	2302      	movs	r3, #2
 801448a:	e310      	b.n	8014aae <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d005      	beq.n	801449e <HAL_SPI_TransmitReceive+0x5a>
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d002      	beq.n	801449e <HAL_SPI_TransmitReceive+0x5a>
 8014498:	887b      	ldrh	r3, [r7, #2]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d101      	bne.n	80144a2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 801449e:	2301      	movs	r3, #1
 80144a0:	e305      	b.n	8014aae <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80144a8:	2b01      	cmp	r3, #1
 80144aa:	d101      	bne.n	80144b0 <HAL_SPI_TransmitReceive+0x6c>
 80144ac:	2302      	movs	r3, #2
 80144ae:	e2fe      	b.n	8014aae <HAL_SPI_TransmitReceive+0x66a>
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	2201      	movs	r2, #1
 80144b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	2205      	movs	r2, #5
 80144bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	2200      	movs	r2, #0
 80144c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	687a      	ldr	r2, [r7, #4]
 80144cc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	887a      	ldrh	r2, [r7, #2]
 80144d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	887a      	ldrh	r2, [r7, #2]
 80144da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	68ba      	ldr	r2, [r7, #8]
 80144e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	887a      	ldrh	r2, [r7, #2]
 80144e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	887a      	ldrh	r2, [r7, #2]
 80144f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	2200      	movs	r2, #0
 80144f8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	2200      	movs	r2, #0
 80144fe:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	68da      	ldr	r2, [r3, #12]
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 801450e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	4a70      	ldr	r2, [pc, #448]	@ (80146d8 <HAL_SPI_TransmitReceive+0x294>)
 8014516:	4293      	cmp	r3, r2
 8014518:	d009      	beq.n	801452e <HAL_SPI_TransmitReceive+0xea>
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	4a6f      	ldr	r2, [pc, #444]	@ (80146dc <HAL_SPI_TransmitReceive+0x298>)
 8014520:	4293      	cmp	r3, r2
 8014522:	d004      	beq.n	801452e <HAL_SPI_TransmitReceive+0xea>
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	4a6d      	ldr	r2, [pc, #436]	@ (80146e0 <HAL_SPI_TransmitReceive+0x29c>)
 801452a:	4293      	cmp	r3, r2
 801452c:	d102      	bne.n	8014534 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 801452e:	2310      	movs	r3, #16
 8014530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014532:	e001      	b.n	8014538 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8014534:	2308      	movs	r3, #8
 8014536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	685a      	ldr	r2, [r3, #4]
 801453e:	4b69      	ldr	r3, [pc, #420]	@ (80146e4 <HAL_SPI_TransmitReceive+0x2a0>)
 8014540:	4013      	ands	r3, r2
 8014542:	8879      	ldrh	r1, [r7, #2]
 8014544:	68fa      	ldr	r2, [r7, #12]
 8014546:	6812      	ldr	r2, [r2, #0]
 8014548:	430b      	orrs	r3, r1
 801454a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	681a      	ldr	r2, [r3, #0]
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	f042 0201 	orr.w	r2, r2, #1
 801455a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	685b      	ldr	r3, [r3, #4]
 8014560:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014564:	d107      	bne.n	8014576 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	681a      	ldr	r2, [r3, #0]
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	68db      	ldr	r3, [r3, #12]
 801457a:	2b0f      	cmp	r3, #15
 801457c:	f240 80a2 	bls.w	80146c4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8014580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014582:	089b      	lsrs	r3, r3, #2
 8014584:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014586:	e094      	b.n	80146b2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	695b      	ldr	r3, [r3, #20]
 801458e:	f003 0302 	and.w	r3, r3, #2
 8014592:	2b02      	cmp	r3, #2
 8014594:	d120      	bne.n	80145d8 <HAL_SPI_TransmitReceive+0x194>
 8014596:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014598:	2b00      	cmp	r3, #0
 801459a:	d01d      	beq.n	80145d8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 801459c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801459e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80145a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145a2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80145a4:	429a      	cmp	r2, r3
 80145a6:	d217      	bcs.n	80145d8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	6812      	ldr	r2, [r2, #0]
 80145b2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80145b8:	1d1a      	adds	r2, r3, #4
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80145c4:	b29b      	uxth	r3, r3
 80145c6:	3b01      	subs	r3, #1
 80145c8:	b29a      	uxth	r2, r3
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80145d6:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	695b      	ldr	r3, [r3, #20]
 80145de:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80145e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d065      	beq.n	80146b2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	695b      	ldr	r3, [r3, #20]
 80145ec:	f003 0301 	and.w	r3, r3, #1
 80145f0:	2b01      	cmp	r3, #1
 80145f2:	d118      	bne.n	8014626 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	681a      	ldr	r2, [r3, #0]
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80145fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80145fe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014604:	1d1a      	adds	r2, r3, #4
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014610:	b29b      	uxth	r3, r3
 8014612:	3b01      	subs	r3, #1
 8014614:	b29a      	uxth	r2, r3
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014622:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014624:	e045      	b.n	80146b2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014626:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014628:	8bfb      	ldrh	r3, [r7, #30]
 801462a:	429a      	cmp	r2, r3
 801462c:	d21d      	bcs.n	801466a <HAL_SPI_TransmitReceive+0x226>
 801462e:	697b      	ldr	r3, [r7, #20]
 8014630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014634:	2b00      	cmp	r3, #0
 8014636:	d018      	beq.n	801466a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	681a      	ldr	r2, [r3, #0]
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014640:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014642:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014648:	1d1a      	adds	r2, r3, #4
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014654:	b29b      	uxth	r3, r3
 8014656:	3b01      	subs	r3, #1
 8014658:	b29a      	uxth	r2, r3
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014666:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014668:	e023      	b.n	80146b2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801466a:	f7f3 fff1 	bl	8008650 <HAL_GetTick>
 801466e:	4602      	mov	r2, r0
 8014670:	69bb      	ldr	r3, [r7, #24]
 8014672:	1ad3      	subs	r3, r2, r3
 8014674:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014676:	429a      	cmp	r2, r3
 8014678:	d803      	bhi.n	8014682 <HAL_SPI_TransmitReceive+0x23e>
 801467a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801467c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014680:	d102      	bne.n	8014688 <HAL_SPI_TransmitReceive+0x244>
 8014682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014684:	2b00      	cmp	r3, #0
 8014686:	d114      	bne.n	80146b2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8014688:	68f8      	ldr	r0, [r7, #12]
 801468a:	f001 f823 	bl	80156d4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014694:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	2201      	movs	r2, #1
 80146a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	2200      	movs	r2, #0
 80146aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80146ae:	2303      	movs	r3, #3
 80146b0:	e1fd      	b.n	8014aae <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80146b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	f47f af67 	bne.w	8014588 <HAL_SPI_TransmitReceive+0x144>
 80146ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80146bc:	2b00      	cmp	r3, #0
 80146be:	f47f af63 	bne.w	8014588 <HAL_SPI_TransmitReceive+0x144>
 80146c2:	e1ce      	b.n	8014a62 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	68db      	ldr	r3, [r3, #12]
 80146c8:	2b07      	cmp	r3, #7
 80146ca:	f240 81c2 	bls.w	8014a52 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80146ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146d0:	085b      	lsrs	r3, r3, #1
 80146d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80146d4:	e0c9      	b.n	801486a <HAL_SPI_TransmitReceive+0x426>
 80146d6:	bf00      	nop
 80146d8:	40013000 	.word	0x40013000
 80146dc:	40003800 	.word	0x40003800
 80146e0:	40003c00 	.word	0x40003c00
 80146e4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	695b      	ldr	r3, [r3, #20]
 80146ee:	f003 0302 	and.w	r3, r3, #2
 80146f2:	2b02      	cmp	r3, #2
 80146f4:	d11f      	bne.n	8014736 <HAL_SPI_TransmitReceive+0x2f2>
 80146f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d01c      	beq.n	8014736 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80146fc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80146fe:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8014700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014702:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014704:	429a      	cmp	r2, r3
 8014706:	d216      	bcs.n	8014736 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801470c:	881a      	ldrh	r2, [r3, #0]
 801470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014710:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014716:	1c9a      	adds	r2, r3, #2
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014722:	b29b      	uxth	r3, r3
 8014724:	3b01      	subs	r3, #1
 8014726:	b29a      	uxth	r2, r3
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014734:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	695b      	ldr	r3, [r3, #20]
 801473c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 801473e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014740:	2b00      	cmp	r3, #0
 8014742:	f000 8092 	beq.w	801486a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	695b      	ldr	r3, [r3, #20]
 801474c:	f003 0301 	and.w	r3, r3, #1
 8014750:	2b01      	cmp	r3, #1
 8014752:	d118      	bne.n	8014786 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014758:	6a3a      	ldr	r2, [r7, #32]
 801475a:	8812      	ldrh	r2, [r2, #0]
 801475c:	b292      	uxth	r2, r2
 801475e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014764:	1c9a      	adds	r2, r3, #2
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014770:	b29b      	uxth	r3, r3
 8014772:	3b01      	subs	r3, #1
 8014774:	b29a      	uxth	r2, r3
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014782:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014784:	e071      	b.n	801486a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014786:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014788:	8bfb      	ldrh	r3, [r7, #30]
 801478a:	429a      	cmp	r2, r3
 801478c:	d228      	bcs.n	80147e0 <HAL_SPI_TransmitReceive+0x39c>
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014794:	2b00      	cmp	r3, #0
 8014796:	d023      	beq.n	80147e0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801479c:	6a3a      	ldr	r2, [r7, #32]
 801479e:	8812      	ldrh	r2, [r2, #0]
 80147a0:	b292      	uxth	r2, r2
 80147a2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147a8:	1c9a      	adds	r2, r3, #2
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147b2:	6a3a      	ldr	r2, [r7, #32]
 80147b4:	8812      	ldrh	r2, [r2, #0]
 80147b6:	b292      	uxth	r2, r2
 80147b8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147be:	1c9a      	adds	r2, r3, #2
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80147ca:	b29b      	uxth	r3, r3
 80147cc:	3b02      	subs	r3, #2
 80147ce:	b29a      	uxth	r2, r3
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80147dc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80147de:	e044      	b.n	801486a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80147e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80147e2:	2b01      	cmp	r3, #1
 80147e4:	d11d      	bne.n	8014822 <HAL_SPI_TransmitReceive+0x3de>
 80147e6:	697b      	ldr	r3, [r7, #20]
 80147e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d018      	beq.n	8014822 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147f4:	6a3a      	ldr	r2, [r7, #32]
 80147f6:	8812      	ldrh	r2, [r2, #0]
 80147f8:	b292      	uxth	r2, r2
 80147fa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014800:	1c9a      	adds	r2, r3, #2
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801480c:	b29b      	uxth	r3, r3
 801480e:	3b01      	subs	r3, #1
 8014810:	b29a      	uxth	r2, r3
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801481e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014820:	e023      	b.n	801486a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014822:	f7f3 ff15 	bl	8008650 <HAL_GetTick>
 8014826:	4602      	mov	r2, r0
 8014828:	69bb      	ldr	r3, [r7, #24]
 801482a:	1ad3      	subs	r3, r2, r3
 801482c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801482e:	429a      	cmp	r2, r3
 8014830:	d803      	bhi.n	801483a <HAL_SPI_TransmitReceive+0x3f6>
 8014832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014838:	d102      	bne.n	8014840 <HAL_SPI_TransmitReceive+0x3fc>
 801483a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801483c:	2b00      	cmp	r3, #0
 801483e:	d114      	bne.n	801486a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8014840:	68f8      	ldr	r0, [r7, #12]
 8014842:	f000 ff47 	bl	80156d4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801484c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	2201      	movs	r2, #1
 801485a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	2200      	movs	r2, #0
 8014862:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8014866:	2303      	movs	r3, #3
 8014868:	e121      	b.n	8014aae <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801486a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801486c:	2b00      	cmp	r3, #0
 801486e:	f47f af3b 	bne.w	80146e8 <HAL_SPI_TransmitReceive+0x2a4>
 8014872:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014874:	2b00      	cmp	r3, #0
 8014876:	f47f af37 	bne.w	80146e8 <HAL_SPI_TransmitReceive+0x2a4>
 801487a:	e0f2      	b.n	8014a62 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	695b      	ldr	r3, [r3, #20]
 8014882:	f003 0302 	and.w	r3, r3, #2
 8014886:	2b02      	cmp	r3, #2
 8014888:	d121      	bne.n	80148ce <HAL_SPI_TransmitReceive+0x48a>
 801488a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801488c:	2b00      	cmp	r3, #0
 801488e:	d01e      	beq.n	80148ce <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8014890:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014892:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8014894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014896:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014898:	429a      	cmp	r2, r3
 801489a:	d218      	bcs.n	80148ce <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	3320      	adds	r3, #32
 80148a6:	7812      	ldrb	r2, [r2, #0]
 80148a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80148ae:	1c5a      	adds	r2, r3, #1
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	3b01      	subs	r3, #1
 80148be:	b29a      	uxth	r2, r3
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80148cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	695b      	ldr	r3, [r3, #20]
 80148d4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80148d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80148d8:	2b00      	cmp	r3, #0
 80148da:	f000 80ba 	beq.w	8014a52 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	695b      	ldr	r3, [r3, #20]
 80148e4:	f003 0301 	and.w	r3, r3, #1
 80148e8:	2b01      	cmp	r3, #1
 80148ea:	d11b      	bne.n	8014924 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80148f8:	7812      	ldrb	r2, [r2, #0]
 80148fa:	b2d2      	uxtb	r2, r2
 80148fc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014902:	1c5a      	adds	r2, r3, #1
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801490e:	b29b      	uxth	r3, r3
 8014910:	3b01      	subs	r3, #1
 8014912:	b29a      	uxth	r2, r3
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014920:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014922:	e096      	b.n	8014a52 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014924:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014926:	8bfb      	ldrh	r3, [r7, #30]
 8014928:	429a      	cmp	r2, r3
 801492a:	d24a      	bcs.n	80149c2 <HAL_SPI_TransmitReceive+0x57e>
 801492c:	697b      	ldr	r3, [r7, #20]
 801492e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014932:	2b00      	cmp	r3, #0
 8014934:	d045      	beq.n	80149c2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014942:	7812      	ldrb	r2, [r2, #0]
 8014944:	b2d2      	uxtb	r2, r2
 8014946:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801494c:	1c5a      	adds	r2, r3, #1
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801495e:	7812      	ldrb	r2, [r2, #0]
 8014960:	b2d2      	uxtb	r2, r2
 8014962:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014968:	1c5a      	adds	r2, r3, #1
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801497a:	7812      	ldrb	r2, [r2, #0]
 801497c:	b2d2      	uxtb	r2, r2
 801497e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014984:	1c5a      	adds	r2, r3, #1
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014996:	7812      	ldrb	r2, [r2, #0]
 8014998:	b2d2      	uxtb	r2, r2
 801499a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80149a0:	1c5a      	adds	r2, r3, #1
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80149ac:	b29b      	uxth	r3, r3
 80149ae:	3b04      	subs	r3, #4
 80149b0:	b29a      	uxth	r2, r3
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80149be:	853b      	strh	r3, [r7, #40]	@ 0x28
 80149c0:	e047      	b.n	8014a52 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80149c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80149c4:	2b03      	cmp	r3, #3
 80149c6:	d820      	bhi.n	8014a0a <HAL_SPI_TransmitReceive+0x5c6>
 80149c8:	697b      	ldr	r3, [r7, #20]
 80149ca:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d01b      	beq.n	8014a0a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80149de:	7812      	ldrb	r2, [r2, #0]
 80149e0:	b2d2      	uxtb	r2, r2
 80149e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80149e8:	1c5a      	adds	r2, r3, #1
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80149f4:	b29b      	uxth	r3, r3
 80149f6:	3b01      	subs	r3, #1
 80149f8:	b29a      	uxth	r2, r3
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014a06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014a08:	e023      	b.n	8014a52 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014a0a:	f7f3 fe21 	bl	8008650 <HAL_GetTick>
 8014a0e:	4602      	mov	r2, r0
 8014a10:	69bb      	ldr	r3, [r7, #24]
 8014a12:	1ad3      	subs	r3, r2, r3
 8014a14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014a16:	429a      	cmp	r2, r3
 8014a18:	d803      	bhi.n	8014a22 <HAL_SPI_TransmitReceive+0x5de>
 8014a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a20:	d102      	bne.n	8014a28 <HAL_SPI_TransmitReceive+0x5e4>
 8014a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d114      	bne.n	8014a52 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8014a28:	68f8      	ldr	r0, [r7, #12]
 8014a2a:	f000 fe53 	bl	80156d4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014a34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	2201      	movs	r2, #1
 8014a42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	2200      	movs	r2, #0
 8014a4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8014a4e:	2303      	movs	r3, #3
 8014a50:	e02d      	b.n	8014aae <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014a52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	f47f af11 	bne.w	801487c <HAL_SPI_TransmitReceive+0x438>
 8014a5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	f47f af0d 	bne.w	801487c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014a62:	69bb      	ldr	r3, [r7, #24]
 8014a64:	9300      	str	r3, [sp, #0]
 8014a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a68:	2200      	movs	r2, #0
 8014a6a:	2108      	movs	r1, #8
 8014a6c:	68f8      	ldr	r0, [r7, #12]
 8014a6e:	f000 fed1 	bl	8015814 <SPI_WaitOnFlagUntilTimeout>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d007      	beq.n	8014a88 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014a7e:	f043 0220 	orr.w	r2, r3, #32
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014a88:	68f8      	ldr	r0, [r7, #12]
 8014a8a:	f000 fe23 	bl	80156d4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	2201      	movs	r2, #1
 8014a92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d001      	beq.n	8014aac <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	e000      	b.n	8014aae <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8014aac:	2300      	movs	r3, #0
  }
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3730      	adds	r7, #48	@ 0x30
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
 8014ab6:	bf00      	nop

08014ab8 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8014ab8:	b480      	push	{r7}
 8014aba:	b085      	sub	sp, #20
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	4613      	mov	r3, r2
 8014ac4:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if ((pData == NULL) || (Size == 0UL))
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d002      	beq.n	8014ad2 <HAL_SPI_Transmit_IT+0x1a>
 8014acc:	88fb      	ldrh	r3, [r7, #6]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d101      	bne.n	8014ad6 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8014ad2:	2301      	movs	r3, #1
 8014ad4:	e08b      	b.n	8014bee <HAL_SPI_Transmit_IT+0x136>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014adc:	b2db      	uxtb	r3, r3
 8014ade:	2b01      	cmp	r3, #1
 8014ae0:	d001      	beq.n	8014ae6 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8014ae2:	2302      	movs	r3, #2
 8014ae4:	e083      	b.n	8014bee <HAL_SPI_Transmit_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014aec:	2b01      	cmp	r3, #1
 8014aee:	d101      	bne.n	8014af4 <HAL_SPI_Transmit_IT+0x3c>
 8014af0:	2302      	movs	r3, #2
 8014af2:	e07c      	b.n	8014bee <HAL_SPI_Transmit_IT+0x136>
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	2201      	movs	r2, #1
 8014af8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	2203      	movs	r2, #3
 8014b00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	2200      	movs	r2, #0
 8014b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	68ba      	ldr	r2, [r7, #8]
 8014b10:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	88fa      	ldrh	r2, [r7, #6]
 8014b16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	88fa      	ldrh	r2, [r7, #6]
 8014b1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	2200      	movs	r2, #0
 8014b26:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	2200      	movs	r2, #0
 8014b34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	68db      	ldr	r3, [r3, #12]
 8014b42:	2b0f      	cmp	r3, #15
 8014b44:	d903      	bls.n	8014b4e <HAL_SPI_Transmit_IT+0x96>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	4a2c      	ldr	r2, [pc, #176]	@ (8014bfc <HAL_SPI_Transmit_IT+0x144>)
 8014b4a:	675a      	str	r2, [r3, #116]	@ 0x74
 8014b4c:	e00a      	b.n	8014b64 <HAL_SPI_Transmit_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	68db      	ldr	r3, [r3, #12]
 8014b52:	2b07      	cmp	r3, #7
 8014b54:	d903      	bls.n	8014b5e <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	4a29      	ldr	r2, [pc, #164]	@ (8014c00 <HAL_SPI_Transmit_IT+0x148>)
 8014b5a:	675a      	str	r2, [r3, #116]	@ 0x74
 8014b5c:	e002      	b.n	8014b64 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	4a28      	ldr	r2, [pc, #160]	@ (8014c04 <HAL_SPI_Transmit_IT+0x14c>)
 8014b62:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	689b      	ldr	r3, [r3, #8]
 8014b68:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014b6c:	d108      	bne.n	8014b80 <HAL_SPI_Transmit_IT+0xc8>
  {
    SPI_1LINE_TX(hspi);
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	681a      	ldr	r2, [r3, #0]
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014b7c:	601a      	str	r2, [r3, #0]
 8014b7e:	e009      	b.n	8014b94 <HAL_SPI_Transmit_IT+0xdc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	68db      	ldr	r3, [r3, #12]
 8014b86:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014b92:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	685a      	ldr	r2, [r3, #4]
 8014b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8014c08 <HAL_SPI_Transmit_IT+0x150>)
 8014b9c:	4013      	ands	r3, r2
 8014b9e:	88f9      	ldrh	r1, [r7, #6]
 8014ba0:	68fa      	ldr	r2, [r7, #12]
 8014ba2:	6812      	ldr	r2, [r2, #0]
 8014ba4:	430b      	orrs	r3, r1
 8014ba6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	681a      	ldr	r2, [r3, #0]
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	f042 0201 	orr.w	r2, r2, #1
 8014bb6:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	2200      	movs	r2, #0
 8014bbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	6919      	ldr	r1, [r3, #16]
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	681a      	ldr	r2, [r3, #0]
 8014bca:	f240 732a 	movw	r3, #1834	@ 0x72a
 8014bce:	430b      	orrs	r3, r1
 8014bd0:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	685b      	ldr	r3, [r3, #4]
 8014bd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014bda:	d107      	bne.n	8014bec <HAL_SPI_Transmit_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	681a      	ldr	r2, [r3, #0]
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014bea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8014bec:	2300      	movs	r3, #0
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3714      	adds	r7, #20
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf8:	4770      	bx	lr
 8014bfa:	bf00      	nop
 8014bfc:	0801567b 	.word	0x0801567b
 8014c00:	0801561d 	.word	0x0801561d
 8014c04:	080155c3 	.word	0x080155c3
 8014c08:	ffff0000 	.word	0xffff0000

08014c0c <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8014c0c:	b480      	push	{r7}
 8014c0e:	b085      	sub	sp, #20
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	4613      	mov	r3, r2
 8014c18:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014c20:	b2db      	uxtb	r3, r3
 8014c22:	2b01      	cmp	r3, #1
 8014c24:	d001      	beq.n	8014c2a <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8014c26:	2302      	movs	r3, #2
 8014c28:	e08b      	b.n	8014d42 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014c2a:	68bb      	ldr	r3, [r7, #8]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d002      	beq.n	8014c36 <HAL_SPI_Receive_IT+0x2a>
 8014c30:	88fb      	ldrh	r3, [r7, #6]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d101      	bne.n	8014c3a <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 8014c36:	2301      	movs	r3, #1
 8014c38:	e083      	b.n	8014d42 <HAL_SPI_Receive_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d101      	bne.n	8014c48 <HAL_SPI_Receive_IT+0x3c>
 8014c44:	2302      	movs	r3, #2
 8014c46:	e07c      	b.n	8014d42 <HAL_SPI_Receive_IT+0x136>
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	2201      	movs	r2, #1
 8014c4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	2204      	movs	r2, #4
 8014c54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	68ba      	ldr	r2, [r7, #8]
 8014c64:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	88fa      	ldrh	r2, [r7, #6]
 8014c6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	88fa      	ldrh	r2, [r7, #6]
 8014c72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	2200      	movs	r2, #0
 8014c7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	2200      	movs	r2, #0
 8014c80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	2200      	movs	r2, #0
 8014c88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxISR       = NULL;
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	2200      	movs	r2, #0
 8014c90:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->Reload.pRxBuffPtr  = NULL;
  hspi->Reload.RxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	68db      	ldr	r3, [r3, #12]
 8014c96:	2b0f      	cmp	r3, #15
 8014c98:	d903      	bls.n	8014ca2 <HAL_SPI_Receive_IT+0x96>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	4a2c      	ldr	r2, [pc, #176]	@ (8014d50 <HAL_SPI_Receive_IT+0x144>)
 8014c9e:	671a      	str	r2, [r3, #112]	@ 0x70
 8014ca0:	e00a      	b.n	8014cb8 <HAL_SPI_Receive_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	68db      	ldr	r3, [r3, #12]
 8014ca6:	2b07      	cmp	r3, #7
 8014ca8:	d903      	bls.n	8014cb2 <HAL_SPI_Receive_IT+0xa6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	4a29      	ldr	r2, [pc, #164]	@ (8014d54 <HAL_SPI_Receive_IT+0x148>)
 8014cae:	671a      	str	r2, [r3, #112]	@ 0x70
 8014cb0:	e002      	b.n	8014cb8 <HAL_SPI_Receive_IT+0xac>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	4a28      	ldr	r2, [pc, #160]	@ (8014d58 <HAL_SPI_Receive_IT+0x14c>)
 8014cb6:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	689b      	ldr	r3, [r3, #8]
 8014cbc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014cc0:	d108      	bne.n	8014cd4 <HAL_SPI_Receive_IT+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	681a      	ldr	r2, [r3, #0]
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014cd0:	601a      	str	r2, [r3, #0]
 8014cd2:	e009      	b.n	8014ce8 <HAL_SPI_Receive_IT+0xdc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	68db      	ldr	r3, [r3, #12]
 8014cda:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014ce6:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	685a      	ldr	r2, [r3, #4]
 8014cee:	4b1b      	ldr	r3, [pc, #108]	@ (8014d5c <HAL_SPI_Receive_IT+0x150>)
 8014cf0:	4013      	ands	r3, r2
 8014cf2:	88f9      	ldrh	r1, [r7, #6]
 8014cf4:	68fa      	ldr	r2, [r7, #12]
 8014cf6:	6812      	ldr	r2, [r2, #0]
 8014cf8:	430b      	orrs	r3, r1
 8014cfa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	681a      	ldr	r2, [r3, #0]
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	f042 0201 	orr.w	r2, r2, #1
 8014d0a:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	6919      	ldr	r1, [r3, #16]
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	681a      	ldr	r2, [r3, #0]
 8014d1e:	f240 7349 	movw	r3, #1865	@ 0x749
 8014d22:	430b      	orrs	r3, r1
 8014d24:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	685b      	ldr	r3, [r3, #4]
 8014d2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014d2e:	d107      	bne.n	8014d40 <HAL_SPI_Receive_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	681a      	ldr	r2, [r3, #0]
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014d3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8014d40:	2300      	movs	r3, #0
}
 8014d42:	4618      	mov	r0, r3
 8014d44:	3714      	adds	r7, #20
 8014d46:	46bd      	mov	sp, r7
 8014d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4c:	4770      	bx	lr
 8014d4e:	bf00      	nop
 8014d50:	0801556b 	.word	0x0801556b
 8014d54:	0801550b 	.word	0x0801550b
 8014d58:	080154ad 	.word	0x080154ad
 8014d5c:	ffff0000 	.word	0xffff0000

08014d60 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b084      	sub	sp, #16
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	60f8      	str	r0, [r7, #12]
 8014d68:	60b9      	str	r1, [r7, #8]
 8014d6a:	4613      	mov	r3, r2
 8014d6c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014d74:	b2db      	uxtb	r3, r3
 8014d76:	2b01      	cmp	r3, #1
 8014d78:	d001      	beq.n	8014d7e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8014d7a:	2302      	movs	r3, #2
 8014d7c:	e126      	b.n	8014fcc <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d002      	beq.n	8014d8a <HAL_SPI_Transmit_DMA+0x2a>
 8014d84:	88fb      	ldrh	r3, [r7, #6]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d101      	bne.n	8014d8e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8014d8a:	2301      	movs	r3, #1
 8014d8c:	e11e      	b.n	8014fcc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014d94:	2b01      	cmp	r3, #1
 8014d96:	d101      	bne.n	8014d9c <HAL_SPI_Transmit_DMA+0x3c>
 8014d98:	2302      	movs	r3, #2
 8014d9a:	e117      	b.n	8014fcc <HAL_SPI_Transmit_DMA+0x26c>
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	2201      	movs	r2, #1
 8014da0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	2203      	movs	r2, #3
 8014da8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	2200      	movs	r2, #0
 8014db0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	68ba      	ldr	r2, [r7, #8]
 8014db8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	88fa      	ldrh	r2, [r7, #6]
 8014dbe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	88fa      	ldrh	r2, [r7, #6]
 8014dc6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	2200      	movs	r2, #0
 8014dce:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	2200      	movs	r2, #0
 8014de0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	2200      	movs	r2, #0
 8014de8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	689b      	ldr	r3, [r3, #8]
 8014df0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014df4:	d108      	bne.n	8014e08 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	681a      	ldr	r2, [r3, #0]
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014e04:	601a      	str	r2, [r3, #0]
 8014e06:	e009      	b.n	8014e1c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	68db      	ldr	r3, [r3, #12]
 8014e0e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014e1a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	68db      	ldr	r3, [r3, #12]
 8014e20:	2b0f      	cmp	r3, #15
 8014e22:	d905      	bls.n	8014e30 <HAL_SPI_Transmit_DMA+0xd0>
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014e28:	699b      	ldr	r3, [r3, #24]
 8014e2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014e2e:	d10f      	bne.n	8014e50 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014e34:	2b07      	cmp	r3, #7
 8014e36:	d911      	bls.n	8014e5c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014e3c:	699b      	ldr	r3, [r3, #24]
 8014e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014e42:	d00b      	beq.n	8014e5c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014e48:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014e4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014e4e:	d005      	beq.n	8014e5c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	2200      	movs	r2, #0
 8014e54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8014e58:	2301      	movs	r3, #1
 8014e5a:	e0b7      	b.n	8014fcc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	68db      	ldr	r3, [r3, #12]
 8014e60:	2b07      	cmp	r3, #7
 8014e62:	d820      	bhi.n	8014ea6 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014e68:	699b      	ldr	r3, [r3, #24]
 8014e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014e6e:	d109      	bne.n	8014e84 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014e76:	b29b      	uxth	r3, r3
 8014e78:	3301      	adds	r3, #1
 8014e7a:	105b      	asrs	r3, r3, #1
 8014e7c:	b29a      	uxth	r2, r3
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014e88:	699b      	ldr	r3, [r3, #24]
 8014e8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014e8e:	d11e      	bne.n	8014ece <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014e96:	b29b      	uxth	r3, r3
 8014e98:	3303      	adds	r3, #3
 8014e9a:	109b      	asrs	r3, r3, #2
 8014e9c:	b29a      	uxth	r2, r3
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014ea4:	e013      	b.n	8014ece <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	68db      	ldr	r3, [r3, #12]
 8014eaa:	2b0f      	cmp	r3, #15
 8014eac:	d80f      	bhi.n	8014ece <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014eb2:	699b      	ldr	r3, [r3, #24]
 8014eb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014eb8:	d109      	bne.n	8014ece <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014ec0:	b29b      	uxth	r3, r3
 8014ec2:	3301      	adds	r3, #1
 8014ec4:	105b      	asrs	r3, r3, #1
 8014ec6:	b29a      	uxth	r2, r3
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014ed2:	4a40      	ldr	r2, [pc, #256]	@ (8014fd4 <HAL_SPI_Transmit_DMA+0x274>)
 8014ed4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014eda:	4a3f      	ldr	r2, [pc, #252]	@ (8014fd8 <HAL_SPI_Transmit_DMA+0x278>)
 8014edc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014ee2:	4a3e      	ldr	r2, [pc, #248]	@ (8014fdc <HAL_SPI_Transmit_DMA+0x27c>)
 8014ee4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014eea:	2200      	movs	r2, #0
 8014eec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	689a      	ldr	r2, [r3, #8]
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8014efc:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014f06:	4619      	mov	r1, r3
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	3320      	adds	r3, #32
 8014f0e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014f16:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014f18:	f7f6 f828 	bl	800af6c <HAL_DMA_Start_IT>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d011      	beq.n	8014f46 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014f28:	f043 0210 	orr.w	r2, r3, #16
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	2201      	movs	r2, #1
 8014f36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8014f42:	2301      	movs	r3, #1
 8014f44:	e042      	b.n	8014fcc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014f4a:	69db      	ldr	r3, [r3, #28]
 8014f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014f50:	d108      	bne.n	8014f64 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	6859      	ldr	r1, [r3, #4]
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	681a      	ldr	r2, [r3, #0]
 8014f5c:	4b20      	ldr	r3, [pc, #128]	@ (8014fe0 <HAL_SPI_Transmit_DMA+0x280>)
 8014f5e:	400b      	ands	r3, r1
 8014f60:	6053      	str	r3, [r2, #4]
 8014f62:	e009      	b.n	8014f78 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	685a      	ldr	r2, [r3, #4]
 8014f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8014fe0 <HAL_SPI_Transmit_DMA+0x280>)
 8014f6c:	4013      	ands	r3, r2
 8014f6e:	88f9      	ldrh	r1, [r7, #6]
 8014f70:	68fa      	ldr	r2, [r7, #12]
 8014f72:	6812      	ldr	r2, [r2, #0]
 8014f74:	430b      	orrs	r3, r1
 8014f76:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	689a      	ldr	r2, [r3, #8]
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8014f86:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	691a      	ldr	r2, [r3, #16]
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8014f96:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	681a      	ldr	r2, [r3, #0]
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	f042 0201 	orr.w	r2, r2, #1
 8014fa6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	685b      	ldr	r3, [r3, #4]
 8014fac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014fb0:	d107      	bne.n	8014fc2 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	681a      	ldr	r2, [r3, #0]
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014fc0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8014fca:	2300      	movs	r3, #0
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3710      	adds	r7, #16
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}
 8014fd4:	08015417 	.word	0x08015417
 8014fd8:	080153d1 	.word	0x080153d1
 8014fdc:	08015433 	.word	0x08015433
 8014fe0:	ffff0000 	.word	0xffff0000

08014fe4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b08a      	sub	sp, #40	@ 0x28
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	691b      	ldr	r3, [r3, #16]
 8014ff2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	695b      	ldr	r3, [r3, #20]
 8014ffa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8014ffc:	6a3a      	ldr	r2, [r7, #32]
 8014ffe:	69fb      	ldr	r3, [r7, #28]
 8015000:	4013      	ands	r3, r2
 8015002:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	689b      	ldr	r3, [r3, #8]
 801500a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801500c:	2300      	movs	r3, #0
 801500e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015016:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	3330      	adds	r3, #48	@ 0x30
 801501e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015020:	69fb      	ldr	r3, [r7, #28]
 8015022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015026:	2b00      	cmp	r3, #0
 8015028:	d010      	beq.n	801504c <HAL_SPI_IRQHandler+0x68>
 801502a:	6a3b      	ldr	r3, [r7, #32]
 801502c:	f003 0308 	and.w	r3, r3, #8
 8015030:	2b00      	cmp	r3, #0
 8015032:	d00b      	beq.n	801504c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	699a      	ldr	r2, [r3, #24]
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015042:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8015044:	6878      	ldr	r0, [r7, #4]
 8015046:	f000 f9b9 	bl	80153bc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801504a:	e192      	b.n	8015372 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801504c:	69bb      	ldr	r3, [r7, #24]
 801504e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015052:	2b00      	cmp	r3, #0
 8015054:	d113      	bne.n	801507e <HAL_SPI_IRQHandler+0x9a>
 8015056:	69bb      	ldr	r3, [r7, #24]
 8015058:	f003 0320 	and.w	r3, r3, #32
 801505c:	2b00      	cmp	r3, #0
 801505e:	d10e      	bne.n	801507e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8015060:	69bb      	ldr	r3, [r7, #24]
 8015062:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015066:	2b00      	cmp	r3, #0
 8015068:	d009      	beq.n	801507e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801506e:	6878      	ldr	r0, [r7, #4]
 8015070:	4798      	blx	r3
    hspi->RxISR(hspi);
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015076:	6878      	ldr	r0, [r7, #4]
 8015078:	4798      	blx	r3
    handled = 1UL;
 801507a:	2301      	movs	r3, #1
 801507c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801507e:	69bb      	ldr	r3, [r7, #24]
 8015080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015084:	2b00      	cmp	r3, #0
 8015086:	d10f      	bne.n	80150a8 <HAL_SPI_IRQHandler+0xc4>
 8015088:	69bb      	ldr	r3, [r7, #24]
 801508a:	f003 0301 	and.w	r3, r3, #1
 801508e:	2b00      	cmp	r3, #0
 8015090:	d00a      	beq.n	80150a8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015092:	69bb      	ldr	r3, [r7, #24]
 8015094:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015098:	2b00      	cmp	r3, #0
 801509a:	d105      	bne.n	80150a8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	4798      	blx	r3
    handled = 1UL;
 80150a4:	2301      	movs	r3, #1
 80150a6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80150a8:	69bb      	ldr	r3, [r7, #24]
 80150aa:	f003 0320 	and.w	r3, r3, #32
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d10f      	bne.n	80150d2 <HAL_SPI_IRQHandler+0xee>
 80150b2:	69bb      	ldr	r3, [r7, #24]
 80150b4:	f003 0302 	and.w	r3, r3, #2
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d00a      	beq.n	80150d2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80150bc:	69bb      	ldr	r3, [r7, #24]
 80150be:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d105      	bne.n	80150d2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	4798      	blx	r3
    handled = 1UL;
 80150ce:	2301      	movs	r3, #1
 80150d0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80150d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	f040 8147 	bne.w	8015368 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80150da:	69bb      	ldr	r3, [r7, #24]
 80150dc:	f003 0308 	and.w	r3, r3, #8
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	f000 808b 	beq.w	80151fc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	699a      	ldr	r2, [r3, #24]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	f042 0208 	orr.w	r2, r2, #8
 80150f4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	699a      	ldr	r2, [r3, #24]
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	f042 0210 	orr.w	r2, r2, #16
 8015104:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	699a      	ldr	r2, [r3, #24]
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015114:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	691a      	ldr	r2, [r3, #16]
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	f022 0208 	bic.w	r2, r2, #8
 8015124:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	689b      	ldr	r3, [r3, #8]
 801512c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015130:	2b00      	cmp	r3, #0
 8015132:	d13d      	bne.n	80151b0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015134:	e036      	b.n	80151a4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	68db      	ldr	r3, [r3, #12]
 801513a:	2b0f      	cmp	r3, #15
 801513c:	d90b      	bls.n	8015156 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	681a      	ldr	r2, [r3, #0]
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015146:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015148:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801514e:	1d1a      	adds	r2, r3, #4
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	665a      	str	r2, [r3, #100]	@ 0x64
 8015154:	e01d      	b.n	8015192 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	68db      	ldr	r3, [r3, #12]
 801515a:	2b07      	cmp	r3, #7
 801515c:	d90b      	bls.n	8015176 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015162:	68fa      	ldr	r2, [r7, #12]
 8015164:	8812      	ldrh	r2, [r2, #0]
 8015166:	b292      	uxth	r2, r2
 8015168:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801516e:	1c9a      	adds	r2, r3, #2
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	665a      	str	r2, [r3, #100]	@ 0x64
 8015174:	e00d      	b.n	8015192 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015182:	7812      	ldrb	r2, [r2, #0]
 8015184:	b2d2      	uxtb	r2, r2
 8015186:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801518c:	1c5a      	adds	r2, r3, #1
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015198:	b29b      	uxth	r3, r3
 801519a:	3b01      	subs	r3, #1
 801519c:	b29a      	uxth	r2, r3
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d1c2      	bne.n	8015136 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80151b0:	6878      	ldr	r0, [r7, #4]
 80151b2:	f000 fa8f 	bl	80156d4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	2201      	movs	r2, #1
 80151ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d003      	beq.n	80151d0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80151c8:	6878      	ldr	r0, [r7, #4]
 80151ca:	f000 f8ed 	bl	80153a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80151ce:	e0d0      	b.n	8015372 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80151d0:	7cfb      	ldrb	r3, [r7, #19]
 80151d2:	2b05      	cmp	r3, #5
 80151d4:	d103      	bne.n	80151de <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80151d6:	6878      	ldr	r0, [r7, #4]
 80151d8:	f000 f8d2 	bl	8015380 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80151dc:	e0c6      	b.n	801536c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80151de:	7cfb      	ldrb	r3, [r7, #19]
 80151e0:	2b04      	cmp	r3, #4
 80151e2:	d103      	bne.n	80151ec <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f7f1 fb55 	bl	8006894 <HAL_SPI_RxCpltCallback>
    return;
 80151ea:	e0bf      	b.n	801536c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80151ec:	7cfb      	ldrb	r3, [r7, #19]
 80151ee:	2b03      	cmp	r3, #3
 80151f0:	f040 80bc 	bne.w	801536c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f7f1 fb0d 	bl	8006814 <HAL_SPI_TxCpltCallback>
    return;
 80151fa:	e0b7      	b.n	801536c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80151fc:	69bb      	ldr	r3, [r7, #24]
 80151fe:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015202:	2b00      	cmp	r3, #0
 8015204:	f000 80b5 	beq.w	8015372 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015208:	69bb      	ldr	r3, [r7, #24]
 801520a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801520e:	2b00      	cmp	r3, #0
 8015210:	d00f      	beq.n	8015232 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015218:	f043 0204 	orr.w	r2, r3, #4
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	699a      	ldr	r2, [r3, #24]
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015230:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015238:	2b00      	cmp	r3, #0
 801523a:	d00f      	beq.n	801525c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015242:	f043 0201 	orr.w	r2, r3, #1
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	699a      	ldr	r2, [r3, #24]
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801525a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801525c:	69bb      	ldr	r3, [r7, #24]
 801525e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015262:	2b00      	cmp	r3, #0
 8015264:	d00f      	beq.n	8015286 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801526c:	f043 0208 	orr.w	r2, r3, #8
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	699a      	ldr	r2, [r3, #24]
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015284:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015286:	69bb      	ldr	r3, [r7, #24]
 8015288:	f003 0320 	and.w	r3, r3, #32
 801528c:	2b00      	cmp	r3, #0
 801528e:	d00f      	beq.n	80152b0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015296:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	699a      	ldr	r2, [r3, #24]
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	f042 0220 	orr.w	r2, r2, #32
 80152ae:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d05a      	beq.n	8015370 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	681a      	ldr	r2, [r3, #0]
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	f022 0201 	bic.w	r2, r2, #1
 80152c8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	6919      	ldr	r1, [r3, #16]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	681a      	ldr	r2, [r3, #0]
 80152d4:	4b28      	ldr	r3, [pc, #160]	@ (8015378 <HAL_SPI_IRQHandler+0x394>)
 80152d6:	400b      	ands	r3, r1
 80152d8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80152e0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80152e4:	d138      	bne.n	8015358 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	689a      	ldr	r2, [r3, #8]
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80152f4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d013      	beq.n	8015326 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015302:	4a1e      	ldr	r2, [pc, #120]	@ (801537c <HAL_SPI_IRQHandler+0x398>)
 8015304:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801530a:	4618      	mov	r0, r3
 801530c:	f7f6 fbb6 	bl	800ba7c <HAL_DMA_Abort_IT>
 8015310:	4603      	mov	r3, r0
 8015312:	2b00      	cmp	r3, #0
 8015314:	d007      	beq.n	8015326 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801531c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801532a:	2b00      	cmp	r3, #0
 801532c:	d020      	beq.n	8015370 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015332:	4a12      	ldr	r2, [pc, #72]	@ (801537c <HAL_SPI_IRQHandler+0x398>)
 8015334:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801533a:	4618      	mov	r0, r3
 801533c:	f7f6 fb9e 	bl	800ba7c <HAL_DMA_Abort_IT>
 8015340:	4603      	mov	r3, r0
 8015342:	2b00      	cmp	r3, #0
 8015344:	d014      	beq.n	8015370 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801534c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015356:	e00b      	b.n	8015370 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2201      	movs	r2, #1
 801535c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8015360:	6878      	ldr	r0, [r7, #4]
 8015362:	f000 f821 	bl	80153a8 <HAL_SPI_ErrorCallback>
    return;
 8015366:	e003      	b.n	8015370 <HAL_SPI_IRQHandler+0x38c>
    return;
 8015368:	bf00      	nop
 801536a:	e002      	b.n	8015372 <HAL_SPI_IRQHandler+0x38e>
    return;
 801536c:	bf00      	nop
 801536e:	e000      	b.n	8015372 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015370:	bf00      	nop
  }
}
 8015372:	3728      	adds	r7, #40	@ 0x28
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}
 8015378:	fffffc94 	.word	0xfffffc94
 801537c:	08015479 	.word	0x08015479

08015380 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015380:	b480      	push	{r7}
 8015382:	b083      	sub	sp, #12
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8015388:	bf00      	nop
 801538a:	370c      	adds	r7, #12
 801538c:	46bd      	mov	sp, r7
 801538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015392:	4770      	bx	lr

08015394 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015394:	b480      	push	{r7}
 8015396:	b083      	sub	sp, #12
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 801539c:	bf00      	nop
 801539e:	370c      	adds	r7, #12
 80153a0:	46bd      	mov	sp, r7
 80153a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a6:	4770      	bx	lr

080153a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80153a8:	b480      	push	{r7}
 80153aa:	b083      	sub	sp, #12
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80153b0:	bf00      	nop
 80153b2:	370c      	adds	r7, #12
 80153b4:	46bd      	mov	sp, r7
 80153b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ba:	4770      	bx	lr

080153bc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80153bc:	b480      	push	{r7}
 80153be:	b083      	sub	sp, #12
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80153c4:	bf00      	nop
 80153c6:	370c      	adds	r7, #12
 80153c8:	46bd      	mov	sp, r7
 80153ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ce:	4770      	bx	lr

080153d0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b084      	sub	sp, #16
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153dc:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80153e4:	b2db      	uxtb	r3, r3
 80153e6:	2b07      	cmp	r3, #7
 80153e8:	d011      	beq.n	801540e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80153ee:	69db      	ldr	r3, [r3, #28]
 80153f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80153f4:	d103      	bne.n	80153fe <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80153f6:	68f8      	ldr	r0, [r7, #12]
 80153f8:	f7f1 fa0c 	bl	8006814 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80153fc:	e007      	b.n	801540e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	691a      	ldr	r2, [r3, #16]
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	f042 0208 	orr.w	r2, r2, #8
 801540c:	611a      	str	r2, [r3, #16]
}
 801540e:	bf00      	nop
 8015410:	3710      	adds	r7, #16
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}

08015416 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015416:	b580      	push	{r7, lr}
 8015418:	b084      	sub	sp, #16
 801541a:	af00      	add	r7, sp, #0
 801541c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015422:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8015424:	68f8      	ldr	r0, [r7, #12]
 8015426:	f7ff ffb5 	bl	8015394 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801542a:	bf00      	nop
 801542c:	3710      	adds	r7, #16
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}

08015432 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8015432:	b580      	push	{r7, lr}
 8015434:	b084      	sub	sp, #16
 8015436:	af00      	add	r7, sp, #0
 8015438:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801543e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8015440:	6878      	ldr	r0, [r7, #4]
 8015442:	f7f7 fc99 	bl	800cd78 <HAL_DMA_GetError>
 8015446:	4603      	mov	r3, r0
 8015448:	2b02      	cmp	r3, #2
 801544a:	d011      	beq.n	8015470 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 801544c:	68f8      	ldr	r0, [r7, #12]
 801544e:	f000 f941 	bl	80156d4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015458:	f043 0210 	orr.w	r2, r3, #16
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	2201      	movs	r2, #1
 8015466:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801546a:	68f8      	ldr	r0, [r7, #12]
 801546c:	f7ff ff9c 	bl	80153a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8015470:	bf00      	nop
 8015472:	3710      	adds	r7, #16
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}

08015478 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b084      	sub	sp, #16
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015484:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	2200      	movs	r2, #0
 801548a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	2200      	movs	r2, #0
 8015492:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	2201      	movs	r2, #1
 801549a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801549e:	68f8      	ldr	r0, [r7, #12]
 80154a0:	f7ff ff82 	bl	80153a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80154a4:	bf00      	nop
 80154a6:	3710      	adds	r7, #16
 80154a8:	46bd      	mov	sp, r7
 80154aa:	bd80      	pop	{r7, pc}

080154ac <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80154ac:	b480      	push	{r7}
 80154ae:	b083      	sub	sp, #12
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154c0:	7812      	ldrb	r2, [r2, #0]
 80154c2:	b2d2      	uxtb	r2, r2
 80154c4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154ca:	1c5a      	adds	r2, r3, #1
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154d6:	b29b      	uxth	r3, r3
 80154d8:	3b01      	subs	r3, #1
 80154da:	b29a      	uxth	r2, r3
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154e8:	b29b      	uxth	r3, r3
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d107      	bne.n	80154fe <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	691a      	ldr	r2, [r3, #16]
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	f022 0201 	bic.w	r2, r2, #1
 80154fc:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80154fe:	bf00      	nop
 8015500:	370c      	adds	r7, #12
 8015502:	46bd      	mov	sp, r7
 8015504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015508:	4770      	bx	lr

0801550a <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 801550a:	b480      	push	{r7}
 801550c:	b085      	sub	sp, #20
 801550e:	af00      	add	r7, sp, #0
 8015510:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	3330      	adds	r3, #48	@ 0x30
 8015518:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801551e:	68fa      	ldr	r2, [r7, #12]
 8015520:	8812      	ldrh	r2, [r2, #0]
 8015522:	b292      	uxth	r2, r2
 8015524:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801552a:	1c9a      	adds	r2, r3, #2
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015536:	b29b      	uxth	r3, r3
 8015538:	3b01      	subs	r3, #1
 801553a:	b29a      	uxth	r2, r3
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015548:	b29b      	uxth	r3, r3
 801554a:	2b00      	cmp	r3, #0
 801554c:	d107      	bne.n	801555e <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	691a      	ldr	r2, [r3, #16]
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	f022 0201 	bic.w	r2, r2, #1
 801555c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 801555e:	bf00      	nop
 8015560:	3714      	adds	r7, #20
 8015562:	46bd      	mov	sp, r7
 8015564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015568:	4770      	bx	lr

0801556a <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 801556a:	b480      	push	{r7}
 801556c:	b083      	sub	sp, #12
 801556e:	af00      	add	r7, sp, #0
 8015570:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	681a      	ldr	r2, [r3, #0]
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801557a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801557c:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015582:	1d1a      	adds	r2, r3, #4
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801558e:	b29b      	uxth	r3, r3
 8015590:	3b01      	subs	r3, #1
 8015592:	b29a      	uxth	r2, r3
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155a0:	b29b      	uxth	r3, r3
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d107      	bne.n	80155b6 <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	691a      	ldr	r2, [r3, #16]
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	f022 0201 	bic.w	r2, r2, #1
 80155b4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80155b6:	bf00      	nop
 80155b8:	370c      	adds	r7, #12
 80155ba:	46bd      	mov	sp, r7
 80155bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c0:	4770      	bx	lr

080155c2 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80155c2:	b480      	push	{r7}
 80155c4:	b083      	sub	sp, #12
 80155c6:	af00      	add	r7, sp, #0
 80155c8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	3320      	adds	r3, #32
 80155d4:	7812      	ldrb	r2, [r2, #0]
 80155d6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80155dc:	1c5a      	adds	r2, r3, #1
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80155e8:	b29b      	uxth	r3, r3
 80155ea:	3b01      	subs	r3, #1
 80155ec:	b29a      	uxth	r2, r3
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80155fa:	b29b      	uxth	r3, r3
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d107      	bne.n	8015610 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	691a      	ldr	r2, [r3, #16]
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	f022 0202 	bic.w	r2, r2, #2
 801560e:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8015610:	bf00      	nop
 8015612:	370c      	adds	r7, #12
 8015614:	46bd      	mov	sp, r7
 8015616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561a:	4770      	bx	lr

0801561c <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 801561c:	b480      	push	{r7}
 801561e:	b085      	sub	sp, #20
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	3320      	adds	r3, #32
 801562a:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015630:	881a      	ldrh	r2, [r3, #0]
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801563a:	1c9a      	adds	r2, r3, #2
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015646:	b29b      	uxth	r3, r3
 8015648:	3b01      	subs	r3, #1
 801564a:	b29a      	uxth	r2, r3
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015658:	b29b      	uxth	r3, r3
 801565a:	2b00      	cmp	r3, #0
 801565c:	d107      	bne.n	801566e <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	691a      	ldr	r2, [r3, #16]
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	f022 0202 	bic.w	r2, r2, #2
 801566c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 801566e:	bf00      	nop
 8015670:	3714      	adds	r7, #20
 8015672:	46bd      	mov	sp, r7
 8015674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015678:	4770      	bx	lr

0801567a <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 801567a:	b480      	push	{r7}
 801567c:	b083      	sub	sp, #12
 801567e:	af00      	add	r7, sp, #0
 8015680:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	6812      	ldr	r2, [r2, #0]
 801568c:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015692:	1d1a      	adds	r2, r3, #4
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801569e:	b29b      	uxth	r3, r3
 80156a0:	3b01      	subs	r3, #1
 80156a2:	b29a      	uxth	r2, r3
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80156b0:	b29b      	uxth	r3, r3
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d107      	bne.n	80156c6 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	691a      	ldr	r2, [r3, #16]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	f022 0202 	bic.w	r2, r2, #2
 80156c4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80156c6:	bf00      	nop
 80156c8:	370c      	adds	r7, #12
 80156ca:	46bd      	mov	sp, r7
 80156cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d0:	4770      	bx	lr
	...

080156d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80156d4:	b480      	push	{r7}
 80156d6:	b085      	sub	sp, #20
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	695b      	ldr	r3, [r3, #20]
 80156e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	699a      	ldr	r2, [r3, #24]
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	f042 0208 	orr.w	r2, r2, #8
 80156f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	699a      	ldr	r2, [r3, #24]
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	f042 0210 	orr.w	r2, r2, #16
 8015702:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	681a      	ldr	r2, [r3, #0]
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	f022 0201 	bic.w	r2, r2, #1
 8015712:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	6919      	ldr	r1, [r3, #16]
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	681a      	ldr	r2, [r3, #0]
 801571e:	4b3c      	ldr	r3, [pc, #240]	@ (8015810 <SPI_CloseTransfer+0x13c>)
 8015720:	400b      	ands	r3, r1
 8015722:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	689a      	ldr	r2, [r3, #8]
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015732:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801573a:	b2db      	uxtb	r3, r3
 801573c:	2b04      	cmp	r3, #4
 801573e:	d014      	beq.n	801576a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	f003 0320 	and.w	r3, r3, #32
 8015746:	2b00      	cmp	r3, #0
 8015748:	d00f      	beq.n	801576a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015750:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	699a      	ldr	r2, [r3, #24]
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	f042 0220 	orr.w	r2, r2, #32
 8015768:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015770:	b2db      	uxtb	r3, r3
 8015772:	2b03      	cmp	r3, #3
 8015774:	d014      	beq.n	80157a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801577c:	2b00      	cmp	r3, #0
 801577e:	d00f      	beq.n	80157a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015786:	f043 0204 	orr.w	r2, r3, #4
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	699a      	ldr	r2, [r3, #24]
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801579e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d00f      	beq.n	80157ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80157b0:	f043 0201 	orr.w	r2, r3, #1
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	699a      	ldr	r2, [r3, #24]
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80157c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d00f      	beq.n	80157f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80157da:	f043 0208 	orr.w	r2, r3, #8
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	699a      	ldr	r2, [r3, #24]
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80157f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2200      	movs	r2, #0
 80157f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2200      	movs	r2, #0
 8015800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8015804:	bf00      	nop
 8015806:	3714      	adds	r7, #20
 8015808:	46bd      	mov	sp, r7
 801580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580e:	4770      	bx	lr
 8015810:	fffffc90 	.word	0xfffffc90

08015814 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b084      	sub	sp, #16
 8015818:	af00      	add	r7, sp, #0
 801581a:	60f8      	str	r0, [r7, #12]
 801581c:	60b9      	str	r1, [r7, #8]
 801581e:	603b      	str	r3, [r7, #0]
 8015820:	4613      	mov	r3, r2
 8015822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015824:	e010      	b.n	8015848 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015826:	f7f2 ff13 	bl	8008650 <HAL_GetTick>
 801582a:	4602      	mov	r2, r0
 801582c:	69bb      	ldr	r3, [r7, #24]
 801582e:	1ad3      	subs	r3, r2, r3
 8015830:	683a      	ldr	r2, [r7, #0]
 8015832:	429a      	cmp	r2, r3
 8015834:	d803      	bhi.n	801583e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	f1b3 3fff 	cmp.w	r3, #4294967295
 801583c:	d102      	bne.n	8015844 <SPI_WaitOnFlagUntilTimeout+0x30>
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d101      	bne.n	8015848 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8015844:	2303      	movs	r3, #3
 8015846:	e00f      	b.n	8015868 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	695a      	ldr	r2, [r3, #20]
 801584e:	68bb      	ldr	r3, [r7, #8]
 8015850:	4013      	ands	r3, r2
 8015852:	68ba      	ldr	r2, [r7, #8]
 8015854:	429a      	cmp	r2, r3
 8015856:	bf0c      	ite	eq
 8015858:	2301      	moveq	r3, #1
 801585a:	2300      	movne	r3, #0
 801585c:	b2db      	uxtb	r3, r3
 801585e:	461a      	mov	r2, r3
 8015860:	79fb      	ldrb	r3, [r7, #7]
 8015862:	429a      	cmp	r2, r3
 8015864:	d0df      	beq.n	8015826 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8015866:	2300      	movs	r3, #0
}
 8015868:	4618      	mov	r0, r3
 801586a:	3710      	adds	r7, #16
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}

08015870 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8015870:	b480      	push	{r7}
 8015872:	b085      	sub	sp, #20
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801587c:	095b      	lsrs	r3, r3, #5
 801587e:	3301      	adds	r3, #1
 8015880:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	68db      	ldr	r3, [r3, #12]
 8015886:	3301      	adds	r3, #1
 8015888:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801588a:	68bb      	ldr	r3, [r7, #8]
 801588c:	3307      	adds	r3, #7
 801588e:	08db      	lsrs	r3, r3, #3
 8015890:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8015892:	68bb      	ldr	r3, [r7, #8]
 8015894:	68fa      	ldr	r2, [r7, #12]
 8015896:	fb02 f303 	mul.w	r3, r2, r3
}
 801589a:	4618      	mov	r0, r3
 801589c:	3714      	adds	r7, #20
 801589e:	46bd      	mov	sp, r7
 80158a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a4:	4770      	bx	lr

080158a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80158a6:	b580      	push	{r7, lr}
 80158a8:	b082      	sub	sp, #8
 80158aa:	af00      	add	r7, sp, #0
 80158ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d101      	bne.n	80158b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80158b4:	2301      	movs	r3, #1
 80158b6:	e049      	b.n	801594c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80158be:	b2db      	uxtb	r3, r3
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d106      	bne.n	80158d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2200      	movs	r2, #0
 80158c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f7f2 fcc9 	bl	8008264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	2202      	movs	r2, #2
 80158d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	681a      	ldr	r2, [r3, #0]
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	3304      	adds	r3, #4
 80158e2:	4619      	mov	r1, r3
 80158e4:	4610      	mov	r0, r2
 80158e6:	f000 fedb 	bl	80166a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	2201      	movs	r2, #1
 80158ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	2201      	movs	r2, #1
 80158f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2201      	movs	r2, #1
 80158fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	2201      	movs	r2, #1
 8015906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	2201      	movs	r2, #1
 801590e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2201      	movs	r2, #1
 8015916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	2201      	movs	r2, #1
 801591e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	2201      	movs	r2, #1
 8015926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	2201      	movs	r2, #1
 801592e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	2201      	movs	r2, #1
 8015936:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	2201      	movs	r2, #1
 801593e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	2201      	movs	r2, #1
 8015946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801594a:	2300      	movs	r3, #0
}
 801594c:	4618      	mov	r0, r3
 801594e:	3708      	adds	r7, #8
 8015950:	46bd      	mov	sp, r7
 8015952:	bd80      	pop	{r7, pc}

08015954 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015954:	b480      	push	{r7}
 8015956:	b085      	sub	sp, #20
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015962:	b2db      	uxtb	r3, r3
 8015964:	2b01      	cmp	r3, #1
 8015966:	d001      	beq.n	801596c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015968:	2301      	movs	r3, #1
 801596a:	e056      	b.n	8015a1a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	2202      	movs	r2, #2
 8015970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	4a2b      	ldr	r2, [pc, #172]	@ (8015a28 <HAL_TIM_Base_Start+0xd4>)
 801597a:	4293      	cmp	r3, r2
 801597c:	d02c      	beq.n	80159d8 <HAL_TIM_Base_Start+0x84>
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015986:	d027      	beq.n	80159d8 <HAL_TIM_Base_Start+0x84>
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	4a27      	ldr	r2, [pc, #156]	@ (8015a2c <HAL_TIM_Base_Start+0xd8>)
 801598e:	4293      	cmp	r3, r2
 8015990:	d022      	beq.n	80159d8 <HAL_TIM_Base_Start+0x84>
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	4a26      	ldr	r2, [pc, #152]	@ (8015a30 <HAL_TIM_Base_Start+0xdc>)
 8015998:	4293      	cmp	r3, r2
 801599a:	d01d      	beq.n	80159d8 <HAL_TIM_Base_Start+0x84>
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	4a24      	ldr	r2, [pc, #144]	@ (8015a34 <HAL_TIM_Base_Start+0xe0>)
 80159a2:	4293      	cmp	r3, r2
 80159a4:	d018      	beq.n	80159d8 <HAL_TIM_Base_Start+0x84>
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	4a23      	ldr	r2, [pc, #140]	@ (8015a38 <HAL_TIM_Base_Start+0xe4>)
 80159ac:	4293      	cmp	r3, r2
 80159ae:	d013      	beq.n	80159d8 <HAL_TIM_Base_Start+0x84>
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	4a21      	ldr	r2, [pc, #132]	@ (8015a3c <HAL_TIM_Base_Start+0xe8>)
 80159b6:	4293      	cmp	r3, r2
 80159b8:	d00e      	beq.n	80159d8 <HAL_TIM_Base_Start+0x84>
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	4a20      	ldr	r2, [pc, #128]	@ (8015a40 <HAL_TIM_Base_Start+0xec>)
 80159c0:	4293      	cmp	r3, r2
 80159c2:	d009      	beq.n	80159d8 <HAL_TIM_Base_Start+0x84>
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	4a1e      	ldr	r2, [pc, #120]	@ (8015a44 <HAL_TIM_Base_Start+0xf0>)
 80159ca:	4293      	cmp	r3, r2
 80159cc:	d004      	beq.n	80159d8 <HAL_TIM_Base_Start+0x84>
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	4a1d      	ldr	r2, [pc, #116]	@ (8015a48 <HAL_TIM_Base_Start+0xf4>)
 80159d4:	4293      	cmp	r3, r2
 80159d6:	d115      	bne.n	8015a04 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	689a      	ldr	r2, [r3, #8]
 80159de:	4b1b      	ldr	r3, [pc, #108]	@ (8015a4c <HAL_TIM_Base_Start+0xf8>)
 80159e0:	4013      	ands	r3, r2
 80159e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	2b06      	cmp	r3, #6
 80159e8:	d015      	beq.n	8015a16 <HAL_TIM_Base_Start+0xc2>
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80159f0:	d011      	beq.n	8015a16 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	681a      	ldr	r2, [r3, #0]
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	f042 0201 	orr.w	r2, r2, #1
 8015a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015a02:	e008      	b.n	8015a16 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	681a      	ldr	r2, [r3, #0]
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	f042 0201 	orr.w	r2, r2, #1
 8015a12:	601a      	str	r2, [r3, #0]
 8015a14:	e000      	b.n	8015a18 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015a16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015a18:	2300      	movs	r3, #0
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	3714      	adds	r7, #20
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a24:	4770      	bx	lr
 8015a26:	bf00      	nop
 8015a28:	40010000 	.word	0x40010000
 8015a2c:	40000400 	.word	0x40000400
 8015a30:	40000800 	.word	0x40000800
 8015a34:	40000c00 	.word	0x40000c00
 8015a38:	40010400 	.word	0x40010400
 8015a3c:	40001800 	.word	0x40001800
 8015a40:	40014000 	.word	0x40014000
 8015a44:	4000e000 	.word	0x4000e000
 8015a48:	4000e400 	.word	0x4000e400
 8015a4c:	00010007 	.word	0x00010007

08015a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015a50:	b480      	push	{r7}
 8015a52:	b085      	sub	sp, #20
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	2b01      	cmp	r3, #1
 8015a62:	d001      	beq.n	8015a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015a64:	2301      	movs	r3, #1
 8015a66:	e05e      	b.n	8015b26 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	2202      	movs	r2, #2
 8015a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	68da      	ldr	r2, [r3, #12]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	f042 0201 	orr.w	r2, r2, #1
 8015a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	4a2b      	ldr	r2, [pc, #172]	@ (8015b34 <HAL_TIM_Base_Start_IT+0xe4>)
 8015a86:	4293      	cmp	r3, r2
 8015a88:	d02c      	beq.n	8015ae4 <HAL_TIM_Base_Start_IT+0x94>
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015a92:	d027      	beq.n	8015ae4 <HAL_TIM_Base_Start_IT+0x94>
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	4a27      	ldr	r2, [pc, #156]	@ (8015b38 <HAL_TIM_Base_Start_IT+0xe8>)
 8015a9a:	4293      	cmp	r3, r2
 8015a9c:	d022      	beq.n	8015ae4 <HAL_TIM_Base_Start_IT+0x94>
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	4a26      	ldr	r2, [pc, #152]	@ (8015b3c <HAL_TIM_Base_Start_IT+0xec>)
 8015aa4:	4293      	cmp	r3, r2
 8015aa6:	d01d      	beq.n	8015ae4 <HAL_TIM_Base_Start_IT+0x94>
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	4a24      	ldr	r2, [pc, #144]	@ (8015b40 <HAL_TIM_Base_Start_IT+0xf0>)
 8015aae:	4293      	cmp	r3, r2
 8015ab0:	d018      	beq.n	8015ae4 <HAL_TIM_Base_Start_IT+0x94>
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	4a23      	ldr	r2, [pc, #140]	@ (8015b44 <HAL_TIM_Base_Start_IT+0xf4>)
 8015ab8:	4293      	cmp	r3, r2
 8015aba:	d013      	beq.n	8015ae4 <HAL_TIM_Base_Start_IT+0x94>
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	4a21      	ldr	r2, [pc, #132]	@ (8015b48 <HAL_TIM_Base_Start_IT+0xf8>)
 8015ac2:	4293      	cmp	r3, r2
 8015ac4:	d00e      	beq.n	8015ae4 <HAL_TIM_Base_Start_IT+0x94>
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	4a20      	ldr	r2, [pc, #128]	@ (8015b4c <HAL_TIM_Base_Start_IT+0xfc>)
 8015acc:	4293      	cmp	r3, r2
 8015ace:	d009      	beq.n	8015ae4 <HAL_TIM_Base_Start_IT+0x94>
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8015b50 <HAL_TIM_Base_Start_IT+0x100>)
 8015ad6:	4293      	cmp	r3, r2
 8015ad8:	d004      	beq.n	8015ae4 <HAL_TIM_Base_Start_IT+0x94>
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	4a1d      	ldr	r2, [pc, #116]	@ (8015b54 <HAL_TIM_Base_Start_IT+0x104>)
 8015ae0:	4293      	cmp	r3, r2
 8015ae2:	d115      	bne.n	8015b10 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	689a      	ldr	r2, [r3, #8]
 8015aea:	4b1b      	ldr	r3, [pc, #108]	@ (8015b58 <HAL_TIM_Base_Start_IT+0x108>)
 8015aec:	4013      	ands	r3, r2
 8015aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	2b06      	cmp	r3, #6
 8015af4:	d015      	beq.n	8015b22 <HAL_TIM_Base_Start_IT+0xd2>
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015afc:	d011      	beq.n	8015b22 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	681a      	ldr	r2, [r3, #0]
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	f042 0201 	orr.w	r2, r2, #1
 8015b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015b0e:	e008      	b.n	8015b22 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	681a      	ldr	r2, [r3, #0]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	f042 0201 	orr.w	r2, r2, #1
 8015b1e:	601a      	str	r2, [r3, #0]
 8015b20:	e000      	b.n	8015b24 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015b22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015b24:	2300      	movs	r3, #0
}
 8015b26:	4618      	mov	r0, r3
 8015b28:	3714      	adds	r7, #20
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b30:	4770      	bx	lr
 8015b32:	bf00      	nop
 8015b34:	40010000 	.word	0x40010000
 8015b38:	40000400 	.word	0x40000400
 8015b3c:	40000800 	.word	0x40000800
 8015b40:	40000c00 	.word	0x40000c00
 8015b44:	40010400 	.word	0x40010400
 8015b48:	40001800 	.word	0x40001800
 8015b4c:	40014000 	.word	0x40014000
 8015b50:	4000e000 	.word	0x4000e000
 8015b54:	4000e400 	.word	0x4000e400
 8015b58:	00010007 	.word	0x00010007

08015b5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b082      	sub	sp, #8
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d101      	bne.n	8015b6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	e049      	b.n	8015c02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015b74:	b2db      	uxtb	r3, r3
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d106      	bne.n	8015b88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015b82:	6878      	ldr	r0, [r7, #4]
 8015b84:	f7f2 fae4 	bl	8008150 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	2202      	movs	r2, #2
 8015b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	681a      	ldr	r2, [r3, #0]
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	3304      	adds	r3, #4
 8015b98:	4619      	mov	r1, r3
 8015b9a:	4610      	mov	r0, r2
 8015b9c:	f000 fd80 	bl	80166a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2201      	movs	r2, #1
 8015ba4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	2201      	movs	r2, #1
 8015bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2201      	movs	r2, #1
 8015bb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2201      	movs	r2, #1
 8015bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	2201      	movs	r2, #1
 8015bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	2201      	movs	r2, #1
 8015bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2201      	movs	r2, #1
 8015bd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	2201      	movs	r2, #1
 8015bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2201      	movs	r2, #1
 8015be4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2201      	movs	r2, #1
 8015bec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	2201      	movs	r2, #1
 8015bf4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2201      	movs	r2, #1
 8015bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015c00:	2300      	movs	r3, #0
}
 8015c02:	4618      	mov	r0, r3
 8015c04:	3708      	adds	r7, #8
 8015c06:	46bd      	mov	sp, r7
 8015c08:	bd80      	pop	{r7, pc}
	...

08015c0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b084      	sub	sp, #16
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
 8015c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015c16:	683b      	ldr	r3, [r7, #0]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d109      	bne.n	8015c30 <HAL_TIM_PWM_Start+0x24>
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8015c22:	b2db      	uxtb	r3, r3
 8015c24:	2b01      	cmp	r3, #1
 8015c26:	bf14      	ite	ne
 8015c28:	2301      	movne	r3, #1
 8015c2a:	2300      	moveq	r3, #0
 8015c2c:	b2db      	uxtb	r3, r3
 8015c2e:	e03c      	b.n	8015caa <HAL_TIM_PWM_Start+0x9e>
 8015c30:	683b      	ldr	r3, [r7, #0]
 8015c32:	2b04      	cmp	r3, #4
 8015c34:	d109      	bne.n	8015c4a <HAL_TIM_PWM_Start+0x3e>
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8015c3c:	b2db      	uxtb	r3, r3
 8015c3e:	2b01      	cmp	r3, #1
 8015c40:	bf14      	ite	ne
 8015c42:	2301      	movne	r3, #1
 8015c44:	2300      	moveq	r3, #0
 8015c46:	b2db      	uxtb	r3, r3
 8015c48:	e02f      	b.n	8015caa <HAL_TIM_PWM_Start+0x9e>
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	2b08      	cmp	r3, #8
 8015c4e:	d109      	bne.n	8015c64 <HAL_TIM_PWM_Start+0x58>
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8015c56:	b2db      	uxtb	r3, r3
 8015c58:	2b01      	cmp	r3, #1
 8015c5a:	bf14      	ite	ne
 8015c5c:	2301      	movne	r3, #1
 8015c5e:	2300      	moveq	r3, #0
 8015c60:	b2db      	uxtb	r3, r3
 8015c62:	e022      	b.n	8015caa <HAL_TIM_PWM_Start+0x9e>
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	2b0c      	cmp	r3, #12
 8015c68:	d109      	bne.n	8015c7e <HAL_TIM_PWM_Start+0x72>
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015c70:	b2db      	uxtb	r3, r3
 8015c72:	2b01      	cmp	r3, #1
 8015c74:	bf14      	ite	ne
 8015c76:	2301      	movne	r3, #1
 8015c78:	2300      	moveq	r3, #0
 8015c7a:	b2db      	uxtb	r3, r3
 8015c7c:	e015      	b.n	8015caa <HAL_TIM_PWM_Start+0x9e>
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	2b10      	cmp	r3, #16
 8015c82:	d109      	bne.n	8015c98 <HAL_TIM_PWM_Start+0x8c>
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015c8a:	b2db      	uxtb	r3, r3
 8015c8c:	2b01      	cmp	r3, #1
 8015c8e:	bf14      	ite	ne
 8015c90:	2301      	movne	r3, #1
 8015c92:	2300      	moveq	r3, #0
 8015c94:	b2db      	uxtb	r3, r3
 8015c96:	e008      	b.n	8015caa <HAL_TIM_PWM_Start+0x9e>
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015c9e:	b2db      	uxtb	r3, r3
 8015ca0:	2b01      	cmp	r3, #1
 8015ca2:	bf14      	ite	ne
 8015ca4:	2301      	movne	r3, #1
 8015ca6:	2300      	moveq	r3, #0
 8015ca8:	b2db      	uxtb	r3, r3
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d001      	beq.n	8015cb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8015cae:	2301      	movs	r3, #1
 8015cb0:	e0ab      	b.n	8015e0a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015cb2:	683b      	ldr	r3, [r7, #0]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d104      	bne.n	8015cc2 <HAL_TIM_PWM_Start+0xb6>
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	2202      	movs	r2, #2
 8015cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015cc0:	e023      	b.n	8015d0a <HAL_TIM_PWM_Start+0xfe>
 8015cc2:	683b      	ldr	r3, [r7, #0]
 8015cc4:	2b04      	cmp	r3, #4
 8015cc6:	d104      	bne.n	8015cd2 <HAL_TIM_PWM_Start+0xc6>
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2202      	movs	r2, #2
 8015ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015cd0:	e01b      	b.n	8015d0a <HAL_TIM_PWM_Start+0xfe>
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	2b08      	cmp	r3, #8
 8015cd6:	d104      	bne.n	8015ce2 <HAL_TIM_PWM_Start+0xd6>
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2202      	movs	r2, #2
 8015cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015ce0:	e013      	b.n	8015d0a <HAL_TIM_PWM_Start+0xfe>
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	2b0c      	cmp	r3, #12
 8015ce6:	d104      	bne.n	8015cf2 <HAL_TIM_PWM_Start+0xe6>
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2202      	movs	r2, #2
 8015cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015cf0:	e00b      	b.n	8015d0a <HAL_TIM_PWM_Start+0xfe>
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	2b10      	cmp	r3, #16
 8015cf6:	d104      	bne.n	8015d02 <HAL_TIM_PWM_Start+0xf6>
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2202      	movs	r2, #2
 8015cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015d00:	e003      	b.n	8015d0a <HAL_TIM_PWM_Start+0xfe>
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	2202      	movs	r2, #2
 8015d06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	2201      	movs	r2, #1
 8015d10:	6839      	ldr	r1, [r7, #0]
 8015d12:	4618      	mov	r0, r3
 8015d14:	f001 fa1a 	bl	801714c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	4a3d      	ldr	r2, [pc, #244]	@ (8015e14 <HAL_TIM_PWM_Start+0x208>)
 8015d1e:	4293      	cmp	r3, r2
 8015d20:	d013      	beq.n	8015d4a <HAL_TIM_PWM_Start+0x13e>
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	4a3c      	ldr	r2, [pc, #240]	@ (8015e18 <HAL_TIM_PWM_Start+0x20c>)
 8015d28:	4293      	cmp	r3, r2
 8015d2a:	d00e      	beq.n	8015d4a <HAL_TIM_PWM_Start+0x13e>
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	4a3a      	ldr	r2, [pc, #232]	@ (8015e1c <HAL_TIM_PWM_Start+0x210>)
 8015d32:	4293      	cmp	r3, r2
 8015d34:	d009      	beq.n	8015d4a <HAL_TIM_PWM_Start+0x13e>
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	4a39      	ldr	r2, [pc, #228]	@ (8015e20 <HAL_TIM_PWM_Start+0x214>)
 8015d3c:	4293      	cmp	r3, r2
 8015d3e:	d004      	beq.n	8015d4a <HAL_TIM_PWM_Start+0x13e>
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	4a37      	ldr	r2, [pc, #220]	@ (8015e24 <HAL_TIM_PWM_Start+0x218>)
 8015d46:	4293      	cmp	r3, r2
 8015d48:	d101      	bne.n	8015d4e <HAL_TIM_PWM_Start+0x142>
 8015d4a:	2301      	movs	r3, #1
 8015d4c:	e000      	b.n	8015d50 <HAL_TIM_PWM_Start+0x144>
 8015d4e:	2300      	movs	r3, #0
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d007      	beq.n	8015d64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015d62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	4a2a      	ldr	r2, [pc, #168]	@ (8015e14 <HAL_TIM_PWM_Start+0x208>)
 8015d6a:	4293      	cmp	r3, r2
 8015d6c:	d02c      	beq.n	8015dc8 <HAL_TIM_PWM_Start+0x1bc>
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015d76:	d027      	beq.n	8015dc8 <HAL_TIM_PWM_Start+0x1bc>
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8015e28 <HAL_TIM_PWM_Start+0x21c>)
 8015d7e:	4293      	cmp	r3, r2
 8015d80:	d022      	beq.n	8015dc8 <HAL_TIM_PWM_Start+0x1bc>
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	4a29      	ldr	r2, [pc, #164]	@ (8015e2c <HAL_TIM_PWM_Start+0x220>)
 8015d88:	4293      	cmp	r3, r2
 8015d8a:	d01d      	beq.n	8015dc8 <HAL_TIM_PWM_Start+0x1bc>
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	4a27      	ldr	r2, [pc, #156]	@ (8015e30 <HAL_TIM_PWM_Start+0x224>)
 8015d92:	4293      	cmp	r3, r2
 8015d94:	d018      	beq.n	8015dc8 <HAL_TIM_PWM_Start+0x1bc>
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8015e18 <HAL_TIM_PWM_Start+0x20c>)
 8015d9c:	4293      	cmp	r3, r2
 8015d9e:	d013      	beq.n	8015dc8 <HAL_TIM_PWM_Start+0x1bc>
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	4a23      	ldr	r2, [pc, #140]	@ (8015e34 <HAL_TIM_PWM_Start+0x228>)
 8015da6:	4293      	cmp	r3, r2
 8015da8:	d00e      	beq.n	8015dc8 <HAL_TIM_PWM_Start+0x1bc>
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	4a1b      	ldr	r2, [pc, #108]	@ (8015e1c <HAL_TIM_PWM_Start+0x210>)
 8015db0:	4293      	cmp	r3, r2
 8015db2:	d009      	beq.n	8015dc8 <HAL_TIM_PWM_Start+0x1bc>
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	4a1f      	ldr	r2, [pc, #124]	@ (8015e38 <HAL_TIM_PWM_Start+0x22c>)
 8015dba:	4293      	cmp	r3, r2
 8015dbc:	d004      	beq.n	8015dc8 <HAL_TIM_PWM_Start+0x1bc>
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8015e3c <HAL_TIM_PWM_Start+0x230>)
 8015dc4:	4293      	cmp	r3, r2
 8015dc6:	d115      	bne.n	8015df4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	689a      	ldr	r2, [r3, #8]
 8015dce:	4b1c      	ldr	r3, [pc, #112]	@ (8015e40 <HAL_TIM_PWM_Start+0x234>)
 8015dd0:	4013      	ands	r3, r2
 8015dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	2b06      	cmp	r3, #6
 8015dd8:	d015      	beq.n	8015e06 <HAL_TIM_PWM_Start+0x1fa>
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015de0:	d011      	beq.n	8015e06 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	681a      	ldr	r2, [r3, #0]
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	f042 0201 	orr.w	r2, r2, #1
 8015df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015df2:	e008      	b.n	8015e06 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	681a      	ldr	r2, [r3, #0]
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	f042 0201 	orr.w	r2, r2, #1
 8015e02:	601a      	str	r2, [r3, #0]
 8015e04:	e000      	b.n	8015e08 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015e08:	2300      	movs	r3, #0
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3710      	adds	r7, #16
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}
 8015e12:	bf00      	nop
 8015e14:	40010000 	.word	0x40010000
 8015e18:	40010400 	.word	0x40010400
 8015e1c:	40014000 	.word	0x40014000
 8015e20:	40014400 	.word	0x40014400
 8015e24:	40014800 	.word	0x40014800
 8015e28:	40000400 	.word	0x40000400
 8015e2c:	40000800 	.word	0x40000800
 8015e30:	40000c00 	.word	0x40000c00
 8015e34:	40001800 	.word	0x40001800
 8015e38:	4000e000 	.word	0x4000e000
 8015e3c:	4000e400 	.word	0x4000e400
 8015e40:	00010007 	.word	0x00010007

08015e44 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b082      	sub	sp, #8
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d101      	bne.n	8015e56 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8015e52:	2301      	movs	r3, #1
 8015e54:	e049      	b.n	8015eea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015e5c:	b2db      	uxtb	r3, r3
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d106      	bne.n	8015e70 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	2200      	movs	r2, #0
 8015e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8015e6a:	6878      	ldr	r0, [r7, #4]
 8015e6c:	f7f2 f9aa 	bl	80081c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2202      	movs	r2, #2
 8015e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681a      	ldr	r2, [r3, #0]
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	3304      	adds	r3, #4
 8015e80:	4619      	mov	r1, r3
 8015e82:	4610      	mov	r0, r2
 8015e84:	f000 fc0c 	bl	80166a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2201      	movs	r2, #1
 8015e8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2201      	movs	r2, #1
 8015e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2201      	movs	r2, #1
 8015e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	2201      	movs	r2, #1
 8015ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	2201      	movs	r2, #1
 8015eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2201      	movs	r2, #1
 8015eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2201      	movs	r2, #1
 8015ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2201      	movs	r2, #1
 8015ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	2201      	movs	r2, #1
 8015ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	2201      	movs	r2, #1
 8015ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	2201      	movs	r2, #1
 8015edc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2201      	movs	r2, #1
 8015ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015ee8:	2300      	movs	r3, #0
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	3708      	adds	r7, #8
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}

08015ef2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015ef2:	b580      	push	{r7, lr}
 8015ef4:	b084      	sub	sp, #16
 8015ef6:	af00      	add	r7, sp, #0
 8015ef8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	68db      	ldr	r3, [r3, #12]
 8015f00:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	691b      	ldr	r3, [r3, #16]
 8015f08:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8015f0a:	68bb      	ldr	r3, [r7, #8]
 8015f0c:	f003 0302 	and.w	r3, r3, #2
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d020      	beq.n	8015f56 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	f003 0302 	and.w	r3, r3, #2
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d01b      	beq.n	8015f56 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	f06f 0202 	mvn.w	r2, #2
 8015f26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	2201      	movs	r2, #1
 8015f2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	699b      	ldr	r3, [r3, #24]
 8015f34:	f003 0303 	and.w	r3, r3, #3
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d003      	beq.n	8015f44 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015f3c:	6878      	ldr	r0, [r7, #4]
 8015f3e:	f000 fb91 	bl	8016664 <HAL_TIM_IC_CaptureCallback>
 8015f42:	e005      	b.n	8015f50 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f000 fb83 	bl	8016650 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f000 fb94 	bl	8016678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2200      	movs	r2, #0
 8015f54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8015f56:	68bb      	ldr	r3, [r7, #8]
 8015f58:	f003 0304 	and.w	r3, r3, #4
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d020      	beq.n	8015fa2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	f003 0304 	and.w	r3, r3, #4
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d01b      	beq.n	8015fa2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	f06f 0204 	mvn.w	r2, #4
 8015f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	2202      	movs	r2, #2
 8015f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	699b      	ldr	r3, [r3, #24]
 8015f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d003      	beq.n	8015f90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f000 fb6b 	bl	8016664 <HAL_TIM_IC_CaptureCallback>
 8015f8e:	e005      	b.n	8015f9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015f90:	6878      	ldr	r0, [r7, #4]
 8015f92:	f000 fb5d 	bl	8016650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015f96:	6878      	ldr	r0, [r7, #4]
 8015f98:	f000 fb6e 	bl	8016678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8015fa2:	68bb      	ldr	r3, [r7, #8]
 8015fa4:	f003 0308 	and.w	r3, r3, #8
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d020      	beq.n	8015fee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	f003 0308 	and.w	r3, r3, #8
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d01b      	beq.n	8015fee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	f06f 0208 	mvn.w	r2, #8
 8015fbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2204      	movs	r2, #4
 8015fc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	69db      	ldr	r3, [r3, #28]
 8015fcc:	f003 0303 	and.w	r3, r3, #3
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d003      	beq.n	8015fdc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015fd4:	6878      	ldr	r0, [r7, #4]
 8015fd6:	f000 fb45 	bl	8016664 <HAL_TIM_IC_CaptureCallback>
 8015fda:	e005      	b.n	8015fe8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f000 fb37 	bl	8016650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015fe2:	6878      	ldr	r0, [r7, #4]
 8015fe4:	f000 fb48 	bl	8016678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2200      	movs	r2, #0
 8015fec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8015fee:	68bb      	ldr	r3, [r7, #8]
 8015ff0:	f003 0310 	and.w	r3, r3, #16
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d020      	beq.n	801603a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	f003 0310 	and.w	r3, r3, #16
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d01b      	beq.n	801603a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	f06f 0210 	mvn.w	r2, #16
 801600a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	2208      	movs	r2, #8
 8016010:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	69db      	ldr	r3, [r3, #28]
 8016018:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801601c:	2b00      	cmp	r3, #0
 801601e:	d003      	beq.n	8016028 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f000 fb1f 	bl	8016664 <HAL_TIM_IC_CaptureCallback>
 8016026:	e005      	b.n	8016034 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	f000 fb11 	bl	8016650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801602e:	6878      	ldr	r0, [r7, #4]
 8016030:	f000 fb22 	bl	8016678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2200      	movs	r2, #0
 8016038:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801603a:	68bb      	ldr	r3, [r7, #8]
 801603c:	f003 0301 	and.w	r3, r3, #1
 8016040:	2b00      	cmp	r3, #0
 8016042:	d00c      	beq.n	801605e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	f003 0301 	and.w	r3, r3, #1
 801604a:	2b00      	cmp	r3, #0
 801604c:	d007      	beq.n	801605e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	f06f 0201 	mvn.w	r2, #1
 8016056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f7ef fc01 	bl	8005860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801605e:	68bb      	ldr	r3, [r7, #8]
 8016060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016064:	2b00      	cmp	r3, #0
 8016066:	d104      	bne.n	8016072 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801606e:	2b00      	cmp	r3, #0
 8016070:	d00c      	beq.n	801608c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016078:	2b00      	cmp	r3, #0
 801607a:	d007      	beq.n	801608c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8016084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f001 f9b8 	bl	80173fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801608c:	68bb      	ldr	r3, [r7, #8]
 801608e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016092:	2b00      	cmp	r3, #0
 8016094:	d00c      	beq.n	80160b0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801609c:	2b00      	cmp	r3, #0
 801609e:	d007      	beq.n	80160b0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80160a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80160aa:	6878      	ldr	r0, [r7, #4]
 80160ac:	f001 f9b0 	bl	8017410 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80160b0:	68bb      	ldr	r3, [r7, #8]
 80160b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d00c      	beq.n	80160d4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d007      	beq.n	80160d4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80160cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f000 fadc 	bl	801668c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	f003 0320 	and.w	r3, r3, #32
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d00c      	beq.n	80160f8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	f003 0320 	and.w	r3, r3, #32
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d007      	beq.n	80160f8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	f06f 0220 	mvn.w	r2, #32
 80160f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f001 f978 	bl	80173e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80160f8:	bf00      	nop
 80160fa:	3710      	adds	r7, #16
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd80      	pop	{r7, pc}

08016100 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b086      	sub	sp, #24
 8016104:	af00      	add	r7, sp, #0
 8016106:	60f8      	str	r0, [r7, #12]
 8016108:	60b9      	str	r1, [r7, #8]
 801610a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801610c:	2300      	movs	r3, #0
 801610e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016116:	2b01      	cmp	r3, #1
 8016118:	d101      	bne.n	801611e <HAL_TIM_IC_ConfigChannel+0x1e>
 801611a:	2302      	movs	r3, #2
 801611c:	e088      	b.n	8016230 <HAL_TIM_IC_ConfigChannel+0x130>
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	2201      	movs	r2, #1
 8016122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d11b      	bne.n	8016164 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016134:	68bb      	ldr	r3, [r7, #8]
 8016136:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016138:	68bb      	ldr	r3, [r7, #8]
 801613a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 801613c:	f000 fe32 	bl	8016da4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	699a      	ldr	r2, [r3, #24]
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	f022 020c 	bic.w	r2, r2, #12
 801614e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	6999      	ldr	r1, [r3, #24]
 8016156:	68bb      	ldr	r3, [r7, #8]
 8016158:	689a      	ldr	r2, [r3, #8]
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	430a      	orrs	r2, r1
 8016160:	619a      	str	r2, [r3, #24]
 8016162:	e060      	b.n	8016226 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2b04      	cmp	r3, #4
 8016168:	d11c      	bne.n	80161a4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016172:	68bb      	ldr	r3, [r7, #8]
 8016174:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016176:	68bb      	ldr	r3, [r7, #8]
 8016178:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801617a:	f000 fec2 	bl	8016f02 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	699a      	ldr	r2, [r3, #24]
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801618c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	6999      	ldr	r1, [r3, #24]
 8016194:	68bb      	ldr	r3, [r7, #8]
 8016196:	689b      	ldr	r3, [r3, #8]
 8016198:	021a      	lsls	r2, r3, #8
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	430a      	orrs	r2, r1
 80161a0:	619a      	str	r2, [r3, #24]
 80161a2:	e040      	b.n	8016226 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	2b08      	cmp	r3, #8
 80161a8:	d11b      	bne.n	80161e2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80161ae:	68bb      	ldr	r3, [r7, #8]
 80161b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80161ba:	f000 ff0f 	bl	8016fdc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	69da      	ldr	r2, [r3, #28]
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	f022 020c 	bic.w	r2, r2, #12
 80161cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	69d9      	ldr	r1, [r3, #28]
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	689a      	ldr	r2, [r3, #8]
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	430a      	orrs	r2, r1
 80161de:	61da      	str	r2, [r3, #28]
 80161e0:	e021      	b.n	8016226 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	2b0c      	cmp	r3, #12
 80161e6:	d11c      	bne.n	8016222 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80161ec:	68bb      	ldr	r3, [r7, #8]
 80161ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80161f0:	68bb      	ldr	r3, [r7, #8]
 80161f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80161f4:	68bb      	ldr	r3, [r7, #8]
 80161f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80161f8:	f000 ff2c 	bl	8017054 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	69da      	ldr	r2, [r3, #28]
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801620a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	69d9      	ldr	r1, [r3, #28]
 8016212:	68bb      	ldr	r3, [r7, #8]
 8016214:	689b      	ldr	r3, [r3, #8]
 8016216:	021a      	lsls	r2, r3, #8
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	430a      	orrs	r2, r1
 801621e:	61da      	str	r2, [r3, #28]
 8016220:	e001      	b.n	8016226 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8016222:	2301      	movs	r3, #1
 8016224:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	2200      	movs	r2, #0
 801622a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801622e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016230:	4618      	mov	r0, r3
 8016232:	3718      	adds	r7, #24
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}

08016238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b086      	sub	sp, #24
 801623c:	af00      	add	r7, sp, #0
 801623e:	60f8      	str	r0, [r7, #12]
 8016240:	60b9      	str	r1, [r7, #8]
 8016242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016244:	2300      	movs	r3, #0
 8016246:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801624e:	2b01      	cmp	r3, #1
 8016250:	d101      	bne.n	8016256 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8016252:	2302      	movs	r3, #2
 8016254:	e0ff      	b.n	8016456 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	2201      	movs	r2, #1
 801625a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	2b14      	cmp	r3, #20
 8016262:	f200 80f0 	bhi.w	8016446 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016266:	a201      	add	r2, pc, #4	@ (adr r2, 801626c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801626c:	080162c1 	.word	0x080162c1
 8016270:	08016447 	.word	0x08016447
 8016274:	08016447 	.word	0x08016447
 8016278:	08016447 	.word	0x08016447
 801627c:	08016301 	.word	0x08016301
 8016280:	08016447 	.word	0x08016447
 8016284:	08016447 	.word	0x08016447
 8016288:	08016447 	.word	0x08016447
 801628c:	08016343 	.word	0x08016343
 8016290:	08016447 	.word	0x08016447
 8016294:	08016447 	.word	0x08016447
 8016298:	08016447 	.word	0x08016447
 801629c:	08016383 	.word	0x08016383
 80162a0:	08016447 	.word	0x08016447
 80162a4:	08016447 	.word	0x08016447
 80162a8:	08016447 	.word	0x08016447
 80162ac:	080163c5 	.word	0x080163c5
 80162b0:	08016447 	.word	0x08016447
 80162b4:	08016447 	.word	0x08016447
 80162b8:	08016447 	.word	0x08016447
 80162bc:	08016405 	.word	0x08016405
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	68b9      	ldr	r1, [r7, #8]
 80162c6:	4618      	mov	r0, r3
 80162c8:	f000 fa96 	bl	80167f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	699a      	ldr	r2, [r3, #24]
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	f042 0208 	orr.w	r2, r2, #8
 80162da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	699a      	ldr	r2, [r3, #24]
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	f022 0204 	bic.w	r2, r2, #4
 80162ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	6999      	ldr	r1, [r3, #24]
 80162f2:	68bb      	ldr	r3, [r7, #8]
 80162f4:	691a      	ldr	r2, [r3, #16]
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	430a      	orrs	r2, r1
 80162fc:	619a      	str	r2, [r3, #24]
      break;
 80162fe:	e0a5      	b.n	801644c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	68b9      	ldr	r1, [r7, #8]
 8016306:	4618      	mov	r0, r3
 8016308:	f000 fb06 	bl	8016918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	699a      	ldr	r2, [r3, #24]
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801631a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	699a      	ldr	r2, [r3, #24]
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801632a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	6999      	ldr	r1, [r3, #24]
 8016332:	68bb      	ldr	r3, [r7, #8]
 8016334:	691b      	ldr	r3, [r3, #16]
 8016336:	021a      	lsls	r2, r3, #8
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	430a      	orrs	r2, r1
 801633e:	619a      	str	r2, [r3, #24]
      break;
 8016340:	e084      	b.n	801644c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	68b9      	ldr	r1, [r7, #8]
 8016348:	4618      	mov	r0, r3
 801634a:	f000 fb6f 	bl	8016a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	69da      	ldr	r2, [r3, #28]
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	f042 0208 	orr.w	r2, r2, #8
 801635c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	69da      	ldr	r2, [r3, #28]
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	f022 0204 	bic.w	r2, r2, #4
 801636c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	69d9      	ldr	r1, [r3, #28]
 8016374:	68bb      	ldr	r3, [r7, #8]
 8016376:	691a      	ldr	r2, [r3, #16]
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	430a      	orrs	r2, r1
 801637e:	61da      	str	r2, [r3, #28]
      break;
 8016380:	e064      	b.n	801644c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	68b9      	ldr	r1, [r7, #8]
 8016388:	4618      	mov	r0, r3
 801638a:	f000 fbd7 	bl	8016b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	69da      	ldr	r2, [r3, #28]
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801639c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	69da      	ldr	r2, [r3, #28]
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80163ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	69d9      	ldr	r1, [r3, #28]
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	691b      	ldr	r3, [r3, #16]
 80163b8:	021a      	lsls	r2, r3, #8
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	430a      	orrs	r2, r1
 80163c0:	61da      	str	r2, [r3, #28]
      break;
 80163c2:	e043      	b.n	801644c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	68b9      	ldr	r1, [r7, #8]
 80163ca:	4618      	mov	r0, r3
 80163cc:	f000 fc20 	bl	8016c10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	f042 0208 	orr.w	r2, r2, #8
 80163de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	f022 0204 	bic.w	r2, r2, #4
 80163ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80163f6:	68bb      	ldr	r3, [r7, #8]
 80163f8:	691a      	ldr	r2, [r3, #16]
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	430a      	orrs	r2, r1
 8016400:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016402:	e023      	b.n	801644c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	68b9      	ldr	r1, [r7, #8]
 801640a:	4618      	mov	r0, r3
 801640c:	f000 fc64 	bl	8016cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801641e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801642e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016436:	68bb      	ldr	r3, [r7, #8]
 8016438:	691b      	ldr	r3, [r3, #16]
 801643a:	021a      	lsls	r2, r3, #8
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	430a      	orrs	r2, r1
 8016442:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016444:	e002      	b.n	801644c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016446:	2301      	movs	r3, #1
 8016448:	75fb      	strb	r3, [r7, #23]
      break;
 801644a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	2200      	movs	r2, #0
 8016450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016454:	7dfb      	ldrb	r3, [r7, #23]
}
 8016456:	4618      	mov	r0, r3
 8016458:	3718      	adds	r7, #24
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop

08016460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b084      	sub	sp, #16
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801646a:	2300      	movs	r3, #0
 801646c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016474:	2b01      	cmp	r3, #1
 8016476:	d101      	bne.n	801647c <HAL_TIM_ConfigClockSource+0x1c>
 8016478:	2302      	movs	r3, #2
 801647a:	e0dc      	b.n	8016636 <HAL_TIM_ConfigClockSource+0x1d6>
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	2201      	movs	r2, #1
 8016480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2202      	movs	r2, #2
 8016488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	689b      	ldr	r3, [r3, #8]
 8016492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016494:	68ba      	ldr	r2, [r7, #8]
 8016496:	4b6a      	ldr	r3, [pc, #424]	@ (8016640 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016498:	4013      	ands	r3, r2
 801649a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801649c:	68bb      	ldr	r3, [r7, #8]
 801649e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80164a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	68ba      	ldr	r2, [r7, #8]
 80164aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	4a64      	ldr	r2, [pc, #400]	@ (8016644 <HAL_TIM_ConfigClockSource+0x1e4>)
 80164b2:	4293      	cmp	r3, r2
 80164b4:	f000 80a9 	beq.w	801660a <HAL_TIM_ConfigClockSource+0x1aa>
 80164b8:	4a62      	ldr	r2, [pc, #392]	@ (8016644 <HAL_TIM_ConfigClockSource+0x1e4>)
 80164ba:	4293      	cmp	r3, r2
 80164bc:	f200 80ae 	bhi.w	801661c <HAL_TIM_ConfigClockSource+0x1bc>
 80164c0:	4a61      	ldr	r2, [pc, #388]	@ (8016648 <HAL_TIM_ConfigClockSource+0x1e8>)
 80164c2:	4293      	cmp	r3, r2
 80164c4:	f000 80a1 	beq.w	801660a <HAL_TIM_ConfigClockSource+0x1aa>
 80164c8:	4a5f      	ldr	r2, [pc, #380]	@ (8016648 <HAL_TIM_ConfigClockSource+0x1e8>)
 80164ca:	4293      	cmp	r3, r2
 80164cc:	f200 80a6 	bhi.w	801661c <HAL_TIM_ConfigClockSource+0x1bc>
 80164d0:	4a5e      	ldr	r2, [pc, #376]	@ (801664c <HAL_TIM_ConfigClockSource+0x1ec>)
 80164d2:	4293      	cmp	r3, r2
 80164d4:	f000 8099 	beq.w	801660a <HAL_TIM_ConfigClockSource+0x1aa>
 80164d8:	4a5c      	ldr	r2, [pc, #368]	@ (801664c <HAL_TIM_ConfigClockSource+0x1ec>)
 80164da:	4293      	cmp	r3, r2
 80164dc:	f200 809e 	bhi.w	801661c <HAL_TIM_ConfigClockSource+0x1bc>
 80164e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80164e4:	f000 8091 	beq.w	801660a <HAL_TIM_ConfigClockSource+0x1aa>
 80164e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80164ec:	f200 8096 	bhi.w	801661c <HAL_TIM_ConfigClockSource+0x1bc>
 80164f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80164f4:	f000 8089 	beq.w	801660a <HAL_TIM_ConfigClockSource+0x1aa>
 80164f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80164fc:	f200 808e 	bhi.w	801661c <HAL_TIM_ConfigClockSource+0x1bc>
 8016500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016504:	d03e      	beq.n	8016584 <HAL_TIM_ConfigClockSource+0x124>
 8016506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801650a:	f200 8087 	bhi.w	801661c <HAL_TIM_ConfigClockSource+0x1bc>
 801650e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016512:	f000 8086 	beq.w	8016622 <HAL_TIM_ConfigClockSource+0x1c2>
 8016516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801651a:	d87f      	bhi.n	801661c <HAL_TIM_ConfigClockSource+0x1bc>
 801651c:	2b70      	cmp	r3, #112	@ 0x70
 801651e:	d01a      	beq.n	8016556 <HAL_TIM_ConfigClockSource+0xf6>
 8016520:	2b70      	cmp	r3, #112	@ 0x70
 8016522:	d87b      	bhi.n	801661c <HAL_TIM_ConfigClockSource+0x1bc>
 8016524:	2b60      	cmp	r3, #96	@ 0x60
 8016526:	d050      	beq.n	80165ca <HAL_TIM_ConfigClockSource+0x16a>
 8016528:	2b60      	cmp	r3, #96	@ 0x60
 801652a:	d877      	bhi.n	801661c <HAL_TIM_ConfigClockSource+0x1bc>
 801652c:	2b50      	cmp	r3, #80	@ 0x50
 801652e:	d03c      	beq.n	80165aa <HAL_TIM_ConfigClockSource+0x14a>
 8016530:	2b50      	cmp	r3, #80	@ 0x50
 8016532:	d873      	bhi.n	801661c <HAL_TIM_ConfigClockSource+0x1bc>
 8016534:	2b40      	cmp	r3, #64	@ 0x40
 8016536:	d058      	beq.n	80165ea <HAL_TIM_ConfigClockSource+0x18a>
 8016538:	2b40      	cmp	r3, #64	@ 0x40
 801653a:	d86f      	bhi.n	801661c <HAL_TIM_ConfigClockSource+0x1bc>
 801653c:	2b30      	cmp	r3, #48	@ 0x30
 801653e:	d064      	beq.n	801660a <HAL_TIM_ConfigClockSource+0x1aa>
 8016540:	2b30      	cmp	r3, #48	@ 0x30
 8016542:	d86b      	bhi.n	801661c <HAL_TIM_ConfigClockSource+0x1bc>
 8016544:	2b20      	cmp	r3, #32
 8016546:	d060      	beq.n	801660a <HAL_TIM_ConfigClockSource+0x1aa>
 8016548:	2b20      	cmp	r3, #32
 801654a:	d867      	bhi.n	801661c <HAL_TIM_ConfigClockSource+0x1bc>
 801654c:	2b00      	cmp	r3, #0
 801654e:	d05c      	beq.n	801660a <HAL_TIM_ConfigClockSource+0x1aa>
 8016550:	2b10      	cmp	r3, #16
 8016552:	d05a      	beq.n	801660a <HAL_TIM_ConfigClockSource+0x1aa>
 8016554:	e062      	b.n	801661c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801655e:	683b      	ldr	r3, [r7, #0]
 8016560:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016566:	f000 fdd1 	bl	801710c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	689b      	ldr	r3, [r3, #8]
 8016570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016572:	68bb      	ldr	r3, [r7, #8]
 8016574:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8016578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	68ba      	ldr	r2, [r7, #8]
 8016580:	609a      	str	r2, [r3, #8]
      break;
 8016582:	e04f      	b.n	8016624 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016588:	683b      	ldr	r3, [r7, #0]
 801658a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801658c:	683b      	ldr	r3, [r7, #0]
 801658e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016594:	f000 fdba 	bl	801710c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	689a      	ldr	r2, [r3, #8]
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80165a6:	609a      	str	r2, [r3, #8]
      break;
 80165a8:	e03c      	b.n	8016624 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80165ae:	683b      	ldr	r3, [r7, #0]
 80165b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80165b2:	683b      	ldr	r3, [r7, #0]
 80165b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80165b6:	461a      	mov	r2, r3
 80165b8:	f000 fc74 	bl	8016ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	2150      	movs	r1, #80	@ 0x50
 80165c2:	4618      	mov	r0, r3
 80165c4:	f000 fd84 	bl	80170d0 <TIM_ITRx_SetConfig>
      break;
 80165c8:	e02c      	b.n	8016624 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80165ce:	683b      	ldr	r3, [r7, #0]
 80165d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80165d6:	461a      	mov	r2, r3
 80165d8:	f000 fcd0 	bl	8016f7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	2160      	movs	r1, #96	@ 0x60
 80165e2:	4618      	mov	r0, r3
 80165e4:	f000 fd74 	bl	80170d0 <TIM_ITRx_SetConfig>
      break;
 80165e8:	e01c      	b.n	8016624 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80165ee:	683b      	ldr	r3, [r7, #0]
 80165f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80165f2:	683b      	ldr	r3, [r7, #0]
 80165f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80165f6:	461a      	mov	r2, r3
 80165f8:	f000 fc54 	bl	8016ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	2140      	movs	r1, #64	@ 0x40
 8016602:	4618      	mov	r0, r3
 8016604:	f000 fd64 	bl	80170d0 <TIM_ITRx_SetConfig>
      break;
 8016608:	e00c      	b.n	8016624 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	681a      	ldr	r2, [r3, #0]
 801660e:	683b      	ldr	r3, [r7, #0]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	4619      	mov	r1, r3
 8016614:	4610      	mov	r0, r2
 8016616:	f000 fd5b 	bl	80170d0 <TIM_ITRx_SetConfig>
      break;
 801661a:	e003      	b.n	8016624 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801661c:	2301      	movs	r3, #1
 801661e:	73fb      	strb	r3, [r7, #15]
      break;
 8016620:	e000      	b.n	8016624 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8016622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2201      	movs	r2, #1
 8016628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2200      	movs	r2, #0
 8016630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016634:	7bfb      	ldrb	r3, [r7, #15]
}
 8016636:	4618      	mov	r0, r3
 8016638:	3710      	adds	r7, #16
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}
 801663e:	bf00      	nop
 8016640:	ffceff88 	.word	0xffceff88
 8016644:	00100040 	.word	0x00100040
 8016648:	00100030 	.word	0x00100030
 801664c:	00100020 	.word	0x00100020

08016650 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016650:	b480      	push	{r7}
 8016652:	b083      	sub	sp, #12
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016658:	bf00      	nop
 801665a:	370c      	adds	r7, #12
 801665c:	46bd      	mov	sp, r7
 801665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016662:	4770      	bx	lr

08016664 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8016664:	b480      	push	{r7}
 8016666:	b083      	sub	sp, #12
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801666c:	bf00      	nop
 801666e:	370c      	adds	r7, #12
 8016670:	46bd      	mov	sp, r7
 8016672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016676:	4770      	bx	lr

08016678 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016678:	b480      	push	{r7}
 801667a:	b083      	sub	sp, #12
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016680:	bf00      	nop
 8016682:	370c      	adds	r7, #12
 8016684:	46bd      	mov	sp, r7
 8016686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668a:	4770      	bx	lr

0801668c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801668c:	b480      	push	{r7}
 801668e:	b083      	sub	sp, #12
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8016694:	bf00      	nop
 8016696:	370c      	adds	r7, #12
 8016698:	46bd      	mov	sp, r7
 801669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669e:	4770      	bx	lr

080166a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80166a0:	b480      	push	{r7}
 80166a2:	b085      	sub	sp, #20
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	6078      	str	r0, [r7, #4]
 80166a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	4a47      	ldr	r2, [pc, #284]	@ (80167d0 <TIM_Base_SetConfig+0x130>)
 80166b4:	4293      	cmp	r3, r2
 80166b6:	d013      	beq.n	80166e0 <TIM_Base_SetConfig+0x40>
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80166be:	d00f      	beq.n	80166e0 <TIM_Base_SetConfig+0x40>
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	4a44      	ldr	r2, [pc, #272]	@ (80167d4 <TIM_Base_SetConfig+0x134>)
 80166c4:	4293      	cmp	r3, r2
 80166c6:	d00b      	beq.n	80166e0 <TIM_Base_SetConfig+0x40>
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	4a43      	ldr	r2, [pc, #268]	@ (80167d8 <TIM_Base_SetConfig+0x138>)
 80166cc:	4293      	cmp	r3, r2
 80166ce:	d007      	beq.n	80166e0 <TIM_Base_SetConfig+0x40>
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	4a42      	ldr	r2, [pc, #264]	@ (80167dc <TIM_Base_SetConfig+0x13c>)
 80166d4:	4293      	cmp	r3, r2
 80166d6:	d003      	beq.n	80166e0 <TIM_Base_SetConfig+0x40>
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	4a41      	ldr	r2, [pc, #260]	@ (80167e0 <TIM_Base_SetConfig+0x140>)
 80166dc:	4293      	cmp	r3, r2
 80166de:	d108      	bne.n	80166f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80166e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80166e8:	683b      	ldr	r3, [r7, #0]
 80166ea:	685b      	ldr	r3, [r3, #4]
 80166ec:	68fa      	ldr	r2, [r7, #12]
 80166ee:	4313      	orrs	r3, r2
 80166f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	4a36      	ldr	r2, [pc, #216]	@ (80167d0 <TIM_Base_SetConfig+0x130>)
 80166f6:	4293      	cmp	r3, r2
 80166f8:	d027      	beq.n	801674a <TIM_Base_SetConfig+0xaa>
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016700:	d023      	beq.n	801674a <TIM_Base_SetConfig+0xaa>
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	4a33      	ldr	r2, [pc, #204]	@ (80167d4 <TIM_Base_SetConfig+0x134>)
 8016706:	4293      	cmp	r3, r2
 8016708:	d01f      	beq.n	801674a <TIM_Base_SetConfig+0xaa>
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	4a32      	ldr	r2, [pc, #200]	@ (80167d8 <TIM_Base_SetConfig+0x138>)
 801670e:	4293      	cmp	r3, r2
 8016710:	d01b      	beq.n	801674a <TIM_Base_SetConfig+0xaa>
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	4a31      	ldr	r2, [pc, #196]	@ (80167dc <TIM_Base_SetConfig+0x13c>)
 8016716:	4293      	cmp	r3, r2
 8016718:	d017      	beq.n	801674a <TIM_Base_SetConfig+0xaa>
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	4a30      	ldr	r2, [pc, #192]	@ (80167e0 <TIM_Base_SetConfig+0x140>)
 801671e:	4293      	cmp	r3, r2
 8016720:	d013      	beq.n	801674a <TIM_Base_SetConfig+0xaa>
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	4a2f      	ldr	r2, [pc, #188]	@ (80167e4 <TIM_Base_SetConfig+0x144>)
 8016726:	4293      	cmp	r3, r2
 8016728:	d00f      	beq.n	801674a <TIM_Base_SetConfig+0xaa>
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	4a2e      	ldr	r2, [pc, #184]	@ (80167e8 <TIM_Base_SetConfig+0x148>)
 801672e:	4293      	cmp	r3, r2
 8016730:	d00b      	beq.n	801674a <TIM_Base_SetConfig+0xaa>
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	4a2d      	ldr	r2, [pc, #180]	@ (80167ec <TIM_Base_SetConfig+0x14c>)
 8016736:	4293      	cmp	r3, r2
 8016738:	d007      	beq.n	801674a <TIM_Base_SetConfig+0xaa>
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	4a2c      	ldr	r2, [pc, #176]	@ (80167f0 <TIM_Base_SetConfig+0x150>)
 801673e:	4293      	cmp	r3, r2
 8016740:	d003      	beq.n	801674a <TIM_Base_SetConfig+0xaa>
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	4a2b      	ldr	r2, [pc, #172]	@ (80167f4 <TIM_Base_SetConfig+0x154>)
 8016746:	4293      	cmp	r3, r2
 8016748:	d108      	bne.n	801675c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	68db      	ldr	r3, [r3, #12]
 8016756:	68fa      	ldr	r2, [r7, #12]
 8016758:	4313      	orrs	r3, r2
 801675a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	695b      	ldr	r3, [r3, #20]
 8016766:	4313      	orrs	r3, r2
 8016768:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801676a:	683b      	ldr	r3, [r7, #0]
 801676c:	689a      	ldr	r2, [r3, #8]
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	681a      	ldr	r2, [r3, #0]
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	4a14      	ldr	r2, [pc, #80]	@ (80167d0 <TIM_Base_SetConfig+0x130>)
 801677e:	4293      	cmp	r3, r2
 8016780:	d00f      	beq.n	80167a2 <TIM_Base_SetConfig+0x102>
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	4a16      	ldr	r2, [pc, #88]	@ (80167e0 <TIM_Base_SetConfig+0x140>)
 8016786:	4293      	cmp	r3, r2
 8016788:	d00b      	beq.n	80167a2 <TIM_Base_SetConfig+0x102>
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	4a15      	ldr	r2, [pc, #84]	@ (80167e4 <TIM_Base_SetConfig+0x144>)
 801678e:	4293      	cmp	r3, r2
 8016790:	d007      	beq.n	80167a2 <TIM_Base_SetConfig+0x102>
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	4a14      	ldr	r2, [pc, #80]	@ (80167e8 <TIM_Base_SetConfig+0x148>)
 8016796:	4293      	cmp	r3, r2
 8016798:	d003      	beq.n	80167a2 <TIM_Base_SetConfig+0x102>
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	4a13      	ldr	r2, [pc, #76]	@ (80167ec <TIM_Base_SetConfig+0x14c>)
 801679e:	4293      	cmp	r3, r2
 80167a0:	d103      	bne.n	80167aa <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	691a      	ldr	r2, [r3, #16]
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	f043 0204 	orr.w	r2, r3, #4
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	2201      	movs	r2, #1
 80167ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	68fa      	ldr	r2, [r7, #12]
 80167c0:	601a      	str	r2, [r3, #0]
}
 80167c2:	bf00      	nop
 80167c4:	3714      	adds	r7, #20
 80167c6:	46bd      	mov	sp, r7
 80167c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167cc:	4770      	bx	lr
 80167ce:	bf00      	nop
 80167d0:	40010000 	.word	0x40010000
 80167d4:	40000400 	.word	0x40000400
 80167d8:	40000800 	.word	0x40000800
 80167dc:	40000c00 	.word	0x40000c00
 80167e0:	40010400 	.word	0x40010400
 80167e4:	40014000 	.word	0x40014000
 80167e8:	40014400 	.word	0x40014400
 80167ec:	40014800 	.word	0x40014800
 80167f0:	4000e000 	.word	0x4000e000
 80167f4:	4000e400 	.word	0x4000e400

080167f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80167f8:	b480      	push	{r7}
 80167fa:	b087      	sub	sp, #28
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
 8016800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	6a1b      	ldr	r3, [r3, #32]
 8016806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	6a1b      	ldr	r3, [r3, #32]
 801680c:	f023 0201 	bic.w	r2, r3, #1
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	685b      	ldr	r3, [r3, #4]
 8016818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	699b      	ldr	r3, [r3, #24]
 801681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016820:	68fa      	ldr	r2, [r7, #12]
 8016822:	4b37      	ldr	r3, [pc, #220]	@ (8016900 <TIM_OC1_SetConfig+0x108>)
 8016824:	4013      	ands	r3, r2
 8016826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	f023 0303 	bic.w	r3, r3, #3
 801682e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016830:	683b      	ldr	r3, [r7, #0]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	68fa      	ldr	r2, [r7, #12]
 8016836:	4313      	orrs	r3, r2
 8016838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801683a:	697b      	ldr	r3, [r7, #20]
 801683c:	f023 0302 	bic.w	r3, r3, #2
 8016840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016842:	683b      	ldr	r3, [r7, #0]
 8016844:	689b      	ldr	r3, [r3, #8]
 8016846:	697a      	ldr	r2, [r7, #20]
 8016848:	4313      	orrs	r3, r2
 801684a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	4a2d      	ldr	r2, [pc, #180]	@ (8016904 <TIM_OC1_SetConfig+0x10c>)
 8016850:	4293      	cmp	r3, r2
 8016852:	d00f      	beq.n	8016874 <TIM_OC1_SetConfig+0x7c>
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	4a2c      	ldr	r2, [pc, #176]	@ (8016908 <TIM_OC1_SetConfig+0x110>)
 8016858:	4293      	cmp	r3, r2
 801685a:	d00b      	beq.n	8016874 <TIM_OC1_SetConfig+0x7c>
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	4a2b      	ldr	r2, [pc, #172]	@ (801690c <TIM_OC1_SetConfig+0x114>)
 8016860:	4293      	cmp	r3, r2
 8016862:	d007      	beq.n	8016874 <TIM_OC1_SetConfig+0x7c>
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	4a2a      	ldr	r2, [pc, #168]	@ (8016910 <TIM_OC1_SetConfig+0x118>)
 8016868:	4293      	cmp	r3, r2
 801686a:	d003      	beq.n	8016874 <TIM_OC1_SetConfig+0x7c>
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	4a29      	ldr	r2, [pc, #164]	@ (8016914 <TIM_OC1_SetConfig+0x11c>)
 8016870:	4293      	cmp	r3, r2
 8016872:	d10c      	bne.n	801688e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	f023 0308 	bic.w	r3, r3, #8
 801687a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	68db      	ldr	r3, [r3, #12]
 8016880:	697a      	ldr	r2, [r7, #20]
 8016882:	4313      	orrs	r3, r2
 8016884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8016886:	697b      	ldr	r3, [r7, #20]
 8016888:	f023 0304 	bic.w	r3, r3, #4
 801688c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	4a1c      	ldr	r2, [pc, #112]	@ (8016904 <TIM_OC1_SetConfig+0x10c>)
 8016892:	4293      	cmp	r3, r2
 8016894:	d00f      	beq.n	80168b6 <TIM_OC1_SetConfig+0xbe>
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	4a1b      	ldr	r2, [pc, #108]	@ (8016908 <TIM_OC1_SetConfig+0x110>)
 801689a:	4293      	cmp	r3, r2
 801689c:	d00b      	beq.n	80168b6 <TIM_OC1_SetConfig+0xbe>
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	4a1a      	ldr	r2, [pc, #104]	@ (801690c <TIM_OC1_SetConfig+0x114>)
 80168a2:	4293      	cmp	r3, r2
 80168a4:	d007      	beq.n	80168b6 <TIM_OC1_SetConfig+0xbe>
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	4a19      	ldr	r2, [pc, #100]	@ (8016910 <TIM_OC1_SetConfig+0x118>)
 80168aa:	4293      	cmp	r3, r2
 80168ac:	d003      	beq.n	80168b6 <TIM_OC1_SetConfig+0xbe>
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	4a18      	ldr	r2, [pc, #96]	@ (8016914 <TIM_OC1_SetConfig+0x11c>)
 80168b2:	4293      	cmp	r3, r2
 80168b4:	d111      	bne.n	80168da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80168b6:	693b      	ldr	r3, [r7, #16]
 80168b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80168bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80168be:	693b      	ldr	r3, [r7, #16]
 80168c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80168c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80168c6:	683b      	ldr	r3, [r7, #0]
 80168c8:	695b      	ldr	r3, [r3, #20]
 80168ca:	693a      	ldr	r2, [r7, #16]
 80168cc:	4313      	orrs	r3, r2
 80168ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	699b      	ldr	r3, [r3, #24]
 80168d4:	693a      	ldr	r2, [r7, #16]
 80168d6:	4313      	orrs	r3, r2
 80168d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	693a      	ldr	r2, [r7, #16]
 80168de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	68fa      	ldr	r2, [r7, #12]
 80168e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80168e6:	683b      	ldr	r3, [r7, #0]
 80168e8:	685a      	ldr	r2, [r3, #4]
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	697a      	ldr	r2, [r7, #20]
 80168f2:	621a      	str	r2, [r3, #32]
}
 80168f4:	bf00      	nop
 80168f6:	371c      	adds	r7, #28
 80168f8:	46bd      	mov	sp, r7
 80168fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fe:	4770      	bx	lr
 8016900:	fffeff8f 	.word	0xfffeff8f
 8016904:	40010000 	.word	0x40010000
 8016908:	40010400 	.word	0x40010400
 801690c:	40014000 	.word	0x40014000
 8016910:	40014400 	.word	0x40014400
 8016914:	40014800 	.word	0x40014800

08016918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016918:	b480      	push	{r7}
 801691a:	b087      	sub	sp, #28
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	6a1b      	ldr	r3, [r3, #32]
 8016926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	6a1b      	ldr	r3, [r3, #32]
 801692c:	f023 0210 	bic.w	r2, r3, #16
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	685b      	ldr	r3, [r3, #4]
 8016938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	699b      	ldr	r3, [r3, #24]
 801693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016940:	68fa      	ldr	r2, [r7, #12]
 8016942:	4b34      	ldr	r3, [pc, #208]	@ (8016a14 <TIM_OC2_SetConfig+0xfc>)
 8016944:	4013      	ands	r3, r2
 8016946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801694e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	021b      	lsls	r3, r3, #8
 8016956:	68fa      	ldr	r2, [r7, #12]
 8016958:	4313      	orrs	r3, r2
 801695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801695c:	697b      	ldr	r3, [r7, #20]
 801695e:	f023 0320 	bic.w	r3, r3, #32
 8016962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016964:	683b      	ldr	r3, [r7, #0]
 8016966:	689b      	ldr	r3, [r3, #8]
 8016968:	011b      	lsls	r3, r3, #4
 801696a:	697a      	ldr	r2, [r7, #20]
 801696c:	4313      	orrs	r3, r2
 801696e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	4a29      	ldr	r2, [pc, #164]	@ (8016a18 <TIM_OC2_SetConfig+0x100>)
 8016974:	4293      	cmp	r3, r2
 8016976:	d003      	beq.n	8016980 <TIM_OC2_SetConfig+0x68>
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	4a28      	ldr	r2, [pc, #160]	@ (8016a1c <TIM_OC2_SetConfig+0x104>)
 801697c:	4293      	cmp	r3, r2
 801697e:	d10d      	bne.n	801699c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8016988:	683b      	ldr	r3, [r7, #0]
 801698a:	68db      	ldr	r3, [r3, #12]
 801698c:	011b      	lsls	r3, r3, #4
 801698e:	697a      	ldr	r2, [r7, #20]
 8016990:	4313      	orrs	r3, r2
 8016992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016994:	697b      	ldr	r3, [r7, #20]
 8016996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801699a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	4a1e      	ldr	r2, [pc, #120]	@ (8016a18 <TIM_OC2_SetConfig+0x100>)
 80169a0:	4293      	cmp	r3, r2
 80169a2:	d00f      	beq.n	80169c4 <TIM_OC2_SetConfig+0xac>
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	4a1d      	ldr	r2, [pc, #116]	@ (8016a1c <TIM_OC2_SetConfig+0x104>)
 80169a8:	4293      	cmp	r3, r2
 80169aa:	d00b      	beq.n	80169c4 <TIM_OC2_SetConfig+0xac>
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	4a1c      	ldr	r2, [pc, #112]	@ (8016a20 <TIM_OC2_SetConfig+0x108>)
 80169b0:	4293      	cmp	r3, r2
 80169b2:	d007      	beq.n	80169c4 <TIM_OC2_SetConfig+0xac>
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	4a1b      	ldr	r2, [pc, #108]	@ (8016a24 <TIM_OC2_SetConfig+0x10c>)
 80169b8:	4293      	cmp	r3, r2
 80169ba:	d003      	beq.n	80169c4 <TIM_OC2_SetConfig+0xac>
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	4a1a      	ldr	r2, [pc, #104]	@ (8016a28 <TIM_OC2_SetConfig+0x110>)
 80169c0:	4293      	cmp	r3, r2
 80169c2:	d113      	bne.n	80169ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80169c4:	693b      	ldr	r3, [r7, #16]
 80169c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80169ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80169cc:	693b      	ldr	r3, [r7, #16]
 80169ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80169d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	695b      	ldr	r3, [r3, #20]
 80169d8:	009b      	lsls	r3, r3, #2
 80169da:	693a      	ldr	r2, [r7, #16]
 80169dc:	4313      	orrs	r3, r2
 80169de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80169e0:	683b      	ldr	r3, [r7, #0]
 80169e2:	699b      	ldr	r3, [r3, #24]
 80169e4:	009b      	lsls	r3, r3, #2
 80169e6:	693a      	ldr	r2, [r7, #16]
 80169e8:	4313      	orrs	r3, r2
 80169ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	693a      	ldr	r2, [r7, #16]
 80169f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	68fa      	ldr	r2, [r7, #12]
 80169f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	685a      	ldr	r2, [r3, #4]
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	697a      	ldr	r2, [r7, #20]
 8016a04:	621a      	str	r2, [r3, #32]
}
 8016a06:	bf00      	nop
 8016a08:	371c      	adds	r7, #28
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a10:	4770      	bx	lr
 8016a12:	bf00      	nop
 8016a14:	feff8fff 	.word	0xfeff8fff
 8016a18:	40010000 	.word	0x40010000
 8016a1c:	40010400 	.word	0x40010400
 8016a20:	40014000 	.word	0x40014000
 8016a24:	40014400 	.word	0x40014400
 8016a28:	40014800 	.word	0x40014800

08016a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016a2c:	b480      	push	{r7}
 8016a2e:	b087      	sub	sp, #28
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
 8016a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	6a1b      	ldr	r3, [r3, #32]
 8016a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	6a1b      	ldr	r3, [r3, #32]
 8016a40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	685b      	ldr	r3, [r3, #4]
 8016a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	69db      	ldr	r3, [r3, #28]
 8016a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016a54:	68fa      	ldr	r2, [r7, #12]
 8016a56:	4b33      	ldr	r3, [pc, #204]	@ (8016b24 <TIM_OC3_SetConfig+0xf8>)
 8016a58:	4013      	ands	r3, r2
 8016a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	f023 0303 	bic.w	r3, r3, #3
 8016a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	68fa      	ldr	r2, [r7, #12]
 8016a6a:	4313      	orrs	r3, r2
 8016a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016a6e:	697b      	ldr	r3, [r7, #20]
 8016a70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016a76:	683b      	ldr	r3, [r7, #0]
 8016a78:	689b      	ldr	r3, [r3, #8]
 8016a7a:	021b      	lsls	r3, r3, #8
 8016a7c:	697a      	ldr	r2, [r7, #20]
 8016a7e:	4313      	orrs	r3, r2
 8016a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	4a28      	ldr	r2, [pc, #160]	@ (8016b28 <TIM_OC3_SetConfig+0xfc>)
 8016a86:	4293      	cmp	r3, r2
 8016a88:	d003      	beq.n	8016a92 <TIM_OC3_SetConfig+0x66>
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	4a27      	ldr	r2, [pc, #156]	@ (8016b2c <TIM_OC3_SetConfig+0x100>)
 8016a8e:	4293      	cmp	r3, r2
 8016a90:	d10d      	bne.n	8016aae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016a9a:	683b      	ldr	r3, [r7, #0]
 8016a9c:	68db      	ldr	r3, [r3, #12]
 8016a9e:	021b      	lsls	r3, r3, #8
 8016aa0:	697a      	ldr	r2, [r7, #20]
 8016aa2:	4313      	orrs	r3, r2
 8016aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8016aa6:	697b      	ldr	r3, [r7, #20]
 8016aa8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8016b28 <TIM_OC3_SetConfig+0xfc>)
 8016ab2:	4293      	cmp	r3, r2
 8016ab4:	d00f      	beq.n	8016ad6 <TIM_OC3_SetConfig+0xaa>
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8016b2c <TIM_OC3_SetConfig+0x100>)
 8016aba:	4293      	cmp	r3, r2
 8016abc:	d00b      	beq.n	8016ad6 <TIM_OC3_SetConfig+0xaa>
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8016b30 <TIM_OC3_SetConfig+0x104>)
 8016ac2:	4293      	cmp	r3, r2
 8016ac4:	d007      	beq.n	8016ad6 <TIM_OC3_SetConfig+0xaa>
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8016b34 <TIM_OC3_SetConfig+0x108>)
 8016aca:	4293      	cmp	r3, r2
 8016acc:	d003      	beq.n	8016ad6 <TIM_OC3_SetConfig+0xaa>
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	4a19      	ldr	r2, [pc, #100]	@ (8016b38 <TIM_OC3_SetConfig+0x10c>)
 8016ad2:	4293      	cmp	r3, r2
 8016ad4:	d113      	bne.n	8016afe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016ad6:	693b      	ldr	r3, [r7, #16]
 8016ad8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8016ade:	693b      	ldr	r3, [r7, #16]
 8016ae0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	695b      	ldr	r3, [r3, #20]
 8016aea:	011b      	lsls	r3, r3, #4
 8016aec:	693a      	ldr	r2, [r7, #16]
 8016aee:	4313      	orrs	r3, r2
 8016af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8016af2:	683b      	ldr	r3, [r7, #0]
 8016af4:	699b      	ldr	r3, [r3, #24]
 8016af6:	011b      	lsls	r3, r3, #4
 8016af8:	693a      	ldr	r2, [r7, #16]
 8016afa:	4313      	orrs	r3, r2
 8016afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	693a      	ldr	r2, [r7, #16]
 8016b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	68fa      	ldr	r2, [r7, #12]
 8016b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016b0a:	683b      	ldr	r3, [r7, #0]
 8016b0c:	685a      	ldr	r2, [r3, #4]
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	697a      	ldr	r2, [r7, #20]
 8016b16:	621a      	str	r2, [r3, #32]
}
 8016b18:	bf00      	nop
 8016b1a:	371c      	adds	r7, #28
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b22:	4770      	bx	lr
 8016b24:	fffeff8f 	.word	0xfffeff8f
 8016b28:	40010000 	.word	0x40010000
 8016b2c:	40010400 	.word	0x40010400
 8016b30:	40014000 	.word	0x40014000
 8016b34:	40014400 	.word	0x40014400
 8016b38:	40014800 	.word	0x40014800

08016b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016b3c:	b480      	push	{r7}
 8016b3e:	b087      	sub	sp, #28
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
 8016b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6a1b      	ldr	r3, [r3, #32]
 8016b4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	6a1b      	ldr	r3, [r3, #32]
 8016b50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	685b      	ldr	r3, [r3, #4]
 8016b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	69db      	ldr	r3, [r3, #28]
 8016b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016b64:	68fa      	ldr	r2, [r7, #12]
 8016b66:	4b24      	ldr	r3, [pc, #144]	@ (8016bf8 <TIM_OC4_SetConfig+0xbc>)
 8016b68:	4013      	ands	r3, r2
 8016b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016b74:	683b      	ldr	r3, [r7, #0]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	021b      	lsls	r3, r3, #8
 8016b7a:	68fa      	ldr	r2, [r7, #12]
 8016b7c:	4313      	orrs	r3, r2
 8016b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016b80:	693b      	ldr	r3, [r7, #16]
 8016b82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016b88:	683b      	ldr	r3, [r7, #0]
 8016b8a:	689b      	ldr	r3, [r3, #8]
 8016b8c:	031b      	lsls	r3, r3, #12
 8016b8e:	693a      	ldr	r2, [r7, #16]
 8016b90:	4313      	orrs	r3, r2
 8016b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	4a19      	ldr	r2, [pc, #100]	@ (8016bfc <TIM_OC4_SetConfig+0xc0>)
 8016b98:	4293      	cmp	r3, r2
 8016b9a:	d00f      	beq.n	8016bbc <TIM_OC4_SetConfig+0x80>
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	4a18      	ldr	r2, [pc, #96]	@ (8016c00 <TIM_OC4_SetConfig+0xc4>)
 8016ba0:	4293      	cmp	r3, r2
 8016ba2:	d00b      	beq.n	8016bbc <TIM_OC4_SetConfig+0x80>
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	4a17      	ldr	r2, [pc, #92]	@ (8016c04 <TIM_OC4_SetConfig+0xc8>)
 8016ba8:	4293      	cmp	r3, r2
 8016baa:	d007      	beq.n	8016bbc <TIM_OC4_SetConfig+0x80>
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	4a16      	ldr	r2, [pc, #88]	@ (8016c08 <TIM_OC4_SetConfig+0xcc>)
 8016bb0:	4293      	cmp	r3, r2
 8016bb2:	d003      	beq.n	8016bbc <TIM_OC4_SetConfig+0x80>
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	4a15      	ldr	r2, [pc, #84]	@ (8016c0c <TIM_OC4_SetConfig+0xd0>)
 8016bb8:	4293      	cmp	r3, r2
 8016bba:	d109      	bne.n	8016bd0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8016bbc:	697b      	ldr	r3, [r7, #20]
 8016bbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8016bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	695b      	ldr	r3, [r3, #20]
 8016bc8:	019b      	lsls	r3, r3, #6
 8016bca:	697a      	ldr	r2, [r7, #20]
 8016bcc:	4313      	orrs	r3, r2
 8016bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	697a      	ldr	r2, [r7, #20]
 8016bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	68fa      	ldr	r2, [r7, #12]
 8016bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016bdc:	683b      	ldr	r3, [r7, #0]
 8016bde:	685a      	ldr	r2, [r3, #4]
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	693a      	ldr	r2, [r7, #16]
 8016be8:	621a      	str	r2, [r3, #32]
}
 8016bea:	bf00      	nop
 8016bec:	371c      	adds	r7, #28
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf4:	4770      	bx	lr
 8016bf6:	bf00      	nop
 8016bf8:	feff8fff 	.word	0xfeff8fff
 8016bfc:	40010000 	.word	0x40010000
 8016c00:	40010400 	.word	0x40010400
 8016c04:	40014000 	.word	0x40014000
 8016c08:	40014400 	.word	0x40014400
 8016c0c:	40014800 	.word	0x40014800

08016c10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016c10:	b480      	push	{r7}
 8016c12:	b087      	sub	sp, #28
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
 8016c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	6a1b      	ldr	r3, [r3, #32]
 8016c1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	6a1b      	ldr	r3, [r3, #32]
 8016c24:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	685b      	ldr	r3, [r3, #4]
 8016c30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8016c38:	68fa      	ldr	r2, [r7, #12]
 8016c3a:	4b21      	ldr	r3, [pc, #132]	@ (8016cc0 <TIM_OC5_SetConfig+0xb0>)
 8016c3c:	4013      	ands	r3, r2
 8016c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016c40:	683b      	ldr	r3, [r7, #0]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	68fa      	ldr	r2, [r7, #12]
 8016c46:	4313      	orrs	r3, r2
 8016c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8016c4a:	693b      	ldr	r3, [r7, #16]
 8016c4c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8016c50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8016c52:	683b      	ldr	r3, [r7, #0]
 8016c54:	689b      	ldr	r3, [r3, #8]
 8016c56:	041b      	lsls	r3, r3, #16
 8016c58:	693a      	ldr	r2, [r7, #16]
 8016c5a:	4313      	orrs	r3, r2
 8016c5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	4a18      	ldr	r2, [pc, #96]	@ (8016cc4 <TIM_OC5_SetConfig+0xb4>)
 8016c62:	4293      	cmp	r3, r2
 8016c64:	d00f      	beq.n	8016c86 <TIM_OC5_SetConfig+0x76>
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	4a17      	ldr	r2, [pc, #92]	@ (8016cc8 <TIM_OC5_SetConfig+0xb8>)
 8016c6a:	4293      	cmp	r3, r2
 8016c6c:	d00b      	beq.n	8016c86 <TIM_OC5_SetConfig+0x76>
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	4a16      	ldr	r2, [pc, #88]	@ (8016ccc <TIM_OC5_SetConfig+0xbc>)
 8016c72:	4293      	cmp	r3, r2
 8016c74:	d007      	beq.n	8016c86 <TIM_OC5_SetConfig+0x76>
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	4a15      	ldr	r2, [pc, #84]	@ (8016cd0 <TIM_OC5_SetConfig+0xc0>)
 8016c7a:	4293      	cmp	r3, r2
 8016c7c:	d003      	beq.n	8016c86 <TIM_OC5_SetConfig+0x76>
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	4a14      	ldr	r2, [pc, #80]	@ (8016cd4 <TIM_OC5_SetConfig+0xc4>)
 8016c82:	4293      	cmp	r3, r2
 8016c84:	d109      	bne.n	8016c9a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8016c86:	697b      	ldr	r3, [r7, #20]
 8016c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	695b      	ldr	r3, [r3, #20]
 8016c92:	021b      	lsls	r3, r3, #8
 8016c94:	697a      	ldr	r2, [r7, #20]
 8016c96:	4313      	orrs	r3, r2
 8016c98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	697a      	ldr	r2, [r7, #20]
 8016c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	68fa      	ldr	r2, [r7, #12]
 8016ca4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8016ca6:	683b      	ldr	r3, [r7, #0]
 8016ca8:	685a      	ldr	r2, [r3, #4]
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	693a      	ldr	r2, [r7, #16]
 8016cb2:	621a      	str	r2, [r3, #32]
}
 8016cb4:	bf00      	nop
 8016cb6:	371c      	adds	r7, #28
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbe:	4770      	bx	lr
 8016cc0:	fffeff8f 	.word	0xfffeff8f
 8016cc4:	40010000 	.word	0x40010000
 8016cc8:	40010400 	.word	0x40010400
 8016ccc:	40014000 	.word	0x40014000
 8016cd0:	40014400 	.word	0x40014400
 8016cd4:	40014800 	.word	0x40014800

08016cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016cd8:	b480      	push	{r7}
 8016cda:	b087      	sub	sp, #28
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	6078      	str	r0, [r7, #4]
 8016ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	6a1b      	ldr	r3, [r3, #32]
 8016ce6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	6a1b      	ldr	r3, [r3, #32]
 8016cec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	685b      	ldr	r3, [r3, #4]
 8016cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8016d00:	68fa      	ldr	r2, [r7, #12]
 8016d02:	4b22      	ldr	r3, [pc, #136]	@ (8016d8c <TIM_OC6_SetConfig+0xb4>)
 8016d04:	4013      	ands	r3, r2
 8016d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016d08:	683b      	ldr	r3, [r7, #0]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	021b      	lsls	r3, r3, #8
 8016d0e:	68fa      	ldr	r2, [r7, #12]
 8016d10:	4313      	orrs	r3, r2
 8016d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8016d14:	693b      	ldr	r3, [r7, #16]
 8016d16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8016d1c:	683b      	ldr	r3, [r7, #0]
 8016d1e:	689b      	ldr	r3, [r3, #8]
 8016d20:	051b      	lsls	r3, r3, #20
 8016d22:	693a      	ldr	r2, [r7, #16]
 8016d24:	4313      	orrs	r3, r2
 8016d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	4a19      	ldr	r2, [pc, #100]	@ (8016d90 <TIM_OC6_SetConfig+0xb8>)
 8016d2c:	4293      	cmp	r3, r2
 8016d2e:	d00f      	beq.n	8016d50 <TIM_OC6_SetConfig+0x78>
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	4a18      	ldr	r2, [pc, #96]	@ (8016d94 <TIM_OC6_SetConfig+0xbc>)
 8016d34:	4293      	cmp	r3, r2
 8016d36:	d00b      	beq.n	8016d50 <TIM_OC6_SetConfig+0x78>
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	4a17      	ldr	r2, [pc, #92]	@ (8016d98 <TIM_OC6_SetConfig+0xc0>)
 8016d3c:	4293      	cmp	r3, r2
 8016d3e:	d007      	beq.n	8016d50 <TIM_OC6_SetConfig+0x78>
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	4a16      	ldr	r2, [pc, #88]	@ (8016d9c <TIM_OC6_SetConfig+0xc4>)
 8016d44:	4293      	cmp	r3, r2
 8016d46:	d003      	beq.n	8016d50 <TIM_OC6_SetConfig+0x78>
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	4a15      	ldr	r2, [pc, #84]	@ (8016da0 <TIM_OC6_SetConfig+0xc8>)
 8016d4c:	4293      	cmp	r3, r2
 8016d4e:	d109      	bne.n	8016d64 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8016d50:	697b      	ldr	r3, [r7, #20]
 8016d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8016d56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8016d58:	683b      	ldr	r3, [r7, #0]
 8016d5a:	695b      	ldr	r3, [r3, #20]
 8016d5c:	029b      	lsls	r3, r3, #10
 8016d5e:	697a      	ldr	r2, [r7, #20]
 8016d60:	4313      	orrs	r3, r2
 8016d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	697a      	ldr	r2, [r7, #20]
 8016d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	68fa      	ldr	r2, [r7, #12]
 8016d6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8016d70:	683b      	ldr	r3, [r7, #0]
 8016d72:	685a      	ldr	r2, [r3, #4]
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	693a      	ldr	r2, [r7, #16]
 8016d7c:	621a      	str	r2, [r3, #32]
}
 8016d7e:	bf00      	nop
 8016d80:	371c      	adds	r7, #28
 8016d82:	46bd      	mov	sp, r7
 8016d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d88:	4770      	bx	lr
 8016d8a:	bf00      	nop
 8016d8c:	feff8fff 	.word	0xfeff8fff
 8016d90:	40010000 	.word	0x40010000
 8016d94:	40010400 	.word	0x40010400
 8016d98:	40014000 	.word	0x40014000
 8016d9c:	40014400 	.word	0x40014400
 8016da0:	40014800 	.word	0x40014800

08016da4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8016da4:	b480      	push	{r7}
 8016da6:	b087      	sub	sp, #28
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	60f8      	str	r0, [r7, #12]
 8016dac:	60b9      	str	r1, [r7, #8]
 8016dae:	607a      	str	r2, [r7, #4]
 8016db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	6a1b      	ldr	r3, [r3, #32]
 8016db6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	6a1b      	ldr	r3, [r3, #32]
 8016dbc:	f023 0201 	bic.w	r2, r3, #1
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	699b      	ldr	r3, [r3, #24]
 8016dc8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8016e80 <TIM_TI1_SetConfig+0xdc>)
 8016dce:	4293      	cmp	r3, r2
 8016dd0:	d023      	beq.n	8016e1a <TIM_TI1_SetConfig+0x76>
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016dd8:	d01f      	beq.n	8016e1a <TIM_TI1_SetConfig+0x76>
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	4a29      	ldr	r2, [pc, #164]	@ (8016e84 <TIM_TI1_SetConfig+0xe0>)
 8016dde:	4293      	cmp	r3, r2
 8016de0:	d01b      	beq.n	8016e1a <TIM_TI1_SetConfig+0x76>
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	4a28      	ldr	r2, [pc, #160]	@ (8016e88 <TIM_TI1_SetConfig+0xe4>)
 8016de6:	4293      	cmp	r3, r2
 8016de8:	d017      	beq.n	8016e1a <TIM_TI1_SetConfig+0x76>
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	4a27      	ldr	r2, [pc, #156]	@ (8016e8c <TIM_TI1_SetConfig+0xe8>)
 8016dee:	4293      	cmp	r3, r2
 8016df0:	d013      	beq.n	8016e1a <TIM_TI1_SetConfig+0x76>
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	4a26      	ldr	r2, [pc, #152]	@ (8016e90 <TIM_TI1_SetConfig+0xec>)
 8016df6:	4293      	cmp	r3, r2
 8016df8:	d00f      	beq.n	8016e1a <TIM_TI1_SetConfig+0x76>
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	4a25      	ldr	r2, [pc, #148]	@ (8016e94 <TIM_TI1_SetConfig+0xf0>)
 8016dfe:	4293      	cmp	r3, r2
 8016e00:	d00b      	beq.n	8016e1a <TIM_TI1_SetConfig+0x76>
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	4a24      	ldr	r2, [pc, #144]	@ (8016e98 <TIM_TI1_SetConfig+0xf4>)
 8016e06:	4293      	cmp	r3, r2
 8016e08:	d007      	beq.n	8016e1a <TIM_TI1_SetConfig+0x76>
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	4a23      	ldr	r2, [pc, #140]	@ (8016e9c <TIM_TI1_SetConfig+0xf8>)
 8016e0e:	4293      	cmp	r3, r2
 8016e10:	d003      	beq.n	8016e1a <TIM_TI1_SetConfig+0x76>
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	4a22      	ldr	r2, [pc, #136]	@ (8016ea0 <TIM_TI1_SetConfig+0xfc>)
 8016e16:	4293      	cmp	r3, r2
 8016e18:	d101      	bne.n	8016e1e <TIM_TI1_SetConfig+0x7a>
 8016e1a:	2301      	movs	r3, #1
 8016e1c:	e000      	b.n	8016e20 <TIM_TI1_SetConfig+0x7c>
 8016e1e:	2300      	movs	r3, #0
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d008      	beq.n	8016e36 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8016e24:	697b      	ldr	r3, [r7, #20]
 8016e26:	f023 0303 	bic.w	r3, r3, #3
 8016e2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8016e2c:	697a      	ldr	r2, [r7, #20]
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	4313      	orrs	r3, r2
 8016e32:	617b      	str	r3, [r7, #20]
 8016e34:	e003      	b.n	8016e3e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8016e36:	697b      	ldr	r3, [r7, #20]
 8016e38:	f043 0301 	orr.w	r3, r3, #1
 8016e3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016e3e:	697b      	ldr	r3, [r7, #20]
 8016e40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8016e44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8016e46:	683b      	ldr	r3, [r7, #0]
 8016e48:	011b      	lsls	r3, r3, #4
 8016e4a:	b2db      	uxtb	r3, r3
 8016e4c:	697a      	ldr	r2, [r7, #20]
 8016e4e:	4313      	orrs	r3, r2
 8016e50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8016e52:	693b      	ldr	r3, [r7, #16]
 8016e54:	f023 030a 	bic.w	r3, r3, #10
 8016e58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	f003 030a 	and.w	r3, r3, #10
 8016e60:	693a      	ldr	r2, [r7, #16]
 8016e62:	4313      	orrs	r3, r2
 8016e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	697a      	ldr	r2, [r7, #20]
 8016e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	693a      	ldr	r2, [r7, #16]
 8016e70:	621a      	str	r2, [r3, #32]
}
 8016e72:	bf00      	nop
 8016e74:	371c      	adds	r7, #28
 8016e76:	46bd      	mov	sp, r7
 8016e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7c:	4770      	bx	lr
 8016e7e:	bf00      	nop
 8016e80:	40010000 	.word	0x40010000
 8016e84:	40000400 	.word	0x40000400
 8016e88:	40000800 	.word	0x40000800
 8016e8c:	40000c00 	.word	0x40000c00
 8016e90:	40010400 	.word	0x40010400
 8016e94:	40001800 	.word	0x40001800
 8016e98:	40014000 	.word	0x40014000
 8016e9c:	4000e000 	.word	0x4000e000
 8016ea0:	4000e400 	.word	0x4000e400

08016ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016ea4:	b480      	push	{r7}
 8016ea6:	b087      	sub	sp, #28
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	60f8      	str	r0, [r7, #12]
 8016eac:	60b9      	str	r1, [r7, #8]
 8016eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	6a1b      	ldr	r3, [r3, #32]
 8016eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	6a1b      	ldr	r3, [r3, #32]
 8016eba:	f023 0201 	bic.w	r2, r3, #1
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	699b      	ldr	r3, [r3, #24]
 8016ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016ec8:	693b      	ldr	r3, [r7, #16]
 8016eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8016ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	011b      	lsls	r3, r3, #4
 8016ed4:	693a      	ldr	r2, [r7, #16]
 8016ed6:	4313      	orrs	r3, r2
 8016ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8016eda:	697b      	ldr	r3, [r7, #20]
 8016edc:	f023 030a 	bic.w	r3, r3, #10
 8016ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8016ee2:	697a      	ldr	r2, [r7, #20]
 8016ee4:	68bb      	ldr	r3, [r7, #8]
 8016ee6:	4313      	orrs	r3, r2
 8016ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	693a      	ldr	r2, [r7, #16]
 8016eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	697a      	ldr	r2, [r7, #20]
 8016ef4:	621a      	str	r2, [r3, #32]
}
 8016ef6:	bf00      	nop
 8016ef8:	371c      	adds	r7, #28
 8016efa:	46bd      	mov	sp, r7
 8016efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f00:	4770      	bx	lr

08016f02 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8016f02:	b480      	push	{r7}
 8016f04:	b087      	sub	sp, #28
 8016f06:	af00      	add	r7, sp, #0
 8016f08:	60f8      	str	r0, [r7, #12]
 8016f0a:	60b9      	str	r1, [r7, #8]
 8016f0c:	607a      	str	r2, [r7, #4]
 8016f0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	6a1b      	ldr	r3, [r3, #32]
 8016f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	6a1b      	ldr	r3, [r3, #32]
 8016f1a:	f023 0210 	bic.w	r2, r3, #16
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	699b      	ldr	r3, [r3, #24]
 8016f26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8016f28:	693b      	ldr	r3, [r7, #16]
 8016f2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	021b      	lsls	r3, r3, #8
 8016f34:	693a      	ldr	r2, [r7, #16]
 8016f36:	4313      	orrs	r3, r2
 8016f38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8016f3a:	693b      	ldr	r3, [r7, #16]
 8016f3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8016f40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	031b      	lsls	r3, r3, #12
 8016f46:	b29b      	uxth	r3, r3
 8016f48:	693a      	ldr	r2, [r7, #16]
 8016f4a:	4313      	orrs	r3, r2
 8016f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016f4e:	697b      	ldr	r3, [r7, #20]
 8016f50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8016f54:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8016f56:	68bb      	ldr	r3, [r7, #8]
 8016f58:	011b      	lsls	r3, r3, #4
 8016f5a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8016f5e:	697a      	ldr	r2, [r7, #20]
 8016f60:	4313      	orrs	r3, r2
 8016f62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	693a      	ldr	r2, [r7, #16]
 8016f68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	697a      	ldr	r2, [r7, #20]
 8016f6e:	621a      	str	r2, [r3, #32]
}
 8016f70:	bf00      	nop
 8016f72:	371c      	adds	r7, #28
 8016f74:	46bd      	mov	sp, r7
 8016f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f7a:	4770      	bx	lr

08016f7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016f7c:	b480      	push	{r7}
 8016f7e:	b087      	sub	sp, #28
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	60f8      	str	r0, [r7, #12]
 8016f84:	60b9      	str	r1, [r7, #8]
 8016f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	6a1b      	ldr	r3, [r3, #32]
 8016f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	6a1b      	ldr	r3, [r3, #32]
 8016f92:	f023 0210 	bic.w	r2, r3, #16
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	699b      	ldr	r3, [r3, #24]
 8016f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8016fa0:	693b      	ldr	r3, [r7, #16]
 8016fa2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8016fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	031b      	lsls	r3, r3, #12
 8016fac:	693a      	ldr	r2, [r7, #16]
 8016fae:	4313      	orrs	r3, r2
 8016fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016fb2:	697b      	ldr	r3, [r7, #20]
 8016fb4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8016fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8016fba:	68bb      	ldr	r3, [r7, #8]
 8016fbc:	011b      	lsls	r3, r3, #4
 8016fbe:	697a      	ldr	r2, [r7, #20]
 8016fc0:	4313      	orrs	r3, r2
 8016fc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	693a      	ldr	r2, [r7, #16]
 8016fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	697a      	ldr	r2, [r7, #20]
 8016fce:	621a      	str	r2, [r3, #32]
}
 8016fd0:	bf00      	nop
 8016fd2:	371c      	adds	r7, #28
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fda:	4770      	bx	lr

08016fdc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8016fdc:	b480      	push	{r7}
 8016fde:	b087      	sub	sp, #28
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	60f8      	str	r0, [r7, #12]
 8016fe4:	60b9      	str	r1, [r7, #8]
 8016fe6:	607a      	str	r2, [r7, #4]
 8016fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	6a1b      	ldr	r3, [r3, #32]
 8016fee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	6a1b      	ldr	r3, [r3, #32]
 8016ff4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	69db      	ldr	r3, [r3, #28]
 8017000:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8017002:	693b      	ldr	r3, [r7, #16]
 8017004:	f023 0303 	bic.w	r3, r3, #3
 8017008:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 801700a:	693a      	ldr	r2, [r7, #16]
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	4313      	orrs	r3, r2
 8017010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8017012:	693b      	ldr	r3, [r7, #16]
 8017014:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017018:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801701a:	683b      	ldr	r3, [r7, #0]
 801701c:	011b      	lsls	r3, r3, #4
 801701e:	b2db      	uxtb	r3, r3
 8017020:	693a      	ldr	r2, [r7, #16]
 8017022:	4313      	orrs	r3, r2
 8017024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8017026:	697b      	ldr	r3, [r7, #20]
 8017028:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 801702c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801702e:	68bb      	ldr	r3, [r7, #8]
 8017030:	021b      	lsls	r3, r3, #8
 8017032:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8017036:	697a      	ldr	r2, [r7, #20]
 8017038:	4313      	orrs	r3, r2
 801703a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	693a      	ldr	r2, [r7, #16]
 8017040:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	697a      	ldr	r2, [r7, #20]
 8017046:	621a      	str	r2, [r3, #32]
}
 8017048:	bf00      	nop
 801704a:	371c      	adds	r7, #28
 801704c:	46bd      	mov	sp, r7
 801704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017052:	4770      	bx	lr

08017054 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017054:	b480      	push	{r7}
 8017056:	b087      	sub	sp, #28
 8017058:	af00      	add	r7, sp, #0
 801705a:	60f8      	str	r0, [r7, #12]
 801705c:	60b9      	str	r1, [r7, #8]
 801705e:	607a      	str	r2, [r7, #4]
 8017060:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	6a1b      	ldr	r3, [r3, #32]
 8017066:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	6a1b      	ldr	r3, [r3, #32]
 801706c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	69db      	ldr	r3, [r3, #28]
 8017078:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801707a:	693b      	ldr	r3, [r7, #16]
 801707c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017080:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	021b      	lsls	r3, r3, #8
 8017086:	693a      	ldr	r2, [r7, #16]
 8017088:	4313      	orrs	r3, r2
 801708a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801708c:	693b      	ldr	r3, [r7, #16]
 801708e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017092:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017094:	683b      	ldr	r3, [r7, #0]
 8017096:	031b      	lsls	r3, r3, #12
 8017098:	b29b      	uxth	r3, r3
 801709a:	693a      	ldr	r2, [r7, #16]
 801709c:	4313      	orrs	r3, r2
 801709e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80170a0:	697b      	ldr	r3, [r7, #20]
 80170a2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80170a6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80170a8:	68bb      	ldr	r3, [r7, #8]
 80170aa:	031b      	lsls	r3, r3, #12
 80170ac:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80170b0:	697a      	ldr	r2, [r7, #20]
 80170b2:	4313      	orrs	r3, r2
 80170b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	693a      	ldr	r2, [r7, #16]
 80170ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	697a      	ldr	r2, [r7, #20]
 80170c0:	621a      	str	r2, [r3, #32]
}
 80170c2:	bf00      	nop
 80170c4:	371c      	adds	r7, #28
 80170c6:	46bd      	mov	sp, r7
 80170c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170cc:	4770      	bx	lr
	...

080170d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80170d0:	b480      	push	{r7}
 80170d2:	b085      	sub	sp, #20
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
 80170d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	689b      	ldr	r3, [r3, #8]
 80170de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80170e0:	68fa      	ldr	r2, [r7, #12]
 80170e2:	4b09      	ldr	r3, [pc, #36]	@ (8017108 <TIM_ITRx_SetConfig+0x38>)
 80170e4:	4013      	ands	r3, r2
 80170e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80170e8:	683a      	ldr	r2, [r7, #0]
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	4313      	orrs	r3, r2
 80170ee:	f043 0307 	orr.w	r3, r3, #7
 80170f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	68fa      	ldr	r2, [r7, #12]
 80170f8:	609a      	str	r2, [r3, #8]
}
 80170fa:	bf00      	nop
 80170fc:	3714      	adds	r7, #20
 80170fe:	46bd      	mov	sp, r7
 8017100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017104:	4770      	bx	lr
 8017106:	bf00      	nop
 8017108:	ffcfff8f 	.word	0xffcfff8f

0801710c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801710c:	b480      	push	{r7}
 801710e:	b087      	sub	sp, #28
 8017110:	af00      	add	r7, sp, #0
 8017112:	60f8      	str	r0, [r7, #12]
 8017114:	60b9      	str	r1, [r7, #8]
 8017116:	607a      	str	r2, [r7, #4]
 8017118:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	689b      	ldr	r3, [r3, #8]
 801711e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017120:	697b      	ldr	r3, [r7, #20]
 8017122:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017126:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017128:	683b      	ldr	r3, [r7, #0]
 801712a:	021a      	lsls	r2, r3, #8
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	431a      	orrs	r2, r3
 8017130:	68bb      	ldr	r3, [r7, #8]
 8017132:	4313      	orrs	r3, r2
 8017134:	697a      	ldr	r2, [r7, #20]
 8017136:	4313      	orrs	r3, r2
 8017138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	697a      	ldr	r2, [r7, #20]
 801713e:	609a      	str	r2, [r3, #8]
}
 8017140:	bf00      	nop
 8017142:	371c      	adds	r7, #28
 8017144:	46bd      	mov	sp, r7
 8017146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714a:	4770      	bx	lr

0801714c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801714c:	b480      	push	{r7}
 801714e:	b087      	sub	sp, #28
 8017150:	af00      	add	r7, sp, #0
 8017152:	60f8      	str	r0, [r7, #12]
 8017154:	60b9      	str	r1, [r7, #8]
 8017156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017158:	68bb      	ldr	r3, [r7, #8]
 801715a:	f003 031f 	and.w	r3, r3, #31
 801715e:	2201      	movs	r2, #1
 8017160:	fa02 f303 	lsl.w	r3, r2, r3
 8017164:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	6a1a      	ldr	r2, [r3, #32]
 801716a:	697b      	ldr	r3, [r7, #20]
 801716c:	43db      	mvns	r3, r3
 801716e:	401a      	ands	r2, r3
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	6a1a      	ldr	r2, [r3, #32]
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	f003 031f 	and.w	r3, r3, #31
 801717e:	6879      	ldr	r1, [r7, #4]
 8017180:	fa01 f303 	lsl.w	r3, r1, r3
 8017184:	431a      	orrs	r2, r3
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	621a      	str	r2, [r3, #32]
}
 801718a:	bf00      	nop
 801718c:	371c      	adds	r7, #28
 801718e:	46bd      	mov	sp, r7
 8017190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017194:	4770      	bx	lr
	...

08017198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017198:	b480      	push	{r7}
 801719a:	b085      	sub	sp, #20
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
 80171a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80171a8:	2b01      	cmp	r3, #1
 80171aa:	d101      	bne.n	80171b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80171ac:	2302      	movs	r3, #2
 80171ae:	e077      	b.n	80172a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	2201      	movs	r2, #1
 80171b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	2202      	movs	r2, #2
 80171bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	685b      	ldr	r3, [r3, #4]
 80171c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	689b      	ldr	r3, [r3, #8]
 80171ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	4a35      	ldr	r2, [pc, #212]	@ (80172ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80171d6:	4293      	cmp	r3, r2
 80171d8:	d004      	beq.n	80171e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	4a34      	ldr	r2, [pc, #208]	@ (80172b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80171e0:	4293      	cmp	r3, r2
 80171e2:	d108      	bne.n	80171f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80171ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	685b      	ldr	r3, [r3, #4]
 80171f0:	68fa      	ldr	r2, [r7, #12]
 80171f2:	4313      	orrs	r3, r2
 80171f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80171fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80171fe:	683b      	ldr	r3, [r7, #0]
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	68fa      	ldr	r2, [r7, #12]
 8017204:	4313      	orrs	r3, r2
 8017206:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	68fa      	ldr	r2, [r7, #12]
 801720e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	4a25      	ldr	r2, [pc, #148]	@ (80172ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017216:	4293      	cmp	r3, r2
 8017218:	d02c      	beq.n	8017274 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017222:	d027      	beq.n	8017274 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	4a22      	ldr	r2, [pc, #136]	@ (80172b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801722a:	4293      	cmp	r3, r2
 801722c:	d022      	beq.n	8017274 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	4a21      	ldr	r2, [pc, #132]	@ (80172b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8017234:	4293      	cmp	r3, r2
 8017236:	d01d      	beq.n	8017274 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	4a1f      	ldr	r2, [pc, #124]	@ (80172bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801723e:	4293      	cmp	r3, r2
 8017240:	d018      	beq.n	8017274 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	4a1a      	ldr	r2, [pc, #104]	@ (80172b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017248:	4293      	cmp	r3, r2
 801724a:	d013      	beq.n	8017274 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	4a1b      	ldr	r2, [pc, #108]	@ (80172c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8017252:	4293      	cmp	r3, r2
 8017254:	d00e      	beq.n	8017274 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	4a1a      	ldr	r2, [pc, #104]	@ (80172c4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 801725c:	4293      	cmp	r3, r2
 801725e:	d009      	beq.n	8017274 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	4a18      	ldr	r2, [pc, #96]	@ (80172c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8017266:	4293      	cmp	r3, r2
 8017268:	d004      	beq.n	8017274 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	4a17      	ldr	r2, [pc, #92]	@ (80172cc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8017270:	4293      	cmp	r3, r2
 8017272:	d10c      	bne.n	801728e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017274:	68bb      	ldr	r3, [r7, #8]
 8017276:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801727a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801727c:	683b      	ldr	r3, [r7, #0]
 801727e:	689b      	ldr	r3, [r3, #8]
 8017280:	68ba      	ldr	r2, [r7, #8]
 8017282:	4313      	orrs	r3, r2
 8017284:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	68ba      	ldr	r2, [r7, #8]
 801728c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	2201      	movs	r2, #1
 8017292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	2200      	movs	r2, #0
 801729a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801729e:	2300      	movs	r3, #0
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3714      	adds	r7, #20
 80172a4:	46bd      	mov	sp, r7
 80172a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172aa:	4770      	bx	lr
 80172ac:	40010000 	.word	0x40010000
 80172b0:	40010400 	.word	0x40010400
 80172b4:	40000400 	.word	0x40000400
 80172b8:	40000800 	.word	0x40000800
 80172bc:	40000c00 	.word	0x40000c00
 80172c0:	40001800 	.word	0x40001800
 80172c4:	40014000 	.word	0x40014000
 80172c8:	4000e000 	.word	0x4000e000
 80172cc:	4000e400 	.word	0x4000e400

080172d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80172d0:	b480      	push	{r7}
 80172d2:	b085      	sub	sp, #20
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
 80172d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80172da:	2300      	movs	r3, #0
 80172dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80172e4:	2b01      	cmp	r3, #1
 80172e6:	d101      	bne.n	80172ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80172e8:	2302      	movs	r3, #2
 80172ea:	e073      	b.n	80173d4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	2201      	movs	r2, #1
 80172f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80172fa:	683b      	ldr	r3, [r7, #0]
 80172fc:	68db      	ldr	r3, [r3, #12]
 80172fe:	4313      	orrs	r3, r2
 8017300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	689b      	ldr	r3, [r3, #8]
 801730c:	4313      	orrs	r3, r2
 801730e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017316:	683b      	ldr	r3, [r7, #0]
 8017318:	685b      	ldr	r3, [r3, #4]
 801731a:	4313      	orrs	r3, r2
 801731c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017324:	683b      	ldr	r3, [r7, #0]
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	4313      	orrs	r3, r2
 801732a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	691b      	ldr	r3, [r3, #16]
 8017336:	4313      	orrs	r3, r2
 8017338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017340:	683b      	ldr	r3, [r7, #0]
 8017342:	695b      	ldr	r3, [r3, #20]
 8017344:	4313      	orrs	r3, r2
 8017346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801734e:	683b      	ldr	r3, [r7, #0]
 8017350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017352:	4313      	orrs	r3, r2
 8017354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801735c:	683b      	ldr	r3, [r7, #0]
 801735e:	699b      	ldr	r3, [r3, #24]
 8017360:	041b      	lsls	r3, r3, #16
 8017362:	4313      	orrs	r3, r2
 8017364:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 801736c:	683b      	ldr	r3, [r7, #0]
 801736e:	69db      	ldr	r3, [r3, #28]
 8017370:	4313      	orrs	r3, r2
 8017372:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	4a19      	ldr	r2, [pc, #100]	@ (80173e0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 801737a:	4293      	cmp	r3, r2
 801737c:	d004      	beq.n	8017388 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	4a18      	ldr	r2, [pc, #96]	@ (80173e4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8017384:	4293      	cmp	r3, r2
 8017386:	d11c      	bne.n	80173c2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801738e:	683b      	ldr	r3, [r7, #0]
 8017390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017392:	051b      	lsls	r3, r3, #20
 8017394:	4313      	orrs	r3, r2
 8017396:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801739e:	683b      	ldr	r3, [r7, #0]
 80173a0:	6a1b      	ldr	r3, [r3, #32]
 80173a2:	4313      	orrs	r3, r2
 80173a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80173ac:	683b      	ldr	r3, [r7, #0]
 80173ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173b0:	4313      	orrs	r3, r2
 80173b2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80173ba:	683b      	ldr	r3, [r7, #0]
 80173bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173be:	4313      	orrs	r3, r2
 80173c0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	68fa      	ldr	r2, [r7, #12]
 80173c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	2200      	movs	r2, #0
 80173ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80173d2:	2300      	movs	r3, #0
}
 80173d4:	4618      	mov	r0, r3
 80173d6:	3714      	adds	r7, #20
 80173d8:	46bd      	mov	sp, r7
 80173da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173de:	4770      	bx	lr
 80173e0:	40010000 	.word	0x40010000
 80173e4:	40010400 	.word	0x40010400

080173e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80173e8:	b480      	push	{r7}
 80173ea:	b083      	sub	sp, #12
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80173f0:	bf00      	nop
 80173f2:	370c      	adds	r7, #12
 80173f4:	46bd      	mov	sp, r7
 80173f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173fa:	4770      	bx	lr

080173fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80173fc:	b480      	push	{r7}
 80173fe:	b083      	sub	sp, #12
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017404:	bf00      	nop
 8017406:	370c      	adds	r7, #12
 8017408:	46bd      	mov	sp, r7
 801740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740e:	4770      	bx	lr

08017410 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017410:	b480      	push	{r7}
 8017412:	b083      	sub	sp, #12
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017418:	bf00      	nop
 801741a:	370c      	adds	r7, #12
 801741c:	46bd      	mov	sp, r7
 801741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017422:	4770      	bx	lr

08017424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b082      	sub	sp, #8
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d101      	bne.n	8017436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017432:	2301      	movs	r3, #1
 8017434:	e042      	b.n	80174bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801743c:	2b00      	cmp	r3, #0
 801743e:	d106      	bne.n	801744e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	2200      	movs	r2, #0
 8017444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017448:	6878      	ldr	r0, [r7, #4]
 801744a:	f7f0 ffdf 	bl	800840c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	2224      	movs	r2, #36	@ 0x24
 8017452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	681a      	ldr	r2, [r3, #0]
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	f022 0201 	bic.w	r2, r2, #1
 8017464:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801746a:	2b00      	cmp	r3, #0
 801746c:	d002      	beq.n	8017474 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801746e:	6878      	ldr	r0, [r7, #4]
 8017470:	f001 fbf8 	bl	8018c64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017474:	6878      	ldr	r0, [r7, #4]
 8017476:	f000 fd89 	bl	8017f8c <UART_SetConfig>
 801747a:	4603      	mov	r3, r0
 801747c:	2b01      	cmp	r3, #1
 801747e:	d101      	bne.n	8017484 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017480:	2301      	movs	r3, #1
 8017482:	e01b      	b.n	80174bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	685a      	ldr	r2, [r3, #4]
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	689a      	ldr	r2, [r3, #8]
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80174a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	681a      	ldr	r2, [r3, #0]
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	f042 0201 	orr.w	r2, r2, #1
 80174b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80174b4:	6878      	ldr	r0, [r7, #4]
 80174b6:	f001 fc77 	bl	8018da8 <UART_CheckIdleState>
 80174ba:	4603      	mov	r3, r0
}
 80174bc:	4618      	mov	r0, r3
 80174be:	3708      	adds	r7, #8
 80174c0:	46bd      	mov	sp, r7
 80174c2:	bd80      	pop	{r7, pc}

080174c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b08a      	sub	sp, #40	@ 0x28
 80174c8:	af02      	add	r7, sp, #8
 80174ca:	60f8      	str	r0, [r7, #12]
 80174cc:	60b9      	str	r1, [r7, #8]
 80174ce:	603b      	str	r3, [r7, #0]
 80174d0:	4613      	mov	r3, r2
 80174d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80174da:	2b20      	cmp	r3, #32
 80174dc:	d17b      	bne.n	80175d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80174de:	68bb      	ldr	r3, [r7, #8]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d002      	beq.n	80174ea <HAL_UART_Transmit+0x26>
 80174e4:	88fb      	ldrh	r3, [r7, #6]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d101      	bne.n	80174ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80174ea:	2301      	movs	r3, #1
 80174ec:	e074      	b.n	80175d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	2200      	movs	r2, #0
 80174f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	2221      	movs	r2, #33	@ 0x21
 80174fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80174fe:	f7f1 f8a7 	bl	8008650 <HAL_GetTick>
 8017502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	88fa      	ldrh	r2, [r7, #6]
 8017508:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	88fa      	ldrh	r2, [r7, #6]
 8017510:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	689b      	ldr	r3, [r3, #8]
 8017518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801751c:	d108      	bne.n	8017530 <HAL_UART_Transmit+0x6c>
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	691b      	ldr	r3, [r3, #16]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d104      	bne.n	8017530 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017526:	2300      	movs	r3, #0
 8017528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	61bb      	str	r3, [r7, #24]
 801752e:	e003      	b.n	8017538 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017530:	68bb      	ldr	r3, [r7, #8]
 8017532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017534:	2300      	movs	r3, #0
 8017536:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017538:	e030      	b.n	801759c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801753a:	683b      	ldr	r3, [r7, #0]
 801753c:	9300      	str	r3, [sp, #0]
 801753e:	697b      	ldr	r3, [r7, #20]
 8017540:	2200      	movs	r2, #0
 8017542:	2180      	movs	r1, #128	@ 0x80
 8017544:	68f8      	ldr	r0, [r7, #12]
 8017546:	f001 fcd9 	bl	8018efc <UART_WaitOnFlagUntilTimeout>
 801754a:	4603      	mov	r3, r0
 801754c:	2b00      	cmp	r3, #0
 801754e:	d005      	beq.n	801755c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	2220      	movs	r2, #32
 8017554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8017558:	2303      	movs	r3, #3
 801755a:	e03d      	b.n	80175d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801755c:	69fb      	ldr	r3, [r7, #28]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d10b      	bne.n	801757a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017562:	69bb      	ldr	r3, [r7, #24]
 8017564:	881b      	ldrh	r3, [r3, #0]
 8017566:	461a      	mov	r2, r3
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017570:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017572:	69bb      	ldr	r3, [r7, #24]
 8017574:	3302      	adds	r3, #2
 8017576:	61bb      	str	r3, [r7, #24]
 8017578:	e007      	b.n	801758a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801757a:	69fb      	ldr	r3, [r7, #28]
 801757c:	781a      	ldrb	r2, [r3, #0]
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017584:	69fb      	ldr	r3, [r7, #28]
 8017586:	3301      	adds	r3, #1
 8017588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017590:	b29b      	uxth	r3, r3
 8017592:	3b01      	subs	r3, #1
 8017594:	b29a      	uxth	r2, r3
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80175a2:	b29b      	uxth	r3, r3
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d1c8      	bne.n	801753a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	9300      	str	r3, [sp, #0]
 80175ac:	697b      	ldr	r3, [r7, #20]
 80175ae:	2200      	movs	r2, #0
 80175b0:	2140      	movs	r1, #64	@ 0x40
 80175b2:	68f8      	ldr	r0, [r7, #12]
 80175b4:	f001 fca2 	bl	8018efc <UART_WaitOnFlagUntilTimeout>
 80175b8:	4603      	mov	r3, r0
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d005      	beq.n	80175ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	2220      	movs	r2, #32
 80175c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80175c6:	2303      	movs	r3, #3
 80175c8:	e006      	b.n	80175d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	2220      	movs	r2, #32
 80175ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80175d2:	2300      	movs	r3, #0
 80175d4:	e000      	b.n	80175d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80175d6:	2302      	movs	r3, #2
  }
}
 80175d8:	4618      	mov	r0, r3
 80175da:	3720      	adds	r7, #32
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}

080175e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80175e0:	b480      	push	{r7}
 80175e2:	b091      	sub	sp, #68	@ 0x44
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	60f8      	str	r0, [r7, #12]
 80175e8:	60b9      	str	r1, [r7, #8]
 80175ea:	4613      	mov	r3, r2
 80175ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80175f4:	2b20      	cmp	r3, #32
 80175f6:	d178      	bne.n	80176ea <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d002      	beq.n	8017604 <HAL_UART_Transmit_IT+0x24>
 80175fe:	88fb      	ldrh	r3, [r7, #6]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d101      	bne.n	8017608 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8017604:	2301      	movs	r3, #1
 8017606:	e071      	b.n	80176ec <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	68ba      	ldr	r2, [r7, #8]
 801760c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	88fa      	ldrh	r2, [r7, #6]
 8017612:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	88fa      	ldrh	r2, [r7, #6]
 801761a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	2200      	movs	r2, #0
 8017622:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	2200      	movs	r2, #0
 8017628:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	2221      	movs	r2, #33	@ 0x21
 8017630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801763c:	d12a      	bne.n	8017694 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	689b      	ldr	r3, [r3, #8]
 8017642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017646:	d107      	bne.n	8017658 <HAL_UART_Transmit_IT+0x78>
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	691b      	ldr	r3, [r3, #16]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d103      	bne.n	8017658 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	4a29      	ldr	r2, [pc, #164]	@ (80176f8 <HAL_UART_Transmit_IT+0x118>)
 8017654:	679a      	str	r2, [r3, #120]	@ 0x78
 8017656:	e002      	b.n	801765e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	4a28      	ldr	r2, [pc, #160]	@ (80176fc <HAL_UART_Transmit_IT+0x11c>)
 801765c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	3308      	adds	r3, #8
 8017664:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017668:	e853 3f00 	ldrex	r3, [r3]
 801766c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017670:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017674:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	3308      	adds	r3, #8
 801767c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801767e:	637a      	str	r2, [r7, #52]	@ 0x34
 8017680:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017682:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017686:	e841 2300 	strex	r3, r2, [r1]
 801768a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801768c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801768e:	2b00      	cmp	r3, #0
 8017690:	d1e5      	bne.n	801765e <HAL_UART_Transmit_IT+0x7e>
 8017692:	e028      	b.n	80176e6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	689b      	ldr	r3, [r3, #8]
 8017698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801769c:	d107      	bne.n	80176ae <HAL_UART_Transmit_IT+0xce>
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	691b      	ldr	r3, [r3, #16]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d103      	bne.n	80176ae <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	4a15      	ldr	r2, [pc, #84]	@ (8017700 <HAL_UART_Transmit_IT+0x120>)
 80176aa:	679a      	str	r2, [r3, #120]	@ 0x78
 80176ac:	e002      	b.n	80176b4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	4a14      	ldr	r2, [pc, #80]	@ (8017704 <HAL_UART_Transmit_IT+0x124>)
 80176b2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	e853 3f00 	ldrex	r3, [r3]
 80176c0:	613b      	str	r3, [r7, #16]
   return(result);
 80176c2:	693b      	ldr	r3, [r7, #16]
 80176c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80176c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	461a      	mov	r2, r3
 80176d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80176d2:	623b      	str	r3, [r7, #32]
 80176d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176d6:	69f9      	ldr	r1, [r7, #28]
 80176d8:	6a3a      	ldr	r2, [r7, #32]
 80176da:	e841 2300 	strex	r3, r2, [r1]
 80176de:	61bb      	str	r3, [r7, #24]
   return(result);
 80176e0:	69bb      	ldr	r3, [r7, #24]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d1e6      	bne.n	80176b4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80176e6:	2300      	movs	r3, #0
 80176e8:	e000      	b.n	80176ec <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80176ea:	2302      	movs	r3, #2
  }
}
 80176ec:	4618      	mov	r0, r3
 80176ee:	3744      	adds	r7, #68	@ 0x44
 80176f0:	46bd      	mov	sp, r7
 80176f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f6:	4770      	bx	lr
 80176f8:	08019567 	.word	0x08019567
 80176fc:	08019487 	.word	0x08019487
 8017700:	080193c5 	.word	0x080193c5
 8017704:	0801930d 	.word	0x0801930d

08017708 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b08a      	sub	sp, #40	@ 0x28
 801770c:	af00      	add	r7, sp, #0
 801770e:	60f8      	str	r0, [r7, #12]
 8017710:	60b9      	str	r1, [r7, #8]
 8017712:	4613      	mov	r3, r2
 8017714:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801771c:	2b20      	cmp	r3, #32
 801771e:	d137      	bne.n	8017790 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8017720:	68bb      	ldr	r3, [r7, #8]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d002      	beq.n	801772c <HAL_UART_Receive_IT+0x24>
 8017726:	88fb      	ldrh	r3, [r7, #6]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d101      	bne.n	8017730 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801772c:	2301      	movs	r3, #1
 801772e:	e030      	b.n	8017792 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	2200      	movs	r2, #0
 8017734:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	4a18      	ldr	r2, [pc, #96]	@ (801779c <HAL_UART_Receive_IT+0x94>)
 801773c:	4293      	cmp	r3, r2
 801773e:	d01f      	beq.n	8017780 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	685b      	ldr	r3, [r3, #4]
 8017746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801774a:	2b00      	cmp	r3, #0
 801774c:	d018      	beq.n	8017780 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017754:	697b      	ldr	r3, [r7, #20]
 8017756:	e853 3f00 	ldrex	r3, [r3]
 801775a:	613b      	str	r3, [r7, #16]
   return(result);
 801775c:	693b      	ldr	r3, [r7, #16]
 801775e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8017762:	627b      	str	r3, [r7, #36]	@ 0x24
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	461a      	mov	r2, r3
 801776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801776c:	623b      	str	r3, [r7, #32]
 801776e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017770:	69f9      	ldr	r1, [r7, #28]
 8017772:	6a3a      	ldr	r2, [r7, #32]
 8017774:	e841 2300 	strex	r3, r2, [r1]
 8017778:	61bb      	str	r3, [r7, #24]
   return(result);
 801777a:	69bb      	ldr	r3, [r7, #24]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d1e6      	bne.n	801774e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017780:	88fb      	ldrh	r3, [r7, #6]
 8017782:	461a      	mov	r2, r3
 8017784:	68b9      	ldr	r1, [r7, #8]
 8017786:	68f8      	ldr	r0, [r7, #12]
 8017788:	f001 fc26 	bl	8018fd8 <UART_Start_Receive_IT>
 801778c:	4603      	mov	r3, r0
 801778e:	e000      	b.n	8017792 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017790:	2302      	movs	r3, #2
  }
}
 8017792:	4618      	mov	r0, r3
 8017794:	3728      	adds	r7, #40	@ 0x28
 8017796:	46bd      	mov	sp, r7
 8017798:	bd80      	pop	{r7, pc}
 801779a:	bf00      	nop
 801779c:	58000c00 	.word	0x58000c00

080177a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80177a0:	b580      	push	{r7, lr}
 80177a2:	b0ba      	sub	sp, #232	@ 0xe8
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	69db      	ldr	r3, [r3, #28]
 80177ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	689b      	ldr	r3, [r3, #8]
 80177c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80177c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80177ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80177ce:	4013      	ands	r3, r2
 80177d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80177d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d11b      	bne.n	8017814 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80177dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80177e0:	f003 0320 	and.w	r3, r3, #32
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d015      	beq.n	8017814 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80177e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80177ec:	f003 0320 	and.w	r3, r3, #32
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d105      	bne.n	8017800 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80177f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80177f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d009      	beq.n	8017814 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017804:	2b00      	cmp	r3, #0
 8017806:	f000 8393 	beq.w	8017f30 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801780e:	6878      	ldr	r0, [r7, #4]
 8017810:	4798      	blx	r3
      }
      return;
 8017812:	e38d      	b.n	8017f30 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017818:	2b00      	cmp	r3, #0
 801781a:	f000 8123 	beq.w	8017a64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801781e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017822:	4b8d      	ldr	r3, [pc, #564]	@ (8017a58 <HAL_UART_IRQHandler+0x2b8>)
 8017824:	4013      	ands	r3, r2
 8017826:	2b00      	cmp	r3, #0
 8017828:	d106      	bne.n	8017838 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801782a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801782e:	4b8b      	ldr	r3, [pc, #556]	@ (8017a5c <HAL_UART_IRQHandler+0x2bc>)
 8017830:	4013      	ands	r3, r2
 8017832:	2b00      	cmp	r3, #0
 8017834:	f000 8116 	beq.w	8017a64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801783c:	f003 0301 	and.w	r3, r3, #1
 8017840:	2b00      	cmp	r3, #0
 8017842:	d011      	beq.n	8017868 <HAL_UART_IRQHandler+0xc8>
 8017844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801784c:	2b00      	cmp	r3, #0
 801784e:	d00b      	beq.n	8017868 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	2201      	movs	r2, #1
 8017856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801785e:	f043 0201 	orr.w	r2, r3, #1
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801786c:	f003 0302 	and.w	r3, r3, #2
 8017870:	2b00      	cmp	r3, #0
 8017872:	d011      	beq.n	8017898 <HAL_UART_IRQHandler+0xf8>
 8017874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017878:	f003 0301 	and.w	r3, r3, #1
 801787c:	2b00      	cmp	r3, #0
 801787e:	d00b      	beq.n	8017898 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	2202      	movs	r2, #2
 8017886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801788e:	f043 0204 	orr.w	r2, r3, #4
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801789c:	f003 0304 	and.w	r3, r3, #4
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d011      	beq.n	80178c8 <HAL_UART_IRQHandler+0x128>
 80178a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80178a8:	f003 0301 	and.w	r3, r3, #1
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d00b      	beq.n	80178c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	2204      	movs	r2, #4
 80178b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80178be:	f043 0202 	orr.w	r2, r3, #2
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80178c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80178cc:	f003 0308 	and.w	r3, r3, #8
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d017      	beq.n	8017904 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80178d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80178d8:	f003 0320 	and.w	r3, r3, #32
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d105      	bne.n	80178ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80178e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80178e4:	4b5c      	ldr	r3, [pc, #368]	@ (8017a58 <HAL_UART_IRQHandler+0x2b8>)
 80178e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d00b      	beq.n	8017904 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	2208      	movs	r2, #8
 80178f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80178fa:	f043 0208 	orr.w	r2, r3, #8
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801790c:	2b00      	cmp	r3, #0
 801790e:	d012      	beq.n	8017936 <HAL_UART_IRQHandler+0x196>
 8017910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017914:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8017918:	2b00      	cmp	r3, #0
 801791a:	d00c      	beq.n	8017936 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801792c:	f043 0220 	orr.w	r2, r3, #32
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801793c:	2b00      	cmp	r3, #0
 801793e:	f000 82f9 	beq.w	8017f34 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017946:	f003 0320 	and.w	r3, r3, #32
 801794a:	2b00      	cmp	r3, #0
 801794c:	d013      	beq.n	8017976 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801794e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017952:	f003 0320 	and.w	r3, r3, #32
 8017956:	2b00      	cmp	r3, #0
 8017958:	d105      	bne.n	8017966 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801795a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801795e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017962:	2b00      	cmp	r3, #0
 8017964:	d007      	beq.n	8017976 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801796a:	2b00      	cmp	r3, #0
 801796c:	d003      	beq.n	8017976 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017972:	6878      	ldr	r0, [r7, #4]
 8017974:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801797c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	689b      	ldr	r3, [r3, #8]
 8017986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801798a:	2b40      	cmp	r3, #64	@ 0x40
 801798c:	d005      	beq.n	801799a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801798e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017992:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017996:	2b00      	cmp	r3, #0
 8017998:	d054      	beq.n	8017a44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801799a:	6878      	ldr	r0, [r7, #4]
 801799c:	f001 fc3e 	bl	801921c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	689b      	ldr	r3, [r3, #8]
 80179a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80179aa:	2b40      	cmp	r3, #64	@ 0x40
 80179ac:	d146      	bne.n	8017a3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	3308      	adds	r3, #8
 80179b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80179bc:	e853 3f00 	ldrex	r3, [r3]
 80179c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80179c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80179c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80179cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	3308      	adds	r3, #8
 80179d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80179da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80179de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80179e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80179ea:	e841 2300 	strex	r3, r2, [r1]
 80179ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80179f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d1d9      	bne.n	80179ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d017      	beq.n	8017a34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017a0a:	4a15      	ldr	r2, [pc, #84]	@ (8017a60 <HAL_UART_IRQHandler+0x2c0>)
 8017a0c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017a14:	4618      	mov	r0, r3
 8017a16:	f7f4 f831 	bl	800ba7c <HAL_DMA_Abort_IT>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d019      	beq.n	8017a54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017a28:	687a      	ldr	r2, [r7, #4]
 8017a2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8017a2e:	4610      	mov	r0, r2
 8017a30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017a32:	e00f      	b.n	8017a54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017a34:	6878      	ldr	r0, [r7, #4]
 8017a36:	f000 fa93 	bl	8017f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017a3a:	e00b      	b.n	8017a54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017a3c:	6878      	ldr	r0, [r7, #4]
 8017a3e:	f000 fa8f 	bl	8017f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017a42:	e007      	b.n	8017a54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017a44:	6878      	ldr	r0, [r7, #4]
 8017a46:	f000 fa8b 	bl	8017f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8017a52:	e26f      	b.n	8017f34 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017a54:	bf00      	nop
    return;
 8017a56:	e26d      	b.n	8017f34 <HAL_UART_IRQHandler+0x794>
 8017a58:	10000001 	.word	0x10000001
 8017a5c:	04000120 	.word	0x04000120
 8017a60:	080192e9 	.word	0x080192e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a68:	2b01      	cmp	r3, #1
 8017a6a:	f040 8203 	bne.w	8017e74 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8017a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017a72:	f003 0310 	and.w	r3, r3, #16
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	f000 81fc 	beq.w	8017e74 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017a80:	f003 0310 	and.w	r3, r3, #16
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	f000 81f5 	beq.w	8017e74 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	2210      	movs	r2, #16
 8017a90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	689b      	ldr	r3, [r3, #8]
 8017a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017a9c:	2b40      	cmp	r3, #64	@ 0x40
 8017a9e:	f040 816d 	bne.w	8017d7c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	4aa4      	ldr	r2, [pc, #656]	@ (8017d3c <HAL_UART_IRQHandler+0x59c>)
 8017aac:	4293      	cmp	r3, r2
 8017aae:	d068      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	4aa1      	ldr	r2, [pc, #644]	@ (8017d40 <HAL_UART_IRQHandler+0x5a0>)
 8017aba:	4293      	cmp	r3, r2
 8017abc:	d061      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	4a9f      	ldr	r2, [pc, #636]	@ (8017d44 <HAL_UART_IRQHandler+0x5a4>)
 8017ac8:	4293      	cmp	r3, r2
 8017aca:	d05a      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	4a9c      	ldr	r2, [pc, #624]	@ (8017d48 <HAL_UART_IRQHandler+0x5a8>)
 8017ad6:	4293      	cmp	r3, r2
 8017ad8:	d053      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	4a9a      	ldr	r2, [pc, #616]	@ (8017d4c <HAL_UART_IRQHandler+0x5ac>)
 8017ae4:	4293      	cmp	r3, r2
 8017ae6:	d04c      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	4a97      	ldr	r2, [pc, #604]	@ (8017d50 <HAL_UART_IRQHandler+0x5b0>)
 8017af2:	4293      	cmp	r3, r2
 8017af4:	d045      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	4a95      	ldr	r2, [pc, #596]	@ (8017d54 <HAL_UART_IRQHandler+0x5b4>)
 8017b00:	4293      	cmp	r3, r2
 8017b02:	d03e      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	4a92      	ldr	r2, [pc, #584]	@ (8017d58 <HAL_UART_IRQHandler+0x5b8>)
 8017b0e:	4293      	cmp	r3, r2
 8017b10:	d037      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	4a90      	ldr	r2, [pc, #576]	@ (8017d5c <HAL_UART_IRQHandler+0x5bc>)
 8017b1c:	4293      	cmp	r3, r2
 8017b1e:	d030      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	4a8d      	ldr	r2, [pc, #564]	@ (8017d60 <HAL_UART_IRQHandler+0x5c0>)
 8017b2a:	4293      	cmp	r3, r2
 8017b2c:	d029      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	4a8b      	ldr	r2, [pc, #556]	@ (8017d64 <HAL_UART_IRQHandler+0x5c4>)
 8017b38:	4293      	cmp	r3, r2
 8017b3a:	d022      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	4a88      	ldr	r2, [pc, #544]	@ (8017d68 <HAL_UART_IRQHandler+0x5c8>)
 8017b46:	4293      	cmp	r3, r2
 8017b48:	d01b      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	4a86      	ldr	r2, [pc, #536]	@ (8017d6c <HAL_UART_IRQHandler+0x5cc>)
 8017b54:	4293      	cmp	r3, r2
 8017b56:	d014      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	4a83      	ldr	r2, [pc, #524]	@ (8017d70 <HAL_UART_IRQHandler+0x5d0>)
 8017b62:	4293      	cmp	r3, r2
 8017b64:	d00d      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	4a81      	ldr	r2, [pc, #516]	@ (8017d74 <HAL_UART_IRQHandler+0x5d4>)
 8017b70:	4293      	cmp	r3, r2
 8017b72:	d006      	beq.n	8017b82 <HAL_UART_IRQHandler+0x3e2>
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	4a7e      	ldr	r2, [pc, #504]	@ (8017d78 <HAL_UART_IRQHandler+0x5d8>)
 8017b7e:	4293      	cmp	r3, r2
 8017b80:	d106      	bne.n	8017b90 <HAL_UART_IRQHandler+0x3f0>
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	685b      	ldr	r3, [r3, #4]
 8017b8c:	b29b      	uxth	r3, r3
 8017b8e:	e005      	b.n	8017b9c <HAL_UART_IRQHandler+0x3fc>
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	685b      	ldr	r3, [r3, #4]
 8017b9a:	b29b      	uxth	r3, r3
 8017b9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017ba0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	f000 80ad 	beq.w	8017d04 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017bb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017bb4:	429a      	cmp	r2, r3
 8017bb6:	f080 80a5 	bcs.w	8017d04 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017bc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017bca:	69db      	ldr	r3, [r3, #28]
 8017bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017bd0:	f000 8087 	beq.w	8017ce2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017be0:	e853 3f00 	ldrex	r3, [r3]
 8017be4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8017be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	461a      	mov	r2, r3
 8017bfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017bfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8017c02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8017c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8017c0e:	e841 2300 	strex	r3, r2, [r1]
 8017c12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8017c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d1da      	bne.n	8017bd4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	3308      	adds	r3, #8
 8017c24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017c28:	e853 3f00 	ldrex	r3, [r3]
 8017c2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8017c2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017c30:	f023 0301 	bic.w	r3, r3, #1
 8017c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	3308      	adds	r3, #8
 8017c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8017c42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8017c46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8017c4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017c4e:	e841 2300 	strex	r3, r2, [r1]
 8017c52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8017c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d1e1      	bne.n	8017c1e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	3308      	adds	r3, #8
 8017c60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017c64:	e853 3f00 	ldrex	r3, [r3]
 8017c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8017c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	3308      	adds	r3, #8
 8017c7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8017c7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8017c80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8017c84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8017c86:	e841 2300 	strex	r3, r2, [r1]
 8017c8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8017c8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d1e3      	bne.n	8017c5a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	2220      	movs	r2, #32
 8017c96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ca8:	e853 3f00 	ldrex	r3, [r3]
 8017cac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8017cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017cb0:	f023 0310 	bic.w	r3, r3, #16
 8017cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	461a      	mov	r2, r3
 8017cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017cc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017cc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017cc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017cca:	e841 2300 	strex	r3, r2, [r1]
 8017cce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8017cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d1e4      	bne.n	8017ca0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017cdc:	4618      	mov	r0, r3
 8017cde:	f7f3 fbaf 	bl	800b440 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	2202      	movs	r2, #2
 8017ce6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017cf4:	b29b      	uxth	r3, r3
 8017cf6:	1ad3      	subs	r3, r2, r3
 8017cf8:	b29b      	uxth	r3, r3
 8017cfa:	4619      	mov	r1, r3
 8017cfc:	6878      	ldr	r0, [r7, #4]
 8017cfe:	f000 f939 	bl	8017f74 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8017d02:	e119      	b.n	8017f38 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	f040 8112 	bne.w	8017f38 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d1a:	69db      	ldr	r3, [r3, #28]
 8017d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017d20:	f040 810a 	bne.w	8017f38 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	2202      	movs	r2, #2
 8017d28:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017d30:	4619      	mov	r1, r3
 8017d32:	6878      	ldr	r0, [r7, #4]
 8017d34:	f000 f91e 	bl	8017f74 <HAL_UARTEx_RxEventCallback>
      return;
 8017d38:	e0fe      	b.n	8017f38 <HAL_UART_IRQHandler+0x798>
 8017d3a:	bf00      	nop
 8017d3c:	40020010 	.word	0x40020010
 8017d40:	40020028 	.word	0x40020028
 8017d44:	40020040 	.word	0x40020040
 8017d48:	40020058 	.word	0x40020058
 8017d4c:	40020070 	.word	0x40020070
 8017d50:	40020088 	.word	0x40020088
 8017d54:	400200a0 	.word	0x400200a0
 8017d58:	400200b8 	.word	0x400200b8
 8017d5c:	40020410 	.word	0x40020410
 8017d60:	40020428 	.word	0x40020428
 8017d64:	40020440 	.word	0x40020440
 8017d68:	40020458 	.word	0x40020458
 8017d6c:	40020470 	.word	0x40020470
 8017d70:	40020488 	.word	0x40020488
 8017d74:	400204a0 	.word	0x400204a0
 8017d78:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017d88:	b29b      	uxth	r3, r3
 8017d8a:	1ad3      	subs	r3, r2, r3
 8017d8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017d96:	b29b      	uxth	r3, r3
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	f000 80cf 	beq.w	8017f3c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8017d9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	f000 80ca 	beq.w	8017f3c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017db0:	e853 3f00 	ldrex	r3, [r3]
 8017db4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017db8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017dbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	461a      	mov	r2, r3
 8017dc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8017dcc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017dd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017dd2:	e841 2300 	strex	r3, r2, [r1]
 8017dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d1e4      	bne.n	8017da8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	3308      	adds	r3, #8
 8017de4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017de8:	e853 3f00 	ldrex	r3, [r3]
 8017dec:	623b      	str	r3, [r7, #32]
   return(result);
 8017dee:	6a3a      	ldr	r2, [r7, #32]
 8017df0:	4b55      	ldr	r3, [pc, #340]	@ (8017f48 <HAL_UART_IRQHandler+0x7a8>)
 8017df2:	4013      	ands	r3, r2
 8017df4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	3308      	adds	r3, #8
 8017dfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8017e02:	633a      	str	r2, [r7, #48]	@ 0x30
 8017e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017e08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017e0a:	e841 2300 	strex	r3, r2, [r1]
 8017e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d1e3      	bne.n	8017dde <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	2220      	movs	r2, #32
 8017e1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	2200      	movs	r2, #0
 8017e22:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	2200      	movs	r2, #0
 8017e28:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e30:	693b      	ldr	r3, [r7, #16]
 8017e32:	e853 3f00 	ldrex	r3, [r3]
 8017e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	f023 0310 	bic.w	r3, r3, #16
 8017e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	461a      	mov	r2, r3
 8017e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8017e4c:	61fb      	str	r3, [r7, #28]
 8017e4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e50:	69b9      	ldr	r1, [r7, #24]
 8017e52:	69fa      	ldr	r2, [r7, #28]
 8017e54:	e841 2300 	strex	r3, r2, [r1]
 8017e58:	617b      	str	r3, [r7, #20]
   return(result);
 8017e5a:	697b      	ldr	r3, [r7, #20]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d1e4      	bne.n	8017e2a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	2202      	movs	r2, #2
 8017e64:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017e66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017e6a:	4619      	mov	r1, r3
 8017e6c:	6878      	ldr	r0, [r7, #4]
 8017e6e:	f000 f881 	bl	8017f74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017e72:	e063      	b.n	8017f3c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d00e      	beq.n	8017e9e <HAL_UART_IRQHandler+0x6fe>
 8017e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017e84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d008      	beq.n	8017e9e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8017e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8017e96:	6878      	ldr	r0, [r7, #4]
 8017e98:	f002 f926 	bl	801a0e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017e9c:	e051      	b.n	8017f42 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8017e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d014      	beq.n	8017ed4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8017eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d105      	bne.n	8017ec2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8017eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017eba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d008      	beq.n	8017ed4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d03a      	beq.n	8017f40 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017ece:	6878      	ldr	r0, [r7, #4]
 8017ed0:	4798      	blx	r3
    }
    return;
 8017ed2:	e035      	b.n	8017f40 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d009      	beq.n	8017ef4 <HAL_UART_IRQHandler+0x754>
 8017ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d003      	beq.n	8017ef4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8017eec:	6878      	ldr	r0, [r7, #4]
 8017eee:	f001 fbaf 	bl	8019650 <UART_EndTransmit_IT>
    return;
 8017ef2:	e026      	b.n	8017f42 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8017ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ef8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d009      	beq.n	8017f14 <HAL_UART_IRQHandler+0x774>
 8017f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017f04:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d003      	beq.n	8017f14 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8017f0c:	6878      	ldr	r0, [r7, #4]
 8017f0e:	f002 f8ff 	bl	801a110 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017f12:	e016      	b.n	8017f42 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8017f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d010      	beq.n	8017f42 <HAL_UART_IRQHandler+0x7a2>
 8017f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	da0c      	bge.n	8017f42 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8017f28:	6878      	ldr	r0, [r7, #4]
 8017f2a:	f002 f8e7 	bl	801a0fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017f2e:	e008      	b.n	8017f42 <HAL_UART_IRQHandler+0x7a2>
      return;
 8017f30:	bf00      	nop
 8017f32:	e006      	b.n	8017f42 <HAL_UART_IRQHandler+0x7a2>
    return;
 8017f34:	bf00      	nop
 8017f36:	e004      	b.n	8017f42 <HAL_UART_IRQHandler+0x7a2>
      return;
 8017f38:	bf00      	nop
 8017f3a:	e002      	b.n	8017f42 <HAL_UART_IRQHandler+0x7a2>
      return;
 8017f3c:	bf00      	nop
 8017f3e:	e000      	b.n	8017f42 <HAL_UART_IRQHandler+0x7a2>
    return;
 8017f40:	bf00      	nop
  }
}
 8017f42:	37e8      	adds	r7, #232	@ 0xe8
 8017f44:	46bd      	mov	sp, r7
 8017f46:	bd80      	pop	{r7, pc}
 8017f48:	effffffe 	.word	0xeffffffe

08017f4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017f4c:	b480      	push	{r7}
 8017f4e:	b083      	sub	sp, #12
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017f54:	bf00      	nop
 8017f56:	370c      	adds	r7, #12
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5e:	4770      	bx	lr

08017f60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017f60:	b480      	push	{r7}
 8017f62:	b083      	sub	sp, #12
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8017f68:	bf00      	nop
 8017f6a:	370c      	adds	r7, #12
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f72:	4770      	bx	lr

08017f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017f74:	b480      	push	{r7}
 8017f76:	b083      	sub	sp, #12
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
 8017f7c:	460b      	mov	r3, r1
 8017f7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017f80:	bf00      	nop
 8017f82:	370c      	adds	r7, #12
 8017f84:	46bd      	mov	sp, r7
 8017f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8a:	4770      	bx	lr

08017f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017f90:	b092      	sub	sp, #72	@ 0x48
 8017f92:	af00      	add	r7, sp, #0
 8017f94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017f96:	2300      	movs	r3, #0
 8017f98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017f9c:	697b      	ldr	r3, [r7, #20]
 8017f9e:	689a      	ldr	r2, [r3, #8]
 8017fa0:	697b      	ldr	r3, [r7, #20]
 8017fa2:	691b      	ldr	r3, [r3, #16]
 8017fa4:	431a      	orrs	r2, r3
 8017fa6:	697b      	ldr	r3, [r7, #20]
 8017fa8:	695b      	ldr	r3, [r3, #20]
 8017faa:	431a      	orrs	r2, r3
 8017fac:	697b      	ldr	r3, [r7, #20]
 8017fae:	69db      	ldr	r3, [r3, #28]
 8017fb0:	4313      	orrs	r3, r2
 8017fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017fb4:	697b      	ldr	r3, [r7, #20]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	681a      	ldr	r2, [r3, #0]
 8017fba:	4bbe      	ldr	r3, [pc, #760]	@ (80182b4 <UART_SetConfig+0x328>)
 8017fbc:	4013      	ands	r3, r2
 8017fbe:	697a      	ldr	r2, [r7, #20]
 8017fc0:	6812      	ldr	r2, [r2, #0]
 8017fc2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017fc4:	430b      	orrs	r3, r1
 8017fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017fc8:	697b      	ldr	r3, [r7, #20]
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	685b      	ldr	r3, [r3, #4]
 8017fce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8017fd2:	697b      	ldr	r3, [r7, #20]
 8017fd4:	68da      	ldr	r2, [r3, #12]
 8017fd6:	697b      	ldr	r3, [r7, #20]
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	430a      	orrs	r2, r1
 8017fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017fde:	697b      	ldr	r3, [r7, #20]
 8017fe0:	699b      	ldr	r3, [r3, #24]
 8017fe2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017fe4:	697b      	ldr	r3, [r7, #20]
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	4ab3      	ldr	r2, [pc, #716]	@ (80182b8 <UART_SetConfig+0x32c>)
 8017fea:	4293      	cmp	r3, r2
 8017fec:	d004      	beq.n	8017ff8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017fee:	697b      	ldr	r3, [r7, #20]
 8017ff0:	6a1b      	ldr	r3, [r3, #32]
 8017ff2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017ff4:	4313      	orrs	r3, r2
 8017ff6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017ff8:	697b      	ldr	r3, [r7, #20]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	689a      	ldr	r2, [r3, #8]
 8017ffe:	4baf      	ldr	r3, [pc, #700]	@ (80182bc <UART_SetConfig+0x330>)
 8018000:	4013      	ands	r3, r2
 8018002:	697a      	ldr	r2, [r7, #20]
 8018004:	6812      	ldr	r2, [r2, #0]
 8018006:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018008:	430b      	orrs	r3, r1
 801800a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801800c:	697b      	ldr	r3, [r7, #20]
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018012:	f023 010f 	bic.w	r1, r3, #15
 8018016:	697b      	ldr	r3, [r7, #20]
 8018018:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801801a:	697b      	ldr	r3, [r7, #20]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	430a      	orrs	r2, r1
 8018020:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018022:	697b      	ldr	r3, [r7, #20]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	4aa6      	ldr	r2, [pc, #664]	@ (80182c0 <UART_SetConfig+0x334>)
 8018028:	4293      	cmp	r3, r2
 801802a:	d177      	bne.n	801811c <UART_SetConfig+0x190>
 801802c:	4ba5      	ldr	r3, [pc, #660]	@ (80182c4 <UART_SetConfig+0x338>)
 801802e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018030:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018034:	2b28      	cmp	r3, #40	@ 0x28
 8018036:	d86d      	bhi.n	8018114 <UART_SetConfig+0x188>
 8018038:	a201      	add	r2, pc, #4	@ (adr r2, 8018040 <UART_SetConfig+0xb4>)
 801803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801803e:	bf00      	nop
 8018040:	080180e5 	.word	0x080180e5
 8018044:	08018115 	.word	0x08018115
 8018048:	08018115 	.word	0x08018115
 801804c:	08018115 	.word	0x08018115
 8018050:	08018115 	.word	0x08018115
 8018054:	08018115 	.word	0x08018115
 8018058:	08018115 	.word	0x08018115
 801805c:	08018115 	.word	0x08018115
 8018060:	080180ed 	.word	0x080180ed
 8018064:	08018115 	.word	0x08018115
 8018068:	08018115 	.word	0x08018115
 801806c:	08018115 	.word	0x08018115
 8018070:	08018115 	.word	0x08018115
 8018074:	08018115 	.word	0x08018115
 8018078:	08018115 	.word	0x08018115
 801807c:	08018115 	.word	0x08018115
 8018080:	080180f5 	.word	0x080180f5
 8018084:	08018115 	.word	0x08018115
 8018088:	08018115 	.word	0x08018115
 801808c:	08018115 	.word	0x08018115
 8018090:	08018115 	.word	0x08018115
 8018094:	08018115 	.word	0x08018115
 8018098:	08018115 	.word	0x08018115
 801809c:	08018115 	.word	0x08018115
 80180a0:	080180fd 	.word	0x080180fd
 80180a4:	08018115 	.word	0x08018115
 80180a8:	08018115 	.word	0x08018115
 80180ac:	08018115 	.word	0x08018115
 80180b0:	08018115 	.word	0x08018115
 80180b4:	08018115 	.word	0x08018115
 80180b8:	08018115 	.word	0x08018115
 80180bc:	08018115 	.word	0x08018115
 80180c0:	08018105 	.word	0x08018105
 80180c4:	08018115 	.word	0x08018115
 80180c8:	08018115 	.word	0x08018115
 80180cc:	08018115 	.word	0x08018115
 80180d0:	08018115 	.word	0x08018115
 80180d4:	08018115 	.word	0x08018115
 80180d8:	08018115 	.word	0x08018115
 80180dc:	08018115 	.word	0x08018115
 80180e0:	0801810d 	.word	0x0801810d
 80180e4:	2301      	movs	r3, #1
 80180e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80180ea:	e326      	b.n	801873a <UART_SetConfig+0x7ae>
 80180ec:	2304      	movs	r3, #4
 80180ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80180f2:	e322      	b.n	801873a <UART_SetConfig+0x7ae>
 80180f4:	2308      	movs	r3, #8
 80180f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80180fa:	e31e      	b.n	801873a <UART_SetConfig+0x7ae>
 80180fc:	2310      	movs	r3, #16
 80180fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018102:	e31a      	b.n	801873a <UART_SetConfig+0x7ae>
 8018104:	2320      	movs	r3, #32
 8018106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801810a:	e316      	b.n	801873a <UART_SetConfig+0x7ae>
 801810c:	2340      	movs	r3, #64	@ 0x40
 801810e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018112:	e312      	b.n	801873a <UART_SetConfig+0x7ae>
 8018114:	2380      	movs	r3, #128	@ 0x80
 8018116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801811a:	e30e      	b.n	801873a <UART_SetConfig+0x7ae>
 801811c:	697b      	ldr	r3, [r7, #20]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	4a69      	ldr	r2, [pc, #420]	@ (80182c8 <UART_SetConfig+0x33c>)
 8018122:	4293      	cmp	r3, r2
 8018124:	d130      	bne.n	8018188 <UART_SetConfig+0x1fc>
 8018126:	4b67      	ldr	r3, [pc, #412]	@ (80182c4 <UART_SetConfig+0x338>)
 8018128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801812a:	f003 0307 	and.w	r3, r3, #7
 801812e:	2b05      	cmp	r3, #5
 8018130:	d826      	bhi.n	8018180 <UART_SetConfig+0x1f4>
 8018132:	a201      	add	r2, pc, #4	@ (adr r2, 8018138 <UART_SetConfig+0x1ac>)
 8018134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018138:	08018151 	.word	0x08018151
 801813c:	08018159 	.word	0x08018159
 8018140:	08018161 	.word	0x08018161
 8018144:	08018169 	.word	0x08018169
 8018148:	08018171 	.word	0x08018171
 801814c:	08018179 	.word	0x08018179
 8018150:	2300      	movs	r3, #0
 8018152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018156:	e2f0      	b.n	801873a <UART_SetConfig+0x7ae>
 8018158:	2304      	movs	r3, #4
 801815a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801815e:	e2ec      	b.n	801873a <UART_SetConfig+0x7ae>
 8018160:	2308      	movs	r3, #8
 8018162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018166:	e2e8      	b.n	801873a <UART_SetConfig+0x7ae>
 8018168:	2310      	movs	r3, #16
 801816a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801816e:	e2e4      	b.n	801873a <UART_SetConfig+0x7ae>
 8018170:	2320      	movs	r3, #32
 8018172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018176:	e2e0      	b.n	801873a <UART_SetConfig+0x7ae>
 8018178:	2340      	movs	r3, #64	@ 0x40
 801817a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801817e:	e2dc      	b.n	801873a <UART_SetConfig+0x7ae>
 8018180:	2380      	movs	r3, #128	@ 0x80
 8018182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018186:	e2d8      	b.n	801873a <UART_SetConfig+0x7ae>
 8018188:	697b      	ldr	r3, [r7, #20]
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	4a4f      	ldr	r2, [pc, #316]	@ (80182cc <UART_SetConfig+0x340>)
 801818e:	4293      	cmp	r3, r2
 8018190:	d130      	bne.n	80181f4 <UART_SetConfig+0x268>
 8018192:	4b4c      	ldr	r3, [pc, #304]	@ (80182c4 <UART_SetConfig+0x338>)
 8018194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018196:	f003 0307 	and.w	r3, r3, #7
 801819a:	2b05      	cmp	r3, #5
 801819c:	d826      	bhi.n	80181ec <UART_SetConfig+0x260>
 801819e:	a201      	add	r2, pc, #4	@ (adr r2, 80181a4 <UART_SetConfig+0x218>)
 80181a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181a4:	080181bd 	.word	0x080181bd
 80181a8:	080181c5 	.word	0x080181c5
 80181ac:	080181cd 	.word	0x080181cd
 80181b0:	080181d5 	.word	0x080181d5
 80181b4:	080181dd 	.word	0x080181dd
 80181b8:	080181e5 	.word	0x080181e5
 80181bc:	2300      	movs	r3, #0
 80181be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80181c2:	e2ba      	b.n	801873a <UART_SetConfig+0x7ae>
 80181c4:	2304      	movs	r3, #4
 80181c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80181ca:	e2b6      	b.n	801873a <UART_SetConfig+0x7ae>
 80181cc:	2308      	movs	r3, #8
 80181ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80181d2:	e2b2      	b.n	801873a <UART_SetConfig+0x7ae>
 80181d4:	2310      	movs	r3, #16
 80181d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80181da:	e2ae      	b.n	801873a <UART_SetConfig+0x7ae>
 80181dc:	2320      	movs	r3, #32
 80181de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80181e2:	e2aa      	b.n	801873a <UART_SetConfig+0x7ae>
 80181e4:	2340      	movs	r3, #64	@ 0x40
 80181e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80181ea:	e2a6      	b.n	801873a <UART_SetConfig+0x7ae>
 80181ec:	2380      	movs	r3, #128	@ 0x80
 80181ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80181f2:	e2a2      	b.n	801873a <UART_SetConfig+0x7ae>
 80181f4:	697b      	ldr	r3, [r7, #20]
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	4a35      	ldr	r2, [pc, #212]	@ (80182d0 <UART_SetConfig+0x344>)
 80181fa:	4293      	cmp	r3, r2
 80181fc:	d130      	bne.n	8018260 <UART_SetConfig+0x2d4>
 80181fe:	4b31      	ldr	r3, [pc, #196]	@ (80182c4 <UART_SetConfig+0x338>)
 8018200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018202:	f003 0307 	and.w	r3, r3, #7
 8018206:	2b05      	cmp	r3, #5
 8018208:	d826      	bhi.n	8018258 <UART_SetConfig+0x2cc>
 801820a:	a201      	add	r2, pc, #4	@ (adr r2, 8018210 <UART_SetConfig+0x284>)
 801820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018210:	08018229 	.word	0x08018229
 8018214:	08018231 	.word	0x08018231
 8018218:	08018239 	.word	0x08018239
 801821c:	08018241 	.word	0x08018241
 8018220:	08018249 	.word	0x08018249
 8018224:	08018251 	.word	0x08018251
 8018228:	2300      	movs	r3, #0
 801822a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801822e:	e284      	b.n	801873a <UART_SetConfig+0x7ae>
 8018230:	2304      	movs	r3, #4
 8018232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018236:	e280      	b.n	801873a <UART_SetConfig+0x7ae>
 8018238:	2308      	movs	r3, #8
 801823a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801823e:	e27c      	b.n	801873a <UART_SetConfig+0x7ae>
 8018240:	2310      	movs	r3, #16
 8018242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018246:	e278      	b.n	801873a <UART_SetConfig+0x7ae>
 8018248:	2320      	movs	r3, #32
 801824a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801824e:	e274      	b.n	801873a <UART_SetConfig+0x7ae>
 8018250:	2340      	movs	r3, #64	@ 0x40
 8018252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018256:	e270      	b.n	801873a <UART_SetConfig+0x7ae>
 8018258:	2380      	movs	r3, #128	@ 0x80
 801825a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801825e:	e26c      	b.n	801873a <UART_SetConfig+0x7ae>
 8018260:	697b      	ldr	r3, [r7, #20]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	4a1b      	ldr	r2, [pc, #108]	@ (80182d4 <UART_SetConfig+0x348>)
 8018266:	4293      	cmp	r3, r2
 8018268:	d142      	bne.n	80182f0 <UART_SetConfig+0x364>
 801826a:	4b16      	ldr	r3, [pc, #88]	@ (80182c4 <UART_SetConfig+0x338>)
 801826c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801826e:	f003 0307 	and.w	r3, r3, #7
 8018272:	2b05      	cmp	r3, #5
 8018274:	d838      	bhi.n	80182e8 <UART_SetConfig+0x35c>
 8018276:	a201      	add	r2, pc, #4	@ (adr r2, 801827c <UART_SetConfig+0x2f0>)
 8018278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801827c:	08018295 	.word	0x08018295
 8018280:	0801829d 	.word	0x0801829d
 8018284:	080182a5 	.word	0x080182a5
 8018288:	080182ad 	.word	0x080182ad
 801828c:	080182d9 	.word	0x080182d9
 8018290:	080182e1 	.word	0x080182e1
 8018294:	2300      	movs	r3, #0
 8018296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801829a:	e24e      	b.n	801873a <UART_SetConfig+0x7ae>
 801829c:	2304      	movs	r3, #4
 801829e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182a2:	e24a      	b.n	801873a <UART_SetConfig+0x7ae>
 80182a4:	2308      	movs	r3, #8
 80182a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182aa:	e246      	b.n	801873a <UART_SetConfig+0x7ae>
 80182ac:	2310      	movs	r3, #16
 80182ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182b2:	e242      	b.n	801873a <UART_SetConfig+0x7ae>
 80182b4:	cfff69f3 	.word	0xcfff69f3
 80182b8:	58000c00 	.word	0x58000c00
 80182bc:	11fff4ff 	.word	0x11fff4ff
 80182c0:	40011000 	.word	0x40011000
 80182c4:	58024400 	.word	0x58024400
 80182c8:	40004400 	.word	0x40004400
 80182cc:	40004800 	.word	0x40004800
 80182d0:	40004c00 	.word	0x40004c00
 80182d4:	40005000 	.word	0x40005000
 80182d8:	2320      	movs	r3, #32
 80182da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182de:	e22c      	b.n	801873a <UART_SetConfig+0x7ae>
 80182e0:	2340      	movs	r3, #64	@ 0x40
 80182e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182e6:	e228      	b.n	801873a <UART_SetConfig+0x7ae>
 80182e8:	2380      	movs	r3, #128	@ 0x80
 80182ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182ee:	e224      	b.n	801873a <UART_SetConfig+0x7ae>
 80182f0:	697b      	ldr	r3, [r7, #20]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	4ab1      	ldr	r2, [pc, #708]	@ (80185bc <UART_SetConfig+0x630>)
 80182f6:	4293      	cmp	r3, r2
 80182f8:	d176      	bne.n	80183e8 <UART_SetConfig+0x45c>
 80182fa:	4bb1      	ldr	r3, [pc, #708]	@ (80185c0 <UART_SetConfig+0x634>)
 80182fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80182fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018302:	2b28      	cmp	r3, #40	@ 0x28
 8018304:	d86c      	bhi.n	80183e0 <UART_SetConfig+0x454>
 8018306:	a201      	add	r2, pc, #4	@ (adr r2, 801830c <UART_SetConfig+0x380>)
 8018308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801830c:	080183b1 	.word	0x080183b1
 8018310:	080183e1 	.word	0x080183e1
 8018314:	080183e1 	.word	0x080183e1
 8018318:	080183e1 	.word	0x080183e1
 801831c:	080183e1 	.word	0x080183e1
 8018320:	080183e1 	.word	0x080183e1
 8018324:	080183e1 	.word	0x080183e1
 8018328:	080183e1 	.word	0x080183e1
 801832c:	080183b9 	.word	0x080183b9
 8018330:	080183e1 	.word	0x080183e1
 8018334:	080183e1 	.word	0x080183e1
 8018338:	080183e1 	.word	0x080183e1
 801833c:	080183e1 	.word	0x080183e1
 8018340:	080183e1 	.word	0x080183e1
 8018344:	080183e1 	.word	0x080183e1
 8018348:	080183e1 	.word	0x080183e1
 801834c:	080183c1 	.word	0x080183c1
 8018350:	080183e1 	.word	0x080183e1
 8018354:	080183e1 	.word	0x080183e1
 8018358:	080183e1 	.word	0x080183e1
 801835c:	080183e1 	.word	0x080183e1
 8018360:	080183e1 	.word	0x080183e1
 8018364:	080183e1 	.word	0x080183e1
 8018368:	080183e1 	.word	0x080183e1
 801836c:	080183c9 	.word	0x080183c9
 8018370:	080183e1 	.word	0x080183e1
 8018374:	080183e1 	.word	0x080183e1
 8018378:	080183e1 	.word	0x080183e1
 801837c:	080183e1 	.word	0x080183e1
 8018380:	080183e1 	.word	0x080183e1
 8018384:	080183e1 	.word	0x080183e1
 8018388:	080183e1 	.word	0x080183e1
 801838c:	080183d1 	.word	0x080183d1
 8018390:	080183e1 	.word	0x080183e1
 8018394:	080183e1 	.word	0x080183e1
 8018398:	080183e1 	.word	0x080183e1
 801839c:	080183e1 	.word	0x080183e1
 80183a0:	080183e1 	.word	0x080183e1
 80183a4:	080183e1 	.word	0x080183e1
 80183a8:	080183e1 	.word	0x080183e1
 80183ac:	080183d9 	.word	0x080183d9
 80183b0:	2301      	movs	r3, #1
 80183b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183b6:	e1c0      	b.n	801873a <UART_SetConfig+0x7ae>
 80183b8:	2304      	movs	r3, #4
 80183ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183be:	e1bc      	b.n	801873a <UART_SetConfig+0x7ae>
 80183c0:	2308      	movs	r3, #8
 80183c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183c6:	e1b8      	b.n	801873a <UART_SetConfig+0x7ae>
 80183c8:	2310      	movs	r3, #16
 80183ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183ce:	e1b4      	b.n	801873a <UART_SetConfig+0x7ae>
 80183d0:	2320      	movs	r3, #32
 80183d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183d6:	e1b0      	b.n	801873a <UART_SetConfig+0x7ae>
 80183d8:	2340      	movs	r3, #64	@ 0x40
 80183da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183de:	e1ac      	b.n	801873a <UART_SetConfig+0x7ae>
 80183e0:	2380      	movs	r3, #128	@ 0x80
 80183e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183e6:	e1a8      	b.n	801873a <UART_SetConfig+0x7ae>
 80183e8:	697b      	ldr	r3, [r7, #20]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	4a75      	ldr	r2, [pc, #468]	@ (80185c4 <UART_SetConfig+0x638>)
 80183ee:	4293      	cmp	r3, r2
 80183f0:	d130      	bne.n	8018454 <UART_SetConfig+0x4c8>
 80183f2:	4b73      	ldr	r3, [pc, #460]	@ (80185c0 <UART_SetConfig+0x634>)
 80183f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80183f6:	f003 0307 	and.w	r3, r3, #7
 80183fa:	2b05      	cmp	r3, #5
 80183fc:	d826      	bhi.n	801844c <UART_SetConfig+0x4c0>
 80183fe:	a201      	add	r2, pc, #4	@ (adr r2, 8018404 <UART_SetConfig+0x478>)
 8018400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018404:	0801841d 	.word	0x0801841d
 8018408:	08018425 	.word	0x08018425
 801840c:	0801842d 	.word	0x0801842d
 8018410:	08018435 	.word	0x08018435
 8018414:	0801843d 	.word	0x0801843d
 8018418:	08018445 	.word	0x08018445
 801841c:	2300      	movs	r3, #0
 801841e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018422:	e18a      	b.n	801873a <UART_SetConfig+0x7ae>
 8018424:	2304      	movs	r3, #4
 8018426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801842a:	e186      	b.n	801873a <UART_SetConfig+0x7ae>
 801842c:	2308      	movs	r3, #8
 801842e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018432:	e182      	b.n	801873a <UART_SetConfig+0x7ae>
 8018434:	2310      	movs	r3, #16
 8018436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801843a:	e17e      	b.n	801873a <UART_SetConfig+0x7ae>
 801843c:	2320      	movs	r3, #32
 801843e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018442:	e17a      	b.n	801873a <UART_SetConfig+0x7ae>
 8018444:	2340      	movs	r3, #64	@ 0x40
 8018446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801844a:	e176      	b.n	801873a <UART_SetConfig+0x7ae>
 801844c:	2380      	movs	r3, #128	@ 0x80
 801844e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018452:	e172      	b.n	801873a <UART_SetConfig+0x7ae>
 8018454:	697b      	ldr	r3, [r7, #20]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	4a5b      	ldr	r2, [pc, #364]	@ (80185c8 <UART_SetConfig+0x63c>)
 801845a:	4293      	cmp	r3, r2
 801845c:	d130      	bne.n	80184c0 <UART_SetConfig+0x534>
 801845e:	4b58      	ldr	r3, [pc, #352]	@ (80185c0 <UART_SetConfig+0x634>)
 8018460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018462:	f003 0307 	and.w	r3, r3, #7
 8018466:	2b05      	cmp	r3, #5
 8018468:	d826      	bhi.n	80184b8 <UART_SetConfig+0x52c>
 801846a:	a201      	add	r2, pc, #4	@ (adr r2, 8018470 <UART_SetConfig+0x4e4>)
 801846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018470:	08018489 	.word	0x08018489
 8018474:	08018491 	.word	0x08018491
 8018478:	08018499 	.word	0x08018499
 801847c:	080184a1 	.word	0x080184a1
 8018480:	080184a9 	.word	0x080184a9
 8018484:	080184b1 	.word	0x080184b1
 8018488:	2300      	movs	r3, #0
 801848a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801848e:	e154      	b.n	801873a <UART_SetConfig+0x7ae>
 8018490:	2304      	movs	r3, #4
 8018492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018496:	e150      	b.n	801873a <UART_SetConfig+0x7ae>
 8018498:	2308      	movs	r3, #8
 801849a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801849e:	e14c      	b.n	801873a <UART_SetConfig+0x7ae>
 80184a0:	2310      	movs	r3, #16
 80184a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80184a6:	e148      	b.n	801873a <UART_SetConfig+0x7ae>
 80184a8:	2320      	movs	r3, #32
 80184aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80184ae:	e144      	b.n	801873a <UART_SetConfig+0x7ae>
 80184b0:	2340      	movs	r3, #64	@ 0x40
 80184b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80184b6:	e140      	b.n	801873a <UART_SetConfig+0x7ae>
 80184b8:	2380      	movs	r3, #128	@ 0x80
 80184ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80184be:	e13c      	b.n	801873a <UART_SetConfig+0x7ae>
 80184c0:	697b      	ldr	r3, [r7, #20]
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	4a41      	ldr	r2, [pc, #260]	@ (80185cc <UART_SetConfig+0x640>)
 80184c6:	4293      	cmp	r3, r2
 80184c8:	f040 8082 	bne.w	80185d0 <UART_SetConfig+0x644>
 80184cc:	4b3c      	ldr	r3, [pc, #240]	@ (80185c0 <UART_SetConfig+0x634>)
 80184ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80184d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80184d4:	2b28      	cmp	r3, #40	@ 0x28
 80184d6:	d86d      	bhi.n	80185b4 <UART_SetConfig+0x628>
 80184d8:	a201      	add	r2, pc, #4	@ (adr r2, 80184e0 <UART_SetConfig+0x554>)
 80184da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184de:	bf00      	nop
 80184e0:	08018585 	.word	0x08018585
 80184e4:	080185b5 	.word	0x080185b5
 80184e8:	080185b5 	.word	0x080185b5
 80184ec:	080185b5 	.word	0x080185b5
 80184f0:	080185b5 	.word	0x080185b5
 80184f4:	080185b5 	.word	0x080185b5
 80184f8:	080185b5 	.word	0x080185b5
 80184fc:	080185b5 	.word	0x080185b5
 8018500:	0801858d 	.word	0x0801858d
 8018504:	080185b5 	.word	0x080185b5
 8018508:	080185b5 	.word	0x080185b5
 801850c:	080185b5 	.word	0x080185b5
 8018510:	080185b5 	.word	0x080185b5
 8018514:	080185b5 	.word	0x080185b5
 8018518:	080185b5 	.word	0x080185b5
 801851c:	080185b5 	.word	0x080185b5
 8018520:	08018595 	.word	0x08018595
 8018524:	080185b5 	.word	0x080185b5
 8018528:	080185b5 	.word	0x080185b5
 801852c:	080185b5 	.word	0x080185b5
 8018530:	080185b5 	.word	0x080185b5
 8018534:	080185b5 	.word	0x080185b5
 8018538:	080185b5 	.word	0x080185b5
 801853c:	080185b5 	.word	0x080185b5
 8018540:	0801859d 	.word	0x0801859d
 8018544:	080185b5 	.word	0x080185b5
 8018548:	080185b5 	.word	0x080185b5
 801854c:	080185b5 	.word	0x080185b5
 8018550:	080185b5 	.word	0x080185b5
 8018554:	080185b5 	.word	0x080185b5
 8018558:	080185b5 	.word	0x080185b5
 801855c:	080185b5 	.word	0x080185b5
 8018560:	080185a5 	.word	0x080185a5
 8018564:	080185b5 	.word	0x080185b5
 8018568:	080185b5 	.word	0x080185b5
 801856c:	080185b5 	.word	0x080185b5
 8018570:	080185b5 	.word	0x080185b5
 8018574:	080185b5 	.word	0x080185b5
 8018578:	080185b5 	.word	0x080185b5
 801857c:	080185b5 	.word	0x080185b5
 8018580:	080185ad 	.word	0x080185ad
 8018584:	2301      	movs	r3, #1
 8018586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801858a:	e0d6      	b.n	801873a <UART_SetConfig+0x7ae>
 801858c:	2304      	movs	r3, #4
 801858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018592:	e0d2      	b.n	801873a <UART_SetConfig+0x7ae>
 8018594:	2308      	movs	r3, #8
 8018596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801859a:	e0ce      	b.n	801873a <UART_SetConfig+0x7ae>
 801859c:	2310      	movs	r3, #16
 801859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185a2:	e0ca      	b.n	801873a <UART_SetConfig+0x7ae>
 80185a4:	2320      	movs	r3, #32
 80185a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185aa:	e0c6      	b.n	801873a <UART_SetConfig+0x7ae>
 80185ac:	2340      	movs	r3, #64	@ 0x40
 80185ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185b2:	e0c2      	b.n	801873a <UART_SetConfig+0x7ae>
 80185b4:	2380      	movs	r3, #128	@ 0x80
 80185b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185ba:	e0be      	b.n	801873a <UART_SetConfig+0x7ae>
 80185bc:	40011400 	.word	0x40011400
 80185c0:	58024400 	.word	0x58024400
 80185c4:	40007800 	.word	0x40007800
 80185c8:	40007c00 	.word	0x40007c00
 80185cc:	40011800 	.word	0x40011800
 80185d0:	697b      	ldr	r3, [r7, #20]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	4aad      	ldr	r2, [pc, #692]	@ (801888c <UART_SetConfig+0x900>)
 80185d6:	4293      	cmp	r3, r2
 80185d8:	d176      	bne.n	80186c8 <UART_SetConfig+0x73c>
 80185da:	4bad      	ldr	r3, [pc, #692]	@ (8018890 <UART_SetConfig+0x904>)
 80185dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80185de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80185e2:	2b28      	cmp	r3, #40	@ 0x28
 80185e4:	d86c      	bhi.n	80186c0 <UART_SetConfig+0x734>
 80185e6:	a201      	add	r2, pc, #4	@ (adr r2, 80185ec <UART_SetConfig+0x660>)
 80185e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185ec:	08018691 	.word	0x08018691
 80185f0:	080186c1 	.word	0x080186c1
 80185f4:	080186c1 	.word	0x080186c1
 80185f8:	080186c1 	.word	0x080186c1
 80185fc:	080186c1 	.word	0x080186c1
 8018600:	080186c1 	.word	0x080186c1
 8018604:	080186c1 	.word	0x080186c1
 8018608:	080186c1 	.word	0x080186c1
 801860c:	08018699 	.word	0x08018699
 8018610:	080186c1 	.word	0x080186c1
 8018614:	080186c1 	.word	0x080186c1
 8018618:	080186c1 	.word	0x080186c1
 801861c:	080186c1 	.word	0x080186c1
 8018620:	080186c1 	.word	0x080186c1
 8018624:	080186c1 	.word	0x080186c1
 8018628:	080186c1 	.word	0x080186c1
 801862c:	080186a1 	.word	0x080186a1
 8018630:	080186c1 	.word	0x080186c1
 8018634:	080186c1 	.word	0x080186c1
 8018638:	080186c1 	.word	0x080186c1
 801863c:	080186c1 	.word	0x080186c1
 8018640:	080186c1 	.word	0x080186c1
 8018644:	080186c1 	.word	0x080186c1
 8018648:	080186c1 	.word	0x080186c1
 801864c:	080186a9 	.word	0x080186a9
 8018650:	080186c1 	.word	0x080186c1
 8018654:	080186c1 	.word	0x080186c1
 8018658:	080186c1 	.word	0x080186c1
 801865c:	080186c1 	.word	0x080186c1
 8018660:	080186c1 	.word	0x080186c1
 8018664:	080186c1 	.word	0x080186c1
 8018668:	080186c1 	.word	0x080186c1
 801866c:	080186b1 	.word	0x080186b1
 8018670:	080186c1 	.word	0x080186c1
 8018674:	080186c1 	.word	0x080186c1
 8018678:	080186c1 	.word	0x080186c1
 801867c:	080186c1 	.word	0x080186c1
 8018680:	080186c1 	.word	0x080186c1
 8018684:	080186c1 	.word	0x080186c1
 8018688:	080186c1 	.word	0x080186c1
 801868c:	080186b9 	.word	0x080186b9
 8018690:	2301      	movs	r3, #1
 8018692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018696:	e050      	b.n	801873a <UART_SetConfig+0x7ae>
 8018698:	2304      	movs	r3, #4
 801869a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801869e:	e04c      	b.n	801873a <UART_SetConfig+0x7ae>
 80186a0:	2308      	movs	r3, #8
 80186a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186a6:	e048      	b.n	801873a <UART_SetConfig+0x7ae>
 80186a8:	2310      	movs	r3, #16
 80186aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186ae:	e044      	b.n	801873a <UART_SetConfig+0x7ae>
 80186b0:	2320      	movs	r3, #32
 80186b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186b6:	e040      	b.n	801873a <UART_SetConfig+0x7ae>
 80186b8:	2340      	movs	r3, #64	@ 0x40
 80186ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186be:	e03c      	b.n	801873a <UART_SetConfig+0x7ae>
 80186c0:	2380      	movs	r3, #128	@ 0x80
 80186c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186c6:	e038      	b.n	801873a <UART_SetConfig+0x7ae>
 80186c8:	697b      	ldr	r3, [r7, #20]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	4a71      	ldr	r2, [pc, #452]	@ (8018894 <UART_SetConfig+0x908>)
 80186ce:	4293      	cmp	r3, r2
 80186d0:	d130      	bne.n	8018734 <UART_SetConfig+0x7a8>
 80186d2:	4b6f      	ldr	r3, [pc, #444]	@ (8018890 <UART_SetConfig+0x904>)
 80186d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80186d6:	f003 0307 	and.w	r3, r3, #7
 80186da:	2b05      	cmp	r3, #5
 80186dc:	d826      	bhi.n	801872c <UART_SetConfig+0x7a0>
 80186de:	a201      	add	r2, pc, #4	@ (adr r2, 80186e4 <UART_SetConfig+0x758>)
 80186e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186e4:	080186fd 	.word	0x080186fd
 80186e8:	08018705 	.word	0x08018705
 80186ec:	0801870d 	.word	0x0801870d
 80186f0:	08018715 	.word	0x08018715
 80186f4:	0801871d 	.word	0x0801871d
 80186f8:	08018725 	.word	0x08018725
 80186fc:	2302      	movs	r3, #2
 80186fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018702:	e01a      	b.n	801873a <UART_SetConfig+0x7ae>
 8018704:	2304      	movs	r3, #4
 8018706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801870a:	e016      	b.n	801873a <UART_SetConfig+0x7ae>
 801870c:	2308      	movs	r3, #8
 801870e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018712:	e012      	b.n	801873a <UART_SetConfig+0x7ae>
 8018714:	2310      	movs	r3, #16
 8018716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801871a:	e00e      	b.n	801873a <UART_SetConfig+0x7ae>
 801871c:	2320      	movs	r3, #32
 801871e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018722:	e00a      	b.n	801873a <UART_SetConfig+0x7ae>
 8018724:	2340      	movs	r3, #64	@ 0x40
 8018726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801872a:	e006      	b.n	801873a <UART_SetConfig+0x7ae>
 801872c:	2380      	movs	r3, #128	@ 0x80
 801872e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018732:	e002      	b.n	801873a <UART_SetConfig+0x7ae>
 8018734:	2380      	movs	r3, #128	@ 0x80
 8018736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801873a:	697b      	ldr	r3, [r7, #20]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	4a55      	ldr	r2, [pc, #340]	@ (8018894 <UART_SetConfig+0x908>)
 8018740:	4293      	cmp	r3, r2
 8018742:	f040 80f8 	bne.w	8018936 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018746:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801874a:	2b20      	cmp	r3, #32
 801874c:	dc46      	bgt.n	80187dc <UART_SetConfig+0x850>
 801874e:	2b02      	cmp	r3, #2
 8018750:	db75      	blt.n	801883e <UART_SetConfig+0x8b2>
 8018752:	3b02      	subs	r3, #2
 8018754:	2b1e      	cmp	r3, #30
 8018756:	d872      	bhi.n	801883e <UART_SetConfig+0x8b2>
 8018758:	a201      	add	r2, pc, #4	@ (adr r2, 8018760 <UART_SetConfig+0x7d4>)
 801875a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801875e:	bf00      	nop
 8018760:	080187e3 	.word	0x080187e3
 8018764:	0801883f 	.word	0x0801883f
 8018768:	080187eb 	.word	0x080187eb
 801876c:	0801883f 	.word	0x0801883f
 8018770:	0801883f 	.word	0x0801883f
 8018774:	0801883f 	.word	0x0801883f
 8018778:	080187fb 	.word	0x080187fb
 801877c:	0801883f 	.word	0x0801883f
 8018780:	0801883f 	.word	0x0801883f
 8018784:	0801883f 	.word	0x0801883f
 8018788:	0801883f 	.word	0x0801883f
 801878c:	0801883f 	.word	0x0801883f
 8018790:	0801883f 	.word	0x0801883f
 8018794:	0801883f 	.word	0x0801883f
 8018798:	0801880b 	.word	0x0801880b
 801879c:	0801883f 	.word	0x0801883f
 80187a0:	0801883f 	.word	0x0801883f
 80187a4:	0801883f 	.word	0x0801883f
 80187a8:	0801883f 	.word	0x0801883f
 80187ac:	0801883f 	.word	0x0801883f
 80187b0:	0801883f 	.word	0x0801883f
 80187b4:	0801883f 	.word	0x0801883f
 80187b8:	0801883f 	.word	0x0801883f
 80187bc:	0801883f 	.word	0x0801883f
 80187c0:	0801883f 	.word	0x0801883f
 80187c4:	0801883f 	.word	0x0801883f
 80187c8:	0801883f 	.word	0x0801883f
 80187cc:	0801883f 	.word	0x0801883f
 80187d0:	0801883f 	.word	0x0801883f
 80187d4:	0801883f 	.word	0x0801883f
 80187d8:	08018831 	.word	0x08018831
 80187dc:	2b40      	cmp	r3, #64	@ 0x40
 80187de:	d02a      	beq.n	8018836 <UART_SetConfig+0x8aa>
 80187e0:	e02d      	b.n	801883e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80187e2:	f7fa fb37 	bl	8012e54 <HAL_RCCEx_GetD3PCLK1Freq>
 80187e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80187e8:	e02f      	b.n	801884a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80187ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80187ee:	4618      	mov	r0, r3
 80187f0:	f7fa fb46 	bl	8012e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80187f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80187f8:	e027      	b.n	801884a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80187fa:	f107 0318 	add.w	r3, r7, #24
 80187fe:	4618      	mov	r0, r3
 8018800:	f7fa fc92 	bl	8013128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018804:	69fb      	ldr	r3, [r7, #28]
 8018806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018808:	e01f      	b.n	801884a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801880a:	4b21      	ldr	r3, [pc, #132]	@ (8018890 <UART_SetConfig+0x904>)
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	f003 0320 	and.w	r3, r3, #32
 8018812:	2b00      	cmp	r3, #0
 8018814:	d009      	beq.n	801882a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018816:	4b1e      	ldr	r3, [pc, #120]	@ (8018890 <UART_SetConfig+0x904>)
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	08db      	lsrs	r3, r3, #3
 801881c:	f003 0303 	and.w	r3, r3, #3
 8018820:	4a1d      	ldr	r2, [pc, #116]	@ (8018898 <UART_SetConfig+0x90c>)
 8018822:	fa22 f303 	lsr.w	r3, r2, r3
 8018826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018828:	e00f      	b.n	801884a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801882a:	4b1b      	ldr	r3, [pc, #108]	@ (8018898 <UART_SetConfig+0x90c>)
 801882c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801882e:	e00c      	b.n	801884a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018830:	4b1a      	ldr	r3, [pc, #104]	@ (801889c <UART_SetConfig+0x910>)
 8018832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018834:	e009      	b.n	801884a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801883a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801883c:	e005      	b.n	801884a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801883e:	2300      	movs	r3, #0
 8018840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018842:	2301      	movs	r3, #1
 8018844:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018848:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801884a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801884c:	2b00      	cmp	r3, #0
 801884e:	f000 81ee 	beq.w	8018c2e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018852:	697b      	ldr	r3, [r7, #20]
 8018854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018856:	4a12      	ldr	r2, [pc, #72]	@ (80188a0 <UART_SetConfig+0x914>)
 8018858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801885c:	461a      	mov	r2, r3
 801885e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018860:	fbb3 f3f2 	udiv	r3, r3, r2
 8018864:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018866:	697b      	ldr	r3, [r7, #20]
 8018868:	685a      	ldr	r2, [r3, #4]
 801886a:	4613      	mov	r3, r2
 801886c:	005b      	lsls	r3, r3, #1
 801886e:	4413      	add	r3, r2
 8018870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018872:	429a      	cmp	r2, r3
 8018874:	d305      	bcc.n	8018882 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018876:	697b      	ldr	r3, [r7, #20]
 8018878:	685b      	ldr	r3, [r3, #4]
 801887a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801887c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801887e:	429a      	cmp	r2, r3
 8018880:	d910      	bls.n	80188a4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8018882:	2301      	movs	r3, #1
 8018884:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018888:	e1d1      	b.n	8018c2e <UART_SetConfig+0xca2>
 801888a:	bf00      	nop
 801888c:	40011c00 	.word	0x40011c00
 8018890:	58024400 	.word	0x58024400
 8018894:	58000c00 	.word	0x58000c00
 8018898:	03d09000 	.word	0x03d09000
 801889c:	003d0900 	.word	0x003d0900
 80188a0:	0801e180 	.word	0x0801e180
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80188a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80188a6:	2200      	movs	r2, #0
 80188a8:	60bb      	str	r3, [r7, #8]
 80188aa:	60fa      	str	r2, [r7, #12]
 80188ac:	697b      	ldr	r3, [r7, #20]
 80188ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80188b0:	4ac0      	ldr	r2, [pc, #768]	@ (8018bb4 <UART_SetConfig+0xc28>)
 80188b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80188b6:	b29b      	uxth	r3, r3
 80188b8:	2200      	movs	r2, #0
 80188ba:	603b      	str	r3, [r7, #0]
 80188bc:	607a      	str	r2, [r7, #4]
 80188be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80188c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80188c6:	f7e7 fd73 	bl	80003b0 <__aeabi_uldivmod>
 80188ca:	4602      	mov	r2, r0
 80188cc:	460b      	mov	r3, r1
 80188ce:	4610      	mov	r0, r2
 80188d0:	4619      	mov	r1, r3
 80188d2:	f04f 0200 	mov.w	r2, #0
 80188d6:	f04f 0300 	mov.w	r3, #0
 80188da:	020b      	lsls	r3, r1, #8
 80188dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80188e0:	0202      	lsls	r2, r0, #8
 80188e2:	6979      	ldr	r1, [r7, #20]
 80188e4:	6849      	ldr	r1, [r1, #4]
 80188e6:	0849      	lsrs	r1, r1, #1
 80188e8:	2000      	movs	r0, #0
 80188ea:	460c      	mov	r4, r1
 80188ec:	4605      	mov	r5, r0
 80188ee:	eb12 0804 	adds.w	r8, r2, r4
 80188f2:	eb43 0905 	adc.w	r9, r3, r5
 80188f6:	697b      	ldr	r3, [r7, #20]
 80188f8:	685b      	ldr	r3, [r3, #4]
 80188fa:	2200      	movs	r2, #0
 80188fc:	469a      	mov	sl, r3
 80188fe:	4693      	mov	fp, r2
 8018900:	4652      	mov	r2, sl
 8018902:	465b      	mov	r3, fp
 8018904:	4640      	mov	r0, r8
 8018906:	4649      	mov	r1, r9
 8018908:	f7e7 fd52 	bl	80003b0 <__aeabi_uldivmod>
 801890c:	4602      	mov	r2, r0
 801890e:	460b      	mov	r3, r1
 8018910:	4613      	mov	r3, r2
 8018912:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018916:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801891a:	d308      	bcc.n	801892e <UART_SetConfig+0x9a2>
 801891c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801891e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018922:	d204      	bcs.n	801892e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8018924:	697b      	ldr	r3, [r7, #20]
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801892a:	60da      	str	r2, [r3, #12]
 801892c:	e17f      	b.n	8018c2e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801892e:	2301      	movs	r3, #1
 8018930:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018934:	e17b      	b.n	8018c2e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018936:	697b      	ldr	r3, [r7, #20]
 8018938:	69db      	ldr	r3, [r3, #28]
 801893a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801893e:	f040 80bd 	bne.w	8018abc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8018942:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018946:	2b20      	cmp	r3, #32
 8018948:	dc48      	bgt.n	80189dc <UART_SetConfig+0xa50>
 801894a:	2b00      	cmp	r3, #0
 801894c:	db7b      	blt.n	8018a46 <UART_SetConfig+0xaba>
 801894e:	2b20      	cmp	r3, #32
 8018950:	d879      	bhi.n	8018a46 <UART_SetConfig+0xaba>
 8018952:	a201      	add	r2, pc, #4	@ (adr r2, 8018958 <UART_SetConfig+0x9cc>)
 8018954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018958:	080189e3 	.word	0x080189e3
 801895c:	080189eb 	.word	0x080189eb
 8018960:	08018a47 	.word	0x08018a47
 8018964:	08018a47 	.word	0x08018a47
 8018968:	080189f3 	.word	0x080189f3
 801896c:	08018a47 	.word	0x08018a47
 8018970:	08018a47 	.word	0x08018a47
 8018974:	08018a47 	.word	0x08018a47
 8018978:	08018a03 	.word	0x08018a03
 801897c:	08018a47 	.word	0x08018a47
 8018980:	08018a47 	.word	0x08018a47
 8018984:	08018a47 	.word	0x08018a47
 8018988:	08018a47 	.word	0x08018a47
 801898c:	08018a47 	.word	0x08018a47
 8018990:	08018a47 	.word	0x08018a47
 8018994:	08018a47 	.word	0x08018a47
 8018998:	08018a13 	.word	0x08018a13
 801899c:	08018a47 	.word	0x08018a47
 80189a0:	08018a47 	.word	0x08018a47
 80189a4:	08018a47 	.word	0x08018a47
 80189a8:	08018a47 	.word	0x08018a47
 80189ac:	08018a47 	.word	0x08018a47
 80189b0:	08018a47 	.word	0x08018a47
 80189b4:	08018a47 	.word	0x08018a47
 80189b8:	08018a47 	.word	0x08018a47
 80189bc:	08018a47 	.word	0x08018a47
 80189c0:	08018a47 	.word	0x08018a47
 80189c4:	08018a47 	.word	0x08018a47
 80189c8:	08018a47 	.word	0x08018a47
 80189cc:	08018a47 	.word	0x08018a47
 80189d0:	08018a47 	.word	0x08018a47
 80189d4:	08018a47 	.word	0x08018a47
 80189d8:	08018a39 	.word	0x08018a39
 80189dc:	2b40      	cmp	r3, #64	@ 0x40
 80189de:	d02e      	beq.n	8018a3e <UART_SetConfig+0xab2>
 80189e0:	e031      	b.n	8018a46 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80189e2:	f7f8 fb99 	bl	8011118 <HAL_RCC_GetPCLK1Freq>
 80189e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80189e8:	e033      	b.n	8018a52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80189ea:	f7f8 fbab 	bl	8011144 <HAL_RCC_GetPCLK2Freq>
 80189ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80189f0:	e02f      	b.n	8018a52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80189f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80189f6:	4618      	mov	r0, r3
 80189f8:	f7fa fa42 	bl	8012e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80189fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a00:	e027      	b.n	8018a52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018a02:	f107 0318 	add.w	r3, r7, #24
 8018a06:	4618      	mov	r0, r3
 8018a08:	f7fa fb8e 	bl	8013128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018a0c:	69fb      	ldr	r3, [r7, #28]
 8018a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a10:	e01f      	b.n	8018a52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018a12:	4b69      	ldr	r3, [pc, #420]	@ (8018bb8 <UART_SetConfig+0xc2c>)
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	f003 0320 	and.w	r3, r3, #32
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d009      	beq.n	8018a32 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018a1e:	4b66      	ldr	r3, [pc, #408]	@ (8018bb8 <UART_SetConfig+0xc2c>)
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	08db      	lsrs	r3, r3, #3
 8018a24:	f003 0303 	and.w	r3, r3, #3
 8018a28:	4a64      	ldr	r2, [pc, #400]	@ (8018bbc <UART_SetConfig+0xc30>)
 8018a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8018a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018a30:	e00f      	b.n	8018a52 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8018a32:	4b62      	ldr	r3, [pc, #392]	@ (8018bbc <UART_SetConfig+0xc30>)
 8018a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a36:	e00c      	b.n	8018a52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018a38:	4b61      	ldr	r3, [pc, #388]	@ (8018bc0 <UART_SetConfig+0xc34>)
 8018a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a3c:	e009      	b.n	8018a52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a44:	e005      	b.n	8018a52 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8018a46:	2300      	movs	r3, #0
 8018a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018a4a:	2301      	movs	r3, #1
 8018a4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018a50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	f000 80ea 	beq.w	8018c2e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018a5a:	697b      	ldr	r3, [r7, #20]
 8018a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a5e:	4a55      	ldr	r2, [pc, #340]	@ (8018bb4 <UART_SetConfig+0xc28>)
 8018a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018a64:	461a      	mov	r2, r3
 8018a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8018a6c:	005a      	lsls	r2, r3, #1
 8018a6e:	697b      	ldr	r3, [r7, #20]
 8018a70:	685b      	ldr	r3, [r3, #4]
 8018a72:	085b      	lsrs	r3, r3, #1
 8018a74:	441a      	add	r2, r3
 8018a76:	697b      	ldr	r3, [r7, #20]
 8018a78:	685b      	ldr	r3, [r3, #4]
 8018a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a82:	2b0f      	cmp	r3, #15
 8018a84:	d916      	bls.n	8018ab4 <UART_SetConfig+0xb28>
 8018a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018a8c:	d212      	bcs.n	8018ab4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a90:	b29b      	uxth	r3, r3
 8018a92:	f023 030f 	bic.w	r3, r3, #15
 8018a96:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a9a:	085b      	lsrs	r3, r3, #1
 8018a9c:	b29b      	uxth	r3, r3
 8018a9e:	f003 0307 	and.w	r3, r3, #7
 8018aa2:	b29a      	uxth	r2, r3
 8018aa4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018aa6:	4313      	orrs	r3, r2
 8018aa8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8018aaa:	697b      	ldr	r3, [r7, #20]
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8018ab0:	60da      	str	r2, [r3, #12]
 8018ab2:	e0bc      	b.n	8018c2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8018ab4:	2301      	movs	r3, #1
 8018ab6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018aba:	e0b8      	b.n	8018c2e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018abc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018ac0:	2b20      	cmp	r3, #32
 8018ac2:	dc4b      	bgt.n	8018b5c <UART_SetConfig+0xbd0>
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	f2c0 8087 	blt.w	8018bd8 <UART_SetConfig+0xc4c>
 8018aca:	2b20      	cmp	r3, #32
 8018acc:	f200 8084 	bhi.w	8018bd8 <UART_SetConfig+0xc4c>
 8018ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8018ad8 <UART_SetConfig+0xb4c>)
 8018ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ad6:	bf00      	nop
 8018ad8:	08018b63 	.word	0x08018b63
 8018adc:	08018b6b 	.word	0x08018b6b
 8018ae0:	08018bd9 	.word	0x08018bd9
 8018ae4:	08018bd9 	.word	0x08018bd9
 8018ae8:	08018b73 	.word	0x08018b73
 8018aec:	08018bd9 	.word	0x08018bd9
 8018af0:	08018bd9 	.word	0x08018bd9
 8018af4:	08018bd9 	.word	0x08018bd9
 8018af8:	08018b83 	.word	0x08018b83
 8018afc:	08018bd9 	.word	0x08018bd9
 8018b00:	08018bd9 	.word	0x08018bd9
 8018b04:	08018bd9 	.word	0x08018bd9
 8018b08:	08018bd9 	.word	0x08018bd9
 8018b0c:	08018bd9 	.word	0x08018bd9
 8018b10:	08018bd9 	.word	0x08018bd9
 8018b14:	08018bd9 	.word	0x08018bd9
 8018b18:	08018b93 	.word	0x08018b93
 8018b1c:	08018bd9 	.word	0x08018bd9
 8018b20:	08018bd9 	.word	0x08018bd9
 8018b24:	08018bd9 	.word	0x08018bd9
 8018b28:	08018bd9 	.word	0x08018bd9
 8018b2c:	08018bd9 	.word	0x08018bd9
 8018b30:	08018bd9 	.word	0x08018bd9
 8018b34:	08018bd9 	.word	0x08018bd9
 8018b38:	08018bd9 	.word	0x08018bd9
 8018b3c:	08018bd9 	.word	0x08018bd9
 8018b40:	08018bd9 	.word	0x08018bd9
 8018b44:	08018bd9 	.word	0x08018bd9
 8018b48:	08018bd9 	.word	0x08018bd9
 8018b4c:	08018bd9 	.word	0x08018bd9
 8018b50:	08018bd9 	.word	0x08018bd9
 8018b54:	08018bd9 	.word	0x08018bd9
 8018b58:	08018bcb 	.word	0x08018bcb
 8018b5c:	2b40      	cmp	r3, #64	@ 0x40
 8018b5e:	d037      	beq.n	8018bd0 <UART_SetConfig+0xc44>
 8018b60:	e03a      	b.n	8018bd8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018b62:	f7f8 fad9 	bl	8011118 <HAL_RCC_GetPCLK1Freq>
 8018b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018b68:	e03c      	b.n	8018be4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018b6a:	f7f8 faeb 	bl	8011144 <HAL_RCC_GetPCLK2Freq>
 8018b6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018b70:	e038      	b.n	8018be4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018b76:	4618      	mov	r0, r3
 8018b78:	f7fa f982 	bl	8012e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018b80:	e030      	b.n	8018be4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018b82:	f107 0318 	add.w	r3, r7, #24
 8018b86:	4618      	mov	r0, r3
 8018b88:	f7fa face 	bl	8013128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018b8c:	69fb      	ldr	r3, [r7, #28]
 8018b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018b90:	e028      	b.n	8018be4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018b92:	4b09      	ldr	r3, [pc, #36]	@ (8018bb8 <UART_SetConfig+0xc2c>)
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	f003 0320 	and.w	r3, r3, #32
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d012      	beq.n	8018bc4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018b9e:	4b06      	ldr	r3, [pc, #24]	@ (8018bb8 <UART_SetConfig+0xc2c>)
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	08db      	lsrs	r3, r3, #3
 8018ba4:	f003 0303 	and.w	r3, r3, #3
 8018ba8:	4a04      	ldr	r2, [pc, #16]	@ (8018bbc <UART_SetConfig+0xc30>)
 8018baa:	fa22 f303 	lsr.w	r3, r2, r3
 8018bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018bb0:	e018      	b.n	8018be4 <UART_SetConfig+0xc58>
 8018bb2:	bf00      	nop
 8018bb4:	0801e180 	.word	0x0801e180
 8018bb8:	58024400 	.word	0x58024400
 8018bbc:	03d09000 	.word	0x03d09000
 8018bc0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8018bc4:	4b24      	ldr	r3, [pc, #144]	@ (8018c58 <UART_SetConfig+0xccc>)
 8018bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018bc8:	e00c      	b.n	8018be4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018bca:	4b24      	ldr	r3, [pc, #144]	@ (8018c5c <UART_SetConfig+0xcd0>)
 8018bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018bce:	e009      	b.n	8018be4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018bd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018bd6:	e005      	b.n	8018be4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8018bd8:	2300      	movs	r3, #0
 8018bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018bdc:	2301      	movs	r3, #1
 8018bde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018be2:	bf00      	nop
    }

    if (pclk != 0U)
 8018be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d021      	beq.n	8018c2e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018bea:	697b      	ldr	r3, [r7, #20]
 8018bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bee:	4a1c      	ldr	r2, [pc, #112]	@ (8018c60 <UART_SetConfig+0xcd4>)
 8018bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018bf4:	461a      	mov	r2, r3
 8018bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018bf8:	fbb3 f2f2 	udiv	r2, r3, r2
 8018bfc:	697b      	ldr	r3, [r7, #20]
 8018bfe:	685b      	ldr	r3, [r3, #4]
 8018c00:	085b      	lsrs	r3, r3, #1
 8018c02:	441a      	add	r2, r3
 8018c04:	697b      	ldr	r3, [r7, #20]
 8018c06:	685b      	ldr	r3, [r3, #4]
 8018c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c10:	2b0f      	cmp	r3, #15
 8018c12:	d909      	bls.n	8018c28 <UART_SetConfig+0xc9c>
 8018c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018c1a:	d205      	bcs.n	8018c28 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c1e:	b29a      	uxth	r2, r3
 8018c20:	697b      	ldr	r3, [r7, #20]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	60da      	str	r2, [r3, #12]
 8018c26:	e002      	b.n	8018c2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8018c28:	2301      	movs	r3, #1
 8018c2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8018c2e:	697b      	ldr	r3, [r7, #20]
 8018c30:	2201      	movs	r2, #1
 8018c32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8018c36:	697b      	ldr	r3, [r7, #20]
 8018c38:	2201      	movs	r2, #1
 8018c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018c3e:	697b      	ldr	r3, [r7, #20]
 8018c40:	2200      	movs	r2, #0
 8018c42:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8018c44:	697b      	ldr	r3, [r7, #20]
 8018c46:	2200      	movs	r2, #0
 8018c48:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8018c4a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8018c4e:	4618      	mov	r0, r3
 8018c50:	3748      	adds	r7, #72	@ 0x48
 8018c52:	46bd      	mov	sp, r7
 8018c54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018c58:	03d09000 	.word	0x03d09000
 8018c5c:	003d0900 	.word	0x003d0900
 8018c60:	0801e180 	.word	0x0801e180

08018c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018c64:	b480      	push	{r7}
 8018c66:	b083      	sub	sp, #12
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c70:	f003 0308 	and.w	r3, r3, #8
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d00a      	beq.n	8018c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	685b      	ldr	r3, [r3, #4]
 8018c7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	430a      	orrs	r2, r1
 8018c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c92:	f003 0301 	and.w	r3, r3, #1
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d00a      	beq.n	8018cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	685b      	ldr	r3, [r3, #4]
 8018ca0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	430a      	orrs	r2, r1
 8018cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018cb4:	f003 0302 	and.w	r3, r3, #2
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d00a      	beq.n	8018cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	685b      	ldr	r3, [r3, #4]
 8018cc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	430a      	orrs	r2, r1
 8018cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018cd6:	f003 0304 	and.w	r3, r3, #4
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d00a      	beq.n	8018cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	685b      	ldr	r3, [r3, #4]
 8018ce4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	430a      	orrs	r2, r1
 8018cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018cf8:	f003 0310 	and.w	r3, r3, #16
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d00a      	beq.n	8018d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	689b      	ldr	r3, [r3, #8]
 8018d06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	430a      	orrs	r2, r1
 8018d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d1a:	f003 0320 	and.w	r3, r3, #32
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d00a      	beq.n	8018d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	689b      	ldr	r3, [r3, #8]
 8018d28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	430a      	orrs	r2, r1
 8018d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d01a      	beq.n	8018d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	685b      	ldr	r3, [r3, #4]
 8018d4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	430a      	orrs	r2, r1
 8018d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018d5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018d62:	d10a      	bne.n	8018d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	685b      	ldr	r3, [r3, #4]
 8018d6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	430a      	orrs	r2, r1
 8018d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d00a      	beq.n	8018d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	685b      	ldr	r3, [r3, #4]
 8018d8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	430a      	orrs	r2, r1
 8018d9a:	605a      	str	r2, [r3, #4]
  }
}
 8018d9c:	bf00      	nop
 8018d9e:	370c      	adds	r7, #12
 8018da0:	46bd      	mov	sp, r7
 8018da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da6:	4770      	bx	lr

08018da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b098      	sub	sp, #96	@ 0x60
 8018dac:	af02      	add	r7, sp, #8
 8018dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	2200      	movs	r2, #0
 8018db4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018db8:	f7ef fc4a 	bl	8008650 <HAL_GetTick>
 8018dbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	f003 0308 	and.w	r3, r3, #8
 8018dc8:	2b08      	cmp	r3, #8
 8018dca:	d12f      	bne.n	8018e2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018dcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8018dd0:	9300      	str	r3, [sp, #0]
 8018dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018dd4:	2200      	movs	r2, #0
 8018dd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8018dda:	6878      	ldr	r0, [r7, #4]
 8018ddc:	f000 f88e 	bl	8018efc <UART_WaitOnFlagUntilTimeout>
 8018de0:	4603      	mov	r3, r0
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d022      	beq.n	8018e2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018dee:	e853 3f00 	ldrex	r3, [r3]
 8018df2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8018df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018df6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018dfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	461a      	mov	r2, r3
 8018e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8018e06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018e08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018e0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018e0c:	e841 2300 	strex	r3, r2, [r1]
 8018e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d1e6      	bne.n	8018de6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	2220      	movs	r2, #32
 8018e1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	2200      	movs	r2, #0
 8018e24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018e28:	2303      	movs	r3, #3
 8018e2a:	e063      	b.n	8018ef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	f003 0304 	and.w	r3, r3, #4
 8018e36:	2b04      	cmp	r3, #4
 8018e38:	d149      	bne.n	8018ece <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018e3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8018e3e:	9300      	str	r3, [sp, #0]
 8018e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e42:	2200      	movs	r2, #0
 8018e44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8018e48:	6878      	ldr	r0, [r7, #4]
 8018e4a:	f000 f857 	bl	8018efc <UART_WaitOnFlagUntilTimeout>
 8018e4e:	4603      	mov	r3, r0
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d03c      	beq.n	8018ece <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e5c:	e853 3f00 	ldrex	r3, [r3]
 8018e60:	623b      	str	r3, [r7, #32]
   return(result);
 8018e62:	6a3b      	ldr	r3, [r7, #32]
 8018e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8018e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	461a      	mov	r2, r3
 8018e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e72:	633b      	str	r3, [r7, #48]	@ 0x30
 8018e74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018e7a:	e841 2300 	strex	r3, r2, [r1]
 8018e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d1e6      	bne.n	8018e54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	3308      	adds	r3, #8
 8018e8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018e8e:	693b      	ldr	r3, [r7, #16]
 8018e90:	e853 3f00 	ldrex	r3, [r3]
 8018e94:	60fb      	str	r3, [r7, #12]
   return(result);
 8018e96:	68fb      	ldr	r3, [r7, #12]
 8018e98:	f023 0301 	bic.w	r3, r3, #1
 8018e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	3308      	adds	r3, #8
 8018ea4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018ea6:	61fa      	str	r2, [r7, #28]
 8018ea8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018eaa:	69b9      	ldr	r1, [r7, #24]
 8018eac:	69fa      	ldr	r2, [r7, #28]
 8018eae:	e841 2300 	strex	r3, r2, [r1]
 8018eb2:	617b      	str	r3, [r7, #20]
   return(result);
 8018eb4:	697b      	ldr	r3, [r7, #20]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d1e5      	bne.n	8018e86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	2220      	movs	r2, #32
 8018ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018eca:	2303      	movs	r3, #3
 8018ecc:	e012      	b.n	8018ef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	2220      	movs	r2, #32
 8018ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	2220      	movs	r2, #32
 8018eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	2200      	movs	r2, #0
 8018ee8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	2200      	movs	r2, #0
 8018eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8018ef2:	2300      	movs	r3, #0
}
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	3758      	adds	r7, #88	@ 0x58
 8018ef8:	46bd      	mov	sp, r7
 8018efa:	bd80      	pop	{r7, pc}

08018efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b084      	sub	sp, #16
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	60f8      	str	r0, [r7, #12]
 8018f04:	60b9      	str	r1, [r7, #8]
 8018f06:	603b      	str	r3, [r7, #0]
 8018f08:	4613      	mov	r3, r2
 8018f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018f0c:	e04f      	b.n	8018fae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018f0e:	69bb      	ldr	r3, [r7, #24]
 8018f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f14:	d04b      	beq.n	8018fae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018f16:	f7ef fb9b 	bl	8008650 <HAL_GetTick>
 8018f1a:	4602      	mov	r2, r0
 8018f1c:	683b      	ldr	r3, [r7, #0]
 8018f1e:	1ad3      	subs	r3, r2, r3
 8018f20:	69ba      	ldr	r2, [r7, #24]
 8018f22:	429a      	cmp	r2, r3
 8018f24:	d302      	bcc.n	8018f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8018f26:	69bb      	ldr	r3, [r7, #24]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d101      	bne.n	8018f30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8018f2c:	2303      	movs	r3, #3
 8018f2e:	e04e      	b.n	8018fce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	f003 0304 	and.w	r3, r3, #4
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d037      	beq.n	8018fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8018f3e:	68bb      	ldr	r3, [r7, #8]
 8018f40:	2b80      	cmp	r3, #128	@ 0x80
 8018f42:	d034      	beq.n	8018fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8018f44:	68bb      	ldr	r3, [r7, #8]
 8018f46:	2b40      	cmp	r3, #64	@ 0x40
 8018f48:	d031      	beq.n	8018fae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	69db      	ldr	r3, [r3, #28]
 8018f50:	f003 0308 	and.w	r3, r3, #8
 8018f54:	2b08      	cmp	r3, #8
 8018f56:	d110      	bne.n	8018f7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	2208      	movs	r2, #8
 8018f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8018f60:	68f8      	ldr	r0, [r7, #12]
 8018f62:	f000 f95b 	bl	801921c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	2208      	movs	r2, #8
 8018f6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	2200      	movs	r2, #0
 8018f72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8018f76:	2301      	movs	r3, #1
 8018f78:	e029      	b.n	8018fce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	69db      	ldr	r3, [r3, #28]
 8018f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018f88:	d111      	bne.n	8018fae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018f92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8018f94:	68f8      	ldr	r0, [r7, #12]
 8018f96:	f000 f941 	bl	801921c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	2220      	movs	r2, #32
 8018f9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	2200      	movs	r2, #0
 8018fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8018faa:	2303      	movs	r3, #3
 8018fac:	e00f      	b.n	8018fce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	69da      	ldr	r2, [r3, #28]
 8018fb4:	68bb      	ldr	r3, [r7, #8]
 8018fb6:	4013      	ands	r3, r2
 8018fb8:	68ba      	ldr	r2, [r7, #8]
 8018fba:	429a      	cmp	r2, r3
 8018fbc:	bf0c      	ite	eq
 8018fbe:	2301      	moveq	r3, #1
 8018fc0:	2300      	movne	r3, #0
 8018fc2:	b2db      	uxtb	r3, r3
 8018fc4:	461a      	mov	r2, r3
 8018fc6:	79fb      	ldrb	r3, [r7, #7]
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	d0a0      	beq.n	8018f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018fcc:	2300      	movs	r3, #0
}
 8018fce:	4618      	mov	r0, r3
 8018fd0:	3710      	adds	r7, #16
 8018fd2:	46bd      	mov	sp, r7
 8018fd4:	bd80      	pop	{r7, pc}
	...

08018fd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018fd8:	b480      	push	{r7}
 8018fda:	b0a3      	sub	sp, #140	@ 0x8c
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	60f8      	str	r0, [r7, #12]
 8018fe0:	60b9      	str	r1, [r7, #8]
 8018fe2:	4613      	mov	r3, r2
 8018fe4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	68ba      	ldr	r2, [r7, #8]
 8018fea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	88fa      	ldrh	r2, [r7, #6]
 8018ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	88fa      	ldrh	r2, [r7, #6]
 8018ff8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	2200      	movs	r2, #0
 8019000:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	689b      	ldr	r3, [r3, #8]
 8019006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801900a:	d10e      	bne.n	801902a <UART_Start_Receive_IT+0x52>
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	691b      	ldr	r3, [r3, #16]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d105      	bne.n	8019020 <UART_Start_Receive_IT+0x48>
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801901a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801901e:	e02d      	b.n	801907c <UART_Start_Receive_IT+0xa4>
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	22ff      	movs	r2, #255	@ 0xff
 8019024:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019028:	e028      	b.n	801907c <UART_Start_Receive_IT+0xa4>
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	689b      	ldr	r3, [r3, #8]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d10d      	bne.n	801904e <UART_Start_Receive_IT+0x76>
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	691b      	ldr	r3, [r3, #16]
 8019036:	2b00      	cmp	r3, #0
 8019038:	d104      	bne.n	8019044 <UART_Start_Receive_IT+0x6c>
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	22ff      	movs	r2, #255	@ 0xff
 801903e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019042:	e01b      	b.n	801907c <UART_Start_Receive_IT+0xa4>
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	227f      	movs	r2, #127	@ 0x7f
 8019048:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801904c:	e016      	b.n	801907c <UART_Start_Receive_IT+0xa4>
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	689b      	ldr	r3, [r3, #8]
 8019052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019056:	d10d      	bne.n	8019074 <UART_Start_Receive_IT+0x9c>
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	691b      	ldr	r3, [r3, #16]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d104      	bne.n	801906a <UART_Start_Receive_IT+0x92>
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	227f      	movs	r2, #127	@ 0x7f
 8019064:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019068:	e008      	b.n	801907c <UART_Start_Receive_IT+0xa4>
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	223f      	movs	r2, #63	@ 0x3f
 801906e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019072:	e003      	b.n	801907c <UART_Start_Receive_IT+0xa4>
 8019074:	68fb      	ldr	r3, [r7, #12]
 8019076:	2200      	movs	r2, #0
 8019078:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	2200      	movs	r2, #0
 8019080:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	2222      	movs	r2, #34	@ 0x22
 8019088:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	3308      	adds	r3, #8
 8019092:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019096:	e853 3f00 	ldrex	r3, [r3]
 801909a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801909c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801909e:	f043 0301 	orr.w	r3, r3, #1
 80190a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	3308      	adds	r3, #8
 80190ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80190b0:	673a      	str	r2, [r7, #112]	@ 0x70
 80190b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80190b4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80190b6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80190b8:	e841 2300 	strex	r3, r2, [r1]
 80190bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80190be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d1e3      	bne.n	801908c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80190c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80190cc:	d14f      	bne.n	801916e <UART_Start_Receive_IT+0x196>
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80190d4:	88fa      	ldrh	r2, [r7, #6]
 80190d6:	429a      	cmp	r2, r3
 80190d8:	d349      	bcc.n	801916e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	689b      	ldr	r3, [r3, #8]
 80190de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80190e2:	d107      	bne.n	80190f4 <UART_Start_Receive_IT+0x11c>
 80190e4:	68fb      	ldr	r3, [r7, #12]
 80190e6:	691b      	ldr	r3, [r3, #16]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d103      	bne.n	80190f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	4a47      	ldr	r2, [pc, #284]	@ (801920c <UART_Start_Receive_IT+0x234>)
 80190f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80190f2:	e002      	b.n	80190fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	4a46      	ldr	r2, [pc, #280]	@ (8019210 <UART_Start_Receive_IT+0x238>)
 80190f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	691b      	ldr	r3, [r3, #16]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d01a      	beq.n	8019138 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801910a:	e853 3f00 	ldrex	r3, [r3]
 801910e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019116:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	461a      	mov	r2, r3
 8019120:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019124:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019126:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019128:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801912a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801912c:	e841 2300 	strex	r3, r2, [r1]
 8019130:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8019132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019134:	2b00      	cmp	r3, #0
 8019136:	d1e4      	bne.n	8019102 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	3308      	adds	r3, #8
 801913e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019142:	e853 3f00 	ldrex	r3, [r3]
 8019146:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801914a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801914e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	3308      	adds	r3, #8
 8019156:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019158:	64ba      	str	r2, [r7, #72]	@ 0x48
 801915a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801915c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801915e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019160:	e841 2300 	strex	r3, r2, [r1]
 8019164:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8019166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019168:	2b00      	cmp	r3, #0
 801916a:	d1e5      	bne.n	8019138 <UART_Start_Receive_IT+0x160>
 801916c:	e046      	b.n	80191fc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	689b      	ldr	r3, [r3, #8]
 8019172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019176:	d107      	bne.n	8019188 <UART_Start_Receive_IT+0x1b0>
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	691b      	ldr	r3, [r3, #16]
 801917c:	2b00      	cmp	r3, #0
 801917e:	d103      	bne.n	8019188 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	4a24      	ldr	r2, [pc, #144]	@ (8019214 <UART_Start_Receive_IT+0x23c>)
 8019184:	675a      	str	r2, [r3, #116]	@ 0x74
 8019186:	e002      	b.n	801918e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	4a23      	ldr	r2, [pc, #140]	@ (8019218 <UART_Start_Receive_IT+0x240>)
 801918c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	691b      	ldr	r3, [r3, #16]
 8019192:	2b00      	cmp	r3, #0
 8019194:	d019      	beq.n	80191ca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801919c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801919e:	e853 3f00 	ldrex	r3, [r3]
 80191a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80191a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191a6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80191aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	461a      	mov	r2, r3
 80191b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80191b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80191b6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80191b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80191ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80191bc:	e841 2300 	strex	r3, r2, [r1]
 80191c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80191c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d1e6      	bne.n	8019196 <UART_Start_Receive_IT+0x1be>
 80191c8:	e018      	b.n	80191fc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80191d0:	697b      	ldr	r3, [r7, #20]
 80191d2:	e853 3f00 	ldrex	r3, [r3]
 80191d6:	613b      	str	r3, [r7, #16]
   return(result);
 80191d8:	693b      	ldr	r3, [r7, #16]
 80191da:	f043 0320 	orr.w	r3, r3, #32
 80191de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	461a      	mov	r2, r3
 80191e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80191e8:	623b      	str	r3, [r7, #32]
 80191ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80191ec:	69f9      	ldr	r1, [r7, #28]
 80191ee:	6a3a      	ldr	r2, [r7, #32]
 80191f0:	e841 2300 	strex	r3, r2, [r1]
 80191f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80191f6:	69bb      	ldr	r3, [r7, #24]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d1e6      	bne.n	80191ca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80191fc:	2300      	movs	r3, #0
}
 80191fe:	4618      	mov	r0, r3
 8019200:	378c      	adds	r7, #140	@ 0x8c
 8019202:	46bd      	mov	sp, r7
 8019204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019208:	4770      	bx	lr
 801920a:	bf00      	nop
 801920c:	08019d7d 	.word	0x08019d7d
 8019210:	08019a19 	.word	0x08019a19
 8019214:	08019861 	.word	0x08019861
 8019218:	080196a9 	.word	0x080196a9

0801921c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801921c:	b480      	push	{r7}
 801921e:	b095      	sub	sp, #84	@ 0x54
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801922a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801922c:	e853 3f00 	ldrex	r3, [r3]
 8019230:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	461a      	mov	r2, r3
 8019240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019242:	643b      	str	r3, [r7, #64]	@ 0x40
 8019244:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019246:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019248:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801924a:	e841 2300 	strex	r3, r2, [r1]
 801924e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019252:	2b00      	cmp	r3, #0
 8019254:	d1e6      	bne.n	8019224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	3308      	adds	r3, #8
 801925c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801925e:	6a3b      	ldr	r3, [r7, #32]
 8019260:	e853 3f00 	ldrex	r3, [r3]
 8019264:	61fb      	str	r3, [r7, #28]
   return(result);
 8019266:	69fa      	ldr	r2, [r7, #28]
 8019268:	4b1e      	ldr	r3, [pc, #120]	@ (80192e4 <UART_EndRxTransfer+0xc8>)
 801926a:	4013      	ands	r3, r2
 801926c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	3308      	adds	r3, #8
 8019274:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019278:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801927a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801927c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801927e:	e841 2300 	strex	r3, r2, [r1]
 8019282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019286:	2b00      	cmp	r3, #0
 8019288:	d1e5      	bne.n	8019256 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801928e:	2b01      	cmp	r3, #1
 8019290:	d118      	bne.n	80192c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	e853 3f00 	ldrex	r3, [r3]
 801929e:	60bb      	str	r3, [r7, #8]
   return(result);
 80192a0:	68bb      	ldr	r3, [r7, #8]
 80192a2:	f023 0310 	bic.w	r3, r3, #16
 80192a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	461a      	mov	r2, r3
 80192ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80192b0:	61bb      	str	r3, [r7, #24]
 80192b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192b4:	6979      	ldr	r1, [r7, #20]
 80192b6:	69ba      	ldr	r2, [r7, #24]
 80192b8:	e841 2300 	strex	r3, r2, [r1]
 80192bc:	613b      	str	r3, [r7, #16]
   return(result);
 80192be:	693b      	ldr	r3, [r7, #16]
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d1e6      	bne.n	8019292 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	2220      	movs	r2, #32
 80192c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	2200      	movs	r2, #0
 80192d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	2200      	movs	r2, #0
 80192d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80192d8:	bf00      	nop
 80192da:	3754      	adds	r7, #84	@ 0x54
 80192dc:	46bd      	mov	sp, r7
 80192de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e2:	4770      	bx	lr
 80192e4:	effffffe 	.word	0xeffffffe

080192e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b084      	sub	sp, #16
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	2200      	movs	r2, #0
 80192fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80192fe:	68f8      	ldr	r0, [r7, #12]
 8019300:	f7fe fe2e 	bl	8017f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019304:	bf00      	nop
 8019306:	3710      	adds	r7, #16
 8019308:	46bd      	mov	sp, r7
 801930a:	bd80      	pop	{r7, pc}

0801930c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801930c:	b480      	push	{r7}
 801930e:	b08f      	sub	sp, #60	@ 0x3c
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801931a:	2b21      	cmp	r3, #33	@ 0x21
 801931c:	d14c      	bne.n	80193b8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019324:	b29b      	uxth	r3, r3
 8019326:	2b00      	cmp	r3, #0
 8019328:	d132      	bne.n	8019390 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019330:	6a3b      	ldr	r3, [r7, #32]
 8019332:	e853 3f00 	ldrex	r3, [r3]
 8019336:	61fb      	str	r3, [r7, #28]
   return(result);
 8019338:	69fb      	ldr	r3, [r7, #28]
 801933a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801933e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	461a      	mov	r2, r3
 8019346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801934a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801934c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801934e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019350:	e841 2300 	strex	r3, r2, [r1]
 8019354:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019358:	2b00      	cmp	r3, #0
 801935a:	d1e6      	bne.n	801932a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	e853 3f00 	ldrex	r3, [r3]
 8019368:	60bb      	str	r3, [r7, #8]
   return(result);
 801936a:	68bb      	ldr	r3, [r7, #8]
 801936c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019370:	633b      	str	r3, [r7, #48]	@ 0x30
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	461a      	mov	r2, r3
 8019378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801937a:	61bb      	str	r3, [r7, #24]
 801937c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801937e:	6979      	ldr	r1, [r7, #20]
 8019380:	69ba      	ldr	r2, [r7, #24]
 8019382:	e841 2300 	strex	r3, r2, [r1]
 8019386:	613b      	str	r3, [r7, #16]
   return(result);
 8019388:	693b      	ldr	r3, [r7, #16]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d1e6      	bne.n	801935c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801938e:	e013      	b.n	80193b8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019394:	781a      	ldrb	r2, [r3, #0]
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80193a0:	1c5a      	adds	r2, r3, #1
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80193ac:	b29b      	uxth	r3, r3
 80193ae:	3b01      	subs	r3, #1
 80193b0:	b29a      	uxth	r2, r3
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80193b8:	bf00      	nop
 80193ba:	373c      	adds	r7, #60	@ 0x3c
 80193bc:	46bd      	mov	sp, r7
 80193be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c2:	4770      	bx	lr

080193c4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80193c4:	b480      	push	{r7}
 80193c6:	b091      	sub	sp, #68	@ 0x44
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80193d2:	2b21      	cmp	r3, #33	@ 0x21
 80193d4:	d151      	bne.n	801947a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80193dc:	b29b      	uxth	r3, r3
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d132      	bne.n	8019448 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ea:	e853 3f00 	ldrex	r3, [r3]
 80193ee:	623b      	str	r3, [r7, #32]
   return(result);
 80193f0:	6a3b      	ldr	r3, [r7, #32]
 80193f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80193f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	461a      	mov	r2, r3
 80193fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019400:	633b      	str	r3, [r7, #48]	@ 0x30
 8019402:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019404:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019408:	e841 2300 	strex	r3, r2, [r1]
 801940c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801940e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019410:	2b00      	cmp	r3, #0
 8019412:	d1e6      	bne.n	80193e2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801941a:	693b      	ldr	r3, [r7, #16]
 801941c:	e853 3f00 	ldrex	r3, [r3]
 8019420:	60fb      	str	r3, [r7, #12]
   return(result);
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019428:	637b      	str	r3, [r7, #52]	@ 0x34
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	461a      	mov	r2, r3
 8019430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019432:	61fb      	str	r3, [r7, #28]
 8019434:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019436:	69b9      	ldr	r1, [r7, #24]
 8019438:	69fa      	ldr	r2, [r7, #28]
 801943a:	e841 2300 	strex	r3, r2, [r1]
 801943e:	617b      	str	r3, [r7, #20]
   return(result);
 8019440:	697b      	ldr	r3, [r7, #20]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d1e6      	bne.n	8019414 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8019446:	e018      	b.n	801947a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801944c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801944e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019450:	881b      	ldrh	r3, [r3, #0]
 8019452:	461a      	mov	r2, r3
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801945c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019462:	1c9a      	adds	r2, r3, #2
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801946e:	b29b      	uxth	r3, r3
 8019470:	3b01      	subs	r3, #1
 8019472:	b29a      	uxth	r2, r3
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 801947a:	bf00      	nop
 801947c:	3744      	adds	r7, #68	@ 0x44
 801947e:	46bd      	mov	sp, r7
 8019480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019484:	4770      	bx	lr

08019486 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019486:	b480      	push	{r7}
 8019488:	b091      	sub	sp, #68	@ 0x44
 801948a:	af00      	add	r7, sp, #0
 801948c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019494:	2b21      	cmp	r3, #33	@ 0x21
 8019496:	d160      	bne.n	801955a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801949e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80194a0:	e057      	b.n	8019552 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80194a8:	b29b      	uxth	r3, r3
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d133      	bne.n	8019516 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	3308      	adds	r3, #8
 80194b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194b8:	e853 3f00 	ldrex	r3, [r3]
 80194bc:	623b      	str	r3, [r7, #32]
   return(result);
 80194be:	6a3b      	ldr	r3, [r7, #32]
 80194c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80194c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	3308      	adds	r3, #8
 80194cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80194ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80194d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80194d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80194d6:	e841 2300 	strex	r3, r2, [r1]
 80194da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80194dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d1e5      	bne.n	80194ae <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194e8:	693b      	ldr	r3, [r7, #16]
 80194ea:	e853 3f00 	ldrex	r3, [r3]
 80194ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80194f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	461a      	mov	r2, r3
 80194fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019500:	61fb      	str	r3, [r7, #28]
 8019502:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019504:	69b9      	ldr	r1, [r7, #24]
 8019506:	69fa      	ldr	r2, [r7, #28]
 8019508:	e841 2300 	strex	r3, r2, [r1]
 801950c:	617b      	str	r3, [r7, #20]
   return(result);
 801950e:	697b      	ldr	r3, [r7, #20]
 8019510:	2b00      	cmp	r3, #0
 8019512:	d1e6      	bne.n	80194e2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019514:	e021      	b.n	801955a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	69db      	ldr	r3, [r3, #28]
 801951c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019520:	2b00      	cmp	r3, #0
 8019522:	d013      	beq.n	801954c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019528:	781a      	ldrb	r2, [r3, #0]
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019534:	1c5a      	adds	r2, r3, #1
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019540:	b29b      	uxth	r3, r3
 8019542:	3b01      	subs	r3, #1
 8019544:	b29a      	uxth	r2, r3
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801954c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801954e:	3b01      	subs	r3, #1
 8019550:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019552:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019554:	2b00      	cmp	r3, #0
 8019556:	d1a4      	bne.n	80194a2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019558:	e7ff      	b.n	801955a <UART_TxISR_8BIT_FIFOEN+0xd4>
 801955a:	bf00      	nop
 801955c:	3744      	adds	r7, #68	@ 0x44
 801955e:	46bd      	mov	sp, r7
 8019560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019564:	4770      	bx	lr

08019566 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019566:	b480      	push	{r7}
 8019568:	b091      	sub	sp, #68	@ 0x44
 801956a:	af00      	add	r7, sp, #0
 801956c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019574:	2b21      	cmp	r3, #33	@ 0x21
 8019576:	d165      	bne.n	8019644 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801957e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019580:	e05c      	b.n	801963c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019588:	b29b      	uxth	r3, r3
 801958a:	2b00      	cmp	r3, #0
 801958c:	d133      	bne.n	80195f6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	3308      	adds	r3, #8
 8019594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019596:	6a3b      	ldr	r3, [r7, #32]
 8019598:	e853 3f00 	ldrex	r3, [r3]
 801959c:	61fb      	str	r3, [r7, #28]
   return(result);
 801959e:	69fb      	ldr	r3, [r7, #28]
 80195a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80195a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	3308      	adds	r3, #8
 80195ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80195ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80195b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80195b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80195b6:	e841 2300 	strex	r3, r2, [r1]
 80195ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80195bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d1e5      	bne.n	801958e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	e853 3f00 	ldrex	r3, [r3]
 80195ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80195d0:	68bb      	ldr	r3, [r7, #8]
 80195d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80195d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	461a      	mov	r2, r3
 80195de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195e0:	61bb      	str	r3, [r7, #24]
 80195e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195e4:	6979      	ldr	r1, [r7, #20]
 80195e6:	69ba      	ldr	r2, [r7, #24]
 80195e8:	e841 2300 	strex	r3, r2, [r1]
 80195ec:	613b      	str	r3, [r7, #16]
   return(result);
 80195ee:	693b      	ldr	r3, [r7, #16]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d1e6      	bne.n	80195c2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80195f4:	e026      	b.n	8019644 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	69db      	ldr	r3, [r3, #28]
 80195fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019600:	2b00      	cmp	r3, #0
 8019602:	d018      	beq.n	8019636 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019608:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801960a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801960c:	881b      	ldrh	r3, [r3, #0]
 801960e:	461a      	mov	r2, r3
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019618:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801961e:	1c9a      	adds	r2, r3, #2
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801962a:	b29b      	uxth	r3, r3
 801962c:	3b01      	subs	r3, #1
 801962e:	b29a      	uxth	r2, r3
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019636:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019638:	3b01      	subs	r3, #1
 801963a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801963c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801963e:	2b00      	cmp	r3, #0
 8019640:	d19f      	bne.n	8019582 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019642:	e7ff      	b.n	8019644 <UART_TxISR_16BIT_FIFOEN+0xde>
 8019644:	bf00      	nop
 8019646:	3744      	adds	r7, #68	@ 0x44
 8019648:	46bd      	mov	sp, r7
 801964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801964e:	4770      	bx	lr

08019650 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b088      	sub	sp, #32
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	e853 3f00 	ldrex	r3, [r3]
 8019664:	60bb      	str	r3, [r7, #8]
   return(result);
 8019666:	68bb      	ldr	r3, [r7, #8]
 8019668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801966c:	61fb      	str	r3, [r7, #28]
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	461a      	mov	r2, r3
 8019674:	69fb      	ldr	r3, [r7, #28]
 8019676:	61bb      	str	r3, [r7, #24]
 8019678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801967a:	6979      	ldr	r1, [r7, #20]
 801967c:	69ba      	ldr	r2, [r7, #24]
 801967e:	e841 2300 	strex	r3, r2, [r1]
 8019682:	613b      	str	r3, [r7, #16]
   return(result);
 8019684:	693b      	ldr	r3, [r7, #16]
 8019686:	2b00      	cmp	r3, #0
 8019688:	d1e6      	bne.n	8019658 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	2220      	movs	r2, #32
 801968e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	2200      	movs	r2, #0
 8019696:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8019698:	6878      	ldr	r0, [r7, #4]
 801969a:	f7fe fc57 	bl	8017f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801969e:	bf00      	nop
 80196a0:	3720      	adds	r7, #32
 80196a2:	46bd      	mov	sp, r7
 80196a4:	bd80      	pop	{r7, pc}
	...

080196a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b09c      	sub	sp, #112	@ 0x70
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80196b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80196c0:	2b22      	cmp	r3, #34	@ 0x22
 80196c2:	f040 80be 	bne.w	8019842 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80196d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80196d4:	b2d9      	uxtb	r1, r3
 80196d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80196da:	b2da      	uxtb	r2, r3
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80196e0:	400a      	ands	r2, r1
 80196e2:	b2d2      	uxtb	r2, r2
 80196e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80196ea:	1c5a      	adds	r2, r3, #1
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80196f6:	b29b      	uxth	r3, r3
 80196f8:	3b01      	subs	r3, #1
 80196fa:	b29a      	uxth	r2, r3
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019708:	b29b      	uxth	r3, r3
 801970a:	2b00      	cmp	r3, #0
 801970c:	f040 80a1 	bne.w	8019852 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019718:	e853 3f00 	ldrex	r3, [r3]
 801971c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801971e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	461a      	mov	r2, r3
 801972c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801972e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019730:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019736:	e841 2300 	strex	r3, r2, [r1]
 801973a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801973c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801973e:	2b00      	cmp	r3, #0
 8019740:	d1e6      	bne.n	8019710 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	3308      	adds	r3, #8
 8019748:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801974a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801974c:	e853 3f00 	ldrex	r3, [r3]
 8019750:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019754:	f023 0301 	bic.w	r3, r3, #1
 8019758:	667b      	str	r3, [r7, #100]	@ 0x64
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	3308      	adds	r3, #8
 8019760:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8019762:	647a      	str	r2, [r7, #68]	@ 0x44
 8019764:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019766:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801976a:	e841 2300 	strex	r3, r2, [r1]
 801976e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019772:	2b00      	cmp	r3, #0
 8019774:	d1e5      	bne.n	8019742 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	2220      	movs	r2, #32
 801977a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	2200      	movs	r2, #0
 8019782:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	2200      	movs	r2, #0
 8019788:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	4a33      	ldr	r2, [pc, #204]	@ (801985c <UART_RxISR_8BIT+0x1b4>)
 8019790:	4293      	cmp	r3, r2
 8019792:	d01f      	beq.n	80197d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	685b      	ldr	r3, [r3, #4]
 801979a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d018      	beq.n	80197d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197aa:	e853 3f00 	ldrex	r3, [r3]
 80197ae:	623b      	str	r3, [r7, #32]
   return(result);
 80197b0:	6a3b      	ldr	r3, [r7, #32]
 80197b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80197b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	461a      	mov	r2, r3
 80197be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80197c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80197c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80197c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80197c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80197c8:	e841 2300 	strex	r3, r2, [r1]
 80197cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80197ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d1e6      	bne.n	80197a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80197d8:	2b01      	cmp	r3, #1
 80197da:	d12e      	bne.n	801983a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	2200      	movs	r2, #0
 80197e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197e8:	693b      	ldr	r3, [r7, #16]
 80197ea:	e853 3f00 	ldrex	r3, [r3]
 80197ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	f023 0310 	bic.w	r3, r3, #16
 80197f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	461a      	mov	r2, r3
 80197fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019800:	61fb      	str	r3, [r7, #28]
 8019802:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019804:	69b9      	ldr	r1, [r7, #24]
 8019806:	69fa      	ldr	r2, [r7, #28]
 8019808:	e841 2300 	strex	r3, r2, [r1]
 801980c:	617b      	str	r3, [r7, #20]
   return(result);
 801980e:	697b      	ldr	r3, [r7, #20]
 8019810:	2b00      	cmp	r3, #0
 8019812:	d1e6      	bne.n	80197e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	69db      	ldr	r3, [r3, #28]
 801981a:	f003 0310 	and.w	r3, r3, #16
 801981e:	2b10      	cmp	r3, #16
 8019820:	d103      	bne.n	801982a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	2210      	movs	r2, #16
 8019828:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019830:	4619      	mov	r1, r3
 8019832:	6878      	ldr	r0, [r7, #4]
 8019834:	f7fe fb9e 	bl	8017f74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019838:	e00b      	b.n	8019852 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801983a:	6878      	ldr	r0, [r7, #4]
 801983c:	f7ec fa32 	bl	8005ca4 <HAL_UART_RxCpltCallback>
}
 8019840:	e007      	b.n	8019852 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	699a      	ldr	r2, [r3, #24]
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	f042 0208 	orr.w	r2, r2, #8
 8019850:	619a      	str	r2, [r3, #24]
}
 8019852:	bf00      	nop
 8019854:	3770      	adds	r7, #112	@ 0x70
 8019856:	46bd      	mov	sp, r7
 8019858:	bd80      	pop	{r7, pc}
 801985a:	bf00      	nop
 801985c:	58000c00 	.word	0x58000c00

08019860 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019860:	b580      	push	{r7, lr}
 8019862:	b09c      	sub	sp, #112	@ 0x70
 8019864:	af00      	add	r7, sp, #0
 8019866:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801986e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019878:	2b22      	cmp	r3, #34	@ 0x22
 801987a:	f040 80be 	bne.w	80199fa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019884:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801988c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801988e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8019892:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019896:	4013      	ands	r3, r2
 8019898:	b29a      	uxth	r2, r3
 801989a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801989c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80198a2:	1c9a      	adds	r2, r3, #2
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80198ae:	b29b      	uxth	r3, r3
 80198b0:	3b01      	subs	r3, #1
 80198b2:	b29a      	uxth	r2, r3
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80198c0:	b29b      	uxth	r3, r3
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	f040 80a1 	bne.w	8019a0a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80198d0:	e853 3f00 	ldrex	r3, [r3]
 80198d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80198d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80198d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80198dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	461a      	mov	r2, r3
 80198e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80198e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80198e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80198ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80198ee:	e841 2300 	strex	r3, r2, [r1]
 80198f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80198f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d1e6      	bne.n	80198c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	3308      	adds	r3, #8
 8019900:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019904:	e853 3f00 	ldrex	r3, [r3]
 8019908:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801990a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801990c:	f023 0301 	bic.w	r3, r3, #1
 8019910:	663b      	str	r3, [r7, #96]	@ 0x60
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	3308      	adds	r3, #8
 8019918:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801991a:	643a      	str	r2, [r7, #64]	@ 0x40
 801991c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801991e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019920:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019922:	e841 2300 	strex	r3, r2, [r1]
 8019926:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801992a:	2b00      	cmp	r3, #0
 801992c:	d1e5      	bne.n	80198fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	2220      	movs	r2, #32
 8019932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	2200      	movs	r2, #0
 801993a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	2200      	movs	r2, #0
 8019940:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	4a33      	ldr	r2, [pc, #204]	@ (8019a14 <UART_RxISR_16BIT+0x1b4>)
 8019948:	4293      	cmp	r3, r2
 801994a:	d01f      	beq.n	801998c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	685b      	ldr	r3, [r3, #4]
 8019952:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019956:	2b00      	cmp	r3, #0
 8019958:	d018      	beq.n	801998c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019960:	6a3b      	ldr	r3, [r7, #32]
 8019962:	e853 3f00 	ldrex	r3, [r3]
 8019966:	61fb      	str	r3, [r7, #28]
   return(result);
 8019968:	69fb      	ldr	r3, [r7, #28]
 801996a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801996e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	461a      	mov	r2, r3
 8019976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801997a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801997c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801997e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019980:	e841 2300 	strex	r3, r2, [r1]
 8019984:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019988:	2b00      	cmp	r3, #0
 801998a:	d1e6      	bne.n	801995a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019990:	2b01      	cmp	r3, #1
 8019992:	d12e      	bne.n	80199f2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	2200      	movs	r2, #0
 8019998:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	e853 3f00 	ldrex	r3, [r3]
 80199a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80199a8:	68bb      	ldr	r3, [r7, #8]
 80199aa:	f023 0310 	bic.w	r3, r3, #16
 80199ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	461a      	mov	r2, r3
 80199b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80199b8:	61bb      	str	r3, [r7, #24]
 80199ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80199bc:	6979      	ldr	r1, [r7, #20]
 80199be:	69ba      	ldr	r2, [r7, #24]
 80199c0:	e841 2300 	strex	r3, r2, [r1]
 80199c4:	613b      	str	r3, [r7, #16]
   return(result);
 80199c6:	693b      	ldr	r3, [r7, #16]
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d1e6      	bne.n	801999a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	69db      	ldr	r3, [r3, #28]
 80199d2:	f003 0310 	and.w	r3, r3, #16
 80199d6:	2b10      	cmp	r3, #16
 80199d8:	d103      	bne.n	80199e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	2210      	movs	r2, #16
 80199e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80199e8:	4619      	mov	r1, r3
 80199ea:	6878      	ldr	r0, [r7, #4]
 80199ec:	f7fe fac2 	bl	8017f74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80199f0:	e00b      	b.n	8019a0a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80199f2:	6878      	ldr	r0, [r7, #4]
 80199f4:	f7ec f956 	bl	8005ca4 <HAL_UART_RxCpltCallback>
}
 80199f8:	e007      	b.n	8019a0a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	699a      	ldr	r2, [r3, #24]
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	f042 0208 	orr.w	r2, r2, #8
 8019a08:	619a      	str	r2, [r3, #24]
}
 8019a0a:	bf00      	nop
 8019a0c:	3770      	adds	r7, #112	@ 0x70
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	bd80      	pop	{r7, pc}
 8019a12:	bf00      	nop
 8019a14:	58000c00 	.word	0x58000c00

08019a18 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019a18:	b580      	push	{r7, lr}
 8019a1a:	b0ac      	sub	sp, #176	@ 0xb0
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019a26:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	69db      	ldr	r3, [r3, #28]
 8019a30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	689b      	ldr	r3, [r3, #8]
 8019a44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019a4e:	2b22      	cmp	r3, #34	@ 0x22
 8019a50:	f040 8181 	bne.w	8019d56 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019a5a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019a5e:	e124      	b.n	8019caa <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019a66:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019a6a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8019a6e:	b2d9      	uxtb	r1, r3
 8019a70:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8019a74:	b2da      	uxtb	r2, r3
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019a7a:	400a      	ands	r2, r1
 8019a7c:	b2d2      	uxtb	r2, r2
 8019a7e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019a84:	1c5a      	adds	r2, r3, #1
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019a90:	b29b      	uxth	r3, r3
 8019a92:	3b01      	subs	r3, #1
 8019a94:	b29a      	uxth	r2, r3
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	69db      	ldr	r3, [r3, #28]
 8019aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019aaa:	f003 0307 	and.w	r3, r3, #7
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d053      	beq.n	8019b5a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019ab6:	f003 0301 	and.w	r3, r3, #1
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d011      	beq.n	8019ae2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8019abe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8019ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d00b      	beq.n	8019ae2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	2201      	movs	r2, #1
 8019ad0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019ad8:	f043 0201 	orr.w	r2, r3, #1
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019ae6:	f003 0302 	and.w	r3, r3, #2
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d011      	beq.n	8019b12 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8019aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019af2:	f003 0301 	and.w	r3, r3, #1
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d00b      	beq.n	8019b12 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	2202      	movs	r2, #2
 8019b00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019b08:	f043 0204 	orr.w	r2, r3, #4
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019b16:	f003 0304 	and.w	r3, r3, #4
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d011      	beq.n	8019b42 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8019b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019b22:	f003 0301 	and.w	r3, r3, #1
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d00b      	beq.n	8019b42 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	2204      	movs	r2, #4
 8019b30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019b38:	f043 0202 	orr.w	r2, r3, #2
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d006      	beq.n	8019b5a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019b4c:	6878      	ldr	r0, [r7, #4]
 8019b4e:	f7fe fa07 	bl	8017f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	2200      	movs	r2, #0
 8019b56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019b60:	b29b      	uxth	r3, r3
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	f040 80a1 	bne.w	8019caa <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019b70:	e853 3f00 	ldrex	r3, [r3]
 8019b74:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8019b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019b7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	461a      	mov	r2, r3
 8019b86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019b8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019b8c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b8e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8019b90:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019b92:	e841 2300 	strex	r3, r2, [r1]
 8019b96:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8019b98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d1e4      	bne.n	8019b68 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	3308      	adds	r3, #8
 8019ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019ba8:	e853 3f00 	ldrex	r3, [r3]
 8019bac:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8019bae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8019d70 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8019bb2:	4013      	ands	r3, r2
 8019bb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	3308      	adds	r3, #8
 8019bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8019bc2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8019bc4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bc6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8019bc8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8019bca:	e841 2300 	strex	r3, r2, [r1]
 8019bce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019bd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d1e3      	bne.n	8019b9e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	2220      	movs	r2, #32
 8019bda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	2200      	movs	r2, #0
 8019be2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	2200      	movs	r2, #0
 8019be8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	4a61      	ldr	r2, [pc, #388]	@ (8019d74 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8019bf0:	4293      	cmp	r3, r2
 8019bf2:	d021      	beq.n	8019c38 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	685b      	ldr	r3, [r3, #4]
 8019bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d01a      	beq.n	8019c38 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019c0a:	e853 3f00 	ldrex	r3, [r3]
 8019c0e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8019c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019c12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	461a      	mov	r2, r3
 8019c20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8019c24:	657b      	str	r3, [r7, #84]	@ 0x54
 8019c26:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c28:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019c2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019c2c:	e841 2300 	strex	r3, r2, [r1]
 8019c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d1e4      	bne.n	8019c02 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019c3c:	2b01      	cmp	r3, #1
 8019c3e:	d130      	bne.n	8019ca2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	2200      	movs	r2, #0
 8019c44:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c4e:	e853 3f00 	ldrex	r3, [r3]
 8019c52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c56:	f023 0310 	bic.w	r3, r3, #16
 8019c5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	461a      	mov	r2, r3
 8019c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8019c6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019c6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019c70:	e841 2300 	strex	r3, r2, [r1]
 8019c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d1e4      	bne.n	8019c46 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	69db      	ldr	r3, [r3, #28]
 8019c82:	f003 0310 	and.w	r3, r3, #16
 8019c86:	2b10      	cmp	r3, #16
 8019c88:	d103      	bne.n	8019c92 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	2210      	movs	r2, #16
 8019c90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019c98:	4619      	mov	r1, r3
 8019c9a:	6878      	ldr	r0, [r7, #4]
 8019c9c:	f7fe f96a 	bl	8017f74 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8019ca0:	e00e      	b.n	8019cc0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8019ca2:	6878      	ldr	r0, [r7, #4]
 8019ca4:	f7eb fffe 	bl	8005ca4 <HAL_UART_RxCpltCallback>
        break;
 8019ca8:	e00a      	b.n	8019cc0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019caa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d006      	beq.n	8019cc0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8019cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019cb6:	f003 0320 	and.w	r3, r3, #32
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	f47f aed0 	bne.w	8019a60 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019cc6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8019cca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d049      	beq.n	8019d66 <UART_RxISR_8BIT_FIFOEN+0x34e>
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019cd8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8019cdc:	429a      	cmp	r2, r3
 8019cde:	d242      	bcs.n	8019d66 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	3308      	adds	r3, #8
 8019ce6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ce8:	6a3b      	ldr	r3, [r7, #32]
 8019cea:	e853 3f00 	ldrex	r3, [r3]
 8019cee:	61fb      	str	r3, [r7, #28]
   return(result);
 8019cf0:	69fb      	ldr	r3, [r7, #28]
 8019cf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8019cf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	3308      	adds	r3, #8
 8019d00:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019d04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019d0c:	e841 2300 	strex	r3, r2, [r1]
 8019d10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d1e3      	bne.n	8019ce0 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	4a17      	ldr	r2, [pc, #92]	@ (8019d78 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8019d1c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	e853 3f00 	ldrex	r3, [r3]
 8019d2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8019d2c:	68bb      	ldr	r3, [r7, #8]
 8019d2e:	f043 0320 	orr.w	r3, r3, #32
 8019d32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	461a      	mov	r2, r3
 8019d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019d40:	61bb      	str	r3, [r7, #24]
 8019d42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d44:	6979      	ldr	r1, [r7, #20]
 8019d46:	69ba      	ldr	r2, [r7, #24]
 8019d48:	e841 2300 	strex	r3, r2, [r1]
 8019d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8019d4e:	693b      	ldr	r3, [r7, #16]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d1e4      	bne.n	8019d1e <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019d54:	e007      	b.n	8019d66 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	699a      	ldr	r2, [r3, #24]
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	f042 0208 	orr.w	r2, r2, #8
 8019d64:	619a      	str	r2, [r3, #24]
}
 8019d66:	bf00      	nop
 8019d68:	37b0      	adds	r7, #176	@ 0xb0
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	bd80      	pop	{r7, pc}
 8019d6e:	bf00      	nop
 8019d70:	effffffe 	.word	0xeffffffe
 8019d74:	58000c00 	.word	0x58000c00
 8019d78:	080196a9 	.word	0x080196a9

08019d7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019d7c:	b580      	push	{r7, lr}
 8019d7e:	b0ae      	sub	sp, #184	@ 0xb8
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019d8a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	69db      	ldr	r3, [r3, #28]
 8019d94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	689b      	ldr	r3, [r3, #8]
 8019da8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019db2:	2b22      	cmp	r3, #34	@ 0x22
 8019db4:	f040 8185 	bne.w	801a0c2 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019dbe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019dc2:	e128      	b.n	801a016 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019dca:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8019dd6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8019dda:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8019dde:	4013      	ands	r3, r2
 8019de0:	b29a      	uxth	r2, r3
 8019de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019de6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019dec:	1c9a      	adds	r2, r3, #2
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019df8:	b29b      	uxth	r3, r3
 8019dfa:	3b01      	subs	r3, #1
 8019dfc:	b29a      	uxth	r2, r3
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	69db      	ldr	r3, [r3, #28]
 8019e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019e0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019e12:	f003 0307 	and.w	r3, r3, #7
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d053      	beq.n	8019ec2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019e1e:	f003 0301 	and.w	r3, r3, #1
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d011      	beq.n	8019e4a <UART_RxISR_16BIT_FIFOEN+0xce>
 8019e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d00b      	beq.n	8019e4a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	2201      	movs	r2, #1
 8019e38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e40:	f043 0201 	orr.w	r2, r3, #1
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019e4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019e4e:	f003 0302 	and.w	r3, r3, #2
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d011      	beq.n	8019e7a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8019e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8019e5a:	f003 0301 	and.w	r3, r3, #1
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d00b      	beq.n	8019e7a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	2202      	movs	r2, #2
 8019e68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e70:	f043 0204 	orr.w	r2, r3, #4
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019e7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019e7e:	f003 0304 	and.w	r3, r3, #4
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d011      	beq.n	8019eaa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8019e86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8019e8a:	f003 0301 	and.w	r3, r3, #1
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d00b      	beq.n	8019eaa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	2204      	movs	r2, #4
 8019e98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019ea0:	f043 0202 	orr.w	r2, r3, #2
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d006      	beq.n	8019ec2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019eb4:	6878      	ldr	r0, [r7, #4]
 8019eb6:	f7fe f853 	bl	8017f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	2200      	movs	r2, #0
 8019ebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019ec8:	b29b      	uxth	r3, r3
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	f040 80a3 	bne.w	801a016 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ed6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019ed8:	e853 3f00 	ldrex	r3, [r3]
 8019edc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8019ede:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	461a      	mov	r2, r3
 8019eee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8019ef2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019ef6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ef8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8019efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8019efe:	e841 2300 	strex	r3, r2, [r1]
 8019f02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8019f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d1e2      	bne.n	8019ed0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	3308      	adds	r3, #8
 8019f10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019f14:	e853 3f00 	ldrex	r3, [r3]
 8019f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8019f1a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019f1c:	4b6f      	ldr	r3, [pc, #444]	@ (801a0dc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8019f1e:	4013      	ands	r3, r2
 8019f20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	3308      	adds	r3, #8
 8019f2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8019f2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8019f30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8019f34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8019f36:	e841 2300 	strex	r3, r2, [r1]
 8019f3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8019f3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d1e3      	bne.n	8019f0a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	2220      	movs	r2, #32
 8019f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	2200      	movs	r2, #0
 8019f54:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	4a61      	ldr	r2, [pc, #388]	@ (801a0e0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8019f5c:	4293      	cmp	r3, r2
 8019f5e:	d021      	beq.n	8019fa4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	685b      	ldr	r3, [r3, #4]
 8019f66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d01a      	beq.n	8019fa4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019f76:	e853 3f00 	ldrex	r3, [r3]
 8019f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8019f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019f7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019f82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	461a      	mov	r2, r3
 8019f8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019f90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019f92:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019f96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019f98:	e841 2300 	strex	r3, r2, [r1]
 8019f9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8019f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d1e4      	bne.n	8019f6e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019fa8:	2b01      	cmp	r3, #1
 8019faa:	d130      	bne.n	801a00e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	2200      	movs	r2, #0
 8019fb0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019fba:	e853 3f00 	ldrex	r3, [r3]
 8019fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019fc2:	f023 0310 	bic.w	r3, r3, #16
 8019fc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	461a      	mov	r2, r3
 8019fd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8019fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8019fd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019fdc:	e841 2300 	strex	r3, r2, [r1]
 8019fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d1e4      	bne.n	8019fb2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	69db      	ldr	r3, [r3, #28]
 8019fee:	f003 0310 	and.w	r3, r3, #16
 8019ff2:	2b10      	cmp	r3, #16
 8019ff4:	d103      	bne.n	8019ffe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	2210      	movs	r2, #16
 8019ffc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a004:	4619      	mov	r1, r3
 801a006:	6878      	ldr	r0, [r7, #4]
 801a008:	f7fd ffb4 	bl	8017f74 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a00c:	e00e      	b.n	801a02c <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801a00e:	6878      	ldr	r0, [r7, #4]
 801a010:	f7eb fe48 	bl	8005ca4 <HAL_UART_RxCpltCallback>
        break;
 801a014:	e00a      	b.n	801a02c <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a016:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d006      	beq.n	801a02c <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801a01e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a022:	f003 0320 	and.w	r3, r3, #32
 801a026:	2b00      	cmp	r3, #0
 801a028:	f47f aecc 	bne.w	8019dc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a032:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a036:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d049      	beq.n	801a0d2 <UART_RxISR_16BIT_FIFOEN+0x356>
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a044:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801a048:	429a      	cmp	r2, r3
 801a04a:	d242      	bcs.n	801a0d2 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	3308      	adds	r3, #8
 801a052:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a056:	e853 3f00 	ldrex	r3, [r3]
 801a05a:	623b      	str	r3, [r7, #32]
   return(result);
 801a05c:	6a3b      	ldr	r3, [r7, #32]
 801a05e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a062:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	3308      	adds	r3, #8
 801a06c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a070:	633a      	str	r2, [r7, #48]	@ 0x30
 801a072:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a074:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a078:	e841 2300 	strex	r3, r2, [r1]
 801a07c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a080:	2b00      	cmp	r3, #0
 801a082:	d1e3      	bne.n	801a04c <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	4a17      	ldr	r2, [pc, #92]	@ (801a0e4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 801a088:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a090:	693b      	ldr	r3, [r7, #16]
 801a092:	e853 3f00 	ldrex	r3, [r3]
 801a096:	60fb      	str	r3, [r7, #12]
   return(result);
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	f043 0320 	orr.w	r3, r3, #32
 801a09e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	681b      	ldr	r3, [r3, #0]
 801a0a6:	461a      	mov	r2, r3
 801a0a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a0ac:	61fb      	str	r3, [r7, #28]
 801a0ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0b0:	69b9      	ldr	r1, [r7, #24]
 801a0b2:	69fa      	ldr	r2, [r7, #28]
 801a0b4:	e841 2300 	strex	r3, r2, [r1]
 801a0b8:	617b      	str	r3, [r7, #20]
   return(result);
 801a0ba:	697b      	ldr	r3, [r7, #20]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d1e4      	bne.n	801a08a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a0c0:	e007      	b.n	801a0d2 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	699a      	ldr	r2, [r3, #24]
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	f042 0208 	orr.w	r2, r2, #8
 801a0d0:	619a      	str	r2, [r3, #24]
}
 801a0d2:	bf00      	nop
 801a0d4:	37b8      	adds	r7, #184	@ 0xb8
 801a0d6:	46bd      	mov	sp, r7
 801a0d8:	bd80      	pop	{r7, pc}
 801a0da:	bf00      	nop
 801a0dc:	effffffe 	.word	0xeffffffe
 801a0e0:	58000c00 	.word	0x58000c00
 801a0e4:	08019861 	.word	0x08019861

0801a0e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a0e8:	b480      	push	{r7}
 801a0ea:	b083      	sub	sp, #12
 801a0ec:	af00      	add	r7, sp, #0
 801a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a0f0:	bf00      	nop
 801a0f2:	370c      	adds	r7, #12
 801a0f4:	46bd      	mov	sp, r7
 801a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0fa:	4770      	bx	lr

0801a0fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a0fc:	b480      	push	{r7}
 801a0fe:	b083      	sub	sp, #12
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a104:	bf00      	nop
 801a106:	370c      	adds	r7, #12
 801a108:	46bd      	mov	sp, r7
 801a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a10e:	4770      	bx	lr

0801a110 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a110:	b480      	push	{r7}
 801a112:	b083      	sub	sp, #12
 801a114:	af00      	add	r7, sp, #0
 801a116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a118:	bf00      	nop
 801a11a:	370c      	adds	r7, #12
 801a11c:	46bd      	mov	sp, r7
 801a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a122:	4770      	bx	lr

0801a124 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a124:	b480      	push	{r7}
 801a126:	b085      	sub	sp, #20
 801a128:	af00      	add	r7, sp, #0
 801a12a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a132:	2b01      	cmp	r3, #1
 801a134:	d101      	bne.n	801a13a <HAL_UARTEx_DisableFifoMode+0x16>
 801a136:	2302      	movs	r3, #2
 801a138:	e027      	b.n	801a18a <HAL_UARTEx_DisableFifoMode+0x66>
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	2201      	movs	r2, #1
 801a13e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	2224      	movs	r2, #36	@ 0x24
 801a146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	681a      	ldr	r2, [r3, #0]
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	f022 0201 	bic.w	r2, r2, #1
 801a160:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801a168:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	2200      	movs	r2, #0
 801a16e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	68fa      	ldr	r2, [r7, #12]
 801a176:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	2220      	movs	r2, #32
 801a17c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	2200      	movs	r2, #0
 801a184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a188:	2300      	movs	r3, #0
}
 801a18a:	4618      	mov	r0, r3
 801a18c:	3714      	adds	r7, #20
 801a18e:	46bd      	mov	sp, r7
 801a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a194:	4770      	bx	lr

0801a196 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a196:	b580      	push	{r7, lr}
 801a198:	b084      	sub	sp, #16
 801a19a:	af00      	add	r7, sp, #0
 801a19c:	6078      	str	r0, [r7, #4]
 801a19e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a1a6:	2b01      	cmp	r3, #1
 801a1a8:	d101      	bne.n	801a1ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a1aa:	2302      	movs	r3, #2
 801a1ac:	e02d      	b.n	801a20a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	2201      	movs	r2, #1
 801a1b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	2224      	movs	r2, #36	@ 0x24
 801a1ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	681a      	ldr	r2, [r3, #0]
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	f022 0201 	bic.w	r2, r2, #1
 801a1d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	689b      	ldr	r3, [r3, #8]
 801a1dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	683a      	ldr	r2, [r7, #0]
 801a1e6:	430a      	orrs	r2, r1
 801a1e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a1ea:	6878      	ldr	r0, [r7, #4]
 801a1ec:	f000 f850 	bl	801a290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	68fa      	ldr	r2, [r7, #12]
 801a1f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	2220      	movs	r2, #32
 801a1fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	2200      	movs	r2, #0
 801a204:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a208:	2300      	movs	r3, #0
}
 801a20a:	4618      	mov	r0, r3
 801a20c:	3710      	adds	r7, #16
 801a20e:	46bd      	mov	sp, r7
 801a210:	bd80      	pop	{r7, pc}

0801a212 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a212:	b580      	push	{r7, lr}
 801a214:	b084      	sub	sp, #16
 801a216:	af00      	add	r7, sp, #0
 801a218:	6078      	str	r0, [r7, #4]
 801a21a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a222:	2b01      	cmp	r3, #1
 801a224:	d101      	bne.n	801a22a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a226:	2302      	movs	r3, #2
 801a228:	e02d      	b.n	801a286 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	2201      	movs	r2, #1
 801a22e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	2224      	movs	r2, #36	@ 0x24
 801a236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	681a      	ldr	r2, [r3, #0]
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	f022 0201 	bic.w	r2, r2, #1
 801a250:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	689b      	ldr	r3, [r3, #8]
 801a258:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	683a      	ldr	r2, [r7, #0]
 801a262:	430a      	orrs	r2, r1
 801a264:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a266:	6878      	ldr	r0, [r7, #4]
 801a268:	f000 f812 	bl	801a290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	68fa      	ldr	r2, [r7, #12]
 801a272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	2220      	movs	r2, #32
 801a278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	2200      	movs	r2, #0
 801a280:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a284:	2300      	movs	r3, #0
}
 801a286:	4618      	mov	r0, r3
 801a288:	3710      	adds	r7, #16
 801a28a:	46bd      	mov	sp, r7
 801a28c:	bd80      	pop	{r7, pc}
	...

0801a290 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a290:	b480      	push	{r7}
 801a292:	b085      	sub	sp, #20
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d108      	bne.n	801a2b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	2201      	movs	r2, #1
 801a2a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	2201      	movs	r2, #1
 801a2ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a2b0:	e031      	b.n	801a316 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a2b2:	2310      	movs	r3, #16
 801a2b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a2b6:	2310      	movs	r3, #16
 801a2b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	689b      	ldr	r3, [r3, #8]
 801a2c0:	0e5b      	lsrs	r3, r3, #25
 801a2c2:	b2db      	uxtb	r3, r3
 801a2c4:	f003 0307 	and.w	r3, r3, #7
 801a2c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	689b      	ldr	r3, [r3, #8]
 801a2d0:	0f5b      	lsrs	r3, r3, #29
 801a2d2:	b2db      	uxtb	r3, r3
 801a2d4:	f003 0307 	and.w	r3, r3, #7
 801a2d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a2da:	7bbb      	ldrb	r3, [r7, #14]
 801a2dc:	7b3a      	ldrb	r2, [r7, #12]
 801a2de:	4911      	ldr	r1, [pc, #68]	@ (801a324 <UARTEx_SetNbDataToProcess+0x94>)
 801a2e0:	5c8a      	ldrb	r2, [r1, r2]
 801a2e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801a2e6:	7b3a      	ldrb	r2, [r7, #12]
 801a2e8:	490f      	ldr	r1, [pc, #60]	@ (801a328 <UARTEx_SetNbDataToProcess+0x98>)
 801a2ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a2ec:	fb93 f3f2 	sdiv	r3, r3, r2
 801a2f0:	b29a      	uxth	r2, r3
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a2f8:	7bfb      	ldrb	r3, [r7, #15]
 801a2fa:	7b7a      	ldrb	r2, [r7, #13]
 801a2fc:	4909      	ldr	r1, [pc, #36]	@ (801a324 <UARTEx_SetNbDataToProcess+0x94>)
 801a2fe:	5c8a      	ldrb	r2, [r1, r2]
 801a300:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801a304:	7b7a      	ldrb	r2, [r7, #13]
 801a306:	4908      	ldr	r1, [pc, #32]	@ (801a328 <UARTEx_SetNbDataToProcess+0x98>)
 801a308:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a30a:	fb93 f3f2 	sdiv	r3, r3, r2
 801a30e:	b29a      	uxth	r2, r3
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801a316:	bf00      	nop
 801a318:	3714      	adds	r7, #20
 801a31a:	46bd      	mov	sp, r7
 801a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a320:	4770      	bx	lr
 801a322:	bf00      	nop
 801a324:	0801e198 	.word	0x0801e198
 801a328:	0801e1a0 	.word	0x0801e1a0

0801a32c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801a330:	4904      	ldr	r1, [pc, #16]	@ (801a344 <MX_FATFS_Init+0x18>)
 801a332:	4805      	ldr	r0, [pc, #20]	@ (801a348 <MX_FATFS_Init+0x1c>)
 801a334:	f003 f8d8 	bl	801d4e8 <FATFS_LinkDriver>
 801a338:	4603      	mov	r3, r0
 801a33a:	461a      	mov	r2, r3
 801a33c:	4b03      	ldr	r3, [pc, #12]	@ (801a34c <MX_FATFS_Init+0x20>)
 801a33e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801a340:	bf00      	nop
 801a342:	bd80      	pop	{r7, pc}
 801a344:	2400054c 	.word	0x2400054c
 801a348:	24000014 	.word	0x24000014
 801a34c:	24000548 	.word	0x24000548

0801a350 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801a350:	b480      	push	{r7}
 801a352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801a354:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801a356:	4618      	mov	r0, r3
 801a358:	46bd      	mov	sp, r7
 801a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a35e:	4770      	bx	lr

0801a360 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b082      	sub	sp, #8
 801a364:	af00      	add	r7, sp, #0
 801a366:	4603      	mov	r3, r0
 801a368:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801a36a:	79fb      	ldrb	r3, [r7, #7]
 801a36c:	4618      	mov	r0, r3
 801a36e:	f7e9 fe25 	bl	8003fbc <SD_disk_initialize>
 801a372:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801a374:	4618      	mov	r0, r3
 801a376:	3708      	adds	r7, #8
 801a378:	46bd      	mov	sp, r7
 801a37a:	bd80      	pop	{r7, pc}

0801a37c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801a37c:	b580      	push	{r7, lr}
 801a37e:	b082      	sub	sp, #8
 801a380:	af00      	add	r7, sp, #0
 801a382:	4603      	mov	r3, r0
 801a384:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801a386:	79fb      	ldrb	r3, [r7, #7]
 801a388:	4618      	mov	r0, r3
 801a38a:	f7e9 ff03 	bl	8004194 <SD_disk_status>
 801a38e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801a390:	4618      	mov	r0, r3
 801a392:	3708      	adds	r7, #8
 801a394:	46bd      	mov	sp, r7
 801a396:	bd80      	pop	{r7, pc}

0801a398 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b084      	sub	sp, #16
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	60b9      	str	r1, [r7, #8]
 801a3a0:	607a      	str	r2, [r7, #4]
 801a3a2:	603b      	str	r3, [r7, #0]
 801a3a4:	4603      	mov	r3, r0
 801a3a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801a3a8:	7bf8      	ldrb	r0, [r7, #15]
 801a3aa:	683b      	ldr	r3, [r7, #0]
 801a3ac:	687a      	ldr	r2, [r7, #4]
 801a3ae:	68b9      	ldr	r1, [r7, #8]
 801a3b0:	f7e9 ff06 	bl	80041c0 <SD_disk_read>
 801a3b4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801a3b6:	4618      	mov	r0, r3
 801a3b8:	3710      	adds	r7, #16
 801a3ba:	46bd      	mov	sp, r7
 801a3bc:	bd80      	pop	{r7, pc}

0801a3be <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801a3be:	b580      	push	{r7, lr}
 801a3c0:	b084      	sub	sp, #16
 801a3c2:	af00      	add	r7, sp, #0
 801a3c4:	60b9      	str	r1, [r7, #8]
 801a3c6:	607a      	str	r2, [r7, #4]
 801a3c8:	603b      	str	r3, [r7, #0]
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801a3ce:	7bf8      	ldrb	r0, [r7, #15]
 801a3d0:	683b      	ldr	r3, [r7, #0]
 801a3d2:	687a      	ldr	r2, [r7, #4]
 801a3d4:	68b9      	ldr	r1, [r7, #8]
 801a3d6:	f7e9 ff5d 	bl	8004294 <SD_disk_write>
 801a3da:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801a3dc:	4618      	mov	r0, r3
 801a3de:	3710      	adds	r7, #16
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	bd80      	pop	{r7, pc}

0801a3e4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801a3e4:	b580      	push	{r7, lr}
 801a3e6:	b082      	sub	sp, #8
 801a3e8:	af00      	add	r7, sp, #0
 801a3ea:	4603      	mov	r3, r0
 801a3ec:	603a      	str	r2, [r7, #0]
 801a3ee:	71fb      	strb	r3, [r7, #7]
 801a3f0:	460b      	mov	r3, r1
 801a3f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801a3f4:	79b9      	ldrb	r1, [r7, #6]
 801a3f6:	79fb      	ldrb	r3, [r7, #7]
 801a3f8:	683a      	ldr	r2, [r7, #0]
 801a3fa:	4618      	mov	r0, r3
 801a3fc:	f7e9 ffce 	bl	800439c <SD_disk_ioctl>
 801a400:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801a402:	4618      	mov	r0, r3
 801a404:	3708      	adds	r7, #8
 801a406:	46bd      	mov	sp, r7
 801a408:	bd80      	pop	{r7, pc}
	...

0801a40c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b084      	sub	sp, #16
 801a410:	af00      	add	r7, sp, #0
 801a412:	4603      	mov	r3, r0
 801a414:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801a416:	79fb      	ldrb	r3, [r7, #7]
 801a418:	4a08      	ldr	r2, [pc, #32]	@ (801a43c <disk_status+0x30>)
 801a41a:	009b      	lsls	r3, r3, #2
 801a41c:	4413      	add	r3, r2
 801a41e:	685b      	ldr	r3, [r3, #4]
 801a420:	685b      	ldr	r3, [r3, #4]
 801a422:	79fa      	ldrb	r2, [r7, #7]
 801a424:	4905      	ldr	r1, [pc, #20]	@ (801a43c <disk_status+0x30>)
 801a426:	440a      	add	r2, r1
 801a428:	7a12      	ldrb	r2, [r2, #8]
 801a42a:	4610      	mov	r0, r2
 801a42c:	4798      	blx	r3
 801a42e:	4603      	mov	r3, r0
 801a430:	73fb      	strb	r3, [r7, #15]
  return stat;
 801a432:	7bfb      	ldrb	r3, [r7, #15]
}
 801a434:	4618      	mov	r0, r3
 801a436:	3710      	adds	r7, #16
 801a438:	46bd      	mov	sp, r7
 801a43a:	bd80      	pop	{r7, pc}
 801a43c:	24000768 	.word	0x24000768

0801a440 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801a440:	b580      	push	{r7, lr}
 801a442:	b084      	sub	sp, #16
 801a444:	af00      	add	r7, sp, #0
 801a446:	4603      	mov	r3, r0
 801a448:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801a44a:	2300      	movs	r3, #0
 801a44c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801a44e:	79fb      	ldrb	r3, [r7, #7]
 801a450:	4a0e      	ldr	r2, [pc, #56]	@ (801a48c <disk_initialize+0x4c>)
 801a452:	5cd3      	ldrb	r3, [r2, r3]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d114      	bne.n	801a482 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801a458:	79fb      	ldrb	r3, [r7, #7]
 801a45a:	4a0c      	ldr	r2, [pc, #48]	@ (801a48c <disk_initialize+0x4c>)
 801a45c:	009b      	lsls	r3, r3, #2
 801a45e:	4413      	add	r3, r2
 801a460:	685b      	ldr	r3, [r3, #4]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	79fa      	ldrb	r2, [r7, #7]
 801a466:	4909      	ldr	r1, [pc, #36]	@ (801a48c <disk_initialize+0x4c>)
 801a468:	440a      	add	r2, r1
 801a46a:	7a12      	ldrb	r2, [r2, #8]
 801a46c:	4610      	mov	r0, r2
 801a46e:	4798      	blx	r3
 801a470:	4603      	mov	r3, r0
 801a472:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801a474:	7bfb      	ldrb	r3, [r7, #15]
 801a476:	2b00      	cmp	r3, #0
 801a478:	d103      	bne.n	801a482 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801a47a:	79fb      	ldrb	r3, [r7, #7]
 801a47c:	4a03      	ldr	r2, [pc, #12]	@ (801a48c <disk_initialize+0x4c>)
 801a47e:	2101      	movs	r1, #1
 801a480:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801a482:	7bfb      	ldrb	r3, [r7, #15]
}
 801a484:	4618      	mov	r0, r3
 801a486:	3710      	adds	r7, #16
 801a488:	46bd      	mov	sp, r7
 801a48a:	bd80      	pop	{r7, pc}
 801a48c:	24000768 	.word	0x24000768

0801a490 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801a490:	b590      	push	{r4, r7, lr}
 801a492:	b087      	sub	sp, #28
 801a494:	af00      	add	r7, sp, #0
 801a496:	60b9      	str	r1, [r7, #8]
 801a498:	607a      	str	r2, [r7, #4]
 801a49a:	603b      	str	r3, [r7, #0]
 801a49c:	4603      	mov	r3, r0
 801a49e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801a4a0:	7bfb      	ldrb	r3, [r7, #15]
 801a4a2:	4a0a      	ldr	r2, [pc, #40]	@ (801a4cc <disk_read+0x3c>)
 801a4a4:	009b      	lsls	r3, r3, #2
 801a4a6:	4413      	add	r3, r2
 801a4a8:	685b      	ldr	r3, [r3, #4]
 801a4aa:	689c      	ldr	r4, [r3, #8]
 801a4ac:	7bfb      	ldrb	r3, [r7, #15]
 801a4ae:	4a07      	ldr	r2, [pc, #28]	@ (801a4cc <disk_read+0x3c>)
 801a4b0:	4413      	add	r3, r2
 801a4b2:	7a18      	ldrb	r0, [r3, #8]
 801a4b4:	683b      	ldr	r3, [r7, #0]
 801a4b6:	687a      	ldr	r2, [r7, #4]
 801a4b8:	68b9      	ldr	r1, [r7, #8]
 801a4ba:	47a0      	blx	r4
 801a4bc:	4603      	mov	r3, r0
 801a4be:	75fb      	strb	r3, [r7, #23]
  return res;
 801a4c0:	7dfb      	ldrb	r3, [r7, #23]
}
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	371c      	adds	r7, #28
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	bd90      	pop	{r4, r7, pc}
 801a4ca:	bf00      	nop
 801a4cc:	24000768 	.word	0x24000768

0801a4d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801a4d0:	b590      	push	{r4, r7, lr}
 801a4d2:	b087      	sub	sp, #28
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	60b9      	str	r1, [r7, #8]
 801a4d8:	607a      	str	r2, [r7, #4]
 801a4da:	603b      	str	r3, [r7, #0]
 801a4dc:	4603      	mov	r3, r0
 801a4de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801a4e0:	7bfb      	ldrb	r3, [r7, #15]
 801a4e2:	4a0a      	ldr	r2, [pc, #40]	@ (801a50c <disk_write+0x3c>)
 801a4e4:	009b      	lsls	r3, r3, #2
 801a4e6:	4413      	add	r3, r2
 801a4e8:	685b      	ldr	r3, [r3, #4]
 801a4ea:	68dc      	ldr	r4, [r3, #12]
 801a4ec:	7bfb      	ldrb	r3, [r7, #15]
 801a4ee:	4a07      	ldr	r2, [pc, #28]	@ (801a50c <disk_write+0x3c>)
 801a4f0:	4413      	add	r3, r2
 801a4f2:	7a18      	ldrb	r0, [r3, #8]
 801a4f4:	683b      	ldr	r3, [r7, #0]
 801a4f6:	687a      	ldr	r2, [r7, #4]
 801a4f8:	68b9      	ldr	r1, [r7, #8]
 801a4fa:	47a0      	blx	r4
 801a4fc:	4603      	mov	r3, r0
 801a4fe:	75fb      	strb	r3, [r7, #23]
  return res;
 801a500:	7dfb      	ldrb	r3, [r7, #23]
}
 801a502:	4618      	mov	r0, r3
 801a504:	371c      	adds	r7, #28
 801a506:	46bd      	mov	sp, r7
 801a508:	bd90      	pop	{r4, r7, pc}
 801a50a:	bf00      	nop
 801a50c:	24000768 	.word	0x24000768

0801a510 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801a510:	b580      	push	{r7, lr}
 801a512:	b084      	sub	sp, #16
 801a514:	af00      	add	r7, sp, #0
 801a516:	4603      	mov	r3, r0
 801a518:	603a      	str	r2, [r7, #0]
 801a51a:	71fb      	strb	r3, [r7, #7]
 801a51c:	460b      	mov	r3, r1
 801a51e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801a520:	79fb      	ldrb	r3, [r7, #7]
 801a522:	4a09      	ldr	r2, [pc, #36]	@ (801a548 <disk_ioctl+0x38>)
 801a524:	009b      	lsls	r3, r3, #2
 801a526:	4413      	add	r3, r2
 801a528:	685b      	ldr	r3, [r3, #4]
 801a52a:	691b      	ldr	r3, [r3, #16]
 801a52c:	79fa      	ldrb	r2, [r7, #7]
 801a52e:	4906      	ldr	r1, [pc, #24]	@ (801a548 <disk_ioctl+0x38>)
 801a530:	440a      	add	r2, r1
 801a532:	7a10      	ldrb	r0, [r2, #8]
 801a534:	79b9      	ldrb	r1, [r7, #6]
 801a536:	683a      	ldr	r2, [r7, #0]
 801a538:	4798      	blx	r3
 801a53a:	4603      	mov	r3, r0
 801a53c:	73fb      	strb	r3, [r7, #15]
  return res;
 801a53e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a540:	4618      	mov	r0, r3
 801a542:	3710      	adds	r7, #16
 801a544:	46bd      	mov	sp, r7
 801a546:	bd80      	pop	{r7, pc}
 801a548:	24000768 	.word	0x24000768

0801a54c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801a54c:	b480      	push	{r7}
 801a54e:	b085      	sub	sp, #20
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	3301      	adds	r3, #1
 801a558:	781b      	ldrb	r3, [r3, #0]
 801a55a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801a55c:	89fb      	ldrh	r3, [r7, #14]
 801a55e:	021b      	lsls	r3, r3, #8
 801a560:	b21a      	sxth	r2, r3
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	781b      	ldrb	r3, [r3, #0]
 801a566:	b21b      	sxth	r3, r3
 801a568:	4313      	orrs	r3, r2
 801a56a:	b21b      	sxth	r3, r3
 801a56c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801a56e:	89fb      	ldrh	r3, [r7, #14]
}
 801a570:	4618      	mov	r0, r3
 801a572:	3714      	adds	r7, #20
 801a574:	46bd      	mov	sp, r7
 801a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a57a:	4770      	bx	lr

0801a57c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801a57c:	b480      	push	{r7}
 801a57e:	b085      	sub	sp, #20
 801a580:	af00      	add	r7, sp, #0
 801a582:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	3303      	adds	r3, #3
 801a588:	781b      	ldrb	r3, [r3, #0]
 801a58a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	021b      	lsls	r3, r3, #8
 801a590:	687a      	ldr	r2, [r7, #4]
 801a592:	3202      	adds	r2, #2
 801a594:	7812      	ldrb	r2, [r2, #0]
 801a596:	4313      	orrs	r3, r2
 801a598:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	021b      	lsls	r3, r3, #8
 801a59e:	687a      	ldr	r2, [r7, #4]
 801a5a0:	3201      	adds	r2, #1
 801a5a2:	7812      	ldrb	r2, [r2, #0]
 801a5a4:	4313      	orrs	r3, r2
 801a5a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	021b      	lsls	r3, r3, #8
 801a5ac:	687a      	ldr	r2, [r7, #4]
 801a5ae:	7812      	ldrb	r2, [r2, #0]
 801a5b0:	4313      	orrs	r3, r2
 801a5b2:	60fb      	str	r3, [r7, #12]
	return rv;
 801a5b4:	68fb      	ldr	r3, [r7, #12]
}
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	3714      	adds	r7, #20
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c0:	4770      	bx	lr

0801a5c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801a5c2:	b480      	push	{r7}
 801a5c4:	b083      	sub	sp, #12
 801a5c6:	af00      	add	r7, sp, #0
 801a5c8:	6078      	str	r0, [r7, #4]
 801a5ca:	460b      	mov	r3, r1
 801a5cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	1c5a      	adds	r2, r3, #1
 801a5d2:	607a      	str	r2, [r7, #4]
 801a5d4:	887a      	ldrh	r2, [r7, #2]
 801a5d6:	b2d2      	uxtb	r2, r2
 801a5d8:	701a      	strb	r2, [r3, #0]
 801a5da:	887b      	ldrh	r3, [r7, #2]
 801a5dc:	0a1b      	lsrs	r3, r3, #8
 801a5de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	1c5a      	adds	r2, r3, #1
 801a5e4:	607a      	str	r2, [r7, #4]
 801a5e6:	887a      	ldrh	r2, [r7, #2]
 801a5e8:	b2d2      	uxtb	r2, r2
 801a5ea:	701a      	strb	r2, [r3, #0]
}
 801a5ec:	bf00      	nop
 801a5ee:	370c      	adds	r7, #12
 801a5f0:	46bd      	mov	sp, r7
 801a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f6:	4770      	bx	lr

0801a5f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801a5f8:	b480      	push	{r7}
 801a5fa:	b083      	sub	sp, #12
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	6078      	str	r0, [r7, #4]
 801a600:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	1c5a      	adds	r2, r3, #1
 801a606:	607a      	str	r2, [r7, #4]
 801a608:	683a      	ldr	r2, [r7, #0]
 801a60a:	b2d2      	uxtb	r2, r2
 801a60c:	701a      	strb	r2, [r3, #0]
 801a60e:	683b      	ldr	r3, [r7, #0]
 801a610:	0a1b      	lsrs	r3, r3, #8
 801a612:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	1c5a      	adds	r2, r3, #1
 801a618:	607a      	str	r2, [r7, #4]
 801a61a:	683a      	ldr	r2, [r7, #0]
 801a61c:	b2d2      	uxtb	r2, r2
 801a61e:	701a      	strb	r2, [r3, #0]
 801a620:	683b      	ldr	r3, [r7, #0]
 801a622:	0a1b      	lsrs	r3, r3, #8
 801a624:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	1c5a      	adds	r2, r3, #1
 801a62a:	607a      	str	r2, [r7, #4]
 801a62c:	683a      	ldr	r2, [r7, #0]
 801a62e:	b2d2      	uxtb	r2, r2
 801a630:	701a      	strb	r2, [r3, #0]
 801a632:	683b      	ldr	r3, [r7, #0]
 801a634:	0a1b      	lsrs	r3, r3, #8
 801a636:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	1c5a      	adds	r2, r3, #1
 801a63c:	607a      	str	r2, [r7, #4]
 801a63e:	683a      	ldr	r2, [r7, #0]
 801a640:	b2d2      	uxtb	r2, r2
 801a642:	701a      	strb	r2, [r3, #0]
}
 801a644:	bf00      	nop
 801a646:	370c      	adds	r7, #12
 801a648:	46bd      	mov	sp, r7
 801a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a64e:	4770      	bx	lr

0801a650 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801a650:	b480      	push	{r7}
 801a652:	b087      	sub	sp, #28
 801a654:	af00      	add	r7, sp, #0
 801a656:	60f8      	str	r0, [r7, #12]
 801a658:	60b9      	str	r1, [r7, #8]
 801a65a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801a660:	68bb      	ldr	r3, [r7, #8]
 801a662:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	2b00      	cmp	r3, #0
 801a668:	d00d      	beq.n	801a686 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801a66a:	693a      	ldr	r2, [r7, #16]
 801a66c:	1c53      	adds	r3, r2, #1
 801a66e:	613b      	str	r3, [r7, #16]
 801a670:	697b      	ldr	r3, [r7, #20]
 801a672:	1c59      	adds	r1, r3, #1
 801a674:	6179      	str	r1, [r7, #20]
 801a676:	7812      	ldrb	r2, [r2, #0]
 801a678:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	3b01      	subs	r3, #1
 801a67e:	607b      	str	r3, [r7, #4]
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	2b00      	cmp	r3, #0
 801a684:	d1f1      	bne.n	801a66a <mem_cpy+0x1a>
	}
}
 801a686:	bf00      	nop
 801a688:	371c      	adds	r7, #28
 801a68a:	46bd      	mov	sp, r7
 801a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a690:	4770      	bx	lr

0801a692 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801a692:	b480      	push	{r7}
 801a694:	b087      	sub	sp, #28
 801a696:	af00      	add	r7, sp, #0
 801a698:	60f8      	str	r0, [r7, #12]
 801a69a:	60b9      	str	r1, [r7, #8]
 801a69c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801a6a2:	697b      	ldr	r3, [r7, #20]
 801a6a4:	1c5a      	adds	r2, r3, #1
 801a6a6:	617a      	str	r2, [r7, #20]
 801a6a8:	68ba      	ldr	r2, [r7, #8]
 801a6aa:	b2d2      	uxtb	r2, r2
 801a6ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	3b01      	subs	r3, #1
 801a6b2:	607b      	str	r3, [r7, #4]
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d1f3      	bne.n	801a6a2 <mem_set+0x10>
}
 801a6ba:	bf00      	nop
 801a6bc:	bf00      	nop
 801a6be:	371c      	adds	r7, #28
 801a6c0:	46bd      	mov	sp, r7
 801a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6c6:	4770      	bx	lr

0801a6c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801a6c8:	b480      	push	{r7}
 801a6ca:	b089      	sub	sp, #36	@ 0x24
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	60f8      	str	r0, [r7, #12]
 801a6d0:	60b9      	str	r1, [r7, #8]
 801a6d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	61fb      	str	r3, [r7, #28]
 801a6d8:	68bb      	ldr	r3, [r7, #8]
 801a6da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801a6dc:	2300      	movs	r3, #0
 801a6de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801a6e0:	69fb      	ldr	r3, [r7, #28]
 801a6e2:	1c5a      	adds	r2, r3, #1
 801a6e4:	61fa      	str	r2, [r7, #28]
 801a6e6:	781b      	ldrb	r3, [r3, #0]
 801a6e8:	4619      	mov	r1, r3
 801a6ea:	69bb      	ldr	r3, [r7, #24]
 801a6ec:	1c5a      	adds	r2, r3, #1
 801a6ee:	61ba      	str	r2, [r7, #24]
 801a6f0:	781b      	ldrb	r3, [r3, #0]
 801a6f2:	1acb      	subs	r3, r1, r3
 801a6f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	3b01      	subs	r3, #1
 801a6fa:	607b      	str	r3, [r7, #4]
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d002      	beq.n	801a708 <mem_cmp+0x40>
 801a702:	697b      	ldr	r3, [r7, #20]
 801a704:	2b00      	cmp	r3, #0
 801a706:	d0eb      	beq.n	801a6e0 <mem_cmp+0x18>

	return r;
 801a708:	697b      	ldr	r3, [r7, #20]
}
 801a70a:	4618      	mov	r0, r3
 801a70c:	3724      	adds	r7, #36	@ 0x24
 801a70e:	46bd      	mov	sp, r7
 801a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a714:	4770      	bx	lr

0801a716 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801a716:	b480      	push	{r7}
 801a718:	b083      	sub	sp, #12
 801a71a:	af00      	add	r7, sp, #0
 801a71c:	6078      	str	r0, [r7, #4]
 801a71e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801a720:	e002      	b.n	801a728 <chk_chr+0x12>
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	3301      	adds	r3, #1
 801a726:	607b      	str	r3, [r7, #4]
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	781b      	ldrb	r3, [r3, #0]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d005      	beq.n	801a73c <chk_chr+0x26>
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	781b      	ldrb	r3, [r3, #0]
 801a734:	461a      	mov	r2, r3
 801a736:	683b      	ldr	r3, [r7, #0]
 801a738:	4293      	cmp	r3, r2
 801a73a:	d1f2      	bne.n	801a722 <chk_chr+0xc>
	return *str;
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	781b      	ldrb	r3, [r3, #0]
}
 801a740:	4618      	mov	r0, r3
 801a742:	370c      	adds	r7, #12
 801a744:	46bd      	mov	sp, r7
 801a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a74a:	4770      	bx	lr

0801a74c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a74c:	b480      	push	{r7}
 801a74e:	b085      	sub	sp, #20
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
 801a754:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a756:	2300      	movs	r3, #0
 801a758:	60bb      	str	r3, [r7, #8]
 801a75a:	68bb      	ldr	r3, [r7, #8]
 801a75c:	60fb      	str	r3, [r7, #12]
 801a75e:	e029      	b.n	801a7b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801a760:	4a27      	ldr	r2, [pc, #156]	@ (801a800 <chk_lock+0xb4>)
 801a762:	68fb      	ldr	r3, [r7, #12]
 801a764:	011b      	lsls	r3, r3, #4
 801a766:	4413      	add	r3, r2
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d01d      	beq.n	801a7aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a76e:	4a24      	ldr	r2, [pc, #144]	@ (801a800 <chk_lock+0xb4>)
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	011b      	lsls	r3, r3, #4
 801a774:	4413      	add	r3, r2
 801a776:	681a      	ldr	r2, [r3, #0]
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	429a      	cmp	r2, r3
 801a77e:	d116      	bne.n	801a7ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801a780:	4a1f      	ldr	r2, [pc, #124]	@ (801a800 <chk_lock+0xb4>)
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	011b      	lsls	r3, r3, #4
 801a786:	4413      	add	r3, r2
 801a788:	3304      	adds	r3, #4
 801a78a:	681a      	ldr	r2, [r3, #0]
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a790:	429a      	cmp	r2, r3
 801a792:	d10c      	bne.n	801a7ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a794:	4a1a      	ldr	r2, [pc, #104]	@ (801a800 <chk_lock+0xb4>)
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	011b      	lsls	r3, r3, #4
 801a79a:	4413      	add	r3, r2
 801a79c:	3308      	adds	r3, #8
 801a79e:	681a      	ldr	r2, [r3, #0]
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801a7a4:	429a      	cmp	r2, r3
 801a7a6:	d102      	bne.n	801a7ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a7a8:	e007      	b.n	801a7ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801a7aa:	2301      	movs	r3, #1
 801a7ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	3301      	adds	r3, #1
 801a7b2:	60fb      	str	r3, [r7, #12]
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d0d2      	beq.n	801a760 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801a7ba:	68fb      	ldr	r3, [r7, #12]
 801a7bc:	2b01      	cmp	r3, #1
 801a7be:	d109      	bne.n	801a7d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801a7c0:	68bb      	ldr	r3, [r7, #8]
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d102      	bne.n	801a7cc <chk_lock+0x80>
 801a7c6:	683b      	ldr	r3, [r7, #0]
 801a7c8:	2b02      	cmp	r3, #2
 801a7ca:	d101      	bne.n	801a7d0 <chk_lock+0x84>
 801a7cc:	2300      	movs	r3, #0
 801a7ce:	e010      	b.n	801a7f2 <chk_lock+0xa6>
 801a7d0:	2312      	movs	r3, #18
 801a7d2:	e00e      	b.n	801a7f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801a7d4:	683b      	ldr	r3, [r7, #0]
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d108      	bne.n	801a7ec <chk_lock+0xa0>
 801a7da:	4a09      	ldr	r2, [pc, #36]	@ (801a800 <chk_lock+0xb4>)
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	011b      	lsls	r3, r3, #4
 801a7e0:	4413      	add	r3, r2
 801a7e2:	330c      	adds	r3, #12
 801a7e4:	881b      	ldrh	r3, [r3, #0]
 801a7e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a7ea:	d101      	bne.n	801a7f0 <chk_lock+0xa4>
 801a7ec:	2310      	movs	r3, #16
 801a7ee:	e000      	b.n	801a7f2 <chk_lock+0xa6>
 801a7f0:	2300      	movs	r3, #0
}
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	3714      	adds	r7, #20
 801a7f6:	46bd      	mov	sp, r7
 801a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7fc:	4770      	bx	lr
 801a7fe:	bf00      	nop
 801a800:	24000558 	.word	0x24000558

0801a804 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801a804:	b480      	push	{r7}
 801a806:	b083      	sub	sp, #12
 801a808:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a80a:	2300      	movs	r3, #0
 801a80c:	607b      	str	r3, [r7, #4]
 801a80e:	e002      	b.n	801a816 <enq_lock+0x12>
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	3301      	adds	r3, #1
 801a814:	607b      	str	r3, [r7, #4]
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d106      	bne.n	801a82a <enq_lock+0x26>
 801a81c:	4a09      	ldr	r2, [pc, #36]	@ (801a844 <enq_lock+0x40>)
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	011b      	lsls	r3, r3, #4
 801a822:	4413      	add	r3, r2
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d1f2      	bne.n	801a810 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	2b01      	cmp	r3, #1
 801a82e:	bf14      	ite	ne
 801a830:	2301      	movne	r3, #1
 801a832:	2300      	moveq	r3, #0
 801a834:	b2db      	uxtb	r3, r3
}
 801a836:	4618      	mov	r0, r3
 801a838:	370c      	adds	r7, #12
 801a83a:	46bd      	mov	sp, r7
 801a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a840:	4770      	bx	lr
 801a842:	bf00      	nop
 801a844:	24000558 	.word	0x24000558

0801a848 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a848:	b480      	push	{r7}
 801a84a:	b085      	sub	sp, #20
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	6078      	str	r0, [r7, #4]
 801a850:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a852:	2300      	movs	r3, #0
 801a854:	60fb      	str	r3, [r7, #12]
 801a856:	e01f      	b.n	801a898 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801a858:	4a41      	ldr	r2, [pc, #260]	@ (801a960 <inc_lock+0x118>)
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	011b      	lsls	r3, r3, #4
 801a85e:	4413      	add	r3, r2
 801a860:	681a      	ldr	r2, [r3, #0]
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	429a      	cmp	r2, r3
 801a868:	d113      	bne.n	801a892 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801a86a:	4a3d      	ldr	r2, [pc, #244]	@ (801a960 <inc_lock+0x118>)
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	011b      	lsls	r3, r3, #4
 801a870:	4413      	add	r3, r2
 801a872:	3304      	adds	r3, #4
 801a874:	681a      	ldr	r2, [r3, #0]
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801a87a:	429a      	cmp	r2, r3
 801a87c:	d109      	bne.n	801a892 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801a87e:	4a38      	ldr	r2, [pc, #224]	@ (801a960 <inc_lock+0x118>)
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	011b      	lsls	r3, r3, #4
 801a884:	4413      	add	r3, r2
 801a886:	3308      	adds	r3, #8
 801a888:	681a      	ldr	r2, [r3, #0]
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801a88e:	429a      	cmp	r2, r3
 801a890:	d006      	beq.n	801a8a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	3301      	adds	r3, #1
 801a896:	60fb      	str	r3, [r7, #12]
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d0dc      	beq.n	801a858 <inc_lock+0x10>
 801a89e:	e000      	b.n	801a8a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801a8a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	2b01      	cmp	r3, #1
 801a8a6:	d132      	bne.n	801a90e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	60fb      	str	r3, [r7, #12]
 801a8ac:	e002      	b.n	801a8b4 <inc_lock+0x6c>
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	3301      	adds	r3, #1
 801a8b2:	60fb      	str	r3, [r7, #12]
 801a8b4:	68fb      	ldr	r3, [r7, #12]
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d106      	bne.n	801a8c8 <inc_lock+0x80>
 801a8ba:	4a29      	ldr	r2, [pc, #164]	@ (801a960 <inc_lock+0x118>)
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	011b      	lsls	r3, r3, #4
 801a8c0:	4413      	add	r3, r2
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d1f2      	bne.n	801a8ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	2b01      	cmp	r3, #1
 801a8cc:	d101      	bne.n	801a8d2 <inc_lock+0x8a>
 801a8ce:	2300      	movs	r3, #0
 801a8d0:	e040      	b.n	801a954 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	681a      	ldr	r2, [r3, #0]
 801a8d6:	4922      	ldr	r1, [pc, #136]	@ (801a960 <inc_lock+0x118>)
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	011b      	lsls	r3, r3, #4
 801a8dc:	440b      	add	r3, r1
 801a8de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	689a      	ldr	r2, [r3, #8]
 801a8e4:	491e      	ldr	r1, [pc, #120]	@ (801a960 <inc_lock+0x118>)
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	011b      	lsls	r3, r3, #4
 801a8ea:	440b      	add	r3, r1
 801a8ec:	3304      	adds	r3, #4
 801a8ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	695a      	ldr	r2, [r3, #20]
 801a8f4:	491a      	ldr	r1, [pc, #104]	@ (801a960 <inc_lock+0x118>)
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	011b      	lsls	r3, r3, #4
 801a8fa:	440b      	add	r3, r1
 801a8fc:	3308      	adds	r3, #8
 801a8fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801a900:	4a17      	ldr	r2, [pc, #92]	@ (801a960 <inc_lock+0x118>)
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	011b      	lsls	r3, r3, #4
 801a906:	4413      	add	r3, r2
 801a908:	330c      	adds	r3, #12
 801a90a:	2200      	movs	r2, #0
 801a90c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801a90e:	683b      	ldr	r3, [r7, #0]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d009      	beq.n	801a928 <inc_lock+0xe0>
 801a914:	4a12      	ldr	r2, [pc, #72]	@ (801a960 <inc_lock+0x118>)
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	011b      	lsls	r3, r3, #4
 801a91a:	4413      	add	r3, r2
 801a91c:	330c      	adds	r3, #12
 801a91e:	881b      	ldrh	r3, [r3, #0]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d001      	beq.n	801a928 <inc_lock+0xe0>
 801a924:	2300      	movs	r3, #0
 801a926:	e015      	b.n	801a954 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801a928:	683b      	ldr	r3, [r7, #0]
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d108      	bne.n	801a940 <inc_lock+0xf8>
 801a92e:	4a0c      	ldr	r2, [pc, #48]	@ (801a960 <inc_lock+0x118>)
 801a930:	68fb      	ldr	r3, [r7, #12]
 801a932:	011b      	lsls	r3, r3, #4
 801a934:	4413      	add	r3, r2
 801a936:	330c      	adds	r3, #12
 801a938:	881b      	ldrh	r3, [r3, #0]
 801a93a:	3301      	adds	r3, #1
 801a93c:	b29a      	uxth	r2, r3
 801a93e:	e001      	b.n	801a944 <inc_lock+0xfc>
 801a940:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a944:	4906      	ldr	r1, [pc, #24]	@ (801a960 <inc_lock+0x118>)
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	011b      	lsls	r3, r3, #4
 801a94a:	440b      	add	r3, r1
 801a94c:	330c      	adds	r3, #12
 801a94e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	3301      	adds	r3, #1
}
 801a954:	4618      	mov	r0, r3
 801a956:	3714      	adds	r7, #20
 801a958:	46bd      	mov	sp, r7
 801a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a95e:	4770      	bx	lr
 801a960:	24000558 	.word	0x24000558

0801a964 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801a964:	b480      	push	{r7}
 801a966:	b085      	sub	sp, #20
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	3b01      	subs	r3, #1
 801a970:	607b      	str	r3, [r7, #4]
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	2b00      	cmp	r3, #0
 801a976:	d125      	bne.n	801a9c4 <dec_lock+0x60>
		n = Files[i].ctr;
 801a978:	4a17      	ldr	r2, [pc, #92]	@ (801a9d8 <dec_lock+0x74>)
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	011b      	lsls	r3, r3, #4
 801a97e:	4413      	add	r3, r2
 801a980:	330c      	adds	r3, #12
 801a982:	881b      	ldrh	r3, [r3, #0]
 801a984:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801a986:	89fb      	ldrh	r3, [r7, #14]
 801a988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a98c:	d101      	bne.n	801a992 <dec_lock+0x2e>
 801a98e:	2300      	movs	r3, #0
 801a990:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801a992:	89fb      	ldrh	r3, [r7, #14]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d002      	beq.n	801a99e <dec_lock+0x3a>
 801a998:	89fb      	ldrh	r3, [r7, #14]
 801a99a:	3b01      	subs	r3, #1
 801a99c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801a99e:	4a0e      	ldr	r2, [pc, #56]	@ (801a9d8 <dec_lock+0x74>)
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	011b      	lsls	r3, r3, #4
 801a9a4:	4413      	add	r3, r2
 801a9a6:	330c      	adds	r3, #12
 801a9a8:	89fa      	ldrh	r2, [r7, #14]
 801a9aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801a9ac:	89fb      	ldrh	r3, [r7, #14]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d105      	bne.n	801a9be <dec_lock+0x5a>
 801a9b2:	4a09      	ldr	r2, [pc, #36]	@ (801a9d8 <dec_lock+0x74>)
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	011b      	lsls	r3, r3, #4
 801a9b8:	4413      	add	r3, r2
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801a9be:	2300      	movs	r3, #0
 801a9c0:	737b      	strb	r3, [r7, #13]
 801a9c2:	e001      	b.n	801a9c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801a9c4:	2302      	movs	r3, #2
 801a9c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801a9c8:	7b7b      	ldrb	r3, [r7, #13]
}
 801a9ca:	4618      	mov	r0, r3
 801a9cc:	3714      	adds	r7, #20
 801a9ce:	46bd      	mov	sp, r7
 801a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9d4:	4770      	bx	lr
 801a9d6:	bf00      	nop
 801a9d8:	24000558 	.word	0x24000558

0801a9dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801a9dc:	b480      	push	{r7}
 801a9de:	b085      	sub	sp, #20
 801a9e0:	af00      	add	r7, sp, #0
 801a9e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	60fb      	str	r3, [r7, #12]
 801a9e8:	e010      	b.n	801aa0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801a9ea:	4a0d      	ldr	r2, [pc, #52]	@ (801aa20 <clear_lock+0x44>)
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	011b      	lsls	r3, r3, #4
 801a9f0:	4413      	add	r3, r2
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	687a      	ldr	r2, [r7, #4]
 801a9f6:	429a      	cmp	r2, r3
 801a9f8:	d105      	bne.n	801aa06 <clear_lock+0x2a>
 801a9fa:	4a09      	ldr	r2, [pc, #36]	@ (801aa20 <clear_lock+0x44>)
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	011b      	lsls	r3, r3, #4
 801aa00:	4413      	add	r3, r2
 801aa02:	2200      	movs	r2, #0
 801aa04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	3301      	adds	r3, #1
 801aa0a:	60fb      	str	r3, [r7, #12]
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d0eb      	beq.n	801a9ea <clear_lock+0xe>
	}
}
 801aa12:	bf00      	nop
 801aa14:	bf00      	nop
 801aa16:	3714      	adds	r7, #20
 801aa18:	46bd      	mov	sp, r7
 801aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa1e:	4770      	bx	lr
 801aa20:	24000558 	.word	0x24000558

0801aa24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b086      	sub	sp, #24
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	78db      	ldrb	r3, [r3, #3]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d034      	beq.n	801aaa2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aa3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	7858      	ldrb	r0, [r3, #1]
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801aa48:	2301      	movs	r3, #1
 801aa4a:	697a      	ldr	r2, [r7, #20]
 801aa4c:	f7ff fd40 	bl	801a4d0 <disk_write>
 801aa50:	4603      	mov	r3, r0
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d002      	beq.n	801aa5c <sync_window+0x38>
			res = FR_DISK_ERR;
 801aa56:	2301      	movs	r3, #1
 801aa58:	73fb      	strb	r3, [r7, #15]
 801aa5a:	e022      	b.n	801aaa2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	2200      	movs	r2, #0
 801aa60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aa66:	697a      	ldr	r2, [r7, #20]
 801aa68:	1ad2      	subs	r2, r2, r3
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	6a1b      	ldr	r3, [r3, #32]
 801aa6e:	429a      	cmp	r2, r3
 801aa70:	d217      	bcs.n	801aaa2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	789b      	ldrb	r3, [r3, #2]
 801aa76:	613b      	str	r3, [r7, #16]
 801aa78:	e010      	b.n	801aa9c <sync_window+0x78>
					wsect += fs->fsize;
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	6a1b      	ldr	r3, [r3, #32]
 801aa7e:	697a      	ldr	r2, [r7, #20]
 801aa80:	4413      	add	r3, r2
 801aa82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	7858      	ldrb	r0, [r3, #1]
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801aa8e:	2301      	movs	r3, #1
 801aa90:	697a      	ldr	r2, [r7, #20]
 801aa92:	f7ff fd1d 	bl	801a4d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801aa96:	693b      	ldr	r3, [r7, #16]
 801aa98:	3b01      	subs	r3, #1
 801aa9a:	613b      	str	r3, [r7, #16]
 801aa9c:	693b      	ldr	r3, [r7, #16]
 801aa9e:	2b01      	cmp	r3, #1
 801aaa0:	d8eb      	bhi.n	801aa7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801aaa2:	7bfb      	ldrb	r3, [r7, #15]
}
 801aaa4:	4618      	mov	r0, r3
 801aaa6:	3718      	adds	r7, #24
 801aaa8:	46bd      	mov	sp, r7
 801aaaa:	bd80      	pop	{r7, pc}

0801aaac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801aaac:	b580      	push	{r7, lr}
 801aaae:	b084      	sub	sp, #16
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	6078      	str	r0, [r7, #4]
 801aab4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801aab6:	2300      	movs	r3, #0
 801aab8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aabe:	683a      	ldr	r2, [r7, #0]
 801aac0:	429a      	cmp	r2, r3
 801aac2:	d01b      	beq.n	801aafc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801aac4:	6878      	ldr	r0, [r7, #4]
 801aac6:	f7ff ffad 	bl	801aa24 <sync_window>
 801aaca:	4603      	mov	r3, r0
 801aacc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801aace:	7bfb      	ldrb	r3, [r7, #15]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d113      	bne.n	801aafc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	7858      	ldrb	r0, [r3, #1]
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801aade:	2301      	movs	r3, #1
 801aae0:	683a      	ldr	r2, [r7, #0]
 801aae2:	f7ff fcd5 	bl	801a490 <disk_read>
 801aae6:	4603      	mov	r3, r0
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d004      	beq.n	801aaf6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801aaec:	f04f 33ff 	mov.w	r3, #4294967295
 801aaf0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801aaf2:	2301      	movs	r3, #1
 801aaf4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	683a      	ldr	r2, [r7, #0]
 801aafa:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801aafc:	7bfb      	ldrb	r3, [r7, #15]
}
 801aafe:	4618      	mov	r0, r3
 801ab00:	3710      	adds	r7, #16
 801ab02:	46bd      	mov	sp, r7
 801ab04:	bd80      	pop	{r7, pc}
	...

0801ab08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b084      	sub	sp, #16
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801ab10:	6878      	ldr	r0, [r7, #4]
 801ab12:	f7ff ff87 	bl	801aa24 <sync_window>
 801ab16:	4603      	mov	r3, r0
 801ab18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801ab1a:	7bfb      	ldrb	r3, [r7, #15]
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d159      	bne.n	801abd4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	781b      	ldrb	r3, [r3, #0]
 801ab24:	2b03      	cmp	r3, #3
 801ab26:	d149      	bne.n	801abbc <sync_fs+0xb4>
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	791b      	ldrb	r3, [r3, #4]
 801ab2c:	2b01      	cmp	r3, #1
 801ab2e:	d145      	bne.n	801abbc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	899b      	ldrh	r3, [r3, #12]
 801ab3a:	461a      	mov	r2, r3
 801ab3c:	2100      	movs	r1, #0
 801ab3e:	f7ff fda8 	bl	801a692 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	3338      	adds	r3, #56	@ 0x38
 801ab46:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801ab4a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801ab4e:	4618      	mov	r0, r3
 801ab50:	f7ff fd37 	bl	801a5c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	3338      	adds	r3, #56	@ 0x38
 801ab58:	4921      	ldr	r1, [pc, #132]	@ (801abe0 <sync_fs+0xd8>)
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	f7ff fd4c 	bl	801a5f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	3338      	adds	r3, #56	@ 0x38
 801ab64:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801ab68:	491e      	ldr	r1, [pc, #120]	@ (801abe4 <sync_fs+0xdc>)
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	f7ff fd44 	bl	801a5f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	3338      	adds	r3, #56	@ 0x38
 801ab74:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	699b      	ldr	r3, [r3, #24]
 801ab7c:	4619      	mov	r1, r3
 801ab7e:	4610      	mov	r0, r2
 801ab80:	f7ff fd3a 	bl	801a5f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	3338      	adds	r3, #56	@ 0x38
 801ab88:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	695b      	ldr	r3, [r3, #20]
 801ab90:	4619      	mov	r1, r3
 801ab92:	4610      	mov	r0, r2
 801ab94:	f7ff fd30 	bl	801a5f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ab9c:	1c5a      	adds	r2, r3, #1
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	7858      	ldrb	r0, [r3, #1]
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801abb0:	2301      	movs	r3, #1
 801abb2:	f7ff fc8d 	bl	801a4d0 <disk_write>
			fs->fsi_flag = 0;
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	2200      	movs	r2, #0
 801abba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	785b      	ldrb	r3, [r3, #1]
 801abc0:	2200      	movs	r2, #0
 801abc2:	2100      	movs	r1, #0
 801abc4:	4618      	mov	r0, r3
 801abc6:	f7ff fca3 	bl	801a510 <disk_ioctl>
 801abca:	4603      	mov	r3, r0
 801abcc:	2b00      	cmp	r3, #0
 801abce:	d001      	beq.n	801abd4 <sync_fs+0xcc>
 801abd0:	2301      	movs	r3, #1
 801abd2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801abd4:	7bfb      	ldrb	r3, [r7, #15]
}
 801abd6:	4618      	mov	r0, r3
 801abd8:	3710      	adds	r7, #16
 801abda:	46bd      	mov	sp, r7
 801abdc:	bd80      	pop	{r7, pc}
 801abde:	bf00      	nop
 801abe0:	41615252 	.word	0x41615252
 801abe4:	61417272 	.word	0x61417272

0801abe8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801abe8:	b480      	push	{r7}
 801abea:	b083      	sub	sp, #12
 801abec:	af00      	add	r7, sp, #0
 801abee:	6078      	str	r0, [r7, #4]
 801abf0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801abf2:	683b      	ldr	r3, [r7, #0]
 801abf4:	3b02      	subs	r3, #2
 801abf6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	69db      	ldr	r3, [r3, #28]
 801abfc:	3b02      	subs	r3, #2
 801abfe:	683a      	ldr	r2, [r7, #0]
 801ac00:	429a      	cmp	r2, r3
 801ac02:	d301      	bcc.n	801ac08 <clust2sect+0x20>
 801ac04:	2300      	movs	r3, #0
 801ac06:	e008      	b.n	801ac1a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	895b      	ldrh	r3, [r3, #10]
 801ac0c:	461a      	mov	r2, r3
 801ac0e:	683b      	ldr	r3, [r7, #0]
 801ac10:	fb03 f202 	mul.w	r2, r3, r2
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ac18:	4413      	add	r3, r2
}
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	370c      	adds	r7, #12
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac24:	4770      	bx	lr

0801ac26 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801ac26:	b580      	push	{r7, lr}
 801ac28:	b086      	sub	sp, #24
 801ac2a:	af00      	add	r7, sp, #0
 801ac2c:	6078      	str	r0, [r7, #4]
 801ac2e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801ac36:	683b      	ldr	r3, [r7, #0]
 801ac38:	2b01      	cmp	r3, #1
 801ac3a:	d904      	bls.n	801ac46 <get_fat+0x20>
 801ac3c:	693b      	ldr	r3, [r7, #16]
 801ac3e:	69db      	ldr	r3, [r3, #28]
 801ac40:	683a      	ldr	r2, [r7, #0]
 801ac42:	429a      	cmp	r2, r3
 801ac44:	d302      	bcc.n	801ac4c <get_fat+0x26>
		val = 1;	/* Internal error */
 801ac46:	2301      	movs	r3, #1
 801ac48:	617b      	str	r3, [r7, #20]
 801ac4a:	e0ba      	b.n	801adc2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801ac4c:	f04f 33ff 	mov.w	r3, #4294967295
 801ac50:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801ac52:	693b      	ldr	r3, [r7, #16]
 801ac54:	781b      	ldrb	r3, [r3, #0]
 801ac56:	2b03      	cmp	r3, #3
 801ac58:	f000 8082 	beq.w	801ad60 <get_fat+0x13a>
 801ac5c:	2b03      	cmp	r3, #3
 801ac5e:	f300 80a6 	bgt.w	801adae <get_fat+0x188>
 801ac62:	2b01      	cmp	r3, #1
 801ac64:	d002      	beq.n	801ac6c <get_fat+0x46>
 801ac66:	2b02      	cmp	r3, #2
 801ac68:	d055      	beq.n	801ad16 <get_fat+0xf0>
 801ac6a:	e0a0      	b.n	801adae <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801ac6c:	683b      	ldr	r3, [r7, #0]
 801ac6e:	60fb      	str	r3, [r7, #12]
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	085b      	lsrs	r3, r3, #1
 801ac74:	68fa      	ldr	r2, [r7, #12]
 801ac76:	4413      	add	r3, r2
 801ac78:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801ac7a:	693b      	ldr	r3, [r7, #16]
 801ac7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ac7e:	693b      	ldr	r3, [r7, #16]
 801ac80:	899b      	ldrh	r3, [r3, #12]
 801ac82:	4619      	mov	r1, r3
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	fbb3 f3f1 	udiv	r3, r3, r1
 801ac8a:	4413      	add	r3, r2
 801ac8c:	4619      	mov	r1, r3
 801ac8e:	6938      	ldr	r0, [r7, #16]
 801ac90:	f7ff ff0c 	bl	801aaac <move_window>
 801ac94:	4603      	mov	r3, r0
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	f040 808c 	bne.w	801adb4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	1c5a      	adds	r2, r3, #1
 801aca0:	60fa      	str	r2, [r7, #12]
 801aca2:	693a      	ldr	r2, [r7, #16]
 801aca4:	8992      	ldrh	r2, [r2, #12]
 801aca6:	fbb3 f1f2 	udiv	r1, r3, r2
 801acaa:	fb01 f202 	mul.w	r2, r1, r2
 801acae:	1a9b      	subs	r3, r3, r2
 801acb0:	693a      	ldr	r2, [r7, #16]
 801acb2:	4413      	add	r3, r2
 801acb4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801acb8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801acba:	693b      	ldr	r3, [r7, #16]
 801acbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801acbe:	693b      	ldr	r3, [r7, #16]
 801acc0:	899b      	ldrh	r3, [r3, #12]
 801acc2:	4619      	mov	r1, r3
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	fbb3 f3f1 	udiv	r3, r3, r1
 801acca:	4413      	add	r3, r2
 801accc:	4619      	mov	r1, r3
 801acce:	6938      	ldr	r0, [r7, #16]
 801acd0:	f7ff feec 	bl	801aaac <move_window>
 801acd4:	4603      	mov	r3, r0
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d16e      	bne.n	801adb8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801acda:	693b      	ldr	r3, [r7, #16]
 801acdc:	899b      	ldrh	r3, [r3, #12]
 801acde:	461a      	mov	r2, r3
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	fbb3 f1f2 	udiv	r1, r3, r2
 801ace6:	fb01 f202 	mul.w	r2, r1, r2
 801acea:	1a9b      	subs	r3, r3, r2
 801acec:	693a      	ldr	r2, [r7, #16]
 801acee:	4413      	add	r3, r2
 801acf0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801acf4:	021b      	lsls	r3, r3, #8
 801acf6:	68ba      	ldr	r2, [r7, #8]
 801acf8:	4313      	orrs	r3, r2
 801acfa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801acfc:	683b      	ldr	r3, [r7, #0]
 801acfe:	f003 0301 	and.w	r3, r3, #1
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d002      	beq.n	801ad0c <get_fat+0xe6>
 801ad06:	68bb      	ldr	r3, [r7, #8]
 801ad08:	091b      	lsrs	r3, r3, #4
 801ad0a:	e002      	b.n	801ad12 <get_fat+0xec>
 801ad0c:	68bb      	ldr	r3, [r7, #8]
 801ad0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ad12:	617b      	str	r3, [r7, #20]
			break;
 801ad14:	e055      	b.n	801adc2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801ad16:	693b      	ldr	r3, [r7, #16]
 801ad18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ad1a:	693b      	ldr	r3, [r7, #16]
 801ad1c:	899b      	ldrh	r3, [r3, #12]
 801ad1e:	085b      	lsrs	r3, r3, #1
 801ad20:	b29b      	uxth	r3, r3
 801ad22:	4619      	mov	r1, r3
 801ad24:	683b      	ldr	r3, [r7, #0]
 801ad26:	fbb3 f3f1 	udiv	r3, r3, r1
 801ad2a:	4413      	add	r3, r2
 801ad2c:	4619      	mov	r1, r3
 801ad2e:	6938      	ldr	r0, [r7, #16]
 801ad30:	f7ff febc 	bl	801aaac <move_window>
 801ad34:	4603      	mov	r3, r0
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d140      	bne.n	801adbc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801ad3a:	693b      	ldr	r3, [r7, #16]
 801ad3c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ad40:	683b      	ldr	r3, [r7, #0]
 801ad42:	005b      	lsls	r3, r3, #1
 801ad44:	693a      	ldr	r2, [r7, #16]
 801ad46:	8992      	ldrh	r2, [r2, #12]
 801ad48:	fbb3 f0f2 	udiv	r0, r3, r2
 801ad4c:	fb00 f202 	mul.w	r2, r0, r2
 801ad50:	1a9b      	subs	r3, r3, r2
 801ad52:	440b      	add	r3, r1
 801ad54:	4618      	mov	r0, r3
 801ad56:	f7ff fbf9 	bl	801a54c <ld_word>
 801ad5a:	4603      	mov	r3, r0
 801ad5c:	617b      	str	r3, [r7, #20]
			break;
 801ad5e:	e030      	b.n	801adc2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801ad60:	693b      	ldr	r3, [r7, #16]
 801ad62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ad64:	693b      	ldr	r3, [r7, #16]
 801ad66:	899b      	ldrh	r3, [r3, #12]
 801ad68:	089b      	lsrs	r3, r3, #2
 801ad6a:	b29b      	uxth	r3, r3
 801ad6c:	4619      	mov	r1, r3
 801ad6e:	683b      	ldr	r3, [r7, #0]
 801ad70:	fbb3 f3f1 	udiv	r3, r3, r1
 801ad74:	4413      	add	r3, r2
 801ad76:	4619      	mov	r1, r3
 801ad78:	6938      	ldr	r0, [r7, #16]
 801ad7a:	f7ff fe97 	bl	801aaac <move_window>
 801ad7e:	4603      	mov	r3, r0
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d11d      	bne.n	801adc0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801ad84:	693b      	ldr	r3, [r7, #16]
 801ad86:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ad8a:	683b      	ldr	r3, [r7, #0]
 801ad8c:	009b      	lsls	r3, r3, #2
 801ad8e:	693a      	ldr	r2, [r7, #16]
 801ad90:	8992      	ldrh	r2, [r2, #12]
 801ad92:	fbb3 f0f2 	udiv	r0, r3, r2
 801ad96:	fb00 f202 	mul.w	r2, r0, r2
 801ad9a:	1a9b      	subs	r3, r3, r2
 801ad9c:	440b      	add	r3, r1
 801ad9e:	4618      	mov	r0, r3
 801ada0:	f7ff fbec 	bl	801a57c <ld_dword>
 801ada4:	4603      	mov	r3, r0
 801ada6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801adaa:	617b      	str	r3, [r7, #20]
			break;
 801adac:	e009      	b.n	801adc2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801adae:	2301      	movs	r3, #1
 801adb0:	617b      	str	r3, [r7, #20]
 801adb2:	e006      	b.n	801adc2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801adb4:	bf00      	nop
 801adb6:	e004      	b.n	801adc2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801adb8:	bf00      	nop
 801adba:	e002      	b.n	801adc2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801adbc:	bf00      	nop
 801adbe:	e000      	b.n	801adc2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801adc0:	bf00      	nop
		}
	}

	return val;
 801adc2:	697b      	ldr	r3, [r7, #20]
}
 801adc4:	4618      	mov	r0, r3
 801adc6:	3718      	adds	r7, #24
 801adc8:	46bd      	mov	sp, r7
 801adca:	bd80      	pop	{r7, pc}

0801adcc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801adcc:	b590      	push	{r4, r7, lr}
 801adce:	b089      	sub	sp, #36	@ 0x24
 801add0:	af00      	add	r7, sp, #0
 801add2:	60f8      	str	r0, [r7, #12]
 801add4:	60b9      	str	r1, [r7, #8]
 801add6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801add8:	2302      	movs	r3, #2
 801adda:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801addc:	68bb      	ldr	r3, [r7, #8]
 801adde:	2b01      	cmp	r3, #1
 801ade0:	f240 8109 	bls.w	801aff6 <put_fat+0x22a>
 801ade4:	68fb      	ldr	r3, [r7, #12]
 801ade6:	69db      	ldr	r3, [r3, #28]
 801ade8:	68ba      	ldr	r2, [r7, #8]
 801adea:	429a      	cmp	r2, r3
 801adec:	f080 8103 	bcs.w	801aff6 <put_fat+0x22a>
		switch (fs->fs_type) {
 801adf0:	68fb      	ldr	r3, [r7, #12]
 801adf2:	781b      	ldrb	r3, [r3, #0]
 801adf4:	2b03      	cmp	r3, #3
 801adf6:	f000 80b6 	beq.w	801af66 <put_fat+0x19a>
 801adfa:	2b03      	cmp	r3, #3
 801adfc:	f300 80fb 	bgt.w	801aff6 <put_fat+0x22a>
 801ae00:	2b01      	cmp	r3, #1
 801ae02:	d003      	beq.n	801ae0c <put_fat+0x40>
 801ae04:	2b02      	cmp	r3, #2
 801ae06:	f000 8083 	beq.w	801af10 <put_fat+0x144>
 801ae0a:	e0f4      	b.n	801aff6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801ae0c:	68bb      	ldr	r3, [r7, #8]
 801ae0e:	61bb      	str	r3, [r7, #24]
 801ae10:	69bb      	ldr	r3, [r7, #24]
 801ae12:	085b      	lsrs	r3, r3, #1
 801ae14:	69ba      	ldr	r2, [r7, #24]
 801ae16:	4413      	add	r3, r2
 801ae18:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	899b      	ldrh	r3, [r3, #12]
 801ae22:	4619      	mov	r1, r3
 801ae24:	69bb      	ldr	r3, [r7, #24]
 801ae26:	fbb3 f3f1 	udiv	r3, r3, r1
 801ae2a:	4413      	add	r3, r2
 801ae2c:	4619      	mov	r1, r3
 801ae2e:	68f8      	ldr	r0, [r7, #12]
 801ae30:	f7ff fe3c 	bl	801aaac <move_window>
 801ae34:	4603      	mov	r3, r0
 801ae36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ae38:	7ffb      	ldrb	r3, [r7, #31]
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	f040 80d4 	bne.w	801afe8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801ae40:	68fb      	ldr	r3, [r7, #12]
 801ae42:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ae46:	69bb      	ldr	r3, [r7, #24]
 801ae48:	1c5a      	adds	r2, r3, #1
 801ae4a:	61ba      	str	r2, [r7, #24]
 801ae4c:	68fa      	ldr	r2, [r7, #12]
 801ae4e:	8992      	ldrh	r2, [r2, #12]
 801ae50:	fbb3 f0f2 	udiv	r0, r3, r2
 801ae54:	fb00 f202 	mul.w	r2, r0, r2
 801ae58:	1a9b      	subs	r3, r3, r2
 801ae5a:	440b      	add	r3, r1
 801ae5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801ae5e:	68bb      	ldr	r3, [r7, #8]
 801ae60:	f003 0301 	and.w	r3, r3, #1
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	d00d      	beq.n	801ae84 <put_fat+0xb8>
 801ae68:	697b      	ldr	r3, [r7, #20]
 801ae6a:	781b      	ldrb	r3, [r3, #0]
 801ae6c:	b25b      	sxtb	r3, r3
 801ae6e:	f003 030f 	and.w	r3, r3, #15
 801ae72:	b25a      	sxtb	r2, r3
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	b2db      	uxtb	r3, r3
 801ae78:	011b      	lsls	r3, r3, #4
 801ae7a:	b25b      	sxtb	r3, r3
 801ae7c:	4313      	orrs	r3, r2
 801ae7e:	b25b      	sxtb	r3, r3
 801ae80:	b2db      	uxtb	r3, r3
 801ae82:	e001      	b.n	801ae88 <put_fat+0xbc>
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	b2db      	uxtb	r3, r3
 801ae88:	697a      	ldr	r2, [r7, #20]
 801ae8a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801ae8c:	68fb      	ldr	r3, [r7, #12]
 801ae8e:	2201      	movs	r2, #1
 801ae90:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ae96:	68fb      	ldr	r3, [r7, #12]
 801ae98:	899b      	ldrh	r3, [r3, #12]
 801ae9a:	4619      	mov	r1, r3
 801ae9c:	69bb      	ldr	r3, [r7, #24]
 801ae9e:	fbb3 f3f1 	udiv	r3, r3, r1
 801aea2:	4413      	add	r3, r2
 801aea4:	4619      	mov	r1, r3
 801aea6:	68f8      	ldr	r0, [r7, #12]
 801aea8:	f7ff fe00 	bl	801aaac <move_window>
 801aeac:	4603      	mov	r3, r0
 801aeae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801aeb0:	7ffb      	ldrb	r3, [r7, #31]
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	f040 809a 	bne.w	801afec <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801aebe:	68fb      	ldr	r3, [r7, #12]
 801aec0:	899b      	ldrh	r3, [r3, #12]
 801aec2:	461a      	mov	r2, r3
 801aec4:	69bb      	ldr	r3, [r7, #24]
 801aec6:	fbb3 f0f2 	udiv	r0, r3, r2
 801aeca:	fb00 f202 	mul.w	r2, r0, r2
 801aece:	1a9b      	subs	r3, r3, r2
 801aed0:	440b      	add	r3, r1
 801aed2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801aed4:	68bb      	ldr	r3, [r7, #8]
 801aed6:	f003 0301 	and.w	r3, r3, #1
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d003      	beq.n	801aee6 <put_fat+0x11a>
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	091b      	lsrs	r3, r3, #4
 801aee2:	b2db      	uxtb	r3, r3
 801aee4:	e00e      	b.n	801af04 <put_fat+0x138>
 801aee6:	697b      	ldr	r3, [r7, #20]
 801aee8:	781b      	ldrb	r3, [r3, #0]
 801aeea:	b25b      	sxtb	r3, r3
 801aeec:	f023 030f 	bic.w	r3, r3, #15
 801aef0:	b25a      	sxtb	r2, r3
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	0a1b      	lsrs	r3, r3, #8
 801aef6:	b25b      	sxtb	r3, r3
 801aef8:	f003 030f 	and.w	r3, r3, #15
 801aefc:	b25b      	sxtb	r3, r3
 801aefe:	4313      	orrs	r3, r2
 801af00:	b25b      	sxtb	r3, r3
 801af02:	b2db      	uxtb	r3, r3
 801af04:	697a      	ldr	r2, [r7, #20]
 801af06:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	2201      	movs	r2, #1
 801af0c:	70da      	strb	r2, [r3, #3]
			break;
 801af0e:	e072      	b.n	801aff6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	899b      	ldrh	r3, [r3, #12]
 801af18:	085b      	lsrs	r3, r3, #1
 801af1a:	b29b      	uxth	r3, r3
 801af1c:	4619      	mov	r1, r3
 801af1e:	68bb      	ldr	r3, [r7, #8]
 801af20:	fbb3 f3f1 	udiv	r3, r3, r1
 801af24:	4413      	add	r3, r2
 801af26:	4619      	mov	r1, r3
 801af28:	68f8      	ldr	r0, [r7, #12]
 801af2a:	f7ff fdbf 	bl	801aaac <move_window>
 801af2e:	4603      	mov	r3, r0
 801af30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801af32:	7ffb      	ldrb	r3, [r7, #31]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d15b      	bne.n	801aff0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801af3e:	68bb      	ldr	r3, [r7, #8]
 801af40:	005b      	lsls	r3, r3, #1
 801af42:	68fa      	ldr	r2, [r7, #12]
 801af44:	8992      	ldrh	r2, [r2, #12]
 801af46:	fbb3 f0f2 	udiv	r0, r3, r2
 801af4a:	fb00 f202 	mul.w	r2, r0, r2
 801af4e:	1a9b      	subs	r3, r3, r2
 801af50:	440b      	add	r3, r1
 801af52:	687a      	ldr	r2, [r7, #4]
 801af54:	b292      	uxth	r2, r2
 801af56:	4611      	mov	r1, r2
 801af58:	4618      	mov	r0, r3
 801af5a:	f7ff fb32 	bl	801a5c2 <st_word>
			fs->wflag = 1;
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	2201      	movs	r2, #1
 801af62:	70da      	strb	r2, [r3, #3]
			break;
 801af64:	e047      	b.n	801aff6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801af66:	68fb      	ldr	r3, [r7, #12]
 801af68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801af6a:	68fb      	ldr	r3, [r7, #12]
 801af6c:	899b      	ldrh	r3, [r3, #12]
 801af6e:	089b      	lsrs	r3, r3, #2
 801af70:	b29b      	uxth	r3, r3
 801af72:	4619      	mov	r1, r3
 801af74:	68bb      	ldr	r3, [r7, #8]
 801af76:	fbb3 f3f1 	udiv	r3, r3, r1
 801af7a:	4413      	add	r3, r2
 801af7c:	4619      	mov	r1, r3
 801af7e:	68f8      	ldr	r0, [r7, #12]
 801af80:	f7ff fd94 	bl	801aaac <move_window>
 801af84:	4603      	mov	r3, r0
 801af86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801af88:	7ffb      	ldrb	r3, [r7, #31]
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d132      	bne.n	801aff4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801af9a:	68bb      	ldr	r3, [r7, #8]
 801af9c:	009b      	lsls	r3, r3, #2
 801af9e:	68fa      	ldr	r2, [r7, #12]
 801afa0:	8992      	ldrh	r2, [r2, #12]
 801afa2:	fbb3 f0f2 	udiv	r0, r3, r2
 801afa6:	fb00 f202 	mul.w	r2, r0, r2
 801afaa:	1a9b      	subs	r3, r3, r2
 801afac:	440b      	add	r3, r1
 801afae:	4618      	mov	r0, r3
 801afb0:	f7ff fae4 	bl	801a57c <ld_dword>
 801afb4:	4603      	mov	r3, r0
 801afb6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801afba:	4323      	orrs	r3, r4
 801afbc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801afbe:	68fb      	ldr	r3, [r7, #12]
 801afc0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801afc4:	68bb      	ldr	r3, [r7, #8]
 801afc6:	009b      	lsls	r3, r3, #2
 801afc8:	68fa      	ldr	r2, [r7, #12]
 801afca:	8992      	ldrh	r2, [r2, #12]
 801afcc:	fbb3 f0f2 	udiv	r0, r3, r2
 801afd0:	fb00 f202 	mul.w	r2, r0, r2
 801afd4:	1a9b      	subs	r3, r3, r2
 801afd6:	440b      	add	r3, r1
 801afd8:	6879      	ldr	r1, [r7, #4]
 801afda:	4618      	mov	r0, r3
 801afdc:	f7ff fb0c 	bl	801a5f8 <st_dword>
			fs->wflag = 1;
 801afe0:	68fb      	ldr	r3, [r7, #12]
 801afe2:	2201      	movs	r2, #1
 801afe4:	70da      	strb	r2, [r3, #3]
			break;
 801afe6:	e006      	b.n	801aff6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801afe8:	bf00      	nop
 801afea:	e004      	b.n	801aff6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801afec:	bf00      	nop
 801afee:	e002      	b.n	801aff6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801aff0:	bf00      	nop
 801aff2:	e000      	b.n	801aff6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801aff4:	bf00      	nop
		}
	}
	return res;
 801aff6:	7ffb      	ldrb	r3, [r7, #31]
}
 801aff8:	4618      	mov	r0, r3
 801affa:	3724      	adds	r7, #36	@ 0x24
 801affc:	46bd      	mov	sp, r7
 801affe:	bd90      	pop	{r4, r7, pc}

0801b000 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b000:	b580      	push	{r7, lr}
 801b002:	b088      	sub	sp, #32
 801b004:	af00      	add	r7, sp, #0
 801b006:	60f8      	str	r0, [r7, #12]
 801b008:	60b9      	str	r1, [r7, #8]
 801b00a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b00c:	2300      	movs	r3, #0
 801b00e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b016:	68bb      	ldr	r3, [r7, #8]
 801b018:	2b01      	cmp	r3, #1
 801b01a:	d904      	bls.n	801b026 <remove_chain+0x26>
 801b01c:	69bb      	ldr	r3, [r7, #24]
 801b01e:	69db      	ldr	r3, [r3, #28]
 801b020:	68ba      	ldr	r2, [r7, #8]
 801b022:	429a      	cmp	r2, r3
 801b024:	d301      	bcc.n	801b02a <remove_chain+0x2a>
 801b026:	2302      	movs	r3, #2
 801b028:	e04b      	b.n	801b0c2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d00c      	beq.n	801b04a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b030:	f04f 32ff 	mov.w	r2, #4294967295
 801b034:	6879      	ldr	r1, [r7, #4]
 801b036:	69b8      	ldr	r0, [r7, #24]
 801b038:	f7ff fec8 	bl	801adcc <put_fat>
 801b03c:	4603      	mov	r3, r0
 801b03e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b040:	7ffb      	ldrb	r3, [r7, #31]
 801b042:	2b00      	cmp	r3, #0
 801b044:	d001      	beq.n	801b04a <remove_chain+0x4a>
 801b046:	7ffb      	ldrb	r3, [r7, #31]
 801b048:	e03b      	b.n	801b0c2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b04a:	68b9      	ldr	r1, [r7, #8]
 801b04c:	68f8      	ldr	r0, [r7, #12]
 801b04e:	f7ff fdea 	bl	801ac26 <get_fat>
 801b052:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b054:	697b      	ldr	r3, [r7, #20]
 801b056:	2b00      	cmp	r3, #0
 801b058:	d031      	beq.n	801b0be <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b05a:	697b      	ldr	r3, [r7, #20]
 801b05c:	2b01      	cmp	r3, #1
 801b05e:	d101      	bne.n	801b064 <remove_chain+0x64>
 801b060:	2302      	movs	r3, #2
 801b062:	e02e      	b.n	801b0c2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b064:	697b      	ldr	r3, [r7, #20]
 801b066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b06a:	d101      	bne.n	801b070 <remove_chain+0x70>
 801b06c:	2301      	movs	r3, #1
 801b06e:	e028      	b.n	801b0c2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b070:	2200      	movs	r2, #0
 801b072:	68b9      	ldr	r1, [r7, #8]
 801b074:	69b8      	ldr	r0, [r7, #24]
 801b076:	f7ff fea9 	bl	801adcc <put_fat>
 801b07a:	4603      	mov	r3, r0
 801b07c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b07e:	7ffb      	ldrb	r3, [r7, #31]
 801b080:	2b00      	cmp	r3, #0
 801b082:	d001      	beq.n	801b088 <remove_chain+0x88>
 801b084:	7ffb      	ldrb	r3, [r7, #31]
 801b086:	e01c      	b.n	801b0c2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b088:	69bb      	ldr	r3, [r7, #24]
 801b08a:	699a      	ldr	r2, [r3, #24]
 801b08c:	69bb      	ldr	r3, [r7, #24]
 801b08e:	69db      	ldr	r3, [r3, #28]
 801b090:	3b02      	subs	r3, #2
 801b092:	429a      	cmp	r2, r3
 801b094:	d20b      	bcs.n	801b0ae <remove_chain+0xae>
			fs->free_clst++;
 801b096:	69bb      	ldr	r3, [r7, #24]
 801b098:	699b      	ldr	r3, [r3, #24]
 801b09a:	1c5a      	adds	r2, r3, #1
 801b09c:	69bb      	ldr	r3, [r7, #24]
 801b09e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801b0a0:	69bb      	ldr	r3, [r7, #24]
 801b0a2:	791b      	ldrb	r3, [r3, #4]
 801b0a4:	f043 0301 	orr.w	r3, r3, #1
 801b0a8:	b2da      	uxtb	r2, r3
 801b0aa:	69bb      	ldr	r3, [r7, #24]
 801b0ac:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b0ae:	697b      	ldr	r3, [r7, #20]
 801b0b0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b0b2:	69bb      	ldr	r3, [r7, #24]
 801b0b4:	69db      	ldr	r3, [r3, #28]
 801b0b6:	68ba      	ldr	r2, [r7, #8]
 801b0b8:	429a      	cmp	r2, r3
 801b0ba:	d3c6      	bcc.n	801b04a <remove_chain+0x4a>
 801b0bc:	e000      	b.n	801b0c0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b0be:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b0c0:	2300      	movs	r3, #0
}
 801b0c2:	4618      	mov	r0, r3
 801b0c4:	3720      	adds	r7, #32
 801b0c6:	46bd      	mov	sp, r7
 801b0c8:	bd80      	pop	{r7, pc}

0801b0ca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b0ca:	b580      	push	{r7, lr}
 801b0cc:	b088      	sub	sp, #32
 801b0ce:	af00      	add	r7, sp, #0
 801b0d0:	6078      	str	r0, [r7, #4]
 801b0d2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b0da:	683b      	ldr	r3, [r7, #0]
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d10d      	bne.n	801b0fc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b0e0:	693b      	ldr	r3, [r7, #16]
 801b0e2:	695b      	ldr	r3, [r3, #20]
 801b0e4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b0e6:	69bb      	ldr	r3, [r7, #24]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d004      	beq.n	801b0f6 <create_chain+0x2c>
 801b0ec:	693b      	ldr	r3, [r7, #16]
 801b0ee:	69db      	ldr	r3, [r3, #28]
 801b0f0:	69ba      	ldr	r2, [r7, #24]
 801b0f2:	429a      	cmp	r2, r3
 801b0f4:	d31b      	bcc.n	801b12e <create_chain+0x64>
 801b0f6:	2301      	movs	r3, #1
 801b0f8:	61bb      	str	r3, [r7, #24]
 801b0fa:	e018      	b.n	801b12e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b0fc:	6839      	ldr	r1, [r7, #0]
 801b0fe:	6878      	ldr	r0, [r7, #4]
 801b100:	f7ff fd91 	bl	801ac26 <get_fat>
 801b104:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b106:	68fb      	ldr	r3, [r7, #12]
 801b108:	2b01      	cmp	r3, #1
 801b10a:	d801      	bhi.n	801b110 <create_chain+0x46>
 801b10c:	2301      	movs	r3, #1
 801b10e:	e070      	b.n	801b1f2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b110:	68fb      	ldr	r3, [r7, #12]
 801b112:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b116:	d101      	bne.n	801b11c <create_chain+0x52>
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	e06a      	b.n	801b1f2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b11c:	693b      	ldr	r3, [r7, #16]
 801b11e:	69db      	ldr	r3, [r3, #28]
 801b120:	68fa      	ldr	r2, [r7, #12]
 801b122:	429a      	cmp	r2, r3
 801b124:	d201      	bcs.n	801b12a <create_chain+0x60>
 801b126:	68fb      	ldr	r3, [r7, #12]
 801b128:	e063      	b.n	801b1f2 <create_chain+0x128>
		scl = clst;
 801b12a:	683b      	ldr	r3, [r7, #0]
 801b12c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b12e:	69bb      	ldr	r3, [r7, #24]
 801b130:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b132:	69fb      	ldr	r3, [r7, #28]
 801b134:	3301      	adds	r3, #1
 801b136:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b138:	693b      	ldr	r3, [r7, #16]
 801b13a:	69db      	ldr	r3, [r3, #28]
 801b13c:	69fa      	ldr	r2, [r7, #28]
 801b13e:	429a      	cmp	r2, r3
 801b140:	d307      	bcc.n	801b152 <create_chain+0x88>
				ncl = 2;
 801b142:	2302      	movs	r3, #2
 801b144:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b146:	69fa      	ldr	r2, [r7, #28]
 801b148:	69bb      	ldr	r3, [r7, #24]
 801b14a:	429a      	cmp	r2, r3
 801b14c:	d901      	bls.n	801b152 <create_chain+0x88>
 801b14e:	2300      	movs	r3, #0
 801b150:	e04f      	b.n	801b1f2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b152:	69f9      	ldr	r1, [r7, #28]
 801b154:	6878      	ldr	r0, [r7, #4]
 801b156:	f7ff fd66 	bl	801ac26 <get_fat>
 801b15a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d00e      	beq.n	801b180 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b162:	68fb      	ldr	r3, [r7, #12]
 801b164:	2b01      	cmp	r3, #1
 801b166:	d003      	beq.n	801b170 <create_chain+0xa6>
 801b168:	68fb      	ldr	r3, [r7, #12]
 801b16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b16e:	d101      	bne.n	801b174 <create_chain+0xaa>
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	e03e      	b.n	801b1f2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b174:	69fa      	ldr	r2, [r7, #28]
 801b176:	69bb      	ldr	r3, [r7, #24]
 801b178:	429a      	cmp	r2, r3
 801b17a:	d1da      	bne.n	801b132 <create_chain+0x68>
 801b17c:	2300      	movs	r3, #0
 801b17e:	e038      	b.n	801b1f2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b180:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b182:	f04f 32ff 	mov.w	r2, #4294967295
 801b186:	69f9      	ldr	r1, [r7, #28]
 801b188:	6938      	ldr	r0, [r7, #16]
 801b18a:	f7ff fe1f 	bl	801adcc <put_fat>
 801b18e:	4603      	mov	r3, r0
 801b190:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b192:	7dfb      	ldrb	r3, [r7, #23]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d109      	bne.n	801b1ac <create_chain+0xe2>
 801b198:	683b      	ldr	r3, [r7, #0]
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d006      	beq.n	801b1ac <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b19e:	69fa      	ldr	r2, [r7, #28]
 801b1a0:	6839      	ldr	r1, [r7, #0]
 801b1a2:	6938      	ldr	r0, [r7, #16]
 801b1a4:	f7ff fe12 	bl	801adcc <put_fat>
 801b1a8:	4603      	mov	r3, r0
 801b1aa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b1ac:	7dfb      	ldrb	r3, [r7, #23]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d116      	bne.n	801b1e0 <create_chain+0x116>
		fs->last_clst = ncl;
 801b1b2:	693b      	ldr	r3, [r7, #16]
 801b1b4:	69fa      	ldr	r2, [r7, #28]
 801b1b6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b1b8:	693b      	ldr	r3, [r7, #16]
 801b1ba:	699a      	ldr	r2, [r3, #24]
 801b1bc:	693b      	ldr	r3, [r7, #16]
 801b1be:	69db      	ldr	r3, [r3, #28]
 801b1c0:	3b02      	subs	r3, #2
 801b1c2:	429a      	cmp	r2, r3
 801b1c4:	d804      	bhi.n	801b1d0 <create_chain+0x106>
 801b1c6:	693b      	ldr	r3, [r7, #16]
 801b1c8:	699b      	ldr	r3, [r3, #24]
 801b1ca:	1e5a      	subs	r2, r3, #1
 801b1cc:	693b      	ldr	r3, [r7, #16]
 801b1ce:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801b1d0:	693b      	ldr	r3, [r7, #16]
 801b1d2:	791b      	ldrb	r3, [r3, #4]
 801b1d4:	f043 0301 	orr.w	r3, r3, #1
 801b1d8:	b2da      	uxtb	r2, r3
 801b1da:	693b      	ldr	r3, [r7, #16]
 801b1dc:	711a      	strb	r2, [r3, #4]
 801b1de:	e007      	b.n	801b1f0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b1e0:	7dfb      	ldrb	r3, [r7, #23]
 801b1e2:	2b01      	cmp	r3, #1
 801b1e4:	d102      	bne.n	801b1ec <create_chain+0x122>
 801b1e6:	f04f 33ff 	mov.w	r3, #4294967295
 801b1ea:	e000      	b.n	801b1ee <create_chain+0x124>
 801b1ec:	2301      	movs	r3, #1
 801b1ee:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b1f0:	69fb      	ldr	r3, [r7, #28]
}
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	3720      	adds	r7, #32
 801b1f6:	46bd      	mov	sp, r7
 801b1f8:	bd80      	pop	{r7, pc}

0801b1fa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b1fa:	b480      	push	{r7}
 801b1fc:	b087      	sub	sp, #28
 801b1fe:	af00      	add	r7, sp, #0
 801b200:	6078      	str	r0, [r7, #4]
 801b202:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b20e:	3304      	adds	r3, #4
 801b210:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	899b      	ldrh	r3, [r3, #12]
 801b216:	461a      	mov	r2, r3
 801b218:	683b      	ldr	r3, [r7, #0]
 801b21a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b21e:	68fa      	ldr	r2, [r7, #12]
 801b220:	8952      	ldrh	r2, [r2, #10]
 801b222:	fbb3 f3f2 	udiv	r3, r3, r2
 801b226:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b228:	693b      	ldr	r3, [r7, #16]
 801b22a:	1d1a      	adds	r2, r3, #4
 801b22c:	613a      	str	r2, [r7, #16]
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b232:	68bb      	ldr	r3, [r7, #8]
 801b234:	2b00      	cmp	r3, #0
 801b236:	d101      	bne.n	801b23c <clmt_clust+0x42>
 801b238:	2300      	movs	r3, #0
 801b23a:	e010      	b.n	801b25e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801b23c:	697a      	ldr	r2, [r7, #20]
 801b23e:	68bb      	ldr	r3, [r7, #8]
 801b240:	429a      	cmp	r2, r3
 801b242:	d307      	bcc.n	801b254 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801b244:	697a      	ldr	r2, [r7, #20]
 801b246:	68bb      	ldr	r3, [r7, #8]
 801b248:	1ad3      	subs	r3, r2, r3
 801b24a:	617b      	str	r3, [r7, #20]
 801b24c:	693b      	ldr	r3, [r7, #16]
 801b24e:	3304      	adds	r3, #4
 801b250:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b252:	e7e9      	b.n	801b228 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801b254:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b256:	693b      	ldr	r3, [r7, #16]
 801b258:	681a      	ldr	r2, [r3, #0]
 801b25a:	697b      	ldr	r3, [r7, #20]
 801b25c:	4413      	add	r3, r2
}
 801b25e:	4618      	mov	r0, r3
 801b260:	371c      	adds	r7, #28
 801b262:	46bd      	mov	sp, r7
 801b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b268:	4770      	bx	lr

0801b26a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b26a:	b580      	push	{r7, lr}
 801b26c:	b086      	sub	sp, #24
 801b26e:	af00      	add	r7, sp, #0
 801b270:	6078      	str	r0, [r7, #4]
 801b272:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b27a:	683b      	ldr	r3, [r7, #0]
 801b27c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b280:	d204      	bcs.n	801b28c <dir_sdi+0x22>
 801b282:	683b      	ldr	r3, [r7, #0]
 801b284:	f003 031f 	and.w	r3, r3, #31
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d001      	beq.n	801b290 <dir_sdi+0x26>
		return FR_INT_ERR;
 801b28c:	2302      	movs	r3, #2
 801b28e:	e071      	b.n	801b374 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	683a      	ldr	r2, [r7, #0]
 801b294:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	689b      	ldr	r3, [r3, #8]
 801b29a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b29c:	697b      	ldr	r3, [r7, #20]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d106      	bne.n	801b2b0 <dir_sdi+0x46>
 801b2a2:	693b      	ldr	r3, [r7, #16]
 801b2a4:	781b      	ldrb	r3, [r3, #0]
 801b2a6:	2b02      	cmp	r3, #2
 801b2a8:	d902      	bls.n	801b2b0 <dir_sdi+0x46>
		clst = fs->dirbase;
 801b2aa:	693b      	ldr	r3, [r7, #16]
 801b2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b2ae:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801b2b0:	697b      	ldr	r3, [r7, #20]
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d10c      	bne.n	801b2d0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801b2b6:	683b      	ldr	r3, [r7, #0]
 801b2b8:	095b      	lsrs	r3, r3, #5
 801b2ba:	693a      	ldr	r2, [r7, #16]
 801b2bc:	8912      	ldrh	r2, [r2, #8]
 801b2be:	4293      	cmp	r3, r2
 801b2c0:	d301      	bcc.n	801b2c6 <dir_sdi+0x5c>
 801b2c2:	2302      	movs	r3, #2
 801b2c4:	e056      	b.n	801b374 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801b2c6:	693b      	ldr	r3, [r7, #16]
 801b2c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	61da      	str	r2, [r3, #28]
 801b2ce:	e02d      	b.n	801b32c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801b2d0:	693b      	ldr	r3, [r7, #16]
 801b2d2:	895b      	ldrh	r3, [r3, #10]
 801b2d4:	461a      	mov	r2, r3
 801b2d6:	693b      	ldr	r3, [r7, #16]
 801b2d8:	899b      	ldrh	r3, [r3, #12]
 801b2da:	fb02 f303 	mul.w	r3, r2, r3
 801b2de:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b2e0:	e019      	b.n	801b316 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	6979      	ldr	r1, [r7, #20]
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	f7ff fc9d 	bl	801ac26 <get_fat>
 801b2ec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b2ee:	697b      	ldr	r3, [r7, #20]
 801b2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b2f4:	d101      	bne.n	801b2fa <dir_sdi+0x90>
 801b2f6:	2301      	movs	r3, #1
 801b2f8:	e03c      	b.n	801b374 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801b2fa:	697b      	ldr	r3, [r7, #20]
 801b2fc:	2b01      	cmp	r3, #1
 801b2fe:	d904      	bls.n	801b30a <dir_sdi+0xa0>
 801b300:	693b      	ldr	r3, [r7, #16]
 801b302:	69db      	ldr	r3, [r3, #28]
 801b304:	697a      	ldr	r2, [r7, #20]
 801b306:	429a      	cmp	r2, r3
 801b308:	d301      	bcc.n	801b30e <dir_sdi+0xa4>
 801b30a:	2302      	movs	r3, #2
 801b30c:	e032      	b.n	801b374 <dir_sdi+0x10a>
			ofs -= csz;
 801b30e:	683a      	ldr	r2, [r7, #0]
 801b310:	68fb      	ldr	r3, [r7, #12]
 801b312:	1ad3      	subs	r3, r2, r3
 801b314:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b316:	683a      	ldr	r2, [r7, #0]
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	429a      	cmp	r2, r3
 801b31c:	d2e1      	bcs.n	801b2e2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801b31e:	6979      	ldr	r1, [r7, #20]
 801b320:	6938      	ldr	r0, [r7, #16]
 801b322:	f7ff fc61 	bl	801abe8 <clust2sect>
 801b326:	4602      	mov	r2, r0
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	697a      	ldr	r2, [r7, #20]
 801b330:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	69db      	ldr	r3, [r3, #28]
 801b336:	2b00      	cmp	r3, #0
 801b338:	d101      	bne.n	801b33e <dir_sdi+0xd4>
 801b33a:	2302      	movs	r3, #2
 801b33c:	e01a      	b.n	801b374 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	69da      	ldr	r2, [r3, #28]
 801b342:	693b      	ldr	r3, [r7, #16]
 801b344:	899b      	ldrh	r3, [r3, #12]
 801b346:	4619      	mov	r1, r3
 801b348:	683b      	ldr	r3, [r7, #0]
 801b34a:	fbb3 f3f1 	udiv	r3, r3, r1
 801b34e:	441a      	add	r2, r3
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801b354:	693b      	ldr	r3, [r7, #16]
 801b356:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b35a:	693b      	ldr	r3, [r7, #16]
 801b35c:	899b      	ldrh	r3, [r3, #12]
 801b35e:	461a      	mov	r2, r3
 801b360:	683b      	ldr	r3, [r7, #0]
 801b362:	fbb3 f0f2 	udiv	r0, r3, r2
 801b366:	fb00 f202 	mul.w	r2, r0, r2
 801b36a:	1a9b      	subs	r3, r3, r2
 801b36c:	18ca      	adds	r2, r1, r3
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b372:	2300      	movs	r3, #0
}
 801b374:	4618      	mov	r0, r3
 801b376:	3718      	adds	r7, #24
 801b378:	46bd      	mov	sp, r7
 801b37a:	bd80      	pop	{r7, pc}

0801b37c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801b37c:	b580      	push	{r7, lr}
 801b37e:	b086      	sub	sp, #24
 801b380:	af00      	add	r7, sp, #0
 801b382:	6078      	str	r0, [r7, #4]
 801b384:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	695b      	ldr	r3, [r3, #20]
 801b390:	3320      	adds	r3, #32
 801b392:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	69db      	ldr	r3, [r3, #28]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d003      	beq.n	801b3a4 <dir_next+0x28>
 801b39c:	68bb      	ldr	r3, [r7, #8]
 801b39e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b3a2:	d301      	bcc.n	801b3a8 <dir_next+0x2c>
 801b3a4:	2304      	movs	r3, #4
 801b3a6:	e0bb      	b.n	801b520 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b3a8:	68fb      	ldr	r3, [r7, #12]
 801b3aa:	899b      	ldrh	r3, [r3, #12]
 801b3ac:	461a      	mov	r2, r3
 801b3ae:	68bb      	ldr	r3, [r7, #8]
 801b3b0:	fbb3 f1f2 	udiv	r1, r3, r2
 801b3b4:	fb01 f202 	mul.w	r2, r1, r2
 801b3b8:	1a9b      	subs	r3, r3, r2
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	f040 809d 	bne.w	801b4fa <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	69db      	ldr	r3, [r3, #28]
 801b3c4:	1c5a      	adds	r2, r3, #1
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	699b      	ldr	r3, [r3, #24]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d10b      	bne.n	801b3ea <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801b3d2:	68bb      	ldr	r3, [r7, #8]
 801b3d4:	095b      	lsrs	r3, r3, #5
 801b3d6:	68fa      	ldr	r2, [r7, #12]
 801b3d8:	8912      	ldrh	r2, [r2, #8]
 801b3da:	4293      	cmp	r3, r2
 801b3dc:	f0c0 808d 	bcc.w	801b4fa <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	2200      	movs	r2, #0
 801b3e4:	61da      	str	r2, [r3, #28]
 801b3e6:	2304      	movs	r3, #4
 801b3e8:	e09a      	b.n	801b520 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801b3ea:	68fb      	ldr	r3, [r7, #12]
 801b3ec:	899b      	ldrh	r3, [r3, #12]
 801b3ee:	461a      	mov	r2, r3
 801b3f0:	68bb      	ldr	r3, [r7, #8]
 801b3f2:	fbb3 f3f2 	udiv	r3, r3, r2
 801b3f6:	68fa      	ldr	r2, [r7, #12]
 801b3f8:	8952      	ldrh	r2, [r2, #10]
 801b3fa:	3a01      	subs	r2, #1
 801b3fc:	4013      	ands	r3, r2
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d17b      	bne.n	801b4fa <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801b402:	687a      	ldr	r2, [r7, #4]
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	699b      	ldr	r3, [r3, #24]
 801b408:	4619      	mov	r1, r3
 801b40a:	4610      	mov	r0, r2
 801b40c:	f7ff fc0b 	bl	801ac26 <get_fat>
 801b410:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801b412:	697b      	ldr	r3, [r7, #20]
 801b414:	2b01      	cmp	r3, #1
 801b416:	d801      	bhi.n	801b41c <dir_next+0xa0>
 801b418:	2302      	movs	r3, #2
 801b41a:	e081      	b.n	801b520 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801b41c:	697b      	ldr	r3, [r7, #20]
 801b41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b422:	d101      	bne.n	801b428 <dir_next+0xac>
 801b424:	2301      	movs	r3, #1
 801b426:	e07b      	b.n	801b520 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801b428:	68fb      	ldr	r3, [r7, #12]
 801b42a:	69db      	ldr	r3, [r3, #28]
 801b42c:	697a      	ldr	r2, [r7, #20]
 801b42e:	429a      	cmp	r2, r3
 801b430:	d359      	bcc.n	801b4e6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801b432:	683b      	ldr	r3, [r7, #0]
 801b434:	2b00      	cmp	r3, #0
 801b436:	d104      	bne.n	801b442 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	2200      	movs	r2, #0
 801b43c:	61da      	str	r2, [r3, #28]
 801b43e:	2304      	movs	r3, #4
 801b440:	e06e      	b.n	801b520 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801b442:	687a      	ldr	r2, [r7, #4]
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	699b      	ldr	r3, [r3, #24]
 801b448:	4619      	mov	r1, r3
 801b44a:	4610      	mov	r0, r2
 801b44c:	f7ff fe3d 	bl	801b0ca <create_chain>
 801b450:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801b452:	697b      	ldr	r3, [r7, #20]
 801b454:	2b00      	cmp	r3, #0
 801b456:	d101      	bne.n	801b45c <dir_next+0xe0>
 801b458:	2307      	movs	r3, #7
 801b45a:	e061      	b.n	801b520 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801b45c:	697b      	ldr	r3, [r7, #20]
 801b45e:	2b01      	cmp	r3, #1
 801b460:	d101      	bne.n	801b466 <dir_next+0xea>
 801b462:	2302      	movs	r3, #2
 801b464:	e05c      	b.n	801b520 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b466:	697b      	ldr	r3, [r7, #20]
 801b468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b46c:	d101      	bne.n	801b472 <dir_next+0xf6>
 801b46e:	2301      	movs	r3, #1
 801b470:	e056      	b.n	801b520 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801b472:	68f8      	ldr	r0, [r7, #12]
 801b474:	f7ff fad6 	bl	801aa24 <sync_window>
 801b478:	4603      	mov	r3, r0
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d001      	beq.n	801b482 <dir_next+0x106>
 801b47e:	2301      	movs	r3, #1
 801b480:	e04e      	b.n	801b520 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801b482:	68fb      	ldr	r3, [r7, #12]
 801b484:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b488:	68fb      	ldr	r3, [r7, #12]
 801b48a:	899b      	ldrh	r3, [r3, #12]
 801b48c:	461a      	mov	r2, r3
 801b48e:	2100      	movs	r1, #0
 801b490:	f7ff f8ff 	bl	801a692 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b494:	2300      	movs	r3, #0
 801b496:	613b      	str	r3, [r7, #16]
 801b498:	6979      	ldr	r1, [r7, #20]
 801b49a:	68f8      	ldr	r0, [r7, #12]
 801b49c:	f7ff fba4 	bl	801abe8 <clust2sect>
 801b4a0:	4602      	mov	r2, r0
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	635a      	str	r2, [r3, #52]	@ 0x34
 801b4a6:	e012      	b.n	801b4ce <dir_next+0x152>
						fs->wflag = 1;
 801b4a8:	68fb      	ldr	r3, [r7, #12]
 801b4aa:	2201      	movs	r2, #1
 801b4ac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801b4ae:	68f8      	ldr	r0, [r7, #12]
 801b4b0:	f7ff fab8 	bl	801aa24 <sync_window>
 801b4b4:	4603      	mov	r3, r0
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d001      	beq.n	801b4be <dir_next+0x142>
 801b4ba:	2301      	movs	r3, #1
 801b4bc:	e030      	b.n	801b520 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b4be:	693b      	ldr	r3, [r7, #16]
 801b4c0:	3301      	adds	r3, #1
 801b4c2:	613b      	str	r3, [r7, #16]
 801b4c4:	68fb      	ldr	r3, [r7, #12]
 801b4c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b4c8:	1c5a      	adds	r2, r3, #1
 801b4ca:	68fb      	ldr	r3, [r7, #12]
 801b4cc:	635a      	str	r2, [r3, #52]	@ 0x34
 801b4ce:	68fb      	ldr	r3, [r7, #12]
 801b4d0:	895b      	ldrh	r3, [r3, #10]
 801b4d2:	461a      	mov	r2, r3
 801b4d4:	693b      	ldr	r3, [r7, #16]
 801b4d6:	4293      	cmp	r3, r2
 801b4d8:	d3e6      	bcc.n	801b4a8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801b4da:	68fb      	ldr	r3, [r7, #12]
 801b4dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b4de:	693b      	ldr	r3, [r7, #16]
 801b4e0:	1ad2      	subs	r2, r2, r3
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	697a      	ldr	r2, [r7, #20]
 801b4ea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801b4ec:	6979      	ldr	r1, [r7, #20]
 801b4ee:	68f8      	ldr	r0, [r7, #12]
 801b4f0:	f7ff fb7a 	bl	801abe8 <clust2sect>
 801b4f4:	4602      	mov	r2, r0
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	68ba      	ldr	r2, [r7, #8]
 801b4fe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	899b      	ldrh	r3, [r3, #12]
 801b50a:	461a      	mov	r2, r3
 801b50c:	68bb      	ldr	r3, [r7, #8]
 801b50e:	fbb3 f0f2 	udiv	r0, r3, r2
 801b512:	fb00 f202 	mul.w	r2, r0, r2
 801b516:	1a9b      	subs	r3, r3, r2
 801b518:	18ca      	adds	r2, r1, r3
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b51e:	2300      	movs	r3, #0
}
 801b520:	4618      	mov	r0, r3
 801b522:	3718      	adds	r7, #24
 801b524:	46bd      	mov	sp, r7
 801b526:	bd80      	pop	{r7, pc}

0801b528 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801b528:	b580      	push	{r7, lr}
 801b52a:	b086      	sub	sp, #24
 801b52c:	af00      	add	r7, sp, #0
 801b52e:	6078      	str	r0, [r7, #4]
 801b530:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801b538:	2100      	movs	r1, #0
 801b53a:	6878      	ldr	r0, [r7, #4]
 801b53c:	f7ff fe95 	bl	801b26a <dir_sdi>
 801b540:	4603      	mov	r3, r0
 801b542:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b544:	7dfb      	ldrb	r3, [r7, #23]
 801b546:	2b00      	cmp	r3, #0
 801b548:	d12b      	bne.n	801b5a2 <dir_alloc+0x7a>
		n = 0;
 801b54a:	2300      	movs	r3, #0
 801b54c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	69db      	ldr	r3, [r3, #28]
 801b552:	4619      	mov	r1, r3
 801b554:	68f8      	ldr	r0, [r7, #12]
 801b556:	f7ff faa9 	bl	801aaac <move_window>
 801b55a:	4603      	mov	r3, r0
 801b55c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b55e:	7dfb      	ldrb	r3, [r7, #23]
 801b560:	2b00      	cmp	r3, #0
 801b562:	d11d      	bne.n	801b5a0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	6a1b      	ldr	r3, [r3, #32]
 801b568:	781b      	ldrb	r3, [r3, #0]
 801b56a:	2be5      	cmp	r3, #229	@ 0xe5
 801b56c:	d004      	beq.n	801b578 <dir_alloc+0x50>
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	6a1b      	ldr	r3, [r3, #32]
 801b572:	781b      	ldrb	r3, [r3, #0]
 801b574:	2b00      	cmp	r3, #0
 801b576:	d107      	bne.n	801b588 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801b578:	693b      	ldr	r3, [r7, #16]
 801b57a:	3301      	adds	r3, #1
 801b57c:	613b      	str	r3, [r7, #16]
 801b57e:	693a      	ldr	r2, [r7, #16]
 801b580:	683b      	ldr	r3, [r7, #0]
 801b582:	429a      	cmp	r2, r3
 801b584:	d102      	bne.n	801b58c <dir_alloc+0x64>
 801b586:	e00c      	b.n	801b5a2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801b588:	2300      	movs	r3, #0
 801b58a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801b58c:	2101      	movs	r1, #1
 801b58e:	6878      	ldr	r0, [r7, #4]
 801b590:	f7ff fef4 	bl	801b37c <dir_next>
 801b594:	4603      	mov	r3, r0
 801b596:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801b598:	7dfb      	ldrb	r3, [r7, #23]
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d0d7      	beq.n	801b54e <dir_alloc+0x26>
 801b59e:	e000      	b.n	801b5a2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801b5a0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b5a2:	7dfb      	ldrb	r3, [r7, #23]
 801b5a4:	2b04      	cmp	r3, #4
 801b5a6:	d101      	bne.n	801b5ac <dir_alloc+0x84>
 801b5a8:	2307      	movs	r3, #7
 801b5aa:	75fb      	strb	r3, [r7, #23]
	return res;
 801b5ac:	7dfb      	ldrb	r3, [r7, #23]
}
 801b5ae:	4618      	mov	r0, r3
 801b5b0:	3718      	adds	r7, #24
 801b5b2:	46bd      	mov	sp, r7
 801b5b4:	bd80      	pop	{r7, pc}

0801b5b6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801b5b6:	b580      	push	{r7, lr}
 801b5b8:	b084      	sub	sp, #16
 801b5ba:	af00      	add	r7, sp, #0
 801b5bc:	6078      	str	r0, [r7, #4]
 801b5be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801b5c0:	683b      	ldr	r3, [r7, #0]
 801b5c2:	331a      	adds	r3, #26
 801b5c4:	4618      	mov	r0, r3
 801b5c6:	f7fe ffc1 	bl	801a54c <ld_word>
 801b5ca:	4603      	mov	r3, r0
 801b5cc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	781b      	ldrb	r3, [r3, #0]
 801b5d2:	2b03      	cmp	r3, #3
 801b5d4:	d109      	bne.n	801b5ea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801b5d6:	683b      	ldr	r3, [r7, #0]
 801b5d8:	3314      	adds	r3, #20
 801b5da:	4618      	mov	r0, r3
 801b5dc:	f7fe ffb6 	bl	801a54c <ld_word>
 801b5e0:	4603      	mov	r3, r0
 801b5e2:	041b      	lsls	r3, r3, #16
 801b5e4:	68fa      	ldr	r2, [r7, #12]
 801b5e6:	4313      	orrs	r3, r2
 801b5e8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801b5ea:	68fb      	ldr	r3, [r7, #12]
}
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	3710      	adds	r7, #16
 801b5f0:	46bd      	mov	sp, r7
 801b5f2:	bd80      	pop	{r7, pc}

0801b5f4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801b5f4:	b580      	push	{r7, lr}
 801b5f6:	b084      	sub	sp, #16
 801b5f8:	af00      	add	r7, sp, #0
 801b5fa:	60f8      	str	r0, [r7, #12]
 801b5fc:	60b9      	str	r1, [r7, #8]
 801b5fe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801b600:	68bb      	ldr	r3, [r7, #8]
 801b602:	331a      	adds	r3, #26
 801b604:	687a      	ldr	r2, [r7, #4]
 801b606:	b292      	uxth	r2, r2
 801b608:	4611      	mov	r1, r2
 801b60a:	4618      	mov	r0, r3
 801b60c:	f7fe ffd9 	bl	801a5c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	781b      	ldrb	r3, [r3, #0]
 801b614:	2b03      	cmp	r3, #3
 801b616:	d109      	bne.n	801b62c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801b618:	68bb      	ldr	r3, [r7, #8]
 801b61a:	f103 0214 	add.w	r2, r3, #20
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	0c1b      	lsrs	r3, r3, #16
 801b622:	b29b      	uxth	r3, r3
 801b624:	4619      	mov	r1, r3
 801b626:	4610      	mov	r0, r2
 801b628:	f7fe ffcb 	bl	801a5c2 <st_word>
	}
}
 801b62c:	bf00      	nop
 801b62e:	3710      	adds	r7, #16
 801b630:	46bd      	mov	sp, r7
 801b632:	bd80      	pop	{r7, pc}

0801b634 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801b634:	b590      	push	{r4, r7, lr}
 801b636:	b087      	sub	sp, #28
 801b638:	af00      	add	r7, sp, #0
 801b63a:	6078      	str	r0, [r7, #4]
 801b63c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801b63e:	683b      	ldr	r3, [r7, #0]
 801b640:	331a      	adds	r3, #26
 801b642:	4618      	mov	r0, r3
 801b644:	f7fe ff82 	bl	801a54c <ld_word>
 801b648:	4603      	mov	r3, r0
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d001      	beq.n	801b652 <cmp_lfn+0x1e>
 801b64e:	2300      	movs	r3, #0
 801b650:	e059      	b.n	801b706 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801b652:	683b      	ldr	r3, [r7, #0]
 801b654:	781b      	ldrb	r3, [r3, #0]
 801b656:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b65a:	1e5a      	subs	r2, r3, #1
 801b65c:	4613      	mov	r3, r2
 801b65e:	005b      	lsls	r3, r3, #1
 801b660:	4413      	add	r3, r2
 801b662:	009b      	lsls	r3, r3, #2
 801b664:	4413      	add	r3, r2
 801b666:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b668:	2301      	movs	r3, #1
 801b66a:	81fb      	strh	r3, [r7, #14]
 801b66c:	2300      	movs	r3, #0
 801b66e:	613b      	str	r3, [r7, #16]
 801b670:	e033      	b.n	801b6da <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801b672:	4a27      	ldr	r2, [pc, #156]	@ (801b710 <cmp_lfn+0xdc>)
 801b674:	693b      	ldr	r3, [r7, #16]
 801b676:	4413      	add	r3, r2
 801b678:	781b      	ldrb	r3, [r3, #0]
 801b67a:	461a      	mov	r2, r3
 801b67c:	683b      	ldr	r3, [r7, #0]
 801b67e:	4413      	add	r3, r2
 801b680:	4618      	mov	r0, r3
 801b682:	f7fe ff63 	bl	801a54c <ld_word>
 801b686:	4603      	mov	r3, r0
 801b688:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801b68a:	89fb      	ldrh	r3, [r7, #14]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d01a      	beq.n	801b6c6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801b690:	697b      	ldr	r3, [r7, #20]
 801b692:	2bfe      	cmp	r3, #254	@ 0xfe
 801b694:	d812      	bhi.n	801b6bc <cmp_lfn+0x88>
 801b696:	89bb      	ldrh	r3, [r7, #12]
 801b698:	4618      	mov	r0, r3
 801b69a:	f001 ff71 	bl	801d580 <ff_wtoupper>
 801b69e:	4603      	mov	r3, r0
 801b6a0:	461c      	mov	r4, r3
 801b6a2:	697b      	ldr	r3, [r7, #20]
 801b6a4:	1c5a      	adds	r2, r3, #1
 801b6a6:	617a      	str	r2, [r7, #20]
 801b6a8:	005b      	lsls	r3, r3, #1
 801b6aa:	687a      	ldr	r2, [r7, #4]
 801b6ac:	4413      	add	r3, r2
 801b6ae:	881b      	ldrh	r3, [r3, #0]
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	f001 ff65 	bl	801d580 <ff_wtoupper>
 801b6b6:	4603      	mov	r3, r0
 801b6b8:	429c      	cmp	r4, r3
 801b6ba:	d001      	beq.n	801b6c0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801b6bc:	2300      	movs	r3, #0
 801b6be:	e022      	b.n	801b706 <cmp_lfn+0xd2>
			}
			wc = uc;
 801b6c0:	89bb      	ldrh	r3, [r7, #12]
 801b6c2:	81fb      	strh	r3, [r7, #14]
 801b6c4:	e006      	b.n	801b6d4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801b6c6:	89bb      	ldrh	r3, [r7, #12]
 801b6c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b6cc:	4293      	cmp	r3, r2
 801b6ce:	d001      	beq.n	801b6d4 <cmp_lfn+0xa0>
 801b6d0:	2300      	movs	r3, #0
 801b6d2:	e018      	b.n	801b706 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b6d4:	693b      	ldr	r3, [r7, #16]
 801b6d6:	3301      	adds	r3, #1
 801b6d8:	613b      	str	r3, [r7, #16]
 801b6da:	693b      	ldr	r3, [r7, #16]
 801b6dc:	2b0c      	cmp	r3, #12
 801b6de:	d9c8      	bls.n	801b672 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801b6e0:	683b      	ldr	r3, [r7, #0]
 801b6e2:	781b      	ldrb	r3, [r3, #0]
 801b6e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d00b      	beq.n	801b704 <cmp_lfn+0xd0>
 801b6ec:	89fb      	ldrh	r3, [r7, #14]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d008      	beq.n	801b704 <cmp_lfn+0xd0>
 801b6f2:	697b      	ldr	r3, [r7, #20]
 801b6f4:	005b      	lsls	r3, r3, #1
 801b6f6:	687a      	ldr	r2, [r7, #4]
 801b6f8:	4413      	add	r3, r2
 801b6fa:	881b      	ldrh	r3, [r3, #0]
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d001      	beq.n	801b704 <cmp_lfn+0xd0>
 801b700:	2300      	movs	r3, #0
 801b702:	e000      	b.n	801b706 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801b704:	2301      	movs	r3, #1
}
 801b706:	4618      	mov	r0, r3
 801b708:	371c      	adds	r7, #28
 801b70a:	46bd      	mov	sp, r7
 801b70c:	bd90      	pop	{r4, r7, pc}
 801b70e:	bf00      	nop
 801b710:	0801e228 	.word	0x0801e228

0801b714 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801b714:	b580      	push	{r7, lr}
 801b716:	b086      	sub	sp, #24
 801b718:	af00      	add	r7, sp, #0
 801b71a:	6078      	str	r0, [r7, #4]
 801b71c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801b71e:	683b      	ldr	r3, [r7, #0]
 801b720:	331a      	adds	r3, #26
 801b722:	4618      	mov	r0, r3
 801b724:	f7fe ff12 	bl	801a54c <ld_word>
 801b728:	4603      	mov	r3, r0
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	d001      	beq.n	801b732 <pick_lfn+0x1e>
 801b72e:	2300      	movs	r3, #0
 801b730:	e04d      	b.n	801b7ce <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801b732:	683b      	ldr	r3, [r7, #0]
 801b734:	781b      	ldrb	r3, [r3, #0]
 801b736:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801b73a:	1e5a      	subs	r2, r3, #1
 801b73c:	4613      	mov	r3, r2
 801b73e:	005b      	lsls	r3, r3, #1
 801b740:	4413      	add	r3, r2
 801b742:	009b      	lsls	r3, r3, #2
 801b744:	4413      	add	r3, r2
 801b746:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b748:	2301      	movs	r3, #1
 801b74a:	81fb      	strh	r3, [r7, #14]
 801b74c:	2300      	movs	r3, #0
 801b74e:	613b      	str	r3, [r7, #16]
 801b750:	e028      	b.n	801b7a4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801b752:	4a21      	ldr	r2, [pc, #132]	@ (801b7d8 <pick_lfn+0xc4>)
 801b754:	693b      	ldr	r3, [r7, #16]
 801b756:	4413      	add	r3, r2
 801b758:	781b      	ldrb	r3, [r3, #0]
 801b75a:	461a      	mov	r2, r3
 801b75c:	683b      	ldr	r3, [r7, #0]
 801b75e:	4413      	add	r3, r2
 801b760:	4618      	mov	r0, r3
 801b762:	f7fe fef3 	bl	801a54c <ld_word>
 801b766:	4603      	mov	r3, r0
 801b768:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801b76a:	89fb      	ldrh	r3, [r7, #14]
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d00f      	beq.n	801b790 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801b770:	697b      	ldr	r3, [r7, #20]
 801b772:	2bfe      	cmp	r3, #254	@ 0xfe
 801b774:	d901      	bls.n	801b77a <pick_lfn+0x66>
 801b776:	2300      	movs	r3, #0
 801b778:	e029      	b.n	801b7ce <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801b77a:	89bb      	ldrh	r3, [r7, #12]
 801b77c:	81fb      	strh	r3, [r7, #14]
 801b77e:	697b      	ldr	r3, [r7, #20]
 801b780:	1c5a      	adds	r2, r3, #1
 801b782:	617a      	str	r2, [r7, #20]
 801b784:	005b      	lsls	r3, r3, #1
 801b786:	687a      	ldr	r2, [r7, #4]
 801b788:	4413      	add	r3, r2
 801b78a:	89fa      	ldrh	r2, [r7, #14]
 801b78c:	801a      	strh	r2, [r3, #0]
 801b78e:	e006      	b.n	801b79e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801b790:	89bb      	ldrh	r3, [r7, #12]
 801b792:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b796:	4293      	cmp	r3, r2
 801b798:	d001      	beq.n	801b79e <pick_lfn+0x8a>
 801b79a:	2300      	movs	r3, #0
 801b79c:	e017      	b.n	801b7ce <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b79e:	693b      	ldr	r3, [r7, #16]
 801b7a0:	3301      	adds	r3, #1
 801b7a2:	613b      	str	r3, [r7, #16]
 801b7a4:	693b      	ldr	r3, [r7, #16]
 801b7a6:	2b0c      	cmp	r3, #12
 801b7a8:	d9d3      	bls.n	801b752 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801b7aa:	683b      	ldr	r3, [r7, #0]
 801b7ac:	781b      	ldrb	r3, [r3, #0]
 801b7ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d00a      	beq.n	801b7cc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801b7b6:	697b      	ldr	r3, [r7, #20]
 801b7b8:	2bfe      	cmp	r3, #254	@ 0xfe
 801b7ba:	d901      	bls.n	801b7c0 <pick_lfn+0xac>
 801b7bc:	2300      	movs	r3, #0
 801b7be:	e006      	b.n	801b7ce <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801b7c0:	697b      	ldr	r3, [r7, #20]
 801b7c2:	005b      	lsls	r3, r3, #1
 801b7c4:	687a      	ldr	r2, [r7, #4]
 801b7c6:	4413      	add	r3, r2
 801b7c8:	2200      	movs	r2, #0
 801b7ca:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801b7cc:	2301      	movs	r3, #1
}
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	3718      	adds	r7, #24
 801b7d2:	46bd      	mov	sp, r7
 801b7d4:	bd80      	pop	{r7, pc}
 801b7d6:	bf00      	nop
 801b7d8:	0801e228 	.word	0x0801e228

0801b7dc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801b7dc:	b580      	push	{r7, lr}
 801b7de:	b088      	sub	sp, #32
 801b7e0:	af00      	add	r7, sp, #0
 801b7e2:	60f8      	str	r0, [r7, #12]
 801b7e4:	60b9      	str	r1, [r7, #8]
 801b7e6:	4611      	mov	r1, r2
 801b7e8:	461a      	mov	r2, r3
 801b7ea:	460b      	mov	r3, r1
 801b7ec:	71fb      	strb	r3, [r7, #7]
 801b7ee:	4613      	mov	r3, r2
 801b7f0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801b7f2:	68bb      	ldr	r3, [r7, #8]
 801b7f4:	330d      	adds	r3, #13
 801b7f6:	79ba      	ldrb	r2, [r7, #6]
 801b7f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801b7fa:	68bb      	ldr	r3, [r7, #8]
 801b7fc:	330b      	adds	r3, #11
 801b7fe:	220f      	movs	r2, #15
 801b800:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801b802:	68bb      	ldr	r3, [r7, #8]
 801b804:	330c      	adds	r3, #12
 801b806:	2200      	movs	r2, #0
 801b808:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801b80a:	68bb      	ldr	r3, [r7, #8]
 801b80c:	331a      	adds	r3, #26
 801b80e:	2100      	movs	r1, #0
 801b810:	4618      	mov	r0, r3
 801b812:	f7fe fed6 	bl	801a5c2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801b816:	79fb      	ldrb	r3, [r7, #7]
 801b818:	1e5a      	subs	r2, r3, #1
 801b81a:	4613      	mov	r3, r2
 801b81c:	005b      	lsls	r3, r3, #1
 801b81e:	4413      	add	r3, r2
 801b820:	009b      	lsls	r3, r3, #2
 801b822:	4413      	add	r3, r2
 801b824:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801b826:	2300      	movs	r3, #0
 801b828:	82fb      	strh	r3, [r7, #22]
 801b82a:	2300      	movs	r3, #0
 801b82c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b82e:	8afb      	ldrh	r3, [r7, #22]
 801b830:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b834:	4293      	cmp	r3, r2
 801b836:	d007      	beq.n	801b848 <put_lfn+0x6c>
 801b838:	69fb      	ldr	r3, [r7, #28]
 801b83a:	1c5a      	adds	r2, r3, #1
 801b83c:	61fa      	str	r2, [r7, #28]
 801b83e:	005b      	lsls	r3, r3, #1
 801b840:	68fa      	ldr	r2, [r7, #12]
 801b842:	4413      	add	r3, r2
 801b844:	881b      	ldrh	r3, [r3, #0]
 801b846:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801b848:	4a17      	ldr	r2, [pc, #92]	@ (801b8a8 <put_lfn+0xcc>)
 801b84a:	69bb      	ldr	r3, [r7, #24]
 801b84c:	4413      	add	r3, r2
 801b84e:	781b      	ldrb	r3, [r3, #0]
 801b850:	461a      	mov	r2, r3
 801b852:	68bb      	ldr	r3, [r7, #8]
 801b854:	4413      	add	r3, r2
 801b856:	8afa      	ldrh	r2, [r7, #22]
 801b858:	4611      	mov	r1, r2
 801b85a:	4618      	mov	r0, r3
 801b85c:	f7fe feb1 	bl	801a5c2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b860:	8afb      	ldrh	r3, [r7, #22]
 801b862:	2b00      	cmp	r3, #0
 801b864:	d102      	bne.n	801b86c <put_lfn+0x90>
 801b866:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b86a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801b86c:	69bb      	ldr	r3, [r7, #24]
 801b86e:	3301      	adds	r3, #1
 801b870:	61bb      	str	r3, [r7, #24]
 801b872:	69bb      	ldr	r3, [r7, #24]
 801b874:	2b0c      	cmp	r3, #12
 801b876:	d9da      	bls.n	801b82e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801b878:	8afb      	ldrh	r3, [r7, #22]
 801b87a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b87e:	4293      	cmp	r3, r2
 801b880:	d006      	beq.n	801b890 <put_lfn+0xb4>
 801b882:	69fb      	ldr	r3, [r7, #28]
 801b884:	005b      	lsls	r3, r3, #1
 801b886:	68fa      	ldr	r2, [r7, #12]
 801b888:	4413      	add	r3, r2
 801b88a:	881b      	ldrh	r3, [r3, #0]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d103      	bne.n	801b898 <put_lfn+0xbc>
 801b890:	79fb      	ldrb	r3, [r7, #7]
 801b892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b896:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801b898:	68bb      	ldr	r3, [r7, #8]
 801b89a:	79fa      	ldrb	r2, [r7, #7]
 801b89c:	701a      	strb	r2, [r3, #0]
}
 801b89e:	bf00      	nop
 801b8a0:	3720      	adds	r7, #32
 801b8a2:	46bd      	mov	sp, r7
 801b8a4:	bd80      	pop	{r7, pc}
 801b8a6:	bf00      	nop
 801b8a8:	0801e228 	.word	0x0801e228

0801b8ac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801b8ac:	b580      	push	{r7, lr}
 801b8ae:	b08c      	sub	sp, #48	@ 0x30
 801b8b0:	af00      	add	r7, sp, #0
 801b8b2:	60f8      	str	r0, [r7, #12]
 801b8b4:	60b9      	str	r1, [r7, #8]
 801b8b6:	607a      	str	r2, [r7, #4]
 801b8b8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801b8ba:	220b      	movs	r2, #11
 801b8bc:	68b9      	ldr	r1, [r7, #8]
 801b8be:	68f8      	ldr	r0, [r7, #12]
 801b8c0:	f7fe fec6 	bl	801a650 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801b8c4:	683b      	ldr	r3, [r7, #0]
 801b8c6:	2b05      	cmp	r3, #5
 801b8c8:	d929      	bls.n	801b91e <gen_numname+0x72>
		sr = seq;
 801b8ca:	683b      	ldr	r3, [r7, #0]
 801b8cc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801b8ce:	e020      	b.n	801b912 <gen_numname+0x66>
			wc = *lfn++;
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	1c9a      	adds	r2, r3, #2
 801b8d4:	607a      	str	r2, [r7, #4]
 801b8d6:	881b      	ldrh	r3, [r3, #0]
 801b8d8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801b8da:	2300      	movs	r3, #0
 801b8dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b8de:	e015      	b.n	801b90c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801b8e0:	69fb      	ldr	r3, [r7, #28]
 801b8e2:	005a      	lsls	r2, r3, #1
 801b8e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b8e6:	f003 0301 	and.w	r3, r3, #1
 801b8ea:	4413      	add	r3, r2
 801b8ec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801b8ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b8f0:	085b      	lsrs	r3, r3, #1
 801b8f2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801b8f4:	69fb      	ldr	r3, [r7, #28]
 801b8f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d003      	beq.n	801b906 <gen_numname+0x5a>
 801b8fe:	69fa      	ldr	r2, [r7, #28]
 801b900:	4b30      	ldr	r3, [pc, #192]	@ (801b9c4 <gen_numname+0x118>)
 801b902:	4053      	eors	r3, r2
 801b904:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801b906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b908:	3301      	adds	r3, #1
 801b90a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b90e:	2b0f      	cmp	r3, #15
 801b910:	d9e6      	bls.n	801b8e0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	881b      	ldrh	r3, [r3, #0]
 801b916:	2b00      	cmp	r3, #0
 801b918:	d1da      	bne.n	801b8d0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801b91a:	69fb      	ldr	r3, [r7, #28]
 801b91c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801b91e:	2307      	movs	r3, #7
 801b920:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801b922:	683b      	ldr	r3, [r7, #0]
 801b924:	b2db      	uxtb	r3, r3
 801b926:	f003 030f 	and.w	r3, r3, #15
 801b92a:	b2db      	uxtb	r3, r3
 801b92c:	3330      	adds	r3, #48	@ 0x30
 801b92e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801b932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b936:	2b39      	cmp	r3, #57	@ 0x39
 801b938:	d904      	bls.n	801b944 <gen_numname+0x98>
 801b93a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b93e:	3307      	adds	r3, #7
 801b940:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801b944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b946:	1e5a      	subs	r2, r3, #1
 801b948:	62ba      	str	r2, [r7, #40]	@ 0x28
 801b94a:	3330      	adds	r3, #48	@ 0x30
 801b94c:	443b      	add	r3, r7
 801b94e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801b952:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801b956:	683b      	ldr	r3, [r7, #0]
 801b958:	091b      	lsrs	r3, r3, #4
 801b95a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801b95c:	683b      	ldr	r3, [r7, #0]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d1df      	bne.n	801b922 <gen_numname+0x76>
	ns[i] = '~';
 801b962:	f107 0214 	add.w	r2, r7, #20
 801b966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b968:	4413      	add	r3, r2
 801b96a:	227e      	movs	r2, #126	@ 0x7e
 801b96c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801b96e:	2300      	movs	r3, #0
 801b970:	627b      	str	r3, [r7, #36]	@ 0x24
 801b972:	e002      	b.n	801b97a <gen_numname+0xce>
 801b974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b976:	3301      	adds	r3, #1
 801b978:	627b      	str	r3, [r7, #36]	@ 0x24
 801b97a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b97e:	429a      	cmp	r2, r3
 801b980:	d205      	bcs.n	801b98e <gen_numname+0xe2>
 801b982:	68fa      	ldr	r2, [r7, #12]
 801b984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b986:	4413      	add	r3, r2
 801b988:	781b      	ldrb	r3, [r3, #0]
 801b98a:	2b20      	cmp	r3, #32
 801b98c:	d1f2      	bne.n	801b974 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b990:	2b07      	cmp	r3, #7
 801b992:	d807      	bhi.n	801b9a4 <gen_numname+0xf8>
 801b994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b996:	1c5a      	adds	r2, r3, #1
 801b998:	62ba      	str	r2, [r7, #40]	@ 0x28
 801b99a:	3330      	adds	r3, #48	@ 0x30
 801b99c:	443b      	add	r3, r7
 801b99e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801b9a2:	e000      	b.n	801b9a6 <gen_numname+0xfa>
 801b9a4:	2120      	movs	r1, #32
 801b9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9a8:	1c5a      	adds	r2, r3, #1
 801b9aa:	627a      	str	r2, [r7, #36]	@ 0x24
 801b9ac:	68fa      	ldr	r2, [r7, #12]
 801b9ae:	4413      	add	r3, r2
 801b9b0:	460a      	mov	r2, r1
 801b9b2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801b9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9b6:	2b07      	cmp	r3, #7
 801b9b8:	d9e9      	bls.n	801b98e <gen_numname+0xe2>
}
 801b9ba:	bf00      	nop
 801b9bc:	bf00      	nop
 801b9be:	3730      	adds	r7, #48	@ 0x30
 801b9c0:	46bd      	mov	sp, r7
 801b9c2:	bd80      	pop	{r7, pc}
 801b9c4:	00011021 	.word	0x00011021

0801b9c8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801b9c8:	b480      	push	{r7}
 801b9ca:	b085      	sub	sp, #20
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801b9d0:	2300      	movs	r3, #0
 801b9d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801b9d4:	230b      	movs	r3, #11
 801b9d6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801b9d8:	7bfb      	ldrb	r3, [r7, #15]
 801b9da:	b2da      	uxtb	r2, r3
 801b9dc:	0852      	lsrs	r2, r2, #1
 801b9de:	01db      	lsls	r3, r3, #7
 801b9e0:	4313      	orrs	r3, r2
 801b9e2:	b2da      	uxtb	r2, r3
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	1c59      	adds	r1, r3, #1
 801b9e8:	6079      	str	r1, [r7, #4]
 801b9ea:	781b      	ldrb	r3, [r3, #0]
 801b9ec:	4413      	add	r3, r2
 801b9ee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801b9f0:	68bb      	ldr	r3, [r7, #8]
 801b9f2:	3b01      	subs	r3, #1
 801b9f4:	60bb      	str	r3, [r7, #8]
 801b9f6:	68bb      	ldr	r3, [r7, #8]
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d1ed      	bne.n	801b9d8 <sum_sfn+0x10>
	return sum;
 801b9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 801b9fe:	4618      	mov	r0, r3
 801ba00:	3714      	adds	r7, #20
 801ba02:	46bd      	mov	sp, r7
 801ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba08:	4770      	bx	lr

0801ba0a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801ba0a:	b580      	push	{r7, lr}
 801ba0c:	b086      	sub	sp, #24
 801ba0e:	af00      	add	r7, sp, #0
 801ba10:	6078      	str	r0, [r7, #4]
 801ba12:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801ba14:	2304      	movs	r3, #4
 801ba16:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801ba1e:	23ff      	movs	r3, #255	@ 0xff
 801ba20:	757b      	strb	r3, [r7, #21]
 801ba22:	23ff      	movs	r3, #255	@ 0xff
 801ba24:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801ba26:	e081      	b.n	801bb2c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	69db      	ldr	r3, [r3, #28]
 801ba2c:	4619      	mov	r1, r3
 801ba2e:	6938      	ldr	r0, [r7, #16]
 801ba30:	f7ff f83c 	bl	801aaac <move_window>
 801ba34:	4603      	mov	r3, r0
 801ba36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801ba38:	7dfb      	ldrb	r3, [r7, #23]
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d17c      	bne.n	801bb38 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	6a1b      	ldr	r3, [r3, #32]
 801ba42:	781b      	ldrb	r3, [r3, #0]
 801ba44:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801ba46:	7dbb      	ldrb	r3, [r7, #22]
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d102      	bne.n	801ba52 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801ba4c:	2304      	movs	r3, #4
 801ba4e:	75fb      	strb	r3, [r7, #23]
 801ba50:	e077      	b.n	801bb42 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	6a1b      	ldr	r3, [r3, #32]
 801ba56:	330b      	adds	r3, #11
 801ba58:	781b      	ldrb	r3, [r3, #0]
 801ba5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ba5e:	73fb      	strb	r3, [r7, #15]
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	7bfa      	ldrb	r2, [r7, #15]
 801ba64:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801ba66:	7dbb      	ldrb	r3, [r7, #22]
 801ba68:	2be5      	cmp	r3, #229	@ 0xe5
 801ba6a:	d00e      	beq.n	801ba8a <dir_read+0x80>
 801ba6c:	7dbb      	ldrb	r3, [r7, #22]
 801ba6e:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba70:	d00b      	beq.n	801ba8a <dir_read+0x80>
 801ba72:	7bfb      	ldrb	r3, [r7, #15]
 801ba74:	f023 0320 	bic.w	r3, r3, #32
 801ba78:	2b08      	cmp	r3, #8
 801ba7a:	bf0c      	ite	eq
 801ba7c:	2301      	moveq	r3, #1
 801ba7e:	2300      	movne	r3, #0
 801ba80:	b2db      	uxtb	r3, r3
 801ba82:	461a      	mov	r2, r3
 801ba84:	683b      	ldr	r3, [r7, #0]
 801ba86:	4293      	cmp	r3, r2
 801ba88:	d002      	beq.n	801ba90 <dir_read+0x86>
				ord = 0xFF;
 801ba8a:	23ff      	movs	r3, #255	@ 0xff
 801ba8c:	757b      	strb	r3, [r7, #21]
 801ba8e:	e044      	b.n	801bb1a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801ba90:	7bfb      	ldrb	r3, [r7, #15]
 801ba92:	2b0f      	cmp	r3, #15
 801ba94:	d12f      	bne.n	801baf6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801ba96:	7dbb      	ldrb	r3, [r7, #22]
 801ba98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d00d      	beq.n	801babc <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	6a1b      	ldr	r3, [r3, #32]
 801baa4:	7b5b      	ldrb	r3, [r3, #13]
 801baa6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801baa8:	7dbb      	ldrb	r3, [r7, #22]
 801baaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801baae:	75bb      	strb	r3, [r7, #22]
 801bab0:	7dbb      	ldrb	r3, [r7, #22]
 801bab2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	695a      	ldr	r2, [r3, #20]
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801babc:	7dba      	ldrb	r2, [r7, #22]
 801babe:	7d7b      	ldrb	r3, [r7, #21]
 801bac0:	429a      	cmp	r2, r3
 801bac2:	d115      	bne.n	801baf0 <dir_read+0xe6>
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	6a1b      	ldr	r3, [r3, #32]
 801bac8:	330d      	adds	r3, #13
 801baca:	781b      	ldrb	r3, [r3, #0]
 801bacc:	7d3a      	ldrb	r2, [r7, #20]
 801bace:	429a      	cmp	r2, r3
 801bad0:	d10e      	bne.n	801baf0 <dir_read+0xe6>
 801bad2:	693b      	ldr	r3, [r7, #16]
 801bad4:	691a      	ldr	r2, [r3, #16]
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	6a1b      	ldr	r3, [r3, #32]
 801bada:	4619      	mov	r1, r3
 801badc:	4610      	mov	r0, r2
 801bade:	f7ff fe19 	bl	801b714 <pick_lfn>
 801bae2:	4603      	mov	r3, r0
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d003      	beq.n	801baf0 <dir_read+0xe6>
 801bae8:	7d7b      	ldrb	r3, [r7, #21]
 801baea:	3b01      	subs	r3, #1
 801baec:	b2db      	uxtb	r3, r3
 801baee:	e000      	b.n	801baf2 <dir_read+0xe8>
 801baf0:	23ff      	movs	r3, #255	@ 0xff
 801baf2:	757b      	strb	r3, [r7, #21]
 801baf4:	e011      	b.n	801bb1a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801baf6:	7d7b      	ldrb	r3, [r7, #21]
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d109      	bne.n	801bb10 <dir_read+0x106>
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	6a1b      	ldr	r3, [r3, #32]
 801bb00:	4618      	mov	r0, r3
 801bb02:	f7ff ff61 	bl	801b9c8 <sum_sfn>
 801bb06:	4603      	mov	r3, r0
 801bb08:	461a      	mov	r2, r3
 801bb0a:	7d3b      	ldrb	r3, [r7, #20]
 801bb0c:	4293      	cmp	r3, r2
 801bb0e:	d015      	beq.n	801bb3c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	f04f 32ff 	mov.w	r2, #4294967295
 801bb16:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801bb18:	e010      	b.n	801bb3c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801bb1a:	2100      	movs	r1, #0
 801bb1c:	6878      	ldr	r0, [r7, #4]
 801bb1e:	f7ff fc2d 	bl	801b37c <dir_next>
 801bb22:	4603      	mov	r3, r0
 801bb24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bb26:	7dfb      	ldrb	r3, [r7, #23]
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d109      	bne.n	801bb40 <dir_read+0x136>
	while (dp->sect) {
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	69db      	ldr	r3, [r3, #28]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	f47f af79 	bne.w	801ba28 <dir_read+0x1e>
 801bb36:	e004      	b.n	801bb42 <dir_read+0x138>
		if (res != FR_OK) break;
 801bb38:	bf00      	nop
 801bb3a:	e002      	b.n	801bb42 <dir_read+0x138>
					break;
 801bb3c:	bf00      	nop
 801bb3e:	e000      	b.n	801bb42 <dir_read+0x138>
		if (res != FR_OK) break;
 801bb40:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801bb42:	7dfb      	ldrb	r3, [r7, #23]
 801bb44:	2b00      	cmp	r3, #0
 801bb46:	d002      	beq.n	801bb4e <dir_read+0x144>
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	2200      	movs	r2, #0
 801bb4c:	61da      	str	r2, [r3, #28]
	return res;
 801bb4e:	7dfb      	ldrb	r3, [r7, #23]
}
 801bb50:	4618      	mov	r0, r3
 801bb52:	3718      	adds	r7, #24
 801bb54:	46bd      	mov	sp, r7
 801bb56:	bd80      	pop	{r7, pc}

0801bb58 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801bb58:	b580      	push	{r7, lr}
 801bb5a:	b086      	sub	sp, #24
 801bb5c:	af00      	add	r7, sp, #0
 801bb5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801bb66:	2100      	movs	r1, #0
 801bb68:	6878      	ldr	r0, [r7, #4]
 801bb6a:	f7ff fb7e 	bl	801b26a <dir_sdi>
 801bb6e:	4603      	mov	r3, r0
 801bb70:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801bb72:	7dfb      	ldrb	r3, [r7, #23]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d001      	beq.n	801bb7c <dir_find+0x24>
 801bb78:	7dfb      	ldrb	r3, [r7, #23]
 801bb7a:	e0a9      	b.n	801bcd0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801bb7c:	23ff      	movs	r3, #255	@ 0xff
 801bb7e:	753b      	strb	r3, [r7, #20]
 801bb80:	7d3b      	ldrb	r3, [r7, #20]
 801bb82:	757b      	strb	r3, [r7, #21]
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	f04f 32ff 	mov.w	r2, #4294967295
 801bb8a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	69db      	ldr	r3, [r3, #28]
 801bb90:	4619      	mov	r1, r3
 801bb92:	6938      	ldr	r0, [r7, #16]
 801bb94:	f7fe ff8a 	bl	801aaac <move_window>
 801bb98:	4603      	mov	r3, r0
 801bb9a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bb9c:	7dfb      	ldrb	r3, [r7, #23]
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	f040 8090 	bne.w	801bcc4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	6a1b      	ldr	r3, [r3, #32]
 801bba8:	781b      	ldrb	r3, [r3, #0]
 801bbaa:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801bbac:	7dbb      	ldrb	r3, [r7, #22]
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d102      	bne.n	801bbb8 <dir_find+0x60>
 801bbb2:	2304      	movs	r3, #4
 801bbb4:	75fb      	strb	r3, [r7, #23]
 801bbb6:	e08a      	b.n	801bcce <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	6a1b      	ldr	r3, [r3, #32]
 801bbbc:	330b      	adds	r3, #11
 801bbbe:	781b      	ldrb	r3, [r3, #0]
 801bbc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bbc4:	73fb      	strb	r3, [r7, #15]
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	7bfa      	ldrb	r2, [r7, #15]
 801bbca:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801bbcc:	7dbb      	ldrb	r3, [r7, #22]
 801bbce:	2be5      	cmp	r3, #229	@ 0xe5
 801bbd0:	d007      	beq.n	801bbe2 <dir_find+0x8a>
 801bbd2:	7bfb      	ldrb	r3, [r7, #15]
 801bbd4:	f003 0308 	and.w	r3, r3, #8
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d009      	beq.n	801bbf0 <dir_find+0x98>
 801bbdc:	7bfb      	ldrb	r3, [r7, #15]
 801bbde:	2b0f      	cmp	r3, #15
 801bbe0:	d006      	beq.n	801bbf0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801bbe2:	23ff      	movs	r3, #255	@ 0xff
 801bbe4:	757b      	strb	r3, [r7, #21]
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	f04f 32ff 	mov.w	r2, #4294967295
 801bbec:	631a      	str	r2, [r3, #48]	@ 0x30
 801bbee:	e05e      	b.n	801bcae <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801bbf0:	7bfb      	ldrb	r3, [r7, #15]
 801bbf2:	2b0f      	cmp	r3, #15
 801bbf4:	d136      	bne.n	801bc64 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801bbfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d154      	bne.n	801bcae <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801bc04:	7dbb      	ldrb	r3, [r7, #22]
 801bc06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d00d      	beq.n	801bc2a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	6a1b      	ldr	r3, [r3, #32]
 801bc12:	7b5b      	ldrb	r3, [r3, #13]
 801bc14:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801bc16:	7dbb      	ldrb	r3, [r7, #22]
 801bc18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bc1c:	75bb      	strb	r3, [r7, #22]
 801bc1e:	7dbb      	ldrb	r3, [r7, #22]
 801bc20:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	695a      	ldr	r2, [r3, #20]
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801bc2a:	7dba      	ldrb	r2, [r7, #22]
 801bc2c:	7d7b      	ldrb	r3, [r7, #21]
 801bc2e:	429a      	cmp	r2, r3
 801bc30:	d115      	bne.n	801bc5e <dir_find+0x106>
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	6a1b      	ldr	r3, [r3, #32]
 801bc36:	330d      	adds	r3, #13
 801bc38:	781b      	ldrb	r3, [r3, #0]
 801bc3a:	7d3a      	ldrb	r2, [r7, #20]
 801bc3c:	429a      	cmp	r2, r3
 801bc3e:	d10e      	bne.n	801bc5e <dir_find+0x106>
 801bc40:	693b      	ldr	r3, [r7, #16]
 801bc42:	691a      	ldr	r2, [r3, #16]
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	6a1b      	ldr	r3, [r3, #32]
 801bc48:	4619      	mov	r1, r3
 801bc4a:	4610      	mov	r0, r2
 801bc4c:	f7ff fcf2 	bl	801b634 <cmp_lfn>
 801bc50:	4603      	mov	r3, r0
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d003      	beq.n	801bc5e <dir_find+0x106>
 801bc56:	7d7b      	ldrb	r3, [r7, #21]
 801bc58:	3b01      	subs	r3, #1
 801bc5a:	b2db      	uxtb	r3, r3
 801bc5c:	e000      	b.n	801bc60 <dir_find+0x108>
 801bc5e:	23ff      	movs	r3, #255	@ 0xff
 801bc60:	757b      	strb	r3, [r7, #21]
 801bc62:	e024      	b.n	801bcae <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801bc64:	7d7b      	ldrb	r3, [r7, #21]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d109      	bne.n	801bc7e <dir_find+0x126>
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	6a1b      	ldr	r3, [r3, #32]
 801bc6e:	4618      	mov	r0, r3
 801bc70:	f7ff feaa 	bl	801b9c8 <sum_sfn>
 801bc74:	4603      	mov	r3, r0
 801bc76:	461a      	mov	r2, r3
 801bc78:	7d3b      	ldrb	r3, [r7, #20]
 801bc7a:	4293      	cmp	r3, r2
 801bc7c:	d024      	beq.n	801bcc8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801bc84:	f003 0301 	and.w	r3, r3, #1
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d10a      	bne.n	801bca2 <dir_find+0x14a>
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	6a18      	ldr	r0, [r3, #32]
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	3324      	adds	r3, #36	@ 0x24
 801bc94:	220b      	movs	r2, #11
 801bc96:	4619      	mov	r1, r3
 801bc98:	f7fe fd16 	bl	801a6c8 <mem_cmp>
 801bc9c:	4603      	mov	r3, r0
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d014      	beq.n	801bccc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801bca2:	23ff      	movs	r3, #255	@ 0xff
 801bca4:	757b      	strb	r3, [r7, #21]
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	f04f 32ff 	mov.w	r2, #4294967295
 801bcac:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801bcae:	2100      	movs	r1, #0
 801bcb0:	6878      	ldr	r0, [r7, #4]
 801bcb2:	f7ff fb63 	bl	801b37c <dir_next>
 801bcb6:	4603      	mov	r3, r0
 801bcb8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801bcba:	7dfb      	ldrb	r3, [r7, #23]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	f43f af65 	beq.w	801bb8c <dir_find+0x34>
 801bcc2:	e004      	b.n	801bcce <dir_find+0x176>
		if (res != FR_OK) break;
 801bcc4:	bf00      	nop
 801bcc6:	e002      	b.n	801bcce <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801bcc8:	bf00      	nop
 801bcca:	e000      	b.n	801bcce <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801bccc:	bf00      	nop

	return res;
 801bcce:	7dfb      	ldrb	r3, [r7, #23]
}
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	3718      	adds	r7, #24
 801bcd4:	46bd      	mov	sp, r7
 801bcd6:	bd80      	pop	{r7, pc}

0801bcd8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801bcd8:	b580      	push	{r7, lr}
 801bcda:	b08c      	sub	sp, #48	@ 0x30
 801bcdc:	af00      	add	r7, sp, #0
 801bcde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801bcec:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d001      	beq.n	801bcf8 <dir_register+0x20>
 801bcf4:	2306      	movs	r3, #6
 801bcf6:	e0e0      	b.n	801beba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	627b      	str	r3, [r7, #36]	@ 0x24
 801bcfc:	e002      	b.n	801bd04 <dir_register+0x2c>
 801bcfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd00:	3301      	adds	r3, #1
 801bd02:	627b      	str	r3, [r7, #36]	@ 0x24
 801bd04:	69fb      	ldr	r3, [r7, #28]
 801bd06:	691a      	ldr	r2, [r3, #16]
 801bd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd0a:	005b      	lsls	r3, r3, #1
 801bd0c:	4413      	add	r3, r2
 801bd0e:	881b      	ldrh	r3, [r3, #0]
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d1f4      	bne.n	801bcfe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801bd1a:	f107 030c 	add.w	r3, r7, #12
 801bd1e:	220c      	movs	r2, #12
 801bd20:	4618      	mov	r0, r3
 801bd22:	f7fe fc95 	bl	801a650 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801bd26:	7dfb      	ldrb	r3, [r7, #23]
 801bd28:	f003 0301 	and.w	r3, r3, #1
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d032      	beq.n	801bd96 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	2240      	movs	r2, #64	@ 0x40
 801bd34:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801bd38:	2301      	movs	r3, #1
 801bd3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bd3c:	e016      	b.n	801bd6c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801bd44:	69fb      	ldr	r3, [r7, #28]
 801bd46:	691a      	ldr	r2, [r3, #16]
 801bd48:	f107 010c 	add.w	r1, r7, #12
 801bd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd4e:	f7ff fdad 	bl	801b8ac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801bd52:	6878      	ldr	r0, [r7, #4]
 801bd54:	f7ff ff00 	bl	801bb58 <dir_find>
 801bd58:	4603      	mov	r3, r0
 801bd5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801bd5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d106      	bne.n	801bd74 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801bd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd68:	3301      	adds	r3, #1
 801bd6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd6e:	2b63      	cmp	r3, #99	@ 0x63
 801bd70:	d9e5      	bls.n	801bd3e <dir_register+0x66>
 801bd72:	e000      	b.n	801bd76 <dir_register+0x9e>
			if (res != FR_OK) break;
 801bd74:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801bd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd78:	2b64      	cmp	r3, #100	@ 0x64
 801bd7a:	d101      	bne.n	801bd80 <dir_register+0xa8>
 801bd7c:	2307      	movs	r3, #7
 801bd7e:	e09c      	b.n	801beba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801bd80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bd84:	2b04      	cmp	r3, #4
 801bd86:	d002      	beq.n	801bd8e <dir_register+0xb6>
 801bd88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bd8c:	e095      	b.n	801beba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801bd8e:	7dfa      	ldrb	r2, [r7, #23]
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801bd96:	7dfb      	ldrb	r3, [r7, #23]
 801bd98:	f003 0302 	and.w	r3, r3, #2
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d007      	beq.n	801bdb0 <dir_register+0xd8>
 801bda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bda2:	330c      	adds	r3, #12
 801bda4:	4a47      	ldr	r2, [pc, #284]	@ (801bec4 <dir_register+0x1ec>)
 801bda6:	fba2 2303 	umull	r2, r3, r2, r3
 801bdaa:	089b      	lsrs	r3, r3, #2
 801bdac:	3301      	adds	r3, #1
 801bdae:	e000      	b.n	801bdb2 <dir_register+0xda>
 801bdb0:	2301      	movs	r3, #1
 801bdb2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801bdb4:	6a39      	ldr	r1, [r7, #32]
 801bdb6:	6878      	ldr	r0, [r7, #4]
 801bdb8:	f7ff fbb6 	bl	801b528 <dir_alloc>
 801bdbc:	4603      	mov	r3, r0
 801bdbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801bdc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d148      	bne.n	801be5c <dir_register+0x184>
 801bdca:	6a3b      	ldr	r3, [r7, #32]
 801bdcc:	3b01      	subs	r3, #1
 801bdce:	623b      	str	r3, [r7, #32]
 801bdd0:	6a3b      	ldr	r3, [r7, #32]
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	d042      	beq.n	801be5c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	695a      	ldr	r2, [r3, #20]
 801bdda:	6a3b      	ldr	r3, [r7, #32]
 801bddc:	015b      	lsls	r3, r3, #5
 801bdde:	1ad3      	subs	r3, r2, r3
 801bde0:	4619      	mov	r1, r3
 801bde2:	6878      	ldr	r0, [r7, #4]
 801bde4:	f7ff fa41 	bl	801b26a <dir_sdi>
 801bde8:	4603      	mov	r3, r0
 801bdea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801bdee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d132      	bne.n	801be5c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	3324      	adds	r3, #36	@ 0x24
 801bdfa:	4618      	mov	r0, r3
 801bdfc:	f7ff fde4 	bl	801b9c8 <sum_sfn>
 801be00:	4603      	mov	r3, r0
 801be02:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	69db      	ldr	r3, [r3, #28]
 801be08:	4619      	mov	r1, r3
 801be0a:	69f8      	ldr	r0, [r7, #28]
 801be0c:	f7fe fe4e 	bl	801aaac <move_window>
 801be10:	4603      	mov	r3, r0
 801be12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801be16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d11d      	bne.n	801be5a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801be1e:	69fb      	ldr	r3, [r7, #28]
 801be20:	6918      	ldr	r0, [r3, #16]
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	6a19      	ldr	r1, [r3, #32]
 801be26:	6a3b      	ldr	r3, [r7, #32]
 801be28:	b2da      	uxtb	r2, r3
 801be2a:	7efb      	ldrb	r3, [r7, #27]
 801be2c:	f7ff fcd6 	bl	801b7dc <put_lfn>
				fs->wflag = 1;
 801be30:	69fb      	ldr	r3, [r7, #28]
 801be32:	2201      	movs	r2, #1
 801be34:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801be36:	2100      	movs	r1, #0
 801be38:	6878      	ldr	r0, [r7, #4]
 801be3a:	f7ff fa9f 	bl	801b37c <dir_next>
 801be3e:	4603      	mov	r3, r0
 801be40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801be44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801be48:	2b00      	cmp	r3, #0
 801be4a:	d107      	bne.n	801be5c <dir_register+0x184>
 801be4c:	6a3b      	ldr	r3, [r7, #32]
 801be4e:	3b01      	subs	r3, #1
 801be50:	623b      	str	r3, [r7, #32]
 801be52:	6a3b      	ldr	r3, [r7, #32]
 801be54:	2b00      	cmp	r3, #0
 801be56:	d1d5      	bne.n	801be04 <dir_register+0x12c>
 801be58:	e000      	b.n	801be5c <dir_register+0x184>
				if (res != FR_OK) break;
 801be5a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801be5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801be60:	2b00      	cmp	r3, #0
 801be62:	d128      	bne.n	801beb6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	69db      	ldr	r3, [r3, #28]
 801be68:	4619      	mov	r1, r3
 801be6a:	69f8      	ldr	r0, [r7, #28]
 801be6c:	f7fe fe1e 	bl	801aaac <move_window>
 801be70:	4603      	mov	r3, r0
 801be72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801be76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d11b      	bne.n	801beb6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	6a1b      	ldr	r3, [r3, #32]
 801be82:	2220      	movs	r2, #32
 801be84:	2100      	movs	r1, #0
 801be86:	4618      	mov	r0, r3
 801be88:	f7fe fc03 	bl	801a692 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	6a18      	ldr	r0, [r3, #32]
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	3324      	adds	r3, #36	@ 0x24
 801be94:	220b      	movs	r2, #11
 801be96:	4619      	mov	r1, r3
 801be98:	f7fe fbda 	bl	801a650 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	6a1b      	ldr	r3, [r3, #32]
 801bea6:	330c      	adds	r3, #12
 801bea8:	f002 0218 	and.w	r2, r2, #24
 801beac:	b2d2      	uxtb	r2, r2
 801beae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801beb0:	69fb      	ldr	r3, [r7, #28]
 801beb2:	2201      	movs	r2, #1
 801beb4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801beb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801beba:	4618      	mov	r0, r3
 801bebc:	3730      	adds	r7, #48	@ 0x30
 801bebe:	46bd      	mov	sp, r7
 801bec0:	bd80      	pop	{r7, pc}
 801bec2:	bf00      	nop
 801bec4:	4ec4ec4f 	.word	0x4ec4ec4f

0801bec8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801bec8:	b580      	push	{r7, lr}
 801beca:	b086      	sub	sp, #24
 801becc:	af00      	add	r7, sp, #0
 801bece:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	695b      	ldr	r3, [r3, #20]
 801beda:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bee4:	d007      	beq.n	801bef6 <dir_remove+0x2e>
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801beea:	4619      	mov	r1, r3
 801beec:	6878      	ldr	r0, [r7, #4]
 801beee:	f7ff f9bc 	bl	801b26a <dir_sdi>
 801bef2:	4603      	mov	r3, r0
 801bef4:	e000      	b.n	801bef8 <dir_remove+0x30>
 801bef6:	2300      	movs	r3, #0
 801bef8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801befa:	7dfb      	ldrb	r3, [r7, #23]
 801befc:	2b00      	cmp	r3, #0
 801befe:	d128      	bne.n	801bf52 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	69db      	ldr	r3, [r3, #28]
 801bf04:	4619      	mov	r1, r3
 801bf06:	6938      	ldr	r0, [r7, #16]
 801bf08:	f7fe fdd0 	bl	801aaac <move_window>
 801bf0c:	4603      	mov	r3, r0
 801bf0e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bf10:	7dfb      	ldrb	r3, [r7, #23]
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d115      	bne.n	801bf42 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	6a1b      	ldr	r3, [r3, #32]
 801bf1a:	22e5      	movs	r2, #229	@ 0xe5
 801bf1c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801bf1e:	693b      	ldr	r3, [r7, #16]
 801bf20:	2201      	movs	r2, #1
 801bf22:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	695b      	ldr	r3, [r3, #20]
 801bf28:	68fa      	ldr	r2, [r7, #12]
 801bf2a:	429a      	cmp	r2, r3
 801bf2c:	d90b      	bls.n	801bf46 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801bf2e:	2100      	movs	r1, #0
 801bf30:	6878      	ldr	r0, [r7, #4]
 801bf32:	f7ff fa23 	bl	801b37c <dir_next>
 801bf36:	4603      	mov	r3, r0
 801bf38:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801bf3a:	7dfb      	ldrb	r3, [r7, #23]
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d0df      	beq.n	801bf00 <dir_remove+0x38>
 801bf40:	e002      	b.n	801bf48 <dir_remove+0x80>
			if (res != FR_OK) break;
 801bf42:	bf00      	nop
 801bf44:	e000      	b.n	801bf48 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801bf46:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801bf48:	7dfb      	ldrb	r3, [r7, #23]
 801bf4a:	2b04      	cmp	r3, #4
 801bf4c:	d101      	bne.n	801bf52 <dir_remove+0x8a>
 801bf4e:	2302      	movs	r3, #2
 801bf50:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801bf52:	7dfb      	ldrb	r3, [r7, #23]
}
 801bf54:	4618      	mov	r0, r3
 801bf56:	3718      	adds	r7, #24
 801bf58:	46bd      	mov	sp, r7
 801bf5a:	bd80      	pop	{r7, pc}

0801bf5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801bf5c:	b580      	push	{r7, lr}
 801bf5e:	b08a      	sub	sp, #40	@ 0x28
 801bf60:	af00      	add	r7, sp, #0
 801bf62:	6078      	str	r0, [r7, #4]
 801bf64:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801bf66:	683b      	ldr	r3, [r7, #0]
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	613b      	str	r3, [r7, #16]
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	681b      	ldr	r3, [r3, #0]
 801bf70:	691b      	ldr	r3, [r3, #16]
 801bf72:	60fb      	str	r3, [r7, #12]
 801bf74:	2300      	movs	r3, #0
 801bf76:	617b      	str	r3, [r7, #20]
 801bf78:	697b      	ldr	r3, [r7, #20]
 801bf7a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801bf7c:	69bb      	ldr	r3, [r7, #24]
 801bf7e:	1c5a      	adds	r2, r3, #1
 801bf80:	61ba      	str	r2, [r7, #24]
 801bf82:	693a      	ldr	r2, [r7, #16]
 801bf84:	4413      	add	r3, r2
 801bf86:	781b      	ldrb	r3, [r3, #0]
 801bf88:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801bf8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bf8c:	2b1f      	cmp	r3, #31
 801bf8e:	d940      	bls.n	801c012 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801bf90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bf92:	2b2f      	cmp	r3, #47	@ 0x2f
 801bf94:	d006      	beq.n	801bfa4 <create_name+0x48>
 801bf96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bf98:	2b5c      	cmp	r3, #92	@ 0x5c
 801bf9a:	d110      	bne.n	801bfbe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801bf9c:	e002      	b.n	801bfa4 <create_name+0x48>
 801bf9e:	69bb      	ldr	r3, [r7, #24]
 801bfa0:	3301      	adds	r3, #1
 801bfa2:	61bb      	str	r3, [r7, #24]
 801bfa4:	693a      	ldr	r2, [r7, #16]
 801bfa6:	69bb      	ldr	r3, [r7, #24]
 801bfa8:	4413      	add	r3, r2
 801bfaa:	781b      	ldrb	r3, [r3, #0]
 801bfac:	2b2f      	cmp	r3, #47	@ 0x2f
 801bfae:	d0f6      	beq.n	801bf9e <create_name+0x42>
 801bfb0:	693a      	ldr	r2, [r7, #16]
 801bfb2:	69bb      	ldr	r3, [r7, #24]
 801bfb4:	4413      	add	r3, r2
 801bfb6:	781b      	ldrb	r3, [r3, #0]
 801bfb8:	2b5c      	cmp	r3, #92	@ 0x5c
 801bfba:	d0f0      	beq.n	801bf9e <create_name+0x42>
			break;
 801bfbc:	e02a      	b.n	801c014 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801bfbe:	697b      	ldr	r3, [r7, #20]
 801bfc0:	2bfe      	cmp	r3, #254	@ 0xfe
 801bfc2:	d901      	bls.n	801bfc8 <create_name+0x6c>
 801bfc4:	2306      	movs	r3, #6
 801bfc6:	e17d      	b.n	801c2c4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801bfc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bfca:	b2db      	uxtb	r3, r3
 801bfcc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801bfce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bfd0:	2101      	movs	r1, #1
 801bfd2:	4618      	mov	r0, r3
 801bfd4:	f001 fa98 	bl	801d508 <ff_convert>
 801bfd8:	4603      	mov	r3, r0
 801bfda:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801bfdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d101      	bne.n	801bfe6 <create_name+0x8a>
 801bfe2:	2306      	movs	r3, #6
 801bfe4:	e16e      	b.n	801c2c4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801bfe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bfe8:	2b7f      	cmp	r3, #127	@ 0x7f
 801bfea:	d809      	bhi.n	801c000 <create_name+0xa4>
 801bfec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bfee:	4619      	mov	r1, r3
 801bff0:	488d      	ldr	r0, [pc, #564]	@ (801c228 <create_name+0x2cc>)
 801bff2:	f7fe fb90 	bl	801a716 <chk_chr>
 801bff6:	4603      	mov	r3, r0
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d001      	beq.n	801c000 <create_name+0xa4>
 801bffc:	2306      	movs	r3, #6
 801bffe:	e161      	b.n	801c2c4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801c000:	697b      	ldr	r3, [r7, #20]
 801c002:	1c5a      	adds	r2, r3, #1
 801c004:	617a      	str	r2, [r7, #20]
 801c006:	005b      	lsls	r3, r3, #1
 801c008:	68fa      	ldr	r2, [r7, #12]
 801c00a:	4413      	add	r3, r2
 801c00c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c00e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801c010:	e7b4      	b.n	801bf7c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801c012:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801c014:	693a      	ldr	r2, [r7, #16]
 801c016:	69bb      	ldr	r3, [r7, #24]
 801c018:	441a      	add	r2, r3
 801c01a:	683b      	ldr	r3, [r7, #0]
 801c01c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801c01e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c020:	2b1f      	cmp	r3, #31
 801c022:	d801      	bhi.n	801c028 <create_name+0xcc>
 801c024:	2304      	movs	r3, #4
 801c026:	e000      	b.n	801c02a <create_name+0xce>
 801c028:	2300      	movs	r3, #0
 801c02a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c02e:	e011      	b.n	801c054 <create_name+0xf8>
		w = lfn[di - 1];
 801c030:	697a      	ldr	r2, [r7, #20]
 801c032:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c036:	4413      	add	r3, r2
 801c038:	005b      	lsls	r3, r3, #1
 801c03a:	68fa      	ldr	r2, [r7, #12]
 801c03c:	4413      	add	r3, r2
 801c03e:	881b      	ldrh	r3, [r3, #0]
 801c040:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801c042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c044:	2b20      	cmp	r3, #32
 801c046:	d002      	beq.n	801c04e <create_name+0xf2>
 801c048:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c04a:	2b2e      	cmp	r3, #46	@ 0x2e
 801c04c:	d106      	bne.n	801c05c <create_name+0x100>
		di--;
 801c04e:	697b      	ldr	r3, [r7, #20]
 801c050:	3b01      	subs	r3, #1
 801c052:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c054:	697b      	ldr	r3, [r7, #20]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d1ea      	bne.n	801c030 <create_name+0xd4>
 801c05a:	e000      	b.n	801c05e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801c05c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801c05e:	697b      	ldr	r3, [r7, #20]
 801c060:	005b      	lsls	r3, r3, #1
 801c062:	68fa      	ldr	r2, [r7, #12]
 801c064:	4413      	add	r3, r2
 801c066:	2200      	movs	r2, #0
 801c068:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801c06a:	697b      	ldr	r3, [r7, #20]
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d101      	bne.n	801c074 <create_name+0x118>
 801c070:	2306      	movs	r3, #6
 801c072:	e127      	b.n	801c2c4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	3324      	adds	r3, #36	@ 0x24
 801c078:	220b      	movs	r2, #11
 801c07a:	2120      	movs	r1, #32
 801c07c:	4618      	mov	r0, r3
 801c07e:	f7fe fb08 	bl	801a692 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801c082:	2300      	movs	r3, #0
 801c084:	61bb      	str	r3, [r7, #24]
 801c086:	e002      	b.n	801c08e <create_name+0x132>
 801c088:	69bb      	ldr	r3, [r7, #24]
 801c08a:	3301      	adds	r3, #1
 801c08c:	61bb      	str	r3, [r7, #24]
 801c08e:	69bb      	ldr	r3, [r7, #24]
 801c090:	005b      	lsls	r3, r3, #1
 801c092:	68fa      	ldr	r2, [r7, #12]
 801c094:	4413      	add	r3, r2
 801c096:	881b      	ldrh	r3, [r3, #0]
 801c098:	2b20      	cmp	r3, #32
 801c09a:	d0f5      	beq.n	801c088 <create_name+0x12c>
 801c09c:	69bb      	ldr	r3, [r7, #24]
 801c09e:	005b      	lsls	r3, r3, #1
 801c0a0:	68fa      	ldr	r2, [r7, #12]
 801c0a2:	4413      	add	r3, r2
 801c0a4:	881b      	ldrh	r3, [r3, #0]
 801c0a6:	2b2e      	cmp	r3, #46	@ 0x2e
 801c0a8:	d0ee      	beq.n	801c088 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801c0aa:	69bb      	ldr	r3, [r7, #24]
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d009      	beq.n	801c0c4 <create_name+0x168>
 801c0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c0b4:	f043 0303 	orr.w	r3, r3, #3
 801c0b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801c0bc:	e002      	b.n	801c0c4 <create_name+0x168>
 801c0be:	697b      	ldr	r3, [r7, #20]
 801c0c0:	3b01      	subs	r3, #1
 801c0c2:	617b      	str	r3, [r7, #20]
 801c0c4:	697b      	ldr	r3, [r7, #20]
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	d009      	beq.n	801c0de <create_name+0x182>
 801c0ca:	697a      	ldr	r2, [r7, #20]
 801c0cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c0d0:	4413      	add	r3, r2
 801c0d2:	005b      	lsls	r3, r3, #1
 801c0d4:	68fa      	ldr	r2, [r7, #12]
 801c0d6:	4413      	add	r3, r2
 801c0d8:	881b      	ldrh	r3, [r3, #0]
 801c0da:	2b2e      	cmp	r3, #46	@ 0x2e
 801c0dc:	d1ef      	bne.n	801c0be <create_name+0x162>

	i = b = 0; ni = 8;
 801c0de:	2300      	movs	r3, #0
 801c0e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c0e4:	2300      	movs	r3, #0
 801c0e6:	623b      	str	r3, [r7, #32]
 801c0e8:	2308      	movs	r3, #8
 801c0ea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801c0ec:	69bb      	ldr	r3, [r7, #24]
 801c0ee:	1c5a      	adds	r2, r3, #1
 801c0f0:	61ba      	str	r2, [r7, #24]
 801c0f2:	005b      	lsls	r3, r3, #1
 801c0f4:	68fa      	ldr	r2, [r7, #12]
 801c0f6:	4413      	add	r3, r2
 801c0f8:	881b      	ldrh	r3, [r3, #0]
 801c0fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801c0fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	f000 8090 	beq.w	801c224 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801c104:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c106:	2b20      	cmp	r3, #32
 801c108:	d006      	beq.n	801c118 <create_name+0x1bc>
 801c10a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c10c:	2b2e      	cmp	r3, #46	@ 0x2e
 801c10e:	d10a      	bne.n	801c126 <create_name+0x1ca>
 801c110:	69ba      	ldr	r2, [r7, #24]
 801c112:	697b      	ldr	r3, [r7, #20]
 801c114:	429a      	cmp	r2, r3
 801c116:	d006      	beq.n	801c126 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801c118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c11c:	f043 0303 	orr.w	r3, r3, #3
 801c120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c124:	e07d      	b.n	801c222 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801c126:	6a3a      	ldr	r2, [r7, #32]
 801c128:	69fb      	ldr	r3, [r7, #28]
 801c12a:	429a      	cmp	r2, r3
 801c12c:	d203      	bcs.n	801c136 <create_name+0x1da>
 801c12e:	69ba      	ldr	r2, [r7, #24]
 801c130:	697b      	ldr	r3, [r7, #20]
 801c132:	429a      	cmp	r2, r3
 801c134:	d123      	bne.n	801c17e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801c136:	69fb      	ldr	r3, [r7, #28]
 801c138:	2b0b      	cmp	r3, #11
 801c13a:	d106      	bne.n	801c14a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801c13c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c140:	f043 0303 	orr.w	r3, r3, #3
 801c144:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c148:	e075      	b.n	801c236 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801c14a:	69ba      	ldr	r2, [r7, #24]
 801c14c:	697b      	ldr	r3, [r7, #20]
 801c14e:	429a      	cmp	r2, r3
 801c150:	d005      	beq.n	801c15e <create_name+0x202>
 801c152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c156:	f043 0303 	orr.w	r3, r3, #3
 801c15a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801c15e:	69ba      	ldr	r2, [r7, #24]
 801c160:	697b      	ldr	r3, [r7, #20]
 801c162:	429a      	cmp	r2, r3
 801c164:	d866      	bhi.n	801c234 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801c166:	697b      	ldr	r3, [r7, #20]
 801c168:	61bb      	str	r3, [r7, #24]
 801c16a:	2308      	movs	r3, #8
 801c16c:	623b      	str	r3, [r7, #32]
 801c16e:	230b      	movs	r3, #11
 801c170:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801c172:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c176:	009b      	lsls	r3, r3, #2
 801c178:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c17c:	e051      	b.n	801c222 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801c17e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c180:	2b7f      	cmp	r3, #127	@ 0x7f
 801c182:	d914      	bls.n	801c1ae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801c184:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c186:	2100      	movs	r1, #0
 801c188:	4618      	mov	r0, r3
 801c18a:	f001 f9bd 	bl	801d508 <ff_convert>
 801c18e:	4603      	mov	r3, r0
 801c190:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801c192:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c194:	2b00      	cmp	r3, #0
 801c196:	d004      	beq.n	801c1a2 <create_name+0x246>
 801c198:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c19a:	3b80      	subs	r3, #128	@ 0x80
 801c19c:	4a23      	ldr	r2, [pc, #140]	@ (801c22c <create_name+0x2d0>)
 801c19e:	5cd3      	ldrb	r3, [r2, r3]
 801c1a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801c1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c1a6:	f043 0302 	orr.w	r3, r3, #2
 801c1aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801c1ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	d007      	beq.n	801c1c4 <create_name+0x268>
 801c1b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1b6:	4619      	mov	r1, r3
 801c1b8:	481d      	ldr	r0, [pc, #116]	@ (801c230 <create_name+0x2d4>)
 801c1ba:	f7fe faac 	bl	801a716 <chk_chr>
 801c1be:	4603      	mov	r3, r0
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d008      	beq.n	801c1d6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801c1c4:	235f      	movs	r3, #95	@ 0x5f
 801c1c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c1c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c1cc:	f043 0303 	orr.w	r3, r3, #3
 801c1d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c1d4:	e01b      	b.n	801c20e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801c1d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1d8:	2b40      	cmp	r3, #64	@ 0x40
 801c1da:	d909      	bls.n	801c1f0 <create_name+0x294>
 801c1dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1de:	2b5a      	cmp	r3, #90	@ 0x5a
 801c1e0:	d806      	bhi.n	801c1f0 <create_name+0x294>
					b |= 2;
 801c1e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c1e6:	f043 0302 	orr.w	r3, r3, #2
 801c1ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c1ee:	e00e      	b.n	801c20e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801c1f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1f2:	2b60      	cmp	r3, #96	@ 0x60
 801c1f4:	d90b      	bls.n	801c20e <create_name+0x2b2>
 801c1f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1f8:	2b7a      	cmp	r3, #122	@ 0x7a
 801c1fa:	d808      	bhi.n	801c20e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801c1fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c200:	f043 0301 	orr.w	r3, r3, #1
 801c204:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c208:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c20a:	3b20      	subs	r3, #32
 801c20c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801c20e:	6a3b      	ldr	r3, [r7, #32]
 801c210:	1c5a      	adds	r2, r3, #1
 801c212:	623a      	str	r2, [r7, #32]
 801c214:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c216:	b2d1      	uxtb	r1, r2
 801c218:	687a      	ldr	r2, [r7, #4]
 801c21a:	4413      	add	r3, r2
 801c21c:	460a      	mov	r2, r1
 801c21e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801c222:	e763      	b.n	801c0ec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801c224:	bf00      	nop
 801c226:	e006      	b.n	801c236 <create_name+0x2da>
 801c228:	0801e11c 	.word	0x0801e11c
 801c22c:	0801e1a8 	.word	0x0801e1a8
 801c230:	0801e128 	.word	0x0801e128
			if (si > di) break;			/* No extension */
 801c234:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801c23c:	2be5      	cmp	r3, #229	@ 0xe5
 801c23e:	d103      	bne.n	801c248 <create_name+0x2ec>
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	2205      	movs	r2, #5
 801c244:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801c248:	69fb      	ldr	r3, [r7, #28]
 801c24a:	2b08      	cmp	r3, #8
 801c24c:	d104      	bne.n	801c258 <create_name+0x2fc>
 801c24e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c252:	009b      	lsls	r3, r3, #2
 801c254:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801c258:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c25c:	f003 030c 	and.w	r3, r3, #12
 801c260:	2b0c      	cmp	r3, #12
 801c262:	d005      	beq.n	801c270 <create_name+0x314>
 801c264:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c268:	f003 0303 	and.w	r3, r3, #3
 801c26c:	2b03      	cmp	r3, #3
 801c26e:	d105      	bne.n	801c27c <create_name+0x320>
 801c270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c274:	f043 0302 	orr.w	r3, r3, #2
 801c278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801c27c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c280:	f003 0302 	and.w	r3, r3, #2
 801c284:	2b00      	cmp	r3, #0
 801c286:	d117      	bne.n	801c2b8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801c288:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c28c:	f003 0303 	and.w	r3, r3, #3
 801c290:	2b01      	cmp	r3, #1
 801c292:	d105      	bne.n	801c2a0 <create_name+0x344>
 801c294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c298:	f043 0310 	orr.w	r3, r3, #16
 801c29c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801c2a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c2a4:	f003 030c 	and.w	r3, r3, #12
 801c2a8:	2b04      	cmp	r3, #4
 801c2aa:	d105      	bne.n	801c2b8 <create_name+0x35c>
 801c2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c2b0:	f043 0308 	orr.w	r3, r3, #8
 801c2b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801c2be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801c2c2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801c2c4:	4618      	mov	r0, r3
 801c2c6:	3728      	adds	r7, #40	@ 0x28
 801c2c8:	46bd      	mov	sp, r7
 801c2ca:	bd80      	pop	{r7, pc}

0801c2cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b086      	sub	sp, #24
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	6078      	str	r0, [r7, #4]
 801c2d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801c2d6:	687b      	ldr	r3, [r7, #4]
 801c2d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801c2da:	693b      	ldr	r3, [r7, #16]
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801c2e0:	e002      	b.n	801c2e8 <follow_path+0x1c>
 801c2e2:	683b      	ldr	r3, [r7, #0]
 801c2e4:	3301      	adds	r3, #1
 801c2e6:	603b      	str	r3, [r7, #0]
 801c2e8:	683b      	ldr	r3, [r7, #0]
 801c2ea:	781b      	ldrb	r3, [r3, #0]
 801c2ec:	2b2f      	cmp	r3, #47	@ 0x2f
 801c2ee:	d0f8      	beq.n	801c2e2 <follow_path+0x16>
 801c2f0:	683b      	ldr	r3, [r7, #0]
 801c2f2:	781b      	ldrb	r3, [r3, #0]
 801c2f4:	2b5c      	cmp	r3, #92	@ 0x5c
 801c2f6:	d0f4      	beq.n	801c2e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801c2f8:	693b      	ldr	r3, [r7, #16]
 801c2fa:	2200      	movs	r2, #0
 801c2fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801c2fe:	683b      	ldr	r3, [r7, #0]
 801c300:	781b      	ldrb	r3, [r3, #0]
 801c302:	2b1f      	cmp	r3, #31
 801c304:	d80a      	bhi.n	801c31c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	2280      	movs	r2, #128	@ 0x80
 801c30a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801c30e:	2100      	movs	r1, #0
 801c310:	6878      	ldr	r0, [r7, #4]
 801c312:	f7fe ffaa 	bl	801b26a <dir_sdi>
 801c316:	4603      	mov	r3, r0
 801c318:	75fb      	strb	r3, [r7, #23]
 801c31a:	e048      	b.n	801c3ae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c31c:	463b      	mov	r3, r7
 801c31e:	4619      	mov	r1, r3
 801c320:	6878      	ldr	r0, [r7, #4]
 801c322:	f7ff fe1b 	bl	801bf5c <create_name>
 801c326:	4603      	mov	r3, r0
 801c328:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c32a:	7dfb      	ldrb	r3, [r7, #23]
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	d139      	bne.n	801c3a4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801c330:	6878      	ldr	r0, [r7, #4]
 801c332:	f7ff fc11 	bl	801bb58 <dir_find>
 801c336:	4603      	mov	r3, r0
 801c338:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c340:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801c342:	7dfb      	ldrb	r3, [r7, #23]
 801c344:	2b00      	cmp	r3, #0
 801c346:	d00a      	beq.n	801c35e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801c348:	7dfb      	ldrb	r3, [r7, #23]
 801c34a:	2b04      	cmp	r3, #4
 801c34c:	d12c      	bne.n	801c3a8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801c34e:	7afb      	ldrb	r3, [r7, #11]
 801c350:	f003 0304 	and.w	r3, r3, #4
 801c354:	2b00      	cmp	r3, #0
 801c356:	d127      	bne.n	801c3a8 <follow_path+0xdc>
 801c358:	2305      	movs	r3, #5
 801c35a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801c35c:	e024      	b.n	801c3a8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c35e:	7afb      	ldrb	r3, [r7, #11]
 801c360:	f003 0304 	and.w	r3, r3, #4
 801c364:	2b00      	cmp	r3, #0
 801c366:	d121      	bne.n	801c3ac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801c368:	693b      	ldr	r3, [r7, #16]
 801c36a:	799b      	ldrb	r3, [r3, #6]
 801c36c:	f003 0310 	and.w	r3, r3, #16
 801c370:	2b00      	cmp	r3, #0
 801c372:	d102      	bne.n	801c37a <follow_path+0xae>
				res = FR_NO_PATH; break;
 801c374:	2305      	movs	r3, #5
 801c376:	75fb      	strb	r3, [r7, #23]
 801c378:	e019      	b.n	801c3ae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	695b      	ldr	r3, [r3, #20]
 801c384:	68fa      	ldr	r2, [r7, #12]
 801c386:	8992      	ldrh	r2, [r2, #12]
 801c388:	fbb3 f0f2 	udiv	r0, r3, r2
 801c38c:	fb00 f202 	mul.w	r2, r0, r2
 801c390:	1a9b      	subs	r3, r3, r2
 801c392:	440b      	add	r3, r1
 801c394:	4619      	mov	r1, r3
 801c396:	68f8      	ldr	r0, [r7, #12]
 801c398:	f7ff f90d 	bl	801b5b6 <ld_clust>
 801c39c:	4602      	mov	r2, r0
 801c39e:	693b      	ldr	r3, [r7, #16]
 801c3a0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c3a2:	e7bb      	b.n	801c31c <follow_path+0x50>
			if (res != FR_OK) break;
 801c3a4:	bf00      	nop
 801c3a6:	e002      	b.n	801c3ae <follow_path+0xe2>
				break;
 801c3a8:	bf00      	nop
 801c3aa:	e000      	b.n	801c3ae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c3ac:	bf00      	nop
			}
		}
	}

	return res;
 801c3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 801c3b0:	4618      	mov	r0, r3
 801c3b2:	3718      	adds	r7, #24
 801c3b4:	46bd      	mov	sp, r7
 801c3b6:	bd80      	pop	{r7, pc}

0801c3b8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801c3b8:	b480      	push	{r7}
 801c3ba:	b087      	sub	sp, #28
 801c3bc:	af00      	add	r7, sp, #0
 801c3be:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801c3c0:	f04f 33ff 	mov.w	r3, #4294967295
 801c3c4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	681b      	ldr	r3, [r3, #0]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d031      	beq.n	801c432 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	617b      	str	r3, [r7, #20]
 801c3d4:	e002      	b.n	801c3dc <get_ldnumber+0x24>
 801c3d6:	697b      	ldr	r3, [r7, #20]
 801c3d8:	3301      	adds	r3, #1
 801c3da:	617b      	str	r3, [r7, #20]
 801c3dc:	697b      	ldr	r3, [r7, #20]
 801c3de:	781b      	ldrb	r3, [r3, #0]
 801c3e0:	2b1f      	cmp	r3, #31
 801c3e2:	d903      	bls.n	801c3ec <get_ldnumber+0x34>
 801c3e4:	697b      	ldr	r3, [r7, #20]
 801c3e6:	781b      	ldrb	r3, [r3, #0]
 801c3e8:	2b3a      	cmp	r3, #58	@ 0x3a
 801c3ea:	d1f4      	bne.n	801c3d6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801c3ec:	697b      	ldr	r3, [r7, #20]
 801c3ee:	781b      	ldrb	r3, [r3, #0]
 801c3f0:	2b3a      	cmp	r3, #58	@ 0x3a
 801c3f2:	d11c      	bne.n	801c42e <get_ldnumber+0x76>
			tp = *path;
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	1c5a      	adds	r2, r3, #1
 801c3fe:	60fa      	str	r2, [r7, #12]
 801c400:	781b      	ldrb	r3, [r3, #0]
 801c402:	3b30      	subs	r3, #48	@ 0x30
 801c404:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801c406:	68bb      	ldr	r3, [r7, #8]
 801c408:	2b09      	cmp	r3, #9
 801c40a:	d80e      	bhi.n	801c42a <get_ldnumber+0x72>
 801c40c:	68fa      	ldr	r2, [r7, #12]
 801c40e:	697b      	ldr	r3, [r7, #20]
 801c410:	429a      	cmp	r2, r3
 801c412:	d10a      	bne.n	801c42a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801c414:	68bb      	ldr	r3, [r7, #8]
 801c416:	2b00      	cmp	r3, #0
 801c418:	d107      	bne.n	801c42a <get_ldnumber+0x72>
					vol = (int)i;
 801c41a:	68bb      	ldr	r3, [r7, #8]
 801c41c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801c41e:	697b      	ldr	r3, [r7, #20]
 801c420:	3301      	adds	r3, #1
 801c422:	617b      	str	r3, [r7, #20]
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	697a      	ldr	r2, [r7, #20]
 801c428:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801c42a:	693b      	ldr	r3, [r7, #16]
 801c42c:	e002      	b.n	801c434 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801c42e:	2300      	movs	r3, #0
 801c430:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801c432:	693b      	ldr	r3, [r7, #16]
}
 801c434:	4618      	mov	r0, r3
 801c436:	371c      	adds	r7, #28
 801c438:	46bd      	mov	sp, r7
 801c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c43e:	4770      	bx	lr

0801c440 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801c440:	b580      	push	{r7, lr}
 801c442:	b082      	sub	sp, #8
 801c444:	af00      	add	r7, sp, #0
 801c446:	6078      	str	r0, [r7, #4]
 801c448:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	2200      	movs	r2, #0
 801c44e:	70da      	strb	r2, [r3, #3]
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	f04f 32ff 	mov.w	r2, #4294967295
 801c456:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801c458:	6839      	ldr	r1, [r7, #0]
 801c45a:	6878      	ldr	r0, [r7, #4]
 801c45c:	f7fe fb26 	bl	801aaac <move_window>
 801c460:	4603      	mov	r3, r0
 801c462:	2b00      	cmp	r3, #0
 801c464:	d001      	beq.n	801c46a <check_fs+0x2a>
 801c466:	2304      	movs	r3, #4
 801c468:	e038      	b.n	801c4dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	3338      	adds	r3, #56	@ 0x38
 801c46e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801c472:	4618      	mov	r0, r3
 801c474:	f7fe f86a 	bl	801a54c <ld_word>
 801c478:	4603      	mov	r3, r0
 801c47a:	461a      	mov	r2, r3
 801c47c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801c480:	429a      	cmp	r2, r3
 801c482:	d001      	beq.n	801c488 <check_fs+0x48>
 801c484:	2303      	movs	r3, #3
 801c486:	e029      	b.n	801c4dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c48e:	2be9      	cmp	r3, #233	@ 0xe9
 801c490:	d009      	beq.n	801c4a6 <check_fs+0x66>
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c498:	2beb      	cmp	r3, #235	@ 0xeb
 801c49a:	d11e      	bne.n	801c4da <check_fs+0x9a>
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801c4a2:	2b90      	cmp	r3, #144	@ 0x90
 801c4a4:	d119      	bne.n	801c4da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	3338      	adds	r3, #56	@ 0x38
 801c4aa:	3336      	adds	r3, #54	@ 0x36
 801c4ac:	4618      	mov	r0, r3
 801c4ae:	f7fe f865 	bl	801a57c <ld_dword>
 801c4b2:	4603      	mov	r3, r0
 801c4b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801c4b8:	4a0a      	ldr	r2, [pc, #40]	@ (801c4e4 <check_fs+0xa4>)
 801c4ba:	4293      	cmp	r3, r2
 801c4bc:	d101      	bne.n	801c4c2 <check_fs+0x82>
 801c4be:	2300      	movs	r3, #0
 801c4c0:	e00c      	b.n	801c4dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	3338      	adds	r3, #56	@ 0x38
 801c4c6:	3352      	adds	r3, #82	@ 0x52
 801c4c8:	4618      	mov	r0, r3
 801c4ca:	f7fe f857 	bl	801a57c <ld_dword>
 801c4ce:	4603      	mov	r3, r0
 801c4d0:	4a05      	ldr	r2, [pc, #20]	@ (801c4e8 <check_fs+0xa8>)
 801c4d2:	4293      	cmp	r3, r2
 801c4d4:	d101      	bne.n	801c4da <check_fs+0x9a>
 801c4d6:	2300      	movs	r3, #0
 801c4d8:	e000      	b.n	801c4dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801c4da:	2302      	movs	r3, #2
}
 801c4dc:	4618      	mov	r0, r3
 801c4de:	3708      	adds	r7, #8
 801c4e0:	46bd      	mov	sp, r7
 801c4e2:	bd80      	pop	{r7, pc}
 801c4e4:	00544146 	.word	0x00544146
 801c4e8:	33544146 	.word	0x33544146

0801c4ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801c4ec:	b580      	push	{r7, lr}
 801c4ee:	b096      	sub	sp, #88	@ 0x58
 801c4f0:	af00      	add	r7, sp, #0
 801c4f2:	60f8      	str	r0, [r7, #12]
 801c4f4:	60b9      	str	r1, [r7, #8]
 801c4f6:	4613      	mov	r3, r2
 801c4f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801c4fa:	68bb      	ldr	r3, [r7, #8]
 801c4fc:	2200      	movs	r2, #0
 801c4fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801c500:	68f8      	ldr	r0, [r7, #12]
 801c502:	f7ff ff59 	bl	801c3b8 <get_ldnumber>
 801c506:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801c508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	da01      	bge.n	801c512 <find_volume+0x26>
 801c50e:	230b      	movs	r3, #11
 801c510:	e265      	b.n	801c9de <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801c512:	4a9f      	ldr	r2, [pc, #636]	@ (801c790 <find_volume+0x2a4>)
 801c514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c51a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801c51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d101      	bne.n	801c526 <find_volume+0x3a>
 801c522:	230c      	movs	r3, #12
 801c524:	e25b      	b.n	801c9de <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801c526:	68bb      	ldr	r3, [r7, #8]
 801c528:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c52a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801c52c:	79fb      	ldrb	r3, [r7, #7]
 801c52e:	f023 0301 	bic.w	r3, r3, #1
 801c532:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801c534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c536:	781b      	ldrb	r3, [r3, #0]
 801c538:	2b00      	cmp	r3, #0
 801c53a:	d01a      	beq.n	801c572 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801c53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c53e:	785b      	ldrb	r3, [r3, #1]
 801c540:	4618      	mov	r0, r3
 801c542:	f7fd ff63 	bl	801a40c <disk_status>
 801c546:	4603      	mov	r3, r0
 801c548:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801c54c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c550:	f003 0301 	and.w	r3, r3, #1
 801c554:	2b00      	cmp	r3, #0
 801c556:	d10c      	bne.n	801c572 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801c558:	79fb      	ldrb	r3, [r7, #7]
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d007      	beq.n	801c56e <find_volume+0x82>
 801c55e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c562:	f003 0304 	and.w	r3, r3, #4
 801c566:	2b00      	cmp	r3, #0
 801c568:	d001      	beq.n	801c56e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801c56a:	230a      	movs	r3, #10
 801c56c:	e237      	b.n	801c9de <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801c56e:	2300      	movs	r3, #0
 801c570:	e235      	b.n	801c9de <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801c572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c574:	2200      	movs	r2, #0
 801c576:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801c578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c57a:	b2da      	uxtb	r2, r3
 801c57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c57e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801c580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c582:	785b      	ldrb	r3, [r3, #1]
 801c584:	4618      	mov	r0, r3
 801c586:	f7fd ff5b 	bl	801a440 <disk_initialize>
 801c58a:	4603      	mov	r3, r0
 801c58c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801c590:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c594:	f003 0301 	and.w	r3, r3, #1
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d001      	beq.n	801c5a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801c59c:	2303      	movs	r3, #3
 801c59e:	e21e      	b.n	801c9de <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801c5a0:	79fb      	ldrb	r3, [r7, #7]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d007      	beq.n	801c5b6 <find_volume+0xca>
 801c5a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c5aa:	f003 0304 	and.w	r3, r3, #4
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d001      	beq.n	801c5b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801c5b2:	230a      	movs	r3, #10
 801c5b4:	e213      	b.n	801c9de <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801c5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c5b8:	7858      	ldrb	r0, [r3, #1]
 801c5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c5bc:	330c      	adds	r3, #12
 801c5be:	461a      	mov	r2, r3
 801c5c0:	2102      	movs	r1, #2
 801c5c2:	f7fd ffa5 	bl	801a510 <disk_ioctl>
 801c5c6:	4603      	mov	r3, r0
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	d001      	beq.n	801c5d0 <find_volume+0xe4>
 801c5cc:	2301      	movs	r3, #1
 801c5ce:	e206      	b.n	801c9de <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801c5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c5d2:	899b      	ldrh	r3, [r3, #12]
 801c5d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801c5d8:	d80d      	bhi.n	801c5f6 <find_volume+0x10a>
 801c5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c5dc:	899b      	ldrh	r3, [r3, #12]
 801c5de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c5e2:	d308      	bcc.n	801c5f6 <find_volume+0x10a>
 801c5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c5e6:	899b      	ldrh	r3, [r3, #12]
 801c5e8:	461a      	mov	r2, r3
 801c5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c5ec:	899b      	ldrh	r3, [r3, #12]
 801c5ee:	3b01      	subs	r3, #1
 801c5f0:	4013      	ands	r3, r2
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d001      	beq.n	801c5fa <find_volume+0x10e>
 801c5f6:	2301      	movs	r3, #1
 801c5f8:	e1f1      	b.n	801c9de <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801c5fa:	2300      	movs	r3, #0
 801c5fc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801c5fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c600:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c602:	f7ff ff1d 	bl	801c440 <check_fs>
 801c606:	4603      	mov	r3, r0
 801c608:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801c60c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c610:	2b02      	cmp	r3, #2
 801c612:	d149      	bne.n	801c6a8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c614:	2300      	movs	r3, #0
 801c616:	643b      	str	r3, [r7, #64]	@ 0x40
 801c618:	e01e      	b.n	801c658 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801c61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c61c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801c620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c622:	011b      	lsls	r3, r3, #4
 801c624:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801c628:	4413      	add	r3, r2
 801c62a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801c62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c62e:	3304      	adds	r3, #4
 801c630:	781b      	ldrb	r3, [r3, #0]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d006      	beq.n	801c644 <find_volume+0x158>
 801c636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c638:	3308      	adds	r3, #8
 801c63a:	4618      	mov	r0, r3
 801c63c:	f7fd ff9e 	bl	801a57c <ld_dword>
 801c640:	4602      	mov	r2, r0
 801c642:	e000      	b.n	801c646 <find_volume+0x15a>
 801c644:	2200      	movs	r2, #0
 801c646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c648:	009b      	lsls	r3, r3, #2
 801c64a:	3358      	adds	r3, #88	@ 0x58
 801c64c:	443b      	add	r3, r7
 801c64e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c654:	3301      	adds	r3, #1
 801c656:	643b      	str	r3, [r7, #64]	@ 0x40
 801c658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c65a:	2b03      	cmp	r3, #3
 801c65c:	d9dd      	bls.n	801c61a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801c65e:	2300      	movs	r3, #0
 801c660:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801c662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c664:	2b00      	cmp	r3, #0
 801c666:	d002      	beq.n	801c66e <find_volume+0x182>
 801c668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c66a:	3b01      	subs	r3, #1
 801c66c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801c66e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c670:	009b      	lsls	r3, r3, #2
 801c672:	3358      	adds	r3, #88	@ 0x58
 801c674:	443b      	add	r3, r7
 801c676:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801c67a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801c67c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d005      	beq.n	801c68e <find_volume+0x1a2>
 801c682:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c684:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c686:	f7ff fedb 	bl	801c440 <check_fs>
 801c68a:	4603      	mov	r3, r0
 801c68c:	e000      	b.n	801c690 <find_volume+0x1a4>
 801c68e:	2303      	movs	r3, #3
 801c690:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801c694:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c698:	2b01      	cmp	r3, #1
 801c69a:	d905      	bls.n	801c6a8 <find_volume+0x1bc>
 801c69c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c69e:	3301      	adds	r3, #1
 801c6a0:	643b      	str	r3, [r7, #64]	@ 0x40
 801c6a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c6a4:	2b03      	cmp	r3, #3
 801c6a6:	d9e2      	bls.n	801c66e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801c6a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c6ac:	2b04      	cmp	r3, #4
 801c6ae:	d101      	bne.n	801c6b4 <find_volume+0x1c8>
 801c6b0:	2301      	movs	r3, #1
 801c6b2:	e194      	b.n	801c9de <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801c6b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c6b8:	2b01      	cmp	r3, #1
 801c6ba:	d901      	bls.n	801c6c0 <find_volume+0x1d4>
 801c6bc:	230d      	movs	r3, #13
 801c6be:	e18e      	b.n	801c9de <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801c6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6c2:	3338      	adds	r3, #56	@ 0x38
 801c6c4:	330b      	adds	r3, #11
 801c6c6:	4618      	mov	r0, r3
 801c6c8:	f7fd ff40 	bl	801a54c <ld_word>
 801c6cc:	4603      	mov	r3, r0
 801c6ce:	461a      	mov	r2, r3
 801c6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6d2:	899b      	ldrh	r3, [r3, #12]
 801c6d4:	429a      	cmp	r2, r3
 801c6d6:	d001      	beq.n	801c6dc <find_volume+0x1f0>
 801c6d8:	230d      	movs	r3, #13
 801c6da:	e180      	b.n	801c9de <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801c6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6de:	3338      	adds	r3, #56	@ 0x38
 801c6e0:	3316      	adds	r3, #22
 801c6e2:	4618      	mov	r0, r3
 801c6e4:	f7fd ff32 	bl	801a54c <ld_word>
 801c6e8:	4603      	mov	r3, r0
 801c6ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801c6ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d106      	bne.n	801c700 <find_volume+0x214>
 801c6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6f4:	3338      	adds	r3, #56	@ 0x38
 801c6f6:	3324      	adds	r3, #36	@ 0x24
 801c6f8:	4618      	mov	r0, r3
 801c6fa:	f7fd ff3f 	bl	801a57c <ld_dword>
 801c6fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801c700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c702:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c704:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801c706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c708:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801c70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c70e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801c710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c712:	789b      	ldrb	r3, [r3, #2]
 801c714:	2b01      	cmp	r3, #1
 801c716:	d005      	beq.n	801c724 <find_volume+0x238>
 801c718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c71a:	789b      	ldrb	r3, [r3, #2]
 801c71c:	2b02      	cmp	r3, #2
 801c71e:	d001      	beq.n	801c724 <find_volume+0x238>
 801c720:	230d      	movs	r3, #13
 801c722:	e15c      	b.n	801c9de <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801c724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c726:	789b      	ldrb	r3, [r3, #2]
 801c728:	461a      	mov	r2, r3
 801c72a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c72c:	fb02 f303 	mul.w	r3, r2, r3
 801c730:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801c732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c734:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801c738:	461a      	mov	r2, r3
 801c73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c73c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801c73e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c740:	895b      	ldrh	r3, [r3, #10]
 801c742:	2b00      	cmp	r3, #0
 801c744:	d008      	beq.n	801c758 <find_volume+0x26c>
 801c746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c748:	895b      	ldrh	r3, [r3, #10]
 801c74a:	461a      	mov	r2, r3
 801c74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c74e:	895b      	ldrh	r3, [r3, #10]
 801c750:	3b01      	subs	r3, #1
 801c752:	4013      	ands	r3, r2
 801c754:	2b00      	cmp	r3, #0
 801c756:	d001      	beq.n	801c75c <find_volume+0x270>
 801c758:	230d      	movs	r3, #13
 801c75a:	e140      	b.n	801c9de <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801c75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c75e:	3338      	adds	r3, #56	@ 0x38
 801c760:	3311      	adds	r3, #17
 801c762:	4618      	mov	r0, r3
 801c764:	f7fd fef2 	bl	801a54c <ld_word>
 801c768:	4603      	mov	r3, r0
 801c76a:	461a      	mov	r2, r3
 801c76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c76e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801c770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c772:	891b      	ldrh	r3, [r3, #8]
 801c774:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c776:	8992      	ldrh	r2, [r2, #12]
 801c778:	0952      	lsrs	r2, r2, #5
 801c77a:	b292      	uxth	r2, r2
 801c77c:	fbb3 f1f2 	udiv	r1, r3, r2
 801c780:	fb01 f202 	mul.w	r2, r1, r2
 801c784:	1a9b      	subs	r3, r3, r2
 801c786:	b29b      	uxth	r3, r3
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d003      	beq.n	801c794 <find_volume+0x2a8>
 801c78c:	230d      	movs	r3, #13
 801c78e:	e126      	b.n	801c9de <find_volume+0x4f2>
 801c790:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801c794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c796:	3338      	adds	r3, #56	@ 0x38
 801c798:	3313      	adds	r3, #19
 801c79a:	4618      	mov	r0, r3
 801c79c:	f7fd fed6 	bl	801a54c <ld_word>
 801c7a0:	4603      	mov	r3, r0
 801c7a2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801c7a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d106      	bne.n	801c7b8 <find_volume+0x2cc>
 801c7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c7ac:	3338      	adds	r3, #56	@ 0x38
 801c7ae:	3320      	adds	r3, #32
 801c7b0:	4618      	mov	r0, r3
 801c7b2:	f7fd fee3 	bl	801a57c <ld_dword>
 801c7b6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801c7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c7ba:	3338      	adds	r3, #56	@ 0x38
 801c7bc:	330e      	adds	r3, #14
 801c7be:	4618      	mov	r0, r3
 801c7c0:	f7fd fec4 	bl	801a54c <ld_word>
 801c7c4:	4603      	mov	r3, r0
 801c7c6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801c7c8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d101      	bne.n	801c7d2 <find_volume+0x2e6>
 801c7ce:	230d      	movs	r3, #13
 801c7d0:	e105      	b.n	801c9de <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801c7d2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c7d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c7d6:	4413      	add	r3, r2
 801c7d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c7da:	8911      	ldrh	r1, [r2, #8]
 801c7dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c7de:	8992      	ldrh	r2, [r2, #12]
 801c7e0:	0952      	lsrs	r2, r2, #5
 801c7e2:	b292      	uxth	r2, r2
 801c7e4:	fbb1 f2f2 	udiv	r2, r1, r2
 801c7e8:	b292      	uxth	r2, r2
 801c7ea:	4413      	add	r3, r2
 801c7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801c7ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7f2:	429a      	cmp	r2, r3
 801c7f4:	d201      	bcs.n	801c7fa <find_volume+0x30e>
 801c7f6:	230d      	movs	r3, #13
 801c7f8:	e0f1      	b.n	801c9de <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801c7fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7fe:	1ad3      	subs	r3, r2, r3
 801c800:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c802:	8952      	ldrh	r2, [r2, #10]
 801c804:	fbb3 f3f2 	udiv	r3, r3, r2
 801c808:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801c80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d101      	bne.n	801c814 <find_volume+0x328>
 801c810:	230d      	movs	r3, #13
 801c812:	e0e4      	b.n	801c9de <find_volume+0x4f2>
		fmt = FS_FAT32;
 801c814:	2303      	movs	r3, #3
 801c816:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801c81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c81c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801c820:	4293      	cmp	r3, r2
 801c822:	d802      	bhi.n	801c82a <find_volume+0x33e>
 801c824:	2302      	movs	r3, #2
 801c826:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801c82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c82c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801c830:	4293      	cmp	r3, r2
 801c832:	d802      	bhi.n	801c83a <find_volume+0x34e>
 801c834:	2301      	movs	r3, #1
 801c836:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c83c:	1c9a      	adds	r2, r3, #2
 801c83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c840:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801c842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c844:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c846:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801c848:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c84a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c84c:	441a      	add	r2, r3
 801c84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c850:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801c852:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c856:	441a      	add	r2, r3
 801c858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c85a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801c85c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c860:	2b03      	cmp	r3, #3
 801c862:	d11e      	bne.n	801c8a2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801c864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c866:	3338      	adds	r3, #56	@ 0x38
 801c868:	332a      	adds	r3, #42	@ 0x2a
 801c86a:	4618      	mov	r0, r3
 801c86c:	f7fd fe6e 	bl	801a54c <ld_word>
 801c870:	4603      	mov	r3, r0
 801c872:	2b00      	cmp	r3, #0
 801c874:	d001      	beq.n	801c87a <find_volume+0x38e>
 801c876:	230d      	movs	r3, #13
 801c878:	e0b1      	b.n	801c9de <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801c87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c87c:	891b      	ldrh	r3, [r3, #8]
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d001      	beq.n	801c886 <find_volume+0x39a>
 801c882:	230d      	movs	r3, #13
 801c884:	e0ab      	b.n	801c9de <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801c886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c888:	3338      	adds	r3, #56	@ 0x38
 801c88a:	332c      	adds	r3, #44	@ 0x2c
 801c88c:	4618      	mov	r0, r3
 801c88e:	f7fd fe75 	bl	801a57c <ld_dword>
 801c892:	4602      	mov	r2, r0
 801c894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c896:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801c898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c89a:	69db      	ldr	r3, [r3, #28]
 801c89c:	009b      	lsls	r3, r3, #2
 801c89e:	647b      	str	r3, [r7, #68]	@ 0x44
 801c8a0:	e01f      	b.n	801c8e2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801c8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8a4:	891b      	ldrh	r3, [r3, #8]
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d101      	bne.n	801c8ae <find_volume+0x3c2>
 801c8aa:	230d      	movs	r3, #13
 801c8ac:	e097      	b.n	801c9de <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801c8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c8b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c8b4:	441a      	add	r2, r3
 801c8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8b8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801c8ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c8be:	2b02      	cmp	r3, #2
 801c8c0:	d103      	bne.n	801c8ca <find_volume+0x3de>
 801c8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8c4:	69db      	ldr	r3, [r3, #28]
 801c8c6:	005b      	lsls	r3, r3, #1
 801c8c8:	e00a      	b.n	801c8e0 <find_volume+0x3f4>
 801c8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8cc:	69da      	ldr	r2, [r3, #28]
 801c8ce:	4613      	mov	r3, r2
 801c8d0:	005b      	lsls	r3, r3, #1
 801c8d2:	4413      	add	r3, r2
 801c8d4:	085a      	lsrs	r2, r3, #1
 801c8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8d8:	69db      	ldr	r3, [r3, #28]
 801c8da:	f003 0301 	and.w	r3, r3, #1
 801c8de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801c8e0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801c8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8e4:	6a1a      	ldr	r2, [r3, #32]
 801c8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8e8:	899b      	ldrh	r3, [r3, #12]
 801c8ea:	4619      	mov	r1, r3
 801c8ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c8ee:	440b      	add	r3, r1
 801c8f0:	3b01      	subs	r3, #1
 801c8f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801c8f4:	8989      	ldrh	r1, [r1, #12]
 801c8f6:	fbb3 f3f1 	udiv	r3, r3, r1
 801c8fa:	429a      	cmp	r2, r3
 801c8fc:	d201      	bcs.n	801c902 <find_volume+0x416>
 801c8fe:	230d      	movs	r3, #13
 801c900:	e06d      	b.n	801c9de <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801c902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c904:	f04f 32ff 	mov.w	r2, #4294967295
 801c908:	619a      	str	r2, [r3, #24]
 801c90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c90c:	699a      	ldr	r2, [r3, #24]
 801c90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c910:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801c912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c914:	2280      	movs	r2, #128	@ 0x80
 801c916:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801c918:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c91c:	2b03      	cmp	r3, #3
 801c91e:	d149      	bne.n	801c9b4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801c920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c922:	3338      	adds	r3, #56	@ 0x38
 801c924:	3330      	adds	r3, #48	@ 0x30
 801c926:	4618      	mov	r0, r3
 801c928:	f7fd fe10 	bl	801a54c <ld_word>
 801c92c:	4603      	mov	r3, r0
 801c92e:	2b01      	cmp	r3, #1
 801c930:	d140      	bne.n	801c9b4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801c932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c934:	3301      	adds	r3, #1
 801c936:	4619      	mov	r1, r3
 801c938:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c93a:	f7fe f8b7 	bl	801aaac <move_window>
 801c93e:	4603      	mov	r3, r0
 801c940:	2b00      	cmp	r3, #0
 801c942:	d137      	bne.n	801c9b4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801c944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c946:	2200      	movs	r2, #0
 801c948:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801c94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c94c:	3338      	adds	r3, #56	@ 0x38
 801c94e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801c952:	4618      	mov	r0, r3
 801c954:	f7fd fdfa 	bl	801a54c <ld_word>
 801c958:	4603      	mov	r3, r0
 801c95a:	461a      	mov	r2, r3
 801c95c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801c960:	429a      	cmp	r2, r3
 801c962:	d127      	bne.n	801c9b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801c964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c966:	3338      	adds	r3, #56	@ 0x38
 801c968:	4618      	mov	r0, r3
 801c96a:	f7fd fe07 	bl	801a57c <ld_dword>
 801c96e:	4603      	mov	r3, r0
 801c970:	4a1d      	ldr	r2, [pc, #116]	@ (801c9e8 <find_volume+0x4fc>)
 801c972:	4293      	cmp	r3, r2
 801c974:	d11e      	bne.n	801c9b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801c976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c978:	3338      	adds	r3, #56	@ 0x38
 801c97a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801c97e:	4618      	mov	r0, r3
 801c980:	f7fd fdfc 	bl	801a57c <ld_dword>
 801c984:	4603      	mov	r3, r0
 801c986:	4a19      	ldr	r2, [pc, #100]	@ (801c9ec <find_volume+0x500>)
 801c988:	4293      	cmp	r3, r2
 801c98a:	d113      	bne.n	801c9b4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801c98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c98e:	3338      	adds	r3, #56	@ 0x38
 801c990:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801c994:	4618      	mov	r0, r3
 801c996:	f7fd fdf1 	bl	801a57c <ld_dword>
 801c99a:	4602      	mov	r2, r0
 801c99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c99e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801c9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9a2:	3338      	adds	r3, #56	@ 0x38
 801c9a4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801c9a8:	4618      	mov	r0, r3
 801c9aa:	f7fd fde7 	bl	801a57c <ld_dword>
 801c9ae:	4602      	mov	r2, r0
 801c9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9b2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801c9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9b6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801c9ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801c9bc:	4b0c      	ldr	r3, [pc, #48]	@ (801c9f0 <find_volume+0x504>)
 801c9be:	881b      	ldrh	r3, [r3, #0]
 801c9c0:	3301      	adds	r3, #1
 801c9c2:	b29a      	uxth	r2, r3
 801c9c4:	4b0a      	ldr	r3, [pc, #40]	@ (801c9f0 <find_volume+0x504>)
 801c9c6:	801a      	strh	r2, [r3, #0]
 801c9c8:	4b09      	ldr	r3, [pc, #36]	@ (801c9f0 <find_volume+0x504>)
 801c9ca:	881a      	ldrh	r2, [r3, #0]
 801c9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9ce:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801c9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9d2:	4a08      	ldr	r2, [pc, #32]	@ (801c9f4 <find_volume+0x508>)
 801c9d4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801c9d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c9d8:	f7fe f800 	bl	801a9dc <clear_lock>
#endif
	return FR_OK;
 801c9dc:	2300      	movs	r3, #0
}
 801c9de:	4618      	mov	r0, r3
 801c9e0:	3758      	adds	r7, #88	@ 0x58
 801c9e2:	46bd      	mov	sp, r7
 801c9e4:	bd80      	pop	{r7, pc}
 801c9e6:	bf00      	nop
 801c9e8:	41615252 	.word	0x41615252
 801c9ec:	61417272 	.word	0x61417272
 801c9f0:	24000554 	.word	0x24000554
 801c9f4:	24000568 	.word	0x24000568

0801c9f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801c9f8:	b580      	push	{r7, lr}
 801c9fa:	b084      	sub	sp, #16
 801c9fc:	af00      	add	r7, sp, #0
 801c9fe:	6078      	str	r0, [r7, #4]
 801ca00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801ca02:	2309      	movs	r3, #9
 801ca04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d01c      	beq.n	801ca46 <validate+0x4e>
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d018      	beq.n	801ca46 <validate+0x4e>
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	781b      	ldrb	r3, [r3, #0]
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d013      	beq.n	801ca46 <validate+0x4e>
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	889a      	ldrh	r2, [r3, #4]
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	681b      	ldr	r3, [r3, #0]
 801ca26:	88db      	ldrh	r3, [r3, #6]
 801ca28:	429a      	cmp	r2, r3
 801ca2a:	d10c      	bne.n	801ca46 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	785b      	ldrb	r3, [r3, #1]
 801ca32:	4618      	mov	r0, r3
 801ca34:	f7fd fcea 	bl	801a40c <disk_status>
 801ca38:	4603      	mov	r3, r0
 801ca3a:	f003 0301 	and.w	r3, r3, #1
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d101      	bne.n	801ca46 <validate+0x4e>
			res = FR_OK;
 801ca42:	2300      	movs	r3, #0
 801ca44:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801ca46:	7bfb      	ldrb	r3, [r7, #15]
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	d102      	bne.n	801ca52 <validate+0x5a>
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	e000      	b.n	801ca54 <validate+0x5c>
 801ca52:	2300      	movs	r3, #0
 801ca54:	683a      	ldr	r2, [r7, #0]
 801ca56:	6013      	str	r3, [r2, #0]
	return res;
 801ca58:	7bfb      	ldrb	r3, [r7, #15]
}
 801ca5a:	4618      	mov	r0, r3
 801ca5c:	3710      	adds	r7, #16
 801ca5e:	46bd      	mov	sp, r7
 801ca60:	bd80      	pop	{r7, pc}
	...

0801ca64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801ca64:	b580      	push	{r7, lr}
 801ca66:	b088      	sub	sp, #32
 801ca68:	af00      	add	r7, sp, #0
 801ca6a:	60f8      	str	r0, [r7, #12]
 801ca6c:	60b9      	str	r1, [r7, #8]
 801ca6e:	4613      	mov	r3, r2
 801ca70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801ca72:	68bb      	ldr	r3, [r7, #8]
 801ca74:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801ca76:	f107 0310 	add.w	r3, r7, #16
 801ca7a:	4618      	mov	r0, r3
 801ca7c:	f7ff fc9c 	bl	801c3b8 <get_ldnumber>
 801ca80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801ca82:	69fb      	ldr	r3, [r7, #28]
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	da01      	bge.n	801ca8c <f_mount+0x28>
 801ca88:	230b      	movs	r3, #11
 801ca8a:	e02b      	b.n	801cae4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801ca8c:	4a17      	ldr	r2, [pc, #92]	@ (801caec <f_mount+0x88>)
 801ca8e:	69fb      	ldr	r3, [r7, #28]
 801ca90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ca94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801ca96:	69bb      	ldr	r3, [r7, #24]
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	d005      	beq.n	801caa8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801ca9c:	69b8      	ldr	r0, [r7, #24]
 801ca9e:	f7fd ff9d 	bl	801a9dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801caa2:	69bb      	ldr	r3, [r7, #24]
 801caa4:	2200      	movs	r2, #0
 801caa6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801caa8:	68fb      	ldr	r3, [r7, #12]
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d002      	beq.n	801cab4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801caae:	68fb      	ldr	r3, [r7, #12]
 801cab0:	2200      	movs	r2, #0
 801cab2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801cab4:	68fa      	ldr	r2, [r7, #12]
 801cab6:	490d      	ldr	r1, [pc, #52]	@ (801caec <f_mount+0x88>)
 801cab8:	69fb      	ldr	r3, [r7, #28]
 801caba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d002      	beq.n	801caca <f_mount+0x66>
 801cac4:	79fb      	ldrb	r3, [r7, #7]
 801cac6:	2b01      	cmp	r3, #1
 801cac8:	d001      	beq.n	801cace <f_mount+0x6a>
 801caca:	2300      	movs	r3, #0
 801cacc:	e00a      	b.n	801cae4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801cace:	f107 010c 	add.w	r1, r7, #12
 801cad2:	f107 0308 	add.w	r3, r7, #8
 801cad6:	2200      	movs	r2, #0
 801cad8:	4618      	mov	r0, r3
 801cada:	f7ff fd07 	bl	801c4ec <find_volume>
 801cade:	4603      	mov	r3, r0
 801cae0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801cae2:	7dfb      	ldrb	r3, [r7, #23]
}
 801cae4:	4618      	mov	r0, r3
 801cae6:	3720      	adds	r7, #32
 801cae8:	46bd      	mov	sp, r7
 801caea:	bd80      	pop	{r7, pc}
 801caec:	24000550 	.word	0x24000550

0801caf0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801caf0:	b580      	push	{r7, lr}
 801caf2:	b09a      	sub	sp, #104	@ 0x68
 801caf4:	af00      	add	r7, sp, #0
 801caf6:	60f8      	str	r0, [r7, #12]
 801caf8:	60b9      	str	r1, [r7, #8]
 801cafa:	4613      	mov	r3, r2
 801cafc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	d101      	bne.n	801cb08 <f_open+0x18>
 801cb04:	2309      	movs	r3, #9
 801cb06:	e1b7      	b.n	801ce78 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801cb08:	79fb      	ldrb	r3, [r7, #7]
 801cb0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cb0e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801cb10:	79fa      	ldrb	r2, [r7, #7]
 801cb12:	f107 0114 	add.w	r1, r7, #20
 801cb16:	f107 0308 	add.w	r3, r7, #8
 801cb1a:	4618      	mov	r0, r3
 801cb1c:	f7ff fce6 	bl	801c4ec <find_volume>
 801cb20:	4603      	mov	r3, r0
 801cb22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801cb26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	f040 819b 	bne.w	801ce66 <f_open+0x376>
		dj.obj.fs = fs;
 801cb30:	697b      	ldr	r3, [r7, #20]
 801cb32:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801cb34:	68ba      	ldr	r2, [r7, #8]
 801cb36:	f107 0318 	add.w	r3, r7, #24
 801cb3a:	4611      	mov	r1, r2
 801cb3c:	4618      	mov	r0, r3
 801cb3e:	f7ff fbc5 	bl	801c2cc <follow_path>
 801cb42:	4603      	mov	r3, r0
 801cb44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801cb48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d118      	bne.n	801cb82 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801cb50:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801cb54:	b25b      	sxtb	r3, r3
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	da03      	bge.n	801cb62 <f_open+0x72>
				res = FR_INVALID_NAME;
 801cb5a:	2306      	movs	r3, #6
 801cb5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801cb60:	e00f      	b.n	801cb82 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801cb62:	79fb      	ldrb	r3, [r7, #7]
 801cb64:	2b01      	cmp	r3, #1
 801cb66:	bf8c      	ite	hi
 801cb68:	2301      	movhi	r3, #1
 801cb6a:	2300      	movls	r3, #0
 801cb6c:	b2db      	uxtb	r3, r3
 801cb6e:	461a      	mov	r2, r3
 801cb70:	f107 0318 	add.w	r3, r7, #24
 801cb74:	4611      	mov	r1, r2
 801cb76:	4618      	mov	r0, r3
 801cb78:	f7fd fde8 	bl	801a74c <chk_lock>
 801cb7c:	4603      	mov	r3, r0
 801cb7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801cb82:	79fb      	ldrb	r3, [r7, #7]
 801cb84:	f003 031c 	and.w	r3, r3, #28
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d07f      	beq.n	801cc8c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801cb8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d017      	beq.n	801cbc4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801cb94:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cb98:	2b04      	cmp	r3, #4
 801cb9a:	d10e      	bne.n	801cbba <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801cb9c:	f7fd fe32 	bl	801a804 <enq_lock>
 801cba0:	4603      	mov	r3, r0
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d006      	beq.n	801cbb4 <f_open+0xc4>
 801cba6:	f107 0318 	add.w	r3, r7, #24
 801cbaa:	4618      	mov	r0, r3
 801cbac:	f7ff f894 	bl	801bcd8 <dir_register>
 801cbb0:	4603      	mov	r3, r0
 801cbb2:	e000      	b.n	801cbb6 <f_open+0xc6>
 801cbb4:	2312      	movs	r3, #18
 801cbb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801cbba:	79fb      	ldrb	r3, [r7, #7]
 801cbbc:	f043 0308 	orr.w	r3, r3, #8
 801cbc0:	71fb      	strb	r3, [r7, #7]
 801cbc2:	e010      	b.n	801cbe6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801cbc4:	7fbb      	ldrb	r3, [r7, #30]
 801cbc6:	f003 0311 	and.w	r3, r3, #17
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d003      	beq.n	801cbd6 <f_open+0xe6>
					res = FR_DENIED;
 801cbce:	2307      	movs	r3, #7
 801cbd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801cbd4:	e007      	b.n	801cbe6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801cbd6:	79fb      	ldrb	r3, [r7, #7]
 801cbd8:	f003 0304 	and.w	r3, r3, #4
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d002      	beq.n	801cbe6 <f_open+0xf6>
 801cbe0:	2308      	movs	r3, #8
 801cbe2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801cbe6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d168      	bne.n	801ccc0 <f_open+0x1d0>
 801cbee:	79fb      	ldrb	r3, [r7, #7]
 801cbf0:	f003 0308 	and.w	r3, r3, #8
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d063      	beq.n	801ccc0 <f_open+0x1d0>
				dw = GET_FATTIME();
 801cbf8:	f7fd fbaa 	bl	801a350 <get_fattime>
 801cbfc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801cbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc00:	330e      	adds	r3, #14
 801cc02:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cc04:	4618      	mov	r0, r3
 801cc06:	f7fd fcf7 	bl	801a5f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801cc0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc0c:	3316      	adds	r3, #22
 801cc0e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cc10:	4618      	mov	r0, r3
 801cc12:	f7fd fcf1 	bl	801a5f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801cc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc18:	330b      	adds	r3, #11
 801cc1a:	2220      	movs	r2, #32
 801cc1c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801cc1e:	697b      	ldr	r3, [r7, #20]
 801cc20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cc22:	4611      	mov	r1, r2
 801cc24:	4618      	mov	r0, r3
 801cc26:	f7fe fcc6 	bl	801b5b6 <ld_clust>
 801cc2a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801cc2c:	697b      	ldr	r3, [r7, #20]
 801cc2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801cc30:	2200      	movs	r2, #0
 801cc32:	4618      	mov	r0, r3
 801cc34:	f7fe fcde 	bl	801b5f4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801cc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc3a:	331c      	adds	r3, #28
 801cc3c:	2100      	movs	r1, #0
 801cc3e:	4618      	mov	r0, r3
 801cc40:	f7fd fcda 	bl	801a5f8 <st_dword>
					fs->wflag = 1;
 801cc44:	697b      	ldr	r3, [r7, #20]
 801cc46:	2201      	movs	r2, #1
 801cc48:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801cc4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d037      	beq.n	801ccc0 <f_open+0x1d0>
						dw = fs->winsect;
 801cc50:	697b      	ldr	r3, [r7, #20]
 801cc52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cc54:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801cc56:	f107 0318 	add.w	r3, r7, #24
 801cc5a:	2200      	movs	r2, #0
 801cc5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801cc5e:	4618      	mov	r0, r3
 801cc60:	f7fe f9ce 	bl	801b000 <remove_chain>
 801cc64:	4603      	mov	r3, r0
 801cc66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801cc6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d126      	bne.n	801ccc0 <f_open+0x1d0>
							res = move_window(fs, dw);
 801cc72:	697b      	ldr	r3, [r7, #20]
 801cc74:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cc76:	4618      	mov	r0, r3
 801cc78:	f7fd ff18 	bl	801aaac <move_window>
 801cc7c:	4603      	mov	r3, r0
 801cc7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801cc82:	697b      	ldr	r3, [r7, #20]
 801cc84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801cc86:	3a01      	subs	r2, #1
 801cc88:	615a      	str	r2, [r3, #20]
 801cc8a:	e019      	b.n	801ccc0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801cc8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d115      	bne.n	801ccc0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801cc94:	7fbb      	ldrb	r3, [r7, #30]
 801cc96:	f003 0310 	and.w	r3, r3, #16
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d003      	beq.n	801cca6 <f_open+0x1b6>
					res = FR_NO_FILE;
 801cc9e:	2304      	movs	r3, #4
 801cca0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801cca4:	e00c      	b.n	801ccc0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801cca6:	79fb      	ldrb	r3, [r7, #7]
 801cca8:	f003 0302 	and.w	r3, r3, #2
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d007      	beq.n	801ccc0 <f_open+0x1d0>
 801ccb0:	7fbb      	ldrb	r3, [r7, #30]
 801ccb2:	f003 0301 	and.w	r3, r3, #1
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d002      	beq.n	801ccc0 <f_open+0x1d0>
						res = FR_DENIED;
 801ccba:	2307      	movs	r3, #7
 801ccbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801ccc0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d126      	bne.n	801cd16 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801ccc8:	79fb      	ldrb	r3, [r7, #7]
 801ccca:	f003 0308 	and.w	r3, r3, #8
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d003      	beq.n	801ccda <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801ccd2:	79fb      	ldrb	r3, [r7, #7]
 801ccd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ccd8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801ccda:	697b      	ldr	r3, [r7, #20]
 801ccdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ccde:	68fb      	ldr	r3, [r7, #12]
 801cce0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801cce2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cce4:	68fb      	ldr	r3, [r7, #12]
 801cce6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801cce8:	79fb      	ldrb	r3, [r7, #7]
 801ccea:	2b01      	cmp	r3, #1
 801ccec:	bf8c      	ite	hi
 801ccee:	2301      	movhi	r3, #1
 801ccf0:	2300      	movls	r3, #0
 801ccf2:	b2db      	uxtb	r3, r3
 801ccf4:	461a      	mov	r2, r3
 801ccf6:	f107 0318 	add.w	r3, r7, #24
 801ccfa:	4611      	mov	r1, r2
 801ccfc:	4618      	mov	r0, r3
 801ccfe:	f7fd fda3 	bl	801a848 <inc_lock>
 801cd02:	4602      	mov	r2, r0
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	691b      	ldr	r3, [r3, #16]
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d102      	bne.n	801cd16 <f_open+0x226>
 801cd10:	2302      	movs	r3, #2
 801cd12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801cd16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	f040 80a3 	bne.w	801ce66 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801cd20:	697b      	ldr	r3, [r7, #20]
 801cd22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cd24:	4611      	mov	r1, r2
 801cd26:	4618      	mov	r0, r3
 801cd28:	f7fe fc45 	bl	801b5b6 <ld_clust>
 801cd2c:	4602      	mov	r2, r0
 801cd2e:	68fb      	ldr	r3, [r7, #12]
 801cd30:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801cd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd34:	331c      	adds	r3, #28
 801cd36:	4618      	mov	r0, r3
 801cd38:	f7fd fc20 	bl	801a57c <ld_dword>
 801cd3c:	4602      	mov	r2, r0
 801cd3e:	68fb      	ldr	r3, [r7, #12]
 801cd40:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801cd42:	68fb      	ldr	r3, [r7, #12]
 801cd44:	2200      	movs	r2, #0
 801cd46:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801cd48:	697a      	ldr	r2, [r7, #20]
 801cd4a:	68fb      	ldr	r3, [r7, #12]
 801cd4c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801cd4e:	697b      	ldr	r3, [r7, #20]
 801cd50:	88da      	ldrh	r2, [r3, #6]
 801cd52:	68fb      	ldr	r3, [r7, #12]
 801cd54:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801cd56:	68fb      	ldr	r3, [r7, #12]
 801cd58:	79fa      	ldrb	r2, [r7, #7]
 801cd5a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	2200      	movs	r2, #0
 801cd60:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801cd62:	68fb      	ldr	r3, [r7, #12]
 801cd64:	2200      	movs	r2, #0
 801cd66:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	2200      	movs	r2, #0
 801cd6c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801cd6e:	68fb      	ldr	r3, [r7, #12]
 801cd70:	3330      	adds	r3, #48	@ 0x30
 801cd72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801cd76:	2100      	movs	r1, #0
 801cd78:	4618      	mov	r0, r3
 801cd7a:	f7fd fc8a 	bl	801a692 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801cd7e:	79fb      	ldrb	r3, [r7, #7]
 801cd80:	f003 0320 	and.w	r3, r3, #32
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d06e      	beq.n	801ce66 <f_open+0x376>
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	68db      	ldr	r3, [r3, #12]
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d06a      	beq.n	801ce66 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	68da      	ldr	r2, [r3, #12]
 801cd94:	68fb      	ldr	r3, [r7, #12]
 801cd96:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801cd98:	697b      	ldr	r3, [r7, #20]
 801cd9a:	895b      	ldrh	r3, [r3, #10]
 801cd9c:	461a      	mov	r2, r3
 801cd9e:	697b      	ldr	r3, [r7, #20]
 801cda0:	899b      	ldrh	r3, [r3, #12]
 801cda2:	fb02 f303 	mul.w	r3, r2, r3
 801cda6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801cda8:	68fb      	ldr	r3, [r7, #12]
 801cdaa:	689b      	ldr	r3, [r3, #8]
 801cdac:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801cdae:	68fb      	ldr	r3, [r7, #12]
 801cdb0:	68db      	ldr	r3, [r3, #12]
 801cdb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cdb4:	e016      	b.n	801cde4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801cdb6:	68fb      	ldr	r3, [r7, #12]
 801cdb8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801cdba:	4618      	mov	r0, r3
 801cdbc:	f7fd ff33 	bl	801ac26 <get_fat>
 801cdc0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801cdc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cdc4:	2b01      	cmp	r3, #1
 801cdc6:	d802      	bhi.n	801cdce <f_open+0x2de>
 801cdc8:	2302      	movs	r3, #2
 801cdca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801cdce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cdd4:	d102      	bne.n	801cddc <f_open+0x2ec>
 801cdd6:	2301      	movs	r3, #1
 801cdd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801cddc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801cdde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cde0:	1ad3      	subs	r3, r2, r3
 801cde2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cde4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	d103      	bne.n	801cdf4 <f_open+0x304>
 801cdec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801cdee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cdf0:	429a      	cmp	r2, r3
 801cdf2:	d8e0      	bhi.n	801cdb6 <f_open+0x2c6>
				}
				fp->clust = clst;
 801cdf4:	68fb      	ldr	r3, [r7, #12]
 801cdf6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801cdf8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801cdfa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d131      	bne.n	801ce66 <f_open+0x376>
 801ce02:	697b      	ldr	r3, [r7, #20]
 801ce04:	899b      	ldrh	r3, [r3, #12]
 801ce06:	461a      	mov	r2, r3
 801ce08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ce0a:	fbb3 f1f2 	udiv	r1, r3, r2
 801ce0e:	fb01 f202 	mul.w	r2, r1, r2
 801ce12:	1a9b      	subs	r3, r3, r2
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d026      	beq.n	801ce66 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801ce18:	697b      	ldr	r3, [r7, #20]
 801ce1a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801ce1c:	4618      	mov	r0, r3
 801ce1e:	f7fd fee3 	bl	801abe8 <clust2sect>
 801ce22:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801ce24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	d103      	bne.n	801ce32 <f_open+0x342>
						res = FR_INT_ERR;
 801ce2a:	2302      	movs	r3, #2
 801ce2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801ce30:	e019      	b.n	801ce66 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801ce32:	697b      	ldr	r3, [r7, #20]
 801ce34:	899b      	ldrh	r3, [r3, #12]
 801ce36:	461a      	mov	r2, r3
 801ce38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ce3a:	fbb3 f2f2 	udiv	r2, r3, r2
 801ce3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ce40:	441a      	add	r2, r3
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801ce46:	697b      	ldr	r3, [r7, #20]
 801ce48:	7858      	ldrb	r0, [r3, #1]
 801ce4a:	68fb      	ldr	r3, [r7, #12]
 801ce4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	6a1a      	ldr	r2, [r3, #32]
 801ce54:	2301      	movs	r3, #1
 801ce56:	f7fd fb1b 	bl	801a490 <disk_read>
 801ce5a:	4603      	mov	r3, r0
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	d002      	beq.n	801ce66 <f_open+0x376>
 801ce60:	2301      	movs	r3, #1
 801ce62:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801ce66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d002      	beq.n	801ce74 <f_open+0x384>
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	2200      	movs	r2, #0
 801ce72:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801ce74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801ce78:	4618      	mov	r0, r3
 801ce7a:	3768      	adds	r7, #104	@ 0x68
 801ce7c:	46bd      	mov	sp, r7
 801ce7e:	bd80      	pop	{r7, pc}

0801ce80 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801ce80:	b580      	push	{r7, lr}
 801ce82:	b08c      	sub	sp, #48	@ 0x30
 801ce84:	af00      	add	r7, sp, #0
 801ce86:	60f8      	str	r0, [r7, #12]
 801ce88:	60b9      	str	r1, [r7, #8]
 801ce8a:	607a      	str	r2, [r7, #4]
 801ce8c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801ce8e:	68bb      	ldr	r3, [r7, #8]
 801ce90:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801ce92:	683b      	ldr	r3, [r7, #0]
 801ce94:	2200      	movs	r2, #0
 801ce96:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801ce98:	68fb      	ldr	r3, [r7, #12]
 801ce9a:	f107 0210 	add.w	r2, r7, #16
 801ce9e:	4611      	mov	r1, r2
 801cea0:	4618      	mov	r0, r3
 801cea2:	f7ff fda9 	bl	801c9f8 <validate>
 801cea6:	4603      	mov	r3, r0
 801cea8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801ceac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d107      	bne.n	801cec4 <f_write+0x44>
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	7d5b      	ldrb	r3, [r3, #21]
 801ceb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801cebc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801cec0:	2b00      	cmp	r3, #0
 801cec2:	d002      	beq.n	801ceca <f_write+0x4a>
 801cec4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801cec8:	e16a      	b.n	801d1a0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801ceca:	68fb      	ldr	r3, [r7, #12]
 801cecc:	7d1b      	ldrb	r3, [r3, #20]
 801cece:	f003 0302 	and.w	r3, r3, #2
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d101      	bne.n	801ceda <f_write+0x5a>
 801ced6:	2307      	movs	r3, #7
 801ced8:	e162      	b.n	801d1a0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	699a      	ldr	r2, [r3, #24]
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	441a      	add	r2, r3
 801cee2:	68fb      	ldr	r3, [r7, #12]
 801cee4:	699b      	ldr	r3, [r3, #24]
 801cee6:	429a      	cmp	r2, r3
 801cee8:	f080 814c 	bcs.w	801d184 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801ceec:	68fb      	ldr	r3, [r7, #12]
 801ceee:	699b      	ldr	r3, [r3, #24]
 801cef0:	43db      	mvns	r3, r3
 801cef2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801cef4:	e146      	b.n	801d184 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801cef6:	68fb      	ldr	r3, [r7, #12]
 801cef8:	699b      	ldr	r3, [r3, #24]
 801cefa:	693a      	ldr	r2, [r7, #16]
 801cefc:	8992      	ldrh	r2, [r2, #12]
 801cefe:	fbb3 f1f2 	udiv	r1, r3, r2
 801cf02:	fb01 f202 	mul.w	r2, r1, r2
 801cf06:	1a9b      	subs	r3, r3, r2
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	f040 80f1 	bne.w	801d0f0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801cf0e:	68fb      	ldr	r3, [r7, #12]
 801cf10:	699b      	ldr	r3, [r3, #24]
 801cf12:	693a      	ldr	r2, [r7, #16]
 801cf14:	8992      	ldrh	r2, [r2, #12]
 801cf16:	fbb3 f3f2 	udiv	r3, r3, r2
 801cf1a:	693a      	ldr	r2, [r7, #16]
 801cf1c:	8952      	ldrh	r2, [r2, #10]
 801cf1e:	3a01      	subs	r2, #1
 801cf20:	4013      	ands	r3, r2
 801cf22:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801cf24:	69bb      	ldr	r3, [r7, #24]
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d143      	bne.n	801cfb2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801cf2a:	68fb      	ldr	r3, [r7, #12]
 801cf2c:	699b      	ldr	r3, [r3, #24]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d10c      	bne.n	801cf4c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	689b      	ldr	r3, [r3, #8]
 801cf36:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801cf38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d11a      	bne.n	801cf74 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801cf3e:	68fb      	ldr	r3, [r7, #12]
 801cf40:	2100      	movs	r1, #0
 801cf42:	4618      	mov	r0, r3
 801cf44:	f7fe f8c1 	bl	801b0ca <create_chain>
 801cf48:	62b8      	str	r0, [r7, #40]	@ 0x28
 801cf4a:	e013      	b.n	801cf74 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801cf4c:	68fb      	ldr	r3, [r7, #12]
 801cf4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d007      	beq.n	801cf64 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801cf54:	68fb      	ldr	r3, [r7, #12]
 801cf56:	699b      	ldr	r3, [r3, #24]
 801cf58:	4619      	mov	r1, r3
 801cf5a:	68f8      	ldr	r0, [r7, #12]
 801cf5c:	f7fe f94d 	bl	801b1fa <clmt_clust>
 801cf60:	62b8      	str	r0, [r7, #40]	@ 0x28
 801cf62:	e007      	b.n	801cf74 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801cf64:	68fa      	ldr	r2, [r7, #12]
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	69db      	ldr	r3, [r3, #28]
 801cf6a:	4619      	mov	r1, r3
 801cf6c:	4610      	mov	r0, r2
 801cf6e:	f7fe f8ac 	bl	801b0ca <create_chain>
 801cf72:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801cf74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	f000 8109 	beq.w	801d18e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801cf7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf7e:	2b01      	cmp	r3, #1
 801cf80:	d104      	bne.n	801cf8c <f_write+0x10c>
 801cf82:	68fb      	ldr	r3, [r7, #12]
 801cf84:	2202      	movs	r2, #2
 801cf86:	755a      	strb	r2, [r3, #21]
 801cf88:	2302      	movs	r3, #2
 801cf8a:	e109      	b.n	801d1a0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801cf8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf92:	d104      	bne.n	801cf9e <f_write+0x11e>
 801cf94:	68fb      	ldr	r3, [r7, #12]
 801cf96:	2201      	movs	r2, #1
 801cf98:	755a      	strb	r2, [r3, #21]
 801cf9a:	2301      	movs	r3, #1
 801cf9c:	e100      	b.n	801d1a0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801cf9e:	68fb      	ldr	r3, [r7, #12]
 801cfa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cfa2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801cfa4:	68fb      	ldr	r3, [r7, #12]
 801cfa6:	689b      	ldr	r3, [r3, #8]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d102      	bne.n	801cfb2 <f_write+0x132>
 801cfac:	68fb      	ldr	r3, [r7, #12]
 801cfae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cfb0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801cfb2:	68fb      	ldr	r3, [r7, #12]
 801cfb4:	7d1b      	ldrb	r3, [r3, #20]
 801cfb6:	b25b      	sxtb	r3, r3
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	da18      	bge.n	801cfee <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801cfbc:	693b      	ldr	r3, [r7, #16]
 801cfbe:	7858      	ldrb	r0, [r3, #1]
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cfc6:	68fb      	ldr	r3, [r7, #12]
 801cfc8:	6a1a      	ldr	r2, [r3, #32]
 801cfca:	2301      	movs	r3, #1
 801cfcc:	f7fd fa80 	bl	801a4d0 <disk_write>
 801cfd0:	4603      	mov	r3, r0
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	d004      	beq.n	801cfe0 <f_write+0x160>
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	2201      	movs	r2, #1
 801cfda:	755a      	strb	r2, [r3, #21]
 801cfdc:	2301      	movs	r3, #1
 801cfde:	e0df      	b.n	801d1a0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	7d1b      	ldrb	r3, [r3, #20]
 801cfe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801cfe8:	b2da      	uxtb	r2, r3
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801cfee:	693a      	ldr	r2, [r7, #16]
 801cff0:	68fb      	ldr	r3, [r7, #12]
 801cff2:	69db      	ldr	r3, [r3, #28]
 801cff4:	4619      	mov	r1, r3
 801cff6:	4610      	mov	r0, r2
 801cff8:	f7fd fdf6 	bl	801abe8 <clust2sect>
 801cffc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801cffe:	697b      	ldr	r3, [r7, #20]
 801d000:	2b00      	cmp	r3, #0
 801d002:	d104      	bne.n	801d00e <f_write+0x18e>
 801d004:	68fb      	ldr	r3, [r7, #12]
 801d006:	2202      	movs	r2, #2
 801d008:	755a      	strb	r2, [r3, #21]
 801d00a:	2302      	movs	r3, #2
 801d00c:	e0c8      	b.n	801d1a0 <f_write+0x320>
			sect += csect;
 801d00e:	697a      	ldr	r2, [r7, #20]
 801d010:	69bb      	ldr	r3, [r7, #24]
 801d012:	4413      	add	r3, r2
 801d014:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801d016:	693b      	ldr	r3, [r7, #16]
 801d018:	899b      	ldrh	r3, [r3, #12]
 801d01a:	461a      	mov	r2, r3
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	fbb3 f3f2 	udiv	r3, r3, r2
 801d022:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801d024:	6a3b      	ldr	r3, [r7, #32]
 801d026:	2b00      	cmp	r3, #0
 801d028:	d043      	beq.n	801d0b2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d02a:	69ba      	ldr	r2, [r7, #24]
 801d02c:	6a3b      	ldr	r3, [r7, #32]
 801d02e:	4413      	add	r3, r2
 801d030:	693a      	ldr	r2, [r7, #16]
 801d032:	8952      	ldrh	r2, [r2, #10]
 801d034:	4293      	cmp	r3, r2
 801d036:	d905      	bls.n	801d044 <f_write+0x1c4>
					cc = fs->csize - csect;
 801d038:	693b      	ldr	r3, [r7, #16]
 801d03a:	895b      	ldrh	r3, [r3, #10]
 801d03c:	461a      	mov	r2, r3
 801d03e:	69bb      	ldr	r3, [r7, #24]
 801d040:	1ad3      	subs	r3, r2, r3
 801d042:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d044:	693b      	ldr	r3, [r7, #16]
 801d046:	7858      	ldrb	r0, [r3, #1]
 801d048:	6a3b      	ldr	r3, [r7, #32]
 801d04a:	697a      	ldr	r2, [r7, #20]
 801d04c:	69f9      	ldr	r1, [r7, #28]
 801d04e:	f7fd fa3f 	bl	801a4d0 <disk_write>
 801d052:	4603      	mov	r3, r0
 801d054:	2b00      	cmp	r3, #0
 801d056:	d004      	beq.n	801d062 <f_write+0x1e2>
 801d058:	68fb      	ldr	r3, [r7, #12]
 801d05a:	2201      	movs	r2, #1
 801d05c:	755a      	strb	r2, [r3, #21]
 801d05e:	2301      	movs	r3, #1
 801d060:	e09e      	b.n	801d1a0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	6a1a      	ldr	r2, [r3, #32]
 801d066:	697b      	ldr	r3, [r7, #20]
 801d068:	1ad3      	subs	r3, r2, r3
 801d06a:	6a3a      	ldr	r2, [r7, #32]
 801d06c:	429a      	cmp	r2, r3
 801d06e:	d918      	bls.n	801d0a2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801d076:	68fb      	ldr	r3, [r7, #12]
 801d078:	6a1a      	ldr	r2, [r3, #32]
 801d07a:	697b      	ldr	r3, [r7, #20]
 801d07c:	1ad3      	subs	r3, r2, r3
 801d07e:	693a      	ldr	r2, [r7, #16]
 801d080:	8992      	ldrh	r2, [r2, #12]
 801d082:	fb02 f303 	mul.w	r3, r2, r3
 801d086:	69fa      	ldr	r2, [r7, #28]
 801d088:	18d1      	adds	r1, r2, r3
 801d08a:	693b      	ldr	r3, [r7, #16]
 801d08c:	899b      	ldrh	r3, [r3, #12]
 801d08e:	461a      	mov	r2, r3
 801d090:	f7fd fade 	bl	801a650 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	7d1b      	ldrb	r3, [r3, #20]
 801d098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d09c:	b2da      	uxtb	r2, r3
 801d09e:	68fb      	ldr	r3, [r7, #12]
 801d0a0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801d0a2:	693b      	ldr	r3, [r7, #16]
 801d0a4:	899b      	ldrh	r3, [r3, #12]
 801d0a6:	461a      	mov	r2, r3
 801d0a8:	6a3b      	ldr	r3, [r7, #32]
 801d0aa:	fb02 f303 	mul.w	r3, r2, r3
 801d0ae:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801d0b0:	e04b      	b.n	801d14a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d0b2:	68fb      	ldr	r3, [r7, #12]
 801d0b4:	6a1b      	ldr	r3, [r3, #32]
 801d0b6:	697a      	ldr	r2, [r7, #20]
 801d0b8:	429a      	cmp	r2, r3
 801d0ba:	d016      	beq.n	801d0ea <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801d0bc:	68fb      	ldr	r3, [r7, #12]
 801d0be:	699a      	ldr	r2, [r3, #24]
 801d0c0:	68fb      	ldr	r3, [r7, #12]
 801d0c2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d0c4:	429a      	cmp	r2, r3
 801d0c6:	d210      	bcs.n	801d0ea <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801d0c8:	693b      	ldr	r3, [r7, #16]
 801d0ca:	7858      	ldrb	r0, [r3, #1]
 801d0cc:	68fb      	ldr	r3, [r7, #12]
 801d0ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d0d2:	2301      	movs	r3, #1
 801d0d4:	697a      	ldr	r2, [r7, #20]
 801d0d6:	f7fd f9db 	bl	801a490 <disk_read>
 801d0da:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	d004      	beq.n	801d0ea <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801d0e0:	68fb      	ldr	r3, [r7, #12]
 801d0e2:	2201      	movs	r2, #1
 801d0e4:	755a      	strb	r2, [r3, #21]
 801d0e6:	2301      	movs	r3, #1
 801d0e8:	e05a      	b.n	801d1a0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801d0ea:	68fb      	ldr	r3, [r7, #12]
 801d0ec:	697a      	ldr	r2, [r7, #20]
 801d0ee:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801d0f0:	693b      	ldr	r3, [r7, #16]
 801d0f2:	899b      	ldrh	r3, [r3, #12]
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	68fb      	ldr	r3, [r7, #12]
 801d0f8:	699b      	ldr	r3, [r3, #24]
 801d0fa:	693a      	ldr	r2, [r7, #16]
 801d0fc:	8992      	ldrh	r2, [r2, #12]
 801d0fe:	fbb3 f1f2 	udiv	r1, r3, r2
 801d102:	fb01 f202 	mul.w	r2, r1, r2
 801d106:	1a9b      	subs	r3, r3, r2
 801d108:	1ac3      	subs	r3, r0, r3
 801d10a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801d10c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	429a      	cmp	r2, r3
 801d112:	d901      	bls.n	801d118 <f_write+0x298>
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801d118:	68fb      	ldr	r3, [r7, #12]
 801d11a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d11e:	68fb      	ldr	r3, [r7, #12]
 801d120:	699b      	ldr	r3, [r3, #24]
 801d122:	693a      	ldr	r2, [r7, #16]
 801d124:	8992      	ldrh	r2, [r2, #12]
 801d126:	fbb3 f0f2 	udiv	r0, r3, r2
 801d12a:	fb00 f202 	mul.w	r2, r0, r2
 801d12e:	1a9b      	subs	r3, r3, r2
 801d130:	440b      	add	r3, r1
 801d132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d134:	69f9      	ldr	r1, [r7, #28]
 801d136:	4618      	mov	r0, r3
 801d138:	f7fd fa8a 	bl	801a650 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801d13c:	68fb      	ldr	r3, [r7, #12]
 801d13e:	7d1b      	ldrb	r3, [r3, #20]
 801d140:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801d144:	b2da      	uxtb	r2, r3
 801d146:	68fb      	ldr	r3, [r7, #12]
 801d148:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801d14a:	69fa      	ldr	r2, [r7, #28]
 801d14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d14e:	4413      	add	r3, r2
 801d150:	61fb      	str	r3, [r7, #28]
 801d152:	68fb      	ldr	r3, [r7, #12]
 801d154:	699a      	ldr	r2, [r3, #24]
 801d156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d158:	441a      	add	r2, r3
 801d15a:	68fb      	ldr	r3, [r7, #12]
 801d15c:	619a      	str	r2, [r3, #24]
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	68da      	ldr	r2, [r3, #12]
 801d162:	68fb      	ldr	r3, [r7, #12]
 801d164:	699b      	ldr	r3, [r3, #24]
 801d166:	429a      	cmp	r2, r3
 801d168:	bf38      	it	cc
 801d16a:	461a      	movcc	r2, r3
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	60da      	str	r2, [r3, #12]
 801d170:	683b      	ldr	r3, [r7, #0]
 801d172:	681a      	ldr	r2, [r3, #0]
 801d174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d176:	441a      	add	r2, r3
 801d178:	683b      	ldr	r3, [r7, #0]
 801d17a:	601a      	str	r2, [r3, #0]
 801d17c:	687a      	ldr	r2, [r7, #4]
 801d17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d180:	1ad3      	subs	r3, r2, r3
 801d182:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	2b00      	cmp	r3, #0
 801d188:	f47f aeb5 	bne.w	801cef6 <f_write+0x76>
 801d18c:	e000      	b.n	801d190 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d18e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801d190:	68fb      	ldr	r3, [r7, #12]
 801d192:	7d1b      	ldrb	r3, [r3, #20]
 801d194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d198:	b2da      	uxtb	r2, r3
 801d19a:	68fb      	ldr	r3, [r7, #12]
 801d19c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801d19e:	2300      	movs	r3, #0
}
 801d1a0:	4618      	mov	r0, r3
 801d1a2:	3730      	adds	r7, #48	@ 0x30
 801d1a4:	46bd      	mov	sp, r7
 801d1a6:	bd80      	pop	{r7, pc}

0801d1a8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801d1a8:	b580      	push	{r7, lr}
 801d1aa:	b086      	sub	sp, #24
 801d1ac:	af00      	add	r7, sp, #0
 801d1ae:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	f107 0208 	add.w	r2, r7, #8
 801d1b6:	4611      	mov	r1, r2
 801d1b8:	4618      	mov	r0, r3
 801d1ba:	f7ff fc1d 	bl	801c9f8 <validate>
 801d1be:	4603      	mov	r3, r0
 801d1c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d1c2:	7dfb      	ldrb	r3, [r7, #23]
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d168      	bne.n	801d29a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	7d1b      	ldrb	r3, [r3, #20]
 801d1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d062      	beq.n	801d29a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	7d1b      	ldrb	r3, [r3, #20]
 801d1d8:	b25b      	sxtb	r3, r3
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	da15      	bge.n	801d20a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801d1de:	68bb      	ldr	r3, [r7, #8]
 801d1e0:	7858      	ldrb	r0, [r3, #1]
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	6a1a      	ldr	r2, [r3, #32]
 801d1ec:	2301      	movs	r3, #1
 801d1ee:	f7fd f96f 	bl	801a4d0 <disk_write>
 801d1f2:	4603      	mov	r3, r0
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d001      	beq.n	801d1fc <f_sync+0x54>
 801d1f8:	2301      	movs	r3, #1
 801d1fa:	e04f      	b.n	801d29c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	7d1b      	ldrb	r3, [r3, #20]
 801d200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d204:	b2da      	uxtb	r2, r3
 801d206:	687b      	ldr	r3, [r7, #4]
 801d208:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801d20a:	f7fd f8a1 	bl	801a350 <get_fattime>
 801d20e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801d210:	68ba      	ldr	r2, [r7, #8]
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d216:	4619      	mov	r1, r3
 801d218:	4610      	mov	r0, r2
 801d21a:	f7fd fc47 	bl	801aaac <move_window>
 801d21e:	4603      	mov	r3, r0
 801d220:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801d222:	7dfb      	ldrb	r3, [r7, #23]
 801d224:	2b00      	cmp	r3, #0
 801d226:	d138      	bne.n	801d29a <f_sync+0xf2>
					dir = fp->dir_ptr;
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d22c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801d22e:	68fb      	ldr	r3, [r7, #12]
 801d230:	330b      	adds	r3, #11
 801d232:	781a      	ldrb	r2, [r3, #0]
 801d234:	68fb      	ldr	r3, [r7, #12]
 801d236:	330b      	adds	r3, #11
 801d238:	f042 0220 	orr.w	r2, r2, #32
 801d23c:	b2d2      	uxtb	r2, r2
 801d23e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801d240:	687b      	ldr	r3, [r7, #4]
 801d242:	6818      	ldr	r0, [r3, #0]
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	689b      	ldr	r3, [r3, #8]
 801d248:	461a      	mov	r2, r3
 801d24a:	68f9      	ldr	r1, [r7, #12]
 801d24c:	f7fe f9d2 	bl	801b5f4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801d250:	68fb      	ldr	r3, [r7, #12]
 801d252:	f103 021c 	add.w	r2, r3, #28
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	68db      	ldr	r3, [r3, #12]
 801d25a:	4619      	mov	r1, r3
 801d25c:	4610      	mov	r0, r2
 801d25e:	f7fd f9cb 	bl	801a5f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801d262:	68fb      	ldr	r3, [r7, #12]
 801d264:	3316      	adds	r3, #22
 801d266:	6939      	ldr	r1, [r7, #16]
 801d268:	4618      	mov	r0, r3
 801d26a:	f7fd f9c5 	bl	801a5f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	3312      	adds	r3, #18
 801d272:	2100      	movs	r1, #0
 801d274:	4618      	mov	r0, r3
 801d276:	f7fd f9a4 	bl	801a5c2 <st_word>
					fs->wflag = 1;
 801d27a:	68bb      	ldr	r3, [r7, #8]
 801d27c:	2201      	movs	r2, #1
 801d27e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801d280:	68bb      	ldr	r3, [r7, #8]
 801d282:	4618      	mov	r0, r3
 801d284:	f7fd fc40 	bl	801ab08 <sync_fs>
 801d288:	4603      	mov	r3, r0
 801d28a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801d28c:	687b      	ldr	r3, [r7, #4]
 801d28e:	7d1b      	ldrb	r3, [r3, #20]
 801d290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801d294:	b2da      	uxtb	r2, r3
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801d29a:	7dfb      	ldrb	r3, [r7, #23]
}
 801d29c:	4618      	mov	r0, r3
 801d29e:	3718      	adds	r7, #24
 801d2a0:	46bd      	mov	sp, r7
 801d2a2:	bd80      	pop	{r7, pc}

0801d2a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801d2a4:	b580      	push	{r7, lr}
 801d2a6:	b084      	sub	sp, #16
 801d2a8:	af00      	add	r7, sp, #0
 801d2aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801d2ac:	6878      	ldr	r0, [r7, #4]
 801d2ae:	f7ff ff7b 	bl	801d1a8 <f_sync>
 801d2b2:	4603      	mov	r3, r0
 801d2b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801d2b6:	7bfb      	ldrb	r3, [r7, #15]
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d118      	bne.n	801d2ee <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	f107 0208 	add.w	r2, r7, #8
 801d2c2:	4611      	mov	r1, r2
 801d2c4:	4618      	mov	r0, r3
 801d2c6:	f7ff fb97 	bl	801c9f8 <validate>
 801d2ca:	4603      	mov	r3, r0
 801d2cc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801d2ce:	7bfb      	ldrb	r3, [r7, #15]
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d10c      	bne.n	801d2ee <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801d2d4:	687b      	ldr	r3, [r7, #4]
 801d2d6:	691b      	ldr	r3, [r3, #16]
 801d2d8:	4618      	mov	r0, r3
 801d2da:	f7fd fb43 	bl	801a964 <dec_lock>
 801d2de:	4603      	mov	r3, r0
 801d2e0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801d2e2:	7bfb      	ldrb	r3, [r7, #15]
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	d102      	bne.n	801d2ee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801d2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 801d2f0:	4618      	mov	r0, r3
 801d2f2:	3710      	adds	r7, #16
 801d2f4:	46bd      	mov	sp, r7
 801d2f6:	bd80      	pop	{r7, pc}

0801d2f8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801d2f8:	b580      	push	{r7, lr}
 801d2fa:	b0a0      	sub	sp, #128	@ 0x80
 801d2fc:	af00      	add	r7, sp, #0
 801d2fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801d300:	2300      	movs	r3, #0
 801d302:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801d304:	f107 010c 	add.w	r1, r7, #12
 801d308:	1d3b      	adds	r3, r7, #4
 801d30a:	2202      	movs	r2, #2
 801d30c:	4618      	mov	r0, r3
 801d30e:	f7ff f8ed 	bl	801c4ec <find_volume>
 801d312:	4603      	mov	r3, r0
 801d314:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801d318:	68fb      	ldr	r3, [r7, #12]
 801d31a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801d31c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d320:	2b00      	cmp	r3, #0
 801d322:	f040 808e 	bne.w	801d442 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801d326:	687a      	ldr	r2, [r7, #4]
 801d328:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d32c:	4611      	mov	r1, r2
 801d32e:	4618      	mov	r0, r3
 801d330:	f7fe ffcc 	bl	801c2cc <follow_path>
 801d334:	4603      	mov	r3, r0
 801d336:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801d33a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d108      	bne.n	801d354 <f_unlink+0x5c>
 801d342:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d346:	2102      	movs	r1, #2
 801d348:	4618      	mov	r0, r3
 801d34a:	f7fd f9ff 	bl	801a74c <chk_lock>
 801d34e:	4603      	mov	r3, r0
 801d350:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801d354:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d172      	bne.n	801d442 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801d35c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801d360:	b25b      	sxtb	r3, r3
 801d362:	2b00      	cmp	r3, #0
 801d364:	da03      	bge.n	801d36e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801d366:	2306      	movs	r3, #6
 801d368:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801d36c:	e008      	b.n	801d380 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801d36e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d372:	f003 0301 	and.w	r3, r3, #1
 801d376:	2b00      	cmp	r3, #0
 801d378:	d002      	beq.n	801d380 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801d37a:	2307      	movs	r3, #7
 801d37c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801d380:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d384:	2b00      	cmp	r3, #0
 801d386:	d134      	bne.n	801d3f2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801d38c:	4611      	mov	r1, r2
 801d38e:	4618      	mov	r0, r3
 801d390:	f7fe f911 	bl	801b5b6 <ld_clust>
 801d394:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801d396:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d39a:	f003 0310 	and.w	r3, r3, #16
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	d027      	beq.n	801d3f2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801d3a2:	68fb      	ldr	r3, [r7, #12]
 801d3a4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801d3a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d3a8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801d3aa:	f107 0310 	add.w	r3, r7, #16
 801d3ae:	2100      	movs	r1, #0
 801d3b0:	4618      	mov	r0, r3
 801d3b2:	f7fd ff5a 	bl	801b26a <dir_sdi>
 801d3b6:	4603      	mov	r3, r0
 801d3b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801d3bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	d116      	bne.n	801d3f2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801d3c4:	f107 0310 	add.w	r3, r7, #16
 801d3c8:	2100      	movs	r1, #0
 801d3ca:	4618      	mov	r0, r3
 801d3cc:	f7fe fb1d 	bl	801ba0a <dir_read>
 801d3d0:	4603      	mov	r3, r0
 801d3d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801d3d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d102      	bne.n	801d3e4 <f_unlink+0xec>
 801d3de:	2307      	movs	r3, #7
 801d3e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801d3e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d3e8:	2b04      	cmp	r3, #4
 801d3ea:	d102      	bne.n	801d3f2 <f_unlink+0xfa>
 801d3ec:	2300      	movs	r3, #0
 801d3ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801d3f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d123      	bne.n	801d442 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801d3fa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d3fe:	4618      	mov	r0, r3
 801d400:	f7fe fd62 	bl	801bec8 <dir_remove>
 801d404:	4603      	mov	r3, r0
 801d406:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801d40a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d10c      	bne.n	801d42c <f_unlink+0x134>
 801d412:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d414:	2b00      	cmp	r3, #0
 801d416:	d009      	beq.n	801d42c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801d418:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d41c:	2200      	movs	r2, #0
 801d41e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801d420:	4618      	mov	r0, r3
 801d422:	f7fd fded 	bl	801b000 <remove_chain>
 801d426:	4603      	mov	r3, r0
 801d428:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801d42c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d430:	2b00      	cmp	r3, #0
 801d432:	d106      	bne.n	801d442 <f_unlink+0x14a>
 801d434:	68fb      	ldr	r3, [r7, #12]
 801d436:	4618      	mov	r0, r3
 801d438:	f7fd fb66 	bl	801ab08 <sync_fs>
 801d43c:	4603      	mov	r3, r0
 801d43e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801d442:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801d446:	4618      	mov	r0, r3
 801d448:	3780      	adds	r7, #128	@ 0x80
 801d44a:	46bd      	mov	sp, r7
 801d44c:	bd80      	pop	{r7, pc}
	...

0801d450 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801d450:	b480      	push	{r7}
 801d452:	b087      	sub	sp, #28
 801d454:	af00      	add	r7, sp, #0
 801d456:	60f8      	str	r0, [r7, #12]
 801d458:	60b9      	str	r1, [r7, #8]
 801d45a:	4613      	mov	r3, r2
 801d45c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801d45e:	2301      	movs	r3, #1
 801d460:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801d462:	2300      	movs	r3, #0
 801d464:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801d466:	4b1f      	ldr	r3, [pc, #124]	@ (801d4e4 <FATFS_LinkDriverEx+0x94>)
 801d468:	7a5b      	ldrb	r3, [r3, #9]
 801d46a:	b2db      	uxtb	r3, r3
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	d131      	bne.n	801d4d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801d470:	4b1c      	ldr	r3, [pc, #112]	@ (801d4e4 <FATFS_LinkDriverEx+0x94>)
 801d472:	7a5b      	ldrb	r3, [r3, #9]
 801d474:	b2db      	uxtb	r3, r3
 801d476:	461a      	mov	r2, r3
 801d478:	4b1a      	ldr	r3, [pc, #104]	@ (801d4e4 <FATFS_LinkDriverEx+0x94>)
 801d47a:	2100      	movs	r1, #0
 801d47c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801d47e:	4b19      	ldr	r3, [pc, #100]	@ (801d4e4 <FATFS_LinkDriverEx+0x94>)
 801d480:	7a5b      	ldrb	r3, [r3, #9]
 801d482:	b2db      	uxtb	r3, r3
 801d484:	4a17      	ldr	r2, [pc, #92]	@ (801d4e4 <FATFS_LinkDriverEx+0x94>)
 801d486:	009b      	lsls	r3, r3, #2
 801d488:	4413      	add	r3, r2
 801d48a:	68fa      	ldr	r2, [r7, #12]
 801d48c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801d48e:	4b15      	ldr	r3, [pc, #84]	@ (801d4e4 <FATFS_LinkDriverEx+0x94>)
 801d490:	7a5b      	ldrb	r3, [r3, #9]
 801d492:	b2db      	uxtb	r3, r3
 801d494:	461a      	mov	r2, r3
 801d496:	4b13      	ldr	r3, [pc, #76]	@ (801d4e4 <FATFS_LinkDriverEx+0x94>)
 801d498:	4413      	add	r3, r2
 801d49a:	79fa      	ldrb	r2, [r7, #7]
 801d49c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801d49e:	4b11      	ldr	r3, [pc, #68]	@ (801d4e4 <FATFS_LinkDriverEx+0x94>)
 801d4a0:	7a5b      	ldrb	r3, [r3, #9]
 801d4a2:	b2db      	uxtb	r3, r3
 801d4a4:	1c5a      	adds	r2, r3, #1
 801d4a6:	b2d1      	uxtb	r1, r2
 801d4a8:	4a0e      	ldr	r2, [pc, #56]	@ (801d4e4 <FATFS_LinkDriverEx+0x94>)
 801d4aa:	7251      	strb	r1, [r2, #9]
 801d4ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801d4ae:	7dbb      	ldrb	r3, [r7, #22]
 801d4b0:	3330      	adds	r3, #48	@ 0x30
 801d4b2:	b2da      	uxtb	r2, r3
 801d4b4:	68bb      	ldr	r3, [r7, #8]
 801d4b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801d4b8:	68bb      	ldr	r3, [r7, #8]
 801d4ba:	3301      	adds	r3, #1
 801d4bc:	223a      	movs	r2, #58	@ 0x3a
 801d4be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801d4c0:	68bb      	ldr	r3, [r7, #8]
 801d4c2:	3302      	adds	r3, #2
 801d4c4:	222f      	movs	r2, #47	@ 0x2f
 801d4c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801d4c8:	68bb      	ldr	r3, [r7, #8]
 801d4ca:	3303      	adds	r3, #3
 801d4cc:	2200      	movs	r2, #0
 801d4ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801d4d0:	2300      	movs	r3, #0
 801d4d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801d4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 801d4d6:	4618      	mov	r0, r3
 801d4d8:	371c      	adds	r7, #28
 801d4da:	46bd      	mov	sp, r7
 801d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4e0:	4770      	bx	lr
 801d4e2:	bf00      	nop
 801d4e4:	24000768 	.word	0x24000768

0801d4e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801d4e8:	b580      	push	{r7, lr}
 801d4ea:	b082      	sub	sp, #8
 801d4ec:	af00      	add	r7, sp, #0
 801d4ee:	6078      	str	r0, [r7, #4]
 801d4f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801d4f2:	2200      	movs	r2, #0
 801d4f4:	6839      	ldr	r1, [r7, #0]
 801d4f6:	6878      	ldr	r0, [r7, #4]
 801d4f8:	f7ff ffaa 	bl	801d450 <FATFS_LinkDriverEx>
 801d4fc:	4603      	mov	r3, r0
}
 801d4fe:	4618      	mov	r0, r3
 801d500:	3708      	adds	r7, #8
 801d502:	46bd      	mov	sp, r7
 801d504:	bd80      	pop	{r7, pc}
	...

0801d508 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801d508:	b480      	push	{r7}
 801d50a:	b085      	sub	sp, #20
 801d50c:	af00      	add	r7, sp, #0
 801d50e:	4603      	mov	r3, r0
 801d510:	6039      	str	r1, [r7, #0]
 801d512:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801d514:	88fb      	ldrh	r3, [r7, #6]
 801d516:	2b7f      	cmp	r3, #127	@ 0x7f
 801d518:	d802      	bhi.n	801d520 <ff_convert+0x18>
		c = chr;
 801d51a:	88fb      	ldrh	r3, [r7, #6]
 801d51c:	81fb      	strh	r3, [r7, #14]
 801d51e:	e025      	b.n	801d56c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801d520:	683b      	ldr	r3, [r7, #0]
 801d522:	2b00      	cmp	r3, #0
 801d524:	d00b      	beq.n	801d53e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801d526:	88fb      	ldrh	r3, [r7, #6]
 801d528:	2bff      	cmp	r3, #255	@ 0xff
 801d52a:	d805      	bhi.n	801d538 <ff_convert+0x30>
 801d52c:	88fb      	ldrh	r3, [r7, #6]
 801d52e:	3b80      	subs	r3, #128	@ 0x80
 801d530:	4a12      	ldr	r2, [pc, #72]	@ (801d57c <ff_convert+0x74>)
 801d532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d536:	e000      	b.n	801d53a <ff_convert+0x32>
 801d538:	2300      	movs	r3, #0
 801d53a:	81fb      	strh	r3, [r7, #14]
 801d53c:	e016      	b.n	801d56c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801d53e:	2300      	movs	r3, #0
 801d540:	81fb      	strh	r3, [r7, #14]
 801d542:	e009      	b.n	801d558 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801d544:	89fb      	ldrh	r3, [r7, #14]
 801d546:	4a0d      	ldr	r2, [pc, #52]	@ (801d57c <ff_convert+0x74>)
 801d548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d54c:	88fa      	ldrh	r2, [r7, #6]
 801d54e:	429a      	cmp	r2, r3
 801d550:	d006      	beq.n	801d560 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801d552:	89fb      	ldrh	r3, [r7, #14]
 801d554:	3301      	adds	r3, #1
 801d556:	81fb      	strh	r3, [r7, #14]
 801d558:	89fb      	ldrh	r3, [r7, #14]
 801d55a:	2b7f      	cmp	r3, #127	@ 0x7f
 801d55c:	d9f2      	bls.n	801d544 <ff_convert+0x3c>
 801d55e:	e000      	b.n	801d562 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801d560:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801d562:	89fb      	ldrh	r3, [r7, #14]
 801d564:	3380      	adds	r3, #128	@ 0x80
 801d566:	b29b      	uxth	r3, r3
 801d568:	b2db      	uxtb	r3, r3
 801d56a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801d56c:	89fb      	ldrh	r3, [r7, #14]
}
 801d56e:	4618      	mov	r0, r3
 801d570:	3714      	adds	r7, #20
 801d572:	46bd      	mov	sp, r7
 801d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d578:	4770      	bx	lr
 801d57a:	bf00      	nop
 801d57c:	0801e238 	.word	0x0801e238

0801d580 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801d580:	b480      	push	{r7}
 801d582:	b087      	sub	sp, #28
 801d584:	af00      	add	r7, sp, #0
 801d586:	4603      	mov	r3, r0
 801d588:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801d58a:	88fb      	ldrh	r3, [r7, #6]
 801d58c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d590:	d201      	bcs.n	801d596 <ff_wtoupper+0x16>
 801d592:	4b3e      	ldr	r3, [pc, #248]	@ (801d68c <ff_wtoupper+0x10c>)
 801d594:	e000      	b.n	801d598 <ff_wtoupper+0x18>
 801d596:	4b3e      	ldr	r3, [pc, #248]	@ (801d690 <ff_wtoupper+0x110>)
 801d598:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801d59a:	697b      	ldr	r3, [r7, #20]
 801d59c:	1c9a      	adds	r2, r3, #2
 801d59e:	617a      	str	r2, [r7, #20]
 801d5a0:	881b      	ldrh	r3, [r3, #0]
 801d5a2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801d5a4:	8a7b      	ldrh	r3, [r7, #18]
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d068      	beq.n	801d67c <ff_wtoupper+0xfc>
 801d5aa:	88fa      	ldrh	r2, [r7, #6]
 801d5ac:	8a7b      	ldrh	r3, [r7, #18]
 801d5ae:	429a      	cmp	r2, r3
 801d5b0:	d364      	bcc.n	801d67c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801d5b2:	697b      	ldr	r3, [r7, #20]
 801d5b4:	1c9a      	adds	r2, r3, #2
 801d5b6:	617a      	str	r2, [r7, #20]
 801d5b8:	881b      	ldrh	r3, [r3, #0]
 801d5ba:	823b      	strh	r3, [r7, #16]
 801d5bc:	8a3b      	ldrh	r3, [r7, #16]
 801d5be:	0a1b      	lsrs	r3, r3, #8
 801d5c0:	81fb      	strh	r3, [r7, #14]
 801d5c2:	8a3b      	ldrh	r3, [r7, #16]
 801d5c4:	b2db      	uxtb	r3, r3
 801d5c6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801d5c8:	88fa      	ldrh	r2, [r7, #6]
 801d5ca:	8a79      	ldrh	r1, [r7, #18]
 801d5cc:	8a3b      	ldrh	r3, [r7, #16]
 801d5ce:	440b      	add	r3, r1
 801d5d0:	429a      	cmp	r2, r3
 801d5d2:	da49      	bge.n	801d668 <ff_wtoupper+0xe8>
			switch (cmd) {
 801d5d4:	89fb      	ldrh	r3, [r7, #14]
 801d5d6:	2b08      	cmp	r3, #8
 801d5d8:	d84f      	bhi.n	801d67a <ff_wtoupper+0xfa>
 801d5da:	a201      	add	r2, pc, #4	@ (adr r2, 801d5e0 <ff_wtoupper+0x60>)
 801d5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d5e0:	0801d605 	.word	0x0801d605
 801d5e4:	0801d617 	.word	0x0801d617
 801d5e8:	0801d62d 	.word	0x0801d62d
 801d5ec:	0801d635 	.word	0x0801d635
 801d5f0:	0801d63d 	.word	0x0801d63d
 801d5f4:	0801d645 	.word	0x0801d645
 801d5f8:	0801d64d 	.word	0x0801d64d
 801d5fc:	0801d655 	.word	0x0801d655
 801d600:	0801d65d 	.word	0x0801d65d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801d604:	88fa      	ldrh	r2, [r7, #6]
 801d606:	8a7b      	ldrh	r3, [r7, #18]
 801d608:	1ad3      	subs	r3, r2, r3
 801d60a:	005b      	lsls	r3, r3, #1
 801d60c:	697a      	ldr	r2, [r7, #20]
 801d60e:	4413      	add	r3, r2
 801d610:	881b      	ldrh	r3, [r3, #0]
 801d612:	80fb      	strh	r3, [r7, #6]
 801d614:	e027      	b.n	801d666 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801d616:	88fa      	ldrh	r2, [r7, #6]
 801d618:	8a7b      	ldrh	r3, [r7, #18]
 801d61a:	1ad3      	subs	r3, r2, r3
 801d61c:	b29b      	uxth	r3, r3
 801d61e:	f003 0301 	and.w	r3, r3, #1
 801d622:	b29b      	uxth	r3, r3
 801d624:	88fa      	ldrh	r2, [r7, #6]
 801d626:	1ad3      	subs	r3, r2, r3
 801d628:	80fb      	strh	r3, [r7, #6]
 801d62a:	e01c      	b.n	801d666 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801d62c:	88fb      	ldrh	r3, [r7, #6]
 801d62e:	3b10      	subs	r3, #16
 801d630:	80fb      	strh	r3, [r7, #6]
 801d632:	e018      	b.n	801d666 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801d634:	88fb      	ldrh	r3, [r7, #6]
 801d636:	3b20      	subs	r3, #32
 801d638:	80fb      	strh	r3, [r7, #6]
 801d63a:	e014      	b.n	801d666 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801d63c:	88fb      	ldrh	r3, [r7, #6]
 801d63e:	3b30      	subs	r3, #48	@ 0x30
 801d640:	80fb      	strh	r3, [r7, #6]
 801d642:	e010      	b.n	801d666 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801d644:	88fb      	ldrh	r3, [r7, #6]
 801d646:	3b1a      	subs	r3, #26
 801d648:	80fb      	strh	r3, [r7, #6]
 801d64a:	e00c      	b.n	801d666 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801d64c:	88fb      	ldrh	r3, [r7, #6]
 801d64e:	3308      	adds	r3, #8
 801d650:	80fb      	strh	r3, [r7, #6]
 801d652:	e008      	b.n	801d666 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801d654:	88fb      	ldrh	r3, [r7, #6]
 801d656:	3b50      	subs	r3, #80	@ 0x50
 801d658:	80fb      	strh	r3, [r7, #6]
 801d65a:	e004      	b.n	801d666 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801d65c:	88fb      	ldrh	r3, [r7, #6]
 801d65e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801d662:	80fb      	strh	r3, [r7, #6]
 801d664:	bf00      	nop
			}
			break;
 801d666:	e008      	b.n	801d67a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801d668:	89fb      	ldrh	r3, [r7, #14]
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	d195      	bne.n	801d59a <ff_wtoupper+0x1a>
 801d66e:	8a3b      	ldrh	r3, [r7, #16]
 801d670:	005b      	lsls	r3, r3, #1
 801d672:	697a      	ldr	r2, [r7, #20]
 801d674:	4413      	add	r3, r2
 801d676:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801d678:	e78f      	b.n	801d59a <ff_wtoupper+0x1a>
			break;
 801d67a:	bf00      	nop
	}

	return chr;
 801d67c:	88fb      	ldrh	r3, [r7, #6]
}
 801d67e:	4618      	mov	r0, r3
 801d680:	371c      	adds	r7, #28
 801d682:	46bd      	mov	sp, r7
 801d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d688:	4770      	bx	lr
 801d68a:	bf00      	nop
 801d68c:	0801e338 	.word	0x0801e338
 801d690:	0801e52c 	.word	0x0801e52c

0801d694 <memset>:
 801d694:	4402      	add	r2, r0
 801d696:	4603      	mov	r3, r0
 801d698:	4293      	cmp	r3, r2
 801d69a:	d100      	bne.n	801d69e <memset+0xa>
 801d69c:	4770      	bx	lr
 801d69e:	f803 1b01 	strb.w	r1, [r3], #1
 801d6a2:	e7f9      	b.n	801d698 <memset+0x4>

0801d6a4 <__errno>:
 801d6a4:	4b01      	ldr	r3, [pc, #4]	@ (801d6ac <__errno+0x8>)
 801d6a6:	6818      	ldr	r0, [r3, #0]
 801d6a8:	4770      	bx	lr
 801d6aa:	bf00      	nop
 801d6ac:	24000028 	.word	0x24000028

0801d6b0 <__libc_init_array>:
 801d6b0:	b570      	push	{r4, r5, r6, lr}
 801d6b2:	4d0d      	ldr	r5, [pc, #52]	@ (801d6e8 <__libc_init_array+0x38>)
 801d6b4:	4c0d      	ldr	r4, [pc, #52]	@ (801d6ec <__libc_init_array+0x3c>)
 801d6b6:	1b64      	subs	r4, r4, r5
 801d6b8:	10a4      	asrs	r4, r4, #2
 801d6ba:	2600      	movs	r6, #0
 801d6bc:	42a6      	cmp	r6, r4
 801d6be:	d109      	bne.n	801d6d4 <__libc_init_array+0x24>
 801d6c0:	4d0b      	ldr	r5, [pc, #44]	@ (801d6f0 <__libc_init_array+0x40>)
 801d6c2:	4c0c      	ldr	r4, [pc, #48]	@ (801d6f4 <__libc_init_array+0x44>)
 801d6c4:	f000 fd0c 	bl	801e0e0 <_init>
 801d6c8:	1b64      	subs	r4, r4, r5
 801d6ca:	10a4      	asrs	r4, r4, #2
 801d6cc:	2600      	movs	r6, #0
 801d6ce:	42a6      	cmp	r6, r4
 801d6d0:	d105      	bne.n	801d6de <__libc_init_array+0x2e>
 801d6d2:	bd70      	pop	{r4, r5, r6, pc}
 801d6d4:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6d8:	4798      	blx	r3
 801d6da:	3601      	adds	r6, #1
 801d6dc:	e7ee      	b.n	801d6bc <__libc_init_array+0xc>
 801d6de:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6e2:	4798      	blx	r3
 801d6e4:	3601      	adds	r6, #1
 801d6e6:	e7f2      	b.n	801d6ce <__libc_init_array+0x1e>
 801d6e8:	0801ff18 	.word	0x0801ff18
 801d6ec:	0801ff18 	.word	0x0801ff18
 801d6f0:	0801ff18 	.word	0x0801ff18
 801d6f4:	0801ff1c 	.word	0x0801ff1c

0801d6f8 <memcpy>:
 801d6f8:	440a      	add	r2, r1
 801d6fa:	4291      	cmp	r1, r2
 801d6fc:	f100 33ff 	add.w	r3, r0, #4294967295
 801d700:	d100      	bne.n	801d704 <memcpy+0xc>
 801d702:	4770      	bx	lr
 801d704:	b510      	push	{r4, lr}
 801d706:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d70a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d70e:	4291      	cmp	r1, r2
 801d710:	d1f9      	bne.n	801d706 <memcpy+0xe>
 801d712:	bd10      	pop	{r4, pc}

0801d714 <atan2>:
 801d714:	f000 bbac 	b.w	801de70 <__ieee754_atan2>

0801d718 <sqrt>:
 801d718:	b508      	push	{r3, lr}
 801d71a:	ed2d 8b04 	vpush	{d8-d9}
 801d71e:	eeb0 8b40 	vmov.f64	d8, d0
 801d722:	f000 fba1 	bl	801de68 <__ieee754_sqrt>
 801d726:	eeb4 8b48 	vcmp.f64	d8, d8
 801d72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d72e:	d60c      	bvs.n	801d74a <sqrt+0x32>
 801d730:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801d750 <sqrt+0x38>
 801d734:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801d738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d73c:	d505      	bpl.n	801d74a <sqrt+0x32>
 801d73e:	f7ff ffb1 	bl	801d6a4 <__errno>
 801d742:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801d746:	2321      	movs	r3, #33	@ 0x21
 801d748:	6003      	str	r3, [r0, #0]
 801d74a:	ecbd 8b04 	vpop	{d8-d9}
 801d74e:	bd08      	pop	{r3, pc}
	...

0801d758 <atan>:
 801d758:	b538      	push	{r3, r4, r5, lr}
 801d75a:	eeb0 7b40 	vmov.f64	d7, d0
 801d75e:	ee17 5a90 	vmov	r5, s15
 801d762:	4b73      	ldr	r3, [pc, #460]	@ (801d930 <atan+0x1d8>)
 801d764:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801d768:	429c      	cmp	r4, r3
 801d76a:	d913      	bls.n	801d794 <atan+0x3c>
 801d76c:	4b71      	ldr	r3, [pc, #452]	@ (801d934 <atan+0x1dc>)
 801d76e:	429c      	cmp	r4, r3
 801d770:	d803      	bhi.n	801d77a <atan+0x22>
 801d772:	d107      	bne.n	801d784 <atan+0x2c>
 801d774:	ee10 3a10 	vmov	r3, s0
 801d778:	b123      	cbz	r3, 801d784 <atan+0x2c>
 801d77a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801d77e:	eeb0 0b47 	vmov.f64	d0, d7
 801d782:	bd38      	pop	{r3, r4, r5, pc}
 801d784:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801d8c0 <atan+0x168>
 801d788:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801d8c8 <atan+0x170>
 801d78c:	2d00      	cmp	r5, #0
 801d78e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801d792:	e7f4      	b.n	801d77e <atan+0x26>
 801d794:	4b68      	ldr	r3, [pc, #416]	@ (801d938 <atan+0x1e0>)
 801d796:	429c      	cmp	r4, r3
 801d798:	d811      	bhi.n	801d7be <atan+0x66>
 801d79a:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801d79e:	429c      	cmp	r4, r3
 801d7a0:	d80a      	bhi.n	801d7b8 <atan+0x60>
 801d7a2:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801d7a6:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801d8d0 <atan+0x178>
 801d7aa:	ee30 6b06 	vadd.f64	d6, d0, d6
 801d7ae:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801d7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7b6:	dce2      	bgt.n	801d77e <atan+0x26>
 801d7b8:	f04f 33ff 	mov.w	r3, #4294967295
 801d7bc:	e013      	b.n	801d7e6 <atan+0x8e>
 801d7be:	f000 f8c5 	bl	801d94c <fabs>
 801d7c2:	4b5e      	ldr	r3, [pc, #376]	@ (801d93c <atan+0x1e4>)
 801d7c4:	429c      	cmp	r4, r3
 801d7c6:	d84f      	bhi.n	801d868 <atan+0x110>
 801d7c8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801d7cc:	429c      	cmp	r4, r3
 801d7ce:	d841      	bhi.n	801d854 <atan+0xfc>
 801d7d0:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801d7d4:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801d7d8:	2300      	movs	r3, #0
 801d7da:	eea0 5b07 	vfma.f64	d5, d0, d7
 801d7de:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d7e2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801d7e6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801d8d8 <atan+0x180>
 801d7ea:	ee27 4b07 	vmul.f64	d4, d7, d7
 801d7ee:	ee24 5b04 	vmul.f64	d5, d4, d4
 801d7f2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801d8e0 <atan+0x188>
 801d7f6:	eea5 3b06 	vfma.f64	d3, d5, d6
 801d7fa:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801d8e8 <atan+0x190>
 801d7fe:	eea3 6b05 	vfma.f64	d6, d3, d5
 801d802:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801d8f0 <atan+0x198>
 801d806:	eea6 3b05 	vfma.f64	d3, d6, d5
 801d80a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801d8f8 <atan+0x1a0>
 801d80e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801d812:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801d900 <atan+0x1a8>
 801d816:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801d908 <atan+0x1b0>
 801d81a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801d81e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801d910 <atan+0x1b8>
 801d822:	eea5 2b06 	vfma.f64	d2, d5, d6
 801d826:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801d918 <atan+0x1c0>
 801d82a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801d82e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801d920 <atan+0x1c8>
 801d832:	eea6 2b05 	vfma.f64	d2, d6, d5
 801d836:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801d928 <atan+0x1d0>
 801d83a:	1c5a      	adds	r2, r3, #1
 801d83c:	eea2 6b05 	vfma.f64	d6, d2, d5
 801d840:	ee26 6b05 	vmul.f64	d6, d6, d5
 801d844:	eea3 6b04 	vfma.f64	d6, d3, d4
 801d848:	ee27 6b06 	vmul.f64	d6, d7, d6
 801d84c:	d121      	bne.n	801d892 <atan+0x13a>
 801d84e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d852:	e794      	b.n	801d77e <atan+0x26>
 801d854:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801d858:	2301      	movs	r3, #1
 801d85a:	ee30 5b47 	vsub.f64	d5, d0, d7
 801d85e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d862:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801d866:	e7be      	b.n	801d7e6 <atan+0x8e>
 801d868:	4b35      	ldr	r3, [pc, #212]	@ (801d940 <atan+0x1e8>)
 801d86a:	429c      	cmp	r4, r3
 801d86c:	d20b      	bcs.n	801d886 <atan+0x12e>
 801d86e:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801d872:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801d876:	ee30 5b47 	vsub.f64	d5, d0, d7
 801d87a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801d87e:	2302      	movs	r3, #2
 801d880:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801d884:	e7af      	b.n	801d7e6 <atan+0x8e>
 801d886:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801d88a:	2303      	movs	r3, #3
 801d88c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801d890:	e7a9      	b.n	801d7e6 <atan+0x8e>
 801d892:	4a2c      	ldr	r2, [pc, #176]	@ (801d944 <atan+0x1ec>)
 801d894:	492c      	ldr	r1, [pc, #176]	@ (801d948 <atan+0x1f0>)
 801d896:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801d89a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801d89e:	ed93 5b00 	vldr	d5, [r3]
 801d8a2:	ee36 6b45 	vsub.f64	d6, d6, d5
 801d8a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 801d8aa:	ed92 7b00 	vldr	d7, [r2]
 801d8ae:	2d00      	cmp	r5, #0
 801d8b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d8b4:	bfb8      	it	lt
 801d8b6:	eeb1 7b47 	vneglt.f64	d7, d7
 801d8ba:	e760      	b.n	801d77e <atan+0x26>
 801d8bc:	f3af 8000 	nop.w
 801d8c0:	54442d18 	.word	0x54442d18
 801d8c4:	bff921fb 	.word	0xbff921fb
 801d8c8:	54442d18 	.word	0x54442d18
 801d8cc:	3ff921fb 	.word	0x3ff921fb
 801d8d0:	8800759c 	.word	0x8800759c
 801d8d4:	7e37e43c 	.word	0x7e37e43c
 801d8d8:	e322da11 	.word	0xe322da11
 801d8dc:	3f90ad3a 	.word	0x3f90ad3a
 801d8e0:	24760deb 	.word	0x24760deb
 801d8e4:	3fa97b4b 	.word	0x3fa97b4b
 801d8e8:	a0d03d51 	.word	0xa0d03d51
 801d8ec:	3fb10d66 	.word	0x3fb10d66
 801d8f0:	c54c206e 	.word	0xc54c206e
 801d8f4:	3fb745cd 	.word	0x3fb745cd
 801d8f8:	920083ff 	.word	0x920083ff
 801d8fc:	3fc24924 	.word	0x3fc24924
 801d900:	5555550d 	.word	0x5555550d
 801d904:	3fd55555 	.word	0x3fd55555
 801d908:	52defd9a 	.word	0x52defd9a
 801d90c:	bfadde2d 	.word	0xbfadde2d
 801d910:	2c6a6c2f 	.word	0x2c6a6c2f
 801d914:	bfa2b444 	.word	0xbfa2b444
 801d918:	af749a6d 	.word	0xaf749a6d
 801d91c:	bfb3b0f2 	.word	0xbfb3b0f2
 801d920:	fe231671 	.word	0xfe231671
 801d924:	bfbc71c6 	.word	0xbfbc71c6
 801d928:	9998ebc4 	.word	0x9998ebc4
 801d92c:	bfc99999 	.word	0xbfc99999
 801d930:	440fffff 	.word	0x440fffff
 801d934:	7ff00000 	.word	0x7ff00000
 801d938:	3fdbffff 	.word	0x3fdbffff
 801d93c:	3ff2ffff 	.word	0x3ff2ffff
 801d940:	40038000 	.word	0x40038000
 801d944:	0801e608 	.word	0x0801e608
 801d948:	0801e5e8 	.word	0x0801e5e8

0801d94c <fabs>:
 801d94c:	ec51 0b10 	vmov	r0, r1, d0
 801d950:	4602      	mov	r2, r0
 801d952:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d956:	ec43 2b10 	vmov	d0, r2, r3
 801d95a:	4770      	bx	lr

0801d95c <checkint>:
 801d95c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d960:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801d964:	429a      	cmp	r2, r3
 801d966:	b570      	push	{r4, r5, r6, lr}
 801d968:	dd2a      	ble.n	801d9c0 <checkint+0x64>
 801d96a:	f240 4333 	movw	r3, #1075	@ 0x433
 801d96e:	429a      	cmp	r2, r3
 801d970:	dc24      	bgt.n	801d9bc <checkint+0x60>
 801d972:	1a9b      	subs	r3, r3, r2
 801d974:	f1a3 0620 	sub.w	r6, r3, #32
 801d978:	f04f 32ff 	mov.w	r2, #4294967295
 801d97c:	fa02 f403 	lsl.w	r4, r2, r3
 801d980:	fa02 f606 	lsl.w	r6, r2, r6
 801d984:	f1c3 0520 	rsb	r5, r3, #32
 801d988:	fa22 f505 	lsr.w	r5, r2, r5
 801d98c:	4334      	orrs	r4, r6
 801d98e:	432c      	orrs	r4, r5
 801d990:	409a      	lsls	r2, r3
 801d992:	ea20 0202 	bic.w	r2, r0, r2
 801d996:	ea21 0404 	bic.w	r4, r1, r4
 801d99a:	4322      	orrs	r2, r4
 801d99c:	f1a3 0420 	sub.w	r4, r3, #32
 801d9a0:	f1c3 0220 	rsb	r2, r3, #32
 801d9a4:	d10c      	bne.n	801d9c0 <checkint+0x64>
 801d9a6:	40d8      	lsrs	r0, r3
 801d9a8:	fa01 f302 	lsl.w	r3, r1, r2
 801d9ac:	4318      	orrs	r0, r3
 801d9ae:	40e1      	lsrs	r1, r4
 801d9b0:	4308      	orrs	r0, r1
 801d9b2:	f000 0001 	and.w	r0, r0, #1
 801d9b6:	f1d0 0002 	rsbs	r0, r0, #2
 801d9ba:	bd70      	pop	{r4, r5, r6, pc}
 801d9bc:	2002      	movs	r0, #2
 801d9be:	e7fc      	b.n	801d9ba <checkint+0x5e>
 801d9c0:	2000      	movs	r0, #0
 801d9c2:	e7fa      	b.n	801d9ba <checkint+0x5e>
 801d9c4:	0000      	movs	r0, r0
	...

0801d9c8 <pow>:
 801d9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9cc:	ee10 4a90 	vmov	r4, s1
 801d9d0:	ed2d 8b0a 	vpush	{d8-d12}
 801d9d4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801d9d8:	ee11 aa90 	vmov	sl, s3
 801d9dc:	f108 32ff 	add.w	r2, r8, #4294967295
 801d9e0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801d9e4:	429a      	cmp	r2, r3
 801d9e6:	ee10 5a10 	vmov	r5, s0
 801d9ea:	ee11 0a10 	vmov	r0, s2
 801d9ee:	b087      	sub	sp, #28
 801d9f0:	46c4      	mov	ip, r8
 801d9f2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801d9f6:	d806      	bhi.n	801da06 <pow+0x3e>
 801d9f8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801d9fc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801da00:	2b7f      	cmp	r3, #127	@ 0x7f
 801da02:	f240 8157 	bls.w	801dcb4 <pow+0x2ec>
 801da06:	1802      	adds	r2, r0, r0
 801da08:	eb4a 010a 	adc.w	r1, sl, sl
 801da0c:	f06f 0b01 	mvn.w	fp, #1
 801da10:	1e57      	subs	r7, r2, #1
 801da12:	f141 33ff 	adc.w	r3, r1, #4294967295
 801da16:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801da1a:	45bb      	cmp	fp, r7
 801da1c:	eb7e 0303 	sbcs.w	r3, lr, r3
 801da20:	d242      	bcs.n	801daa8 <pow+0xe0>
 801da22:	ea52 0301 	orrs.w	r3, r2, r1
 801da26:	f04f 0300 	mov.w	r3, #0
 801da2a:	d10c      	bne.n	801da46 <pow+0x7e>
 801da2c:	196d      	adds	r5, r5, r5
 801da2e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801da32:	4164      	adcs	r4, r4
 801da34:	42ab      	cmp	r3, r5
 801da36:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801da3a:	41a3      	sbcs	r3, r4
 801da3c:	f0c0 808f 	bcc.w	801db5e <pow+0x196>
 801da40:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801da44:	e02b      	b.n	801da9e <pow+0xd6>
 801da46:	4ed4      	ldr	r6, [pc, #848]	@ (801dd98 <pow+0x3d0>)
 801da48:	42b4      	cmp	r4, r6
 801da4a:	bf08      	it	eq
 801da4c:	429d      	cmpeq	r5, r3
 801da4e:	d109      	bne.n	801da64 <pow+0x9c>
 801da50:	1800      	adds	r0, r0, r0
 801da52:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801da56:	eb4a 0a0a 	adc.w	sl, sl, sl
 801da5a:	4283      	cmp	r3, r0
 801da5c:	4bcf      	ldr	r3, [pc, #828]	@ (801dd9c <pow+0x3d4>)
 801da5e:	eb73 030a 	sbcs.w	r3, r3, sl
 801da62:	e7eb      	b.n	801da3c <pow+0x74>
 801da64:	196d      	adds	r5, r5, r5
 801da66:	48ce      	ldr	r0, [pc, #824]	@ (801dda0 <pow+0x3d8>)
 801da68:	4164      	adcs	r4, r4
 801da6a:	42ab      	cmp	r3, r5
 801da6c:	eb70 0604 	sbcs.w	r6, r0, r4
 801da70:	d375      	bcc.n	801db5e <pow+0x196>
 801da72:	4281      	cmp	r1, r0
 801da74:	bf08      	it	eq
 801da76:	429a      	cmpeq	r2, r3
 801da78:	d171      	bne.n	801db5e <pow+0x196>
 801da7a:	4aca      	ldr	r2, [pc, #808]	@ (801dda4 <pow+0x3dc>)
 801da7c:	4294      	cmp	r4, r2
 801da7e:	bf08      	it	eq
 801da80:	429d      	cmpeq	r5, r3
 801da82:	d0dd      	beq.n	801da40 <pow+0x78>
 801da84:	4294      	cmp	r4, r2
 801da86:	ea6f 0a0a 	mvn.w	sl, sl
 801da8a:	bf34      	ite	cc
 801da8c:	2400      	movcc	r4, #0
 801da8e:	2401      	movcs	r4, #1
 801da90:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801da94:	4554      	cmp	r4, sl
 801da96:	f040 81dc 	bne.w	801de52 <pow+0x48a>
 801da9a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801da9e:	b007      	add	sp, #28
 801daa0:	ecbd 8b0a 	vpop	{d8-d12}
 801daa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daa8:	196f      	adds	r7, r5, r5
 801daaa:	eb44 0904 	adc.w	r9, r4, r4
 801daae:	1e7a      	subs	r2, r7, #1
 801dab0:	f169 0300 	sbc.w	r3, r9, #0
 801dab4:	4593      	cmp	fp, r2
 801dab6:	eb7e 0303 	sbcs.w	r3, lr, r3
 801daba:	d225      	bcs.n	801db08 <pow+0x140>
 801dabc:	ee20 0b00 	vmul.f64	d0, d0, d0
 801dac0:	2c00      	cmp	r4, #0
 801dac2:	da13      	bge.n	801daec <pow+0x124>
 801dac4:	4651      	mov	r1, sl
 801dac6:	f7ff ff49 	bl	801d95c <checkint>
 801daca:	2801      	cmp	r0, #1
 801dacc:	d10e      	bne.n	801daec <pow+0x124>
 801dace:	eeb1 0b40 	vneg.f64	d0, d0
 801dad2:	ea57 0909 	orrs.w	r9, r7, r9
 801dad6:	d10b      	bne.n	801daf0 <pow+0x128>
 801dad8:	f1ba 0f00 	cmp.w	sl, #0
 801dadc:	dadf      	bge.n	801da9e <pow+0xd6>
 801dade:	b007      	add	sp, #28
 801dae0:	ecbd 8b0a 	vpop	{d8-d12}
 801dae4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dae8:	f000 bab6 	b.w	801e058 <__math_divzero>
 801daec:	2000      	movs	r0, #0
 801daee:	e7f0      	b.n	801dad2 <pow+0x10a>
 801daf0:	f1ba 0f00 	cmp.w	sl, #0
 801daf4:	dad3      	bge.n	801da9e <pow+0xd6>
 801daf6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801dafa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801dafe:	ed8d 7b00 	vstr	d7, [sp]
 801db02:	ed9d 0b00 	vldr	d0, [sp]
 801db06:	e7ca      	b.n	801da9e <pow+0xd6>
 801db08:	2c00      	cmp	r4, #0
 801db0a:	da2b      	bge.n	801db64 <pow+0x19c>
 801db0c:	4651      	mov	r1, sl
 801db0e:	f7ff ff25 	bl	801d95c <checkint>
 801db12:	b930      	cbnz	r0, 801db22 <pow+0x15a>
 801db14:	b007      	add	sp, #28
 801db16:	ecbd 8b0a 	vpop	{d8-d12}
 801db1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db1e:	f000 bab3 	b.w	801e088 <__math_invalid>
 801db22:	1e41      	subs	r1, r0, #1
 801db24:	4248      	negs	r0, r1
 801db26:	4148      	adcs	r0, r1
 801db28:	0480      	lsls	r0, r0, #18
 801db2a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801db2e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801db32:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801db36:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801db3a:	2b7f      	cmp	r3, #127	@ 0x7f
 801db3c:	d92d      	bls.n	801db9a <pow+0x1d2>
 801db3e:	4b96      	ldr	r3, [pc, #600]	@ (801dd98 <pow+0x3d0>)
 801db40:	2000      	movs	r0, #0
 801db42:	429c      	cmp	r4, r3
 801db44:	bf08      	it	eq
 801db46:	4285      	cmpeq	r5, r0
 801db48:	f43f af7a 	beq.w	801da40 <pow+0x78>
 801db4c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801db50:	428a      	cmp	r2, r1
 801db52:	d80c      	bhi.n	801db6e <pow+0x1a6>
 801db54:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801db58:	42a8      	cmp	r0, r5
 801db5a:	41a3      	sbcs	r3, r4
 801db5c:	d204      	bcs.n	801db68 <pow+0x1a0>
 801db5e:	ee31 0b00 	vadd.f64	d0, d1, d0
 801db62:	e79c      	b.n	801da9e <pow+0xd6>
 801db64:	2000      	movs	r0, #0
 801db66:	e7e4      	b.n	801db32 <pow+0x16a>
 801db68:	ee30 0b41 	vsub.f64	d0, d0, d1
 801db6c:	e797      	b.n	801da9e <pow+0xd6>
 801db6e:	2d01      	cmp	r5, #1
 801db70:	eb74 0303 	sbcs.w	r3, r4, r3
 801db74:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801db78:	bf34      	ite	cc
 801db7a:	2301      	movcc	r3, #1
 801db7c:	2300      	movcs	r3, #0
 801db7e:	4296      	cmp	r6, r2
 801db80:	bf8c      	ite	hi
 801db82:	2600      	movhi	r6, #0
 801db84:	2601      	movls	r6, #1
 801db86:	42b3      	cmp	r3, r6
 801db88:	f000 809c 	beq.w	801dcc4 <pow+0x2fc>
 801db8c:	b007      	add	sp, #28
 801db8e:	ecbd 8b0a 	vpop	{d8-d12}
 801db92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db96:	f000 ba57 	b.w	801e048 <__math_oflow>
 801db9a:	f1bc 0f00 	cmp.w	ip, #0
 801db9e:	d10a      	bne.n	801dbb6 <pow+0x1ee>
 801dba0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801dd88 <pow+0x3c0>
 801dba4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801dba8:	ec53 2b17 	vmov	r2, r3, d7
 801dbac:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801dbb0:	4615      	mov	r5, r2
 801dbb2:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801dbb6:	4a7c      	ldr	r2, [pc, #496]	@ (801dda8 <pow+0x3e0>)
 801dbb8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801dbbc:	4422      	add	r2, r4
 801dbbe:	1513      	asrs	r3, r2, #20
 801dbc0:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801dbc4:	ee03 3a10 	vmov	s6, r3
 801dbc8:	0d12      	lsrs	r2, r2, #20
 801dbca:	4b78      	ldr	r3, [pc, #480]	@ (801ddac <pow+0x3e4>)
 801dbcc:	0512      	lsls	r2, r2, #20
 801dbce:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801dbd2:	1aa7      	subs	r7, r4, r2
 801dbd4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801dbd8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801dbdc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801dbe0:	1e2e      	subs	r6, r5, #0
 801dbe2:	ec47 6b14 	vmov	d4, r6, r7
 801dbe6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801dbea:	eea4 6b05 	vfma.f64	d6, d4, d5
 801dbee:	ed93 5b00 	vldr	d5, [r3]
 801dbf2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801dbf6:	eea3 2b05 	vfma.f64	d2, d3, d5
 801dbfa:	ed93 5b02 	vldr	d5, [r3, #8]
 801dbfe:	ee36 4b02 	vadd.f64	d4, d6, d2
 801dc02:	ee32 2b44 	vsub.f64	d2, d2, d4
 801dc06:	eea3 7b05 	vfma.f64	d7, d3, d5
 801dc0a:	ed93 5b04 	vldr	d5, [r3, #16]
 801dc0e:	ee32 2b06 	vadd.f64	d2, d2, d6
 801dc12:	ee37 7b02 	vadd.f64	d7, d7, d2
 801dc16:	ee26 5b05 	vmul.f64	d5, d6, d5
 801dc1a:	ee26 0b05 	vmul.f64	d0, d6, d5
 801dc1e:	ee34 8b00 	vadd.f64	d8, d4, d0
 801dc22:	eeb0 9b40 	vmov.f64	d9, d0
 801dc26:	ee34 4b48 	vsub.f64	d4, d4, d8
 801dc2a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801dc2e:	ee34 ab00 	vadd.f64	d10, d4, d0
 801dc32:	ed93 5b06 	vldr	d5, [r3, #24]
 801dc36:	ee26 bb00 	vmul.f64	d11, d6, d0
 801dc3a:	ee37 7b09 	vadd.f64	d7, d7, d9
 801dc3e:	ed93 4b08 	vldr	d4, [r3, #32]
 801dc42:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801dc46:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801dc4a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801dc4e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801dc52:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801dc56:	eea6 4b03 	vfma.f64	d4, d6, d3
 801dc5a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801dc5e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801dc62:	eea0 4b03 	vfma.f64	d4, d0, d3
 801dc66:	eea0 5b04 	vfma.f64	d5, d0, d4
 801dc6a:	eeab 7b05 	vfma.f64	d7, d11, d5
 801dc6e:	ee38 4b07 	vadd.f64	d4, d8, d7
 801dc72:	ee21 6b04 	vmul.f64	d6, d1, d4
 801dc76:	ee16 3a90 	vmov	r3, s13
 801dc7a:	eeb0 5b46 	vmov.f64	d5, d6
 801dc7e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801dc82:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801dc86:	18b2      	adds	r2, r6, r2
 801dc88:	2a3e      	cmp	r2, #62	@ 0x3e
 801dc8a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801dc8e:	ee38 8b44 	vsub.f64	d8, d8, d4
 801dc92:	ee38 8b07 	vadd.f64	d8, d8, d7
 801dc96:	eea1 5b08 	vfma.f64	d5, d1, d8
 801dc9a:	d91b      	bls.n	801dcd4 <pow+0x30c>
 801dc9c:	2a00      	cmp	r2, #0
 801dc9e:	da0b      	bge.n	801dcb8 <pow+0x2f0>
 801dca0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801dca4:	ee36 0b00 	vadd.f64	d0, d6, d0
 801dca8:	2800      	cmp	r0, #0
 801dcaa:	f43f aef8 	beq.w	801da9e <pow+0xd6>
 801dcae:	eeb1 0b40 	vneg.f64	d0, d0
 801dcb2:	e6f4      	b.n	801da9e <pow+0xd6>
 801dcb4:	2000      	movs	r0, #0
 801dcb6:	e77e      	b.n	801dbb6 <pow+0x1ee>
 801dcb8:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801dcbc:	d909      	bls.n	801dcd2 <pow+0x30a>
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	f6bf af64 	bge.w	801db8c <pow+0x1c4>
 801dcc4:	b007      	add	sp, #28
 801dcc6:	ecbd 8b0a 	vpop	{d8-d12}
 801dcca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcce:	f000 b9b3 	b.w	801e038 <__math_uflow>
 801dcd2:	2600      	movs	r6, #0
 801dcd4:	4936      	ldr	r1, [pc, #216]	@ (801ddb0 <pow+0x3e8>)
 801dcd6:	ed91 4b02 	vldr	d4, [r1, #8]
 801dcda:	ed91 3b00 	vldr	d3, [r1]
 801dcde:	eeb0 7b44 	vmov.f64	d7, d4
 801dce2:	eea6 7b03 	vfma.f64	d7, d6, d3
 801dce6:	ee17 5a10 	vmov	r5, s14
 801dcea:	ee37 7b44 	vsub.f64	d7, d7, d4
 801dcee:	ed91 4b04 	vldr	d4, [r1, #16]
 801dcf2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801dcf6:	eea7 6b04 	vfma.f64	d6, d7, d4
 801dcfa:	ed91 4b06 	vldr	d4, [r1, #24]
 801dcfe:	18dc      	adds	r4, r3, r3
 801dd00:	f104 030f 	add.w	r3, r4, #15
 801dd04:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801dd08:	eea7 6b04 	vfma.f64	d6, d7, d4
 801dd0c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801dd10:	ee35 5b06 	vadd.f64	d5, d5, d6
 801dd14:	ee25 6b05 	vmul.f64	d6, d5, d5
 801dd18:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801dd1c:	ed91 4b08 	vldr	d4, [r1, #32]
 801dd20:	ee35 7b07 	vadd.f64	d7, d5, d7
 801dd24:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801dd28:	eea5 4b03 	vfma.f64	d4, d5, d3
 801dd2c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801dd30:	eea6 7b04 	vfma.f64	d7, d6, d4
 801dd34:	ee26 6b06 	vmul.f64	d6, d6, d6
 801dd38:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801dd3c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801dd40:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801dd44:	eea5 4b03 	vfma.f64	d4, d5, d3
 801dd48:	1940      	adds	r0, r0, r5
 801dd4a:	2700      	movs	r7, #0
 801dd4c:	eb17 020c 	adds.w	r2, r7, ip
 801dd50:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801dd54:	eea6 7b04 	vfma.f64	d7, d6, d4
 801dd58:	2e00      	cmp	r6, #0
 801dd5a:	d175      	bne.n	801de48 <pow+0x480>
 801dd5c:	42bd      	cmp	r5, r7
 801dd5e:	db29      	blt.n	801ddb4 <pow+0x3ec>
 801dd60:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801dd64:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801dd68:	4610      	mov	r0, r2
 801dd6a:	ec41 0b10 	vmov	d0, r0, r1
 801dd6e:	eea7 0b00 	vfma.f64	d0, d7, d0
 801dd72:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801dd90 <pow+0x3c8>
 801dd76:	ee20 0b07 	vmul.f64	d0, d0, d7
 801dd7a:	b007      	add	sp, #28
 801dd7c:	ecbd 8b0a 	vpop	{d8-d12}
 801dd80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd84:	f000 b998 	b.w	801e0b8 <__math_check_oflow>
 801dd88:	00000000 	.word	0x00000000
 801dd8c:	43300000 	.word	0x43300000
 801dd90:	00000000 	.word	0x00000000
 801dd94:	7f000000 	.word	0x7f000000
 801dd98:	3ff00000 	.word	0x3ff00000
 801dd9c:	fff00000 	.word	0xfff00000
 801dda0:	ffe00000 	.word	0xffe00000
 801dda4:	7fe00000 	.word	0x7fe00000
 801dda8:	c0196aab 	.word	0xc0196aab
 801ddac:	0801e628 	.word	0x0801e628
 801ddb0:	0801f6a0 	.word	0x0801f6a0
 801ddb4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801ddb8:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801ddbc:	4610      	mov	r0, r2
 801ddbe:	ec41 0b15 	vmov	d5, r0, r1
 801ddc2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801ddc6:	ee27 6b05 	vmul.f64	d6, d7, d5
 801ddca:	ee35 7b06 	vadd.f64	d7, d5, d6
 801ddce:	eeb0 4bc7 	vabs.f64	d4, d7
 801ddd2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801ddd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddda:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801de58 <pow+0x490>
 801ddde:	d52a      	bpl.n	801de36 <pow+0x46e>
 801dde0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801dde4:	ee35 5b47 	vsub.f64	d5, d5, d7
 801dde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddec:	ee35 5b06 	vadd.f64	d5, d5, d6
 801ddf0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801ddf4:	bf58      	it	pl
 801ddf6:	eeb0 4b43 	vmovpl.f64	d4, d3
 801ddfa:	ee37 3b04 	vadd.f64	d3, d7, d4
 801ddfe:	ee34 6b43 	vsub.f64	d6, d4, d3
 801de02:	ee36 6b07 	vadd.f64	d6, d6, d7
 801de06:	ee36 6b05 	vadd.f64	d6, d6, d5
 801de0a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801de0e:	ee36 7b44 	vsub.f64	d7, d6, d4
 801de12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801de16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de1a:	d104      	bne.n	801de26 <pow+0x45e>
 801de1c:	4632      	mov	r2, r6
 801de1e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801de22:	ec43 2b17 	vmov	d7, r2, r3
 801de26:	ed8d 0b02 	vstr	d0, [sp, #8]
 801de2a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801de2e:	ee26 6b00 	vmul.f64	d6, d6, d0
 801de32:	ed8d 6b04 	vstr	d6, [sp, #16]
 801de36:	ee27 0b00 	vmul.f64	d0, d7, d0
 801de3a:	b007      	add	sp, #28
 801de3c:	ecbd 8b0a 	vpop	{d8-d12}
 801de40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de44:	f000 b92f 	b.w	801e0a6 <__math_check_uflow>
 801de48:	ec43 2b10 	vmov	d0, r2, r3
 801de4c:	eea7 0b00 	vfma.f64	d0, d7, d0
 801de50:	e625      	b.n	801da9e <pow+0xd6>
 801de52:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801de60 <pow+0x498>
 801de56:	e622      	b.n	801da9e <pow+0xd6>
 801de58:	00000000 	.word	0x00000000
 801de5c:	00100000 	.word	0x00100000
	...

0801de68 <__ieee754_sqrt>:
 801de68:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801de6c:	4770      	bx	lr
	...

0801de70 <__ieee754_atan2>:
 801de70:	ee11 1a10 	vmov	r1, s2
 801de74:	eeb0 7b40 	vmov.f64	d7, d0
 801de78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de7a:	ee11 5a90 	vmov	r5, s3
 801de7e:	424b      	negs	r3, r1
 801de80:	4f59      	ldr	r7, [pc, #356]	@ (801dfe8 <__ieee754_atan2+0x178>)
 801de82:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801de86:	430b      	orrs	r3, r1
 801de88:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801de8c:	42bb      	cmp	r3, r7
 801de8e:	d80d      	bhi.n	801deac <__ieee754_atan2+0x3c>
 801de90:	ee10 ca10 	vmov	ip, s0
 801de94:	ee17 6a90 	vmov	r6, s15
 801de98:	f1cc 0000 	rsb	r0, ip, #0
 801de9c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801dea0:	ea40 000c 	orr.w	r0, r0, ip
 801dea4:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801dea8:	42b8      	cmp	r0, r7
 801deaa:	d904      	bls.n	801deb6 <__ieee754_atan2+0x46>
 801deac:	ee37 7b01 	vadd.f64	d7, d7, d1
 801deb0:	eeb0 0b47 	vmov.f64	d0, d7
 801deb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801deb6:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801deba:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801debe:	4308      	orrs	r0, r1
 801dec0:	d103      	bne.n	801deca <__ieee754_atan2+0x5a>
 801dec2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801dec6:	f7ff bc47 	b.w	801d758 <atan>
 801deca:	17ac      	asrs	r4, r5, #30
 801decc:	f004 0402 	and.w	r4, r4, #2
 801ded0:	ea53 0c0c 	orrs.w	ip, r3, ip
 801ded4:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801ded8:	d107      	bne.n	801deea <__ieee754_atan2+0x7a>
 801deda:	2c02      	cmp	r4, #2
 801dedc:	d05c      	beq.n	801df98 <__ieee754_atan2+0x128>
 801dede:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801dfb0 <__ieee754_atan2+0x140>
 801dee2:	2c03      	cmp	r4, #3
 801dee4:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801dee8:	e7e2      	b.n	801deb0 <__ieee754_atan2+0x40>
 801deea:	4311      	orrs	r1, r2
 801deec:	d107      	bne.n	801defe <__ieee754_atan2+0x8e>
 801deee:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801dfb8 <__ieee754_atan2+0x148>
 801def2:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801dfc0 <__ieee754_atan2+0x150>
 801def6:	2e00      	cmp	r6, #0
 801def8:	fe27 7b06 	vselge.f64	d7, d7, d6
 801defc:	e7d8      	b.n	801deb0 <__ieee754_atan2+0x40>
 801defe:	42ba      	cmp	r2, r7
 801df00:	d10f      	bne.n	801df22 <__ieee754_atan2+0xb2>
 801df02:	4293      	cmp	r3, r2
 801df04:	f104 34ff 	add.w	r4, r4, #4294967295
 801df08:	d107      	bne.n	801df1a <__ieee754_atan2+0xaa>
 801df0a:	2c02      	cmp	r4, #2
 801df0c:	d847      	bhi.n	801df9e <__ieee754_atan2+0x12e>
 801df0e:	4b37      	ldr	r3, [pc, #220]	@ (801dfec <__ieee754_atan2+0x17c>)
 801df10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801df14:	ed93 7b00 	vldr	d7, [r3]
 801df18:	e7ca      	b.n	801deb0 <__ieee754_atan2+0x40>
 801df1a:	2c02      	cmp	r4, #2
 801df1c:	d842      	bhi.n	801dfa4 <__ieee754_atan2+0x134>
 801df1e:	4b34      	ldr	r3, [pc, #208]	@ (801dff0 <__ieee754_atan2+0x180>)
 801df20:	e7f6      	b.n	801df10 <__ieee754_atan2+0xa0>
 801df22:	42bb      	cmp	r3, r7
 801df24:	d0e3      	beq.n	801deee <__ieee754_atan2+0x7e>
 801df26:	1a9b      	subs	r3, r3, r2
 801df28:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801df2c:	ea4f 5223 	mov.w	r2, r3, asr #20
 801df30:	da1a      	bge.n	801df68 <__ieee754_atan2+0xf8>
 801df32:	2d00      	cmp	r5, #0
 801df34:	da01      	bge.n	801df3a <__ieee754_atan2+0xca>
 801df36:	323c      	adds	r2, #60	@ 0x3c
 801df38:	db19      	blt.n	801df6e <__ieee754_atan2+0xfe>
 801df3a:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801df3e:	f7ff fd05 	bl	801d94c <fabs>
 801df42:	f7ff fc09 	bl	801d758 <atan>
 801df46:	eeb0 7b40 	vmov.f64	d7, d0
 801df4a:	2c01      	cmp	r4, #1
 801df4c:	d012      	beq.n	801df74 <__ieee754_atan2+0x104>
 801df4e:	2c02      	cmp	r4, #2
 801df50:	d019      	beq.n	801df86 <__ieee754_atan2+0x116>
 801df52:	2c00      	cmp	r4, #0
 801df54:	d0ac      	beq.n	801deb0 <__ieee754_atan2+0x40>
 801df56:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801dfc8 <__ieee754_atan2+0x158>
 801df5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801df5e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801dfd0 <__ieee754_atan2+0x160>
 801df62:	ee37 7b46 	vsub.f64	d7, d7, d6
 801df66:	e7a3      	b.n	801deb0 <__ieee754_atan2+0x40>
 801df68:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801dfb8 <__ieee754_atan2+0x148>
 801df6c:	e7ed      	b.n	801df4a <__ieee754_atan2+0xda>
 801df6e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801dfd8 <__ieee754_atan2+0x168>
 801df72:	e7ea      	b.n	801df4a <__ieee754_atan2+0xda>
 801df74:	ee17 1a90 	vmov	r1, s15
 801df78:	ec53 2b17 	vmov	r2, r3, d7
 801df7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801df80:	ec43 2b17 	vmov	d7, r2, r3
 801df84:	e794      	b.n	801deb0 <__ieee754_atan2+0x40>
 801df86:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801dfc8 <__ieee754_atan2+0x158>
 801df8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801df8e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801dfd0 <__ieee754_atan2+0x160>
 801df92:	ee36 7b47 	vsub.f64	d7, d6, d7
 801df96:	e78b      	b.n	801deb0 <__ieee754_atan2+0x40>
 801df98:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801dfd0 <__ieee754_atan2+0x160>
 801df9c:	e788      	b.n	801deb0 <__ieee754_atan2+0x40>
 801df9e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801dfe0 <__ieee754_atan2+0x170>
 801dfa2:	e785      	b.n	801deb0 <__ieee754_atan2+0x40>
 801dfa4:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801dfd8 <__ieee754_atan2+0x168>
 801dfa8:	e782      	b.n	801deb0 <__ieee754_atan2+0x40>
 801dfaa:	bf00      	nop
 801dfac:	f3af 8000 	nop.w
 801dfb0:	54442d18 	.word	0x54442d18
 801dfb4:	c00921fb 	.word	0xc00921fb
 801dfb8:	54442d18 	.word	0x54442d18
 801dfbc:	3ff921fb 	.word	0x3ff921fb
 801dfc0:	54442d18 	.word	0x54442d18
 801dfc4:	bff921fb 	.word	0xbff921fb
 801dfc8:	33145c07 	.word	0x33145c07
 801dfcc:	3ca1a626 	.word	0x3ca1a626
 801dfd0:	54442d18 	.word	0x54442d18
 801dfd4:	400921fb 	.word	0x400921fb
	...
 801dfe0:	54442d18 	.word	0x54442d18
 801dfe4:	3fe921fb 	.word	0x3fe921fb
 801dfe8:	7ff00000 	.word	0x7ff00000
 801dfec:	0801f688 	.word	0x0801f688
 801dff0:	0801f670 	.word	0x0801f670

0801dff4 <with_errno>:
 801dff4:	b510      	push	{r4, lr}
 801dff6:	ed2d 8b02 	vpush	{d8}
 801dffa:	eeb0 8b40 	vmov.f64	d8, d0
 801dffe:	4604      	mov	r4, r0
 801e000:	f7ff fb50 	bl	801d6a4 <__errno>
 801e004:	eeb0 0b48 	vmov.f64	d0, d8
 801e008:	ecbd 8b02 	vpop	{d8}
 801e00c:	6004      	str	r4, [r0, #0]
 801e00e:	bd10      	pop	{r4, pc}

0801e010 <xflow>:
 801e010:	b082      	sub	sp, #8
 801e012:	b158      	cbz	r0, 801e02c <xflow+0x1c>
 801e014:	eeb1 7b40 	vneg.f64	d7, d0
 801e018:	ed8d 7b00 	vstr	d7, [sp]
 801e01c:	ed9d 7b00 	vldr	d7, [sp]
 801e020:	2022      	movs	r0, #34	@ 0x22
 801e022:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e026:	b002      	add	sp, #8
 801e028:	f7ff bfe4 	b.w	801dff4 <with_errno>
 801e02c:	eeb0 7b40 	vmov.f64	d7, d0
 801e030:	e7f2      	b.n	801e018 <xflow+0x8>
 801e032:	0000      	movs	r0, r0
 801e034:	0000      	movs	r0, r0
	...

0801e038 <__math_uflow>:
 801e038:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e040 <__math_uflow+0x8>
 801e03c:	f7ff bfe8 	b.w	801e010 <xflow>
 801e040:	00000000 	.word	0x00000000
 801e044:	10000000 	.word	0x10000000

0801e048 <__math_oflow>:
 801e048:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e050 <__math_oflow+0x8>
 801e04c:	f7ff bfe0 	b.w	801e010 <xflow>
 801e050:	00000000 	.word	0x00000000
 801e054:	70000000 	.word	0x70000000

0801e058 <__math_divzero>:
 801e058:	b082      	sub	sp, #8
 801e05a:	2800      	cmp	r0, #0
 801e05c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e060:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e064:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e068:	ed8d 7b00 	vstr	d7, [sp]
 801e06c:	ed9d 0b00 	vldr	d0, [sp]
 801e070:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e080 <__math_divzero+0x28>
 801e074:	2022      	movs	r0, #34	@ 0x22
 801e076:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e07a:	b002      	add	sp, #8
 801e07c:	f7ff bfba 	b.w	801dff4 <with_errno>
	...

0801e088 <__math_invalid>:
 801e088:	eeb0 7b40 	vmov.f64	d7, d0
 801e08c:	eeb4 7b47 	vcmp.f64	d7, d7
 801e090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e094:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e098:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e09c:	d602      	bvs.n	801e0a4 <__math_invalid+0x1c>
 801e09e:	2021      	movs	r0, #33	@ 0x21
 801e0a0:	f7ff bfa8 	b.w	801dff4 <with_errno>
 801e0a4:	4770      	bx	lr

0801e0a6 <__math_check_uflow>:
 801e0a6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0ae:	d102      	bne.n	801e0b6 <__math_check_uflow+0x10>
 801e0b0:	2022      	movs	r0, #34	@ 0x22
 801e0b2:	f7ff bf9f 	b.w	801dff4 <with_errno>
 801e0b6:	4770      	bx	lr

0801e0b8 <__math_check_oflow>:
 801e0b8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e0d8 <__math_check_oflow+0x20>
 801e0bc:	eeb0 7bc0 	vabs.f64	d7, d0
 801e0c0:	eeb4 7b46 	vcmp.f64	d7, d6
 801e0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0c8:	dd02      	ble.n	801e0d0 <__math_check_oflow+0x18>
 801e0ca:	2022      	movs	r0, #34	@ 0x22
 801e0cc:	f7ff bf92 	b.w	801dff4 <with_errno>
 801e0d0:	4770      	bx	lr
 801e0d2:	bf00      	nop
 801e0d4:	f3af 8000 	nop.w
 801e0d8:	ffffffff 	.word	0xffffffff
 801e0dc:	7fefffff 	.word	0x7fefffff

0801e0e0 <_init>:
 801e0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0e2:	bf00      	nop
 801e0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e0e6:	bc08      	pop	{r3}
 801e0e8:	469e      	mov	lr, r3
 801e0ea:	4770      	bx	lr

0801e0ec <_fini>:
 801e0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0ee:	bf00      	nop
 801e0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e0f2:	bc08      	pop	{r3}
 801e0f4:	469e      	mov	lr, r3
 801e0f6:	4770      	bx	lr
