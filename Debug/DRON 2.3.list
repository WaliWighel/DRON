
DRON 2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ef50  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  0801f220  0801f220  00025220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08021048  08021048  00027048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08021050  08021050  00027050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08021054  08021054  00027054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08021058  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  080210d0  00028078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  080210d0  000288ac  2**0
                  ALLOC
  9 .IRAM         0000420f  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  0004a710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00028eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004a710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032070  00000000  00000000  0004a73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ebe  00000000  00000000  0007c7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024b0  00000000  00000000  00082670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c6a  00000000  00000000  00084b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c9b4  00000000  00000000  0008678a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038872  00000000  00000000  000c313e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e2b3  00000000  00000000  000fb9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00269c63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a0f0  00000000  00000000  00269ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00273d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801f208 	.word	0x0801f208

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801f208 	.word	0x0801f208

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00e fb8c 	bl	800edd8 <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00e fb56 	bl	800edd8 <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000cc 	.word	0x000000cc

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00e fb33 	bl	800edd8 <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	000000fc 	.word	0x000000fc
 80007b8:	000000cc 	.word	0x000000cc

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	000000f8 	.word	0x000000f8

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00e f9d4 	bl	800ebb0 <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00e f9bc 	bl	800ebb0 <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00e fbd4 	bl	800f00c <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00e fbbe 	bl	800f00c <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00e fa83 	bl	800edd8 <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	000000a6 	.word	0x000000a6
 80009b0:	000000a8 	.word	0x000000a8
 80009b4:	000000aa 	.word	0x000000aa
 80009b8:	000000a0 	.word	0x000000a0
 80009bc:	000000a2 	.word	0x000000a2
 80009c0:	000000a4 	.word	0x000000a4
 80009c4:	000000ac 	.word	0x000000ac
 80009c8:	000000ae 	.word	0x000000ae
 80009cc:	000000b0 	.word	0x000000b0
 80009d0:	000000b2 	.word	0x000000b2
 80009d4:	000000b4 	.word	0x000000b4

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	000000a4 	.word	0x000000a4
 8000a74:	000000a2 	.word	0x000000a2
 8000a78:	000000d0 	.word	0x000000d0
 8000a7c:	000000b2 	.word	0x000000b2
 8000a80:	000000b4 	.word	0x000000b4
 8000a84:	000000d4 	.word	0x000000d4
 8000a88:	000000d8 	.word	0x000000d8
 8000a8c:	000000e8 	.word	0x000000e8

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	000000c0 	.word	0x000000c0
 8000d18:	000000cc 	.word	0x000000cc
 8000d1c:	000000a4 	.word	0x000000a4
 8000d20:	000000a2 	.word	0x000000a2
 8000d24:	000000d0 	.word	0x000000d0
 8000d28:	000000b2 	.word	0x000000b2
 8000d2c:	000000b4 	.word	0x000000b4
 8000d30:	000000d4 	.word	0x000000d4
 8000d34:	000000d8 	.word	0x000000d8
 8000d38:	000000dc 	.word	0x000000dc
 8000d3c:	000000ae 	.word	0x000000ae
 8000d40:	000000a8 	.word	0x000000a8
 8000d44:	000000e4 	.word	0x000000e4
 8000d48:	000000a6 	.word	0x000000a6
 8000d4c:	000000e0 	.word	0x000000e0
 8000d50:	000000aa 	.word	0x000000aa
 8000d54:	000000ac 	.word	0x000000ac
 8000d58:	000000a0 	.word	0x000000a0
 8000d5c:	000000b8 	.word	0x000000b8
 8000d60:	000000bc 	.word	0x000000bc
 8000d64:	000000ec 	.word	0x000000ec
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 fd09 	bl	8009798 <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 fcf3 	bl	8009798 <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000c4 	.word	0x000000c4
 8000de8:	000000e8 	.word	0x000000e8
 8000dec:	000000c8 	.word	0x000000c8
 8000df0:	000000ec 	.word	0x000000ec

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000f4 	.word	0x000000f4

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
//	  if(a >  max_speed)
//	  {
//		  a =  max_speed;
//	  }

	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d907      	bls.n	8000e58 <ESC_1_SPEED+0x24>
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	bf28      	it	cs
 8000e52:	4613      	movcs	r3, r2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	e001      	b.n	8000e5c <ESC_1_SPEED+0x28>
 8000e58:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e5c:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d907      	bls.n	8000e9c <ESC_2_SPEED+0x24>
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e92:	4293      	cmp	r3, r2
 8000e94:	bf28      	it	cs
 8000e96:	4613      	movcs	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	e001      	b.n	8000ea0 <ESC_2_SPEED+0x28>
 8000e9c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ea0:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d907      	bls.n	8000ee0 <ESC_3_SPEED+0x24>
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	bf28      	it	cs
 8000eda:	4613      	movcs	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	e001      	b.n	8000ee4 <ESC_3_SPEED+0x28>
 8000ee0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ee4:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d907      	bls.n	8000f24 <ESC_4_SPEED+0x24>
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	bf28      	it	cs
 8000f1e:	4613      	movcs	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	e001      	b.n	8000f28 <ESC_4_SPEED+0x28>
 8000f24:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f28:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 fef9 	bl	8016d50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 fef3 	bl	8016d50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 feed 	bl	8016d50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 fee7 	bl	8016d50 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d fd29 	bl	800ea10 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f008 fbe9 	bl	8009798 <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;
extern float Mag_Y, Mag_X, Mag_Z, heading;
//float HMC5883L_Scale = 0.92;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8001090 <HMC5883L_Init+0xb8>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			15 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x70;
 8000fea:	2370      	movs	r3, #112	@ 0x70
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <HMC5883L_Init+0xb8>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d fdd3 	bl	800ebb0 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xA0;
 800100a:	23a0      	movs	r3, #160	@ 0xa0
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <HMC5883L_Init+0xb8>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d fdc3 	bl	800ebb0 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <HMC5883L_Init+0xb8>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d fdb3 	bl	800ebb0 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 800104e:	200a      	movs	r0, #10
 8001050:	f008 fba2 	bl	8009798 <HAL_Delay>

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HMC5883L_Init+0xb8>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2301      	movs	r3, #1
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	f107 030e 	add.w	r3, r7, #14
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	220a      	movs	r2, #10
 800106a:	213c      	movs	r1, #60	@ 0x3c
 800106c:	f00d feb4 	bl	800edd8 <HAL_I2C_Mem_Read>

	if(status != 0x48){
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	2b48      	cmp	r3, #72	@ 0x48
 8001074:	d002      	beq.n	800107c <HMC5883L_Init+0xa4>
		status = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
 800107a:	e001      	b.n	8001080 <HMC5883L_Init+0xa8>
	}
	else{
		status = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f008 fb89 	bl	8009798 <HAL_Delay>

	return status;
 8001086:	7bbb      	ldrb	r3, [r7, #14]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2400009c 	.word	0x2400009c

08001094 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 800109a:	23b6      	movs	r3, #182	@ 0xb6
 800109c:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, data, 6, 1);
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <HMC5883L_Get_Z_Start+0x40>)
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	2306      	movs	r3, #6
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	463b      	mov	r3, r7
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	213c      	movs	r1, #60	@ 0x3c
 80010b4:	f00d fe90 	bl	800edd8 <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[2]<<8) | data[3];
 80010b8:	78bb      	ldrb	r3, [r7, #2]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2400009c 	.word	0x2400009c

080010d8 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x28>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	2306      	movs	r3, #6
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	213c      	movs	r1, #60	@ 0x3c
 80010f0:	f00e f816 	bl	800f120 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2400009c 	.word	0x2400009c
 8001104:	00000070 	.word	0x00000070
 8001108:	000041fd 	.word	0x000041fd
 800110c:	00000000 	.word	0x00000000

08001110 <HMC5883L_Get_Z_End_IT>:

void HMC5883L_Get_Z_End_IT(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
//	Mag_Z = (((int16_t)HMC5883L_Data_IT[2]<<8) | HMC5883L_Data_IT[3]) * 2.56;// 2.56 - scale
//	Mag_X = (((int16_t)HMC5883L_Data_IT[0]<<8) | HMC5883L_Data_IT[1]) * 2.56;
//	Mag_Y = (((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5]) * 2.56;
		Mag_X = (((int16_t)HMC5883L_Data_IT[1]<<8) | HMC5883L_Data_IT[0]) * 2.56;//important fake HMC5883L, msb -> lsb
 8001114:	4b32      	ldr	r3, [pc, #200]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	4a31      	ldr	r2, [pc, #196]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	4313      	orrs	r3, r2
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001128:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 80011c8 <HMC5883L_Get_Z_End_IT+0xb8>
 800112c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001130:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001134:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <HMC5883L_Get_Z_End_IT+0xd4>)
 8001136:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (((int16_t)HMC5883L_Data_IT[3]<<8) | HMC5883L_Data_IT[2]) * 2.56;// 2.56 - scale
 800113a:	4b29      	ldr	r3, [pc, #164]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 800113c:	78db      	ldrb	r3, [r3, #3]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	4a27      	ldr	r2, [pc, #156]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001142:	7892      	ldrb	r2, [r2, #2]
 8001144:	4313      	orrs	r3, r2
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800114e:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 80011c8 <HMC5883L_Get_Z_End_IT+0xb8>
 8001152:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001156:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800115a:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <HMC5883L_Get_Z_End_IT+0xd8>)
 800115c:	edc3 7a00 	vstr	s15, [r3]
		Mag_Y = (((int16_t)HMC5883L_Data_IT[5]<<8) | HMC5883L_Data_IT[4]) * 2.56;
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001162:	795b      	ldrb	r3, [r3, #5]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001168:	7912      	ldrb	r2, [r2, #4]
 800116a:	4313      	orrs	r3, r2
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001174:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 80011c8 <HMC5883L_Get_Z_End_IT+0xb8>
 8001178:	ee27 7b06 	vmul.f64	d7, d7, d6
 800117c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <HMC5883L_Get_Z_End_IT+0xdc>)
 8001182:	edc3 7a00 	vstr	s15, [r3]
	heading = (atan2(Mag_X, Mag_Y))*180/M_PI;
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <HMC5883L_Get_Z_End_IT+0xd4>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HMC5883L_Get_Z_End_IT+0xdc>)
 8001192:	edd3 6a00 	vldr	s13, [r3]
 8001196:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800119a:	eeb0 1b46 	vmov.f64	d1, d6
 800119e:	eeb0 0b47 	vmov.f64	d0, d7
 80011a2:	f01d fb4b 	bl	801e83c <atan2>
 80011a6:	eeb0 7b40 	vmov.f64	d7, d0
 80011aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80011d0 <HMC5883L_Get_Z_End_IT+0xc0>
 80011ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80011d8 <HMC5883L_Get_Z_End_IT+0xc8>
 80011b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <HMC5883L_Get_Z_End_IT+0xe0>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	47ae147b 	.word	0x47ae147b
 80011cc:	40047ae1 	.word	0x40047ae1
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40668000 	.word	0x40668000
 80011d8:	54442d18 	.word	0x54442d18
 80011dc:	400921fb 	.word	0x400921fb
 80011e0:	00000070 	.word	0x00000070
 80011e4:	00000060 	.word	0x00000060
 80011e8:	00000058 	.word	0x00000058
 80011ec:	0000005c 	.word	0x0000005c
 80011f0:	00000064 	.word	0x00000064

080011f4 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 80011f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	e014      	b.n	8001238 <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 800120e:	f7ff ff41 	bl	8001094 <HMC5883L_Get_Z_Start>
 8001212:	4603      	mov	r3, r0
 8001214:	b21b      	sxth	r3, r3
 8001216:	17da      	asrs	r2, r3, #31
 8001218:	461c      	mov	r4, r3
 800121a:	4615      	mov	r5, r2
 800121c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001220:	eb12 0804 	adds.w	r8, r2, r4
 8001224:	eb43 0905 	adc.w	r9, r3, r5
 8001228:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 800122c:	2064      	movs	r0, #100	@ 0x64
 800122e:	f008 fab3 	bl	8009798 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3301      	adds	r3, #1
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b09      	cmp	r3, #9
 800123c:	dde7      	ble.n	800120e <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 800123e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001242:	f04f 020a 	mov.w	r2, #10
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	f7ff f861 	bl	8000310 <__aeabi_ldivmod>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	b213      	sxth	r3, r2
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001260 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 8001268:	4a13      	ldr	r2, [pc, #76]	@ (80012b8 <MPU6050_INIT+0x58>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 800126e:	f000 f825 	bl	80012bc <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 8001272:	f000 f88f 	bl	8001394 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 8001276:	2005      	movs	r0, #5
 8001278:	f000 f838 	bl	80012ec <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 800127c:	2008      	movs	r0, #8
 800127e:	f000 f851 	bl	8001324 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 8001282:	2008      	movs	r0, #8
 8001284:	f000 f86a 	bl	800135c <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 8001288:	f000 fd30 	bl	8001cec <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 800128c:	f000 f89a 	bl	80013c4 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 8001290:	200a      	movs	r0, #10
 8001292:	f008 fa81 	bl	8009798 <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 8001296:	f000 fd11 	bl	8001cbc <MPU6050_READ_ID>
 800129a:	4603      	mov	r3, r0
 800129c:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b68      	cmp	r3, #104	@ 0x68
 80012a2:	d002      	beq.n	80012aa <MPU6050_INIT+0x4a>
		status = 0;//error
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e001      	b.n	80012ae <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	240000a0 	.word	0x240000a0

080012bc <MPU6050_RESET>:


void MPU6050_RESET(void){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 80012c2:	2300      	movs	r3, #0
 80012c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MPU6050_RESET+0x2c>)
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	226b      	movs	r2, #107	@ 0x6b
 80012da:	21d0      	movs	r1, #208	@ 0xd0
 80012dc:	f00d fc68 	bl	800ebb0 <HAL_I2C_Mem_Write>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	240000a0 	.word	0x240000a0

080012ec <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MPU6050_CONFIG_DLPF+0x34>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2301      	movs	r3, #1
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f107 030f 	add.w	r3, r7, #15
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	221a      	movs	r2, #26
 8001310:	21d0      	movs	r1, #208	@ 0xd0
 8001312:	f00d fc4d 	bl	800ebb0 <HAL_I2C_Mem_Write>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	240000a0 	.word	0x240000a0

08001324 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af04      	add	r7, sp, #16
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MPU6050_CONFIG_GYRO+0x34>)
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	2301      	movs	r3, #1
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	f107 030f 	add.w	r3, r7, #15
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	221b      	movs	r2, #27
 8001348:	21d0      	movs	r1, #208	@ 0xd0
 800134a:	f00d fc31 	bl	800ebb0 <HAL_I2C_Mem_Write>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	240000a0 	.word	0x240000a0

0800135c <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af04      	add	r7, sp, #16
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <MPU6050_CONFIG_ACCEL+0x34>)
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2301      	movs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	f107 030f 	add.w	r3, r7, #15
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	221c      	movs	r2, #28
 8001380:	21d0      	movs	r1, #208	@ 0xd0
 8001382:	f00d fc15 	bl	800ebb0 <HAL_I2C_Mem_Write>
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	240000a0 	.word	0x240000a0

08001394 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	2301      	movs	r3, #1
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2301      	movs	r3, #1
 80013b0:	2219      	movs	r2, #25
 80013b2:	21d0      	movs	r1, #208	@ 0xd0
 80013b4:	f00d fbfc 	bl	800ebb0 <HAL_I2C_Mem_Write>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	240000a0 	.word	0x240000a0

080013c4 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2301      	movs	r3, #1
 80013e0:	226a      	movs	r2, #106	@ 0x6a
 80013e2:	21d0      	movs	r1, #208	@ 0xd0
 80013e4:	f00d fbe4 	bl	800ebb0 <HAL_I2C_Mem_Write>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	240000a0 	.word	0x240000a0

080013f4 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	@ 0x38
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6178      	str	r0, [r7, #20]
 80013fc:	6139      	str	r1, [r7, #16]
 80013fe:	60fa      	str	r2, [r7, #12]
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	ed87 0a01 	vstr	s0, [r7, #4]
 8001406:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	633b      	str	r3, [r7, #48]	@ 0x30
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e06b      	b.n	800150c <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 8001434:	f000 fbbe 	bl	8001bb4 <MPU6050_GET_ACCEL_FULLVALUE_X>
 8001438:	4603      	mov	r3, r0
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001442:	ed97 7a00 	vldr	s14, [r7]
 8001446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800144e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001452:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 8001456:	f000 fbcd 	bl	8001bf4 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800145a:	4603      	mov	r3, r0
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001464:	ed97 7a00 	vldr	s14, [r7]
 8001468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001474:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 8001478:	f000 fbd0 	bl	8001c1c <MPU6050_GET_ACCEL_FULLVALUE_Z>
 800147c:	4603      	mov	r3, r0
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001486:	ed97 7a00 	vldr	s14, [r7]
 800148a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001496:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 800149a:	f000 fbd3 	bl	8001c44 <MPU6050_GET_GYRO_FULLVALUE_X>
 800149e:	4603      	mov	r3, r0
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80014ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 80014bc:	f000 fbd6 	bl	8001c6c <MPU6050_GET_GYRO_FULLVALUE_Y>
 80014c0:	4603      	mov	r3, r0
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80014ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 80014de:	f000 fbd9 	bl	8001c94 <MPU6050_GET_GYRO_FULLVALUE_Z>
 80014e2:	4603      	mov	r3, r0
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80014f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80014f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fc:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f008 f949 	bl	8009798 <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001512:	db8f      	blt.n	8001434 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 8001514:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001518:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 800151c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 8001526:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800152a:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 800152e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 8001538:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800153c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 8001540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 800155e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001562:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 8001566:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 8001570:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001574:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 8001578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800157e:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 8001582:	ed97 7a08 	vldr	s14, [r7, #32]
 8001586:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 800158a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001590:	edc3 7a00 	vstr	s15, [r3]
}
 8001594:	bf00      	nop
 8001596:	3738      	adds	r7, #56	@ 0x38
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	447a0000 	.word	0x447a0000

080015a0 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	ed87 0a05 	vstr	s0, [r7, #20]
 80015aa:	edc7 0a04 	vstr	s1, [r7, #16]
 80015ae:	ed87 1a03 	vstr	s2, [r7, #12]
 80015b2:	60b8      	str	r0, [r7, #8]
 80015b4:	6079      	str	r1, [r7, #4]
	float ang1 = sqrt((ax*ax)+(az*az));
 80015b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015be:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ce:	eeb0 0b47 	vmov.f64	d0, d7
 80015d2:	f01d f935 	bl	801e840 <sqrt>
 80015d6:	eeb0 7b40 	vmov.f64	d7, d0
 80015da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015de:	edc7 7a07 	vstr	s15, [r7, #28]
	float ang2 = sqrt((ay*ay)+(az*az));
 80015e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015fa:	eeb0 0b47 	vmov.f64	d0, d7
 80015fe:	f01d f91f 	bl	801e840 <sqrt>
 8001602:	eeb0 7b40 	vmov.f64	d7, d0
 8001606:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800160a:	edc7 7a06 	vstr	s15, [r7, #24]

	*ay_ang = ((-1*(atan(ax/ang2)))*180)/M_PI;
 800160e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001612:	ed97 7a06 	vldr	s14, [r7, #24]
 8001616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800161a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800161e:	eeb0 0b47 	vmov.f64	d0, d7
 8001622:	f01d f92d 	bl	801e880 <atan>
 8001626:	eeb0 7b40 	vmov.f64	d7, d0
 800162a:	eeb1 7b47 	vneg.f64	d7, d7
 800162e:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8001688 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 8001632:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001636:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8001690 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 800163a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800163e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edc3 7a00 	vstr	s15, [r3]
	*ax_ang = ((atan(ay/ang1))*180)/M_PI;
 8001648:	edd7 6a04 	vldr	s13, [r7, #16]
 800164c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001654:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001658:	eeb0 0b47 	vmov.f64	d0, d7
 800165c:	f01d f910 	bl	801e880 <atan>
 8001660:	eeb0 7b40 	vmov.f64	d7, d0
 8001664:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8001688 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 8001668:	ee27 6b06 	vmul.f64	d6, d7, d6
 800166c:	ed9f 5b08 	vldr	d5, [pc, #32]	@ 8001690 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 8001670:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001674:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	edc3 7a00 	vstr	s15, [r3]
//	axan = -1*(atan(ax/ang2));
//	ayan= atan(ay/ang1);
//
//	*ay_ang = (axan*180)/M_PI;
//	*ax_ang = (ayan*180)/M_PI;
}
 800167e:	bf00      	nop
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	00000000 	.word	0x00000000
 800168c:	40668000 	.word	0x40668000
 8001690:	54442d18 	.word	0x54442d18
 8001694:	400921fb 	.word	0x400921fb

08001698 <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001698:	b580      	push	{r7, lr}
 800169a:	b094      	sub	sp, #80	@ 0x50
 800169c:	af04      	add	r7, sp, #16
 800169e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80016a0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80016a4:	623b      	str	r3, [r7, #32]
 80016a6:	ed87 0a07 	vstr	s0, [r7, #28]
 80016aa:	edc7 0a06 	vstr	s1, [r7, #24]
 80016ae:	ed87 1a05 	vstr	s2, [r7, #20]
 80016b2:	edc7 1a04 	vstr	s3, [r7, #16]
 80016b6:	ed87 2a03 	vstr	s4, [r7, #12]
 80016ba:	edc7 2a02 	vstr	s5, [r7, #8]
 80016be:	ed87 3a01 	vstr	s6, [r7, #4]
 80016c2:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 80016c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001800 <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	2301      	movs	r3, #1
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	230e      	movs	r3, #14
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2301      	movs	r3, #1
 80016da:	223b      	movs	r2, #59	@ 0x3b
 80016dc:	21d0      	movs	r1, #208	@ 0xd0
 80016de:	f00d fb7b 	bl	800edd8 <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 80016e2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80016f0:	4313      	orrs	r3, r2
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016fa:	edd7 7a00 	vldr	s15, [r7]
 80016fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001702:	edd7 7a07 	vldr	s15, [r7, #28]
 8001706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800170c:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 8001710:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21b      	sxth	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800171e:	4313      	orrs	r3, r2
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001728:	edd7 7a00 	vldr	s15, [r7]
 800172c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001730:	edd7 7a06 	vldr	s15, [r7, #24]
 8001734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800173a:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 800173e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21b      	sxth	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800174c:	4313      	orrs	r3, r2
 800174e:	ee07 3a90 	vmov	s15, r3
 8001752:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001756:	edd7 7a00 	vldr	s15, [r7]
 800175a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800175e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001768:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 800176c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21b      	sxth	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800177a:	4313      	orrs	r3, r2
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001784:	edd7 7a01 	vldr	s15, [r7, #4]
 8001788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800178c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 800179a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80017a8:	4313      	orrs	r3, r2
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80017be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017c4:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 80017c8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80017d6:	4313      	orrs	r3, r2
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017f2:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 80017f6:	bf00      	nop
 80017f8:	3740      	adds	r7, #64	@ 0x40
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	240000a0 	.word	0x240000a0

08001804 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 800180a:	4b08      	ldr	r3, [pc, #32]	@ (800182c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	230e      	movs	r3, #14
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	223b      	movs	r2, #59	@ 0x3b
 800181a:	21d0      	movs	r1, #208	@ 0xd0
 800181c:	f00d fc80 	bl	800f120 <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]


}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	240000a0 	.word	0x240000a0
 8001830:	00000048 	.word	0x00000048
 8001834:	000041fc 	.word	0x000041fc

08001838 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001838:	b480      	push	{r7}
 800183a:	b08d      	sub	sp, #52	@ 0x34
 800183c:	af00      	add	r7, sp, #0
 800183e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001840:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001842:	627a      	str	r2, [r7, #36]	@ 0x24
 8001844:	623b      	str	r3, [r7, #32]
 8001846:	ed87 0a07 	vstr	s0, [r7, #28]
 800184a:	edc7 0a06 	vstr	s1, [r7, #24]
 800184e:	ed87 1a05 	vstr	s2, [r7, #20]
 8001852:	edc7 1a04 	vstr	s3, [r7, #16]
 8001856:	ed87 2a03 	vstr	s4, [r7, #12]
 800185a:	edc7 2a02 	vstr	s5, [r7, #8]
 800185e:	ed87 3a01 	vstr	s6, [r7, #4]
 8001862:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 8001866:	4b48      	ldr	r3, [pc, #288]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	b21b      	sxth	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	4b45      	ldr	r3, [pc, #276]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	4313      	orrs	r3, r2
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800187e:	edd7 7a00 	vldr	s15, [r7]
 8001882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001886:	edd7 7a07 	vldr	s15, [r7, #28]
 800188a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001890:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 8001894:	4b3c      	ldr	r3, [pc, #240]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001896:	789b      	ldrb	r3, [r3, #2]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21b      	sxth	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	4b3a      	ldr	r3, [pc, #232]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018a0:	78db      	ldrb	r3, [r3, #3]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018ac:	edd7 7a00 	vldr	s15, [r7]
 80018b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80018b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018be:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 80018c2:	4b31      	ldr	r3, [pc, #196]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018ce:	795b      	ldrb	r3, [r3, #5]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	ee07 3a90 	vmov	s15, r3
 80018d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018da:	edd7 7a00 	vldr	s15, [r7]
 80018de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 80018f0:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018f2:	7a1b      	ldrb	r3, [r3, #8]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b23      	ldr	r3, [pc, #140]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018fc:	7a5b      	ldrb	r3, [r3, #9]
 80018fe:	4313      	orrs	r3, r2
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001908:	edd7 7a01 	vldr	s15, [r7, #4]
 800190c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001910:	edd7 7a04 	vldr	s15, [r7, #16]
 8001914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 800191e:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001920:	7a9b      	ldrb	r3, [r3, #10]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b21b      	sxth	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800192a:	7adb      	ldrb	r3, [r3, #11]
 800192c:	4313      	orrs	r3, r2
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001936:	edd7 7a01 	vldr	s15, [r7, #4]
 800193a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800193e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001948:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800194e:	7b1b      	ldrb	r3, [r3, #12]
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b21b      	sxth	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001958:	7b5b      	ldrb	r3, [r3, #13]
 800195a:	4313      	orrs	r3, r2
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001964:	edd7 7a01 	vldr	s15, [r7, #4]
 8001968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800196c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001976:	edc3 7a00 	vstr	s15, [r3]
}
 800197a:	bf00      	nop
 800197c:	3734      	adds	r7, #52	@ 0x34
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	00000048 	.word	0x00000048

0800198c <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	61f8      	str	r0, [r7, #28]
 8001994:	ed87 0a06 	vstr	s0, [r7, #24]
 8001998:	edc7 0a05 	vstr	s1, [r7, #20]
 800199c:	ed87 1a04 	vstr	s2, [r7, #16]
 80019a0:	edc7 1a03 	vstr	s3, [r7, #12]
 80019a4:	ed87 2a02 	vstr	s4, [r7, #8]
 80019a8:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 80019ac:	edd7 2a01 	vldr	s5, [r7, #4]
 80019b0:	ed97 2a02 	vldr	s4, [r7, #8]
 80019b4:	edd7 1a03 	vldr	s3, [r7, #12]
 80019b8:	ed97 1a04 	vldr	s2, [r7, #16]
 80019bc:	edd7 0a05 	vldr	s1, [r7, #20]
 80019c0:	ed97 0a06 	vldr	s0, [r7, #24]
 80019c4:	69f8      	ldr	r0, [r7, #28]
 80019c6:	f000 f9ab 	bl	8001d20 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 80019ca:	bf00      	nop
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 80019da:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <MPU6050_GET_ACCEL_YH+0x2c>)
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	2301      	movs	r3, #1
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	223d      	movs	r2, #61	@ 0x3d
 80019ee:	21d0      	movs	r1, #208	@ 0xd0
 80019f0:	f00d f9f2 	bl	800edd8 <HAL_I2C_Mem_Read>
	return data;
 80019f4:	79fb      	ldrb	r3, [r7, #7]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	240000a0 	.word	0x240000a0

08001a04 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <MPU6050_GET_ACCEL_YL+0x2c>)
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	2301      	movs	r3, #1
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	223e      	movs	r2, #62	@ 0x3e
 8001a1e:	21d0      	movs	r1, #208	@ 0xd0
 8001a20:	f00d f9da 	bl	800edd8 <HAL_I2C_Mem_Read>
	return data;
 8001a24:	79fb      	ldrb	r3, [r7, #7]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	240000a0 	.word	0x240000a0

08001a34 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	9302      	str	r3, [sp, #8]
 8001a42:	2301      	movs	r3, #1
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	1dfb      	adds	r3, r7, #7
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	223f      	movs	r2, #63	@ 0x3f
 8001a4e:	21d0      	movs	r1, #208	@ 0xd0
 8001a50:	f00d f9c2 	bl	800edd8 <HAL_I2C_Mem_Read>
	return data;
 8001a54:	79fb      	ldrb	r3, [r7, #7]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	240000a0 	.word	0x240000a0

08001a64 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <MPU6050_GET_ACCEL_ZL+0x2c>)
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	9302      	str	r3, [sp, #8]
 8001a72:	2301      	movs	r3, #1
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	1dfb      	adds	r3, r7, #7
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	2240      	movs	r2, #64	@ 0x40
 8001a7e:	21d0      	movs	r1, #208	@ 0xd0
 8001a80:	f00d f9aa 	bl	800edd8 <HAL_I2C_Mem_Read>
	return data;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	240000a0 	.word	0x240000a0

08001a94 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <MPU6050_GET_GYRO_XH+0x2c>)
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	9302      	str	r3, [sp, #8]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	1dfb      	adds	r3, r7, #7
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	2243      	movs	r2, #67	@ 0x43
 8001aae:	21d0      	movs	r1, #208	@ 0xd0
 8001ab0:	f00d f992 	bl	800edd8 <HAL_I2C_Mem_Read>
	return data;
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	240000a0 	.word	0x240000a0

08001ac4 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <MPU6050_GET_GYRO_XL+0x2c>)
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	9302      	str	r3, [sp, #8]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	2244      	movs	r2, #68	@ 0x44
 8001ade:	21d0      	movs	r1, #208	@ 0xd0
 8001ae0:	f00d f97a 	bl	800edd8 <HAL_I2C_Mem_Read>
	return data;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	240000a0 	.word	0x240000a0

08001af4 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <MPU6050_GET_GYRO_YH+0x2c>)
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	2301      	movs	r3, #1
 8001b00:	9302      	str	r3, [sp, #8]
 8001b02:	2301      	movs	r3, #1
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	2245      	movs	r2, #69	@ 0x45
 8001b0e:	21d0      	movs	r1, #208	@ 0xd0
 8001b10:	f00d f962 	bl	800edd8 <HAL_I2C_Mem_Read>
	return data;
 8001b14:	79fb      	ldrb	r3, [r7, #7]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	240000a0 	.word	0x240000a0

08001b24 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <MPU6050_GET_GYRO_YL+0x2c>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	9302      	str	r3, [sp, #8]
 8001b32:	2301      	movs	r3, #1
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	1dfb      	adds	r3, r7, #7
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	2246      	movs	r2, #70	@ 0x46
 8001b3e:	21d0      	movs	r1, #208	@ 0xd0
 8001b40:	f00d f94a 	bl	800edd8 <HAL_I2C_Mem_Read>
	return data;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	240000a0 	.word	0x240000a0

08001b54 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <MPU6050_GET_GYRO_ZH+0x2c>)
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	2301      	movs	r3, #1
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	1dfb      	adds	r3, r7, #7
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2247      	movs	r2, #71	@ 0x47
 8001b6e:	21d0      	movs	r1, #208	@ 0xd0
 8001b70:	f00d f932 	bl	800edd8 <HAL_I2C_Mem_Read>
	return data;
 8001b74:	79fb      	ldrb	r3, [r7, #7]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	240000a0 	.word	0x240000a0

08001b84 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <MPU6050_GET_GYRO_ZL+0x2c>)
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	2301      	movs	r3, #1
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	2248      	movs	r2, #72	@ 0x48
 8001b9e:	21d0      	movs	r1, #208	@ 0xd0
 8001ba0:	f00d f91a 	bl	800edd8 <HAL_I2C_Mem_Read>
	return data;
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	240000a0 	.word	0x240000a0

08001bb4 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9302      	str	r3, [sp, #8]
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2301      	movs	r3, #1
 8001bcc:	223b      	movs	r2, #59	@ 0x3b
 8001bce:	21d0      	movs	r1, #208	@ 0xd0
 8001bd0:	f00d f902 	bl	800edd8 <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001bd4:	793b      	ldrb	r3, [r7, #4]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	797b      	ldrb	r3, [r7, #5]
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	4313      	orrs	r3, r2
 8001be0:	80fb      	strh	r3, [r7, #6]
	return data;
 8001be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	240000a0 	.word	0x240000a0

08001bf4 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001bfa:	f7ff feeb 	bl	80019d4 <MPU6050_GET_ACCEL_YH>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b21c      	sxth	r4, r3
 8001c04:	f7ff fefe 	bl	8001a04 <MPU6050_GET_ACCEL_YL>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	4323      	orrs	r3, r4
 8001c0e:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}

08001c1c <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001c22:	f7ff ff07 	bl	8001a34 <MPU6050_GET_ACCEL_ZH>
 8001c26:	4603      	mov	r3, r0
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	b21c      	sxth	r4, r3
 8001c2c:	f7ff ff1a 	bl	8001a64 <MPU6050_GET_ACCEL_ZL>
 8001c30:	4603      	mov	r3, r0
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	4323      	orrs	r3, r4
 8001c36:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}

08001c44 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001c4a:	f7ff ff23 	bl	8001a94 <MPU6050_GET_GYRO_XH>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	b21c      	sxth	r4, r3
 8001c54:	f7ff ff36 	bl	8001ac4 <MPU6050_GET_GYRO_XL>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	4323      	orrs	r3, r4
 8001c5e:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd90      	pop	{r4, r7, pc}

08001c6c <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001c72:	f7ff ff3f 	bl	8001af4 <MPU6050_GET_GYRO_YH>
 8001c76:	4603      	mov	r3, r0
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21c      	sxth	r4, r3
 8001c7c:	f7ff ff52 	bl	8001b24 <MPU6050_GET_GYRO_YL>
 8001c80:	4603      	mov	r3, r0
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	4323      	orrs	r3, r4
 8001c86:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd90      	pop	{r4, r7, pc}

08001c94 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001c9a:	f7ff ff5b 	bl	8001b54 <MPU6050_GET_GYRO_ZH>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b21c      	sxth	r4, r3
 8001ca4:	f7ff ff6e 	bl	8001b84 <MPU6050_GET_GYRO_ZL>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	4323      	orrs	r3, r4
 8001cae:	80fb      	strh	r3, [r7, #6]
	return data;
 8001cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd90      	pop	{r4, r7, pc}

08001cbc <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001cc2:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <MPU6050_READ_ID+0x2c>)
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	9302      	str	r3, [sp, #8]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	1dfb      	adds	r3, r7, #7
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	2275      	movs	r2, #117	@ 0x75
 8001cd6:	21d0      	movs	r1, #208	@ 0xd0
 8001cd8:	f00d f87e 	bl	800edd8 <HAL_I2C_Mem_Read>
	return data;
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	b25b      	sxtb	r3, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	240000a0 	.word	0x240000a0

08001cec <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001cf6:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	1dfb      	adds	r3, r7, #7
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2301      	movs	r3, #1
 8001d08:	2237      	movs	r2, #55	@ 0x37
 8001d0a:	21d0      	movs	r1, #208	@ 0xd0
 8001d0c:	f00c ff50 	bl	800ebb0 <HAL_I2C_Mem_Write>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	240000a0 	.word	0x240000a0
 8001d1c:	00000000 	.word	0x00000000

08001d20 <Complementary_getFilter>:
	*VerVel += (VerAcc*looptime);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	61f8      	str	r0, [r7, #28]
 8001d28:	ed87 0a06 	vstr	s0, [r7, #24]
 8001d2c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001d30:	ed87 1a04 	vstr	s2, [r7, #16]
 8001d34:	edc7 1a03 	vstr	s3, [r7, #12]
 8001d38:	ed87 2a02 	vstr	s4, [r7, #8]
 8001d3c:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang)+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));//
 8001d40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d48:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8001e08 <Complementary_getFilter+0xe8>
 8001d4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d50:	4b31      	ldr	r3, [pc, #196]	@ (8001e18 <Complementary_getFilter+0xf8>)
 8001d52:	ed93 7a00 	vldr	s14, [r3]
 8001d56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d6c:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001e10 <Complementary_getFilter+0xf0>
 8001d70:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001d74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang)+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001d82:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d8a:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001e08 <Complementary_getFilter+0xe8>
 8001d8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d92:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <Complementary_getFilter+0xf8>)
 8001d94:	ed93 7a00 	vldr	s14, [r3]
 8001d98:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001daa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dae:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001e10 <Complementary_getFilter+0xf0>
 8001db2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001db6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001dba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (((gz_ang*looptime)+Complementary_Filter_st->oz));//todo add magnetomiter?
 8001dc4:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <Complementary_getFilter+0xf8>)
 8001dc6:	ed93 7a00 	vldr	s14, [r3]
 8001dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001dfa:	bf00      	nop
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	47ae147b 	.word	0x47ae147b
 8001e0c:	3f947ae1 	.word	0x3f947ae1
 8001e10:	f5c28f5c 	.word	0xf5c28f5c
 8001e14:	3fef5c28 	.word	0x3fef5c28
 8001e18:	0801f294 	.word	0x0801f294

08001e1c <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f007 fcb6 	bl	8009798 <HAL_Delay>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <nRF24_SendSpi+0x28>)
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	f012 ff3b 	bl	8014cc8 <HAL_SPI_Transmit>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	240000a4 	.word	0x240000a4

08001e60 <nRF24_SendSpi_IT>:
static void nRF24_SendSpi_IT(uint8_t *Data, uint8_t Length)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit_IT(hspi_nrf, Data, Length);
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <nRF24_SendSpi_IT+0x24>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	b292      	uxth	r2, r2
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f013 fec0 	bl	8015bfc <HAL_SPI_Transmit_IT>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	240000a4 	.word	0x240000a4

08001e88 <nRF24_ReadSpi>:


static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <nRF24_ReadSpi+0x28>)
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	f013 f8ff 	bl	80150a4 <HAL_SPI_Receive>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	240000a4 	.word	0x240000a4

08001eb4 <nRF24_ReadSpi_IT>:
static void nRF24_ReadSpi_IT(uint8_t *Data, uint8_t Length)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive_IT(hspi_nrf, Data, Length);
 8001ec0:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <nRF24_ReadSpi_IT+0x24>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	b292      	uxth	r2, r2
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f013 ff40 	bl	8015d50 <HAL_SPI_Receive_IT>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	240000a4 	.word	0x240000a4

08001edc <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001eea:	2200      	movs	r2, #0
 8001eec:	2180      	movs	r1, #128	@ 0x80
 8001eee:	480c      	ldr	r0, [pc, #48]	@ (8001f20 <nRF24_ReadRegister+0x44>)
 8001ef0:	f00c fd8e 	bl	800ea10 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff9b 	bl	8001e34 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001efe:	f107 030f 	add.w	r3, r7, #15
 8001f02:	2101      	movs	r1, #1
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ffbf 	bl	8001e88 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2180      	movs	r1, #128	@ 0x80
 8001f0e:	4804      	ldr	r0, [pc, #16]	@ (8001f20 <nRF24_ReadRegister+0x44>)
 8001f10:	f00c fd7e 	bl	800ea10 <HAL_GPIO_WritePin>

	return result;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	58020400 	.word	0x58020400

08001f24 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
 8001f30:	4613      	mov	r3, r2
 8001f32:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2180      	movs	r1, #128	@ 0x80
 8001f3c:	480a      	ldr	r0, [pc, #40]	@ (8001f68 <nRF24_ReadRegisters+0x44>)
 8001f3e:	f00c fd67 	bl	800ea10 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001f42:	1dfb      	adds	r3, r7, #7
 8001f44:	2101      	movs	r1, #1
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff74 	bl	8001e34 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);//todo
 8001f4c:	79bb      	ldrb	r3, [r7, #6]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6838      	ldr	r0, [r7, #0]
 8001f52:	f7ff ff99 	bl	8001e88 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001f56:	2201      	movs	r2, #1
 8001f58:	2180      	movs	r1, #128	@ 0x80
 8001f5a:	4803      	ldr	r0, [pc, #12]	@ (8001f68 <nRF24_ReadRegisters+0x44>)
 8001f5c:	f00c fd58 	bl	800ea10 <HAL_GPIO_WritePin>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	58020400 	.word	0x58020400

08001f6c <nRF24_ReadRegisters_IT>:

static void nRF24_ReadRegisters_IT(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001f80:	2200      	movs	r2, #0
 8001f82:	2180      	movs	r1, #128	@ 0x80
 8001f84:	4808      	ldr	r0, [pc, #32]	@ (8001fa8 <nRF24_ReadRegisters_IT+0x3c>)
 8001f86:	f00c fd43 	bl	800ea10 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff50 	bl	8001e34 <nRF24_SendSpi>
	nRF24_ReadSpi_IT(ret, len);//todo
 8001f94:	79bb      	ldrb	r3, [r7, #6]
 8001f96:	4619      	mov	r1, r3
 8001f98:	6838      	ldr	r0, [r7, #0]
 8001f9a:	f7ff ff8b 	bl	8001eb4 <nRF24_ReadSpi_IT>

	//NRF24_Rx_Inte = 1;
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	58020400 	.word	0x58020400

08001fac <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	71fb      	strb	r3, [r7, #7]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f043 0320 	orr.w	r3, r3, #32
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001fc6:	79bb      	ldrb	r3, [r7, #6]
 8001fc8:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2180      	movs	r1, #128	@ 0x80
 8001fce:	4809      	ldr	r0, [pc, #36]	@ (8001ff4 <nRF24_WriteRegister+0x48>)
 8001fd0:	f00c fd1e 	bl	800ea10 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ff2a 	bl	8001e34 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	2180      	movs	r1, #128	@ 0x80
 8001fe4:	4803      	ldr	r0, [pc, #12]	@ (8001ff4 <nRF24_WriteRegister+0x48>)
 8001fe6:	f00c fd13 	bl	800ea10 <HAL_GPIO_WritePin>
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	58020400 	.word	0x58020400

08001ff8 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	71fb      	strb	r3, [r7, #7]
 8002004:	4613      	mov	r3, r2
 8002006:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	f043 0320 	orr.w	r3, r3, #32
 800200e:	b2db      	uxtb	r3, r3
 8002010:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002012:	2200      	movs	r2, #0
 8002014:	2180      	movs	r1, #128	@ 0x80
 8002016:	480b      	ldr	r0, [pc, #44]	@ (8002044 <nRF24_WriteRegisters+0x4c>)
 8002018:	f00c fcfa 	bl	800ea10 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	2101      	movs	r1, #1
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff07 	bl	8001e34 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8002026:	79bb      	ldrb	r3, [r7, #6]
 8002028:	4619      	mov	r1, r3
 800202a:	6838      	ldr	r0, [r7, #0]
 800202c:	f7ff ff02 	bl	8001e34 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8002030:	2201      	movs	r2, #1
 8002032:	2180      	movs	r1, #128	@ 0x80
 8002034:	4803      	ldr	r0, [pc, #12]	@ (8002044 <nRF24_WriteRegisters+0x4c>)
 8002036:	f00c fceb 	bl	800ea10 <HAL_GPIO_WritePin>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	58020400 	.word	0x58020400

08002048 <nRF24_WriteRegisters_IT>:

static void nRF24_WriteRegisters_IT(uint8_t reg, uint8_t* val, uint8_t len)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	4613      	mov	r3, r2
 8002056:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f043 0320 	orr.w	r3, r3, #32
 800205e:	b2db      	uxtb	r3, r3
 8002060:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002062:	2200      	movs	r2, #0
 8002064:	2180      	movs	r1, #128	@ 0x80
 8002066:	480a      	ldr	r0, [pc, #40]	@ (8002090 <nRF24_WriteRegisters_IT+0x48>)
 8002068:	f00c fcd2 	bl	800ea10 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800206c:	1dfb      	adds	r3, r7, #7
 800206e:	2101      	movs	r1, #1
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fedf 	bl	8001e34 <nRF24_SendSpi>
	nRF24_SendSpi_IT(val, len);
 8002076:	79bb      	ldrb	r3, [r7, #6]
 8002078:	4619      	mov	r1, r3
 800207a:	6838      	ldr	r0, [r7, #0]
 800207c:	f7ff fef0 	bl	8001e60 <nRF24_SendSpi_IT>

	NRF24_Tx_Inte = 1;
 8002080:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <nRF24_WriteRegisters_IT+0x4c>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
	//NRF24_CSN_HIGH;
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	58020400 	.word	0x58020400
 8002094:	00000180 	.word	0x00000180

08002098 <nRF24_RX_Mode>:



void nRF24_RX_Mode(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 800209e:	f000 f84d 	bl	800213c <nRF24_ReadConfig>
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 80020a6:	4910      	ldr	r1, [pc, #64]	@ (80020e8 <nRF24_RX_Mode+0x50>)
 80020a8:	2000      	movs	r0, #0
 80020aa:	f000 f9f6 	bl	800249a <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f843 	bl	800214c <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80020c6:	2070      	movs	r0, #112	@ 0x70
 80020c8:	f000 f89b 	bl	8002202 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80020cc:	f000 f8a8 	bl	8002220 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80020d0:	f000 f8c0 	bl	8002254 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 80020d4:	2201      	movs	r2, #1
 80020d6:	2140      	movs	r1, #64	@ 0x40
 80020d8:	4804      	ldr	r0, [pc, #16]	@ (80020ec <nRF24_RX_Mode+0x54>)
 80020da:	f00c fc99 	bl	800ea10 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	240000a8 	.word	0x240000a8
 80020ec:	58020400 	.word	0x58020400

080020f0 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 80020f6:	2200      	movs	r2, #0
 80020f8:	2140      	movs	r1, #64	@ 0x40
 80020fa:	480f      	ldr	r0, [pc, #60]	@ (8002138 <nRF24_TX_Mode+0x48>)
 80020fc:	f00c fc88 	bl	800ea10 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8002100:	f000 f81c 	bl	800213c <nRF24_ReadConfig>
 8002104:	4603      	mov	r3, r0
 8002106:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f816 	bl	800214c <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002120:	2070      	movs	r0, #112	@ 0x70
 8002122:	f000 f86e 	bl	8002202 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8002126:	f000 f87b 	bl	8002220 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 800212a:	f000 f893 	bl	8002254 <nRF24_FlushTX>
	//important wait 2ms for next interactionw with NRF24
	//nRF24_Delay(1);
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	58020400 	.word	0x58020400

0800213c <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff fecb 	bl	8001edc <nRF24_ReadRegister>
 8002146:	4603      	mov	r3, r0
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}

0800214c <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	4619      	mov	r1, r3
 800215a:	2000      	movs	r0, #0
 800215c:	f7ff ff26 	bl	8001fac <nRF24_WriteRegister>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002172:	2006      	movs	r0, #6
 8002174:	f7ff feb2 	bl	8001edc <nRF24_ReadRegister>
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	f023 0307 	bic.w	r3, r3, #7
 8002182:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	b25a      	sxtb	r2, r3
 800218a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218e:	4313      	orrs	r3, r2
 8002190:	b25b      	sxtb	r3, r3
 8002192:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	4619      	mov	r1, r3
 8002198:	2006      	movs	r0, #6
 800219a:	f7ff ff07 	bl	8001fac <nRF24_WriteRegister>
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80021b0:	2006      	movs	r0, #6
 80021b2:	f7ff fe93 	bl	8001edc <nRF24_ReadRegister>
 80021b6:	4603      	mov	r3, r0
 80021b8:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80021c0:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d104      	bne.n	80021d2 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	f043 0320 	orr.w	r3, r3, #32
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e006      	b.n	80021e0 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d103      	bne.n	80021e0 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	4619      	mov	r1, r3
 80021e4:	2006      	movs	r0, #6
 80021e6:	f7ff fee1 	bl	8001fac <nRF24_WriteRegister>
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 80021f6:	2007      	movs	r0, #7
 80021f8:	f7ff fe70 	bl	8001edc <nRF24_ReadRegister>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	bd80      	pop	{r7, pc}

08002202 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	4619      	mov	r1, r3
 8002210:	2007      	movs	r0, #7
 8002212:	f7ff fecb 	bl	8001fac <nRF24_WriteRegister>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8002226:	23e2      	movs	r3, #226	@ 0xe2
 8002228:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800222a:	2200      	movs	r2, #0
 800222c:	2180      	movs	r1, #128	@ 0x80
 800222e:	4808      	ldr	r0, [pc, #32]	@ (8002250 <nRF24_FlushRX+0x30>)
 8002230:	f00c fbee 	bl	800ea10 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	2101      	movs	r1, #1
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fdfb 	bl	8001e34 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800223e:	2201      	movs	r2, #1
 8002240:	2180      	movs	r1, #128	@ 0x80
 8002242:	4803      	ldr	r0, [pc, #12]	@ (8002250 <nRF24_FlushRX+0x30>)
 8002244:	f00c fbe4 	bl	800ea10 <HAL_GPIO_WritePin>
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	58020400 	.word	0x58020400

08002254 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 800225a:	23e1      	movs	r3, #225	@ 0xe1
 800225c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800225e:	2200      	movs	r2, #0
 8002260:	2180      	movs	r1, #128	@ 0x80
 8002262:	4808      	ldr	r0, [pc, #32]	@ (8002284 <nRF24_FlushTX+0x30>)
 8002264:	f00c fbd4 	bl	800ea10 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002268:	1dfb      	adds	r3, r7, #7
 800226a:	2101      	movs	r1, #1
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fde1 	bl	8001e34 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002272:	2201      	movs	r2, #1
 8002274:	2180      	movs	r1, #128	@ 0x80
 8002276:	4803      	ldr	r0, [pc, #12]	@ (8002284 <nRF24_FlushTX+0x30>)
 8002278:	f00c fbca 	bl	800ea10 <HAL_GPIO_WritePin>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	58020400 	.word	0x58020400

08002288 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002292:	f7ff ff53 	bl	800213c <nRF24_ReadConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d004      	beq.n	80022aa <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	f043 0308 	orr.w	r3, r3, #8
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	e003      	b.n	80022b2 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	f023 0308 	bic.w	r3, r3, #8
 80022b0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff49 	bl	800214c <nRF24_WriteConfig>
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80022cc:	f7ff ff36 	bl	800213c <nRF24_ReadConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d104      	bne.n	80022e4 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	e003      	b.n	80022ec <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	f023 0304 	bic.w	r3, r3, #4
 80022ea:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff2c 	bl	800214c <nRF24_WriteConfig>
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	460a      	mov	r2, r1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4613      	mov	r3, r2
 800230a:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	b25a      	sxtb	r2, r3
 8002312:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	b25b      	sxtb	r3, r3
 800231c:	4313      	orrs	r3, r2
 800231e:	b25b      	sxtb	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4619      	mov	r1, r3
 8002324:	2004      	movs	r0, #4
 8002326:	f7ff fe41 	bl	8001fac <nRF24_WriteRegister>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002342:	b2db      	uxtb	r3, r3
 8002344:	4619      	mov	r1, r3
 8002346:	2005      	movs	r0, #5
 8002348:	f7ff fe30 	bl	8001fac <nRF24_WriteRegister>
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	460a      	mov	r2, r1
 800235e:	71fb      	strb	r3, [r7, #7]
 8002360:	4613      	mov	r3, r2
 8002362:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	2b05      	cmp	r3, #5
 8002368:	d901      	bls.n	800236e <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 800236a:	2305      	movs	r3, #5
 800236c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	3311      	adds	r3, #17
 8002372:	b2da      	uxtb	r2, r3
 8002374:	79bb      	ldrb	r3, [r7, #6]
 8002376:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800237a:	b2db      	uxtb	r3, r3
 800237c:	4619      	mov	r1, r3
 800237e:	4610      	mov	r0, r2
 8002380:	f7ff fe14 	bl	8001fac <nRF24_WriteRegister>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	460a      	mov	r2, r1
 8002396:	71fb      	strb	r3, [r7, #7]
 8002398:	4613      	mov	r3, r2
 800239a:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	2b05      	cmp	r3, #5
 80023a0:	d901      	bls.n	80023a6 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 80023a2:	2305      	movs	r3, #5
 80023a4:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80023a6:	2002      	movs	r0, #2
 80023a8:	f7ff fd98 	bl	8001edc <nRF24_ReadRegister>
 80023ac:	4603      	mov	r3, r0
 80023ae:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80023b0:	79bb      	ldrb	r3, [r7, #6]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d10a      	bne.n	80023cc <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	2201      	movs	r2, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	b25a      	sxtb	r2, r3
 80023c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	e00b      	b.n	80023e4 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	2201      	movs	r2, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	b25a      	sxtb	r2, r3
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4013      	ands	r3, r2
 80023e0:	b25b      	sxtb	r3, r3
 80023e2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	4619      	mov	r1, r3
 80023e8:	2002      	movs	r0, #2
 80023ea:	f7ff fddf 	bl	8001fac <nRF24_WriteRegister>
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	460a      	mov	r2, r1
 8002400:	71fb      	strb	r3, [r7, #7]
 8002402:	4613      	mov	r3, r2
 8002404:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d901      	bls.n	8002410 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 800240c:	2305      	movs	r3, #5
 800240e:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002410:	2001      	movs	r0, #1
 8002412:	f7ff fd63 	bl	8001edc <nRF24_ReadRegister>
 8002416:	4603      	mov	r3, r0
 8002418:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800241a:	79bb      	ldrb	r3, [r7, #6]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d10a      	bne.n	8002436 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	2201      	movs	r2, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	b25a      	sxtb	r2, r3
 800242a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242e:	4313      	orrs	r3, r2
 8002430:	b25b      	sxtb	r3, r3
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e00b      	b.n	800244e <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	2201      	movs	r2, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	b25b      	sxtb	r3, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	b25a      	sxtb	r2, r3
 8002444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002448:	4013      	ands	r3, r2
 800244a:	b25b      	sxtb	r3, r3
 800244c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	4619      	mov	r1, r3
 8002452:	2001      	movs	r0, #1
 8002454:	f7ff fdaa 	bl	8001fac <nRF24_WriteRegister>
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2b05      	cmp	r3, #5
 800246e:	d901      	bls.n	8002474 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8002470:	2305      	movs	r3, #5
 8002472:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d801      	bhi.n	800247e <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 800247a:	2303      	movs	r3, #3
 800247c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	3b02      	subs	r3, #2
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4619      	mov	r1, r3
 800248c:	2003      	movs	r0, #3
 800248e:	f7ff fd8d 	bl	8001fac <nRF24_WriteRegister>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	6039      	str	r1, [r7, #0]
 80024a4:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <nRF24_SetRXAddress+0x18>
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d11d      	bne.n	80024ee <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e00d      	b.n	80024d4 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	441a      	add	r2, r3
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	f1c3 0302 	rsb	r3, r3, #2
 80024c4:	7812      	ldrb	r2, [r2, #0]
 80024c6:	3310      	adds	r3, #16
 80024c8:	443b      	add	r3, r7
 80024ca:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	3301      	adds	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d9ee      	bls.n	80024b8 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	330a      	adds	r3, #10
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f107 010c 	add.w	r1, r7, #12
 80024e4:	2203      	movs	r2, #3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fd86 	bl	8001ff8 <nRF24_WriteRegisters>
	{
 80024ec:	e00a      	b.n	8002504 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	330a      	adds	r3, #10
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	3302      	adds	r3, #2
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	4619      	mov	r1, r3
 80024fc:	4610      	mov	r0, r2
 80024fe:	f7ff fd55 	bl	8001fac <nRF24_WriteRegister>
}
 8002502:	bf00      	nop
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002514:	f107 030c 	add.w	r3, r7, #12
 8002518:	2203      	movs	r2, #3
 800251a:	4619      	mov	r1, r3
 800251c:	200a      	movs	r0, #10
 800251e:	f7ff fd01 	bl	8001f24 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	e00c      	b.n	8002542 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	f1c3 0302 	rsb	r3, r3, #2
 8002530:	3210      	adds	r2, #16
 8002532:	443a      	add	r2, r7
 8002534:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8002538:	4a16      	ldr	r2, [pc, #88]	@ (8002594 <nRF24_SetTXAddress+0x88>)
 800253a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	3301      	adds	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d9ef      	bls.n	8002528 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e00d      	b.n	800256a <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	441a      	add	r2, r3
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	f1c3 0302 	rsb	r3, r3, #2
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	3310      	adds	r3, #16
 800255e:	443b      	add	r3, r7
 8002560:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	3301      	adds	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d9ee      	bls.n	800254e <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8002570:	f107 030c 	add.w	r3, r7, #12
 8002574:	2203      	movs	r2, #3
 8002576:	4619      	mov	r1, r3
 8002578:	200a      	movs	r0, #10
 800257a:	f7ff fd3d 	bl	8001ff8 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	2203      	movs	r2, #3
 8002584:	4619      	mov	r1, r3
 8002586:	2010      	movs	r0, #16
 8002588:	f7ff fd36 	bl	8001ff8 <nRF24_WriteRegisters>

}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	240000a8 	.word	0x240000a8

08002598 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 800259e:	f7ff fe28 	bl	80021f2 <nRF24_ReadStatus>
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80025ac:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fe26 	bl	8002202 <nRF24_WriteStatus>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80025c8:	f7ff fdb8 	bl	800213c <nRF24_ReadConfig>
 80025cc:	4603      	mov	r3, r0
 80025ce:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d104      	bne.n	80025e0 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025dc:	73fb      	strb	r3, [r7, #15]
 80025de:	e003      	b.n	80025e8 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025e6:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fdae 	bl	800214c <nRF24_WriteConfig>
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002602:	f7ff fd9b 	bl	800213c <nRF24_ReadConfig>
 8002606:	4603      	mov	r3, r0
 8002608:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d104      	bne.n	800261a <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	f043 0320 	orr.w	r3, r3, #32
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	e003      	b.n	8002622 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	f023 0320 	bic.w	r3, r3, #32
 8002620:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fd91 	bl	800214c <nRF24_WriteConfig>
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800263c:	f7ff fd7e 	bl	800213c <nRF24_ReadConfig>
 8002640:	4603      	mov	r3, r0
 8002642:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d104      	bne.n	8002654 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	f043 0310 	orr.w	r3, r3, #16
 8002650:	73fb      	strb	r3, [r7, #15]
 8002652:	e003      	b.n	800265c <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	f023 0310 	bic.w	r3, r3, #16
 800265a:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fd74 	bl	800214c <nRF24_WriteConfig>
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002674:	2220      	movs	r2, #32
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	20a0      	movs	r0, #160	@ 0xa0
 800267a:	f7ff fcbd 	bl	8001ff8 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <nRF24_WriteTXPayload_IT>:

void nRF24_WriteTXPayload_IT(uint8_t * data)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters_IT(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800268e:	2220      	movs	r2, #32
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	20a0      	movs	r0, #160	@ 0xa0
 8002694:	f7ff fcd8 	bl	8002048 <nRF24_WriteRegisters_IT>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80026a6:	2201      	movs	r2, #1
 80026a8:	2140      	movs	r1, #64	@ 0x40
 80026aa:	4810      	ldr	r0, [pc, #64]	@ (80026ec <nRF24_WaitTX+0x4c>)
 80026ac:	f00c f9b0 	bl	800ea10 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 80026b0:	2001      	movs	r0, #1
 80026b2:	f7ff fbb3 	bl	8001e1c <nRF24_Delay>
	NRF24_CE_LOW;
 80026b6:	2200      	movs	r2, #0
 80026b8:	2140      	movs	r1, #64	@ 0x40
 80026ba:	480c      	ldr	r0, [pc, #48]	@ (80026ec <nRF24_WaitTX+0x4c>)
 80026bc:	f00c f9a8 	bl	800ea10 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7ff fbab 	bl	8001e1c <nRF24_Delay>
		status = nRF24_ReadStatus();
 80026c6:	f7ff fd94 	bl	80021f2 <nRF24_ReadStatus>
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d104      	bne.n	80026e2 <nRF24_WaitTX+0x42>
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ee      	beq.n	80026c0 <nRF24_WaitTX+0x20>

}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	58020400 	.word	0x58020400

080026f0 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);//todo
 80026f8:	2220      	movs	r2, #32
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	2061      	movs	r0, #97	@ 0x61
 80026fe:	f7ff fc11 	bl	8001f24 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002702:	2140      	movs	r1, #64	@ 0x40
 8002704:	2007      	movs	r0, #7
 8002706:	f7ff fc51 	bl	8001fac <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800270a:	f7ff fd72 	bl	80021f2 <nRF24_ReadStatus>
 800270e:	4603      	mov	r3, r0
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002718:	2120      	movs	r1, #32
 800271a:	2007      	movs	r0, #7
 800271c:	f7ff fc46 	bl	8001fac <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <nRF24_ReadRXPaylaod_IT>:

void nRF24_ReadRXPaylaod_IT(uint8_t *data){
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters_IT(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);//todo
 8002730:	2220      	movs	r2, #32
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	2061      	movs	r0, #97	@ 0x61
 8002736:	f7ff fc19 	bl	8001f6c <nRF24_ReadRegisters_IT>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 800273a:	2140      	movs	r1, #64	@ 0x40
 800273c:	2007      	movs	r0, #7
 800273e:	f7ff fc35 	bl	8001fac <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 8002742:	f7ff fd56 	bl	80021f2 <nRF24_ReadStatus>
 8002746:	4603      	mov	r3, r0
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <nRF24_ReadRXPaylaod_IT+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002750:	2120      	movs	r1, #32
 8002752:	2007      	movs	r0, #7
 8002754:	f7ff fc2a 	bl	8001fac <nRF24_WriteRegister>
	}
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 800276a:	f000 f811 	bl	8002790 <nRF24_ReadFifoStatus>
 800276e:	4603      	mov	r3, r0
 8002770:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	fa42 f303 	asr.w	r3, r2, r3
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8002794:	2017      	movs	r0, #23
 8002796:	f7ff fba1 	bl	8001edc <nRF24_ReadRegister>
 800279a:	4603      	mov	r3, r0
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}

080027a0 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80027a8:	4a25      	ldr	r2, [pc, #148]	@ (8002840 <nRF24_Init+0xa0>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80027ae:	2200      	movs	r2, #0
 80027b0:	2140      	movs	r1, #64	@ 0x40
 80027b2:	4824      	ldr	r0, [pc, #144]	@ (8002844 <nRF24_Init+0xa4>)
 80027b4:	f00c f92c 	bl	800ea10 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80027b8:	2201      	movs	r2, #1
 80027ba:	2180      	movs	r1, #128	@ 0x80
 80027bc:	4821      	ldr	r0, [pc, #132]	@ (8002844 <nRF24_Init+0xa4>)
 80027be:	f00c f927 	bl	800ea10 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80027c2:	200a      	movs	r0, #10
 80027c4:	f006 ffe8 	bl	8009798 <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80027c8:	2003      	movs	r0, #3
 80027ca:	f7ff fccd 	bl	8002168 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 80027ce:	2001      	movs	r0, #1
 80027d0:	f7ff fce9 	bl	80021a6 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80027d4:	2001      	movs	r0, #1
 80027d6:	f7ff fd57 	bl	8002288 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80027da:	2000      	movs	r0, #0
 80027dc:	f7ff fd71 	bl	80022c2 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 80027e0:	2100      	movs	r1, #0
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7ff fd8a 	bl	80022fc <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 80027e8:	2100      	movs	r1, #0
 80027ea:	201c      	movs	r0, #28
 80027ec:	f7ff fbde 	bl	8001fac <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 80027f0:	2120      	movs	r1, #32
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7ff fdae 	bl	8002354 <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 80027f8:	200f      	movs	r0, #15
 80027fa:	f7ff fd9a 	bl	8002332 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80027fe:	2101      	movs	r1, #1
 8002800:	2000      	movs	r0, #0
 8002802:	f7ff fdc3 	bl	800238c <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8002806:	2101      	movs	r1, #1
 8002808:	2000      	movs	r0, #0
 800280a:	f7ff fdf4 	bl	80023f6 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 800280e:	2003      	movs	r0, #3
 8002810:	f7ff fe26 	bl	8002460 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 8002814:	2001      	movs	r0, #1
 8002816:	f006 ffbf 	bl	8009798 <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 800281a:	2001      	movs	r0, #1
 800281c:	f7ff fecf 	bl	80025be <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002820:	2000      	movs	r0, #0
 8002822:	f7ff fee9 	bl	80025f8 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8002826:	2000      	movs	r0, #0
 8002828:	f7ff ff03 	bl	8002632 <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 800282c:	2001      	movs	r0, #1
 800282e:	f006 ffb3 	bl	8009798 <HAL_Delay>

	nRF24_ClearInterrupts();
 8002832:	f7ff feb1 	bl	8002598 <nRF24_ClearInterrupts>


}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	240000a4 	.word	0x240000a4
 8002844:	58020400 	.word	0x58020400

08002848 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800284c:	f3bf 8f4f 	dsb	sy
}
 8002850:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <__NVIC_SystemReset+0x24>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800285a:	4904      	ldr	r1, [pc, #16]	@ (800286c <__NVIC_SystemReset+0x24>)
 800285c:	4b04      	ldr	r3, [pc, #16]	@ (8002870 <__NVIC_SystemReset+0x28>)
 800285e:	4313      	orrs	r3, r2
 8002860:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002862:	f3bf 8f4f 	dsb	sy
}
 8002866:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <__NVIC_SystemReset+0x20>
 800286c:	e000ed00 	.word	0xe000ed00
 8002870:	05fa0004 	.word	0x05fa0004

08002874 <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	75fb      	strb	r3, [r7, #23]
 800287e:	2300      	movs	r3, #0
 8002880:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 8002882:	4b1f      	ldr	r3, [pc, #124]	@ (8002900 <interpretcommand+0x8c>)
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	e02e      	b.n	80028ec <interpretcommand+0x78>

		if(words[j] == ' '){
 800288e:	4a1d      	ldr	r2, [pc, #116]	@ (8002904 <interpretcommand+0x90>)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b20      	cmp	r3, #32
 8002898:	d102      	bne.n	80028a0 <interpretcommand+0x2c>
			vcount++;
 800289a:	7dfb      	ldrb	r3, [r7, #23]
 800289c:	3301      	adds	r3, #1
 800289e:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <interpretcommand+0x44>
			command[j] = words[j];
 80028a6:	4a17      	ldr	r2, [pc, #92]	@ (8002904 <interpretcommand+0x90>)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	7819      	ldrb	r1, [r3, #0]
 80028ae:	4a16      	ldr	r2, [pc, #88]	@ (8002908 <interpretcommand+0x94>)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4413      	add	r3, r2
 80028b4:	460a      	mov	r2, r1
 80028b6:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d113      	bne.n	80028e6 <interpretcommand+0x72>
			value1[J1] = words[j];
 80028be:	7dbb      	ldrb	r3, [r7, #22]
 80028c0:	4910      	ldr	r1, [pc, #64]	@ (8002904 <interpretcommand+0x90>)
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	440a      	add	r2, r1
 80028c6:	7812      	ldrb	r2, [r2, #0]
 80028c8:	3318      	adds	r3, #24
 80028ca:	443b      	add	r3, r7
 80028cc:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 80028d0:	7dba      	ldrb	r2, [r7, #22]
 80028d2:	7dbb      	ldrb	r3, [r7, #22]
 80028d4:	3218      	adds	r2, #24
 80028d6:	443a      	add	r2, r7
 80028d8:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80028dc:	4a0b      	ldr	r2, [pc, #44]	@ (800290c <interpretcommand+0x98>)
 80028de:	54d1      	strb	r1, [r2, r3]
			J1++;
 80028e0:	7dbb      	ldrb	r3, [r7, #22]
 80028e2:	3301      	adds	r3, #1
 80028e4:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	3301      	adds	r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b4f      	cmp	r3, #79	@ 0x4f
 80028f0:	ddcd      	ble.n	800288e <interpretcommand+0x1a>
		}
	}
}
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	000041e6 	.word	0x000041e6
 8002904:	000041dc 	.word	0x000041dc
 8002908:	000041d8 	.word	0x000041d8
 800290c:	000041c8 	.word	0x000041c8

08002910 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b50      	cmp	r3, #80	@ 0x50
 8002920:	d14c      	bne.n	80029bc <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002922:	4bd5      	ldr	r3, [pc, #852]	@ (8002c78 <executecommand+0x368>)
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800292e:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002c7c <executecommand+0x36c>
 8002932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002936:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002c80 <executecommand+0x370>
 800293a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800293e:	4bce      	ldr	r3, [pc, #824]	@ (8002c78 <executecommand+0x368>)
 8002940:	789b      	ldrb	r3, [r3, #2]
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294a:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002c7c <executecommand+0x36c>
 800294e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002952:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002956:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800295a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800295e:	4bc6      	ldr	r3, [pc, #792]	@ (8002c78 <executecommand+0x368>)
 8002960:	78db      	ldrb	r3, [r3, #3]
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296a:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002c7c <executecommand+0x36c>
 800296e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002972:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002976:	4bc0      	ldr	r3, [pc, #768]	@ (8002c78 <executecommand+0x368>)
 8002978:	791b      	ldrb	r3, [r3, #4]
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002982:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002c7c <executecommand+0x36c>
 8002986:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800298a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800298e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002992:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002996:	4bb8      	ldr	r3, [pc, #736]	@ (8002c78 <executecommand+0x368>)
 8002998:	795b      	ldrb	r3, [r3, #5]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a2:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002c7c <executecommand+0x36c>
 80029a6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029aa:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002c80 <executecommand+0x370>
 80029ae:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b6:	4bb3      	ldr	r3, [pc, #716]	@ (8002c84 <executecommand+0x374>)
 80029b8:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b49      	cmp	r3, #73	@ 0x49
 80029c2:	d14f      	bne.n	8002a64 <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029c4:	4bac      	ldr	r3, [pc, #688]	@ (8002c78 <executecommand+0x368>)
 80029c6:	785b      	ldrb	r3, [r3, #1]
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d0:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002c7c <executecommand+0x36c>
 80029d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029d8:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002c80 <executecommand+0x370>
 80029dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029e0:	4ba5      	ldr	r3, [pc, #660]	@ (8002c78 <executecommand+0x368>)
 80029e2:	789b      	ldrb	r3, [r3, #2]
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ec:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002c7c <executecommand+0x36c>
 80029f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029f4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80029f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a00:	4b9d      	ldr	r3, [pc, #628]	@ (8002c78 <executecommand+0x368>)
 8002a02:	78db      	ldrb	r3, [r3, #3]
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0c:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002c7c <executecommand+0x36c>
 8002a10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a18:	4b97      	ldr	r3, [pc, #604]	@ (8002c78 <executecommand+0x368>)
 8002a1a:	791b      	ldrb	r3, [r3, #4]
 8002a1c:	ee07 3a90 	vmov	s15, r3
 8002a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a24:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002c7c <executecommand+0x36c>
 8002a28:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a2c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a30:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a38:	4b8f      	ldr	r3, [pc, #572]	@ (8002c78 <executecommand+0x368>)
 8002a3a:	795b      	ldrb	r3, [r3, #5]
 8002a3c:	ee07 3a90 	vmov	s15, r3
 8002a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a44:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002c7c <executecommand+0x36c>
 8002a48:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a4c:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002c80 <executecommand+0x370>
 8002a50:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a58:	4b8b      	ldr	r3, [pc, #556]	@ (8002c88 <executecommand+0x378>)
 8002a5a:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 8002a5e:	4b8b      	ldr	r3, [pc, #556]	@ (8002c8c <executecommand+0x37c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b44      	cmp	r3, #68	@ 0x44
 8002a6a:	d14c      	bne.n	8002b06 <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002a6c:	4b82      	ldr	r3, [pc, #520]	@ (8002c78 <executecommand+0x368>)
 8002a6e:	785b      	ldrb	r3, [r3, #1]
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a78:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002c7c <executecommand+0x36c>
 8002a7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a80:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002c90 <executecommand+0x380>
 8002a84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a88:	4b7b      	ldr	r3, [pc, #492]	@ (8002c78 <executecommand+0x368>)
 8002a8a:	789b      	ldrb	r3, [r3, #2]
 8002a8c:	ee07 3a90 	vmov	s15, r3
 8002a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a94:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002c7c <executecommand+0x36c>
 8002a98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a9c:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002c80 <executecommand+0x370>
 8002aa0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002aa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aa8:	4b73      	ldr	r3, [pc, #460]	@ (8002c78 <executecommand+0x368>)
 8002aaa:	78db      	ldrb	r3, [r3, #3]
 8002aac:	ee07 3a90 	vmov	s15, r3
 8002ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab4:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002c7c <executecommand+0x36c>
 8002ab8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002abc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ac0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac8:	4b6b      	ldr	r3, [pc, #428]	@ (8002c78 <executecommand+0x368>)
 8002aca:	791b      	ldrb	r3, [r3, #4]
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad4:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002c7c <executecommand+0x36c>
 8002ad8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae0:	4b65      	ldr	r3, [pc, #404]	@ (8002c78 <executecommand+0x368>)
 8002ae2:	795b      	ldrb	r3, [r3, #5]
 8002ae4:	ee07 3a90 	vmov	s15, r3
 8002ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aec:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002c7c <executecommand+0x36c>
 8002af0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002af4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002af8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b00:	4b64      	ldr	r3, [pc, #400]	@ (8002c94 <executecommand+0x384>)
 8002b02:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b70      	cmp	r3, #112	@ 0x70
 8002b0c:	d14c      	bne.n	8002ba8 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002b0e:	4b5a      	ldr	r3, [pc, #360]	@ (8002c78 <executecommand+0x368>)
 8002b10:	785b      	ldrb	r3, [r3, #1]
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1a:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002c7c <executecommand+0x36c>
 8002b1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b22:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002c80 <executecommand+0x370>
 8002b26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b2a:	4b53      	ldr	r3, [pc, #332]	@ (8002c78 <executecommand+0x368>)
 8002b2c:	789b      	ldrb	r3, [r3, #2]
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b36:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002c7c <executecommand+0x36c>
 8002b3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b3e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002c78 <executecommand+0x368>)
 8002b4c:	78db      	ldrb	r3, [r3, #3]
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b56:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002c7c <executecommand+0x36c>
 8002b5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b62:	4b45      	ldr	r3, [pc, #276]	@ (8002c78 <executecommand+0x368>)
 8002b64:	791b      	ldrb	r3, [r3, #4]
 8002b66:	ee07 3a90 	vmov	s15, r3
 8002b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b6e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002c7c <executecommand+0x36c>
 8002b72:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b76:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002b7a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b82:	4b3d      	ldr	r3, [pc, #244]	@ (8002c78 <executecommand+0x368>)
 8002b84:	795b      	ldrb	r3, [r3, #5]
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b8e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002c7c <executecommand+0x36c>
 8002b92:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b96:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002c80 <executecommand+0x370>
 8002b9a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8002c98 <executecommand+0x388>)
 8002ba4:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b69      	cmp	r3, #105	@ 0x69
 8002bae:	d14f      	bne.n	8002c50 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002bb0:	4b31      	ldr	r3, [pc, #196]	@ (8002c78 <executecommand+0x368>)
 8002bb2:	785b      	ldrb	r3, [r3, #1]
 8002bb4:	ee07 3a90 	vmov	s15, r3
 8002bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bbc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002c7c <executecommand+0x36c>
 8002bc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bc4:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002c80 <executecommand+0x370>
 8002bc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8002c78 <executecommand+0x368>)
 8002bce:	789b      	ldrb	r3, [r3, #2]
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd8:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002c7c <executecommand+0x36c>
 8002bdc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002be0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002be4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bec:	4b22      	ldr	r3, [pc, #136]	@ (8002c78 <executecommand+0x368>)
 8002bee:	78db      	ldrb	r3, [r3, #3]
 8002bf0:	ee07 3a90 	vmov	s15, r3
 8002bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002c7c <executecommand+0x36c>
 8002bfc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c04:	4b1c      	ldr	r3, [pc, #112]	@ (8002c78 <executecommand+0x368>)
 8002c06:	791b      	ldrb	r3, [r3, #4]
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c10:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002c7c <executecommand+0x36c>
 8002c14:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c18:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c1c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c24:	4b14      	ldr	r3, [pc, #80]	@ (8002c78 <executecommand+0x368>)
 8002c26:	795b      	ldrb	r3, [r3, #5]
 8002c28:	ee07 3a90 	vmov	s15, r3
 8002c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c30:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002c7c <executecommand+0x36c>
 8002c34:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c38:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002c80 <executecommand+0x370>
 8002c3c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c44:	4b15      	ldr	r3, [pc, #84]	@ (8002c9c <executecommand+0x38c>)
 8002c46:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002c4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <executecommand+0x390>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b64      	cmp	r3, #100	@ 0x64
 8002c56:	d164      	bne.n	8002d22 <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002c58:	4b07      	ldr	r3, [pc, #28]	@ (8002c78 <executecommand+0x368>)
 8002c5a:	785b      	ldrb	r3, [r3, #1]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c64:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002c7c <executecommand+0x36c>
 8002c68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c6c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002c90 <executecommand+0x380>
 8002c70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c74:	e016      	b.n	8002ca4 <executecommand+0x394>
 8002c76:	bf00      	nop
 8002c78:	000041c8 	.word	0x000041c8
 8002c7c:	42400000 	.word	0x42400000
 8002c80:	42c80000 	.word	0x42c80000
 8002c84:	000040f4 	.word	0x000040f4
 8002c88:	00004100 	.word	0x00004100
 8002c8c:	000040c4 	.word	0x000040c4
 8002c90:	447a0000 	.word	0x447a0000
 8002c94:	0000410c 	.word	0x0000410c
 8002c98:	00004154 	.word	0x00004154
 8002c9c:	00004160 	.word	0x00004160
 8002ca0:	000040d0 	.word	0x000040d0
 8002ca4:	4bd3      	ldr	r3, [pc, #844]	@ (8002ff4 <executecommand+0x6e4>)
 8002ca6:	789b      	ldrb	r3, [r3, #2]
 8002ca8:	ee07 3a90 	vmov	s15, r3
 8002cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb0:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002ff8 <executecommand+0x6e8>
 8002cb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cb8:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002ffc <executecommand+0x6ec>
 8002cbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cc4:	4bcb      	ldr	r3, [pc, #812]	@ (8002ff4 <executecommand+0x6e4>)
 8002cc6:	78db      	ldrb	r3, [r3, #3]
 8002cc8:	ee07 3a90 	vmov	s15, r3
 8002ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd0:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002ff8 <executecommand+0x6e8>
 8002cd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cd8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce4:	4bc3      	ldr	r3, [pc, #780]	@ (8002ff4 <executecommand+0x6e4>)
 8002ce6:	791b      	ldrb	r3, [r3, #4]
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf0:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002ff8 <executecommand+0x6e8>
 8002cf4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cfc:	4bbd      	ldr	r3, [pc, #756]	@ (8002ff4 <executecommand+0x6e4>)
 8002cfe:	795b      	ldrb	r3, [r3, #5]
 8002d00:	ee07 3a90 	vmov	s15, r3
 8002d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d08:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002ff8 <executecommand+0x6e8>
 8002d0c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d10:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d14:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1c:	4bb8      	ldr	r3, [pc, #736]	@ (8003000 <executecommand+0x6f0>)
 8002d1e:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b46      	cmp	r3, #70	@ 0x46
 8002d28:	d150      	bne.n	8002dcc <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002d2a:	4bb2      	ldr	r3, [pc, #712]	@ (8002ff4 <executecommand+0x6e4>)
 8002d2c:	785b      	ldrb	r3, [r3, #1]
 8002d2e:	ee07 3a90 	vmov	s15, r3
 8002d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d36:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002ff8 <executecommand+0x6e8>
 8002d3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d3e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8003004 <executecommand+0x6f4>
 8002d42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d46:	4bab      	ldr	r3, [pc, #684]	@ (8002ff4 <executecommand+0x6e4>)
 8002d48:	789b      	ldrb	r3, [r3, #2]
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d52:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002ff8 <executecommand+0x6e8>
 8002d56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d5a:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002ffc <executecommand+0x6ec>
 8002d5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d66:	4ba3      	ldr	r3, [pc, #652]	@ (8002ff4 <executecommand+0x6e4>)
 8002d68:	78db      	ldrb	r3, [r3, #3]
 8002d6a:	ee07 3a90 	vmov	s15, r3
 8002d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d72:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002ff8 <executecommand+0x6e8>
 8002d76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d7a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d86:	4b9b      	ldr	r3, [pc, #620]	@ (8002ff4 <executecommand+0x6e4>)
 8002d88:	791b      	ldrb	r3, [r3, #4]
 8002d8a:	ee07 3a90 	vmov	s15, r3
 8002d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d92:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002ff8 <executecommand+0x6e8>
 8002d96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9e:	4b95      	ldr	r3, [pc, #596]	@ (8002ff4 <executecommand+0x6e4>)
 8002da0:	795b      	ldrb	r3, [r3, #5]
 8002da2:	ee07 3a90 	vmov	s15, r3
 8002da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002daa:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002ff8 <executecommand+0x6e8>
 8002dae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002db2:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002db6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc2:	ee17 3a90 	vmov	r3, s15
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	4b8f      	ldr	r3, [pc, #572]	@ (8003008 <executecommand+0x6f8>)
 8002dca:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b66      	cmp	r3, #102	@ 0x66
 8002dd2:	d150      	bne.n	8002e76 <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002dd4:	4b87      	ldr	r3, [pc, #540]	@ (8002ff4 <executecommand+0x6e4>)
 8002dd6:	785b      	ldrb	r3, [r3, #1]
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de0:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002ff8 <executecommand+0x6e8>
 8002de4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002de8:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8003004 <executecommand+0x6f4>
 8002dec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002df0:	4b80      	ldr	r3, [pc, #512]	@ (8002ff4 <executecommand+0x6e4>)
 8002df2:	789b      	ldrb	r3, [r3, #2]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002ff8 <executecommand+0x6e8>
 8002e00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e04:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002ffc <executecommand+0x6ec>
 8002e08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e10:	4b78      	ldr	r3, [pc, #480]	@ (8002ff4 <executecommand+0x6e4>)
 8002e12:	78db      	ldrb	r3, [r3, #3]
 8002e14:	ee07 3a90 	vmov	s15, r3
 8002e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1c:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002ff8 <executecommand+0x6e8>
 8002e20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e24:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e30:	4b70      	ldr	r3, [pc, #448]	@ (8002ff4 <executecommand+0x6e4>)
 8002e32:	791b      	ldrb	r3, [r3, #4]
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002ff8 <executecommand+0x6e8>
 8002e40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e48:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff4 <executecommand+0x6e4>)
 8002e4a:	795b      	ldrb	r3, [r3, #5]
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e54:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002ff8 <executecommand+0x6e8>
 8002e58:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e5c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002e60:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6c:	ee17 3a90 	vmov	r3, s15
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b66      	ldr	r3, [pc, #408]	@ (800300c <executecommand+0x6fc>)
 8002e74:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b61      	cmp	r3, #97	@ 0x61
 8002e7c:	d14c      	bne.n	8002f18 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff4 <executecommand+0x6e4>)
 8002e80:	785b      	ldrb	r3, [r3, #1]
 8002e82:	ee07 3a90 	vmov	s15, r3
 8002e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8a:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002ff8 <executecommand+0x6e8>
 8002e8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e92:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002ffc <executecommand+0x6ec>
 8002e96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e9a:	4b56      	ldr	r3, [pc, #344]	@ (8002ff4 <executecommand+0x6e4>)
 8002e9c:	789b      	ldrb	r3, [r3, #2]
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea6:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002ff8 <executecommand+0x6e8>
 8002eaa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002eae:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002eb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eba:	4b4e      	ldr	r3, [pc, #312]	@ (8002ff4 <executecommand+0x6e4>)
 8002ebc:	78db      	ldrb	r3, [r3, #3]
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec6:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002ff8 <executecommand+0x6e8>
 8002eca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ece:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed2:	4b48      	ldr	r3, [pc, #288]	@ (8002ff4 <executecommand+0x6e4>)
 8002ed4:	791b      	ldrb	r3, [r3, #4]
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ede:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002ff8 <executecommand+0x6e8>
 8002ee2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ee6:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002eea:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002eee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ef2:	4b40      	ldr	r3, [pc, #256]	@ (8002ff4 <executecommand+0x6e4>)
 8002ef4:	795b      	ldrb	r3, [r3, #5]
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efe:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002ff8 <executecommand+0x6e8>
 8002f02:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f06:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002ffc <executecommand+0x6ec>
 8002f0a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f12:	4b3f      	ldr	r3, [pc, #252]	@ (8003010 <executecommand+0x700>)
 8002f14:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b62      	cmp	r3, #98	@ 0x62
 8002f1e:	d14f      	bne.n	8002fc0 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f20:	4b34      	ldr	r3, [pc, #208]	@ (8002ff4 <executecommand+0x6e4>)
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002ff8 <executecommand+0x6e8>
 8002f30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f34:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002ffc <executecommand+0x6ec>
 8002f38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff4 <executecommand+0x6e4>)
 8002f3e:	789b      	ldrb	r3, [r3, #2]
 8002f40:	ee07 3a90 	vmov	s15, r3
 8002f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f48:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002ff8 <executecommand+0x6e8>
 8002f4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f50:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f5c:	4b25      	ldr	r3, [pc, #148]	@ (8002ff4 <executecommand+0x6e4>)
 8002f5e:	78db      	ldrb	r3, [r3, #3]
 8002f60:	ee07 3a90 	vmov	s15, r3
 8002f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f68:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002ff8 <executecommand+0x6e8>
 8002f6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f74:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff4 <executecommand+0x6e4>)
 8002f76:	791b      	ldrb	r3, [r3, #4]
 8002f78:	ee07 3a90 	vmov	s15, r3
 8002f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f80:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002ff8 <executecommand+0x6e8>
 8002f84:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f88:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f8c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f94:	4b17      	ldr	r3, [pc, #92]	@ (8002ff4 <executecommand+0x6e4>)
 8002f96:	795b      	ldrb	r3, [r3, #5]
 8002f98:	ee07 3a90 	vmov	s15, r3
 8002f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa0:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002ff8 <executecommand+0x6e8>
 8002fa4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fa8:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002ffc <executecommand+0x6ec>
 8002fac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb4:	4b17      	ldr	r3, [pc, #92]	@ (8003014 <executecommand+0x704>)
 8002fb6:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002fba:	4b17      	ldr	r3, [pc, #92]	@ (8003018 <executecommand+0x708>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b63      	cmp	r3, #99	@ 0x63
 8002fc6:	d166      	bne.n	8003096 <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <executecommand+0x6e4>)
 8002fca:	785b      	ldrb	r3, [r3, #1]
 8002fcc:	ee07 3a90 	vmov	s15, r3
 8002fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd4:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ff8 <executecommand+0x6e8>
 8002fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fdc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003004 <executecommand+0x6f4>
 8002fe0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fe4:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <executecommand+0x6e4>)
 8002fe6:	789b      	ldrb	r3, [r3, #2]
 8002fe8:	ee07 3a90 	vmov	s15, r3
 8002fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff0:	e018      	b.n	8003024 <executecommand+0x714>
 8002ff2:	bf00      	nop
 8002ff4:	000041c8 	.word	0x000041c8
 8002ff8:	42400000 	.word	0x42400000
 8002ffc:	42c80000 	.word	0x42c80000
 8003000:	0000416c 	.word	0x0000416c
 8003004:	447a0000 	.word	0x447a0000
 8003008:	00004084 	.word	0x00004084
 800300c:	00004086 	.word	0x00004086
 8003010:	000040f8 	.word	0x000040f8
 8003014:	00004104 	.word	0x00004104
 8003018:	000040c8 	.word	0x000040c8
 800301c:	42400000 	.word	0x42400000
 8003020:	42c80000 	.word	0x42c80000
 8003024:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 800301c <executecommand+0x70c>
 8003028:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800302c:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8003020 <executecommand+0x710>
 8003030:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003034:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003038:	4bd5      	ldr	r3, [pc, #852]	@ (8003390 <executecommand+0xa80>)
 800303a:	78db      	ldrb	r3, [r3, #3]
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003044:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 8003394 <executecommand+0xa84>
 8003048:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800304c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003050:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003054:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003058:	4bcd      	ldr	r3, [pc, #820]	@ (8003390 <executecommand+0xa80>)
 800305a:	791b      	ldrb	r3, [r3, #4]
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003064:	eddf 6acb 	vldr	s13, [pc, #812]	@ 8003394 <executecommand+0xa84>
 8003068:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800306c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003070:	4bc7      	ldr	r3, [pc, #796]	@ (8003390 <executecommand+0xa80>)
 8003072:	795b      	ldrb	r3, [r3, #5]
 8003074:	ee07 3a90 	vmov	s15, r3
 8003078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800307c:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8003394 <executecommand+0xa84>
 8003080:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003084:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003088:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800308c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003090:	4bc1      	ldr	r3, [pc, #772]	@ (8003398 <executecommand+0xa88>)
 8003092:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b65      	cmp	r3, #101	@ 0x65
 800309c:	d14c      	bne.n	8003138 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800309e:	4bbc      	ldr	r3, [pc, #752]	@ (8003390 <executecommand+0xa80>)
 80030a0:	785b      	ldrb	r3, [r3, #1]
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030aa:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8003394 <executecommand+0xa84>
 80030ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030b2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 800339c <executecommand+0xa8c>
 80030b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ba:	4bb5      	ldr	r3, [pc, #724]	@ (8003390 <executecommand+0xa80>)
 80030bc:	789b      	ldrb	r3, [r3, #2]
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c6:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 8003394 <executecommand+0xa84>
 80030ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030ce:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030da:	4bad      	ldr	r3, [pc, #692]	@ (8003390 <executecommand+0xa80>)
 80030dc:	78db      	ldrb	r3, [r3, #3]
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e6:	eddf 6aab 	vldr	s13, [pc, #684]	@ 8003394 <executecommand+0xa84>
 80030ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f2:	4ba7      	ldr	r3, [pc, #668]	@ (8003390 <executecommand+0xa80>)
 80030f4:	791b      	ldrb	r3, [r3, #4]
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fe:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 8003394 <executecommand+0xa84>
 8003102:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003106:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800310a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800310e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003112:	4b9f      	ldr	r3, [pc, #636]	@ (8003390 <executecommand+0xa80>)
 8003114:	795b      	ldrb	r3, [r3, #5]
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311e:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8003394 <executecommand+0xa84>
 8003122:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003126:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 800339c <executecommand+0xa8c>
 800312a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800312e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003132:	4b9b      	ldr	r3, [pc, #620]	@ (80033a0 <executecommand+0xa90>)
 8003134:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b67      	cmp	r3, #103	@ 0x67
 800313e:	d14f      	bne.n	80031e0 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003140:	4b93      	ldr	r3, [pc, #588]	@ (8003390 <executecommand+0xa80>)
 8003142:	785b      	ldrb	r3, [r3, #1]
 8003144:	ee07 3a90 	vmov	s15, r3
 8003148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003394 <executecommand+0xa84>
 8003150:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003154:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800339c <executecommand+0xa8c>
 8003158:	ee27 7a87 	vmul.f32	s14, s15, s14
 800315c:	4b8c      	ldr	r3, [pc, #560]	@ (8003390 <executecommand+0xa80>)
 800315e:	789b      	ldrb	r3, [r3, #2]
 8003160:	ee07 3a90 	vmov	s15, r3
 8003164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003168:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003394 <executecommand+0xa84>
 800316c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003170:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003174:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800317c:	4b84      	ldr	r3, [pc, #528]	@ (8003390 <executecommand+0xa80>)
 800317e:	78db      	ldrb	r3, [r3, #3]
 8003180:	ee07 3a90 	vmov	s15, r3
 8003184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003188:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8003394 <executecommand+0xa84>
 800318c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003194:	4b7e      	ldr	r3, [pc, #504]	@ (8003390 <executecommand+0xa80>)
 8003196:	791b      	ldrb	r3, [r3, #4]
 8003198:	ee07 3a90 	vmov	s15, r3
 800319c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a0:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003394 <executecommand+0xa84>
 80031a4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031a8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80031ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031b4:	4b76      	ldr	r3, [pc, #472]	@ (8003390 <executecommand+0xa80>)
 80031b6:	795b      	ldrb	r3, [r3, #5]
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c0:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003394 <executecommand+0xa84>
 80031c4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031c8:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 800339c <executecommand+0xa8c>
 80031cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d4:	4b73      	ldr	r3, [pc, #460]	@ (80033a4 <executecommand+0xa94>)
 80031d6:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 80031da:	4b73      	ldr	r3, [pc, #460]	@ (80033a8 <executecommand+0xa98>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b68      	cmp	r3, #104	@ 0x68
 80031e6:	d14c      	bne.n	8003282 <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80031e8:	4b69      	ldr	r3, [pc, #420]	@ (8003390 <executecommand+0xa80>)
 80031ea:	785b      	ldrb	r3, [r3, #1]
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f4:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8003394 <executecommand+0xa84>
 80031f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031fc:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80033ac <executecommand+0xa9c>
 8003200:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003204:	4b62      	ldr	r3, [pc, #392]	@ (8003390 <executecommand+0xa80>)
 8003206:	789b      	ldrb	r3, [r3, #2]
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003210:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8003394 <executecommand+0xa84>
 8003214:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003218:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800339c <executecommand+0xa8c>
 800321c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003220:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003224:	4b5a      	ldr	r3, [pc, #360]	@ (8003390 <executecommand+0xa80>)
 8003226:	78db      	ldrb	r3, [r3, #3]
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003230:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003394 <executecommand+0xa84>
 8003234:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003238:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800323c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003240:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003244:	4b52      	ldr	r3, [pc, #328]	@ (8003390 <executecommand+0xa80>)
 8003246:	791b      	ldrb	r3, [r3, #4]
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003250:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8003394 <executecommand+0xa84>
 8003254:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003258:	ee37 7a27 	vadd.f32	s14, s14, s15
 800325c:	4b4c      	ldr	r3, [pc, #304]	@ (8003390 <executecommand+0xa80>)
 800325e:	795b      	ldrb	r3, [r3, #5]
 8003260:	ee07 3a90 	vmov	s15, r3
 8003264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003268:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8003394 <executecommand+0xa84>
 800326c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003270:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003274:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327c:	4b4c      	ldr	r3, [pc, #304]	@ (80033b0 <executecommand+0xaa0>)
 800327e:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b6a      	cmp	r3, #106	@ 0x6a
 8003288:	d14c      	bne.n	8003324 <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800328a:	4b41      	ldr	r3, [pc, #260]	@ (8003390 <executecommand+0xa80>)
 800328c:	785b      	ldrb	r3, [r3, #1]
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003296:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003394 <executecommand+0xa84>
 800329a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800329e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800339c <executecommand+0xa8c>
 80032a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003390 <executecommand+0xa80>)
 80032a8:	789b      	ldrb	r3, [r3, #2]
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003394 <executecommand+0xa84>
 80032b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032ba:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80032be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c6:	4b32      	ldr	r3, [pc, #200]	@ (8003390 <executecommand+0xa80>)
 80032c8:	78db      	ldrb	r3, [r3, #3]
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d2:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8003394 <executecommand+0xa84>
 80032d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032de:	4b2c      	ldr	r3, [pc, #176]	@ (8003390 <executecommand+0xa80>)
 80032e0:	791b      	ldrb	r3, [r3, #4]
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ea:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8003394 <executecommand+0xa84>
 80032ee:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032f2:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032fe:	4b24      	ldr	r3, [pc, #144]	@ (8003390 <executecommand+0xa80>)
 8003300:	795b      	ldrb	r3, [r3, #5]
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8003394 <executecommand+0xa84>
 800330e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003312:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800339c <executecommand+0xa8c>
 8003316:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800331a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331e:	4b25      	ldr	r3, [pc, #148]	@ (80033b4 <executecommand+0xaa4>)
 8003320:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b6b      	cmp	r3, #107	@ 0x6b
 800332a:	d167      	bne.n	80033fc <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800332c:	4b18      	ldr	r3, [pc, #96]	@ (8003390 <executecommand+0xa80>)
 800332e:	785b      	ldrb	r3, [r3, #1]
 8003330:	ee07 3a90 	vmov	s15, r3
 8003334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003338:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003394 <executecommand+0xa84>
 800333c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003340:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800339c <executecommand+0xa8c>
 8003344:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003348:	4b11      	ldr	r3, [pc, #68]	@ (8003390 <executecommand+0xa80>)
 800334a:	789b      	ldrb	r3, [r3, #2]
 800334c:	ee07 3a90 	vmov	s15, r3
 8003350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003354:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8003394 <executecommand+0xa84>
 8003358:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800335c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003360:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003368:	4b09      	ldr	r3, [pc, #36]	@ (8003390 <executecommand+0xa80>)
 800336a:	78db      	ldrb	r3, [r3, #3]
 800336c:	ee07 3a90 	vmov	s15, r3
 8003370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003374:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8003394 <executecommand+0xa84>
 8003378:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800337c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003380:	4b03      	ldr	r3, [pc, #12]	@ (8003390 <executecommand+0xa80>)
 8003382:	791b      	ldrb	r3, [r3, #4]
 8003384:	ee07 3a90 	vmov	s15, r3
 8003388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338c:	e016      	b.n	80033bc <executecommand+0xaac>
 800338e:	bf00      	nop
 8003390:	000041c8 	.word	0x000041c8
 8003394:	42400000 	.word	0x42400000
 8003398:	00004110 	.word	0x00004110
 800339c:	42c80000 	.word	0x42c80000
 80033a0:	00004158 	.word	0x00004158
 80033a4:	00004164 	.word	0x00004164
 80033a8:	000040d4 	.word	0x000040d4
 80033ac:	447a0000 	.word	0x447a0000
 80033b0:	00004170 	.word	0x00004170
 80033b4:	000040fc 	.word	0x000040fc
 80033b8:	42400000 	.word	0x42400000
 80033bc:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 80033b8 <executecommand+0xaa8>
 80033c0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033c4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033d0:	4bba      	ldr	r3, [pc, #744]	@ (80036bc <executecommand+0xdac>)
 80033d2:	795b      	ldrb	r3, [r3, #5]
 80033d4:	ee07 3a90 	vmov	s15, r3
 80033d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033dc:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 80036c0 <executecommand+0xdb0>
 80033e0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033e4:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 80036c4 <executecommand+0xdb4>
 80033e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f0:	4bb5      	ldr	r3, [pc, #724]	@ (80036c8 <executecommand+0xdb8>)
 80033f2:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 80033f6:	4bb5      	ldr	r3, [pc, #724]	@ (80036cc <executecommand+0xdbc>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b6c      	cmp	r3, #108	@ 0x6c
 8003402:	d14c      	bne.n	800349e <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003404:	4bad      	ldr	r3, [pc, #692]	@ (80036bc <executecommand+0xdac>)
 8003406:	785b      	ldrb	r3, [r3, #1]
 8003408:	ee07 3a90 	vmov	s15, r3
 800340c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003410:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80036c0 <executecommand+0xdb0>
 8003414:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003418:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80036d0 <executecommand+0xdc0>
 800341c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003420:	4ba6      	ldr	r3, [pc, #664]	@ (80036bc <executecommand+0xdac>)
 8003422:	789b      	ldrb	r3, [r3, #2]
 8003424:	ee07 3a90 	vmov	s15, r3
 8003428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342c:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80036c0 <executecommand+0xdb0>
 8003430:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003434:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80036c4 <executecommand+0xdb4>
 8003438:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800343c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003440:	4b9e      	ldr	r3, [pc, #632]	@ (80036bc <executecommand+0xdac>)
 8003442:	78db      	ldrb	r3, [r3, #3]
 8003444:	ee07 3a90 	vmov	s15, r3
 8003448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344c:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 80036c0 <executecommand+0xdb0>
 8003450:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003454:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003458:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800345c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003460:	4b96      	ldr	r3, [pc, #600]	@ (80036bc <executecommand+0xdac>)
 8003462:	791b      	ldrb	r3, [r3, #4]
 8003464:	ee07 3a90 	vmov	s15, r3
 8003468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346c:	eddf 6a94 	vldr	s13, [pc, #592]	@ 80036c0 <executecommand+0xdb0>
 8003470:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003474:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003478:	4b90      	ldr	r3, [pc, #576]	@ (80036bc <executecommand+0xdac>)
 800347a:	795b      	ldrb	r3, [r3, #5]
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003484:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 80036c0 <executecommand+0xdb0>
 8003488:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800348c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003490:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003498:	4b8e      	ldr	r3, [pc, #568]	@ (80036d4 <executecommand+0xdc4>)
 800349a:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b6d      	cmp	r3, #109	@ 0x6d
 80034a4:	d14c      	bne.n	8003540 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80034a6:	4b85      	ldr	r3, [pc, #532]	@ (80036bc <executecommand+0xdac>)
 80034a8:	785b      	ldrb	r3, [r3, #1]
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b2:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80036c0 <executecommand+0xdb0>
 80034b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034ba:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80036c4 <executecommand+0xdb4>
 80034be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034c2:	4b7e      	ldr	r3, [pc, #504]	@ (80036bc <executecommand+0xdac>)
 80034c4:	789b      	ldrb	r3, [r3, #2]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80036c0 <executecommand+0xdb0>
 80034d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034d6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80034da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034e2:	4b76      	ldr	r3, [pc, #472]	@ (80036bc <executecommand+0xdac>)
 80034e4:	78db      	ldrb	r3, [r3, #3]
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ee:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80036c0 <executecommand+0xdb0>
 80034f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034fa:	4b70      	ldr	r3, [pc, #448]	@ (80036bc <executecommand+0xdac>)
 80034fc:	791b      	ldrb	r3, [r3, #4]
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003506:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80036c0 <executecommand+0xdb0>
 800350a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800350e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003512:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003516:	ee37 7a27 	vadd.f32	s14, s14, s15
 800351a:	4b68      	ldr	r3, [pc, #416]	@ (80036bc <executecommand+0xdac>)
 800351c:	795b      	ldrb	r3, [r3, #5]
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003526:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80036c0 <executecommand+0xdb0>
 800352a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800352e:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 80036c4 <executecommand+0xdb4>
 8003532:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353a:	4b67      	ldr	r3, [pc, #412]	@ (80036d8 <executecommand+0xdc8>)
 800353c:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b6e      	cmp	r3, #110	@ 0x6e
 8003546:	d14f      	bne.n	80035e8 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003548:	4b5c      	ldr	r3, [pc, #368]	@ (80036bc <executecommand+0xdac>)
 800354a:	785b      	ldrb	r3, [r3, #1]
 800354c:	ee07 3a90 	vmov	s15, r3
 8003550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003554:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80036c0 <executecommand+0xdb0>
 8003558:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800355c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80036c4 <executecommand+0xdb4>
 8003560:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003564:	4b55      	ldr	r3, [pc, #340]	@ (80036bc <executecommand+0xdac>)
 8003566:	789b      	ldrb	r3, [r3, #2]
 8003568:	ee07 3a90 	vmov	s15, r3
 800356c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003570:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80036c0 <executecommand+0xdb0>
 8003574:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003578:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800357c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003584:	4b4d      	ldr	r3, [pc, #308]	@ (80036bc <executecommand+0xdac>)
 8003586:	78db      	ldrb	r3, [r3, #3]
 8003588:	ee07 3a90 	vmov	s15, r3
 800358c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003590:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80036c0 <executecommand+0xdb0>
 8003594:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800359c:	4b47      	ldr	r3, [pc, #284]	@ (80036bc <executecommand+0xdac>)
 800359e:	791b      	ldrb	r3, [r3, #4]
 80035a0:	ee07 3a90 	vmov	s15, r3
 80035a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a8:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80036c0 <executecommand+0xdb0>
 80035ac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80035b0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80035b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035bc:	4b3f      	ldr	r3, [pc, #252]	@ (80036bc <executecommand+0xdac>)
 80035be:	795b      	ldrb	r3, [r3, #5]
 80035c0:	ee07 3a90 	vmov	s15, r3
 80035c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c8:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80036c0 <executecommand+0xdb0>
 80035cc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80035d0:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 80036c4 <executecommand+0xdb4>
 80035d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035dc:	4b3f      	ldr	r3, [pc, #252]	@ (80036dc <executecommand+0xdcc>)
 80035de:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 80035e2:	4b3f      	ldr	r3, [pc, #252]	@ (80036e0 <executecommand+0xdd0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b6f      	cmp	r3, #111	@ 0x6f
 80035ee:	d14c      	bne.n	800368a <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80035f0:	4b32      	ldr	r3, [pc, #200]	@ (80036bc <executecommand+0xdac>)
 80035f2:	785b      	ldrb	r3, [r3, #1]
 80035f4:	ee07 3a90 	vmov	s15, r3
 80035f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80036c0 <executecommand+0xdb0>
 8003600:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003604:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80036d0 <executecommand+0xdc0>
 8003608:	ee27 7a87 	vmul.f32	s14, s15, s14
 800360c:	4b2b      	ldr	r3, [pc, #172]	@ (80036bc <executecommand+0xdac>)
 800360e:	789b      	ldrb	r3, [r3, #2]
 8003610:	ee07 3a90 	vmov	s15, r3
 8003614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003618:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80036c0 <executecommand+0xdb0>
 800361c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003620:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80036c4 <executecommand+0xdb4>
 8003624:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800362c:	4b23      	ldr	r3, [pc, #140]	@ (80036bc <executecommand+0xdac>)
 800362e:	78db      	ldrb	r3, [r3, #3]
 8003630:	ee07 3a90 	vmov	s15, r3
 8003634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003638:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80036c0 <executecommand+0xdb0>
 800363c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003640:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003644:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800364c:	4b1b      	ldr	r3, [pc, #108]	@ (80036bc <executecommand+0xdac>)
 800364e:	791b      	ldrb	r3, [r3, #4]
 8003650:	ee07 3a90 	vmov	s15, r3
 8003654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003658:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80036c0 <executecommand+0xdb0>
 800365c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003664:	4b15      	ldr	r3, [pc, #84]	@ (80036bc <executecommand+0xdac>)
 8003666:	795b      	ldrb	r3, [r3, #5]
 8003668:	ee07 3a90 	vmov	s15, r3
 800366c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003670:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80036c0 <executecommand+0xdb0>
 8003674:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003678:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800367c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003684:	4b17      	ldr	r3, [pc, #92]	@ (80036e4 <executecommand+0xdd4>)
 8003686:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b72      	cmp	r3, #114	@ 0x72
 8003690:	d101      	bne.n	8003696 <executecommand+0xd86>
		NVIC_SystemReset();
 8003692:	f7ff f8d9 	bl	8002848 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	e007      	b.n	80036ac <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 800369c:	4a07      	ldr	r2, [pc, #28]	@ (80036bc <executecommand+0xdac>)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4413      	add	r3, r2
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3301      	adds	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b0e      	cmp	r3, #14
 80036b0:	ddf4      	ble.n	800369c <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 80036b2:	bf00      	nop
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	000041c8 	.word	0x000041c8
 80036c0:	42400000 	.word	0x42400000
 80036c4:	42c80000 	.word	0x42c80000
 80036c8:	00004108 	.word	0x00004108
 80036cc:	000040cc 	.word	0x000040cc
 80036d0:	447a0000 	.word	0x447a0000
 80036d4:	00004114 	.word	0x00004114
 80036d8:	0000415c 	.word	0x0000415c
 80036dc:	00004168 	.word	0x00004168
 80036e0:	000040d8 	.word	0x000040d8
 80036e4:	00004174 	.word	0x00004174

080036e8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	@ 0x28
 80036ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036ee:	1d3b      	adds	r3, r7, #4
 80036f0:	2224      	movs	r2, #36	@ 0x24
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f01b f86f 	bl	801e7d8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80036fa:	4b2e      	ldr	r3, [pc, #184]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 80036fc:	4a2e      	ldr	r2, [pc, #184]	@ (80037b8 <MX_ADC2_Init+0xd0>)
 80036fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8003700:	4b2c      	ldr	r3, [pc, #176]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 8003702:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003706:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003708:	4b2a      	ldr	r3, [pc, #168]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 800370a:	2208      	movs	r2, #8
 800370c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800370e:	4b29      	ldr	r3, [pc, #164]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 8003710:	2200      	movs	r2, #0
 8003712:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003714:	4b27      	ldr	r3, [pc, #156]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 8003716:	2204      	movs	r2, #4
 8003718:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800371a:	4b26      	ldr	r3, [pc, #152]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 800371c:	2200      	movs	r2, #0
 800371e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003720:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 8003722:	2200      	movs	r2, #0
 8003724:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8003726:	4b23      	ldr	r3, [pc, #140]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 8003728:	2201      	movs	r2, #1
 800372a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800372c:	4b21      	ldr	r3, [pc, #132]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8003734:	4b1f      	ldr	r3, [pc, #124]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 8003736:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 800373a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800373c:	4b1d      	ldr	r3, [pc, #116]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 800373e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003742:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8003744:	4b1b      	ldr	r3, [pc, #108]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 8003746:	2203      	movs	r2, #3
 8003748:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800374a:	4b1a      	ldr	r3, [pc, #104]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 800374c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003750:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003752:	4b18      	ldr	r3, [pc, #96]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 8003754:	2200      	movs	r2, #0
 8003756:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003758:	4b16      	ldr	r3, [pc, #88]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003760:	4b14      	ldr	r3, [pc, #80]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 8003762:	2201      	movs	r2, #1
 8003764:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003766:	4813      	ldr	r0, [pc, #76]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 8003768:	f006 fb60 	bl	8009e2c <HAL_ADC_Init>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8003772:	f004 fc95 	bl	80080a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003776:	4b11      	ldr	r3, [pc, #68]	@ (80037bc <MX_ADC2_Init+0xd4>)
 8003778:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800377a:	2306      	movs	r3, #6
 800377c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800377e:	2307      	movs	r3, #7
 8003780:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003782:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003786:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003788:	2304      	movs	r3, #4
 800378a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8003790:	2300      	movs	r3, #0
 8003792:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003796:	1d3b      	adds	r3, r7, #4
 8003798:	4619      	mov	r1, r3
 800379a:	4806      	ldr	r0, [pc, #24]	@ (80037b4 <MX_ADC2_Init+0xcc>)
 800379c:	f007 f88c 	bl	800a8b8 <HAL_ADC_ConfigChannel>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 80037a6:	f004 fc7b 	bl	80080a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80037aa:	bf00      	nop
 80037ac:	3728      	adds	r7, #40	@ 0x28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	240000ac 	.word	0x240000ac
 80037b8:	40022100 	.word	0x40022100
 80037bc:	19200040 	.word	0x19200040

080037c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	@ 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c8:	f107 0314 	add.w	r3, r7, #20
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a34      	ldr	r2, [pc, #208]	@ (80038b0 <HAL_ADC_MspInit+0xf0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d162      	bne.n	80038a8 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80037e2:	4b34      	ldr	r3, [pc, #208]	@ (80038b4 <HAL_ADC_MspInit+0xf4>)
 80037e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037e8:	4a32      	ldr	r2, [pc, #200]	@ (80038b4 <HAL_ADC_MspInit+0xf4>)
 80037ea:	f043 0320 	orr.w	r3, r3, #32
 80037ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037f2:	4b30      	ldr	r3, [pc, #192]	@ (80038b4 <HAL_ADC_MspInit+0xf4>)
 80037f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003800:	4b2c      	ldr	r3, [pc, #176]	@ (80038b4 <HAL_ADC_MspInit+0xf4>)
 8003802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003806:	4a2b      	ldr	r2, [pc, #172]	@ (80038b4 <HAL_ADC_MspInit+0xf4>)
 8003808:	f043 0320 	orr.w	r3, r3, #32
 800380c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003810:	4b28      	ldr	r3, [pc, #160]	@ (80038b4 <HAL_ADC_MspInit+0xf4>)
 8003812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800381e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003824:	2303      	movs	r3, #3
 8003826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	4619      	mov	r1, r3
 8003832:	4821      	ldr	r0, [pc, #132]	@ (80038b8 <HAL_ADC_MspInit+0xf8>)
 8003834:	f00a ff2c 	bl	800e690 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003838:	4b20      	ldr	r3, [pc, #128]	@ (80038bc <HAL_ADC_MspInit+0xfc>)
 800383a:	4a21      	ldr	r2, [pc, #132]	@ (80038c0 <HAL_ADC_MspInit+0x100>)
 800383c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800383e:	4b1f      	ldr	r3, [pc, #124]	@ (80038bc <HAL_ADC_MspInit+0xfc>)
 8003840:	220a      	movs	r2, #10
 8003842:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003844:	4b1d      	ldr	r3, [pc, #116]	@ (80038bc <HAL_ADC_MspInit+0xfc>)
 8003846:	2200      	movs	r2, #0
 8003848:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800384a:	4b1c      	ldr	r3, [pc, #112]	@ (80038bc <HAL_ADC_MspInit+0xfc>)
 800384c:	2200      	movs	r2, #0
 800384e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003850:	4b1a      	ldr	r3, [pc, #104]	@ (80038bc <HAL_ADC_MspInit+0xfc>)
 8003852:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003856:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003858:	4b18      	ldr	r3, [pc, #96]	@ (80038bc <HAL_ADC_MspInit+0xfc>)
 800385a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800385e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003860:	4b16      	ldr	r3, [pc, #88]	@ (80038bc <HAL_ADC_MspInit+0xfc>)
 8003862:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003866:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003868:	4b14      	ldr	r3, [pc, #80]	@ (80038bc <HAL_ADC_MspInit+0xfc>)
 800386a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800386e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003870:	4b12      	ldr	r3, [pc, #72]	@ (80038bc <HAL_ADC_MspInit+0xfc>)
 8003872:	2200      	movs	r2, #0
 8003874:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003876:	4b11      	ldr	r3, [pc, #68]	@ (80038bc <HAL_ADC_MspInit+0xfc>)
 8003878:	2200      	movs	r2, #0
 800387a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800387c:	480f      	ldr	r0, [pc, #60]	@ (80038bc <HAL_ADC_MspInit+0xfc>)
 800387e:	f008 f8b5 	bl	800b9ec <HAL_DMA_Init>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8003888:	f004 fc0a 	bl	80080a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a0b      	ldr	r2, [pc, #44]	@ (80038bc <HAL_ADC_MspInit+0xfc>)
 8003890:	659a      	str	r2, [r3, #88]	@ 0x58
 8003892:	4a0a      	ldr	r2, [pc, #40]	@ (80038bc <HAL_ADC_MspInit+0xfc>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003898:	2200      	movs	r2, #0
 800389a:	2100      	movs	r1, #0
 800389c:	2012      	movs	r0, #18
 800389e:	f007 fff8 	bl	800b892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80038a2:	2012      	movs	r0, #18
 80038a4:	f008 f80f 	bl	800b8c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80038a8:	bf00      	nop
 80038aa:	3728      	adds	r7, #40	@ 0x28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40022100 	.word	0x40022100
 80038b4:	58024400 	.word	0x58024400
 80038b8:	58021400 	.word	0x58021400
 80038bc:	2400011c 	.word	0x2400011c
 80038c0:	40020410 	.word	0x40020410

080038c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038ca:	4b19      	ldr	r3, [pc, #100]	@ (8003930 <MX_DMA_Init+0x6c>)
 80038cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038d0:	4a17      	ldr	r2, [pc, #92]	@ (8003930 <MX_DMA_Init+0x6c>)
 80038d2:	f043 0302 	orr.w	r3, r3, #2
 80038d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038da:	4b15      	ldr	r3, [pc, #84]	@ (8003930 <MX_DMA_Init+0x6c>)
 80038dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038e8:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <MX_DMA_Init+0x6c>)
 80038ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038ee:	4a10      	ldr	r2, [pc, #64]	@ (8003930 <MX_DMA_Init+0x6c>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003930 <MX_DMA_Init+0x6c>)
 80038fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	2100      	movs	r1, #0
 800390a:	200b      	movs	r0, #11
 800390c:	f007 ffc1 	bl	800b892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003910:	200b      	movs	r0, #11
 8003912:	f007 ffd8 	bl	800b8c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003916:	2200      	movs	r2, #0
 8003918:	2100      	movs	r1, #0
 800391a:	2038      	movs	r0, #56	@ 0x38
 800391c:	f007 ffb9 	bl	800b892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003920:	2038      	movs	r0, #56	@ 0x38
 8003922:	f007 ffd0 	bl	800b8c6 <HAL_NVIC_EnableIRQ>

}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	58024400 	.word	0x58024400
 8003934:	00000000 	.word	0x00000000

08003938 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003938:	b580      	push	{r7, lr}
 800393a:	b08e      	sub	sp, #56	@ 0x38
 800393c:	af00      	add	r7, sp, #0
 800393e:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(pitch_error);
 8003954:	4b88      	ldr	r3, [pc, #544]	@ (8003b78 <Thrust_filter+0x240>)
 8003956:	edd3 7a00 	vldr	s15, [r3]
 800395a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800395e:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(rool_error);
 8003962:	4b86      	ldr	r3, [pc, #536]	@ (8003b7c <Thrust_filter+0x244>)
 8003964:	edd3 7a00 	vldr	s15, [r3]
 8003968:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800396c:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 8003970:	ed97 7b08 	vldr	d7, [r7, #32]
 8003974:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003978:	eeb0 0a67 	vmov.f32	s0, s15
 800397c:	f003 fec6 	bl	800770c <WartoscBezwgledna>
 8003980:	eef0 7a40 	vmov.f32	s15, s0
 8003984:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003988:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 800398c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003990:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003994:	eeb0 0a67 	vmov.f32	s0, s15
 8003998:	f003 feb8 	bl	800770c <WartoscBezwgledna>
 800399c:	eef0 7a40 	vmov.f32	s15, s0
 80039a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039a4:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 80039a8:	ed97 6b08 	vldr	d6, [r7, #32]
 80039ac:	ed97 7b06 	vldr	d7, [r7, #24]
 80039b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039b4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80039bc:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 80039c0:	eeb0 0b47 	vmov.f64	d0, d7
 80039c4:	f01b f894 	bl	801eaf0 <pow>
 80039c8:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 80039cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003b80 <Thrust_filter+0x248>)
 80039ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d2:	f642 1204 	movw	r2, #10500	@ 0x2904
 80039d6:	4293      	cmp	r3, r2
 80039d8:	dd03      	ble.n	80039e2 <Thrust_filter+0xaa>
		wanted_thrust = 10500;
 80039da:	4b69      	ldr	r3, [pc, #420]	@ (8003b80 <Thrust_filter+0x248>)
 80039dc:	f642 1204 	movw	r2, #10500	@ 0x2904
 80039e0:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 80039e2:	4b67      	ldr	r3, [pc, #412]	@ (8003b80 <Thrust_filter+0x248>)
 80039e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	4b66      	ldr	r3, [pc, #408]	@ (8003b84 <Thrust_filter+0x24c>)
 80039ec:	885b      	ldrh	r3, [r3, #2]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 80039f4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	da13      	bge.n	8003a24 <Thrust_filter+0xec>
		thrust_error = WartoscBezwgledna(thrust_error);
 80039fc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a08:	eeb0 0a67 	vmov.f32	s0, s15
 8003a0c:	f003 fe7e 	bl	800770c <WartoscBezwgledna>
 8003a10:	eef0 7a40 	vmov.f32	s15, s0
 8003a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a18:	ee17 3a90 	vmov	r3, s15
 8003a1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003a24:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8097 	beq.w	8003b5c <Thrust_filter+0x224>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 8003a2e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003a3a:	eeb0 0b47 	vmov.f64	d0, d7
 8003a3e:	f01a feff 	bl	801e840 <sqrt>
 8003a42:	eeb0 7b40 	vmov.f64	d7, d0
 8003a46:	eeb0 0b47 	vmov.f64	d0, d7
 8003a4a:	f01a fef9 	bl	801e840 <sqrt>
 8003a4e:	eeb0 7b40 	vmov.f64	d7, d0
 8003a52:	ed9f 6b45 	vldr	d6, [pc, #276]	@ 8003b68 <Thrust_filter+0x230>
 8003a56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a5a:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 8003a5e:	ed97 7b00 	vldr	d7, [r7]
 8003a62:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8003b70 <Thrust_filter+0x238>
 8003a66:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003a6a:	ed97 7b02 	vldr	d7, [r7, #8]
 8003a6e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8003a72:	ed97 6b04 	vldr	d6, [r7, #16]
 8003a76:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003a7a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 8003a7e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d105      	bne.n	8003a92 <Thrust_filter+0x15a>
			thrust_add = thrust_add*(-1);
 8003a86:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003a8a:	eeb1 7b47 	vneg.f64	d7, d7
 8003a8e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 8003a92:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003a96:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003a9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa2:	d513      	bpl.n	8003acc <Thrust_filter+0x194>
 8003aa4:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003aa8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003aac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab4:	dd0a      	ble.n	8003acc <Thrust_filter+0x194>
			thrust_values = thrust_values + thrust_add;
 8003ab6:	4b34      	ldr	r3, [pc, #208]	@ (8003b88 <Thrust_filter+0x250>)
 8003ab8:	ed93 6b00 	vldr	d6, [r3]
 8003abc:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003ac0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ac4:	4b30      	ldr	r3, [pc, #192]	@ (8003b88 <Thrust_filter+0x250>)
 8003ac6:	ed83 7b00 	vstr	d7, [r3]
 8003aca:	e010      	b.n	8003aee <Thrust_filter+0x1b6>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 8003acc:	4b2d      	ldr	r3, [pc, #180]	@ (8003b84 <Thrust_filter+0x24c>)
 8003ace:	885b      	ldrh	r3, [r3, #2]
 8003ad0:	ee07 3a90 	vmov	s15, r3
 8003ad4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003ad8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003adc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ae0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003ae4:	ee17 3a90 	vmov	r3, s15
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	4b26      	ldr	r3, [pc, #152]	@ (8003b84 <Thrust_filter+0x24c>)
 8003aec:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 8003aee:	4b26      	ldr	r3, [pc, #152]	@ (8003b88 <Thrust_filter+0x250>)
 8003af0:	ed93 7b00 	vldr	d7, [r3]
 8003af4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003af8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b00:	da09      	bge.n	8003b16 <Thrust_filter+0x1de>
 8003b02:	4b21      	ldr	r3, [pc, #132]	@ (8003b88 <Thrust_filter+0x250>)
 8003b04:	ed93 7b00 	vldr	d7, [r3]
 8003b08:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003b0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b14:	d818      	bhi.n	8003b48 <Thrust_filter+0x210>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 8003b16:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <Thrust_filter+0x24c>)
 8003b18:	885b      	ldrh	r3, [r3, #2]
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003b22:	4b19      	ldr	r3, [pc, #100]	@ (8003b88 <Thrust_filter+0x250>)
 8003b24:	ed93 7b00 	vldr	d7, [r3]
 8003b28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003b30:	ee17 3a90 	vmov	r3, s15
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	4b13      	ldr	r3, [pc, #76]	@ (8003b84 <Thrust_filter+0x24c>)
 8003b38:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 8003b3a:	4913      	ldr	r1, [pc, #76]	@ (8003b88 <Thrust_filter+0x250>)
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 8003b48:	4b0e      	ldr	r3, [pc, #56]	@ (8003b84 <Thrust_filter+0x24c>)
 8003b4a:	885b      	ldrh	r3, [r3, #2]
 8003b4c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d903      	bls.n	8003b5c <Thrust_filter+0x224>
			MYDRON.THRUST = 10000;
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <Thrust_filter+0x24c>)
 8003b56:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b5a:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8003b5c:	bf00      	nop
 8003b5e:	3738      	adds	r7, #56	@ 0x38
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	f3af 8000 	nop.w
 8003b68:	00000000 	.word	0x00000000
 8003b6c:	409f4000 	.word	0x409f4000
 8003b70:	30553261 	.word	0x30553261
 8003b74:	3f43a92a 	.word	0x3f43a92a
 8003b78:	00004094 	.word	0x00004094
 8003b7c:	00004098 	.word	0x00004098
 8003b80:	0000406c 	.word	0x0000406c
 8003b84:	00000188 	.word	0x00000188
 8003b88:	00004070 	.word	0x00004070

08003b8c <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	4613      	mov	r3, r2
 8003b98:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	2b05      	cmp	r3, #5
 8003ba0:	f200 8380 	bhi.w	80042a4 <PID_cal+0x718>
 8003ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bac <PID_cal+0x20>)
 8003ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	08003bc5 	.word	0x08003bc5
 8003bb0:	08003cdf 	.word	0x08003cdf
 8003bb4:	08003e19 	.word	0x08003e19
 8003bb8:	08003f33 	.word	0x08003f33
 8003bbc:	08004071 	.word	0x08004071
 8003bc0:	0800418b 	.word	0x0800418b
		case 1://pitch

			*PID_var = PID_FAC[0]*(pitch_error);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	ed93 7a00 	vldr	s14, [r3]
 8003bca:	4b8b      	ldr	r3, [pc, #556]	@ (8003df8 <PID_cal+0x26c>)
 8003bcc:	edd3 7a00 	vldr	s15, [r3]
 8003bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	ed93 7a00 	vldr	s14, [r3]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	3304      	adds	r3, #4
 8003be4:	edd3 6a00 	vldr	s13, [r3]
 8003be8:	4b84      	ldr	r3, [pc, #528]	@ (8003dfc <PID_cal+0x270>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	ee07 3a90 	vmov	s15, r3
 8003bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bf4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bf8:	4b81      	ldr	r3, [pc, #516]	@ (8003e00 <PID_cal+0x274>)
 8003bfa:	edd3 7a00 	vldr	s15, [r3]
 8003bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pitch_error) - old_error_pitch);//policzenie częsci D
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	ed93 7a00 	vldr	s14, [r3]
 8003c14:	4b78      	ldr	r3, [pc, #480]	@ (8003df8 <PID_cal+0x26c>)
 8003c16:	edd3 6a00 	vldr	s13, [r3]
 8003c1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e04 <PID_cal+0x278>)
 8003c1c:	edd3 7a00 	vldr	s15, [r3]
 8003c20:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	330c      	adds	r3, #12
 8003c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2c:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003c30:	4b75      	ldr	r3, [pc, #468]	@ (8003e08 <PID_cal+0x27c>)
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d045      	beq.n	8003cc4 <PID_cal+0x138>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	ed93 7a00 	vldr	s14, [r3]
 8003c40:	4b71      	ldr	r3, [pc, #452]	@ (8003e08 <PID_cal+0x27c>)
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	ee07 3a90 	vmov	s15, r3
 8003c48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8003e00 <PID_cal+0x274>)
 8003c4e:	edd3 7a00 	vldr	s15, [r3]
 8003c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c56:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003c5a:	4b6b      	ldr	r3, [pc, #428]	@ (8003e08 <PID_cal+0x27c>)
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c66:	4b66      	ldr	r3, [pc, #408]	@ (8003e00 <PID_cal+0x274>)
 8003c68:	edd3 7a00 	vldr	s15, [r3]
 8003c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3310      	adds	r3, #16
 8003c80:	edd3 6a00 	vldr	s13, [r3]
 8003c84:	4b60      	ldr	r3, [pc, #384]	@ (8003e08 <PID_cal+0x27c>)
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	ee07 3a90 	vmov	s15, r3
 8003c8c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003c90:	4b5b      	ldr	r3, [pc, #364]	@ (8003e00 <PID_cal+0x274>)
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c9a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003c9e:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003ca2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003ca6:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cb6:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3310      	adds	r3, #16
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	68d2      	ldr	r2, [r2, #12]
 8003cc2:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	ed93 7a00 	vldr	s14, [r3]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	edd3 7a00 	vldr	s15, [r3]
 8003cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	edc3 7a00 	vstr	s15, [r3]
//					*PID_var = 400;
//				}
//				if(*PID_var < -400){
//					*PID_var = -400;
//				}
			break;
 8003cdc:	e2e3      	b.n	80042a6 <PID_cal+0x71a>

		case 2://rool

			*PID_var = PID_FAC[0]*(rool_error);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	ed93 7a00 	vldr	s14, [r3]
 8003ce4:	4b49      	ldr	r3, [pc, #292]	@ (8003e0c <PID_cal+0x280>)
 8003ce6:	edd3 7a00 	vldr	s15, [r3]
 8003cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	ed93 7a00 	vldr	s14, [r3]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	edd3 6a00 	vldr	s13, [r3]
 8003d02:	4b43      	ldr	r3, [pc, #268]	@ (8003e10 <PID_cal+0x284>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d12:	4b3b      	ldr	r3, [pc, #236]	@ (8003e00 <PID_cal+0x274>)
 8003d14:	edd3 7a00 	vldr	s15, [r3]
 8003d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_error) - old_error_rool);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	3308      	adds	r3, #8
 8003d2a:	ed93 7a00 	vldr	s14, [r3]
 8003d2e:	4b37      	ldr	r3, [pc, #220]	@ (8003e0c <PID_cal+0x280>)
 8003d30:	edd3 6a00 	vldr	s13, [r3]
 8003d34:	4b37      	ldr	r3, [pc, #220]	@ (8003e14 <PID_cal+0x288>)
 8003d36:	edd3 7a00 	vldr	s15, [r3]
 8003d3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	330c      	adds	r3, #12
 8003d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d46:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e08 <PID_cal+0x27c>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d045      	beq.n	8003dde <PID_cal+0x252>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	330c      	adds	r3, #12
 8003d56:	ed93 7a00 	vldr	s14, [r3]
 8003d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8003e08 <PID_cal+0x27c>)
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d66:	4b26      	ldr	r3, [pc, #152]	@ (8003e00 <PID_cal+0x274>)
 8003d68:	edd3 7a00 	vldr	s15, [r3]
 8003d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d70:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d74:	4b24      	ldr	r3, [pc, #144]	@ (8003e08 <PID_cal+0x27c>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	ee07 3a90 	vmov	s15, r3
 8003d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d80:	4b1f      	ldr	r3, [pc, #124]	@ (8003e00 <PID_cal+0x274>)
 8003d82:	edd3 7a00 	vldr	s15, [r3]
 8003d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	3310      	adds	r3, #16
 8003d9a:	edd3 6a00 	vldr	s13, [r3]
 8003d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e08 <PID_cal+0x27c>)
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003daa:	4b15      	ldr	r3, [pc, #84]	@ (8003e00 <PID_cal+0x274>)
 8003dac:	edd3 7a00 	vldr	s15, [r3]
 8003db0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003db4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003db8:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003dbc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003dc0:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd0:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	3310      	adds	r3, #16
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	68d2      	ldr	r2, [r2, #12]
 8003ddc:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	ed93 7a00 	vldr	s14, [r3]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	330c      	adds	r3, #12
 8003de8:	edd3 7a00 	vldr	s15, [r3]
 8003dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003df6:	e256      	b.n	80042a6 <PID_cal+0x71a>
 8003df8:	00004094 	.word	0x00004094
 8003dfc:	000040c4 	.word	0x000040c4
 8003e00:	0801f294 	.word	0x0801f294
 8003e04:	000040ac 	.word	0x000040ac
 8003e08:	00004086 	.word	0x00004086
 8003e0c:	00004098 	.word	0x00004098
 8003e10:	000040c8 	.word	0x000040c8
 8003e14:	000040b0 	.word	0x000040b0

		case 3:

			*PID_var = PID_FAC[0]*(yaw_error);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	ed93 7a00 	vldr	s14, [r3]
 8003e1e:	4b8b      	ldr	r3, [pc, #556]	@ (800404c <PID_cal+0x4c0>)
 8003e20:	edd3 7a00 	vldr	s15, [r3]
 8003e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	ed93 7a00 	vldr	s14, [r3]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	3304      	adds	r3, #4
 8003e38:	edd3 6a00 	vldr	s13, [r3]
 8003e3c:	4b84      	ldr	r3, [pc, #528]	@ (8004050 <PID_cal+0x4c4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	ee07 3a90 	vmov	s15, r3
 8003e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e4c:	4b81      	ldr	r3, [pc, #516]	@ (8004054 <PID_cal+0x4c8>)
 8003e4e:	edd3 7a00 	vldr	s15, [r3]
 8003e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_error) - old_error_yaw);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	3308      	adds	r3, #8
 8003e64:	ed93 7a00 	vldr	s14, [r3]
 8003e68:	4b78      	ldr	r3, [pc, #480]	@ (800404c <PID_cal+0x4c0>)
 8003e6a:	edd3 6a00 	vldr	s13, [r3]
 8003e6e:	4b7a      	ldr	r3, [pc, #488]	@ (8004058 <PID_cal+0x4cc>)
 8003e70:	edd3 7a00 	vldr	s15, [r3]
 8003e74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e80:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003e84:	4b75      	ldr	r3, [pc, #468]	@ (800405c <PID_cal+0x4d0>)
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d045      	beq.n	8003f18 <PID_cal+0x38c>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	330c      	adds	r3, #12
 8003e90:	ed93 7a00 	vldr	s14, [r3]
 8003e94:	4b71      	ldr	r3, [pc, #452]	@ (800405c <PID_cal+0x4d0>)
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ea0:	4b6c      	ldr	r3, [pc, #432]	@ (8004054 <PID_cal+0x4c8>)
 8003ea2:	edd3 7a00 	vldr	s15, [r3]
 8003ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eaa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003eae:	4b6b      	ldr	r3, [pc, #428]	@ (800405c <PID_cal+0x4d0>)
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eba:	4b66      	ldr	r3, [pc, #408]	@ (8004054 <PID_cal+0x4c8>)
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ec8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	3310      	adds	r3, #16
 8003ed4:	edd3 6a00 	vldr	s13, [r3]
 8003ed8:	4b60      	ldr	r3, [pc, #384]	@ (800405c <PID_cal+0x4d0>)
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	ee07 3a90 	vmov	s15, r3
 8003ee0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003ee4:	4b5b      	ldr	r3, [pc, #364]	@ (8004054 <PID_cal+0x4c8>)
 8003ee6:	edd3 7a00 	vldr	s15, [r3]
 8003eea:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003eee:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003ef2:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003ef6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003efa:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003efe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	330c      	adds	r3, #12
 8003f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f0a:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	3310      	adds	r3, #16
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	68d2      	ldr	r2, [r2, #12]
 8003f16:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	ed93 7a00 	vldr	s14, [r3]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	330c      	adds	r3, #12
 8003f22:	edd3 7a00 	vldr	s15, [r3]
 8003f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003f30:	e1b9      	b.n	80042a6 <PID_cal+0x71a>

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pitch_ar_error);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	ed93 7a00 	vldr	s14, [r3]
 8003f38:	4b49      	ldr	r3, [pc, #292]	@ (8004060 <PID_cal+0x4d4>)
 8003f3a:	edd3 7a00 	vldr	s15, [r3]
 8003f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	ed93 7a00 	vldr	s14, [r3]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3304      	adds	r3, #4
 8003f52:	edd3 6a00 	vldr	s13, [r3]
 8003f56:	4b43      	ldr	r3, [pc, #268]	@ (8004064 <PID_cal+0x4d8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	ee07 3a90 	vmov	s15, r3
 8003f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f66:	4b3b      	ldr	r3, [pc, #236]	@ (8004054 <PID_cal+0x4c8>)
 8003f68:	edd3 7a00 	vldr	s15, [r3]
 8003f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pitch_ar_error) - old_error_angular_rate_pitch);//policzenie częsci D
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	ed93 7a00 	vldr	s14, [r3]
 8003f82:	4b37      	ldr	r3, [pc, #220]	@ (8004060 <PID_cal+0x4d4>)
 8003f84:	edd3 6a00 	vldr	s13, [r3]
 8003f88:	4b37      	ldr	r3, [pc, #220]	@ (8004068 <PID_cal+0x4dc>)
 8003f8a:	edd3 7a00 	vldr	s15, [r3]
 8003f8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	330c      	adds	r3, #12
 8003f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9a:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8003f9e:	4b33      	ldr	r3, [pc, #204]	@ (800406c <PID_cal+0x4e0>)
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d045      	beq.n	8004032 <PID_cal+0x4a6>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	330c      	adds	r3, #12
 8003faa:	ed93 7a00 	vldr	s14, [r3]
 8003fae:	4b2f      	ldr	r3, [pc, #188]	@ (800406c <PID_cal+0x4e0>)
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003fba:	4b26      	ldr	r3, [pc, #152]	@ (8004054 <PID_cal+0x4c8>)
 8003fbc:	edd3 7a00 	vldr	s15, [r3]
 8003fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fc4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003fc8:	4b28      	ldr	r3, [pc, #160]	@ (800406c <PID_cal+0x4e0>)
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	ee07 3a90 	vmov	s15, r3
 8003fd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8004054 <PID_cal+0x4c8>)
 8003fd6:	edd3 7a00 	vldr	s15, [r3]
 8003fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fe2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3310      	adds	r3, #16
 8003fee:	edd3 6a00 	vldr	s13, [r3]
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800406c <PID_cal+0x4e0>)
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003ffe:	4b15      	ldr	r3, [pc, #84]	@ (8004054 <PID_cal+0x4c8>)
 8004000:	edd3 7a00 	vldr	s15, [r3]
 8004004:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004008:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800400c:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004010:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004014:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	330c      	adds	r3, #12
 8004020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004024:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	3310      	adds	r3, #16
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	68d2      	ldr	r2, [r2, #12]
 8004030:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	ed93 7a00 	vldr	s14, [r3]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	330c      	adds	r3, #12
 800403c:	edd3 7a00 	vldr	s15, [r3]
 8004040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	edc3 7a00 	vstr	s15, [r3]

			break;
 800404a:	e12c      	b.n	80042a6 <PID_cal+0x71a>
 800404c:	0000409c 	.word	0x0000409c
 8004050:	000040cc 	.word	0x000040cc
 8004054:	0801f294 	.word	0x0801f294
 8004058:	000040b4 	.word	0x000040b4
 800405c:	00004086 	.word	0x00004086
 8004060:	000040a0 	.word	0x000040a0
 8004064:	000040d0 	.word	0x000040d0
 8004068:	000040b8 	.word	0x000040b8
 800406c:	00004084 	.word	0x00004084

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(rool_ar_error);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	ed93 7a00 	vldr	s14, [r3]
 8004076:	4b8f      	ldr	r3, [pc, #572]	@ (80042b4 <PID_cal+0x728>)
 8004078:	edd3 7a00 	vldr	s15, [r3]
 800407c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	ed93 7a00 	vldr	s14, [r3]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	3304      	adds	r3, #4
 8004090:	edd3 6a00 	vldr	s13, [r3]
 8004094:	4b88      	ldr	r3, [pc, #544]	@ (80042b8 <PID_cal+0x72c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	ee07 3a90 	vmov	s15, r3
 800409c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040a4:	4b85      	ldr	r3, [pc, #532]	@ (80042bc <PID_cal+0x730>)
 80040a6:	edd3 7a00 	vldr	s15, [r3]
 80040aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_ar_error) - old_error_angular_rate_rool);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	3308      	adds	r3, #8
 80040bc:	ed93 7a00 	vldr	s14, [r3]
 80040c0:	4b7c      	ldr	r3, [pc, #496]	@ (80042b4 <PID_cal+0x728>)
 80040c2:	edd3 6a00 	vldr	s13, [r3]
 80040c6:	4b7e      	ldr	r3, [pc, #504]	@ (80042c0 <PID_cal+0x734>)
 80040c8:	edd3 7a00 	vldr	s15, [r3]
 80040cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	330c      	adds	r3, #12
 80040d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d8:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 80040dc:	4b79      	ldr	r3, [pc, #484]	@ (80042c4 <PID_cal+0x738>)
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d045      	beq.n	8004170 <PID_cal+0x5e4>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	330c      	adds	r3, #12
 80040e8:	ed93 7a00 	vldr	s14, [r3]
 80040ec:	4b75      	ldr	r3, [pc, #468]	@ (80042c4 <PID_cal+0x738>)
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	ee07 3a90 	vmov	s15, r3
 80040f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80040f8:	4b70      	ldr	r3, [pc, #448]	@ (80042bc <PID_cal+0x730>)
 80040fa:	edd3 7a00 	vldr	s15, [r3]
 80040fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004102:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004106:	4b6f      	ldr	r3, [pc, #444]	@ (80042c4 <PID_cal+0x738>)
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004112:	4b6a      	ldr	r3, [pc, #424]	@ (80042bc <PID_cal+0x730>)
 8004114:	edd3 7a00 	vldr	s15, [r3]
 8004118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004120:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	3310      	adds	r3, #16
 800412c:	edd3 6a00 	vldr	s13, [r3]
 8004130:	4b64      	ldr	r3, [pc, #400]	@ (80042c4 <PID_cal+0x738>)
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	ee07 3a90 	vmov	s15, r3
 8004138:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800413c:	4b5f      	ldr	r3, [pc, #380]	@ (80042bc <PID_cal+0x730>)
 800413e:	edd3 7a00 	vldr	s15, [r3]
 8004142:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004146:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800414a:	ee37 6a86 	vadd.f32	s12, s15, s12
 800414e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004152:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	330c      	adds	r3, #12
 800415e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004162:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3310      	adds	r3, #16
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	68d2      	ldr	r2, [r2, #12]
 800416e:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	ed93 7a00 	vldr	s14, [r3]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	330c      	adds	r3, #12
 800417a:	edd3 7a00 	vldr	s15, [r3]
 800417e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004188:	e08d      	b.n	80042a6 <PID_cal+0x71a>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(yaw_ar_error);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	ed93 7a00 	vldr	s14, [r3]
 8004190:	4b4d      	ldr	r3, [pc, #308]	@ (80042c8 <PID_cal+0x73c>)
 8004192:	edd3 7a00 	vldr	s15, [r3]
 8004196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	ed93 7a00 	vldr	s14, [r3]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	3304      	adds	r3, #4
 80041aa:	edd3 6a00 	vldr	s13, [r3]
 80041ae:	4b47      	ldr	r3, [pc, #284]	@ (80042cc <PID_cal+0x740>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041be:	4b3f      	ldr	r3, [pc, #252]	@ (80042bc <PID_cal+0x730>)
 80041c0:	edd3 7a00 	vldr	s15, [r3]
 80041c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_ar_error) - old_error_angular_rate_yaw);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3308      	adds	r3, #8
 80041d6:	ed93 7a00 	vldr	s14, [r3]
 80041da:	4b3b      	ldr	r3, [pc, #236]	@ (80042c8 <PID_cal+0x73c>)
 80041dc:	edd3 6a00 	vldr	s13, [r3]
 80041e0:	4b3b      	ldr	r3, [pc, #236]	@ (80042d0 <PID_cal+0x744>)
 80041e2:	edd3 7a00 	vldr	s15, [r3]
 80041e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	330c      	adds	r3, #12
 80041ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f2:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 80041f6:	4b33      	ldr	r3, [pc, #204]	@ (80042c4 <PID_cal+0x738>)
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d045      	beq.n	800428a <PID_cal+0x6fe>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	330c      	adds	r3, #12
 8004202:	ed93 7a00 	vldr	s14, [r3]
 8004206:	4b2f      	ldr	r3, [pc, #188]	@ (80042c4 <PID_cal+0x738>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004212:	4b2a      	ldr	r3, [pc, #168]	@ (80042bc <PID_cal+0x730>)
 8004214:	edd3 7a00 	vldr	s15, [r3]
 8004218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800421c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004220:	4b28      	ldr	r3, [pc, #160]	@ (80042c4 <PID_cal+0x738>)
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	ee07 3a90 	vmov	s15, r3
 8004228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800422c:	4b23      	ldr	r3, [pc, #140]	@ (80042bc <PID_cal+0x730>)
 800422e:	edd3 7a00 	vldr	s15, [r3]
 8004232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004236:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800423a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800423e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	3310      	adds	r3, #16
 8004246:	edd3 6a00 	vldr	s13, [r3]
 800424a:	4b1e      	ldr	r3, [pc, #120]	@ (80042c4 <PID_cal+0x738>)
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004256:	4b19      	ldr	r3, [pc, #100]	@ (80042bc <PID_cal+0x730>)
 8004258:	edd3 7a00 	vldr	s15, [r3]
 800425c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004260:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004264:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004268:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800426c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	330c      	adds	r3, #12
 8004278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800427c:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	3310      	adds	r3, #16
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	68d2      	ldr	r2, [r2, #12]
 8004288:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	ed93 7a00 	vldr	s14, [r3]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	330c      	adds	r3, #12
 8004294:	edd3 7a00 	vldr	s15, [r3]
 8004298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	edc3 7a00 	vstr	s15, [r3]
			break;
 80042a2:	e000      	b.n	80042a6 <PID_cal+0x71a>
		default:
			break;
 80042a4:	bf00      	nop
	}
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	000040a4 	.word	0x000040a4
 80042b8:	000040d4 	.word	0x000040d4
 80042bc:	0801f294 	.word	0x0801f294
 80042c0:	000040bc 	.word	0x000040bc
 80042c4:	00004084 	.word	0x00004084
 80042c8:	000040a8 	.word	0x000040a8
 80042cc:	000040d8 	.word	0x000040d8
 80042d0:	000040c0 	.word	0x000040c0
 80042d4:	00000000 	.word	0x00000000

080042d8 <Get_batteryvalue>:

void Get_batteryvalue(void){
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 80042dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004350 <Get_batteryvalue+0x78>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 80042e4:	ee07 3a90 	vmov	s15, r3
 80042e8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80042ec:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8004348 <Get_batteryvalue+0x70>
 80042f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80042f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80042f8:	ee17 3a90 	vmov	r3, s15
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	4b15      	ldr	r3, [pc, #84]	@ (8004354 <Get_batteryvalue+0x7c>)
 8004300:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 8004302:	4b14      	ldr	r3, [pc, #80]	@ (8004354 <Get_batteryvalue+0x7c>)
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	2b63      	cmp	r3, #99	@ 0x63
 8004308:	d902      	bls.n	8004310 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 800430a:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <Get_batteryvalue+0x7c>)
 800430c:	2264      	movs	r2, #100	@ 0x64
 800430e:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 8004310:	4b10      	ldr	r3, [pc, #64]	@ (8004354 <Get_batteryvalue+0x7c>)
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	2b18      	cmp	r3, #24
 8004316:	d802      	bhi.n	800431e <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 8004318:	4b0e      	ldr	r3, [pc, #56]	@ (8004354 <Get_batteryvalue+0x7c>)
 800431a:	2207      	movs	r2, #7
 800431c:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <Get_batteryvalue+0x7c>)
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	2b0a      	cmp	r3, #10
 8004324:	d802      	bhi.n	800432c <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 8004326:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <Get_batteryvalue+0x7c>)
 8004328:	2209      	movs	r2, #9
 800432a:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 800432c:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <Get_batteryvalue+0x7c>)
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	2b18      	cmp	r3, #24
 8004332:	d902      	bls.n	800433a <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 8004334:	4b07      	ldr	r3, [pc, #28]	@ (8004354 <Get_batteryvalue+0x7c>)
 8004336:	2208      	movs	r2, #8
 8004338:	829a      	strh	r2, [r3, #20]
	}
}
 800433a:	bf00      	nop
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	f3af 8000 	nop.w
 8004348:	7ae147ae 	.word	0x7ae147ae
 800434c:	401dae14 	.word	0x401dae14
 8004350:	24000eb0 	.word	0x24000eb0
 8004354:	00000188 	.word	0x00000188

08004358 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800435c:	2200      	movs	r2, #0
 800435e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004362:	4802      	ldr	r0, [pc, #8]	@ (800436c <SELECT+0x14>)
 8004364:	f00a fb54 	bl	800ea10 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004368:	bf00      	nop
 800436a:	bd80      	pop	{r7, pc}
 800436c:	58020c00 	.word	0x58020c00

08004370 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004374:	2201      	movs	r2, #1
 8004376:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800437a:	4802      	ldr	r0, [pc, #8]	@ (8004384 <DESELECT+0x14>)
 800437c:	f00a fb48 	bl	800ea10 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004380:	bf00      	nop
 8004382:	bd80      	pop	{r7, pc}
 8004384:	58020c00 	.word	0x58020c00

08004388 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8004392:	bf00      	nop
 8004394:	4b07      	ldr	r3, [pc, #28]	@ (80043b4 <SPI_TxByte+0x2c>)
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800439c:	2b20      	cmp	r3, #32
 800439e:	d1f9      	bne.n	8004394 <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80043a0:	1df9      	adds	r1, r7, #7
 80043a2:	2364      	movs	r3, #100	@ 0x64
 80043a4:	2201      	movs	r2, #1
 80043a6:	4804      	ldr	r0, [pc, #16]	@ (80043b8 <SPI_TxByte+0x30>)
 80043a8:	f010 fc8e 	bl	8014cc8 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 80043ac:	bf00      	nop
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40020010 	.word	0x40020010
 80043b8:	240001ec 	.word	0x240001ec

080043bc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 80043c8:	bf00      	nop
 80043ca:	4b08      	ldr	r3, [pc, #32]	@ (80043ec <SPI_TxBuffer+0x30>)
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d1f9      	bne.n	80043ca <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 80043d6:	887b      	ldrh	r3, [r7, #2]
 80043d8:	461a      	mov	r2, r3
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4804      	ldr	r0, [pc, #16]	@ (80043f0 <SPI_TxBuffer+0x34>)
 80043de:	f011 fd61 	bl	8015ea4 <HAL_SPI_Transmit_DMA>
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40020010 	.word	0x40020010
 80043f0:	240001ec 	.word	0x240001ec

080043f4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80043fa:	23ff      	movs	r3, #255	@ 0xff
 80043fc:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 80043fe:	bf00      	nop
 8004400:	4b09      	ldr	r3, [pc, #36]	@ (8004428 <SPI_RxByte+0x34>)
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004408:	2b20      	cmp	r3, #32
 800440a:	d1f9      	bne.n	8004400 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800440c:	1dba      	adds	r2, r7, #6
 800440e:	1df9      	adds	r1, r7, #7
 8004410:	2364      	movs	r3, #100	@ 0x64
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	2301      	movs	r3, #1
 8004416:	4805      	ldr	r0, [pc, #20]	@ (800442c <SPI_RxByte+0x38>)
 8004418:	f011 f8b6 	bl	8015588 <HAL_SPI_TransmitReceive>

	return data;
 800441c:	79bb      	ldrb	r3, [r7, #6]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40020010 	.word	0x40020010
 800442c:	240001ec 	.word	0x240001ec

08004430 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8004438:	f7ff ffdc 	bl	80043f4 <SPI_RxByte>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	701a      	strb	r2, [r3, #0]
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8004452:	4b0a      	ldr	r3, [pc, #40]	@ (800447c <SD_ReadyWait+0x30>)
 8004454:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004458:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800445a:	f7ff ffcb 	bl	80043f4 <SPI_RxByte>
 800445e:	4603      	mov	r3, r0
 8004460:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	2bff      	cmp	r3, #255	@ 0xff
 8004466:	d004      	beq.n	8004472 <SD_ReadyWait+0x26>
 8004468:	4b04      	ldr	r3, [pc, #16]	@ (800447c <SD_ReadyWait+0x30>)
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f3      	bne.n	800445a <SD_ReadyWait+0xe>

	return res;
 8004472:	79fb      	ldrb	r3, [r7, #7]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	2400037c 	.word	0x2400037c

08004480 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8004486:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800448a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800448c:	f7ff ff70 	bl	8004370 <DESELECT>
	for(int i = 0; i < 10; i++)
 8004490:	2300      	movs	r3, #0
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	e005      	b.n	80044a2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8004496:	20ff      	movs	r0, #255	@ 0xff
 8004498:	f7ff ff76 	bl	8004388 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	3301      	adds	r3, #1
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b09      	cmp	r3, #9
 80044a6:	ddf6      	ble.n	8004496 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80044a8:	f7ff ff56 	bl	8004358 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80044ac:	2340      	movs	r3, #64	@ 0x40
 80044ae:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80044c0:	2395      	movs	r3, #149	@ 0x95
 80044c2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80044c4:	463b      	mov	r3, r7
 80044c6:	2106      	movs	r1, #6
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff77 	bl	80043bc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80044ce:	e002      	b.n	80044d6 <SD_PowerOn+0x56>
	{
		cnt--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80044d6:	f7ff ff8d 	bl	80043f4 <SPI_RxByte>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d002      	beq.n	80044e6 <SD_PowerOn+0x66>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f4      	bne.n	80044d0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80044e6:	f7ff ff43 	bl	8004370 <DESELECT>
	SPI_TxByte(0XFF);
 80044ea:	20ff      	movs	r0, #255	@ 0xff
 80044ec:	f7ff ff4c 	bl	8004388 <SPI_TxByte>

	PowerFlag = 1;
 80044f0:	4b03      	ldr	r3, [pc, #12]	@ (8004500 <SD_PowerOn+0x80>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	701a      	strb	r2, [r3, #0]
}
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	24000195 	.word	0x24000195

08004504 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004508:	4b03      	ldr	r3, [pc, #12]	@ (8004518 <SD_PowerOff+0x14>)
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
}
 800450e:	bf00      	nop
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	24000195 	.word	0x24000195

0800451c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8004520:	4b03      	ldr	r3, [pc, #12]	@ (8004530 <SD_CheckPower+0x14>)
 8004522:	781b      	ldrb	r3, [r3, #0]
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	24000195 	.word	0x24000195

08004534 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 800453e:	4b14      	ldr	r3, [pc, #80]	@ (8004590 <SD_RxDataBlock+0x5c>)
 8004540:	220a      	movs	r2, #10
 8004542:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8004544:	f7ff ff56 	bl	80043f4 <SPI_RxByte>
 8004548:	4603      	mov	r3, r0
 800454a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	2bff      	cmp	r3, #255	@ 0xff
 8004550:	d104      	bne.n	800455c <SD_RxDataBlock+0x28>
 8004552:	4b0f      	ldr	r3, [pc, #60]	@ (8004590 <SD_RxDataBlock+0x5c>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f3      	bne.n	8004544 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004560:	d001      	beq.n	8004566 <SD_RxDataBlock+0x32>
 8004562:	2300      	movs	r3, #0
 8004564:	e00f      	b.n	8004586 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff5f 	bl	8004430 <SPI_RxBytePtr>
	} while(len--);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	1e5a      	subs	r2, r3, #1
 8004576:	603a      	str	r2, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f4      	bne.n	8004566 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800457c:	f7ff ff3a 	bl	80043f4 <SPI_RxByte>
	SPI_RxByte();
 8004580:	f7ff ff38 	bl	80043f4 <SPI_RxByte>

	return TRUE;
 8004584:	2301      	movs	r3, #1
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	24000378 	.word	0x24000378

08004594 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80045a4:	f7ff ff52 	bl	800444c <SD_ReadyWait>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2bff      	cmp	r3, #255	@ 0xff
 80045ac:	d001      	beq.n	80045b2 <SD_TxDataBlock+0x1e>
 80045ae:	2300      	movs	r3, #0
 80045b0:	e02f      	b.n	8004612 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fee7 	bl	8004388 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	2bfd      	cmp	r3, #253	@ 0xfd
 80045be:	d020      	beq.n	8004602 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80045c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fef9 	bl	80043bc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80045ca:	f7ff ff13 	bl	80043f4 <SPI_RxByte>
		SPI_RxByte();
 80045ce:	f7ff ff11 	bl	80043f4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80045d2:	e00b      	b.n	80045ec <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80045d4:	f7ff ff0e 	bl	80043f4 <SPI_RxByte>
 80045d8:	4603      	mov	r3, r0
 80045da:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	2b05      	cmp	r3, #5
 80045e4:	d006      	beq.n	80045f4 <SD_TxDataBlock+0x60>
			i++;
 80045e6:	7bbb      	ldrb	r3, [r7, #14]
 80045e8:	3301      	adds	r3, #1
 80045ea:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80045ec:	7bbb      	ldrb	r3, [r7, #14]
 80045ee:	2b40      	cmp	r3, #64	@ 0x40
 80045f0:	d9f0      	bls.n	80045d4 <SD_TxDataBlock+0x40>
 80045f2:	e000      	b.n	80045f6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80045f4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80045f6:	bf00      	nop
 80045f8:	f7ff fefc 	bl	80043f4 <SPI_RxByte>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0fa      	beq.n	80045f8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	2b05      	cmp	r3, #5
 800460a:	d101      	bne.n	8004610 <SD_TxDataBlock+0x7c>
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <SD_TxDataBlock+0x7e>

	return FALSE;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	4603      	mov	r3, r0
 8004622:	6039      	str	r1, [r7, #0]
 8004624:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8004626:	f7ff ff11 	bl	800444c <SD_ReadyWait>
 800462a:	4603      	mov	r3, r0
 800462c:	2bff      	cmp	r3, #255	@ 0xff
 800462e:	d001      	beq.n	8004634 <SD_SendCmd+0x1a>
 8004630:	23ff      	movs	r3, #255	@ 0xff
 8004632:	e042      	b.n	80046ba <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fea6 	bl	8004388 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	0e1b      	lsrs	r3, r3, #24
 8004640:	b2db      	uxtb	r3, r3
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fea0 	bl	8004388 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	b2db      	uxtb	r3, r3
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fe9a 	bl	8004388 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	0a1b      	lsrs	r3, r3, #8
 8004658:	b2db      	uxtb	r3, r3
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fe94 	bl	8004388 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fe8f 	bl	8004388 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	2b40      	cmp	r3, #64	@ 0x40
 800466e:	d102      	bne.n	8004676 <SD_SendCmd+0x5c>
 8004670:	2395      	movs	r3, #149	@ 0x95
 8004672:	73fb      	strb	r3, [r7, #15]
 8004674:	e007      	b.n	8004686 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	2b48      	cmp	r3, #72	@ 0x48
 800467a:	d102      	bne.n	8004682 <SD_SendCmd+0x68>
 800467c:	2387      	movs	r3, #135	@ 0x87
 800467e:	73fb      	strb	r3, [r7, #15]
 8004680:	e001      	b.n	8004686 <SD_SendCmd+0x6c>
	else crc = 1;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fe7d 	bl	8004388 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	2b4c      	cmp	r3, #76	@ 0x4c
 8004692:	d101      	bne.n	8004698 <SD_SendCmd+0x7e>
 8004694:	f7ff feae 	bl	80043f4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004698:	230a      	movs	r3, #10
 800469a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800469c:	f7ff feaa 	bl	80043f4 <SPI_RxByte>
 80046a0:	4603      	mov	r3, r0
 80046a2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80046a4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	da05      	bge.n	80046b8 <SD_SendCmd+0x9e>
 80046ac:	7bbb      	ldrb	r3, [r7, #14]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	73bb      	strb	r3, [r7, #14]
 80046b2:	7bbb      	ldrb	r3, [r7, #14]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f1      	bne.n	800469c <SD_SendCmd+0x82>

	return res;
 80046b8:	7b7b      	ldrb	r3, [r7, #13]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <SD_disk_initialize+0x14>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0d6      	b.n	8004886 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80046d8:	4b6d      	ldr	r3, [pc, #436]	@ (8004890 <SD_disk_initialize+0x1cc>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <SD_disk_initialize+0x2a>
 80046e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004890 <SD_disk_initialize+0x1cc>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	e0cb      	b.n	8004886 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80046ee:	f7ff fec7 	bl	8004480 <SD_PowerOn>

	/* slave select */
	SELECT();
 80046f2:	f7ff fe31 	bl	8004358 <SELECT>

	/* check disk type */
	type = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80046fa:	2100      	movs	r1, #0
 80046fc:	2040      	movs	r0, #64	@ 0x40
 80046fe:	f7ff ff8c 	bl	800461a <SD_SendCmd>
 8004702:	4603      	mov	r3, r0
 8004704:	2b01      	cmp	r3, #1
 8004706:	f040 80a6 	bne.w	8004856 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800470a:	4b62      	ldr	r3, [pc, #392]	@ (8004894 <SD_disk_initialize+0x1d0>)
 800470c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004710:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004712:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004716:	2048      	movs	r0, #72	@ 0x48
 8004718:	f7ff ff7f 	bl	800461a <SD_SendCmd>
 800471c:	4603      	mov	r3, r0
 800471e:	2b01      	cmp	r3, #1
 8004720:	d158      	bne.n	80047d4 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8004722:	2300      	movs	r3, #0
 8004724:	73fb      	strb	r3, [r7, #15]
 8004726:	e00c      	b.n	8004742 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8004728:	7bfc      	ldrb	r4, [r7, #15]
 800472a:	f7ff fe63 	bl	80043f4 <SPI_RxByte>
 800472e:	4603      	mov	r3, r0
 8004730:	461a      	mov	r2, r3
 8004732:	f104 0310 	add.w	r3, r4, #16
 8004736:	443b      	add	r3, r7
 8004738:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	3301      	adds	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b03      	cmp	r3, #3
 8004746:	d9ef      	bls.n	8004728 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004748:	7abb      	ldrb	r3, [r7, #10]
 800474a:	2b01      	cmp	r3, #1
 800474c:	f040 8083 	bne.w	8004856 <SD_disk_initialize+0x192>
 8004750:	7afb      	ldrb	r3, [r7, #11]
 8004752:	2baa      	cmp	r3, #170	@ 0xaa
 8004754:	d17f      	bne.n	8004856 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004756:	2100      	movs	r1, #0
 8004758:	2077      	movs	r0, #119	@ 0x77
 800475a:	f7ff ff5e 	bl	800461a <SD_SendCmd>
 800475e:	4603      	mov	r3, r0
 8004760:	2b01      	cmp	r3, #1
 8004762:	d807      	bhi.n	8004774 <SD_disk_initialize+0xb0>
 8004764:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004768:	2069      	movs	r0, #105	@ 0x69
 800476a:	f7ff ff56 	bl	800461a <SD_SendCmd>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8004774:	4b47      	ldr	r3, [pc, #284]	@ (8004894 <SD_disk_initialize+0x1d0>)
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1eb      	bne.n	8004756 <SD_disk_initialize+0x92>
 800477e:	e000      	b.n	8004782 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004780:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004782:	4b44      	ldr	r3, [pc, #272]	@ (8004894 <SD_disk_initialize+0x1d0>)
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d064      	beq.n	8004856 <SD_disk_initialize+0x192>
 800478c:	2100      	movs	r1, #0
 800478e:	207a      	movs	r0, #122	@ 0x7a
 8004790:	f7ff ff43 	bl	800461a <SD_SendCmd>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d15d      	bne.n	8004856 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]
 800479e:	e00c      	b.n	80047ba <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80047a0:	7bfc      	ldrb	r4, [r7, #15]
 80047a2:	f7ff fe27 	bl	80043f4 <SPI_RxByte>
 80047a6:	4603      	mov	r3, r0
 80047a8:	461a      	mov	r2, r3
 80047aa:	f104 0310 	add.w	r3, r4, #16
 80047ae:	443b      	add	r3, r7
 80047b0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	3301      	adds	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d9ef      	bls.n	80047a0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80047c0:	7a3b      	ldrb	r3, [r7, #8]
 80047c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <SD_disk_initialize+0x10a>
 80047ca:	230c      	movs	r3, #12
 80047cc:	e000      	b.n	80047d0 <SD_disk_initialize+0x10c>
 80047ce:	2304      	movs	r3, #4
 80047d0:	73bb      	strb	r3, [r7, #14]
 80047d2:	e040      	b.n	8004856 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80047d4:	2100      	movs	r1, #0
 80047d6:	2077      	movs	r0, #119	@ 0x77
 80047d8:	f7ff ff1f 	bl	800461a <SD_SendCmd>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d808      	bhi.n	80047f4 <SD_disk_initialize+0x130>
 80047e2:	2100      	movs	r1, #0
 80047e4:	2069      	movs	r0, #105	@ 0x69
 80047e6:	f7ff ff18 	bl	800461a <SD_SendCmd>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d801      	bhi.n	80047f4 <SD_disk_initialize+0x130>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e000      	b.n	80047f6 <SD_disk_initialize+0x132>
 80047f4:	2301      	movs	r3, #1
 80047f6:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80047f8:	7bbb      	ldrb	r3, [r7, #14]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d10e      	bne.n	800481c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80047fe:	2100      	movs	r1, #0
 8004800:	2077      	movs	r0, #119	@ 0x77
 8004802:	f7ff ff0a 	bl	800461a <SD_SendCmd>
 8004806:	4603      	mov	r3, r0
 8004808:	2b01      	cmp	r3, #1
 800480a:	d80e      	bhi.n	800482a <SD_disk_initialize+0x166>
 800480c:	2100      	movs	r1, #0
 800480e:	2069      	movs	r0, #105	@ 0x69
 8004810:	f7ff ff03 	bl	800461a <SD_SendCmd>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d107      	bne.n	800482a <SD_disk_initialize+0x166>
 800481a:	e00d      	b.n	8004838 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800481c:	2100      	movs	r1, #0
 800481e:	2041      	movs	r0, #65	@ 0x41
 8004820:	f7ff fefb 	bl	800461a <SD_SendCmd>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800482a:	4b1a      	ldr	r3, [pc, #104]	@ (8004894 <SD_disk_initialize+0x1d0>)
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e1      	bne.n	80047f8 <SD_disk_initialize+0x134>
 8004834:	e000      	b.n	8004838 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004836:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004838:	4b16      	ldr	r3, [pc, #88]	@ (8004894 <SD_disk_initialize+0x1d0>)
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <SD_disk_initialize+0x18e>
 8004842:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004846:	2050      	movs	r0, #80	@ 0x50
 8004848:	f7ff fee7 	bl	800461a <SD_SendCmd>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <SD_disk_initialize+0x192>
 8004852:	2300      	movs	r3, #0
 8004854:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8004856:	4a10      	ldr	r2, [pc, #64]	@ (8004898 <SD_disk_initialize+0x1d4>)
 8004858:	7bbb      	ldrb	r3, [r7, #14]
 800485a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800485c:	f7ff fd88 	bl	8004370 <DESELECT>
	SPI_RxByte();
 8004860:	f7ff fdc8 	bl	80043f4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8004864:	7bbb      	ldrb	r3, [r7, #14]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800486a:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <SD_disk_initialize+0x1cc>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	b2da      	uxtb	r2, r3
 8004876:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <SD_disk_initialize+0x1cc>)
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	e001      	b.n	8004880 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800487c:	f7ff fe42 	bl	8004504 <SD_PowerOff>
	}

	return Stat;
 8004880:	4b03      	ldr	r3, [pc, #12]	@ (8004890 <SD_disk_initialize+0x1cc>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	bd90      	pop	{r4, r7, pc}
 800488e:	bf00      	nop
 8004890:	24000000 	.word	0x24000000
 8004894:	24000378 	.word	0x24000378
 8004898:	24000194 	.word	0x24000194

0800489c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <SD_disk_status+0x14>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e002      	b.n	80048b6 <SD_disk_status+0x1a>
	return Stat;
 80048b0:	4b04      	ldr	r3, [pc, #16]	@ (80048c4 <SD_disk_status+0x28>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	24000000 	.word	0x24000000

080048c8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4603      	mov	r3, r0
 80048d6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d102      	bne.n	80048e4 <SD_disk_read+0x1c>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <SD_disk_read+0x20>
 80048e4:	2304      	movs	r3, #4
 80048e6:	e051      	b.n	800498c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80048e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004994 <SD_disk_read+0xcc>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <SD_disk_read+0x32>
 80048f6:	2303      	movs	r3, #3
 80048f8:	e048      	b.n	800498c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80048fa:	4b27      	ldr	r3, [pc, #156]	@ (8004998 <SD_disk_read+0xd0>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b00      	cmp	r3, #0
 8004904:	d102      	bne.n	800490c <SD_disk_read+0x44>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	025b      	lsls	r3, r3, #9
 800490a:	607b      	str	r3, [r7, #4]

	SELECT();
 800490c:	f7ff fd24 	bl	8004358 <SELECT>

	if (count == 1)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d111      	bne.n	800493a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	2051      	movs	r0, #81	@ 0x51
 800491a:	f7ff fe7e 	bl	800461a <SD_SendCmd>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d129      	bne.n	8004978 <SD_disk_read+0xb0>
 8004924:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004928:	68b8      	ldr	r0, [r7, #8]
 800492a:	f7ff fe03 	bl	8004534 <SD_RxDataBlock>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d021      	beq.n	8004978 <SD_disk_read+0xb0>
 8004934:	2300      	movs	r3, #0
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	e01e      	b.n	8004978 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	2052      	movs	r0, #82	@ 0x52
 800493e:	f7ff fe6c 	bl	800461a <SD_SendCmd>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d117      	bne.n	8004978 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004948:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800494c:	68b8      	ldr	r0, [r7, #8]
 800494e:	f7ff fdf1 	bl	8004534 <SD_RxDataBlock>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <SD_disk_read+0xa6>
				buff += 512;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800495e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	3b01      	subs	r3, #1
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1ed      	bne.n	8004948 <SD_disk_read+0x80>
 800496c:	e000      	b.n	8004970 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800496e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004970:	2100      	movs	r1, #0
 8004972:	204c      	movs	r0, #76	@ 0x4c
 8004974:	f7ff fe51 	bl	800461a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004978:	f7ff fcfa 	bl	8004370 <DESELECT>
	SPI_RxByte();
 800497c:	f7ff fd3a 	bl	80043f4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf14      	ite	ne
 8004986:	2301      	movne	r3, #1
 8004988:	2300      	moveq	r3, #0
 800498a:	b2db      	uxtb	r3, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	24000000 	.word	0x24000000
 8004998:	24000194 	.word	0x24000194

0800499c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4603      	mov	r3, r0
 80049aa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <SD_disk_write+0x1c>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <SD_disk_write+0x20>
 80049b8:	2304      	movs	r3, #4
 80049ba:	e06b      	b.n	8004a94 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80049bc:	4b37      	ldr	r3, [pc, #220]	@ (8004a9c <SD_disk_write+0x100>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <SD_disk_write+0x32>
 80049ca:	2303      	movs	r3, #3
 80049cc:	e062      	b.n	8004a94 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80049ce:	4b33      	ldr	r3, [pc, #204]	@ (8004a9c <SD_disk_write+0x100>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <SD_disk_write+0x44>
 80049dc:	2302      	movs	r3, #2
 80049de:	e059      	b.n	8004a94 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80049e0:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa0 <SD_disk_write+0x104>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d102      	bne.n	80049f2 <SD_disk_write+0x56>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	025b      	lsls	r3, r3, #9
 80049f0:	607b      	str	r3, [r7, #4]

	SELECT();
 80049f2:	f7ff fcb1 	bl	8004358 <SELECT>

	if (count == 1)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d110      	bne.n	8004a1e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	2058      	movs	r0, #88	@ 0x58
 8004a00:	f7ff fe0b 	bl	800461a <SD_SendCmd>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d13a      	bne.n	8004a80 <SD_disk_write+0xe4>
 8004a0a:	21fe      	movs	r1, #254	@ 0xfe
 8004a0c:	68b8      	ldr	r0, [r7, #8]
 8004a0e:	f7ff fdc1 	bl	8004594 <SD_TxDataBlock>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d033      	beq.n	8004a80 <SD_disk_write+0xe4>
			count = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	e030      	b.n	8004a80 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8004a1e:	4b20      	ldr	r3, [pc, #128]	@ (8004aa0 <SD_disk_write+0x104>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	2077      	movs	r0, #119	@ 0x77
 8004a2e:	f7ff fdf4 	bl	800461a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	2057      	movs	r0, #87	@ 0x57
 8004a36:	f7ff fdf0 	bl	800461a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	2059      	movs	r0, #89	@ 0x59
 8004a3e:	f7ff fdec 	bl	800461a <SD_SendCmd>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d11b      	bne.n	8004a80 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004a48:	21fc      	movs	r1, #252	@ 0xfc
 8004a4a:	68b8      	ldr	r0, [r7, #8]
 8004a4c:	f7ff fda2 	bl	8004594 <SD_TxDataBlock>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <SD_disk_write+0xd0>
				buff += 512;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004a5c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1ee      	bne.n	8004a48 <SD_disk_write+0xac>
 8004a6a:	e000      	b.n	8004a6e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004a6c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8004a6e:	21fd      	movs	r1, #253	@ 0xfd
 8004a70:	2000      	movs	r0, #0
 8004a72:	f7ff fd8f 	bl	8004594 <SD_TxDataBlock>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <SD_disk_write+0xe4>
			{
				count = 1;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004a80:	f7ff fc76 	bl	8004370 <DESELECT>
	SPI_RxByte();
 8004a84:	f7ff fcb6 	bl	80043f4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bf14      	ite	ne
 8004a8e:	2301      	movne	r3, #1
 8004a90:	2300      	moveq	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	24000000 	.word	0x24000000
 8004aa0:	24000194 	.word	0x24000194

08004aa4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b08b      	sub	sp, #44	@ 0x2c
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	603a      	str	r2, [r7, #0]
 8004aae:	71fb      	strb	r3, [r7, #7]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <SD_disk_ioctl+0x1e>
 8004abe:	2304      	movs	r3, #4
 8004ac0:	e113      	b.n	8004cea <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8004ac8:	79bb      	ldrb	r3, [r7, #6]
 8004aca:	2b05      	cmp	r3, #5
 8004acc:	d124      	bne.n	8004b18 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d012      	beq.n	8004afc <SD_disk_ioctl+0x58>
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	dc1a      	bgt.n	8004b10 <SD_disk_ioctl+0x6c>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <SD_disk_ioctl+0x40>
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d006      	beq.n	8004af0 <SD_disk_ioctl+0x4c>
 8004ae2:	e015      	b.n	8004b10 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004ae4:	f7ff fd0e 	bl	8004504 <SD_PowerOff>
			res = RES_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004aee:	e0fa      	b.n	8004ce6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8004af0:	f7ff fcc6 	bl	8004480 <SD_PowerOn>
			res = RES_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004afa:	e0f4      	b.n	8004ce6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	1c5c      	adds	r4, r3, #1
 8004b00:	f7ff fd0c 	bl	800451c <SD_CheckPower>
 8004b04:	4603      	mov	r3, r0
 8004b06:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b0e:	e0ea      	b.n	8004ce6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8004b10:	2304      	movs	r3, #4
 8004b12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b16:	e0e6      	b.n	8004ce6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004b18:	4b76      	ldr	r3, [pc, #472]	@ (8004cf4 <SD_disk_ioctl+0x250>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <SD_disk_ioctl+0x86>
 8004b26:	2303      	movs	r3, #3
 8004b28:	e0df      	b.n	8004cea <SD_disk_ioctl+0x246>

		SELECT();
 8004b2a:	f7ff fc15 	bl	8004358 <SELECT>

		switch (ctrl)
 8004b2e:	79bb      	ldrb	r3, [r7, #6]
 8004b30:	2b0d      	cmp	r3, #13
 8004b32:	f200 80c9 	bhi.w	8004cc8 <SD_disk_ioctl+0x224>
 8004b36:	a201      	add	r2, pc, #4	@ (adr r2, 8004b3c <SD_disk_ioctl+0x98>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004c33 	.word	0x08004c33
 8004b40:	08004b75 	.word	0x08004b75
 8004b44:	08004c23 	.word	0x08004c23
 8004b48:	08004cc9 	.word	0x08004cc9
 8004b4c:	08004cc9 	.word	0x08004cc9
 8004b50:	08004cc9 	.word	0x08004cc9
 8004b54:	08004cc9 	.word	0x08004cc9
 8004b58:	08004cc9 	.word	0x08004cc9
 8004b5c:	08004cc9 	.word	0x08004cc9
 8004b60:	08004cc9 	.word	0x08004cc9
 8004b64:	08004cc9 	.word	0x08004cc9
 8004b68:	08004c45 	.word	0x08004c45
 8004b6c:	08004c69 	.word	0x08004c69
 8004b70:	08004c8d 	.word	0x08004c8d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004b74:	2100      	movs	r1, #0
 8004b76:	2049      	movs	r0, #73	@ 0x49
 8004b78:	f7ff fd4f 	bl	800461a <SD_SendCmd>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f040 80a6 	bne.w	8004cd0 <SD_disk_ioctl+0x22c>
 8004b84:	f107 030c 	add.w	r3, r7, #12
 8004b88:	2110      	movs	r1, #16
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fcd2 	bl	8004534 <SD_RxDataBlock>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 809c 	beq.w	8004cd0 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004b98:	7b3b      	ldrb	r3, [r7, #12]
 8004b9a:	099b      	lsrs	r3, r3, #6
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10d      	bne.n	8004bbe <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004ba2:	7d7b      	ldrb	r3, [r7, #21]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	7d3b      	ldrb	r3, [r7, #20]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	4413      	add	r3, r2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004bb4:	8bfb      	ldrh	r3, [r7, #30]
 8004bb6:	029a      	lsls	r2, r3, #10
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	e02d      	b.n	8004c1a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004bbe:	7c7b      	ldrb	r3, [r7, #17]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	7dbb      	ldrb	r3, [r7, #22]
 8004bc8:	09db      	lsrs	r3, r3, #7
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	4413      	add	r3, r2
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	7d7b      	ldrb	r3, [r7, #21]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	f003 0306 	and.w	r3, r3, #6
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	4413      	add	r3, r2
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	3302      	adds	r3, #2
 8004be2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004be6:	7d3b      	ldrb	r3, [r7, #20]
 8004be8:	099b      	lsrs	r3, r3, #6
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	7cfb      	ldrb	r3, [r7, #19]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	7cbb      	ldrb	r3, [r7, #18]
 8004bfa:	029b      	lsls	r3, r3, #10
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3301      	adds	r3, #1
 8004c0a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004c0c:	8bfa      	ldrh	r2, [r7, #30]
 8004c0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c12:	3b09      	subs	r3, #9
 8004c14:	409a      	lsls	r2, r3
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8004c20:	e056      	b.n	8004cd0 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c28:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004c30:	e055      	b.n	8004cde <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004c32:	f7ff fc0b 	bl	800444c <SD_ReadyWait>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2bff      	cmp	r3, #255	@ 0xff
 8004c3a:	d14b      	bne.n	8004cd4 <SD_disk_ioctl+0x230>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004c42:	e047      	b.n	8004cd4 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004c44:	2100      	movs	r1, #0
 8004c46:	2049      	movs	r0, #73	@ 0x49
 8004c48:	f7ff fce7 	bl	800461a <SD_SendCmd>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d142      	bne.n	8004cd8 <SD_disk_ioctl+0x234>
 8004c52:	2110      	movs	r1, #16
 8004c54:	6a38      	ldr	r0, [r7, #32]
 8004c56:	f7ff fc6d 	bl	8004534 <SD_RxDataBlock>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d03b      	beq.n	8004cd8 <SD_disk_ioctl+0x234>
 8004c60:	2300      	movs	r3, #0
 8004c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004c66:	e037      	b.n	8004cd8 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004c68:	2100      	movs	r1, #0
 8004c6a:	204a      	movs	r0, #74	@ 0x4a
 8004c6c:	f7ff fcd5 	bl	800461a <SD_SendCmd>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d132      	bne.n	8004cdc <SD_disk_ioctl+0x238>
 8004c76:	2110      	movs	r1, #16
 8004c78:	6a38      	ldr	r0, [r7, #32]
 8004c7a:	f7ff fc5b 	bl	8004534 <SD_RxDataBlock>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d02b      	beq.n	8004cdc <SD_disk_ioctl+0x238>
 8004c84:	2300      	movs	r3, #0
 8004c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004c8a:	e027      	b.n	8004cdc <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	207a      	movs	r0, #122	@ 0x7a
 8004c90:	f7ff fcc3 	bl	800461a <SD_SendCmd>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d116      	bne.n	8004cc8 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004ca0:	e00b      	b.n	8004cba <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004ca2:	6a3c      	ldr	r4, [r7, #32]
 8004ca4:	1c63      	adds	r3, r4, #1
 8004ca6:	623b      	str	r3, [r7, #32]
 8004ca8:	f7ff fba4 	bl	80043f4 <SPI_RxByte>
 8004cac:	4603      	mov	r3, r0
 8004cae:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004cb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004cba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d9ef      	bls.n	8004ca2 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004cc8:	2304      	movs	r3, #4
 8004cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004cce:	e006      	b.n	8004cde <SD_disk_ioctl+0x23a>
			break;
 8004cd0:	bf00      	nop
 8004cd2:	e004      	b.n	8004cde <SD_disk_ioctl+0x23a>
			break;
 8004cd4:	bf00      	nop
 8004cd6:	e002      	b.n	8004cde <SD_disk_ioctl+0x23a>
			break;
 8004cd8:	bf00      	nop
 8004cda:	e000      	b.n	8004cde <SD_disk_ioctl+0x23a>
			break;
 8004cdc:	bf00      	nop
		}

		DESELECT();
 8004cde:	f7ff fb47 	bl	8004370 <DESELECT>
		SPI_RxByte();
 8004ce2:	f7ff fb87 	bl	80043f4 <SPI_RxByte>
	}

	return res;
 8004ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	372c      	adds	r7, #44	@ 0x2c
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd90      	pop	{r4, r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	24000000 	.word	0x24000000

08004cf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08e      	sub	sp, #56	@ 0x38
 8004cfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	605a      	str	r2, [r3, #4]
 8004d08:	609a      	str	r2, [r3, #8]
 8004d0a:	60da      	str	r2, [r3, #12]
 8004d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d0e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d14:	4a89      	ldr	r2, [pc, #548]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d16:	f043 0310 	orr.w	r3, r3, #16
 8004d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d1e:	4b87      	ldr	r3, [pc, #540]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	623b      	str	r3, [r7, #32]
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d2c:	4b83      	ldr	r3, [pc, #524]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d32:	4a82      	ldr	r2, [pc, #520]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d3c:	4b7f      	ldr	r3, [pc, #508]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d4a:	4b7c      	ldr	r3, [pc, #496]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d50:	4a7a      	ldr	r2, [pc, #488]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d5a:	4b78      	ldr	r3, [pc, #480]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d68:	4b74      	ldr	r3, [pc, #464]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d6e:	4a73      	ldr	r2, [pc, #460]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d70:	f043 0320 	orr.w	r3, r3, #32
 8004d74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d78:	4b70      	ldr	r3, [pc, #448]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d86:	4b6d      	ldr	r3, [pc, #436]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d8c:	4a6b      	ldr	r2, [pc, #428]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d8e:	f043 0302 	orr.w	r3, r3, #2
 8004d92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d96:	4b69      	ldr	r3, [pc, #420]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004da4:	4b65      	ldr	r3, [pc, #404]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004daa:	4a64      	ldr	r2, [pc, #400]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004dac:	f043 0308 	orr.w	r3, r3, #8
 8004db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004db4:	4b61      	ldr	r3, [pc, #388]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004dc2:	4b5e      	ldr	r3, [pc, #376]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dc8:	4a5c      	ldr	r2, [pc, #368]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004dca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004dd2:	4b5a      	ldr	r3, [pc, #360]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004de0:	4b56      	ldr	r3, [pc, #344]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004de6:	4a55      	ldr	r2, [pc, #340]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004de8:	f043 0304 	orr.w	r3, r3, #4
 8004dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004df0:	4b52      	ldr	r3, [pc, #328]	@ (8004f3c <MX_GPIO_Init+0x244>)
 8004df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004e04:	484e      	ldr	r0, [pc, #312]	@ (8004f40 <MX_GPIO_Init+0x248>)
 8004e06:	f009 fe03 	bl	800ea10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004e10:	484c      	ldr	r0, [pc, #304]	@ (8004f44 <MX_GPIO_Init+0x24c>)
 8004e12:	f009 fdfd 	bl	800ea10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004e16:	2200      	movs	r2, #0
 8004e18:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004e1c:	484a      	ldr	r0, [pc, #296]	@ (8004f48 <MX_GPIO_Init+0x250>)
 8004e1e:	f009 fdf7 	bl	800ea10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004e22:	2200      	movs	r2, #0
 8004e24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e28:	4848      	ldr	r0, [pc, #288]	@ (8004f4c <MX_GPIO_Init+0x254>)
 8004e2a:	f009 fdf1 	bl	800ea10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004e34:	4846      	ldr	r0, [pc, #280]	@ (8004f50 <MX_GPIO_Init+0x258>)
 8004e36:	f009 fdeb 	bl	800ea10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004e3a:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e40:	2301      	movs	r3, #1
 8004e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e50:	4619      	mov	r1, r3
 8004e52:	483b      	ldr	r0, [pc, #236]	@ (8004f40 <MX_GPIO_Init+0x248>)
 8004e54:	f009 fc1c 	bl	800e690 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004e58:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e66:	2300      	movs	r3, #0
 8004e68:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4834      	ldr	r0, [pc, #208]	@ (8004f44 <MX_GPIO_Init+0x24c>)
 8004e72:	f009 fc0d 	bl	800e690 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004e76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e88:	4619      	mov	r1, r3
 8004e8a:	482e      	ldr	r0, [pc, #184]	@ (8004f44 <MX_GPIO_Init+0x24c>)
 8004e8c:	f009 fc00 	bl	800e690 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004e90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e96:	2301      	movs	r3, #1
 8004e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4827      	ldr	r0, [pc, #156]	@ (8004f48 <MX_GPIO_Init+0x250>)
 8004eaa:	f009 fbf1 	bl	800e690 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4820      	ldr	r0, [pc, #128]	@ (8004f48 <MX_GPIO_Init+0x250>)
 8004ec8:	f009 fbe2 	bl	800e690 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004ecc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eda:	2300      	movs	r3, #0
 8004edc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4819      	ldr	r0, [pc, #100]	@ (8004f4c <MX_GPIO_Init+0x254>)
 8004ee6:	f009 fbd3 	bl	800e690 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004eea:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f00:	4619      	mov	r1, r3
 8004f02:	4813      	ldr	r0, [pc, #76]	@ (8004f50 <MX_GPIO_Init+0x258>)
 8004f04:	f009 fbc4 	bl	800e690 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004f08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f0e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	480b      	ldr	r0, [pc, #44]	@ (8004f4c <MX_GPIO_Init+0x254>)
 8004f20:	f009 fbb6 	bl	800e690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004f24:	2200      	movs	r2, #0
 8004f26:	2100      	movs	r1, #0
 8004f28:	2028      	movs	r0, #40	@ 0x28
 8004f2a:	f006 fcb2 	bl	800b892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004f2e:	2028      	movs	r0, #40	@ 0x28
 8004f30:	f006 fcc9 	bl	800b8c6 <HAL_NVIC_EnableIRQ>

}
 8004f34:	bf00      	nop
 8004f36:	3738      	adds	r7, #56	@ 0x38
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	58021000 	.word	0x58021000
 8004f44:	58020400 	.word	0x58020400
 8004f48:	58020c00 	.word	0x58020c00
 8004f4c:	58021800 	.word	0x58021800
 8004f50:	58020000 	.word	0x58020000

08004f54 <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004f58:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd0 <MX_I2C5_Init+0x7c>)
 8004f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd4 <MX_I2C5_Init+0x80>)
 8004f5c:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd0 <MX_I2C5_Init+0x7c>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004f64:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd0 <MX_I2C5_Init+0x7c>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f6a:	4b19      	ldr	r3, [pc, #100]	@ (8004fd0 <MX_I2C5_Init+0x7c>)
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f70:	4b17      	ldr	r3, [pc, #92]	@ (8004fd0 <MX_I2C5_Init+0x7c>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004f76:	4b16      	ldr	r3, [pc, #88]	@ (8004fd0 <MX_I2C5_Init+0x7c>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004f7c:	4b14      	ldr	r3, [pc, #80]	@ (8004fd0 <MX_I2C5_Init+0x7c>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f82:	4b13      	ldr	r3, [pc, #76]	@ (8004fd0 <MX_I2C5_Init+0x7c>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f88:	4b11      	ldr	r3, [pc, #68]	@ (8004fd0 <MX_I2C5_Init+0x7c>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004f8e:	4810      	ldr	r0, [pc, #64]	@ (8004fd0 <MX_I2C5_Init+0x7c>)
 8004f90:	f009 fd72 	bl	800ea78 <HAL_I2C_Init>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004f9a:	f003 f881 	bl	80080a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	480b      	ldr	r0, [pc, #44]	@ (8004fd0 <MX_I2C5_Init+0x7c>)
 8004fa2:	f00c f92b 	bl	80111fc <HAL_I2CEx_ConfigAnalogFilter>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004fac:	f003 f878 	bl	80080a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4807      	ldr	r0, [pc, #28]	@ (8004fd0 <MX_I2C5_Init+0x7c>)
 8004fb4:	f00c f96d 	bl	8011292 <HAL_I2CEx_ConfigDigitalFilter>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004fbe:	f003 f86f 	bl	80080a0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004fc2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004fc6:	f00c f9b1 	bl	801132c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004fca:	bf00      	nop
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	24000198 	.word	0x24000198
 8004fd4:	40006400 	.word	0x40006400

08004fd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b0b8      	sub	sp, #224	@ 0xe0
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	609a      	str	r2, [r3, #8]
 8004fec:	60da      	str	r2, [r3, #12]
 8004fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ff0:	f107 0310 	add.w	r3, r7, #16
 8004ff4:	22b8      	movs	r2, #184	@ 0xb8
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f019 fbed 	bl	801e7d8 <memset>
  if(i2cHandle->Instance==I2C5)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a2b      	ldr	r2, [pc, #172]	@ (80050b0 <HAL_I2C_MspInit+0xd8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d14f      	bne.n	80050a8 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8005008:	f04f 0208 	mov.w	r2, #8
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8005014:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005018:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800501c:	f107 0310 	add.w	r3, r7, #16
 8005020:	4618      	mov	r0, r3
 8005022:	f00d f947 	bl	80122b4 <HAL_RCCEx_PeriphCLKConfig>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 800502c:	f003 f838 	bl	80080a0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005030:	4b20      	ldr	r3, [pc, #128]	@ (80050b4 <HAL_I2C_MspInit+0xdc>)
 8005032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005036:	4a1f      	ldr	r2, [pc, #124]	@ (80050b4 <HAL_I2C_MspInit+0xdc>)
 8005038:	f043 0304 	orr.w	r3, r3, #4
 800503c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005040:	4b1c      	ldr	r3, [pc, #112]	@ (80050b4 <HAL_I2C_MspInit+0xdc>)
 8005042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800504e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005052:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005056:	2312      	movs	r3, #18
 8005058:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800505c:	2301      	movs	r3, #1
 800505e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005062:	2300      	movs	r3, #0
 8005064:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8005068:	2304      	movs	r3, #4
 800506a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800506e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8005072:	4619      	mov	r1, r3
 8005074:	4810      	ldr	r0, [pc, #64]	@ (80050b8 <HAL_I2C_MspInit+0xe0>)
 8005076:	f009 fb0b 	bl	800e690 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 800507a:	4b0e      	ldr	r3, [pc, #56]	@ (80050b4 <HAL_I2C_MspInit+0xdc>)
 800507c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005080:	4a0c      	ldr	r2, [pc, #48]	@ (80050b4 <HAL_I2C_MspInit+0xdc>)
 8005082:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005086:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800508a:	4b0a      	ldr	r3, [pc, #40]	@ (80050b4 <HAL_I2C_MspInit+0xdc>)
 800508c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8005098:	2200      	movs	r2, #0
 800509a:	2101      	movs	r1, #1
 800509c:	209d      	movs	r0, #157	@ 0x9d
 800509e:	f006 fbf8 	bl	800b892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 80050a2:	209d      	movs	r0, #157	@ 0x9d
 80050a4:	f006 fc0f 	bl	800b8c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 80050a8:	bf00      	nop
 80050aa:	37e0      	adds	r7, #224	@ 0xe0
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40006400 	.word	0x40006400
 80050b4:	58024400 	.word	0x58024400
 80050b8:	58020800 	.word	0x58020800

080050bc <__NVIC_SystemReset>:
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80050c0:	f3bf 8f4f 	dsb	sy
}
 80050c4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80050c6:	4b06      	ldr	r3, [pc, #24]	@ (80050e0 <__NVIC_SystemReset+0x24>)
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80050ce:	4904      	ldr	r1, [pc, #16]	@ (80050e0 <__NVIC_SystemReset+0x24>)
 80050d0:	4b04      	ldr	r3, [pc, #16]	@ (80050e4 <__NVIC_SystemReset+0x28>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80050d6:	f3bf 8f4f 	dsb	sy
}
 80050da:	bf00      	nop
    __NOP();
 80050dc:	bf00      	nop
 80050de:	e7fd      	b.n	80050dc <__NVIC_SystemReset+0x20>
 80050e0:	e000ed00 	.word	0xe000ed00
 80050e4:	05fa0004 	.word	0x05fa0004

080050e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	@ 0x28
 80050ec:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80050ee:	f002 ffab 	bl	8008048 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050f2:	f004 fabf 	bl	8009674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80050f6:	f000 ffd9 	bl	80060ac <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80050fa:	f001 f849 	bl	8006190 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80050fe:	f7ff fdfb 	bl	8004cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005102:	f7fe fbdf 	bl	80038c4 <MX_DMA_Init>
  MX_I2C5_Init();
 8005106:	f7ff ff25 	bl	8004f54 <MX_I2C5_Init>
  MX_SPI6_Init();
 800510a:	f003 f825 	bl	8008158 <MX_SPI6_Init>
  MX_ADC2_Init();
 800510e:	f7fe faeb 	bl	80036e8 <MX_ADC2_Init>
  MX_SPI2_Init();
 8005112:	f002 ffcb 	bl	80080ac <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005116:	f004 f9c5 	bl	80094a4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800511a:	f003 fee3 	bl	8008ee4 <MX_TIM1_Init>
  MX_TIM8_Init();
 800511e:	f004 f859 	bl	80091d4 <MX_TIM8_Init>
  MX_TIM3_Init();
 8005122:	f003 ffdb 	bl	80090dc <MX_TIM3_Init>
  MX_FATFS_Init();
 8005126:	f016 f9a3 	bl	801b470 <MX_FATFS_Init>
  MX_TIM2_Init();
 800512a:	f003 ff83 	bl	8009034 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 800512e:	2201      	movs	r2, #1
 8005130:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005134:	489a      	ldr	r0, [pc, #616]	@ (80053a0 <main+0x2b8>)
 8005136:	f009 fc6b 	bl	800ea10 <HAL_GPIO_WritePin>

  	  STARTUP = 1;
 800513a:	4b9a      	ldr	r3, [pc, #616]	@ (80053a4 <main+0x2bc>)
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]

  	DRON_ON_GRUND = 1;
 8005140:	4b99      	ldr	r3, [pc, #612]	@ (80053a8 <main+0x2c0>)
 8005142:	2201      	movs	r2, #1
 8005144:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 8005146:	4b99      	ldr	r3, [pc, #612]	@ (80053ac <main+0x2c4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a99      	ldr	r2, [pc, #612]	@ (80053b0 <main+0x2c8>)
 800514c:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 800514e:	4b99      	ldr	r3, [pc, #612]	@ (80053b4 <main+0x2cc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a97      	ldr	r2, [pc, #604]	@ (80053b0 <main+0x2c8>)
 8005154:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 8005156:	4b98      	ldr	r3, [pc, #608]	@ (80053b8 <main+0x2d0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a95      	ldr	r2, [pc, #596]	@ (80053b0 <main+0x2c8>)
 800515c:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 800515e:	4b94      	ldr	r3, [pc, #592]	@ (80053b0 <main+0x2c8>)
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 8005166:	4b95      	ldr	r3, [pc, #596]	@ (80053bc <main+0x2d4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a95      	ldr	r2, [pc, #596]	@ (80053c0 <main+0x2d8>)
 800516c:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 800516e:	4b95      	ldr	r3, [pc, #596]	@ (80053c4 <main+0x2dc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a93      	ldr	r2, [pc, #588]	@ (80053c0 <main+0x2d8>)
 8005174:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 8005176:	4b94      	ldr	r3, [pc, #592]	@ (80053c8 <main+0x2e0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a91      	ldr	r2, [pc, #580]	@ (80053c0 <main+0x2d8>)
 800517c:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 800517e:	4b90      	ldr	r3, [pc, #576]	@ (80053c0 <main+0x2d8>)
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 8005186:	4b91      	ldr	r3, [pc, #580]	@ (80053cc <main+0x2e4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a91      	ldr	r2, [pc, #580]	@ (80053d0 <main+0x2e8>)
 800518c:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 800518e:	4b91      	ldr	r3, [pc, #580]	@ (80053d4 <main+0x2ec>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a8f      	ldr	r2, [pc, #572]	@ (80053d0 <main+0x2e8>)
 8005194:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 8005196:	4b90      	ldr	r3, [pc, #576]	@ (80053d8 <main+0x2f0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a8d      	ldr	r2, [pc, #564]	@ (80053d0 <main+0x2e8>)
 800519c:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 800519e:	4b8c      	ldr	r3, [pc, #560]	@ (80053d0 <main+0x2e8>)
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 80051a6:	4b8d      	ldr	r3, [pc, #564]	@ (80053dc <main+0x2f4>)
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	4b8c      	ldr	r3, [pc, #560]	@ (80053e0 <main+0x2f8>)
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	4b8b      	ldr	r3, [pc, #556]	@ (80053e4 <main+0x2fc>)
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	4b8a      	ldr	r3, [pc, #552]	@ (80053e8 <main+0x300>)
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	4b89      	ldr	r3, [pc, #548]	@ (80053ec <main+0x304>)
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	4b88      	ldr	r3, [pc, #544]	@ (80053f0 <main+0x308>)
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 80051d6:	4b87      	ldr	r3, [pc, #540]	@ (80053f4 <main+0x30c>)
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 80051de:	4b86      	ldr	r3, [pc, #536]	@ (80053f8 <main+0x310>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	4b85      	ldr	r3, [pc, #532]	@ (80053fc <main+0x314>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 80051ea:	4b85      	ldr	r3, [pc, #532]	@ (8005400 <main+0x318>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 80051f0:	4b84      	ldr	r3, [pc, #528]	@ (8005404 <main+0x31c>)
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	4b83      	ldr	r3, [pc, #524]	@ (8005408 <main+0x320>)
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	4b82      	ldr	r3, [pc, #520]	@ (800540c <main+0x324>)
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	4b81      	ldr	r3, [pc, #516]	@ (8005410 <main+0x328>)
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 8005210:	4b80      	ldr	r3, [pc, #512]	@ (8005414 <main+0x32c>)
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 8005218:	4b7f      	ldr	r3, [pc, #508]	@ (8005418 <main+0x330>)
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 8005220:	4b7e      	ldr	r3, [pc, #504]	@ (800541c <main+0x334>)
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 8005228:	4b7d      	ldr	r3, [pc, #500]	@ (8005420 <main+0x338>)
 800522a:	2200      	movs	r2, #0
 800522c:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 800522e:	4b7d      	ldr	r3, [pc, #500]	@ (8005424 <main+0x33c>)
 8005230:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005234:	801a      	strh	r2, [r3, #0]


  	FDP_D_Gain_AR = 0;
 8005236:	4b7c      	ldr	r3, [pc, #496]	@ (8005428 <main+0x340>)
 8005238:	2200      	movs	r2, #0
 800523a:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 0;
 800523c:	4b7b      	ldr	r3, [pc, #492]	@ (800542c <main+0x344>)
 800523e:	2200      	movs	r2, #0
 8005240:	801a      	strh	r2, [r3, #0]


  	old_error_pitch = 0;// ruznica
 8005242:	4b7b      	ldr	r3, [pc, #492]	@ (8005430 <main+0x348>)
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 800524a:	4b7a      	ldr	r3, [pc, #488]	@ (8005434 <main+0x34c>)
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 8005252:	4b79      	ldr	r3, [pc, #484]	@ (8005438 <main+0x350>)
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 800525a:	4b78      	ldr	r3, [pc, #480]	@ (800543c <main+0x354>)
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 8005262:	4b77      	ldr	r3, [pc, #476]	@ (8005440 <main+0x358>)
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 800526a:	4b76      	ldr	r3, [pc, #472]	@ (8005444 <main+0x35c>)
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;
 8005272:	4b75      	ldr	r3, [pc, #468]	@ (8005448 <main+0x360>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 8005278:	4b74      	ldr	r3, [pc, #464]	@ (800544c <main+0x364>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 800527e:	4b74      	ldr	r3, [pc, #464]	@ (8005450 <main+0x368>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 8005284:	4b73      	ldr	r3, [pc, #460]	@ (8005454 <main+0x36c>)
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 800528a:	4b73      	ldr	r3, [pc, #460]	@ (8005458 <main+0x370>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 8005290:	4b72      	ldr	r3, [pc, #456]	@ (800545c <main+0x374>)
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 8005296:	4b72      	ldr	r3, [pc, #456]	@ (8005460 <main+0x378>)
 8005298:	f642 1204 	movw	r2, #10500	@ 0x2904
 800529c:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 800529e:	4b71      	ldr	r3, [pc, #452]	@ (8005464 <main+0x37c>)
 80052a0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80052a4:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 80052a6:	4b70      	ldr	r3, [pc, #448]	@ (8005468 <main+0x380>)
 80052a8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80052ac:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 80052ae:	4b6f      	ldr	r3, [pc, #444]	@ (800546c <main+0x384>)
 80052b0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80052b4:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 80052b6:	4b6e      	ldr	r3, [pc, #440]	@ (8005470 <main+0x388>)
 80052b8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80052bc:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 80052be:	4b6d      	ldr	r3, [pc, #436]	@ (8005474 <main+0x38c>)
 80052c0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80052c4:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 80052c6:	4b6c      	ldr	r3, [pc, #432]	@ (8005478 <main+0x390>)
 80052c8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80052cc:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 80052ce:	4b6b      	ldr	r3, [pc, #428]	@ (800547c <main+0x394>)
 80052d0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80052d4:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 80052d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005480 <main+0x398>)
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 80052dc:	4b69      	ldr	r3, [pc, #420]	@ (8005484 <main+0x39c>)
 80052de:	2200      	movs	r2, #0
 80052e0:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 80052e2:	4b69      	ldr	r3, [pc, #420]	@ (8005488 <main+0x3a0>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 80052e8:	4b68      	ldr	r3, [pc, #416]	@ (800548c <main+0x3a4>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 80052ee:	4b68      	ldr	r3, [pc, #416]	@ (8005490 <main+0x3a8>)
 80052f0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80052f4:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 80052f6:	4b67      	ldr	r3, [pc, #412]	@ (8005494 <main+0x3ac>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	4b66      	ldr	r3, [pc, #408]	@ (8005498 <main+0x3b0>)
 80052fe:	2200      	movs	r2, #0
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	4b66      	ldr	r3, [pc, #408]	@ (800549c <main+0x3b4>)
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 8005308:	4b65      	ldr	r3, [pc, #404]	@ (80054a0 <main+0x3b8>)
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	4b65      	ldr	r3, [pc, #404]	@ (80054a4 <main+0x3bc>)
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]

  	thrust_values = 0;
 8005314:	4964      	ldr	r1, [pc, #400]	@ (80054a8 <main+0x3c0>)
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	e9c1 2300 	strd	r2, r3, [r1]

p_angular_rate_pitchfactor = 14;
 8005322:	4b62      	ldr	r3, [pc, #392]	@ (80054ac <main+0x3c4>)
 8005324:	4a62      	ldr	r2, [pc, #392]	@ (80054b0 <main+0x3c8>)
 8005326:	601a      	str	r2, [r3, #0]
p_angular_rate_roolfactor = 12;
 8005328:	4b62      	ldr	r3, [pc, #392]	@ (80054b4 <main+0x3cc>)
 800532a:	4a63      	ldr	r2, [pc, #396]	@ (80054b8 <main+0x3d0>)
 800532c:	601a      	str	r2, [r3, #0]
p_angular_rate_yawfactor = 10;// -> 10
 800532e:	4b63      	ldr	r3, [pc, #396]	@ (80054bc <main+0x3d4>)
 8005330:	4a63      	ldr	r2, [pc, #396]	@ (80054c0 <main+0x3d8>)
 8005332:	601a      	str	r2, [r3, #0]
///////////////////////////////////////////////////////////////////////////
i_angular_rate_pitchfactor = 10;
 8005334:	4b63      	ldr	r3, [pc, #396]	@ (80054c4 <main+0x3dc>)
 8005336:	4a62      	ldr	r2, [pc, #392]	@ (80054c0 <main+0x3d8>)
 8005338:	601a      	str	r2, [r3, #0]
i_angular_rate_roolfactor = 10;
 800533a:	4b63      	ldr	r3, [pc, #396]	@ (80054c8 <main+0x3e0>)
 800533c:	4a60      	ldr	r2, [pc, #384]	@ (80054c0 <main+0x3d8>)
 800533e:	601a      	str	r2, [r3, #0]
i_angular_rate_yawfactor = 0;
 8005340:	4b62      	ldr	r3, [pc, #392]	@ (80054cc <main+0x3e4>)
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
///////////////////////////////////////////////////////////////////////////
d_angular_rate_pitchfactor = 30;
 8005348:	4b61      	ldr	r3, [pc, #388]	@ (80054d0 <main+0x3e8>)
 800534a:	4a62      	ldr	r2, [pc, #392]	@ (80054d4 <main+0x3ec>)
 800534c:	601a      	str	r2, [r3, #0]
d_angular_rate_roolfactor = 20;
 800534e:	4b62      	ldr	r3, [pc, #392]	@ (80054d8 <main+0x3f0>)
 8005350:	4a62      	ldr	r2, [pc, #392]	@ (80054dc <main+0x3f4>)
 8005352:	601a      	str	r2, [r3, #0]
d_angular_rate_yawfactor = 5;
 8005354:	4b62      	ldr	r3, [pc, #392]	@ (80054e0 <main+0x3f8>)
 8005356:	4a63      	ldr	r2, [pc, #396]	@ (80054e4 <main+0x3fc>)
 8005358:	601a      	str	r2, [r3, #0]

p_pitchfactor = 5.5;
 800535a:	4b14      	ldr	r3, [pc, #80]	@ (80053ac <main+0x2c4>)
 800535c:	4a62      	ldr	r2, [pc, #392]	@ (80054e8 <main+0x400>)
 800535e:	601a      	str	r2, [r3, #0]
p_roolfactor = 6;//5
 8005360:	4b16      	ldr	r3, [pc, #88]	@ (80053bc <main+0x2d4>)
 8005362:	4a62      	ldr	r2, [pc, #392]	@ (80054ec <main+0x404>)
 8005364:	601a      	str	r2, [r3, #0]
p_yawfactor = 5;
 8005366:	4b19      	ldr	r3, [pc, #100]	@ (80053cc <main+0x2e4>)
 8005368:	4a5e      	ldr	r2, [pc, #376]	@ (80054e4 <main+0x3fc>)
 800536a:	601a      	str	r2, [r3, #0]
///////////////////////////////////////////////////////////////////////////
i_pitchfactor = 9;//8
 800536c:	4b11      	ldr	r3, [pc, #68]	@ (80053b4 <main+0x2cc>)
 800536e:	4a60      	ldr	r2, [pc, #384]	@ (80054f0 <main+0x408>)
 8005370:	601a      	str	r2, [r3, #0]
i_roolfactor = 8;//10
 8005372:	4b14      	ldr	r3, [pc, #80]	@ (80053c4 <main+0x2dc>)
 8005374:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8005378:	601a      	str	r2, [r3, #0]
i_yawfactor = 0;
 800537a:	4b16      	ldr	r3, [pc, #88]	@ (80053d4 <main+0x2ec>)
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
///////////////////////////////////////////////////////////////////////////
d_pitchfactor = 30;//25
 8005382:	4b0d      	ldr	r3, [pc, #52]	@ (80053b8 <main+0x2d0>)
 8005384:	4a53      	ldr	r2, [pc, #332]	@ (80054d4 <main+0x3ec>)
 8005386:	601a      	str	r2, [r3, #0]
d_roolfactor = 20;
 8005388:	4b0f      	ldr	r3, [pc, #60]	@ (80053c8 <main+0x2e0>)
 800538a:	4a54      	ldr	r2, [pc, #336]	@ (80054dc <main+0x3f4>)
 800538c:	601a      	str	r2, [r3, #0]
d_yawfactor = 0;
 800538e:	4b12      	ldr	r3, [pc, #72]	@ (80053d8 <main+0x2f0>)
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	601a      	str	r2, [r3, #0]




  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005396:	4b45      	ldr	r3, [pc, #276]	@ (80054ac <main+0x3c4>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a56      	ldr	r2, [pc, #344]	@ (80054f4 <main+0x40c>)
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e0ab      	b.n	80054f8 <main+0x410>
 80053a0:	58021800 	.word	0x58021800
 80053a4:	00000080 	.word	0x00000080
 80053a8:	000041c4 	.word	0x000041c4
 80053ac:	000040f4 	.word	0x000040f4
 80053b0:	00004118 	.word	0x00004118
 80053b4:	00004100 	.word	0x00004100
 80053b8:	0000410c 	.word	0x0000410c
 80053bc:	000040f8 	.word	0x000040f8
 80053c0:	0000412c 	.word	0x0000412c
 80053c4:	00004104 	.word	0x00004104
 80053c8:	00004110 	.word	0x00004110
 80053cc:	000040fc 	.word	0x000040fc
 80053d0:	00004140 	.word	0x00004140
 80053d4:	00004108 	.word	0x00004108
 80053d8:	00004114 	.word	0x00004114
 80053dc:	00000018 	.word	0x00000018
 80053e0:	0000001c 	.word	0x0000001c
 80053e4:	00000020 	.word	0x00000020
 80053e8:	00000024 	.word	0x00000024
 80053ec:	00000028 	.word	0x00000028
 80053f0:	0000002c 	.word	0x0000002c
 80053f4:	00000058 	.word	0x00000058
 80053f8:	00000078 	.word	0x00000078
 80053fc:	0000007c 	.word	0x0000007c
 8005400:	00000084 	.word	0x00000084
 8005404:	000000e8 	.word	0x000000e8
 8005408:	000000ec 	.word	0x000000ec
 800540c:	000000f0 	.word	0x000000f0
 8005410:	000000f4 	.word	0x000000f4
 8005414:	00004060 	.word	0x00004060
 8005418:	00004064 	.word	0x00004064
 800541c:	00004068 	.word	0x00004068
 8005420:	0000406c 	.word	0x0000406c
 8005424:	0000406e 	.word	0x0000406e
 8005428:	00004084 	.word	0x00004084
 800542c:	00004086 	.word	0x00004086
 8005430:	000040ac 	.word	0x000040ac
 8005434:	000040b0 	.word	0x000040b0
 8005438:	000040b4 	.word	0x000040b4
 800543c:	000040b8 	.word	0x000040b8
 8005440:	000040bc 	.word	0x000040bc
 8005444:	000040c0 	.word	0x000040c0
 8005448:	000040c4 	.word	0x000040c4
 800544c:	000040c8 	.word	0x000040c8
 8005450:	000040cc 	.word	0x000040cc
 8005454:	000040d0 	.word	0x000040d0
 8005458:	000040d4 	.word	0x000040d4
 800545c:	000040d8 	.word	0x000040d8
 8005460:	000041b4 	.word	0x000041b4
 8005464:	000041b6 	.word	0x000041b6
 8005468:	000041b8 	.word	0x000041b8
 800546c:	000041ba 	.word	0x000041ba
 8005470:	000041bc 	.word	0x000041bc
 8005474:	000041be 	.word	0x000041be
 8005478:	000041c0 	.word	0x000041c0
 800547c:	000041c2 	.word	0x000041c2
 8005480:	000041e6 	.word	0x000041e6
 8005484:	000041e7 	.word	0x000041e7
 8005488:	000041ec 	.word	0x000041ec
 800548c:	000041f0 	.word	0x000041f0
 8005490:	000041f8 	.word	0x000041f8
 8005494:	000041fc 	.word	0x000041fc
 8005498:	000041fd 	.word	0x000041fd
 800549c:	000041fe 	.word	0x000041fe
 80054a0:	00004200 	.word	0x00004200
 80054a4:	00004204 	.word	0x00004204
 80054a8:	00004070 	.word	0x00004070
 80054ac:	00004154 	.word	0x00004154
 80054b0:	41600000 	.word	0x41600000
 80054b4:	00004158 	.word	0x00004158
 80054b8:	41400000 	.word	0x41400000
 80054bc:	0000415c 	.word	0x0000415c
 80054c0:	41200000 	.word	0x41200000
 80054c4:	00004160 	.word	0x00004160
 80054c8:	00004164 	.word	0x00004164
 80054cc:	00004168 	.word	0x00004168
 80054d0:	0000416c 	.word	0x0000416c
 80054d4:	41f00000 	.word	0x41f00000
 80054d8:	00004170 	.word	0x00004170
 80054dc:	41a00000 	.word	0x41a00000
 80054e0:	00004174 	.word	0x00004174
 80054e4:	40a00000 	.word	0x40a00000
 80054e8:	40b00000 	.word	0x40b00000
 80054ec:	40c00000 	.word	0x40c00000
 80054f0:	41100000 	.word	0x41100000
 80054f4:	00004178 	.word	0x00004178
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 80054f8:	4ba4      	ldr	r3, [pc, #656]	@ (800578c <main+0x6a4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4aa4      	ldr	r2, [pc, #656]	@ (8005790 <main+0x6a8>)
 80054fe:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005500:	4ba4      	ldr	r3, [pc, #656]	@ (8005794 <main+0x6ac>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4aa2      	ldr	r2, [pc, #648]	@ (8005790 <main+0x6a8>)
 8005506:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 8005508:	4ba3      	ldr	r3, [pc, #652]	@ (8005798 <main+0x6b0>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4aa3      	ldr	r2, [pc, #652]	@ (800579c <main+0x6b4>)
 800550e:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005510:	4ba3      	ldr	r3, [pc, #652]	@ (80057a0 <main+0x6b8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4aa1      	ldr	r2, [pc, #644]	@ (800579c <main+0x6b4>)
 8005516:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005518:	4ba2      	ldr	r3, [pc, #648]	@ (80057a4 <main+0x6bc>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a9f      	ldr	r2, [pc, #636]	@ (800579c <main+0x6b4>)
 800551e:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 8005520:	4ba1      	ldr	r3, [pc, #644]	@ (80057a8 <main+0x6c0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4aa1      	ldr	r2, [pc, #644]	@ (80057ac <main+0x6c4>)
 8005526:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005528:	4ba1      	ldr	r3, [pc, #644]	@ (80057b0 <main+0x6c8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a9f      	ldr	r2, [pc, #636]	@ (80057ac <main+0x6c4>)
 800552e:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005530:	4ba0      	ldr	r3, [pc, #640]	@ (80057b4 <main+0x6cc>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a9d      	ldr	r2, [pc, #628]	@ (80057ac <main+0x6c4>)
 8005536:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 8005538:	4b9f      	ldr	r3, [pc, #636]	@ (80057b8 <main+0x6d0>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a9f      	ldr	r2, [pc, #636]	@ (80057bc <main+0x6d4>)
 800553e:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 8005540:	4b9f      	ldr	r3, [pc, #636]	@ (80057c0 <main+0x6d8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a9d      	ldr	r2, [pc, #628]	@ (80057bc <main+0x6d4>)
 8005546:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 8005548:	4b9e      	ldr	r3, [pc, #632]	@ (80057c4 <main+0x6dc>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a9b      	ldr	r2, [pc, #620]	@ (80057bc <main+0x6d4>)
 800554e:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 8005550:	4b9d      	ldr	r3, [pc, #628]	@ (80057c8 <main+0x6e0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a9d      	ldr	r2, [pc, #628]	@ (80057cc <main+0x6e4>)
 8005556:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 8005558:	4b9d      	ldr	r3, [pc, #628]	@ (80057d0 <main+0x6e8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a9b      	ldr	r2, [pc, #620]	@ (80057cc <main+0x6e4>)
 800555e:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 8005560:	4b9c      	ldr	r3, [pc, #624]	@ (80057d4 <main+0x6ec>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a99      	ldr	r2, [pc, #612]	@ (80057cc <main+0x6e4>)
 8005566:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 8005568:	4b9b      	ldr	r3, [pc, #620]	@ (80057d8 <main+0x6f0>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a9b      	ldr	r2, [pc, #620]	@ (80057dc <main+0x6f4>)
 800556e:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 8005570:	4b9b      	ldr	r3, [pc, #620]	@ (80057e0 <main+0x6f8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a99      	ldr	r2, [pc, #612]	@ (80057dc <main+0x6f4>)
 8005576:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 8005578:	4b9a      	ldr	r3, [pc, #616]	@ (80057e4 <main+0x6fc>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a97      	ldr	r2, [pc, #604]	@ (80057dc <main+0x6f4>)
 800557e:	6093      	str	r3, [r2, #8]

  	wanted_pitch_rx = 0;// chcainy stan
 8005580:	4b99      	ldr	r3, [pc, #612]	@ (80057e8 <main+0x700>)
 8005582:	2200      	movs	r2, #0
 8005584:	801a      	strh	r2, [r3, #0]
  	wanted_rool_rx = 0;
 8005586:	4b99      	ldr	r3, [pc, #612]	@ (80057ec <main+0x704>)
 8005588:	2200      	movs	r2, #0
 800558a:	801a      	strh	r2, [r3, #0]
  	wanted_yaw_rx = 0;
 800558c:	4b98      	ldr	r3, [pc, #608]	@ (80057f0 <main+0x708>)
 800558e:	2200      	movs	r2, #0
 8005590:	801a      	strh	r2, [r3, #0]
  	wanted_gz = 0 ;
 8005592:	4b98      	ldr	r3, [pc, #608]	@ (80057f4 <main+0x70c>)
 8005594:	2200      	movs	r2, #0
 8005596:	801a      	strh	r2, [r3, #0]


  	data.ox = 0;
 8005598:	4b97      	ldr	r3, [pc, #604]	@ (80057f8 <main+0x710>)
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 80055a0:	4b95      	ldr	r3, [pc, #596]	@ (80057f8 <main+0x710>)
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 80055a8:	4b93      	ldr	r3, [pc, #588]	@ (80057f8 <main+0x710>)
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 80055b0:	4b91      	ldr	r3, [pc, #580]	@ (80057f8 <main+0x710>)
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 80055b8:	4b8f      	ldr	r3, [pc, #572]	@ (80057f8 <main+0x710>)
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 80055c0:	4b8d      	ldr	r3, [pc, #564]	@ (80057f8 <main+0x710>)
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 80055c8:	4b8c      	ldr	r3, [pc, #560]	@ (80057fc <main+0x714>)
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 80055d0:	4b8b      	ldr	r3, [pc, #556]	@ (8005800 <main+0x718>)
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 80055d8:	4b8a      	ldr	r3, [pc, #552]	@ (8005804 <main+0x71c>)
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 80055e0:	4b89      	ldr	r3, [pc, #548]	@ (8005808 <main+0x720>)
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 80055e8:	4b88      	ldr	r3, [pc, #544]	@ (800580c <main+0x724>)
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 80055f0:	4b87      	ldr	r3, [pc, #540]	@ (8005810 <main+0x728>)
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

  	MYDRON.PITCH_STA = 0;
 80055f8:	4b86      	ldr	r3, [pc, #536]	@ (8005814 <main+0x72c>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	MYDRON.ROOL_STA = 0;
 8005600:	4b84      	ldr	r3, [pc, #528]	@ (8005814 <main+0x72c>)
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  	MYDRON.YAW_STA = 0;
 8005608:	4b82      	ldr	r3, [pc, #520]	@ (8005814 <main+0x72c>)
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  	ax = 0,ay = 0,az = 0, gx = 0, gy = 0, gz = 0;
 8005610:	4b81      	ldr	r3, [pc, #516]	@ (8005818 <main+0x730>)
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	4b80      	ldr	r3, [pc, #512]	@ (800581c <main+0x734>)
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	4b7f      	ldr	r3, [pc, #508]	@ (8005820 <main+0x738>)
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	4b7e      	ldr	r3, [pc, #504]	@ (8005824 <main+0x73c>)
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	4b7d      	ldr	r3, [pc, #500]	@ (8005828 <main+0x740>)
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	4b7c      	ldr	r3, [pc, #496]	@ (800582c <main+0x744>)
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
  	ax_ang = 0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8005640:	4b7b      	ldr	r3, [pc, #492]	@ (8005830 <main+0x748>)
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	4b7a      	ldr	r3, [pc, #488]	@ (8005834 <main+0x74c>)
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	4b79      	ldr	r3, [pc, #484]	@ (8005838 <main+0x750>)
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	4b78      	ldr	r3, [pc, #480]	@ (800583c <main+0x754>)
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	4b77      	ldr	r3, [pc, #476]	@ (8005840 <main+0x758>)
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	4b76      	ldr	r3, [pc, #472]	@ (8005844 <main+0x75c>)
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
  	accelx_cal = 0, accely_cal = 0, accelz_cal = 0, gyrox_cal = 0, gyroy_cal = 0, gyroz_cal = 0;
 8005670:	4b75      	ldr	r3, [pc, #468]	@ (8005848 <main+0x760>)
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	4b74      	ldr	r3, [pc, #464]	@ (800584c <main+0x764>)
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	4b73      	ldr	r3, [pc, #460]	@ (8005850 <main+0x768>)
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	4b72      	ldr	r3, [pc, #456]	@ (8005854 <main+0x76c>)
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	4b71      	ldr	r3, [pc, #452]	@ (8005858 <main+0x770>)
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	4b70      	ldr	r3, [pc, #448]	@ (800585c <main+0x774>)
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	601a      	str	r2, [r3, #0]

  	NRF24_Timer_ms = 0;
 80056a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005860 <main+0x778>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	701a      	strb	r2, [r3, #0]

  	now_pitch = 0;//pitch -> x
 80056a6:	4b6f      	ldr	r3, [pc, #444]	@ (8005864 <main+0x77c>)
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
  	now_rool = 0;//rool -> y
 80056ae:	4b6e      	ldr	r3, [pc, #440]	@ (8005868 <main+0x780>)
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
  	now_yaw = 0;
 80056b6:	4b6d      	ldr	r3, [pc, #436]	@ (800586c <main+0x784>)
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
  	wanted_pitch = 0;
 80056be:	4b6c      	ldr	r3, [pc, #432]	@ (8005870 <main+0x788>)
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]

  	pitch_error = 0;
 80056c6:	4b6b      	ldr	r3, [pc, #428]	@ (8005874 <main+0x78c>)
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
  	rool_error = 0;
 80056ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005878 <main+0x790>)
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
  	yaw_error = 0;
 80056d6:	4b69      	ldr	r3, [pc, #420]	@ (800587c <main+0x794>)
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
  	pitch_ar_error = 0;
 80056de:	4b68      	ldr	r3, [pc, #416]	@ (8005880 <main+0x798>)
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
  	rool_ar_error = 0;
 80056e6:	4b67      	ldr	r3, [pc, #412]	@ (8005884 <main+0x79c>)
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
  	yaw_ar_error = 0;
 80056ee:	4b66      	ldr	r3, [pc, #408]	@ (8005888 <main+0x7a0>)
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]

  	NRF24_Tx_Inte = 0;
 80056f6:	4b65      	ldr	r3, [pc, #404]	@ (800588c <main+0x7a4>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	701a      	strb	r2, [r3, #0]
  	NRF24_Rx_Inte = 0;
 80056fc:	4b64      	ldr	r3, [pc, #400]	@ (8005890 <main+0x7a8>)
 80056fe:	2200      	movs	r2, #0
 8005700:	701a      	strb	r2, [r3, #0]
  	NRF24_Message_count = 0;
 8005702:	4b64      	ldr	r3, [pc, #400]	@ (8005894 <main+0x7ac>)
 8005704:	2200      	movs	r2, #0
 8005706:	801a      	strh	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 8005708:	4a63      	ldr	r2, [pc, #396]	@ (8005898 <main+0x7b0>)
 800570a:	f107 0308 	add.w	r3, r7, #8
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	4611      	mov	r1, r2
 8005712:	8019      	strh	r1, [r3, #0]
 8005714:	3302      	adds	r3, #2
 8005716:	0c12      	lsrs	r2, r2, #16
 8005718:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 800571a:	4a60      	ldr	r2, [pc, #384]	@ (800589c <main+0x7b4>)
 800571c:	1d3b      	adds	r3, r7, #4
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	4611      	mov	r1, r2
 8005722:	8019      	strh	r1, [r3, #0]
 8005724:	3302      	adds	r3, #2
 8005726:	0c12      	lsrs	r2, r2, #16
 8005728:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 800572a:	2201      	movs	r2, #1
 800572c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005730:	485b      	ldr	r0, [pc, #364]	@ (80058a0 <main+0x7b8>)
 8005732:	f009 f96d 	bl	800ea10 <HAL_GPIO_WritePin>
  	LED_6_1;
 8005736:	2201      	movs	r2, #1
 8005738:	2108      	movs	r1, #8
 800573a:	485a      	ldr	r0, [pc, #360]	@ (80058a4 <main+0x7bc>)
 800573c:	f009 f968 	bl	800ea10 <HAL_GPIO_WritePin>
  	LED_7_1;
 8005740:	2201      	movs	r2, #1
 8005742:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005746:	4856      	ldr	r0, [pc, #344]	@ (80058a0 <main+0x7b8>)
 8005748:	f009 f962 	bl	800ea10 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 800574c:	2201      	movs	r2, #1
 800574e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005752:	4855      	ldr	r0, [pc, #340]	@ (80058a8 <main+0x7c0>)
 8005754:	f009 f95c 	bl	800ea10 <HAL_GPIO_WritePin>
  	LED_G_1;
 8005758:	2201      	movs	r2, #1
 800575a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800575e:	4851      	ldr	r0, [pc, #324]	@ (80058a4 <main+0x7bc>)
 8005760:	f009 f956 	bl	800ea10 <HAL_GPIO_WritePin>
  	LED_Y_1;
 8005764:	2201      	movs	r2, #1
 8005766:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800576a:	4850      	ldr	r0, [pc, #320]	@ (80058ac <main+0x7c4>)
 800576c:	f009 f950 	bl	800ea10 <HAL_GPIO_WritePin>
  	LED_R_1;
 8005770:	2201      	movs	r2, #1
 8005772:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005776:	484d      	ldr	r0, [pc, #308]	@ (80058ac <main+0x7c4>)
 8005778:	f009 f94a 	bl	800ea10 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 800577c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005780:	f004 f80a 	bl	8009798 <HAL_Delay>
  	LED_G_0;
 8005784:	2200      	movs	r2, #0
 8005786:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800578a:	e091      	b.n	80058b0 <main+0x7c8>
 800578c:	00004160 	.word	0x00004160
 8005790:	00004178 	.word	0x00004178
 8005794:	0000416c 	.word	0x0000416c
 8005798:	00004158 	.word	0x00004158
 800579c:	0000418c 	.word	0x0000418c
 80057a0:	00004164 	.word	0x00004164
 80057a4:	00004170 	.word	0x00004170
 80057a8:	0000415c 	.word	0x0000415c
 80057ac:	000041a0 	.word	0x000041a0
 80057b0:	00004168 	.word	0x00004168
 80057b4:	00004174 	.word	0x00004174
 80057b8:	000040f4 	.word	0x000040f4
 80057bc:	00004118 	.word	0x00004118
 80057c0:	00004100 	.word	0x00004100
 80057c4:	0000410c 	.word	0x0000410c
 80057c8:	000040f8 	.word	0x000040f8
 80057cc:	0000412c 	.word	0x0000412c
 80057d0:	00004104 	.word	0x00004104
 80057d4:	00004110 	.word	0x00004110
 80057d8:	000040fc 	.word	0x000040fc
 80057dc:	00004140 	.word	0x00004140
 80057e0:	00004108 	.word	0x00004108
 80057e4:	00004114 	.word	0x00004114
 80057e8:	00004058 	.word	0x00004058
 80057ec:	0000405a 	.word	0x0000405a
 80057f0:	0000405c 	.word	0x0000405c
 80057f4:	0000405e 	.word	0x0000405e
 80057f8:	00000088 	.word	0x00000088
 80057fc:	000040dc 	.word	0x000040dc
 8005800:	000040e0 	.word	0x000040e0
 8005804:	000040e4 	.word	0x000040e4
 8005808:	000040e8 	.word	0x000040e8
 800580c:	000040ec 	.word	0x000040ec
 8005810:	000040f0 	.word	0x000040f0
 8005814:	00000188 	.word	0x00000188
 8005818:	00000000 	.word	0x00000000
 800581c:	00000004 	.word	0x00000004
 8005820:	00000008 	.word	0x00000008
 8005824:	0000000c 	.word	0x0000000c
 8005828:	00000010 	.word	0x00000010
 800582c:	00000014 	.word	0x00000014
 8005830:	00000018 	.word	0x00000018
 8005834:	0000001c 	.word	0x0000001c
 8005838:	00000020 	.word	0x00000020
 800583c:	00000024 	.word	0x00000024
 8005840:	00000028 	.word	0x00000028
 8005844:	0000002c 	.word	0x0000002c
 8005848:	00000030 	.word	0x00000030
 800584c:	00000034 	.word	0x00000034
 8005850:	00000038 	.word	0x00000038
 8005854:	0000003c 	.word	0x0000003c
 8005858:	00000040 	.word	0x00000040
 800585c:	00000044 	.word	0x00000044
 8005860:	00000182 	.word	0x00000182
 8005864:	00004088 	.word	0x00004088
 8005868:	0000408c 	.word	0x0000408c
 800586c:	00004090 	.word	0x00004090
 8005870:	00004078 	.word	0x00004078
 8005874:	00004094 	.word	0x00004094
 8005878:	00004098 	.word	0x00004098
 800587c:	0000409c 	.word	0x0000409c
 8005880:	000040a0 	.word	0x000040a0
 8005884:	000040a4 	.word	0x000040a4
 8005888:	000040a8 	.word	0x000040a8
 800588c:	00000180 	.word	0x00000180
 8005890:	00000181 	.word	0x00000181
 8005894:	00000186 	.word	0x00000186
 8005898:	0801f23c 	.word	0x0801f23c
 800589c:	0801f240 	.word	0x0801f240
 80058a0:	58020000 	.word	0x58020000
 80058a4:	58021000 	.word	0x58021000
 80058a8:	58020c00 	.word	0x58020c00
 80058ac:	58020400 	.word	0x58020400
 80058b0:	48b0      	ldr	r0, [pc, #704]	@ (8005b74 <main+0xa8c>)
 80058b2:	f009 f8ad 	bl	800ea10 <HAL_GPIO_WritePin>
  	LED_Y_0;
 80058b6:	2200      	movs	r2, #0
 80058b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058bc:	48ae      	ldr	r0, [pc, #696]	@ (8005b78 <main+0xa90>)
 80058be:	f009 f8a7 	bl	800ea10 <HAL_GPIO_WritePin>
  	LED_R_0;
 80058c2:	2200      	movs	r2, #0
 80058c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058c8:	48ab      	ldr	r0, [pc, #684]	@ (8005b78 <main+0xa90>)
 80058ca:	f009 f8a1 	bl	800ea10 <HAL_GPIO_WritePin>
  	LED_5_0;
 80058ce:	2200      	movs	r2, #0
 80058d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058d4:	48a9      	ldr	r0, [pc, #676]	@ (8005b7c <main+0xa94>)
 80058d6:	f009 f89b 	bl	800ea10 <HAL_GPIO_WritePin>
  	LED_6_0;
 80058da:	2200      	movs	r2, #0
 80058dc:	2108      	movs	r1, #8
 80058de:	48a5      	ldr	r0, [pc, #660]	@ (8005b74 <main+0xa8c>)
 80058e0:	f009 f896 	bl	800ea10 <HAL_GPIO_WritePin>
  	LED_7_0;
 80058e4:	2200      	movs	r2, #0
 80058e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058ea:	48a4      	ldr	r0, [pc, #656]	@ (8005b7c <main+0xa94>)
 80058ec:	f009 f890 	bl	800ea10 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 80058f0:	2200      	movs	r2, #0
 80058f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058f6:	48a2      	ldr	r0, [pc, #648]	@ (8005b80 <main+0xa98>)
 80058f8:	f009 f88a 	bl	800ea10 <HAL_GPIO_WritePin>


  	for(int i = 0; i < 4000; i++){
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	e009      	b.n	8005916 <main+0x82e>
  		Old_Data_stack.olddata[i] = 0;
 8005902:	4aa0      	ldr	r2, [pc, #640]	@ (8005b84 <main+0xa9c>)
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800591c:	dbf1      	blt.n	8005902 <main+0x81a>
  	}
  	Old_Data_stack.start_pointer = 0;
 800591e:	4b99      	ldr	r3, [pc, #612]	@ (8005b84 <main+0xa9c>)
 8005920:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8005924:	2200      	movs	r2, #0
 8005926:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 800592a:	4b96      	ldr	r3, [pc, #600]	@ (8005b84 <main+0xa9c>)
 800592c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8005930:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8005934:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 8005938:	4b93      	ldr	r3, [pc, #588]	@ (8005b88 <main+0xaa0>)
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 800593e:	4893      	ldr	r0, [pc, #588]	@ (8005b8c <main+0xaa4>)
 8005940:	f011 f8aa 	bl	8016a98 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 8005944:	2201      	movs	r2, #1
 8005946:	4990      	ldr	r1, [pc, #576]	@ (8005b88 <main+0xaa0>)
 8005948:	4891      	ldr	r0, [pc, #580]	@ (8005b90 <main+0xaa8>)
 800594a:	f004 fc77 	bl	800a23c <HAL_ADC_Start_DMA>
  	LED_R_1;
 800594e:	2201      	movs	r2, #1
 8005950:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005954:	4888      	ldr	r0, [pc, #544]	@ (8005b78 <main+0xa90>)
 8005956:	f009 f85b 	bl	800ea10 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 800595a:	bf00      	nop
 800595c:	4b8a      	ldr	r3, [pc, #552]	@ (8005b88 <main+0xaa0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0fb      	beq.n	800595c <main+0x874>

  	}
  	LED_R_0;
 8005964:	2200      	movs	r2, #0
 8005966:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800596a:	4883      	ldr	r0, [pc, #524]	@ (8005b78 <main+0xa90>)
 800596c:	f009 f850 	bl	800ea10 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 8005970:	f7fe fcb2 	bl	80042d8 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 8005974:	2104      	movs	r1, #4
 8005976:	4887      	ldr	r0, [pc, #540]	@ (8005b94 <main+0xaac>)
 8005978:	f011 f9ea 	bl	8016d50 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800597c:	2108      	movs	r1, #8
 800597e:	4885      	ldr	r0, [pc, #532]	@ (8005b94 <main+0xaac>)
 8005980:	f011 f9e6 	bl	8016d50 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005984:	210c      	movs	r1, #12
 8005986:	4883      	ldr	r0, [pc, #524]	@ (8005b94 <main+0xaac>)
 8005988:	f011 f9e2 	bl	8016d50 <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 800598c:	4b82      	ldr	r3, [pc, #520]	@ (8005b98 <main+0xab0>)
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	4618      	mov	r0, r3
 8005994:	f001 fef8 	bl	8007788 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005998:	4b7f      	ldr	r3, [pc, #508]	@ (8005b98 <main+0xab0>)
 800599a:	8a9b      	ldrh	r3, [r3, #20]
 800599c:	2b07      	cmp	r3, #7
 800599e:	d107      	bne.n	80059b0 <main+0x8c8>
  	{
  		LED_R_1;
 80059a0:	2201      	movs	r2, #1
 80059a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059a6:	4874      	ldr	r0, [pc, #464]	@ (8005b78 <main+0xa90>)
 80059a8:	f009 f832 	bl	800ea10 <HAL_GPIO_WritePin>
  		while(1){
 80059ac:	bf00      	nop
 80059ae:	e7fd      	b.n	80059ac <main+0x8c4>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80059b0:	4b79      	ldr	r3, [pc, #484]	@ (8005b98 <main+0xab0>)
 80059b2:	8a9b      	ldrh	r3, [r3, #20]
 80059b4:	2b09      	cmp	r3, #9
 80059b6:	d107      	bne.n	80059c8 <main+0x8e0>
  		LED_R_1;
 80059b8:	2201      	movs	r2, #1
 80059ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059be:	486e      	ldr	r0, [pc, #440]	@ (8005b78 <main+0xa90>)
 80059c0:	f009 f826 	bl	800ea10 <HAL_GPIO_WritePin>

  		while(1){
 80059c4:	bf00      	nop
 80059c6:	e7fd      	b.n	80059c4 <main+0x8dc>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 80059c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80059cc:	486a      	ldr	r0, [pc, #424]	@ (8005b78 <main+0xa90>)
 80059ce:	f009 f807 	bl	800e9e0 <HAL_GPIO_ReadPin>
 80059d2:	4603      	mov	r3, r0
 80059d4:	461a      	mov	r2, r3
 80059d6:	4b71      	ldr	r3, [pc, #452]	@ (8005b9c <main+0xab4>)
 80059d8:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 80059da:	4b70      	ldr	r3, [pc, #448]	@ (8005b9c <main+0xab4>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d103      	bne.n	80059ea <main+0x902>
		SD_enable_Flag = 0;
 80059e2:	4b6e      	ldr	r3, [pc, #440]	@ (8005b9c <main+0xab4>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	e002      	b.n	80059f0 <main+0x908>
	}
	else{
		SD_enable_Flag = 1;
 80059ea:	4b6c      	ldr	r3, [pc, #432]	@ (8005b9c <main+0xab4>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 80059f0:	4b6a      	ldr	r3, [pc, #424]	@ (8005b9c <main+0xab4>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d15f      	bne.n	8005ab8 <main+0x9d0>
		LED_uSD_1;
 80059f8:	2201      	movs	r2, #1
 80059fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059fe:	4860      	ldr	r0, [pc, #384]	@ (8005b80 <main+0xa98>)
 8005a00:	f009 f806 	bl	800ea10 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 8005a04:	2201      	movs	r2, #1
 8005a06:	4966      	ldr	r1, [pc, #408]	@ (8005ba0 <main+0xab8>)
 8005a08:	4866      	ldr	r0, [pc, #408]	@ (8005ba4 <main+0xabc>)
 8005a0a:	f018 f8cd 	bl	801dba8 <f_mount>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	461a      	mov	r2, r3
 8005a12:	4b65      	ldr	r3, [pc, #404]	@ (8005ba8 <main+0xac0>)
 8005a14:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 8005a16:	4865      	ldr	r0, [pc, #404]	@ (8005bac <main+0xac4>)
 8005a18:	f018 fd10 	bl	801e43c <f_unlink>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	461a      	mov	r2, r3
 8005a20:	4b61      	ldr	r3, [pc, #388]	@ (8005ba8 <main+0xac0>)
 8005a22:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 8005a24:	2201      	movs	r2, #1
 8005a26:	495e      	ldr	r1, [pc, #376]	@ (8005ba0 <main+0xab8>)
 8005a28:	485e      	ldr	r0, [pc, #376]	@ (8005ba4 <main+0xabc>)
 8005a2a:	f018 f8bd 	bl	801dba8 <f_mount>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	461a      	mov	r2, r3
 8005a32:	4b5d      	ldr	r3, [pc, #372]	@ (8005ba8 <main+0xac0>)
 8005a34:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 8005a36:	220a      	movs	r2, #10
 8005a38:	495d      	ldr	r1, [pc, #372]	@ (8005bb0 <main+0xac8>)
 8005a3a:	485e      	ldr	r0, [pc, #376]	@ (8005bb4 <main+0xacc>)
 8005a3c:	f018 f8fa 	bl	801dc34 <f_open>
 8005a40:	4603      	mov	r3, r0
 8005a42:	461a      	mov	r2, r3
 8005a44:	4b58      	ldr	r3, [pc, #352]	@ (8005ba8 <main+0xac0>)
 8005a46:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a4e:	484c      	ldr	r0, [pc, #304]	@ (8005b80 <main+0xa98>)
 8005a50:	f008 ffde 	bl	800ea10 <HAL_GPIO_WritePin>

		LED_uSD_1;
 8005a54:	2201      	movs	r2, #1
 8005a56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a5a:	4849      	ldr	r0, [pc, #292]	@ (8005b80 <main+0xa98>)
 8005a5c:	f008 ffd8 	bl	800ea10 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 8005a60:	2300      	movs	r3, #0
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	e007      	b.n	8005a76 <main+0x98e>
			DataToSendBuffer[i] = 49;
 8005a66:	4a54      	ldr	r2, [pc, #336]	@ (8005bb8 <main+0xad0>)
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	2231      	movs	r2, #49	@ 0x31
 8005a6e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	3301      	adds	r3, #1
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	4a50      	ldr	r2, [pc, #320]	@ (8005bbc <main+0xad4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	ddf3      	ble.n	8005a66 <main+0x97e>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 8005a7e:	4b50      	ldr	r3, [pc, #320]	@ (8005bc0 <main+0xad8>)
 8005a80:	2281      	movs	r2, #129	@ 0x81
 8005a82:	494d      	ldr	r1, [pc, #308]	@ (8005bb8 <main+0xad0>)
 8005a84:	484b      	ldr	r0, [pc, #300]	@ (8005bb4 <main+0xacc>)
 8005a86:	f018 fa9d 	bl	801dfc4 <f_write>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4b46      	ldr	r3, [pc, #280]	@ (8005ba8 <main+0xac0>)
 8005a90:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 8005a92:	4848      	ldr	r0, [pc, #288]	@ (8005bb4 <main+0xacc>)
 8005a94:	f018 fca8 	bl	801e3e8 <f_close>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4b42      	ldr	r3, [pc, #264]	@ (8005ba8 <main+0xac0>)
 8005a9e:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 8005aa0:	4b41      	ldr	r3, [pc, #260]	@ (8005ba8 <main+0xac0>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <main+0x9c4>
			NVIC_SystemReset();
 8005aa8:	f7ff fb08 	bl	80050bc <__NVIC_SystemReset>
			while(1){

			}
		}
		LED_uSD_0;
 8005aac:	2200      	movs	r2, #0
 8005aae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ab2:	4833      	ldr	r0, [pc, #204]	@ (8005b80 <main+0xa98>)
 8005ab4:	f008 ffac 	bl	800ea10 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005abe:	482f      	ldr	r0, [pc, #188]	@ (8005b7c <main+0xa94>)
 8005ac0:	f008 ffa6 	bl	800ea10 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 8005ac4:	483f      	ldr	r0, [pc, #252]	@ (8005bc4 <main+0xadc>)
 8005ac6:	f7fb fbcb 	bl	8001260 <MPU6050_INIT>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d107      	bne.n	8005ae0 <main+0x9f8>
			LED_R_1;
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ad6:	4828      	ldr	r0, [pc, #160]	@ (8005b78 <main+0xa90>)
 8005ad8:	f008 ff9a 	bl	800ea10 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8005adc:	f7ff faee 	bl	80050bc <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ae6:	4824      	ldr	r0, [pc, #144]	@ (8005b78 <main+0xa90>)
 8005ae8:	f008 ff92 	bl	800ea10 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 8005aec:	eddf 7a36 	vldr	s15, [pc, #216]	@ 8005bc8 <main+0xae0>
 8005af0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005bcc <main+0xae4>
 8005af4:	4b36      	ldr	r3, [pc, #216]	@ (8005bd0 <main+0xae8>)
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	4b36      	ldr	r3, [pc, #216]	@ (8005bd4 <main+0xaec>)
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	eef0 0a47 	vmov.f32	s1, s14
 8005b00:	eeb0 0a67 	vmov.f32	s0, s15
 8005b04:	4b34      	ldr	r3, [pc, #208]	@ (8005bd8 <main+0xaf0>)
 8005b06:	4a35      	ldr	r2, [pc, #212]	@ (8005bdc <main+0xaf4>)
 8005b08:	4935      	ldr	r1, [pc, #212]	@ (8005be0 <main+0xaf8>)
 8005b0a:	4836      	ldr	r0, [pc, #216]	@ (8005be4 <main+0xafc>)
 8005b0c:	f7fb fc72 	bl	80013f4 <MPU6050_CALIBRATION>
		LED_Y_0;
 8005b10:	2200      	movs	r2, #0
 8005b12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b16:	4818      	ldr	r0, [pc, #96]	@ (8005b78 <main+0xa90>)
 8005b18:	f008 ff7a 	bl	800ea10 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 8005b1c:	4829      	ldr	r0, [pc, #164]	@ (8005bc4 <main+0xadc>)
 8005b1e:	f7fa fdd7 	bl	80006d0 <BMP180_init>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d107      	bne.n	8005b38 <main+0xa50>
			LED_R_1;
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b2e:	4812      	ldr	r0, [pc, #72]	@ (8005b78 <main+0xa90>)
 8005b30:	f008 ff6e 	bl	800ea10 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8005b34:	f7ff fac2 	bl	80050bc <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b3e:	480e      	ldr	r0, [pc, #56]	@ (8005b78 <main+0xa90>)
 8005b40:	f008 ff66 	bl	800ea10 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 8005b44:	4828      	ldr	r0, [pc, #160]	@ (8005be8 <main+0xb00>)
 8005b46:	f7fb f915 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b50:	4809      	ldr	r0, [pc, #36]	@ (8005b78 <main+0xa90>)
 8005b52:	f008 ff5d 	bl	800ea10 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 8005b56:	481b      	ldr	r0, [pc, #108]	@ (8005bc4 <main+0xadc>)
 8005b58:	f7fb fa3e 	bl	8000fd8 <HMC5883L_Init>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d144      	bne.n	8005bec <main+0xb04>
			LED_R_1;
 8005b62:	2201      	movs	r2, #1
 8005b64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b68:	4803      	ldr	r0, [pc, #12]	@ (8005b78 <main+0xa90>)
 8005b6a:	f008 ff51 	bl	800ea10 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8005b6e:	f7ff faa5 	bl	80050bc <__NVIC_SystemReset>
 8005b72:	bf00      	nop
 8005b74:	58021000 	.word	0x58021000
 8005b78:	58020400 	.word	0x58020400
 8005b7c:	58020000 	.word	0x58020000
 8005b80:	58020c00 	.word	0x58020c00
 8005b84:	000001ac 	.word	0x000001ac
 8005b88:	24000eb0 	.word	0x24000eb0
 8005b8c:	24000464 	.word	0x24000464
 8005b90:	240000ac 	.word	0x240000ac
 8005b94:	24000380 	.word	0x24000380
 8005b98:	00000188 	.word	0x00000188
 8005b9c:	000041f4 	.word	0x000041f4
 8005ba0:	0801f220 	.word	0x0801f220
 8005ba4:	24000eb4 	.word	0x24000eb4
 8005ba8:	24001eec 	.word	0x24001eec
 8005bac:	0801f224 	.word	0x0801f224
 8005bb0:	0801f230 	.word	0x0801f230
 8005bb4:	24001ef0 	.word	0x24001ef0
 8005bb8:	24002f28 	.word	0x24002f28
 8005bbc:	0001f7e7 	.word	0x0001f7e7
 8005bc0:	24002f24 	.word	0x24002f24
 8005bc4:	24000198 	.word	0x24000198
 8005bc8:	42830000 	.word	0x42830000
 8005bcc:	46000000 	.word	0x46000000
 8005bd0:	00000044 	.word	0x00000044
 8005bd4:	00000040 	.word	0x00000040
 8005bd8:	0000003c 	.word	0x0000003c
 8005bdc:	00000038 	.word	0x00000038
 8005be0:	00000034 	.word	0x00000034
 8005be4:	00000030 	.word	0x00000030
 8005be8:	000000f0 	.word	0x000000f0
			while(1){
			}
		}
		LED_Y_1;
 8005bec:	2201      	movs	r2, #1
 8005bee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005bf2:	488e      	ldr	r0, [pc, #568]	@ (8005e2c <main+0xd44>)
 8005bf4:	f008 ff0c 	bl	800ea10 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005bf8:	f7fb fafc 	bl	80011f4 <HMC5883L_Calibration>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	461a      	mov	r2, r3
 8005c00:	4b8b      	ldr	r3, [pc, #556]	@ (8005e30 <main+0xd48>)
 8005c02:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 8005c04:	2200      	movs	r2, #0
 8005c06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c0a:	4888      	ldr	r0, [pc, #544]	@ (8005e2c <main+0xd44>)
 8005c0c:	f008 ff00 	bl	800ea10 <HAL_GPIO_WritePin>

		LED_5_0;
 8005c10:	2200      	movs	r2, #0
 8005c12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c16:	4887      	ldr	r0, [pc, #540]	@ (8005e34 <main+0xd4c>)
 8005c18:	f008 fefa 	bl	800ea10 <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005c1c:	4b86      	ldr	r3, [pc, #536]	@ (8005e38 <main+0xd50>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 8005c22:	4b85      	ldr	r3, [pc, #532]	@ (8005e38 <main+0xd50>)
 8005c24:	220c      	movs	r2, #12
 8005c26:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 8005c28:	4b83      	ldr	r3, [pc, #524]	@ (8005e38 <main+0xd50>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	805a      	strh	r2, [r3, #2]
		MYDRON.PITCH = 0;
 8005c2e:	4b82      	ldr	r3, [pc, #520]	@ (8005e38 <main+0xd50>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	809a      	strh	r2, [r3, #4]
		MYDRON.ROOL = 0;
 8005c34:	4b80      	ldr	r3, [pc, #512]	@ (8005e38 <main+0xd50>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	80da      	strh	r2, [r3, #6]
		MYDRON.YAW = 0;
 8005c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8005e38 <main+0xd50>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	811a      	strh	r2, [r3, #8]



	/////////////////////////////// nRF24
		LED_6_1;
 8005c40:	2201      	movs	r2, #1
 8005c42:	2108      	movs	r1, #8
 8005c44:	487d      	ldr	r0, [pc, #500]	@ (8005e3c <main+0xd54>)
 8005c46:	f008 fee3 	bl	800ea10 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 8005c4a:	487d      	ldr	r0, [pc, #500]	@ (8005e40 <main+0xd58>)
 8005c4c:	f7fc fda8 	bl	80027a0 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 8005c50:	f107 0308 	add.w	r3, r7, #8
 8005c54:	4619      	mov	r1, r3
 8005c56:	2000      	movs	r0, #0
 8005c58:	f7fc fc1f 	bl	800249a <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 8005c5c:	1d3b      	adds	r3, r7, #4
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fc fc54 	bl	800250c <nRF24_SetTXAddress>
		nRF24_TX_Mode();
 8005c64:	f7fc fa44 	bl	80020f0 <nRF24_TX_Mode>
		NRF24_MODE = 2;
 8005c68:	4b76      	ldr	r3, [pc, #472]	@ (8005e44 <main+0xd5c>)
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	701a      	strb	r2, [r3, #0]


		for(int i = 0; i < 32; i++){
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e007      	b.n	8005c84 <main+0xb9c>
			Txcode[i] = 0;
 8005c74:	4a74      	ldr	r2, [pc, #464]	@ (8005e48 <main+0xd60>)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	4413      	add	r3, r2
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	3301      	adds	r3, #1
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b1f      	cmp	r3, #31
 8005c88:	ddf4      	ble.n	8005c74 <main+0xb8c>
		}
		Txcode[22] = 'd';
 8005c8a:	4b6f      	ldr	r3, [pc, #444]	@ (8005e48 <main+0xd60>)
 8005c8c:	2264      	movs	r2, #100	@ 0x64
 8005c8e:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 8005c90:	4b6d      	ldr	r3, [pc, #436]	@ (8005e48 <main+0xd60>)
 8005c92:	2272      	movs	r2, #114	@ 0x72
 8005c94:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 8005c96:	4b6c      	ldr	r3, [pc, #432]	@ (8005e48 <main+0xd60>)
 8005c98:	226f      	movs	r2, #111	@ 0x6f
 8005c9a:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 8005c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8005e48 <main+0xd60>)
 8005c9e:	226e      	movs	r2, #110	@ 0x6e
 8005ca0:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 8005ca2:	4b69      	ldr	r3, [pc, #420]	@ (8005e48 <main+0xd60>)
 8005ca4:	2232      	movs	r2, #50	@ 0x32
 8005ca6:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 8005ca8:	4b67      	ldr	r3, [pc, #412]	@ (8005e48 <main+0xd60>)
 8005caa:	2263      	movs	r2, #99	@ 0x63
 8005cac:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 8005cae:	4b66      	ldr	r3, [pc, #408]	@ (8005e48 <main+0xd60>)
 8005cb0:	2231      	movs	r2, #49	@ 0x31
 8005cb2:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 8005cb4:	4b64      	ldr	r3, [pc, #400]	@ (8005e48 <main+0xd60>)
 8005cb6:	227a      	movs	r2, #122	@ 0x7a
 8005cb8:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 8005cba:	4b63      	ldr	r3, [pc, #396]	@ (8005e48 <main+0xd60>)
 8005cbc:	2261      	movs	r2, #97	@ 0x61
 8005cbe:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 8005cc0:	4b61      	ldr	r3, [pc, #388]	@ (8005e48 <main+0xd60>)
 8005cc2:	2237      	movs	r2, #55	@ 0x37
 8005cc4:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 8005cc6:	4860      	ldr	r0, [pc, #384]	@ (8005e48 <main+0xd60>)
 8005cc8:	f7fc fcd0 	bl	800266c <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 8005ccc:	f7fc fce8 	bl	80026a0 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005cd0:	f7fc f9e2 	bl	8002098 <nRF24_RX_Mode>
		NRF24_MODE = 1;
 8005cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8005e44 <main+0xd5c>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	701a      	strb	r2, [r3, #0]

		uint8_t cunter = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005cde:	e022      	b.n	8005d26 <main+0xc3e>
			LED_G_1;
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ce6:	4855      	ldr	r0, [pc, #340]	@ (8005e3c <main+0xd54>)
 8005ce8:	f008 fe92 	bl	800ea10 <HAL_GPIO_WritePin>
			LED_Y_1;
 8005cec:	2201      	movs	r2, #1
 8005cee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005cf2:	484e      	ldr	r0, [pc, #312]	@ (8005e2c <main+0xd44>)
 8005cf4:	f008 fe8c 	bl	800ea10 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	f003 fd4d 	bl	8009798 <HAL_Delay>
			LED_G_0;
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d04:	484d      	ldr	r0, [pc, #308]	@ (8005e3c <main+0xd54>)
 8005d06:	f008 fe83 	bl	800ea10 <HAL_GPIO_WritePin>
			LED_Y_0;
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005d10:	4846      	ldr	r0, [pc, #280]	@ (8005e2c <main+0xd44>)
 8005d12:	f008 fe7d 	bl	800ea10 <HAL_GPIO_WritePin>

			cunter++;
 8005d16:	7cfb      	ldrb	r3, [r7, #19]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	74fb      	strb	r3, [r7, #19]
			if(cunter == 200){
 8005d1c:	7cfb      	ldrb	r3, [r7, #19]
 8005d1e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d20:	d101      	bne.n	8005d26 <main+0xc3e>
				NVIC_SystemReset();
 8005d22:	f7ff f9cb 	bl	80050bc <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005d26:	2000      	movs	r0, #0
 8005d28:	f7fc fd1a 	bl	8002760 <nRF24_IsBitSetInFifoStatus>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d0d6      	beq.n	8005ce0 <main+0xbf8>
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 8005d32:	4846      	ldr	r0, [pc, #280]	@ (8005e4c <main+0xd64>)
 8005d34:	f7fc fcdc 	bl	80026f0 <nRF24_ReadRXPaylaod>
		LED_6_0;
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2108      	movs	r1, #8
 8005d3c:	483f      	ldr	r0, [pc, #252]	@ (8005e3c <main+0xd54>)
 8005d3e:	f008 fe67 	bl	800ea10 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 8005d42:	230c      	movs	r3, #12
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e00b      	b.n	8005d60 <main+0xc78>
			Rxcode[i] = RxData[i];
 8005d48:	4a40      	ldr	r2, [pc, #256]	@ (8005e4c <main+0xd64>)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	7819      	ldrb	r1, [r3, #0]
 8005d50:	4a3f      	ldr	r2, [pc, #252]	@ (8005e50 <main+0xd68>)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	460a      	mov	r2, r1
 8005d58:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b15      	cmp	r3, #21
 8005d64:	ddf0      	ble.n	8005d48 <main+0xc60>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 8005d66:	483b      	ldr	r0, [pc, #236]	@ (8005e54 <main+0xd6c>)
 8005d68:	f7fb f8ec 	bl	8000f44 <ESC_INT>

		LED_7_1;
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d72:	4830      	ldr	r0, [pc, #192]	@ (8005e34 <main+0xd4c>)
 8005d74:	f008 fe4c 	bl	800ea10 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005d78:	2201      	movs	r2, #1
 8005d7a:	4937      	ldr	r1, [pc, #220]	@ (8005e58 <main+0xd70>)
 8005d7c:	4837      	ldr	r0, [pc, #220]	@ (8005e5c <main+0xd74>)
 8005d7e:	f012 fd65 	bl	801884c <HAL_UART_Receive_IT>
		LED_7_0;
 8005d82:	2200      	movs	r2, #0
 8005d84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d88:	482a      	ldr	r0, [pc, #168]	@ (8005e34 <main+0xd4c>)
 8005d8a:	f008 fe41 	bl	800ea10 <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005d8e:	4834      	ldr	r0, [pc, #208]	@ (8005e60 <main+0xd78>)
 8005d90:	f010 ff00 	bl	8016b94 <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005d94:	4b28      	ldr	r3, [pc, #160]	@ (8005e38 <main+0xd50>)
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fcf4 	bl	8007788 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005da0:	4b25      	ldr	r3, [pc, #148]	@ (8005e38 <main+0xd50>)
 8005da2:	8a9b      	ldrh	r3, [r3, #20]
 8005da4:	2b07      	cmp	r3, #7
 8005da6:	d107      	bne.n	8005db8 <main+0xcd0>
	  	{
	  		LED_R_1;
 8005da8:	2201      	movs	r2, #1
 8005daa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005dae:	481f      	ldr	r0, [pc, #124]	@ (8005e2c <main+0xd44>)
 8005db0:	f008 fe2e 	bl	800ea10 <HAL_GPIO_WritePin>
	  		while(1){
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <main+0xccc>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005db8:	4b1f      	ldr	r3, [pc, #124]	@ (8005e38 <main+0xd50>)
 8005dba:	8a9b      	ldrh	r3, [r3, #20]
 8005dbc:	2b09      	cmp	r3, #9
 8005dbe:	d107      	bne.n	8005dd0 <main+0xce8>
	  		LED_R_1;
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005dc6:	4819      	ldr	r0, [pc, #100]	@ (8005e2c <main+0xd44>)
 8005dc8:	f008 fe22 	bl	800ea10 <HAL_GPIO_WritePin>
	  		while(1){
 8005dcc:	bf00      	nop
 8005dce:	e7fd      	b.n	8005dcc <main+0xce4>
	  		}
	  	}



		STARTUP = 0;
 8005dd0:	4b24      	ldr	r3, [pc, #144]	@ (8005e64 <main+0xd7c>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005dd6:	4b18      	ldr	r3, [pc, #96]	@ (8005e38 <main+0xd50>)
 8005dd8:	8a9b      	ldrh	r3, [r3, #20]
 8005dda:	2b07      	cmp	r3, #7
 8005ddc:	d10a      	bne.n	8005df4 <main+0xd0c>
	  			LED_R_1;
 8005dde:	2201      	movs	r2, #1
 8005de0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005de4:	4811      	ldr	r0, [pc, #68]	@ (8005e2c <main+0xd44>)
 8005de6:	f008 fe13 	bl	800ea10 <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 8005dea:	4b13      	ldr	r3, [pc, #76]	@ (8005e38 <main+0xd50>)
 8005dec:	885b      	ldrh	r3, [r3, #2]
 8005dee:	b21a      	sxth	r2, r3
 8005df0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e68 <main+0xd80>)
 8005df2:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 8005df4:	4b10      	ldr	r3, [pc, #64]	@ (8005e38 <main+0xd50>)
 8005df6:	8a9b      	ldrh	r3, [r3, #20]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d103      	bne.n	8005e04 <main+0xd1c>
	  			thrust_limit = 10000;
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005e68 <main+0xd80>)
 8005dfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005e02:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005e04:	4b0c      	ldr	r3, [pc, #48]	@ (8005e38 <main+0xd50>)
 8005e06:	8a9b      	ldrh	r3, [r3, #20]
 8005e08:	2b09      	cmp	r3, #9
 8005e0a:	d13c      	bne.n	8005e86 <main+0xd9e>
	  			ESC_POWER_1;
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005e12:	4816      	ldr	r0, [pc, #88]	@ (8005e6c <main+0xd84>)
 8005e14:	f008 fdfc 	bl	800ea10 <HAL_GPIO_WritePin>
	  			LED_R_1;
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e1e:	4803      	ldr	r0, [pc, #12]	@ (8005e2c <main+0xd44>)
 8005e20:	f008 fdf6 	bl	800ea10 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 8005e24:	4812      	ldr	r0, [pc, #72]	@ (8005e70 <main+0xd88>)
 8005e26:	f018 fadf 	bl	801e3e8 <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005e2a:	e028      	b.n	8005e7e <main+0xd96>
 8005e2c:	58020400 	.word	0x58020400
 8005e30:	0000006c 	.word	0x0000006c
 8005e34:	58020000 	.word	0x58020000
 8005e38:	00000188 	.word	0x00000188
 8005e3c:	58021000 	.word	0x58021000
 8005e40:	24000274 	.word	0x24000274
 8005e44:	00000183 	.word	0x00000183
 8005e48:	00000120 	.word	0x00000120
 8005e4c:	00000100 	.word	0x00000100
 8005e50:	00000160 	.word	0x00000160
 8005e54:	24000418 	.word	0x24000418
 8005e58:	000041e8 	.word	0x000041e8
 8005e5c:	240004b0 	.word	0x240004b0
 8005e60:	240003cc 	.word	0x240003cc
 8005e64:	00000080 	.word	0x00000080
 8005e68:	0000406e 	.word	0x0000406e
 8005e6c:	58021800 	.word	0x58021800
 8005e70:	24001ef0 	.word	0x24001ef0
	  				HAL_Delay(10);
 8005e74:	200a      	movs	r0, #10
 8005e76:	f003 fc8f 	bl	8009798 <HAL_Delay>
	  				Get_batteryvalue();
 8005e7a:	f7fe fa2d 	bl	80042d8 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005e7e:	4b61      	ldr	r3, [pc, #388]	@ (8006004 <main+0xf1c>)
 8005e80:	8a9b      	ldrh	r3, [r3, #20]
 8005e82:	2b09      	cmp	r3, #9
 8005e84:	d0f6      	beq.n	8005e74 <main+0xd8c>
	  			}
	  		}

	  		if(commandready == 1){
 8005e86:	4b60      	ldr	r3, [pc, #384]	@ (8006008 <main+0xf20>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d159      	bne.n	8005f42 <main+0xe5a>
	  			LED_7_1;
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005e94:	485d      	ldr	r0, [pc, #372]	@ (800600c <main+0xf24>)
 8005e96:	f008 fdbb 	bl	800ea10 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005e9a:	f7fc fceb 	bl	8002874 <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005e9e:	495c      	ldr	r1, [pc, #368]	@ (8006010 <main+0xf28>)
 8005ea0:	485c      	ldr	r0, [pc, #368]	@ (8006014 <main+0xf2c>)
 8005ea2:	f7fc fd35 	bl	8002910 <executecommand>
	  			LED_7_0;
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005eac:	4857      	ldr	r0, [pc, #348]	@ (800600c <main+0xf24>)
 8005eae:	f008 fdaf 	bl	800ea10 <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 8005eb2:	4b59      	ldr	r3, [pc, #356]	@ (8006018 <main+0xf30>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a59      	ldr	r2, [pc, #356]	@ (800601c <main+0xf34>)
 8005eb8:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005eba:	4b59      	ldr	r3, [pc, #356]	@ (8006020 <main+0xf38>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a57      	ldr	r2, [pc, #348]	@ (800601c <main+0xf34>)
 8005ec0:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 8005ec2:	4b58      	ldr	r3, [pc, #352]	@ (8006024 <main+0xf3c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a55      	ldr	r2, [pc, #340]	@ (800601c <main+0xf34>)
 8005ec8:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005eca:	4b57      	ldr	r3, [pc, #348]	@ (8006028 <main+0xf40>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a57      	ldr	r2, [pc, #348]	@ (800602c <main+0xf44>)
 8005ed0:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005ed2:	4b57      	ldr	r3, [pc, #348]	@ (8006030 <main+0xf48>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a55      	ldr	r2, [pc, #340]	@ (800602c <main+0xf44>)
 8005ed8:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005eda:	4b56      	ldr	r3, [pc, #344]	@ (8006034 <main+0xf4c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a53      	ldr	r2, [pc, #332]	@ (800602c <main+0xf44>)
 8005ee0:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 8005ee2:	4b55      	ldr	r3, [pc, #340]	@ (8006038 <main+0xf50>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a55      	ldr	r2, [pc, #340]	@ (800603c <main+0xf54>)
 8005ee8:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005eea:	4b55      	ldr	r3, [pc, #340]	@ (8006040 <main+0xf58>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a53      	ldr	r2, [pc, #332]	@ (800603c <main+0xf54>)
 8005ef0:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 8005ef2:	4b54      	ldr	r3, [pc, #336]	@ (8006044 <main+0xf5c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a51      	ldr	r2, [pc, #324]	@ (800603c <main+0xf54>)
 8005ef8:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005efa:	4b53      	ldr	r3, [pc, #332]	@ (8006048 <main+0xf60>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a53      	ldr	r2, [pc, #332]	@ (800604c <main+0xf64>)
 8005f00:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005f02:	4b53      	ldr	r3, [pc, #332]	@ (8006050 <main+0xf68>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a51      	ldr	r2, [pc, #324]	@ (800604c <main+0xf64>)
 8005f08:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005f0a:	4b52      	ldr	r3, [pc, #328]	@ (8006054 <main+0xf6c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a4f      	ldr	r2, [pc, #316]	@ (800604c <main+0xf64>)
 8005f10:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 8005f12:	4b51      	ldr	r3, [pc, #324]	@ (8006058 <main+0xf70>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a51      	ldr	r2, [pc, #324]	@ (800605c <main+0xf74>)
 8005f18:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 8005f1a:	4b51      	ldr	r3, [pc, #324]	@ (8006060 <main+0xf78>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a4f      	ldr	r2, [pc, #316]	@ (800605c <main+0xf74>)
 8005f20:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 8005f22:	4b50      	ldr	r3, [pc, #320]	@ (8006064 <main+0xf7c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a4d      	ldr	r2, [pc, #308]	@ (800605c <main+0xf74>)
 8005f28:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 8005f2a:	4b4f      	ldr	r3, [pc, #316]	@ (8006068 <main+0xf80>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a4f      	ldr	r2, [pc, #316]	@ (800606c <main+0xf84>)
 8005f30:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005f32:	4b4f      	ldr	r3, [pc, #316]	@ (8006070 <main+0xf88>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a4d      	ldr	r2, [pc, #308]	@ (800606c <main+0xf84>)
 8005f38:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8006074 <main+0xf8c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a4b      	ldr	r2, [pc, #300]	@ (800606c <main+0xf84>)
 8005f40:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005f42:	4b4d      	ldr	r3, [pc, #308]	@ (8006078 <main+0xf90>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d14d      	bne.n	8005fe6 <main+0xefe>
 8005f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800607c <main+0xf94>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d149      	bne.n	8005fe6 <main+0xefe>
 8005f52:	4b4b      	ldr	r3, [pc, #300]	@ (8006080 <main+0xf98>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d145      	bne.n	8005fe6 <main+0xefe>
	  			TIM_inte_SD = 0;
 8005f5a:	4b47      	ldr	r3, [pc, #284]	@ (8006078 <main+0xf90>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 8005f60:	4b48      	ldr	r3, [pc, #288]	@ (8006084 <main+0xf9c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 fda5 	bl	8007ab4 <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005f6a:	4b46      	ldr	r3, [pc, #280]	@ (8006084 <main+0xf9c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d12b      	bne.n	8005fce <main+0xee6>
	  				SD_In_Use = 1;
 8005f76:	4b44      	ldr	r3, [pc, #272]	@ (8006088 <main+0xfa0>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f82:	4842      	ldr	r0, [pc, #264]	@ (800608c <main+0xfa4>)
 8005f84:	f008 fd44 	bl	800ea10 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005f88:	2232      	movs	r2, #50	@ 0x32
 8005f8a:	4941      	ldr	r1, [pc, #260]	@ (8006090 <main+0xfa8>)
 8005f8c:	4841      	ldr	r0, [pc, #260]	@ (8006094 <main+0xfac>)
 8005f8e:	f017 fe51 	bl	801dc34 <f_open>
 8005f92:	4603      	mov	r3, r0
 8005f94:	461a      	mov	r2, r3
 8005f96:	4b39      	ldr	r3, [pc, #228]	@ (800607c <main+0xf94>)
 8005f98:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8006098 <main+0xfb0>)
 8005f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800609c <main+0xfb4>)
 8005f9e:	4940      	ldr	r1, [pc, #256]	@ (80060a0 <main+0xfb8>)
 8005fa0:	483c      	ldr	r0, [pc, #240]	@ (8006094 <main+0xfac>)
 8005fa2:	f018 f80f 	bl	801dfc4 <f_write>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4b34      	ldr	r3, [pc, #208]	@ (800607c <main+0xf94>)
 8005fac:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005fae:	4839      	ldr	r0, [pc, #228]	@ (8006094 <main+0xfac>)
 8005fb0:	f018 fa1a 	bl	801e3e8 <f_close>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	4b30      	ldr	r3, [pc, #192]	@ (800607c <main+0xf94>)
 8005fba:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005fc2:	4832      	ldr	r0, [pc, #200]	@ (800608c <main+0xfa4>)
 8005fc4:	f008 fd24 	bl	800ea10 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8006088 <main+0xfa0>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]
	  				}

	  			Mainloop_Number = Mainloop_Number < 1000 ? Mainloop_Number+1 : 0;
 8005fce:	4b2d      	ldr	r3, [pc, #180]	@ (8006084 <main+0xf9c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fd6:	d203      	bcs.n	8005fe0 <main+0xef8>
 8005fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8006084 <main+0xf9c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	e000      	b.n	8005fe2 <main+0xefa>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4a28      	ldr	r2, [pc, #160]	@ (8006084 <main+0xf9c>)
 8005fe4:	6013      	str	r3, [r2, #0]
	  		}

	  		if(TIM_inte == 1){
 8005fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80060a4 <main+0xfbc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	f47f aef3 	bne.w	8005dd6 <main+0xcee>
	  			LED_R_0;
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ff6:	482c      	ldr	r0, [pc, #176]	@ (80060a8 <main+0xfc0>)
 8005ff8:	f008 fd0a 	bl	800ea10 <HAL_GPIO_WritePin>
	  			TIM_inte = 0;
 8005ffc:	4b29      	ldr	r3, [pc, #164]	@ (80060a4 <main+0xfbc>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8006002:	e6e8      	b.n	8005dd6 <main+0xcee>
 8006004:	00000188 	.word	0x00000188
 8006008:	000041e6 	.word	0x000041e6
 800600c:	58020000 	.word	0x58020000
 8006010:	000041c8 	.word	0x000041c8
 8006014:	000041d8 	.word	0x000041d8
 8006018:	000040f4 	.word	0x000040f4
 800601c:	00004118 	.word	0x00004118
 8006020:	00004100 	.word	0x00004100
 8006024:	0000410c 	.word	0x0000410c
 8006028:	00004154 	.word	0x00004154
 800602c:	00004178 	.word	0x00004178
 8006030:	00004160 	.word	0x00004160
 8006034:	0000416c 	.word	0x0000416c
 8006038:	000040f8 	.word	0x000040f8
 800603c:	0000412c 	.word	0x0000412c
 8006040:	00004104 	.word	0x00004104
 8006044:	00004110 	.word	0x00004110
 8006048:	00004158 	.word	0x00004158
 800604c:	0000418c 	.word	0x0000418c
 8006050:	00004164 	.word	0x00004164
 8006054:	00004170 	.word	0x00004170
 8006058:	000040fc 	.word	0x000040fc
 800605c:	00004140 	.word	0x00004140
 8006060:	00004108 	.word	0x00004108
 8006064:	00004114 	.word	0x00004114
 8006068:	0000415c 	.word	0x0000415c
 800606c:	000041a0 	.word	0x000041a0
 8006070:	00004168 	.word	0x00004168
 8006074:	00004174 	.word	0x00004174
 8006078:	00000078 	.word	0x00000078
 800607c:	24001eec 	.word	0x24001eec
 8006080:	000041f4 	.word	0x000041f4
 8006084:	000041ec 	.word	0x000041ec
 8006088:	000041f0 	.word	0x000041f0
 800608c:	58020c00 	.word	0x58020c00
 8006090:	0801f230 	.word	0x0801f230
 8006094:	24001ef0 	.word	0x24001ef0
 8006098:	24002f24 	.word	0x24002f24
 800609c:	0001f7e8 	.word	0x0001f7e8
 80060a0:	24002f28 	.word	0x24002f28
 80060a4:	0000007c 	.word	0x0000007c
 80060a8:	58020400 	.word	0x58020400

080060ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b09c      	sub	sp, #112	@ 0x70
 80060b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060b6:	224c      	movs	r2, #76	@ 0x4c
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f018 fb8c 	bl	801e7d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060c0:	1d3b      	adds	r3, r7, #4
 80060c2:	2220      	movs	r2, #32
 80060c4:	2100      	movs	r1, #0
 80060c6:	4618      	mov	r0, r3
 80060c8:	f018 fb86 	bl	801e7d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80060cc:	2002      	movs	r0, #2
 80060ce:	f00b f951 	bl	8011374 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80060d2:	2300      	movs	r3, #0
 80060d4:	603b      	str	r3, [r7, #0]
 80060d6:	4b2d      	ldr	r3, [pc, #180]	@ (800618c <SystemClock_Config+0xe0>)
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	4a2c      	ldr	r2, [pc, #176]	@ (800618c <SystemClock_Config+0xe0>)
 80060dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80060e0:	6193      	str	r3, [r2, #24]
 80060e2:	4b2a      	ldr	r3, [pc, #168]	@ (800618c <SystemClock_Config+0xe0>)
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80060ee:	bf00      	nop
 80060f0:	4b26      	ldr	r3, [pc, #152]	@ (800618c <SystemClock_Config+0xe0>)
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060fc:	d1f8      	bne.n	80060f0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 80060fe:	2311      	movs	r3, #17
 8006100:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006102:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006106:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8006108:	2380      	movs	r3, #128	@ 0x80
 800610a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 800610c:	2310      	movs	r3, #16
 800610e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006110:	2302      	movs	r3, #2
 8006112:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006114:	2302      	movs	r3, #2
 8006116:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8006118:	2303      	movs	r3, #3
 800611a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 800611c:	2344      	movs	r3, #68	@ 0x44
 800611e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8006120:	2301      	movs	r3, #1
 8006122:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006124:	2302      	movs	r3, #2
 8006126:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006128:	2302      	movs	r3, #2
 800612a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800612c:	230c      	movs	r3, #12
 800612e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006130:	2300      	movs	r3, #0
 8006132:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8006134:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006138:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800613a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800613e:	4618      	mov	r0, r3
 8006140:	f00b f952 	bl	80113e8 <HAL_RCC_OscConfig>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800614a:	f001 ffa9 	bl	80080a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800614e:	233f      	movs	r3, #63	@ 0x3f
 8006150:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006152:	2303      	movs	r3, #3
 8006154:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800615a:	2308      	movs	r3, #8
 800615c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800615e:	2340      	movs	r3, #64	@ 0x40
 8006160:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006162:	2340      	movs	r3, #64	@ 0x40
 8006164:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800616a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800616c:	2340      	movs	r3, #64	@ 0x40
 800616e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006170:	1d3b      	adds	r3, r7, #4
 8006172:	2103      	movs	r1, #3
 8006174:	4618      	mov	r0, r3
 8006176:	f00b fd11 	bl	8011b9c <HAL_RCC_ClockConfig>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8006180:	f001 ff8e 	bl	80080a0 <Error_Handler>
  }
}
 8006184:	bf00      	nop
 8006186:	3770      	adds	r7, #112	@ 0x70
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	58024800 	.word	0x58024800

08006190 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b0ae      	sub	sp, #184	@ 0xb8
 8006194:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006196:	463b      	mov	r3, r7
 8006198:	22b8      	movs	r2, #184	@ 0xb8
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f018 fb1b 	bl	801e7d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 80061a2:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 80061ae:	2316      	movs	r3, #22
 80061b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 80061b2:	23c0      	movs	r3, #192	@ 0xc0
 80061b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80061b6:	2303      	movs	r3, #3
 80061b8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80061ba:	2302      	movs	r3, #2
 80061bc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80061be:	2302      	movs	r3, #2
 80061c0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80061c6:	2320      	movs	r3, #32
 80061c8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80061ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80061d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80061d4:	2300      	movs	r3, #0
 80061d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80061da:	463b      	mov	r3, r7
 80061dc:	4618      	mov	r0, r3
 80061de:	f00c f869 	bl	80122b4 <HAL_RCCEx_PeriphCLKConfig>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80061e8:	f001 ff5a 	bl	80080a0 <Error_Handler>
  }
}
 80061ec:	bf00      	nop
 80061ee:	37b8      	adds	r7, #184	@ 0xb8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a89      	ldr	r2, [pc, #548]	@ (8006424 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8006200:	4293      	cmp	r3, r2
 8006202:	f040 810a 	bne.w	800641a <HAL_TIM_PeriodElapsedCallback+0x226>
	{
		TIM_inte_SD = 1;
 8006206:	4b88      	ldr	r3, [pc, #544]	@ (8006428 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8006208:	2201      	movs	r2, #1
 800620a:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 800620c:	4b87      	ldr	r3, [pc, #540]	@ (800642c <HAL_TIM_PeriodElapsedCallback+0x238>)
 800620e:	2201      	movs	r2, #1
 8006210:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 8006212:	4b87      	ldr	r3, [pc, #540]	@ (8006430 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3301      	adds	r3, #1
 8006218:	4a85      	ldr	r2, [pc, #532]	@ (8006430 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800621a:	6013      	str	r3, [r2, #0]

		if(NRF24_Timer_ms == 0){
 800621c:	4b85      	ldr	r3, [pc, #532]	@ (8006434 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d139      	bne.n	8006298 <HAL_TIM_PeriodElapsedCallback+0xa4>
			if(NRF24_MODE == 2){
 8006224:	4b84      	ldr	r3, [pc, #528]	@ (8006438 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d135      	bne.n	8006298 <HAL_TIM_PeriodElapsedCallback+0xa4>
				if(NRF24_Message_sent == 2){
 800622c:	4b83      	ldr	r3, [pc, #524]	@ (800643c <HAL_TIM_PeriodElapsedCallback+0x248>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d107      	bne.n	8006244 <HAL_TIM_PeriodElapsedCallback+0x50>
					NRF24_CE_LOW;
 8006234:	2200      	movs	r2, #0
 8006236:	2140      	movs	r1, #64	@ 0x40
 8006238:	4881      	ldr	r0, [pc, #516]	@ (8006440 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800623a:	f008 fbe9 	bl	800ea10 <HAL_GPIO_WritePin>
					NRF24_Message_sent = 0;
 800623e:	4b7f      	ldr	r3, [pc, #508]	@ (800643c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006240:	2200      	movs	r2, #0
 8006242:	701a      	strb	r2, [r3, #0]
				}

				if(NRF24_Message_sent == 1){
 8006244:	4b7d      	ldr	r3, [pc, #500]	@ (800643c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d112      	bne.n	8006272 <HAL_TIM_PeriodElapsedCallback+0x7e>
					//RxData[1] == 0 ? NRF24_Message_count++ : 1;
					TxData[10] = (MYDRON.dron_status.Connection == DRON_DISCONNECTED) ? 1: 0;
 800624c:	4b7d      	ldr	r3, [pc, #500]	@ (8006444 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800624e:	8a5b      	ldrh	r3, [r3, #18]
 8006250:	2b02      	cmp	r3, #2
 8006252:	bf0c      	ite	eq
 8006254:	2301      	moveq	r3, #1
 8006256:	2300      	movne	r3, #0
 8006258:	b2db      	uxtb	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	4b7a      	ldr	r3, [pc, #488]	@ (8006448 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800625e:	729a      	strb	r2, [r3, #10]
					//TxData[11] =  NRF24_Message_count;

					nRF24_WriteTXPayload_IT(TxData);
 8006260:	4879      	ldr	r0, [pc, #484]	@ (8006448 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006262:	f7fc fa10 	bl	8002686 <nRF24_WriteTXPayload_IT>
					NRF24_Message_sent = 2;
 8006266:	4b75      	ldr	r3, [pc, #468]	@ (800643c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006268:	2202      	movs	r2, #2
 800626a:	701a      	strb	r2, [r3, #0]
					NRF24_Timer_ms = 1;
 800626c:	4b71      	ldr	r3, [pc, #452]	@ (8006434 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800626e:	2201      	movs	r2, #1
 8006270:	701a      	strb	r2, [r3, #0]
				}

				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 8006272:	f7fb ffbe 	bl	80021f2 <nRF24_ReadStatus>
 8006276:	4603      	mov	r3, r0
 8006278:	f003 0310 	and.w	r3, r3, #16
 800627c:	2b00      	cmp	r3, #0
 800627e:	d106      	bne.n	800628e <HAL_TIM_PeriodElapsedCallback+0x9a>
 8006280:	f7fb ffb7 	bl	80021f2 <nRF24_ReadStatus>
 8006284:	4603      	mov	r3, r0
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	d004      	beq.n	8006298 <HAL_TIM_PeriodElapsedCallback+0xa4>
					nRF24_RX_Mode();
 800628e:	f7fb ff03 	bl	8002098 <nRF24_RX_Mode>
					NRF24_MODE = 1;
 8006292:	4b69      	ldr	r3, [pc, #420]	@ (8006438 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006294:	2201      	movs	r2, #1
 8006296:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if(i == 0){// na calosc 100ms
 8006298:	4b6c      	ldr	r3, [pc, #432]	@ (800644c <HAL_TIM_PeriodElapsedCallback+0x258>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d113      	bne.n	80062c8 <HAL_TIM_PeriodElapsedCallback+0xd4>
			LED_5_1;
 80062a0:	2201      	movs	r2, #1
 80062a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062a6:	486a      	ldr	r0, [pc, #424]	@ (8006450 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80062a8:	f008 fbb2 	bl	800ea10 <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 80062ac:	f7fa fae0 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 80062b0:	2200      	movs	r2, #0
 80062b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062b6:	4866      	ldr	r0, [pc, #408]	@ (8006450 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80062b8:	f008 fbaa 	bl	800ea10 <HAL_GPIO_WritePin>


			RGB_LED_For_BAT(MYDRON.batterysize);
 80062bc:	4b61      	ldr	r3, [pc, #388]	@ (8006444 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 fa60 	bl	8007788 <RGB_LED_For_BAT>
		}

		if(i == 10){//2
 80062c8:	4b60      	ldr	r3, [pc, #384]	@ (800644c <HAL_TIM_PeriodElapsedCallback+0x258>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b0a      	cmp	r3, #10
 80062ce:	d10d      	bne.n	80062ec <HAL_TIM_PeriodElapsedCallback+0xf8>
			LED_5_1;
 80062d0:	2201      	movs	r2, #1
 80062d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062d6:	485e      	ldr	r0, [pc, #376]	@ (8006450 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80062d8:	f008 fb9a 	bl	800ea10 <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 80062dc:	f7fa fab2 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 80062e0:	2200      	movs	r2, #0
 80062e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062e6:	485a      	ldr	r0, [pc, #360]	@ (8006450 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80062e8:	f008 fb92 	bl	800ea10 <HAL_GPIO_WritePin>
		}

		if(i == 36){
 80062ec:	4b57      	ldr	r3, [pc, #348]	@ (800644c <HAL_TIM_PeriodElapsedCallback+0x258>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b24      	cmp	r3, #36	@ 0x24
 80062f2:	d10d      	bne.n	8006310 <HAL_TIM_PeriodElapsedCallback+0x11c>
			LED_5_1;
 80062f4:	2201      	movs	r2, #1
 80062f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062fa:	4855      	ldr	r0, [pc, #340]	@ (8006450 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80062fc:	f008 fb88 	bl	800ea10 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8006300:	f7fa feea 	bl	80010d8 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 8006304:	2200      	movs	r2, #0
 8006306:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800630a:	4851      	ldr	r0, [pc, #324]	@ (8006450 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800630c:	f008 fb80 	bl	800ea10 <HAL_GPIO_WritePin>
		}

		if(i == 40){//5
 8006310:	4b4e      	ldr	r3, [pc, #312]	@ (800644c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b28      	cmp	r3, #40	@ 0x28
 8006316:	d13a      	bne.n	800638e <HAL_TIM_PeriodElapsedCallback+0x19a>
			ampritude = startpres - pres;
 8006318:	4b4e      	ldr	r3, [pc, #312]	@ (8006454 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800631a:	ed93 7a00 	vldr	s14, [r3]
 800631e:	4b4e      	ldr	r3, [pc, #312]	@ (8006458 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006320:	edd3 7a00 	vldr	s15, [r3]
 8006324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006328:	4b4c      	ldr	r3, [pc, #304]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x268>)
 800632a:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 800632e:	f7fa fd61 	bl	8000df4 <BMP180_GET_height>
 8006332:	eef0 7a40 	vmov.f32	s15, s0
 8006336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800633a:	ee17 3a90 	vmov	r3, s15
 800633e:	b29b      	uxth	r3, r3
 8006340:	b21a      	sxth	r2, r3
 8006342:	4b40      	ldr	r3, [pc, #256]	@ (8006444 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006344:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 8006346:	4b3f      	ldr	r3, [pc, #252]	@ (8006444 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006348:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800634c:	2303      	movs	r3, #3
 800634e:	2200      	movs	r2, #0
 8006350:	493d      	ldr	r1, [pc, #244]	@ (8006448 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006352:	f001 f93c 	bl	80075ce <convert_value_to_array>

			Get_batteryvalue();
 8006356:	f7fd ffbf 	bl	80042d8 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 800635a:	4b3a      	ldr	r3, [pc, #232]	@ (8006444 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b218      	sxth	r0, r3
 8006360:	2306      	movs	r3, #6
 8006362:	2203      	movs	r2, #3
 8006364:	4938      	ldr	r1, [pc, #224]	@ (8006448 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006366:	f001 f932 	bl	80075ce <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	e00b      	b.n	8006388 <HAL_TIM_PeriodElapsedCallback+0x194>
				TxData[22+i] = Txcode[22+i];
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f103 0216 	add.w	r2, r3, #22
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3316      	adds	r3, #22
 800637a:	4939      	ldr	r1, [pc, #228]	@ (8006460 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800637c:	5c89      	ldrb	r1, [r1, r2]
 800637e:	4a32      	ldr	r2, [pc, #200]	@ (8006448 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006380:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3301      	adds	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b09      	cmp	r3, #9
 800638c:	ddf0      	ble.n	8006370 <HAL_TIM_PeriodElapsedCallback+0x17c>
			}
		}


		LED_5_1;
 800638e:	2201      	movs	r2, #1
 8006390:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006394:	482e      	ldr	r0, [pc, #184]	@ (8006450 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006396:	f008 fb3b 	bl	800ea10 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 800639a:	f7fb fa33 	bl	8001804 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 800639e:	2200      	movs	r2, #0
 80063a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80063a4:	482a      	ldr	r0, [pc, #168]	@ (8006450 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80063a6:	f008 fb33 	bl	800ea10 <HAL_GPIO_WritePin>

		i = (i == 100) ? 0 : i+1;
 80063aa:	4b28      	ldr	r3, [pc, #160]	@ (800644c <HAL_TIM_PeriodElapsedCallback+0x258>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b64      	cmp	r3, #100	@ 0x64
 80063b0:	d003      	beq.n	80063ba <HAL_TIM_PeriodElapsedCallback+0x1c6>
 80063b2:	4b26      	ldr	r3, [pc, #152]	@ (800644c <HAL_TIM_PeriodElapsedCallback+0x258>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3301      	adds	r3, #1
 80063b8:	e000      	b.n	80063bc <HAL_TIM_PeriodElapsedCallback+0x1c8>
 80063ba:	2300      	movs	r3, #0
 80063bc:	4a23      	ldr	r2, [pc, #140]	@ (800644c <HAL_TIM_PeriodElapsedCallback+0x258>)
 80063be:	6013      	str	r3, [r2, #0]

		if(NRF_TIM_Inte >= 1000){
 80063c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006430 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063c8:	d308      	bcc.n	80063dc <HAL_TIM_PeriodElapsedCallback+0x1e8>
			LED_R_1;
 80063ca:	2201      	movs	r2, #1
 80063cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80063d0:	481b      	ldr	r0, [pc, #108]	@ (8006440 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80063d2:	f008 fb1d 	bl	800ea10 <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 80063d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006444 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80063d8:	2202      	movs	r2, #2
 80063da:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 80063dc:	4b19      	ldr	r3, [pc, #100]	@ (8006444 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80063de:	8a5b      	ldrh	r3, [r3, #18]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d110      	bne.n	8006406 <HAL_TIM_PeriodElapsedCallback+0x212>
			wanted_rool = 0;
 80063e4:	4b1f      	ldr	r3, [pc, #124]	@ (8006464 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 80063ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006468 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 80063f4:	4b1d      	ldr	r3, [pc, #116]	@ (800646c <HAL_TIM_PeriodElapsedCallback+0x278>)
 80063f6:	f04f 0200 	mov.w	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 80063fc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006400:	b21a      	sxth	r2, r3
 8006402:	4b1b      	ldr	r3, [pc, #108]	@ (8006470 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8006404:	801a      	strh	r2, [r3, #0]
		}
		(NRF24_Timer_ms != 0) ? NRF24_Timer_ms--: 0;
 8006406:	4b0b      	ldr	r3, [pc, #44]	@ (8006434 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d005      	beq.n	800641a <HAL_TIM_PeriodElapsedCallback+0x226>
 800640e:	4b09      	ldr	r3, [pc, #36]	@ (8006434 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	3b01      	subs	r3, #1
 8006414:	b2da      	uxtb	r2, r3
 8006416:	4b07      	ldr	r3, [pc, #28]	@ (8006434 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006418:	701a      	strb	r2, [r3, #0]
	}
}
 800641a:	bf00      	nop
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	240003cc 	.word	0x240003cc
 8006428:	00000078 	.word	0x00000078
 800642c:	0000007c 	.word	0x0000007c
 8006430:	00000084 	.word	0x00000084
 8006434:	00000182 	.word	0x00000182
 8006438:	00000183 	.word	0x00000183
 800643c:	00000184 	.word	0x00000184
 8006440:	58020400 	.word	0x58020400
 8006444:	00000188 	.word	0x00000188
 8006448:	00000140 	.word	0x00000140
 800644c:	00004200 	.word	0x00004200
 8006450:	58020000 	.word	0x58020000
 8006454:	000000f0 	.word	0x000000f0
 8006458:	000000ec 	.word	0x000000ec
 800645c:	000000f4 	.word	0x000000f4
 8006460:	00000120 	.word	0x00000120
 8006464:	0000407c 	.word	0x0000407c
 8006468:	00004078 	.word	0x00004078
 800646c:	00004080 	.word	0x00004080
 8006470:	0000406c 	.word	0x0000406c

08006474 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006484:	d110      	bne.n	80064a8 <HAL_GPIO_EXTI_Callback+0x34>
	{
		if(STARTUP == 0){
 8006486:	4b0a      	ldr	r3, [pc, #40]	@ (80064b0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10c      	bne.n	80064a8 <HAL_GPIO_EXTI_Callback+0x34>
			LED_6_1;
 800648e:	2201      	movs	r2, #1
 8006490:	2108      	movs	r1, #8
 8006492:	4808      	ldr	r0, [pc, #32]	@ (80064b4 <HAL_GPIO_EXTI_Callback+0x40>)
 8006494:	f008 fabc 	bl	800ea10 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod_IT(RxData);
 8006498:	4807      	ldr	r0, [pc, #28]	@ (80064b8 <HAL_GPIO_EXTI_Callback+0x44>)
 800649a:	f7fc f945 	bl	8002728 <nRF24_ReadRXPaylaod_IT>
			LED_6_0;
 800649e:	2200      	movs	r2, #0
 80064a0:	2108      	movs	r1, #8
 80064a2:	4804      	ldr	r0, [pc, #16]	@ (80064b4 <HAL_GPIO_EXTI_Callback+0x40>)
 80064a4:	f008 fab4 	bl	800ea10 <HAL_GPIO_WritePin>
		}
	}
}
 80064a8:	bf00      	nop
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	00000080 	.word	0x00000080
 80064b4:	58021000 	.word	0x58021000
 80064b8:	00000100 	.word	0x00000100

080064bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 80064c4:	4b24      	ldr	r3, [pc, #144]	@ (8006558 <HAL_UART_RxCpltCallback+0x9c>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	4b24      	ldr	r3, [pc, #144]	@ (800655c <HAL_UART_RxCpltCallback+0xa0>)
 80064cc:	7819      	ldrb	r1, [r3, #0]
 80064ce:	4b24      	ldr	r3, [pc, #144]	@ (8006560 <HAL_UART_RxCpltCallback+0xa4>)
 80064d0:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 80064d2:	4b21      	ldr	r3, [pc, #132]	@ (8006558 <HAL_UART_RxCpltCallback+0x9c>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	4b21      	ldr	r3, [pc, #132]	@ (8006560 <HAL_UART_RxCpltCallback+0xa4>)
 80064da:	5c9b      	ldrb	r3, [r3, r2]
 80064dc:	2b0d      	cmp	r3, #13
 80064de:	d11a      	bne.n	8006516 <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 80064e0:	230a      	movs	r3, #10
 80064e2:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 80064e4:	f107 010f 	add.w	r1, r7, #15
 80064e8:	2364      	movs	r3, #100	@ 0x64
 80064ea:	2201      	movs	r2, #1
 80064ec:	481d      	ldr	r0, [pc, #116]	@ (8006564 <HAL_UART_RxCpltCallback+0xa8>)
 80064ee:	f012 f88b 	bl	8018608 <HAL_UART_Transmit>
		Y = '\r';
 80064f2:	230d      	movs	r3, #13
 80064f4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 80064f6:	f107 010f 	add.w	r1, r7, #15
 80064fa:	2364      	movs	r3, #100	@ 0x64
 80064fc:	2201      	movs	r2, #1
 80064fe:	4819      	ldr	r0, [pc, #100]	@ (8006564 <HAL_UART_RxCpltCallback+0xa8>)
 8006500:	f012 f882 	bl	8018608 <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 8006504:	4b14      	ldr	r3, [pc, #80]	@ (8006558 <HAL_UART_RxCpltCallback+0x9c>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	461a      	mov	r2, r3
 800650a:	4b15      	ldr	r3, [pc, #84]	@ (8006560 <HAL_UART_RxCpltCallback+0xa4>)
 800650c:	2100      	movs	r1, #0
 800650e:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8006510:	4b15      	ldr	r3, [pc, #84]	@ (8006568 <HAL_UART_RxCpltCallback+0xac>)
 8006512:	2201      	movs	r2, #1
 8006514:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 8006516:	4b10      	ldr	r3, [pc, #64]	@ (8006558 <HAL_UART_RxCpltCallback+0x9c>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	4b10      	ldr	r3, [pc, #64]	@ (8006560 <HAL_UART_RxCpltCallback+0xa4>)
 800651e:	4413      	add	r3, r2
 8006520:	2201      	movs	r2, #1
 8006522:	4619      	mov	r1, r3
 8006524:	480f      	ldr	r0, [pc, #60]	@ (8006564 <HAL_UART_RxCpltCallback+0xa8>)
 8006526:	f012 f8fd 	bl	8018724 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 800652a:	2201      	movs	r2, #1
 800652c:	490b      	ldr	r1, [pc, #44]	@ (800655c <HAL_UART_RxCpltCallback+0xa0>)
 800652e:	480d      	ldr	r0, [pc, #52]	@ (8006564 <HAL_UART_RxCpltCallback+0xa8>)
 8006530:	f012 f98c 	bl	801884c <HAL_UART_Receive_IT>
	command_ch_num++;
 8006534:	4b08      	ldr	r3, [pc, #32]	@ (8006558 <HAL_UART_RxCpltCallback+0x9c>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	3301      	adds	r3, #1
 800653a:	b2da      	uxtb	r2, r3
 800653c:	4b06      	ldr	r3, [pc, #24]	@ (8006558 <HAL_UART_RxCpltCallback+0x9c>)
 800653e:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 8006540:	4b09      	ldr	r3, [pc, #36]	@ (8006568 <HAL_UART_RxCpltCallback+0xac>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d102      	bne.n	800654e <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 8006548:	4b03      	ldr	r3, [pc, #12]	@ (8006558 <HAL_UART_RxCpltCallback+0x9c>)
 800654a:	2200      	movs	r2, #0
 800654c:	701a      	strb	r2, [r3, #0]
	}
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	000041e7 	.word	0x000041e7
 800655c:	000041e8 	.word	0x000041e8
 8006560:	000041dc 	.word	0x000041dc
 8006564:	240004b0 	.word	0x240004b0
 8006568:	000041e6 	.word	0x000041e6
 800656c:	00000000 	.word	0x00000000

08006570 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af02      	add	r7, sp, #8
 8006576:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 8006578:	4bba      	ldr	r3, [pc, #744]	@ (8006864 <HAL_I2C_MemRxCpltCallback+0x2f4>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b01      	cmp	r3, #1
 800657e:	f040 85a5 	bne.w	80070cc <HAL_I2C_MemRxCpltCallback+0xb5c>
			MPU6050_IRQ = 0;
 8006582:	4bb8      	ldr	r3, [pc, #736]	@ (8006864 <HAL_I2C_MemRxCpltCallback+0x2f4>)
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 8006588:	2201      	movs	r2, #1
 800658a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800658e:	48b6      	ldr	r0, [pc, #728]	@ (8006868 <HAL_I2C_MemRxCpltCallback+0x2f8>)
 8006590:	f008 fa3e 	bl	800ea10 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8006594:	4bb5      	ldr	r3, [pc, #724]	@ (800686c <HAL_I2C_MemRxCpltCallback+0x2fc>)
 8006596:	edd3 7a00 	vldr	s15, [r3]
 800659a:	4bb5      	ldr	r3, [pc, #724]	@ (8006870 <HAL_I2C_MemRxCpltCallback+0x300>)
 800659c:	ed93 7a00 	vldr	s14, [r3]
 80065a0:	4bb4      	ldr	r3, [pc, #720]	@ (8006874 <HAL_I2C_MemRxCpltCallback+0x304>)
 80065a2:	edd3 6a00 	vldr	s13, [r3]
 80065a6:	4bb4      	ldr	r3, [pc, #720]	@ (8006878 <HAL_I2C_MemRxCpltCallback+0x308>)
 80065a8:	ed93 6a00 	vldr	s12, [r3]
 80065ac:	4bb3      	ldr	r3, [pc, #716]	@ (800687c <HAL_I2C_MemRxCpltCallback+0x30c>)
 80065ae:	edd3 5a00 	vldr	s11, [r3]
 80065b2:	4bb3      	ldr	r3, [pc, #716]	@ (8006880 <HAL_I2C_MemRxCpltCallback+0x310>)
 80065b4:	ed93 5a00 	vldr	s10, [r3]
 80065b8:	eddf 4ab2 	vldr	s9, [pc, #712]	@ 8006884 <HAL_I2C_MemRxCpltCallback+0x314>
 80065bc:	ed9f 4ab2 	vldr	s8, [pc, #712]	@ 8006888 <HAL_I2C_MemRxCpltCallback+0x318>
 80065c0:	4bb2      	ldr	r3, [pc, #712]	@ (800688c <HAL_I2C_MemRxCpltCallback+0x31c>)
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	4bb2      	ldr	r3, [pc, #712]	@ (8006890 <HAL_I2C_MemRxCpltCallback+0x320>)
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	eef0 3a44 	vmov.f32	s7, s8
 80065cc:	eeb0 3a64 	vmov.f32	s6, s9
 80065d0:	eef0 2a45 	vmov.f32	s5, s10
 80065d4:	eeb0 2a65 	vmov.f32	s4, s11
 80065d8:	eef0 1a46 	vmov.f32	s3, s12
 80065dc:	eeb0 1a66 	vmov.f32	s2, s13
 80065e0:	eef0 0a47 	vmov.f32	s1, s14
 80065e4:	eeb0 0a67 	vmov.f32	s0, s15
 80065e8:	4baa      	ldr	r3, [pc, #680]	@ (8006894 <HAL_I2C_MemRxCpltCallback+0x324>)
 80065ea:	4aab      	ldr	r2, [pc, #684]	@ (8006898 <HAL_I2C_MemRxCpltCallback+0x328>)
 80065ec:	49ab      	ldr	r1, [pc, #684]	@ (800689c <HAL_I2C_MemRxCpltCallback+0x32c>)
 80065ee:	48ac      	ldr	r0, [pc, #688]	@ (80068a0 <HAL_I2C_MemRxCpltCallback+0x330>)
 80065f0:	f7fb f922 	bl	8001838 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 80065f4:	4baa      	ldr	r3, [pc, #680]	@ (80068a0 <HAL_I2C_MemRxCpltCallback+0x330>)
 80065f6:	edd3 7a00 	vldr	s15, [r3]
 80065fa:	4ba8      	ldr	r3, [pc, #672]	@ (800689c <HAL_I2C_MemRxCpltCallback+0x32c>)
 80065fc:	ed93 7a00 	vldr	s14, [r3]
 8006600:	4ba5      	ldr	r3, [pc, #660]	@ (8006898 <HAL_I2C_MemRxCpltCallback+0x328>)
 8006602:	edd3 6a00 	vldr	s13, [r3]
 8006606:	49a7      	ldr	r1, [pc, #668]	@ (80068a4 <HAL_I2C_MemRxCpltCallback+0x334>)
 8006608:	48a7      	ldr	r0, [pc, #668]	@ (80068a8 <HAL_I2C_MemRxCpltCallback+0x338>)
 800660a:	eeb0 1a66 	vmov.f32	s2, s13
 800660e:	eef0 0a47 	vmov.f32	s1, s14
 8006612:	eeb0 0a67 	vmov.f32	s0, s15
 8006616:	f7fa ffc3 	bl	80015a0 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 800661a:	4ba3      	ldr	r3, [pc, #652]	@ (80068a8 <HAL_I2C_MemRxCpltCallback+0x338>)
 800661c:	edd3 7a00 	vldr	s15, [r3]
 8006620:	4ba0      	ldr	r3, [pc, #640]	@ (80068a4 <HAL_I2C_MemRxCpltCallback+0x334>)
 8006622:	ed93 7a00 	vldr	s14, [r3]
 8006626:	4ba1      	ldr	r3, [pc, #644]	@ (80068ac <HAL_I2C_MemRxCpltCallback+0x33c>)
 8006628:	edd3 6a00 	vldr	s13, [r3]
 800662c:	4b99      	ldr	r3, [pc, #612]	@ (8006894 <HAL_I2C_MemRxCpltCallback+0x324>)
 800662e:	ed93 6a00 	vldr	s12, [r3]
 8006632:	4b97      	ldr	r3, [pc, #604]	@ (8006890 <HAL_I2C_MemRxCpltCallback+0x320>)
 8006634:	edd3 5a00 	vldr	s11, [r3]
 8006638:	4b94      	ldr	r3, [pc, #592]	@ (800688c <HAL_I2C_MemRxCpltCallback+0x31c>)
 800663a:	ed93 5a00 	vldr	s10, [r3]
 800663e:	eef0 2a45 	vmov.f32	s5, s10
 8006642:	eeb0 2a65 	vmov.f32	s4, s11
 8006646:	eef0 1a46 	vmov.f32	s3, s12
 800664a:	eeb0 1a66 	vmov.f32	s2, s13
 800664e:	eef0 0a47 	vmov.f32	s1, s14
 8006652:	eeb0 0a67 	vmov.f32	s0, s15
 8006656:	4896      	ldr	r0, [pc, #600]	@ (80068b0 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006658:	f7fb f998 	bl	800198c <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 800665c:	4b94      	ldr	r3, [pc, #592]	@ (80068b0 <HAL_I2C_MemRxCpltCallback+0x340>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a94      	ldr	r2, [pc, #592]	@ (80068b4 <HAL_I2C_MemRxCpltCallback+0x344>)
 8006662:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 8006664:	4b92      	ldr	r3, [pc, #584]	@ (80068b0 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	4a93      	ldr	r2, [pc, #588]	@ (80068b8 <HAL_I2C_MemRxCpltCallback+0x348>)
 800666a:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 800666c:	4b90      	ldr	r3, [pc, #576]	@ (80068b0 <HAL_I2C_MemRxCpltCallback+0x340>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	4a92      	ldr	r2, [pc, #584]	@ (80068bc <HAL_I2C_MemRxCpltCallback+0x34c>)
 8006672:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 8006674:	4b92      	ldr	r3, [pc, #584]	@ (80068c0 <HAL_I2C_MemRxCpltCallback+0x350>)
 8006676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006682:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8006686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800668a:	4b8e      	ldr	r3, [pc, #568]	@ (80068c4 <HAL_I2C_MemRxCpltCallback+0x354>)
 800668c:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 8006690:	4b8d      	ldr	r3, [pc, #564]	@ (80068c8 <HAL_I2C_MemRxCpltCallback+0x358>)
 8006692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006696:	ee07 3a90 	vmov	s15, r3
 800669a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800669e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80066a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066a6:	4b89      	ldr	r3, [pc, #548]	@ (80068cc <HAL_I2C_MemRxCpltCallback+0x35c>)
 80066a8:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 80066ac:	4b88      	ldr	r3, [pc, #544]	@ (80068d0 <HAL_I2C_MemRxCpltCallback+0x360>)
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 80066b4:	eddf 7a87 	vldr	s15, [pc, #540]	@ 80068d4 <HAL_I2C_MemRxCpltCallback+0x364>
 80066b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80066bc:	4b81      	ldr	r3, [pc, #516]	@ (80068c4 <HAL_I2C_MemRxCpltCallback+0x354>)
 80066be:	edd3 7a00 	vldr	s15, [r3]
 80066c2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80066c6:	eddf 7a83 	vldr	s15, [pc, #524]	@ 80068d4 <HAL_I2C_MemRxCpltCallback+0x364>
 80066ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80066ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066da:	eddf 7a7e 	vldr	s15, [pc, #504]	@ 80068d4 <HAL_I2C_MemRxCpltCallback+0x364>
 80066de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80066e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ea:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80066ee:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80066f2:	4b79      	ldr	r3, [pc, #484]	@ (80068d8 <HAL_I2C_MemRxCpltCallback+0x368>)
 80066f4:	edd3 7a00 	vldr	s15, [r3]
 80066f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006700:	4b70      	ldr	r3, [pc, #448]	@ (80068c4 <HAL_I2C_MemRxCpltCallback+0x354>)
 8006702:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006706:	eddf 7a73 	vldr	s15, [pc, #460]	@ 80068d4 <HAL_I2C_MemRxCpltCallback+0x364>
 800670a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800670e:	4b6f      	ldr	r3, [pc, #444]	@ (80068cc <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006710:	edd3 7a00 	vldr	s15, [r3]
 8006714:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006718:	eddf 7a6e 	vldr	s15, [pc, #440]	@ 80068d4 <HAL_I2C_MemRxCpltCallback+0x364>
 800671c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006720:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006724:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800672c:	eddf 7a69 	vldr	s15, [pc, #420]	@ 80068d4 <HAL_I2C_MemRxCpltCallback+0x364>
 8006730:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006734:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800673c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006740:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006744:	4b65      	ldr	r3, [pc, #404]	@ (80068dc <HAL_I2C_MemRxCpltCallback+0x36c>)
 8006746:	edd3 7a00 	vldr	s15, [r3]
 800674a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800674e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006752:	4b5e      	ldr	r3, [pc, #376]	@ (80068cc <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006754:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006758:	eddf 7a5e 	vldr	s15, [pc, #376]	@ 80068d4 <HAL_I2C_MemRxCpltCallback+0x364>
 800675c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006760:	4b5b      	ldr	r3, [pc, #364]	@ (80068d0 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006762:	edd3 7a00 	vldr	s15, [r3]
 8006766:	ee67 6a27 	vmul.f32	s13, s14, s15
 800676a:	eddf 7a5a 	vldr	s15, [pc, #360]	@ 80068d4 <HAL_I2C_MemRxCpltCallback+0x364>
 800676e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006772:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006776:	ee77 7a87 	vadd.f32	s15, s15, s14
 800677a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800677e:	eddf 7a55 	vldr	s15, [pc, #340]	@ 80068d4 <HAL_I2C_MemRxCpltCallback+0x364>
 8006782:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800678a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006792:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006796:	4b52      	ldr	r3, [pc, #328]	@ (80068e0 <HAL_I2C_MemRxCpltCallback+0x370>)
 8006798:	edd3 7a00 	vldr	s15, [r3]
 800679c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067a4:	4b4a      	ldr	r3, [pc, #296]	@ (80068d0 <HAL_I2C_MemRxCpltCallback+0x360>)
 80067a6:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 80067aa:	4b46      	ldr	r3, [pc, #280]	@ (80068c4 <HAL_I2C_MemRxCpltCallback+0x354>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a4a      	ldr	r2, [pc, #296]	@ (80068d8 <HAL_I2C_MemRxCpltCallback+0x368>)
 80067b0:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 80067b2:	4b46      	ldr	r3, [pc, #280]	@ (80068cc <HAL_I2C_MemRxCpltCallback+0x35c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a49      	ldr	r2, [pc, #292]	@ (80068dc <HAL_I2C_MemRxCpltCallback+0x36c>)
 80067b8:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 80067ba:	4b45      	ldr	r3, [pc, #276]	@ (80068d0 <HAL_I2C_MemRxCpltCallback+0x360>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a48      	ldr	r2, [pc, #288]	@ (80068e0 <HAL_I2C_MemRxCpltCallback+0x370>)
 80067c0:	6013      	str	r3, [r2, #0]


		  	pitch_error = wanted_pitch - now_pitch;
 80067c2:	4b42      	ldr	r3, [pc, #264]	@ (80068cc <HAL_I2C_MemRxCpltCallback+0x35c>)
 80067c4:	ed93 7a00 	vldr	s14, [r3]
 80067c8:	4b3a      	ldr	r3, [pc, #232]	@ (80068b4 <HAL_I2C_MemRxCpltCallback+0x344>)
 80067ca:	edd3 7a00 	vldr	s15, [r3]
 80067ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067d2:	4b44      	ldr	r3, [pc, #272]	@ (80068e4 <HAL_I2C_MemRxCpltCallback+0x374>)
 80067d4:	edc3 7a00 	vstr	s15, [r3]
		  	rool_error = wanted_rool - now_rool;
 80067d8:	4b3a      	ldr	r3, [pc, #232]	@ (80068c4 <HAL_I2C_MemRxCpltCallback+0x354>)
 80067da:	ed93 7a00 	vldr	s14, [r3]
 80067de:	4b36      	ldr	r3, [pc, #216]	@ (80068b8 <HAL_I2C_MemRxCpltCallback+0x348>)
 80067e0:	edd3 7a00 	vldr	s15, [r3]
 80067e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067e8:	4b3f      	ldr	r3, [pc, #252]	@ (80068e8 <HAL_I2C_MemRxCpltCallback+0x378>)
 80067ea:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_error = wanted_yaw - now_yaw;
 80067ee:	4b38      	ldr	r3, [pc, #224]	@ (80068d0 <HAL_I2C_MemRxCpltCallback+0x360>)
 80067f0:	ed93 7a00 	vldr	s14, [r3]
 80067f4:	4b31      	ldr	r3, [pc, #196]	@ (80068bc <HAL_I2C_MemRxCpltCallback+0x34c>)
 80067f6:	edd3 7a00 	vldr	s15, [r3]
 80067fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067fe:	4b3b      	ldr	r3, [pc, #236]	@ (80068ec <HAL_I2C_MemRxCpltCallback+0x37c>)
 8006800:	edc3 7a00 	vstr	s15, [r3]
		  	pitch_ar_error = pid_pitch - gx;
 8006804:	4b3a      	ldr	r3, [pc, #232]	@ (80068f0 <HAL_I2C_MemRxCpltCallback+0x380>)
 8006806:	ed93 7a00 	vldr	s14, [r3]
 800680a:	4b22      	ldr	r3, [pc, #136]	@ (8006894 <HAL_I2C_MemRxCpltCallback+0x324>)
 800680c:	edd3 7a00 	vldr	s15, [r3]
 8006810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006814:	4b37      	ldr	r3, [pc, #220]	@ (80068f4 <HAL_I2C_MemRxCpltCallback+0x384>)
 8006816:	edc3 7a00 	vstr	s15, [r3]
		  	rool_ar_error = pid_rool - gy;
 800681a:	4b37      	ldr	r3, [pc, #220]	@ (80068f8 <HAL_I2C_MemRxCpltCallback+0x388>)
 800681c:	ed93 7a00 	vldr	s14, [r3]
 8006820:	4b1b      	ldr	r3, [pc, #108]	@ (8006890 <HAL_I2C_MemRxCpltCallback+0x320>)
 8006822:	edd3 7a00 	vldr	s15, [r3]
 8006826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800682a:	4b34      	ldr	r3, [pc, #208]	@ (80068fc <HAL_I2C_MemRxCpltCallback+0x38c>)
 800682c:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_ar_error = pid_yaw - gz;
 8006830:	4b33      	ldr	r3, [pc, #204]	@ (8006900 <HAL_I2C_MemRxCpltCallback+0x390>)
 8006832:	ed93 7a00 	vldr	s14, [r3]
 8006836:	4b15      	ldr	r3, [pc, #84]	@ (800688c <HAL_I2C_MemRxCpltCallback+0x31c>)
 8006838:	edd3 7a00 	vldr	s15, [r3]
 800683c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006840:	4b30      	ldr	r3, [pc, #192]	@ (8006904 <HAL_I2C_MemRxCpltCallback+0x394>)
 8006842:	edc3 7a00 	vstr	s15, [r3]


			error_sum_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_pitch : error_sum_pitch + (pitch_error);//pitch_error -> pitch_error
 8006846:	4b30      	ldr	r3, [pc, #192]	@ (8006908 <HAL_I2C_MemRxCpltCallback+0x398>)
 8006848:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800684c:	2b00      	cmp	r3, #0
 800684e:	d05f      	beq.n	8006910 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006850:	4b2e      	ldr	r3, [pc, #184]	@ (800690c <HAL_I2C_MemRxCpltCallback+0x39c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	ee07 3a90 	vmov	s15, r3
 8006858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800685c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006860:	e063      	b.n	800692a <HAL_I2C_MemRxCpltCallback+0x3ba>
 8006862:	bf00      	nop
 8006864:	000041fc 	.word	0x000041fc
 8006868:	58021000 	.word	0x58021000
 800686c:	00000030 	.word	0x00000030
 8006870:	00000034 	.word	0x00000034
 8006874:	00000038 	.word	0x00000038
 8006878:	0000003c 	.word	0x0000003c
 800687c:	00000040 	.word	0x00000040
 8006880:	00000044 	.word	0x00000044
 8006884:	42830000 	.word	0x42830000
 8006888:	46000000 	.word	0x46000000
 800688c:	00000014 	.word	0x00000014
 8006890:	00000010 	.word	0x00000010
 8006894:	0000000c 	.word	0x0000000c
 8006898:	00000008 	.word	0x00000008
 800689c:	00000004 	.word	0x00000004
 80068a0:	00000000 	.word	0x00000000
 80068a4:	0000001c 	.word	0x0000001c
 80068a8:	00000018 	.word	0x00000018
 80068ac:	00000058 	.word	0x00000058
 80068b0:	00000088 	.word	0x00000088
 80068b4:	00004088 	.word	0x00004088
 80068b8:	0000408c 	.word	0x0000408c
 80068bc:	00004090 	.word	0x00004090
 80068c0:	0000405a 	.word	0x0000405a
 80068c4:	0000407c 	.word	0x0000407c
 80068c8:	00004058 	.word	0x00004058
 80068cc:	00004078 	.word	0x00004078
 80068d0:	00004080 	.word	0x00004080
 80068d4:	3a83126f 	.word	0x3a83126f
 80068d8:	00004064 	.word	0x00004064
 80068dc:	00004060 	.word	0x00004060
 80068e0:	00004068 	.word	0x00004068
 80068e4:	00004094 	.word	0x00004094
 80068e8:	00004098 	.word	0x00004098
 80068ec:	0000409c 	.word	0x0000409c
 80068f0:	000040dc 	.word	0x000040dc
 80068f4:	000040a0 	.word	0x000040a0
 80068f8:	000040e4 	.word	0x000040e4
 80068fc:	000040a4 	.word	0x000040a4
 8006900:	000040e0 	.word	0x000040e0
 8006904:	000040a8 	.word	0x000040a8
 8006908:	00000188 	.word	0x00000188
 800690c:	000040c4 	.word	0x000040c4
 8006910:	4ba4      	ldr	r3, [pc, #656]	@ (8006ba4 <HAL_I2C_MemRxCpltCallback+0x634>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	ee07 3a90 	vmov	s15, r3
 8006918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800691c:	4ba2      	ldr	r3, [pc, #648]	@ (8006ba8 <HAL_I2C_MemRxCpltCallback+0x638>)
 800691e:	edd3 7a00 	vldr	s15, [r3]
 8006922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800692a:	4b9e      	ldr	r3, [pc, #632]	@ (8006ba4 <HAL_I2C_MemRxCpltCallback+0x634>)
 800692c:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = (MYDRON.ROOL_STA != 0) ? error_sum_rool : error_sum_rool + (rool_error);//rool_error
 8006930:	4b9e      	ldr	r3, [pc, #632]	@ (8006bac <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006932:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006936:	2b00      	cmp	r3, #0
 8006938:	d008      	beq.n	800694c <HAL_I2C_MemRxCpltCallback+0x3dc>
 800693a:	4b9d      	ldr	r3, [pc, #628]	@ (8006bb0 <HAL_I2C_MemRxCpltCallback+0x640>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006946:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800694a:	e00c      	b.n	8006966 <HAL_I2C_MemRxCpltCallback+0x3f6>
 800694c:	4b98      	ldr	r3, [pc, #608]	@ (8006bb0 <HAL_I2C_MemRxCpltCallback+0x640>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	ee07 3a90 	vmov	s15, r3
 8006954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006958:	4b96      	ldr	r3, [pc, #600]	@ (8006bb4 <HAL_I2C_MemRxCpltCallback+0x644>)
 800695a:	edd3 7a00 	vldr	s15, [r3]
 800695e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006966:	4b92      	ldr	r3, [pc, #584]	@ (8006bb0 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006968:	edc3 7a00 	vstr	s15, [r3]
			error_sum_yaw = (MYDRON.YAW_STA != 0) ? error_sum_yaw : error_sum_yaw + (yaw_error);//yaw_error
 800696c:	4b8f      	ldr	r3, [pc, #572]	@ (8006bac <HAL_I2C_MemRxCpltCallback+0x63c>)
 800696e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <HAL_I2C_MemRxCpltCallback+0x418>
 8006976:	4b90      	ldr	r3, [pc, #576]	@ (8006bb8 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	ee07 3a90 	vmov	s15, r3
 800697e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006986:	e00c      	b.n	80069a2 <HAL_I2C_MemRxCpltCallback+0x432>
 8006988:	4b8b      	ldr	r3, [pc, #556]	@ (8006bb8 <HAL_I2C_MemRxCpltCallback+0x648>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	ee07 3a90 	vmov	s15, r3
 8006990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006994:	4b89      	ldr	r3, [pc, #548]	@ (8006bbc <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006996:	edd3 7a00 	vldr	s15, [r3]
 800699a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800699e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069a2:	4b85      	ldr	r3, [pc, #532]	@ (8006bb8 <HAL_I2C_MemRxCpltCallback+0x648>)
 80069a4:	edc3 7a00 	vstr	s15, [r3]

			error_sum_angular_rate_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_angular_rate_pitch : error_sum_angular_rate_pitch + (pitch_ar_error);//pitch_ar_error
 80069a8:	4b80      	ldr	r3, [pc, #512]	@ (8006bac <HAL_I2C_MemRxCpltCallback+0x63c>)
 80069aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d008      	beq.n	80069c4 <HAL_I2C_MemRxCpltCallback+0x454>
 80069b2:	4b83      	ldr	r3, [pc, #524]	@ (8006bc0 <HAL_I2C_MemRxCpltCallback+0x650>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069c2:	e00c      	b.n	80069de <HAL_I2C_MemRxCpltCallback+0x46e>
 80069c4:	4b7e      	ldr	r3, [pc, #504]	@ (8006bc0 <HAL_I2C_MemRxCpltCallback+0x650>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	ee07 3a90 	vmov	s15, r3
 80069cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069d0:	4b7c      	ldr	r3, [pc, #496]	@ (8006bc4 <HAL_I2C_MemRxCpltCallback+0x654>)
 80069d2:	edd3 7a00 	vldr	s15, [r3]
 80069d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069de:	4b78      	ldr	r3, [pc, #480]	@ (8006bc0 <HAL_I2C_MemRxCpltCallback+0x650>)
 80069e0:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = (MYDRON.ROOL_STA != 0) ? error_sum_angular_rate_rool : error_sum_angular_rate_rool + (rool_ar_error);
 80069e4:	4b71      	ldr	r3, [pc, #452]	@ (8006bac <HAL_I2C_MemRxCpltCallback+0x63c>)
 80069e6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d008      	beq.n	8006a00 <HAL_I2C_MemRxCpltCallback+0x490>
 80069ee:	4b76      	ldr	r3, [pc, #472]	@ (8006bc8 <HAL_I2C_MemRxCpltCallback+0x658>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069fe:	e00c      	b.n	8006a1a <HAL_I2C_MemRxCpltCallback+0x4aa>
 8006a00:	4b71      	ldr	r3, [pc, #452]	@ (8006bc8 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	ee07 3a90 	vmov	s15, r3
 8006a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8006bcc <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006a0e:	edd3 7a00 	vldr	s15, [r3]
 8006a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a1a:	4b6b      	ldr	r3, [pc, #428]	@ (8006bc8 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006a1c:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_yaw = (MYDRON.YAW_STA != 0) ? error_sum_angular_rate_yaw : error_sum_angular_rate_yaw + (yaw_ar_error);
 8006a20:	4b62      	ldr	r3, [pc, #392]	@ (8006bac <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a22:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d008      	beq.n	8006a3c <HAL_I2C_MemRxCpltCallback+0x4cc>
 8006a2a:	4b69      	ldr	r3, [pc, #420]	@ (8006bd0 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a3a:	e00c      	b.n	8006a56 <HAL_I2C_MemRxCpltCallback+0x4e6>
 8006a3c:	4b64      	ldr	r3, [pc, #400]	@ (8006bd0 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	ee07 3a90 	vmov	s15, r3
 8006a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a48:	4b62      	ldr	r3, [pc, #392]	@ (8006bd4 <HAL_I2C_MemRxCpltCallback+0x664>)
 8006a4a:	edd3 7a00 	vldr	s15, [r3]
 8006a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a56:	4b5e      	ldr	r3, [pc, #376]	@ (8006bd0 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006a58:	edc3 7a00 	vstr	s15, [r3]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	495e      	ldr	r1, [pc, #376]	@ (8006bd8 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006a60:	485e      	ldr	r0, [pc, #376]	@ (8006bdc <HAL_I2C_MemRxCpltCallback+0x66c>)
 8006a62:	f7fd f893 	bl	8003b8c <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8006a66:	2202      	movs	r2, #2
 8006a68:	495d      	ldr	r1, [pc, #372]	@ (8006be0 <HAL_I2C_MemRxCpltCallback+0x670>)
 8006a6a:	485e      	ldr	r0, [pc, #376]	@ (8006be4 <HAL_I2C_MemRxCpltCallback+0x674>)
 8006a6c:	f7fd f88e 	bl	8003b8c <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 8006a70:	2203      	movs	r2, #3
 8006a72:	495d      	ldr	r1, [pc, #372]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x678>)
 8006a74:	485d      	ldr	r0, [pc, #372]	@ (8006bec <HAL_I2C_MemRxCpltCallback+0x67c>)
 8006a76:	f7fd f889 	bl	8003b8c <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	495c      	ldr	r1, [pc, #368]	@ (8006bf0 <HAL_I2C_MemRxCpltCallback+0x680>)
 8006a7e:	485d      	ldr	r0, [pc, #372]	@ (8006bf4 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006a80:	f7fd f884 	bl	8003b8c <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8006a84:	2205      	movs	r2, #5
 8006a86:	495c      	ldr	r1, [pc, #368]	@ (8006bf8 <HAL_I2C_MemRxCpltCallback+0x688>)
 8006a88:	485c      	ldr	r0, [pc, #368]	@ (8006bfc <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006a8a:	f7fd f87f 	bl	8003b8c <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8006a8e:	2206      	movs	r2, #6
 8006a90:	495b      	ldr	r1, [pc, #364]	@ (8006c00 <HAL_I2C_MemRxCpltCallback+0x690>)
 8006a92:	485c      	ldr	r0, [pc, #368]	@ (8006c04 <HAL_I2C_MemRxCpltCallback+0x694>)
 8006a94:	f7fd f87a 	bl	8003b8c <PID_cal>


			old_error_pitch = pitch_error;
 8006a98:	4b43      	ldr	r3, [pc, #268]	@ (8006ba8 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a5a      	ldr	r2, [pc, #360]	@ (8006c08 <HAL_I2C_MemRxCpltCallback+0x698>)
 8006a9e:	6013      	str	r3, [r2, #0]
			old_error_rool = rool_error;
 8006aa0:	4b44      	ldr	r3, [pc, #272]	@ (8006bb4 <HAL_I2C_MemRxCpltCallback+0x644>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a59      	ldr	r2, [pc, #356]	@ (8006c0c <HAL_I2C_MemRxCpltCallback+0x69c>)
 8006aa6:	6013      	str	r3, [r2, #0]
			old_error_yaw = yaw_error;
 8006aa8:	4b44      	ldr	r3, [pc, #272]	@ (8006bbc <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a58      	ldr	r2, [pc, #352]	@ (8006c10 <HAL_I2C_MemRxCpltCallback+0x6a0>)
 8006aae:	6013      	str	r3, [r2, #0]

			old_error_angular_rate_pitch = pitch_ar_error;
 8006ab0:	4b44      	ldr	r3, [pc, #272]	@ (8006bc4 <HAL_I2C_MemRxCpltCallback+0x654>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a57      	ldr	r2, [pc, #348]	@ (8006c14 <HAL_I2C_MemRxCpltCallback+0x6a4>)
 8006ab6:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_rool = rool_ar_error;
 8006ab8:	4b44      	ldr	r3, [pc, #272]	@ (8006bcc <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a56      	ldr	r2, [pc, #344]	@ (8006c18 <HAL_I2C_MemRxCpltCallback+0x6a8>)
 8006abe:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 8006ac0:	4b56      	ldr	r3, [pc, #344]	@ (8006c1c <HAL_I2C_MemRxCpltCallback+0x6ac>)
 8006ac2:	ed93 7a00 	vldr	s14, [r3]
 8006ac6:	4b56      	ldr	r3, [pc, #344]	@ (8006c20 <HAL_I2C_MemRxCpltCallback+0x6b0>)
 8006ac8:	edd3 7a00 	vldr	s15, [r3]
 8006acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ad0:	4b54      	ldr	r3, [pc, #336]	@ (8006c24 <HAL_I2C_MemRxCpltCallback+0x6b4>)
 8006ad2:	edc3 7a00 	vstr	s15, [r3]


			MYDRON.ROOL 	= (pid_angular_rate_rool > 5000) ? ROOL_MAX_VAL(): (pid_angular_rate_rool < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 8006ad6:	4b49      	ldr	r3, [pc, #292]	@ (8006bfc <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006ad8:	edd3 7a00 	vldr	s15, [r3]
 8006adc:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8006c28 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae8:	dd04      	ble.n	8006af4 <HAL_I2C_MemRxCpltCallback+0x584>
 8006aea:	f001 fa05 	bl	8007ef8 <ROOL_MAX_VAL>
 8006aee:	4603      	mov	r3, r0
 8006af0:	461a      	mov	r2, r3
 8006af2:	e012      	b.n	8006b1a <HAL_I2C_MemRxCpltCallback+0x5aa>
 8006af4:	4b41      	ldr	r3, [pc, #260]	@ (8006bfc <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006af6:	edd3 7a00 	vldr	s15, [r3]
 8006afa:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006c2c <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b06:	d504      	bpl.n	8006b12 <HAL_I2C_MemRxCpltCallback+0x5a2>
 8006b08:	f001 fa06 	bl	8007f18 <ROOL_MIN_VAL>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461a      	mov	r2, r3
 8006b10:	e003      	b.n	8006b1a <HAL_I2C_MemRxCpltCallback+0x5aa>
 8006b12:	f001 fa51 	bl	8007fb8 <ROOL_GOOD_VAL>
 8006b16:	4603      	mov	r3, r0
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4b24      	ldr	r3, [pc, #144]	@ (8006bac <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006b1c:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH 	= (pid_angular_rate_pitch > 5000) ? PITCH_MAX_VAL(): (pid_angular_rate_pitch < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 8006b1e:	4b35      	ldr	r3, [pc, #212]	@ (8006bf4 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006b20:	edd3 7a00 	vldr	s15, [r3]
 8006b24:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8006c28 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b30:	dd04      	ble.n	8006b3c <HAL_I2C_MemRxCpltCallback+0x5cc>
 8006b32:	f001 fa01 	bl	8007f38 <PITCH_MAX_VAL>
 8006b36:	4603      	mov	r3, r0
 8006b38:	461a      	mov	r2, r3
 8006b3a:	e012      	b.n	8006b62 <HAL_I2C_MemRxCpltCallback+0x5f2>
 8006b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8006bf4 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006b3e:	edd3 7a00 	vldr	s15, [r3]
 8006b42:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006c2c <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4e:	d504      	bpl.n	8006b5a <HAL_I2C_MemRxCpltCallback+0x5ea>
 8006b50:	f001 fa02 	bl	8007f58 <PITCH_MIN_VAL>
 8006b54:	4603      	mov	r3, r0
 8006b56:	461a      	mov	r2, r3
 8006b58:	e003      	b.n	8006b62 <HAL_I2C_MemRxCpltCallback+0x5f2>
 8006b5a:	f001 fa45 	bl	8007fe8 <PITCH_GOOD_VAL>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	461a      	mov	r2, r3
 8006b62:	4b12      	ldr	r3, [pc, #72]	@ (8006bac <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006b64:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW 		= (pid_angular_rate_yaw > 5000) ? YAW_MAX_VAL(): (pid_angular_rate_yaw < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 8006b66:	4b27      	ldr	r3, [pc, #156]	@ (8006c04 <HAL_I2C_MemRxCpltCallback+0x694>)
 8006b68:	edd3 7a00 	vldr	s15, [r3]
 8006b6c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006c28 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b78:	dd04      	ble.n	8006b84 <HAL_I2C_MemRxCpltCallback+0x614>
 8006b7a:	f001 f9fd 	bl	8007f78 <YAW_MAX_VAL>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	461a      	mov	r2, r3
 8006b82:	e059      	b.n	8006c38 <HAL_I2C_MemRxCpltCallback+0x6c8>
 8006b84:	4b1f      	ldr	r3, [pc, #124]	@ (8006c04 <HAL_I2C_MemRxCpltCallback+0x694>)
 8006b86:	edd3 7a00 	vldr	s15, [r3]
 8006b8a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006c2c <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b96:	d54b      	bpl.n	8006c30 <HAL_I2C_MemRxCpltCallback+0x6c0>
 8006b98:	f001 f9fe 	bl	8007f98 <YAW_MIN_VAL>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	e04a      	b.n	8006c38 <HAL_I2C_MemRxCpltCallback+0x6c8>
 8006ba2:	bf00      	nop
 8006ba4:	000040c4 	.word	0x000040c4
 8006ba8:	00004094 	.word	0x00004094
 8006bac:	00000188 	.word	0x00000188
 8006bb0:	000040c8 	.word	0x000040c8
 8006bb4:	00004098 	.word	0x00004098
 8006bb8:	000040cc 	.word	0x000040cc
 8006bbc:	0000409c 	.word	0x0000409c
 8006bc0:	000040d0 	.word	0x000040d0
 8006bc4:	000040a0 	.word	0x000040a0
 8006bc8:	000040d4 	.word	0x000040d4
 8006bcc:	000040a4 	.word	0x000040a4
 8006bd0:	000040d8 	.word	0x000040d8
 8006bd4:	000040a8 	.word	0x000040a8
 8006bd8:	00004118 	.word	0x00004118
 8006bdc:	000040dc 	.word	0x000040dc
 8006be0:	0000412c 	.word	0x0000412c
 8006be4:	000040e4 	.word	0x000040e4
 8006be8:	00004140 	.word	0x00004140
 8006bec:	000040e0 	.word	0x000040e0
 8006bf0:	00004178 	.word	0x00004178
 8006bf4:	000040e8 	.word	0x000040e8
 8006bf8:	0000418c 	.word	0x0000418c
 8006bfc:	000040f0 	.word	0x000040f0
 8006c00:	000041a0 	.word	0x000041a0
 8006c04:	000040ec 	.word	0x000040ec
 8006c08:	000040ac 	.word	0x000040ac
 8006c0c:	000040b0 	.word	0x000040b0
 8006c10:	000040b4 	.word	0x000040b4
 8006c14:	000040b8 	.word	0x000040b8
 8006c18:	000040bc 	.word	0x000040bc
 8006c1c:	00004080 	.word	0x00004080
 8006c20:	00000014 	.word	0x00000014
 8006c24:	000040c0 	.word	0x000040c0
 8006c28:	459c4000 	.word	0x459c4000
 8006c2c:	c59c4000 	.word	0xc59c4000
 8006c30:	f001 f9f2 	bl	8008018 <YAW_GOOD_VAL>
 8006c34:	4603      	mov	r3, r0
 8006c36:	461a      	mov	r2, r3
 8006c38:	4bc3      	ldr	r3, [pc, #780]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006c3a:	811a      	strh	r2, [r3, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 8006c3c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006c40:	f7fc fe7a 	bl	8003938 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 8006c44:	4bc0      	ldr	r3, [pc, #768]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006c46:	885b      	ldrh	r3, [r3, #2]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4bc0      	ldr	r3, [pc, #768]	@ (8006f4c <HAL_I2C_MemRxCpltCallback+0x9dc>)
 8006c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	dd05      	ble.n	8006c60 <HAL_I2C_MemRxCpltCallback+0x6f0>
				MYDRON.THRUST = thrust_limit;
 8006c54:	4bbd      	ldr	r3, [pc, #756]	@ (8006f4c <HAL_I2C_MemRxCpltCallback+0x9dc>)
 8006c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	4bba      	ldr	r3, [pc, #744]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006c5e:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 8006c60:	4bbb      	ldr	r3, [pc, #748]	@ (8006f50 <HAL_I2C_MemRxCpltCallback+0x9e0>)
 8006c62:	edd3 7a04 	vldr	s15, [r3, #16]
 8006c66:	eeb0 0a67 	vmov.f32	s0, s15
 8006c6a:	f000 fd4f 	bl	800770c <WartoscBezwgledna>
 8006c6e:	eef0 7a40 	vmov.f32	s15, s0
 8006c72:	eeb0 0a67 	vmov.f32	s0, s15
 8006c76:	f001 f8f3 	bl	8007e60 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 8006c7a:	4bb6      	ldr	r3, [pc, #728]	@ (8006f54 <HAL_I2C_MemRxCpltCallback+0x9e4>)
 8006c7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006c80:	eeb0 0a67 	vmov.f32	s0, s15
 8006c84:	f000 fd42 	bl	800770c <WartoscBezwgledna>
 8006c88:	eef0 7a40 	vmov.f32	s15, s0
 8006c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c90:	f001 f8e6 	bl	8007e60 <Stack_Push>
			Stack_Push(now_pitch);
 8006c94:	4bb0      	ldr	r3, [pc, #704]	@ (8006f58 <HAL_I2C_MemRxCpltCallback+0x9e8>)
 8006c96:	edd3 7a00 	vldr	s15, [r3]
 8006c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8006c9e:	f001 f8df 	bl	8007e60 <Stack_Push>
			Stack_Push(now_rool);
 8006ca2:	4bae      	ldr	r3, [pc, #696]	@ (8006f5c <HAL_I2C_MemRxCpltCallback+0x9ec>)
 8006ca4:	edd3 7a00 	vldr	s15, [r3]
 8006ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8006cac:	f001 f8d8 	bl	8007e60 <Stack_Push>


			SPEED1 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//trust 7000 max
 8006cb0:	4ba5      	ldr	r3, [pc, #660]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006cb2:	885b      	ldrh	r3, [r3, #2]
 8006cb4:	ee07 3a90 	vmov	s15, r3
 8006cb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cbc:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 8006f30 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006cc0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006cc4:	4ba0      	ldr	r3, [pc, #640]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006cc6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cd2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006cd6:	4b9c      	ldr	r3, [pc, #624]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006cd8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ce4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ce8:	4b97      	ldr	r3, [pc, #604]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006cea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cf6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006cfa:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8006f38 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006cfe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d02:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8006f40 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006d06:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d0e:	ee17 2a90 	vmov	r2, s15
 8006d12:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d832      	bhi.n	8006d80 <HAL_I2C_MemRxCpltCallback+0x810>
 8006d1a:	4b8b      	ldr	r3, [pc, #556]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d1c:	885b      	ldrh	r3, [r3, #2]
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d26:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8006f30 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006d2a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d2e:	4b86      	ldr	r3, [pc, #536]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d34:	ee07 3a90 	vmov	s15, r3
 8006d38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d3c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006d40:	4b81      	ldr	r3, [pc, #516]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d52:	4b7d      	ldr	r3, [pc, #500]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006d64:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8006f38 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006d68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d6c:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8006f40 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006d70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d78:	ee17 3a90 	vmov	r3, s15
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	e001      	b.n	8006d84 <HAL_I2C_MemRxCpltCallback+0x814>
 8006d80:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006d84:	4a76      	ldr	r2, [pc, #472]	@ (8006f60 <HAL_I2C_MemRxCpltCallback+0x9f0>)
 8006d86:	8013      	strh	r3, [r2, #0]
			SPEED2 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006d88:	4b6f      	ldr	r3, [pc, #444]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d8a:	885b      	ldrh	r3, [r3, #2]
 8006d8c:	ee07 3a90 	vmov	s15, r3
 8006d90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d94:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8006f30 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006d98:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d9e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006daa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006dae:	4b66      	ldr	r3, [pc, #408]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006db0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006db4:	ee07 3a90 	vmov	s15, r3
 8006db8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dbc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006dc0:	4b61      	ldr	r3, [pc, #388]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006dc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dce:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006dd2:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8006f38 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006dd6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006dda:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8006f40 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006dde:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006de2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006de6:	ee17 2a90 	vmov	r2, s15
 8006dea:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d832      	bhi.n	8006e58 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006df2:	4b55      	ldr	r3, [pc, #340]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006df4:	885b      	ldrh	r3, [r3, #2]
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dfe:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8006f30 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006e02:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e06:	4b50      	ldr	r3, [pc, #320]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e08:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e0c:	ee07 3a90 	vmov	s15, r3
 8006e10:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e14:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e18:	4b4b      	ldr	r3, [pc, #300]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e2a:	4b47      	ldr	r3, [pc, #284]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e30:	ee07 3a90 	vmov	s15, r3
 8006e34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e3c:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8006f38 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006e40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e44:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8006f40 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006e48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e50:	ee17 3a90 	vmov	r3, s15
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	e001      	b.n	8006e5c <HAL_I2C_MemRxCpltCallback+0x8ec>
 8006e58:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006e5c:	4a41      	ldr	r2, [pc, #260]	@ (8006f64 <HAL_I2C_MemRxCpltCallback+0x9f4>)
 8006e5e:	8013      	strh	r3, [r2, #0]
			SPEED3 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006e60:	4b39      	ldr	r3, [pc, #228]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e62:	885b      	ldrh	r3, [r3, #2]
 8006e64:	ee07 3a90 	vmov	s15, r3
 8006e68:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e6c:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 8006f30 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006e70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e74:	4b34      	ldr	r3, [pc, #208]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e76:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e82:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e86:	4b30      	ldr	r3, [pc, #192]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e8c:	ee07 3a90 	vmov	s15, r3
 8006e90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e94:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e98:	4b2b      	ldr	r3, [pc, #172]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ea6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006eaa:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8006f38 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006eae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006eb2:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8006f40 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006eb6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006eba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006ebe:	ee17 2a90 	vmov	r2, s15
 8006ec2:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d84e      	bhi.n	8006f68 <HAL_I2C_MemRxCpltCallback+0x9f8>
 8006eca:	4b1f      	ldr	r3, [pc, #124]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ecc:	885b      	ldrh	r3, [r3, #2]
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ed6:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8006f30 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006eda:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006ede:	4b1a      	ldr	r3, [pc, #104]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ee0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006ee4:	ee07 3a90 	vmov	s15, r3
 8006ee8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006eec:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006ef0:	4b15      	ldr	r3, [pc, #84]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ef2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006efe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f02:	4b11      	ldr	r3, [pc, #68]	@ (8006f48 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f08:	ee07 3a90 	vmov	s15, r3
 8006f0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f10:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f14:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8006f38 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006f18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f1c:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8006f40 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006f20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f28:	ee17 3a90 	vmov	r3, s15
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	e01d      	b.n	8006f6c <HAL_I2C_MemRxCpltCallback+0x9fc>
 8006f30:	66666666 	.word	0x66666666
 8006f34:	3fe66666 	.word	0x3fe66666
 8006f38:	00000000 	.word	0x00000000
 8006f3c:	40c48200 	.word	0x40c48200
 8006f40:	00000000 	.word	0x00000000
 8006f44:	407f4000 	.word	0x407f4000
 8006f48:	00000188 	.word	0x00000188
 8006f4c:	0000406e 	.word	0x0000406e
 8006f50:	00004118 	.word	0x00004118
 8006f54:	0000412c 	.word	0x0000412c
 8006f58:	00004088 	.word	0x00004088
 8006f5c:	0000408c 	.word	0x0000408c
 8006f60:	000041b4 	.word	0x000041b4
 8006f64:	000041b6 	.word	0x000041b6
 8006f68:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006f6c:	4a92      	ldr	r2, [pc, #584]	@ (80071b8 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006f6e:	8013      	strh	r3, [r2, #0]
			SPEED4 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//
 8006f70:	4b92      	ldr	r3, [pc, #584]	@ (80071bc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006f72:	885b      	ldrh	r3, [r3, #2]
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f7c:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8007188 <HAL_I2C_MemRxCpltCallback+0xc18>
 8006f80:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f84:	4b8d      	ldr	r3, [pc, #564]	@ (80071bc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006f86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f92:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f96:	4b89      	ldr	r3, [pc, #548]	@ (80071bc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006f98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fa4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006fa8:	4b84      	ldr	r3, [pc, #528]	@ (80071bc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006faa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fb6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006fba:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8007190 <HAL_I2C_MemRxCpltCallback+0xc20>
 8006fbe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fc2:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8007198 <HAL_I2C_MemRxCpltCallback+0xc28>
 8006fc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006fce:	ee17 2a90 	vmov	r2, s15
 8006fd2:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d832      	bhi.n	8007040 <HAL_I2C_MemRxCpltCallback+0xad0>
 8006fda:	4b78      	ldr	r3, [pc, #480]	@ (80071bc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006fdc:	885b      	ldrh	r3, [r3, #2]
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fe6:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 8007188 <HAL_I2C_MemRxCpltCallback+0xc18>
 8006fea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006fee:	4b73      	ldr	r3, [pc, #460]	@ (80071bc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006ff0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006ff4:	ee07 3a90 	vmov	s15, r3
 8006ff8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ffc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007000:	4b6e      	ldr	r3, [pc, #440]	@ (80071bc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007002:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800700e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007012:	4b6a      	ldr	r3, [pc, #424]	@ (80071bc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007014:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007018:	ee07 3a90 	vmov	s15, r3
 800701c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007020:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007024:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8007190 <HAL_I2C_MemRxCpltCallback+0xc20>
 8007028:	ee37 7b06 	vadd.f64	d7, d7, d6
 800702c:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8007198 <HAL_I2C_MemRxCpltCallback+0xc28>
 8007030:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007034:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007038:	ee17 3a90 	vmov	r3, s15
 800703c:	b29b      	uxth	r3, r3
 800703e:	e001      	b.n	8007044 <HAL_I2C_MemRxCpltCallback+0xad4>
 8007040:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8007044:	4a5e      	ldr	r2, [pc, #376]	@ (80071c0 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8007046:	8013      	strh	r3, [r2, #0]

			if(SPEED1 != OLD_SPEED1){
 8007048:	4b5e      	ldr	r3, [pc, #376]	@ (80071c4 <HAL_I2C_MemRxCpltCallback+0xc54>)
 800704a:	881a      	ldrh	r2, [r3, #0]
 800704c:	4b5e      	ldr	r3, [pc, #376]	@ (80071c8 <HAL_I2C_MemRxCpltCallback+0xc58>)
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d004      	beq.n	800705e <HAL_I2C_MemRxCpltCallback+0xaee>
				ESC_1_SPEED(SPEED1);
 8007054:	4b5b      	ldr	r3, [pc, #364]	@ (80071c4 <HAL_I2C_MemRxCpltCallback+0xc54>)
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	4618      	mov	r0, r3
 800705a:	f7f9 feeb 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 800705e:	4b5b      	ldr	r3, [pc, #364]	@ (80071cc <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8007060:	881a      	ldrh	r2, [r3, #0]
 8007062:	4b5b      	ldr	r3, [pc, #364]	@ (80071d0 <HAL_I2C_MemRxCpltCallback+0xc60>)
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d004      	beq.n	8007074 <HAL_I2C_MemRxCpltCallback+0xb04>
				ESC_2_SPEED(SPEED2);
 800706a:	4b58      	ldr	r3, [pc, #352]	@ (80071cc <HAL_I2C_MemRxCpltCallback+0xc5c>)
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f7f9 ff02 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 8007074:	4b50      	ldr	r3, [pc, #320]	@ (80071b8 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8007076:	881a      	ldrh	r2, [r3, #0]
 8007078:	4b56      	ldr	r3, [pc, #344]	@ (80071d4 <HAL_I2C_MemRxCpltCallback+0xc64>)
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	429a      	cmp	r2, r3
 800707e:	d004      	beq.n	800708a <HAL_I2C_MemRxCpltCallback+0xb1a>
				ESC_3_SPEED(SPEED3);
 8007080:	4b4d      	ldr	r3, [pc, #308]	@ (80071b8 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	4618      	mov	r0, r3
 8007086:	f7f9 ff19 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 800708a:	4b4d      	ldr	r3, [pc, #308]	@ (80071c0 <HAL_I2C_MemRxCpltCallback+0xc50>)
 800708c:	881a      	ldrh	r2, [r3, #0]
 800708e:	4b52      	ldr	r3, [pc, #328]	@ (80071d8 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d004      	beq.n	80070a0 <HAL_I2C_MemRxCpltCallback+0xb30>
				ESC_4_SPEED(SPEED4);
 8007096:	4b4a      	ldr	r3, [pc, #296]	@ (80071c0 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	4618      	mov	r0, r3
 800709c:	f7f9 ff30 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 80070a0:	4b48      	ldr	r3, [pc, #288]	@ (80071c4 <HAL_I2C_MemRxCpltCallback+0xc54>)
 80070a2:	881a      	ldrh	r2, [r3, #0]
 80070a4:	4b48      	ldr	r3, [pc, #288]	@ (80071c8 <HAL_I2C_MemRxCpltCallback+0xc58>)
 80070a6:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 80070a8:	4b48      	ldr	r3, [pc, #288]	@ (80071cc <HAL_I2C_MemRxCpltCallback+0xc5c>)
 80070aa:	881a      	ldrh	r2, [r3, #0]
 80070ac:	4b48      	ldr	r3, [pc, #288]	@ (80071d0 <HAL_I2C_MemRxCpltCallback+0xc60>)
 80070ae:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 80070b0:	4b41      	ldr	r3, [pc, #260]	@ (80071b8 <HAL_I2C_MemRxCpltCallback+0xc48>)
 80070b2:	881a      	ldrh	r2, [r3, #0]
 80070b4:	4b47      	ldr	r3, [pc, #284]	@ (80071d4 <HAL_I2C_MemRxCpltCallback+0xc64>)
 80070b6:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 80070b8:	4b41      	ldr	r3, [pc, #260]	@ (80071c0 <HAL_I2C_MemRxCpltCallback+0xc50>)
 80070ba:	881a      	ldrh	r2, [r3, #0]
 80070bc:	4b46      	ldr	r3, [pc, #280]	@ (80071d8 <HAL_I2C_MemRxCpltCallback+0xc68>)
 80070be:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 80070c0:	2200      	movs	r2, #0
 80070c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80070c6:	4845      	ldr	r0, [pc, #276]	@ (80071dc <HAL_I2C_MemRxCpltCallback+0xc6c>)
 80070c8:	f007 fca2 	bl	800ea10 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 80070cc:	4b44      	ldr	r3, [pc, #272]	@ (80071e0 <HAL_I2C_MemRxCpltCallback+0xc70>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d125      	bne.n	8007120 <HAL_I2C_MemRxCpltCallback+0xbb0>
		HMC583L_IRQ = 0;
 80070d4:	4b42      	ldr	r3, [pc, #264]	@ (80071e0 <HAL_I2C_MemRxCpltCallback+0xc70>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	701a      	strb	r2, [r3, #0]
		HMC5883L_Get_Z_End_IT();
 80070da:	f7fa f819 	bl	8001110 <HMC5883L_Get_Z_End_IT>
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 80070de:	4b41      	ldr	r3, [pc, #260]	@ (80071e4 <HAL_I2C_MemRxCpltCallback+0xc74>)
 80070e0:	edd3 7a00 	vldr	s15, [r3]
 80070e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80070e8:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 80071a0 <HAL_I2C_MemRxCpltCallback+0xc30>
 80070ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070f0:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 80071a8 <HAL_I2C_MemRxCpltCallback+0xc38>
 80070f4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80070f8:	4b3b      	ldr	r3, [pc, #236]	@ (80071e8 <HAL_I2C_MemRxCpltCallback+0xc78>)
 80070fa:	edd3 7a00 	vldr	s15, [r3]
 80070fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007102:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80071b0 <HAL_I2C_MemRxCpltCallback+0xc40>
 8007106:	ee27 7b05 	vmul.f64	d7, d7, d5
 800710a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800710e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007112:	4b34      	ldr	r3, [pc, #208]	@ (80071e4 <HAL_I2C_MemRxCpltCallback+0xc74>)
 8007114:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 8007118:	4b32      	ldr	r3, [pc, #200]	@ (80071e4 <HAL_I2C_MemRxCpltCallback+0xc74>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a32      	ldr	r2, [pc, #200]	@ (80071e8 <HAL_I2C_MemRxCpltCallback+0xc78>)
 800711e:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 8007120:	4b32      	ldr	r3, [pc, #200]	@ (80071ec <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d113      	bne.n	8007150 <HAL_I2C_MemRxCpltCallback+0xbe0>
		temperature = BMP180_GET_temp_IT();
 8007128:	f7f9 fb32 	bl	8000790 <BMP180_GET_temp_IT>
 800712c:	4603      	mov	r3, r0
 800712e:	461a      	mov	r2, r3
 8007130:	4b2f      	ldr	r3, [pc, #188]	@ (80071f0 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8007132:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 8007134:	4b2e      	ldr	r3, [pc, #184]	@ (80071f0 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	4618      	mov	r0, r3
 800713c:	f7f9 fc4c 	bl	80009d8 <BMP180_GET_temp>
 8007140:	eef0 7a40 	vmov.f32	s15, s0
 8007144:	4b2b      	ldr	r3, [pc, #172]	@ (80071f4 <HAL_I2C_MemRxCpltCallback+0xc84>)
 8007146:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 800714a:	4b28      	ldr	r3, [pc, #160]	@ (80071ec <HAL_I2C_MemRxCpltCallback+0xc7c>)
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 8007150:	4b26      	ldr	r3, [pc, #152]	@ (80071ec <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d113      	bne.n	8007180 <HAL_I2C_MemRxCpltCallback+0xc10>
		pressure = BMP180_GET_pres_IT();
 8007158:	f7f9 fb30 	bl	80007bc <BMP180_GET_pres_IT>
 800715c:	4603      	mov	r3, r0
 800715e:	461a      	mov	r2, r3
 8007160:	4b25      	ldr	r3, [pc, #148]	@ (80071f8 <HAL_I2C_MemRxCpltCallback+0xc88>)
 8007162:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 8007164:	4b24      	ldr	r3, [pc, #144]	@ (80071f8 <HAL_I2C_MemRxCpltCallback+0xc88>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	4618      	mov	r0, r3
 800716c:	f7f9 fc90 	bl	8000a90 <BMP180_GET_pres>
 8007170:	eef0 7a40 	vmov.f32	s15, s0
 8007174:	4b21      	ldr	r3, [pc, #132]	@ (80071fc <HAL_I2C_MemRxCpltCallback+0xc8c>)
 8007176:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 800717a:	4b1c      	ldr	r3, [pc, #112]	@ (80071ec <HAL_I2C_MemRxCpltCallback+0xc7c>)
 800717c:	2200      	movs	r2, #0
 800717e:	701a      	strb	r2, [r3, #0]
	}
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	66666666 	.word	0x66666666
 800718c:	3fe66666 	.word	0x3fe66666
 8007190:	00000000 	.word	0x00000000
 8007194:	40c48200 	.word	0x40c48200
 8007198:	00000000 	.word	0x00000000
 800719c:	407f4000 	.word	0x407f4000
 80071a0:	9999999a 	.word	0x9999999a
 80071a4:	3fc99999 	.word	0x3fc99999
 80071a8:	33333333 	.word	0x33333333
 80071ac:	3ff33333 	.word	0x3ff33333
 80071b0:	aaaaaaab 	.word	0xaaaaaaab
 80071b4:	3feaaaaa 	.word	0x3feaaaaa
 80071b8:	000041b8 	.word	0x000041b8
 80071bc:	00000188 	.word	0x00000188
 80071c0:	000041ba 	.word	0x000041ba
 80071c4:	000041b4 	.word	0x000041b4
 80071c8:	000041bc 	.word	0x000041bc
 80071cc:	000041b6 	.word	0x000041b6
 80071d0:	000041be 	.word	0x000041be
 80071d4:	000041c0 	.word	0x000041c0
 80071d8:	000041c2 	.word	0x000041c2
 80071dc:	58021000 	.word	0x58021000
 80071e0:	000041fd 	.word	0x000041fd
 80071e4:	00000058 	.word	0x00000058
 80071e8:	00000068 	.word	0x00000068
 80071ec:	000041fe 	.word	0x000041fe
 80071f0:	000000c4 	.word	0x000000c4
 80071f4:	000000e8 	.word	0x000000e8
 80071f8:	000000c8 	.word	0x000000c8
 80071fc:	000000ec 	.word	0x000000ec

08007200 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi){
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
	if(NRF24_Tx_Inte == 1){
 8007208:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <HAL_SPI_TxCpltCallback+0x34>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d10c      	bne.n	800722a <HAL_SPI_TxCpltCallback+0x2a>
		NRF24_CSN_HIGH;
 8007210:	2201      	movs	r2, #1
 8007212:	2180      	movs	r1, #128	@ 0x80
 8007214:	4808      	ldr	r0, [pc, #32]	@ (8007238 <HAL_SPI_TxCpltCallback+0x38>)
 8007216:	f007 fbfb 	bl	800ea10 <HAL_GPIO_WritePin>
		NRF24_CE_HIGH;
 800721a:	2201      	movs	r2, #1
 800721c:	2140      	movs	r1, #64	@ 0x40
 800721e:	4806      	ldr	r0, [pc, #24]	@ (8007238 <HAL_SPI_TxCpltCallback+0x38>)
 8007220:	f007 fbf6 	bl	800ea10 <HAL_GPIO_WritePin>
		NRF24_Tx_Inte = 0;
 8007224:	4b03      	ldr	r3, [pc, #12]	@ (8007234 <HAL_SPI_TxCpltCallback+0x34>)
 8007226:	2200      	movs	r2, #0
 8007228:	701a      	strb	r2, [r3, #0]
	}
}
 800722a:	bf00      	nop
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	00000180 	.word	0x00000180
 8007238:	58020400 	.word	0x58020400

0800723c <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi){
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
				NRF24_CSN_HIGH;
 8007244:	2201      	movs	r2, #1
 8007246:	2180      	movs	r1, #128	@ 0x80
 8007248:	489c      	ldr	r0, [pc, #624]	@ (80074bc <HAL_SPI_RxCpltCallback+0x280>)
 800724a:	f007 fbe1 	bl	800ea10 <HAL_GPIO_WritePin>
				LED_6_1;
 800724e:	2201      	movs	r2, #1
 8007250:	2108      	movs	r1, #8
 8007252:	489b      	ldr	r0, [pc, #620]	@ (80074c0 <HAL_SPI_RxCpltCallback+0x284>)
 8007254:	f007 fbdc 	bl	800ea10 <HAL_GPIO_WritePin>
				nRF24_TX_Mode();
 8007258:	f7fa ff4a 	bl	80020f0 <nRF24_TX_Mode>
				NRF24_MODE = 2;
 800725c:	4b99      	ldr	r3, [pc, #612]	@ (80074c4 <HAL_SPI_RxCpltCallback+0x288>)
 800725e:	2202      	movs	r2, #2
 8007260:	701a      	strb	r2, [r3, #0]
				NRF24_Message_sent = 1;
 8007262:	4b99      	ldr	r3, [pc, #612]	@ (80074c8 <HAL_SPI_RxCpltCallback+0x28c>)
 8007264:	2201      	movs	r2, #1
 8007266:	701a      	strb	r2, [r3, #0]
				NRF24_Timer_ms = 2; // -> nRF24_WriteTXPayload_IT(TxData);
 8007268:	4b98      	ldr	r3, [pc, #608]	@ (80074cc <HAL_SPI_RxCpltCallback+0x290>)
 800726a:	2202      	movs	r2, #2
 800726c:	701a      	strb	r2, [r3, #0]
				LED_6_0;
 800726e:	2200      	movs	r2, #0
 8007270:	2108      	movs	r1, #8
 8007272:	4893      	ldr	r0, [pc, #588]	@ (80074c0 <HAL_SPI_RxCpltCallback+0x284>)
 8007274:	f007 fbcc 	bl	800ea10 <HAL_GPIO_WritePin>


				LED_Y_1;
 8007278:	2201      	movs	r2, #1
 800727a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800727e:	488f      	ldr	r0, [pc, #572]	@ (80074bc <HAL_SPI_RxCpltCallback+0x280>)
 8007280:	f007 fbc6 	bl	800ea10 <HAL_GPIO_WritePin>

				loopnum = 0;
 8007284:	4b92      	ldr	r3, [pc, #584]	@ (80074d0 <HAL_SPI_RxCpltCallback+0x294>)
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]
				for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 800728a:	2300      	movs	r3, #0
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	e011      	b.n	80072b4 <HAL_SPI_RxCpltCallback+0x78>
					if(RxData[12+abc] == Rxcode[abc+12]){
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	330c      	adds	r3, #12
 8007294:	4a8f      	ldr	r2, [pc, #572]	@ (80074d4 <HAL_SPI_RxCpltCallback+0x298>)
 8007296:	5cd2      	ldrb	r2, [r2, r3]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	330c      	adds	r3, #12
 800729c:	498e      	ldr	r1, [pc, #568]	@ (80074d8 <HAL_SPI_RxCpltCallback+0x29c>)
 800729e:	5ccb      	ldrb	r3, [r1, r3]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d104      	bne.n	80072ae <HAL_SPI_RxCpltCallback+0x72>
						loopnum++;
 80072a4:	4b8a      	ldr	r3, [pc, #552]	@ (80074d0 <HAL_SPI_RxCpltCallback+0x294>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3301      	adds	r3, #1
 80072aa:	4a89      	ldr	r2, [pc, #548]	@ (80074d0 <HAL_SPI_RxCpltCallback+0x294>)
 80072ac:	6013      	str	r3, [r2, #0]
				for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3301      	adds	r3, #1
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b09      	cmp	r3, #9
 80072b8:	ddea      	ble.n	8007290 <HAL_SPI_RxCpltCallback+0x54>
					}
				}

				if(loopnum == 10){
 80072ba:	4b85      	ldr	r3, [pc, #532]	@ (80074d0 <HAL_SPI_RxCpltCallback+0x294>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b0a      	cmp	r3, #10
 80072c0:	f040 80e6 	bne.w	8007490 <HAL_SPI_RxCpltCallback+0x254>
					convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 80072c4:	2302      	movs	r3, #2
 80072c6:	2200      	movs	r2, #0
 80072c8:	4984      	ldr	r1, [pc, #528]	@ (80074dc <HAL_SPI_RxCpltCallback+0x2a0>)
 80072ca:	4882      	ldr	r0, [pc, #520]	@ (80074d4 <HAL_SPI_RxCpltCallback+0x298>)
 80072cc:	f000 f92e 	bl	800752c <convert_array_to_value>
					convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 80072d0:	2305      	movs	r3, #5
 80072d2:	2203      	movs	r2, #3
 80072d4:	4982      	ldr	r1, [pc, #520]	@ (80074e0 <HAL_SPI_RxCpltCallback+0x2a4>)
 80072d6:	487f      	ldr	r0, [pc, #508]	@ (80074d4 <HAL_SPI_RxCpltCallback+0x298>)
 80072d8:	f000 f928 	bl	800752c <convert_array_to_value>
					if(wobble_strenght == 1){
 80072dc:	4b81      	ldr	r3, [pc, #516]	@ (80074e4 <HAL_SPI_RxCpltCallback+0x2a8>)
 80072de:	edd3 7a00 	vldr	s15, [r3]
 80072e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072e6:	eef4 7a47 	vcmp.f32	s15, s14
 80072ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ee:	d105      	bne.n	80072fc <HAL_SPI_RxCpltCallback+0xc0>
						convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 80072f0:	2308      	movs	r3, #8
 80072f2:	2206      	movs	r2, #6
 80072f4:	497c      	ldr	r1, [pc, #496]	@ (80074e8 <HAL_SPI_RxCpltCallback+0x2ac>)
 80072f6:	4877      	ldr	r0, [pc, #476]	@ (80074d4 <HAL_SPI_RxCpltCallback+0x298>)
 80072f8:	f000 f918 	bl	800752c <convert_array_to_value>
					}
					convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 80072fc:	230b      	movs	r3, #11
 80072fe:	2209      	movs	r2, #9
 8007300:	497a      	ldr	r1, [pc, #488]	@ (80074ec <HAL_SPI_RxCpltCallback+0x2b0>)
 8007302:	4874      	ldr	r0, [pc, #464]	@ (80074d4 <HAL_SPI_RxCpltCallback+0x298>)
 8007304:	f000 f912 	bl	800752c <convert_array_to_value>
					MYDRON.dron_status.Connection = DRON_CONNECTED;
 8007308:	4b79      	ldr	r3, [pc, #484]	@ (80074f0 <HAL_SPI_RxCpltCallback+0x2b4>)
 800730a:	2201      	movs	r2, #1
 800730c:	825a      	strh	r2, [r3, #18]

					if(RxData[23] == 1){
 800730e:	4b71      	ldr	r3, [pc, #452]	@ (80074d4 <HAL_SPI_RxCpltCallback+0x298>)
 8007310:	7ddb      	ldrb	r3, [r3, #23]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d11b      	bne.n	800734e <HAL_SPI_RxCpltCallback+0x112>
						ESC_POWER_1;
 8007316:	2201      	movs	r2, #1
 8007318:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800731c:	4875      	ldr	r0, [pc, #468]	@ (80074f4 <HAL_SPI_RxCpltCallback+0x2b8>)
 800731e:	f007 fb77 	bl	800ea10 <HAL_GPIO_WritePin>
						LED_R_1;
 8007322:	2201      	movs	r2, #1
 8007324:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007328:	4864      	ldr	r0, [pc, #400]	@ (80074bc <HAL_SPI_RxCpltCallback+0x280>)
 800732a:	f007 fb71 	bl	800ea10 <HAL_GPIO_WritePin>
						if(SD_enable_Flag == 1){
 800732e:	4b72      	ldr	r3, [pc, #456]	@ (80074f8 <HAL_SPI_RxCpltCallback+0x2bc>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d10b      	bne.n	800734e <HAL_SPI_RxCpltCallback+0x112>
							f_close(&fil);
 8007336:	4871      	ldr	r0, [pc, #452]	@ (80074fc <HAL_SPI_RxCpltCallback+0x2c0>)
 8007338:	f017 f856 	bl	801e3e8 <f_close>
							fresult = f_mount(NULL, "/", 1);
 800733c:	2201      	movs	r2, #1
 800733e:	4970      	ldr	r1, [pc, #448]	@ (8007500 <HAL_SPI_RxCpltCallback+0x2c4>)
 8007340:	2000      	movs	r0, #0
 8007342:	f016 fc31 	bl	801dba8 <f_mount>
 8007346:	4603      	mov	r3, r0
 8007348:	461a      	mov	r2, r3
 800734a:	4b6e      	ldr	r3, [pc, #440]	@ (8007504 <HAL_SPI_RxCpltCallback+0x2c8>)
 800734c:	701a      	strb	r2, [r3, #0]

					}

					//NRF24_Messages_SC -= RxData[12];//todo

					if(wanted_thrust == 9999){
 800734e:	4b66      	ldr	r3, [pc, #408]	@ (80074e8 <HAL_SPI_RxCpltCallback+0x2ac>)
 8007350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007354:	f242 720f 	movw	r2, #9999	@ 0x270f
 8007358:	4293      	cmp	r3, r2
 800735a:	d103      	bne.n	8007364 <HAL_SPI_RxCpltCallback+0x128>
						MYDRON.THRUST_flag = THRUST_MAX;
 800735c:	4b64      	ldr	r3, [pc, #400]	@ (80074f0 <HAL_SPI_RxCpltCallback+0x2b4>)
 800735e:	2210      	movs	r2, #16
 8007360:	f883 2020 	strb.w	r2, [r3, #32]
		  			}
					wanted_thrust = wanted_thrust * 20;
 8007364:	4b60      	ldr	r3, [pc, #384]	@ (80074e8 <HAL_SPI_RxCpltCallback+0x2ac>)
 8007366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800736a:	b29b      	uxth	r3, r3
 800736c:	461a      	mov	r2, r3
 800736e:	0092      	lsls	r2, r2, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	b29b      	uxth	r3, r3
 8007376:	b21a      	sxth	r2, r3
 8007378:	4b5b      	ldr	r3, [pc, #364]	@ (80074e8 <HAL_SPI_RxCpltCallback+0x2ac>)
 800737a:	801a      	strh	r2, [r3, #0]
					wanted_thrust = wanted_thrust - 10000;
 800737c:	4b5a      	ldr	r3, [pc, #360]	@ (80074e8 <HAL_SPI_RxCpltCallback+0x2ac>)
 800737e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007382:	b29a      	uxth	r2, r3
 8007384:	4b60      	ldr	r3, [pc, #384]	@ (8007508 <HAL_SPI_RxCpltCallback+0x2cc>)
 8007386:	4413      	add	r3, r2
 8007388:	b29b      	uxth	r3, r3
 800738a:	b21a      	sxth	r2, r3
 800738c:	4b56      	ldr	r3, [pc, #344]	@ (80074e8 <HAL_SPI_RxCpltCallback+0x2ac>)
 800738e:	801a      	strh	r2, [r3, #0]
					if(wanted_thrust < 0){
 8007390:	4b55      	ldr	r3, [pc, #340]	@ (80074e8 <HAL_SPI_RxCpltCallback+0x2ac>)
 8007392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007396:	2b00      	cmp	r3, #0
 8007398:	da02      	bge.n	80073a0 <HAL_SPI_RxCpltCallback+0x164>
						wanted_thrust = 0;
 800739a:	4b53      	ldr	r3, [pc, #332]	@ (80074e8 <HAL_SPI_RxCpltCallback+0x2ac>)
 800739c:	2200      	movs	r2, #0
 800739e:	801a      	strh	r2, [r3, #0]
		  			}

					wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 80073a0:	4b4f      	ldr	r3, [pc, #316]	@ (80074e0 <HAL_SPI_RxCpltCallback+0x2a4>)
 80073a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073a6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073b2:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800750c <HAL_SPI_RxCpltCallback+0x2d0>
 80073b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073be:	ee17 3a90 	vmov	r3, s15
 80073c2:	b21a      	sxth	r2, r3
 80073c4:	4b52      	ldr	r3, [pc, #328]	@ (8007510 <HAL_SPI_RxCpltCallback+0x2d4>)
 80073c6:	801a      	strh	r2, [r3, #0]
					wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 80073c8:	4b44      	ldr	r3, [pc, #272]	@ (80074dc <HAL_SPI_RxCpltCallback+0x2a0>)
 80073ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073ce:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073da:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8007514 <HAL_SPI_RxCpltCallback+0x2d8>
 80073de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073e6:	ee17 3a90 	vmov	r3, s15
 80073ea:	b21a      	sxth	r2, r3
 80073ec:	4b4a      	ldr	r3, [pc, #296]	@ (8007518 <HAL_SPI_RxCpltCallback+0x2dc>)
 80073ee:	801a      	strh	r2, [r3, #0]
					wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;// wanted yaw is in deg/s
 80073f0:	4b3e      	ldr	r3, [pc, #248]	@ (80074ec <HAL_SPI_RxCpltCallback+0x2b0>)
 80073f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073f6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007402:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800751c <HAL_SPI_RxCpltCallback+0x2e0>
 8007406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800740a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800740e:	ee17 3a90 	vmov	r3, s15
 8007412:	b21a      	sxth	r2, r3
 8007414:	4b42      	ldr	r3, [pc, #264]	@ (8007520 <HAL_SPI_RxCpltCallback+0x2e4>)
 8007416:	801a      	strh	r2, [r3, #0]


					wanted_rool_rx = (wanted_rool_rx >= 300) ? 300 : (wanted_rool_rx <= -300) ? -300 : wanted_rool_rx;
 8007418:	4b3d      	ldr	r3, [pc, #244]	@ (8007510 <HAL_SPI_RxCpltCallback+0x2d4>)
 800741a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800741e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8007422:	da08      	bge.n	8007436 <HAL_SPI_RxCpltCallback+0x1fa>
 8007424:	4b3a      	ldr	r3, [pc, #232]	@ (8007510 <HAL_SPI_RxCpltCallback+0x2d4>)
 8007426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800742a:	4a3e      	ldr	r2, [pc, #248]	@ (8007524 <HAL_SPI_RxCpltCallback+0x2e8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	bfb8      	it	lt
 8007430:	4613      	movlt	r3, r2
 8007432:	b21b      	sxth	r3, r3
 8007434:	e001      	b.n	800743a <HAL_SPI_RxCpltCallback+0x1fe>
 8007436:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800743a:	4a35      	ldr	r2, [pc, #212]	@ (8007510 <HAL_SPI_RxCpltCallback+0x2d4>)
 800743c:	8013      	strh	r3, [r2, #0]
					wanted_pitch_rx = (wanted_pitch_rx >= 300) ? 300 : (wanted_pitch_rx <= -300) ? -300 : wanted_pitch_rx;
 800743e:	4b36      	ldr	r3, [pc, #216]	@ (8007518 <HAL_SPI_RxCpltCallback+0x2dc>)
 8007440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007444:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8007448:	da08      	bge.n	800745c <HAL_SPI_RxCpltCallback+0x220>
 800744a:	4b33      	ldr	r3, [pc, #204]	@ (8007518 <HAL_SPI_RxCpltCallback+0x2dc>)
 800744c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007450:	4a34      	ldr	r2, [pc, #208]	@ (8007524 <HAL_SPI_RxCpltCallback+0x2e8>)
 8007452:	4293      	cmp	r3, r2
 8007454:	bfb8      	it	lt
 8007456:	4613      	movlt	r3, r2
 8007458:	b21b      	sxth	r3, r3
 800745a:	e001      	b.n	8007460 <HAL_SPI_RxCpltCallback+0x224>
 800745c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8007460:	4a2d      	ldr	r2, [pc, #180]	@ (8007518 <HAL_SPI_RxCpltCallback+0x2dc>)
 8007462:	8013      	strh	r3, [r2, #0]
					wanted_yaw_rx = (wanted_yaw_rx >= 300) ? 300 : (wanted_yaw_rx <= -300) ? -300 : wanted_yaw_rx;
 8007464:	4b2e      	ldr	r3, [pc, #184]	@ (8007520 <HAL_SPI_RxCpltCallback+0x2e4>)
 8007466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800746a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800746e:	da08      	bge.n	8007482 <HAL_SPI_RxCpltCallback+0x246>
 8007470:	4b2b      	ldr	r3, [pc, #172]	@ (8007520 <HAL_SPI_RxCpltCallback+0x2e4>)
 8007472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007476:	4a2b      	ldr	r2, [pc, #172]	@ (8007524 <HAL_SPI_RxCpltCallback+0x2e8>)
 8007478:	4293      	cmp	r3, r2
 800747a:	bfb8      	it	lt
 800747c:	4613      	movlt	r3, r2
 800747e:	b21b      	sxth	r3, r3
 8007480:	e001      	b.n	8007486 <HAL_SPI_RxCpltCallback+0x24a>
 8007482:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8007486:	4a26      	ldr	r2, [pc, #152]	@ (8007520 <HAL_SPI_RxCpltCallback+0x2e4>)
 8007488:	8013      	strh	r3, [r2, #0]


					NRF_TIM_Inte = 0;
 800748a:	4b27      	ldr	r3, [pc, #156]	@ (8007528 <HAL_SPI_RxCpltCallback+0x2ec>)
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]
		  		}

		  			if(loopnum > 0 && loopnum < 10){
 8007490:	4b0f      	ldr	r3, [pc, #60]	@ (80074d0 <HAL_SPI_RxCpltCallback+0x294>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d006      	beq.n	80074a6 <HAL_SPI_RxCpltCallback+0x26a>
 8007498:	4b0d      	ldr	r3, [pc, #52]	@ (80074d0 <HAL_SPI_RxCpltCallback+0x294>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b09      	cmp	r3, #9
 800749e:	d802      	bhi.n	80074a6 <HAL_SPI_RxCpltCallback+0x26a>
		  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 80074a0:	4b13      	ldr	r3, [pc, #76]	@ (80074f0 <HAL_SPI_RxCpltCallback+0x2b4>)
 80074a2:	2203      	movs	r2, #3
 80074a4:	825a      	strh	r2, [r3, #18]
		  			}
		  			LED_Y_0;
 80074a6:	2200      	movs	r2, #0
 80074a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80074ac:	4803      	ldr	r0, [pc, #12]	@ (80074bc <HAL_SPI_RxCpltCallback+0x280>)
 80074ae:	f007 faaf 	bl	800ea10 <HAL_GPIO_WritePin>
}
 80074b2:	bf00      	nop
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	58020400 	.word	0x58020400
 80074c0:	58021000 	.word	0x58021000
 80074c4:	00000183 	.word	0x00000183
 80074c8:	00000184 	.word	0x00000184
 80074cc:	00000182 	.word	0x00000182
 80074d0:	00004204 	.word	0x00004204
 80074d4:	00000100 	.word	0x00000100
 80074d8:	00000160 	.word	0x00000160
 80074dc:	0000420a 	.word	0x0000420a
 80074e0:	00004208 	.word	0x00004208
 80074e4:	000041f8 	.word	0x000041f8
 80074e8:	0000406c 	.word	0x0000406c
 80074ec:	0000420c 	.word	0x0000420c
 80074f0:	00000188 	.word	0x00000188
 80074f4:	58021800 	.word	0x58021800
 80074f8:	000041f4 	.word	0x000041f4
 80074fc:	24001ef0 	.word	0x24001ef0
 8007500:	0801f220 	.word	0x0801f220
 8007504:	24001eec 	.word	0x24001eec
 8007508:	ffffd8f0 	.word	0xffffd8f0
 800750c:	3f266666 	.word	0x3f266666
 8007510:	0000405a 	.word	0x0000405a
 8007514:	3f28f5c3 	.word	0x3f28f5c3
 8007518:	00004058 	.word	0x00004058
 800751c:	3f19999a 	.word	0x3f19999a
 8007520:	0000405c 	.word	0x0000405c
 8007524:	fffffed4 	.word	0xfffffed4
 8007528:	00000084 	.word	0x00000084

0800752c <convert_array_to_value>:

void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 800752c:	b580      	push	{r7, lr}
 800752e:	ed2d 8b04 	vpush	{d8-d9}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	4611      	mov	r1, r2
 800753c:	461a      	mov	r2, r3
 800753e:	460b      	mov	r3, r1
 8007540:	71fb      	strb	r3, [r7, #7]
 8007542:	4613      	mov	r3, r2
 8007544:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2200      	movs	r2, #0
 800754a:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 800754c:	79ba      	ldrb	r2, [r7, #6]
 800754e:	79fb      	ldrb	r3, [r7, #7]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 8007554:	2300      	movs	r3, #0
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	e02e      	b.n	80075b8 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007560:	ee07 3a90 	vmov	s15, r3
 8007564:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8007568:	79fa      	ldrb	r2, [r7, #7]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	4413      	add	r3, r2
 800756e:	461a      	mov	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	ee07 3a90 	vmov	s15, r3
 8007588:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800758c:	eeb0 1b47 	vmov.f64	d1, d7
 8007590:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007594:	f017 faac 	bl	801eaf0 <pow>
 8007598:	eeb0 7b40 	vmov.f64	d7, d0
 800759c:	ee29 7b07 	vmul.f64	d7, d9, d7
 80075a0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80075a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80075a8:	ee17 3a90 	vmov	r3, s15
 80075ac:	b21a      	sxth	r2, r3
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	3301      	adds	r3, #1
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	429a      	cmp	r2, r3
 80075be:	dacc      	bge.n	800755a <convert_array_to_value+0x2e>
	}

}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	3718      	adds	r7, #24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	ecbd 8b04 	vpop	{d8-d9}
 80075cc:	bd80      	pop	{r7, pc}

080075ce <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80075ce:	b590      	push	{r4, r7, lr}
 80075d0:	b087      	sub	sp, #28
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6039      	str	r1, [r7, #0]
 80075d6:	4611      	mov	r1, r2
 80075d8:	461a      	mov	r2, r3
 80075da:	4603      	mov	r3, r0
 80075dc:	80fb      	strh	r3, [r7, #6]
 80075de:	460b      	mov	r3, r1
 80075e0:	717b      	strb	r3, [r7, #5]
 80075e2:	4613      	mov	r3, r2
 80075e4:	713b      	strb	r3, [r7, #4]
	int x = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 80075ee:	793a      	ldrb	r2, [r7, #4]
 80075f0:	797b      	ldrb	r3, [r7, #5]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	e03e      	b.n	800767a <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 80075fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d028      	beq.n	8007656 <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	4619      	mov	r1, r3
 800760c:	200a      	movs	r0, #10
 800760e:	f000 f83d 	bl	800768c <potenga>
 8007612:	4603      	mov	r3, r0
 8007614:	b29b      	uxth	r3, r3
 8007616:	88fa      	ldrh	r2, [r7, #6]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	b29b      	uxth	r3, r3
 800761c:	80fb      	strh	r3, [r7, #6]
			x++;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	3301      	adds	r3, #1
 8007622:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 8007624:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007636:	eeb0 1b47 	vmov.f64	d1, d7
 800763a:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800763e:	f017 fa57 	bl	801eaf0 <pow>
 8007642:	eeb0 7b40 	vmov.f64	d7, d0
 8007646:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800764a:	ee17 3a90 	vmov	r3, s15
 800764e:	b29b      	uxth	r3, r3
 8007650:	429c      	cmp	r4, r3
 8007652:	dad3      	bge.n	80075fc <convert_value_to_array+0x2e>
 8007654:	e000      	b.n	8007658 <convert_value_to_array+0x8a>
				break;
 8007656:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 8007658:	797a      	ldrb	r2, [r7, #5]
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4413      	add	r3, r2
 800765e:	461a      	mov	r2, r3
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	4413      	add	r3, r2
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	3301      	adds	r3, #1
 800766e:	613b      	str	r3, [r7, #16]
		x = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3301      	adds	r3, #1
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	429a      	cmp	r2, r3
 8007680:	dad0      	bge.n	8007624 <convert_value_to_array+0x56>
	}
}
 8007682:	bf00      	nop
 8007684:	bf00      	nop
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	bd90      	pop	{r4, r7, pc}

0800768c <potenga>:
uint32_t potenga(int a, int b){
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <potenga+0x18>
		return 1;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e02d      	b.n	8007700 <potenga+0x74>
	}
	if(b == 1){
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d101      	bne.n	80076ae <potenga+0x22>
		return a;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	e028      	b.n	8007700 <potenga+0x74>
	}
	if(b > 1){
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	dd10      	ble.n	80076d6 <potenga+0x4a>
			for(int i = 1; i < b; i++){
 80076b4:	2301      	movs	r3, #1
 80076b6:	617b      	str	r3, [r7, #20]
 80076b8:	e007      	b.n	80076ca <potenga+0x3e>
			a = a*c;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	fb02 f303 	mul.w	r3, r2, r3
 80076c2:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	3301      	adds	r3, #1
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	dbf3      	blt.n	80076ba <potenga+0x2e>
		}
		return a;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	e014      	b.n	8007700 <potenga+0x74>
	}
	if(b < 0){
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	da10      	bge.n	80076fe <potenga+0x72>
		for(int i = 0; i < b; i++){
 80076dc:	2300      	movs	r3, #0
 80076de:	613b      	str	r3, [r7, #16]
 80076e0:	e007      	b.n	80076f2 <potenga+0x66>
			a = a/c;
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80076ea:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	3301      	adds	r3, #1
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	dbf3      	blt.n	80076e2 <potenga+0x56>
		}
		return a;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	e000      	b.n	8007700 <potenga+0x74>
	}
	return a;
 80076fe:	687b      	ldr	r3, [r7, #4]
}
 8007700:	4618      	mov	r0, r3
 8007702:	371c      	adds	r7, #28
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <WartoscBezwgledna>:
float WartoscBezwgledna(float a){
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	ed87 0a01 	vstr	s0, [r7, #4]
	a = (a < 0) ? a*(-1) : a;
 8007716:	edd7 7a01 	vldr	s15, [r7, #4]
 800771a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800771e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007722:	d504      	bpl.n	800772e <WartoscBezwgledna+0x22>
 8007724:	edd7 7a01 	vldr	s15, [r7, #4]
 8007728:	eef1 7a67 	vneg.f32	s15, s15
 800772c:	e001      	b.n	8007732 <WartoscBezwgledna+0x26>
 800772e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007732:	edc7 7a01 	vstr	s15, [r7, #4]
	return a;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	ee07 3a90 	vmov	s15, r3
}
 800773c:	eeb0 0a67 	vmov.f32	s0, s15
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
	...

0800774c <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	71fb      	strb	r3, [r7, #7]
 8007756:	460b      	mov	r3, r1
 8007758:	71bb      	strb	r3, [r7, #6]
 800775a:	4613      	mov	r3, r2
 800775c:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 800775e:	4b09      	ldr	r3, [pc, #36]	@ (8007784 <RGB_LED_Set_color+0x38>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	797a      	ldrb	r2, [r7, #5]
 8007764:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 8007766:	4b07      	ldr	r3, [pc, #28]	@ (8007784 <RGB_LED_Set_color+0x38>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	79fa      	ldrb	r2, [r7, #7]
 800776c:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 800776e:	4b05      	ldr	r3, [pc, #20]	@ (8007784 <RGB_LED_Set_color+0x38>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	79ba      	ldrb	r2, [r7, #6]
 8007774:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	24000380 	.word	0x24000380

08007788 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	4603      	mov	r3, r0
 8007790:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 8007792:	79fb      	ldrb	r3, [r7, #7]
 8007794:	ee07 3a90 	vmov	s15, r3
 8007798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80077a0:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80077f0 <RGB_LED_For_BAT+0x68>
 80077a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80077a8:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80077f8 <RGB_LED_For_BAT+0x70>
 80077ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80077b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80077b4:	edc7 7a00 	vstr	s15, [r7]
 80077b8:	783b      	ldrb	r3, [r7, #0]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	79fa      	ldrb	r2, [r7, #7]
 80077be:	ee07 2a90 	vmov	s15, r2
 80077c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80077ca:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80077f0 <RGB_LED_For_BAT+0x68>
 80077ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80077d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80077d6:	edc7 7a00 	vstr	s15, [r7]
 80077da:	783a      	ldrb	r2, [r7, #0]
 80077dc:	b2d1      	uxtb	r1, r2
 80077de:	2200      	movs	r2, #0
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff ffb3 	bl	800774c <RGB_LED_Set_color>
}
 80077e6:	bf00      	nop
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	66666666 	.word	0x66666666
 80077f4:	40046666 	.word	0x40046666
 80077f8:	00000000 	.word	0x00000000
 80077fc:	406fe000 	.word	0x406fe000

08007800 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007800:	b590      	push	{r4, r7, lr}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	6039      	str	r1, [r7, #0]
 8007808:	4611      	mov	r1, r2
 800780a:	461a      	mov	r2, r3
 800780c:	4603      	mov	r3, r0
 800780e:	80fb      	strh	r3, [r7, #6]
 8007810:	460b      	mov	r3, r1
 8007812:	717b      	strb	r3, [r7, #5]
 8007814:	4613      	mov	r3, r2
 8007816:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007820:	793a      	ldrb	r2, [r7, #4]
 8007822:	797b      	ldrb	r3, [r7, #5]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800782c:	2b00      	cmp	r3, #0
 800782e:	da04      	bge.n	800783a <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007830:	797b      	ldrb	r3, [r7, #5]
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	4413      	add	r3, r2
 8007836:	222d      	movs	r2, #45	@ 0x2d
 8007838:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 800783a:	2301      	movs	r3, #1
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	e035      	b.n	80078ac <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8007840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d01d      	beq.n	8007884 <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	4619      	mov	r1, r3
 8007850:	200a      	movs	r0, #10
 8007852:	f7ff ff1b 	bl	800768c <potenga>
 8007856:	4603      	mov	r3, r0
 8007858:	b29b      	uxth	r3, r3
 800785a:	88fa      	ldrh	r2, [r7, #6]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	b29b      	uxth	r3, r3
 8007860:	80fb      	strh	r3, [r7, #6]
			x++;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	3301      	adds	r3, #1
 8007866:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8007868:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	4619      	mov	r1, r3
 8007874:	200a      	movs	r0, #10
 8007876:	f7ff ff09 	bl	800768c <potenga>
 800787a:	4603      	mov	r3, r0
 800787c:	b29b      	uxth	r3, r3
 800787e:	429c      	cmp	r4, r3
 8007880:	dade      	bge.n	8007840 <convert_value_to_array2+0x40>
 8007882:	e000      	b.n	8007886 <convert_value_to_array2+0x86>
				break;
 8007884:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	b2da      	uxtb	r2, r3
 800788a:	7979      	ldrb	r1, [r7, #5]
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	440b      	add	r3, r1
 8007890:	4619      	mov	r1, r3
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	440b      	add	r3, r1
 8007896:	3230      	adds	r2, #48	@ 0x30
 8007898:	b2d2      	uxtb	r2, r2
 800789a:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	3301      	adds	r3, #1
 80078a0:	613b      	str	r3, [r7, #16]
		x = 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3301      	adds	r3, #1
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	dad9      	bge.n	8007868 <convert_value_to_array2+0x68>
	}
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd90      	pop	{r4, r7, pc}

080078be <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80078be:	b580      	push	{r7, lr}
 80078c0:	ed2d 8b02 	vpush	{d8}
 80078c4:	b08c      	sub	sp, #48	@ 0x30
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	ed87 0a03 	vstr	s0, [r7, #12]
 80078cc:	60b8      	str	r0, [r7, #8]
 80078ce:	460b      	mov	r3, r1
 80078d0:	71fb      	strb	r3, [r7, #7]
 80078d2:	4613      	mov	r3, r2
 80078d4:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 80078de:	79ba      	ldrb	r2, [r7, #6]
 80078e0:	79fb      	ldrb	r3, [r7, #7]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 80078e6:	2300      	movs	r3, #0
 80078e8:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 80078ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80078ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f6:	d50a      	bpl.n	800790e <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 80078f8:	79fb      	ldrb	r3, [r7, #7]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	4413      	add	r3, r2
 80078fe:	222d      	movs	r2, #45	@ 0x2d
 8007900:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 8007902:	edd7 7a03 	vldr	s15, [r7, #12]
 8007906:	eef1 7a67 	vneg.f32	s15, s15
 800790a:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 800790e:	2301      	movs	r3, #1
 8007910:	61fb      	str	r3, [r7, #28]
 8007912:	e021      	b.n	8007958 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007922:	eeb0 1b47 	vmov.f64	d1, d7
 8007926:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800792a:	f017 f8e1 	bl	801eaf0 <pow>
 800792e:	eeb0 7b40 	vmov.f64	d7, d0
 8007932:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007936:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 800793a:	ed97 7a03 	vldr	s14, [r7, #12]
 800793e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794a:	da0b      	bge.n	8007964 <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	3301      	adds	r3, #1
 8007950:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	3301      	adds	r3, #1
 8007956:	61fb      	str	r3, [r7, #28]
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	429a      	cmp	r2, r3
 8007960:	dbd8      	blt.n	8007914 <convert_value_to_array3+0x56>
 8007962:	e000      	b.n	8007966 <convert_value_to_array3+0xa8>
			break;
 8007964:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	3b01      	subs	r3, #1
 800796e:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	2b00      	cmp	r3, #0
 8007974:	dc07      	bgt.n	8007986 <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	3301      	adds	r3, #1
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	4413      	add	r3, r2
 800797e:	222e      	movs	r2, #46	@ 0x2e
 8007980:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 8007982:	2301      	movs	r3, #1
 8007984:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 8007986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007988:	2b00      	cmp	r3, #0
 800798a:	dd0a      	ble.n	80079a2 <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 800798c:	79fa      	ldrb	r2, [r7, #7]
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	4413      	add	r3, r2
 8007992:	3301      	adds	r3, #1
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	4413      	add	r3, r2
 8007998:	222e      	movs	r2, #46	@ 0x2e
 800799a:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	3301      	adds	r3, #1
 80079a0:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 80079a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80079a6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	1e5a      	subs	r2, r3, #1
 80079ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	ee07 3a90 	vmov	s15, r3
 80079b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80079ba:	eeb0 1b47 	vmov.f64	d1, d7
 80079be:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80079c2:	f017 f895 	bl	801eaf0 <pow>
 80079c6:	eeb0 7b40 	vmov.f64	d7, d0
 80079ca:	ee28 7b07 	vmul.f64	d7, d8, d7
 80079ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80079d2:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80079d6:	2300      	movs	r3, #0
 80079d8:	61bb      	str	r3, [r7, #24]
 80079da:	e05f      	b.n	8007a9c <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 80079dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80079e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80079e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e8:	d93d      	bls.n	8007a66 <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 80079ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80079ee:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	1e5a      	subs	r2, r3, #1
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	ee07 3a90 	vmov	s15, r3
 80079fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007a02:	eeb0 1b47 	vmov.f64	d1, d7
 8007a06:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007a0a:	f017 f871 	bl	801eaf0 <pow>
 8007a0e:	eeb0 7b40 	vmov.f64	d7, d0
 8007a12:	ee38 7b47 	vsub.f64	d7, d8, d7
 8007a16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007a1a:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 8007a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a20:	3301      	adds	r3, #1
 8007a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	1e5a      	subs	r2, r3, #1
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	ee07 3a90 	vmov	s15, r3
 8007a30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007a34:	eeb0 1b47 	vmov.f64	d1, d7
 8007a38:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007a3c:	f017 f858 	bl	801eaf0 <pow>
 8007a40:	eeb0 7b40 	vmov.f64	d7, d0
 8007a44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007a48:	ee17 3a90 	vmov	r3, s15
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	ee07 3a90 	vmov	s15, r3
 8007a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a56:	ed97 7a03 	vldr	s14, [r7, #12]
 8007a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a62:	dabb      	bge.n	80079dc <convert_value_to_array3+0x11e>
 8007a64:	e000      	b.n	8007a68 <convert_value_to_array3+0x1aa>
				break;
 8007a66:	bf00      	nop
		}

        if(loopnum == kropka){
 8007a68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d102      	bne.n	8007a76 <convert_value_to_array3+0x1b8>
            loopnum++;
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	3301      	adds	r3, #1
 8007a74:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8007a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	79f9      	ldrb	r1, [r7, #7]
 8007a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7e:	440b      	add	r3, r1
 8007a80:	4619      	mov	r1, r3
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	440b      	add	r3, r1
 8007a86:	3230      	adds	r2, #48	@ 0x30
 8007a88:	b2d2      	uxtb	r2, r2
 8007a8a:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8e:	3301      	adds	r3, #1
 8007a90:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 8007a92:	2300      	movs	r3, #0
 8007a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	61bb      	str	r3, [r7, #24]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3b02      	subs	r3, #2
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	dbbe      	blt.n	8007a24 <convert_value_to_array3+0x166>
	}
}
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	3730      	adds	r7, #48	@ 0x30
 8007aac:	46bd      	mov	sp, r7
 8007aae:	ecbd 8b02 	vpop	{d8}
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 8007abc:	4ba6      	ldr	r3, [pc, #664]	@ (8007d58 <uSD_Card_SendData_To_Buffer+0x2a4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	b218      	sxth	r0, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	01db      	lsls	r3, r3, #7
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	01db      	lsls	r3, r3, #7
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	49a1      	ldr	r1, [pc, #644]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ad8:	f7ff fe92 	bl	8007800 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	01db      	lsls	r3, r3, #7
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	4a9e      	ldr	r2, [pc, #632]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ae4:	2120      	movs	r1, #32
 8007ae6:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 8007ae8:	4b9d      	ldr	r3, [pc, #628]	@ (8007d60 <uSD_Card_SendData_To_Buffer+0x2ac>)
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	b218      	sxth	r0, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	01db      	lsls	r3, r3, #7
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	3309      	adds	r3, #9
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	01db      	lsls	r3, r3, #7
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	330f      	adds	r3, #15
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	4995      	ldr	r1, [pc, #596]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b08:	f7ff fe7a 	bl	8007800 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	01db      	lsls	r3, r3, #7
 8007b10:	330f      	adds	r3, #15
 8007b12:	4a92      	ldr	r2, [pc, #584]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b14:	2120      	movs	r1, #32
 8007b16:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 8007b18:	4b92      	ldr	r3, [pc, #584]	@ (8007d64 <uSD_Card_SendData_To_Buffer+0x2b0>)
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b218      	sxth	r0, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	01db      	lsls	r3, r3, #7
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	3310      	adds	r3, #16
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	01db      	lsls	r3, r3, #7
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	3316      	adds	r3, #22
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	4989      	ldr	r1, [pc, #548]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b38:	f7ff fe62 	bl	8007800 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	01db      	lsls	r3, r3, #7
 8007b40:	3316      	adds	r3, #22
 8007b42:	4a86      	ldr	r2, [pc, #536]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b44:	2120      	movs	r1, #32
 8007b46:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 8007b48:	4b87      	ldr	r3, [pc, #540]	@ (8007d68 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b218      	sxth	r0, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	01db      	lsls	r3, r3, #7
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	3317      	adds	r3, #23
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	01db      	lsls	r3, r3, #7
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	331d      	adds	r3, #29
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	497d      	ldr	r1, [pc, #500]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b68:	f7ff fe4a 	bl	8007800 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	01db      	lsls	r3, r3, #7
 8007b70:	331d      	adds	r3, #29
 8007b72:	4a7a      	ldr	r2, [pc, #488]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b74:	2120      	movs	r1, #32
 8007b76:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 8007b78:	4b7c      	ldr	r3, [pc, #496]	@ (8007d6c <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	b218      	sxth	r0, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	01db      	lsls	r3, r3, #7
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	331e      	adds	r3, #30
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	01db      	lsls	r3, r3, #7
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	3324      	adds	r3, #36	@ 0x24
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	4971      	ldr	r1, [pc, #452]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b98:	f7ff fe32 	bl	8007800 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	01db      	lsls	r3, r3, #7
 8007ba0:	3324      	adds	r3, #36	@ 0x24
 8007ba2:	4a6e      	ldr	r2, [pc, #440]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ba4:	2120      	movs	r1, #32
 8007ba6:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 8007ba8:	4b71      	ldr	r3, [pc, #452]	@ (8007d70 <uSD_Card_SendData_To_Buffer+0x2bc>)
 8007baa:	edd3 7a00 	vldr	s15, [r3]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	01db      	lsls	r3, r3, #7
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	3325      	adds	r3, #37	@ 0x25
 8007bb8:	b2d9      	uxtb	r1, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	01db      	lsls	r3, r3, #7
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	332d      	adds	r3, #45	@ 0x2d
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	4864      	ldr	r0, [pc, #400]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007bca:	eeb0 0a67 	vmov.f32	s0, s15
 8007bce:	f7ff fe76 	bl	80078be <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	01db      	lsls	r3, r3, #7
 8007bd6:	332d      	adds	r3, #45	@ 0x2d
 8007bd8:	4a60      	ldr	r2, [pc, #384]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007bda:	2120      	movs	r1, #32
 8007bdc:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 8007bde:	4b65      	ldr	r3, [pc, #404]	@ (8007d74 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007be0:	edd3 7a00 	vldr	s15, [r3]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	01db      	lsls	r3, r3, #7
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	332e      	adds	r3, #46	@ 0x2e
 8007bee:	b2d9      	uxtb	r1, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	01db      	lsls	r3, r3, #7
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	3336      	adds	r3, #54	@ 0x36
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	4857      	ldr	r0, [pc, #348]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007c00:	eeb0 0a67 	vmov.f32	s0, s15
 8007c04:	f7ff fe5b 	bl	80078be <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	01db      	lsls	r3, r3, #7
 8007c0c:	3336      	adds	r3, #54	@ 0x36
 8007c0e:	4a53      	ldr	r2, [pc, #332]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007c10:	2120      	movs	r1, #32
 8007c12:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 8007c14:	4b58      	ldr	r3, [pc, #352]	@ (8007d78 <uSD_Card_SendData_To_Buffer+0x2c4>)
 8007c16:	edd3 7a00 	vldr	s15, [r3]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	01db      	lsls	r3, r3, #7
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	3337      	adds	r3, #55	@ 0x37
 8007c24:	b2d9      	uxtb	r1, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	01db      	lsls	r3, r3, #7
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	333f      	adds	r3, #63	@ 0x3f
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	461a      	mov	r2, r3
 8007c34:	4849      	ldr	r0, [pc, #292]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007c36:	eeb0 0a67 	vmov.f32	s0, s15
 8007c3a:	f7ff fe40 	bl	80078be <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	01db      	lsls	r3, r3, #7
 8007c42:	333f      	adds	r3, #63	@ 0x3f
 8007c44:	4a45      	ldr	r2, [pc, #276]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007c46:	2120      	movs	r1, #32
 8007c48:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 8007c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8007d7c <uSD_Card_SendData_To_Buffer+0x2c8>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	b218      	sxth	r0, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	01db      	lsls	r3, r3, #7
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	3340      	adds	r3, #64	@ 0x40
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	01db      	lsls	r3, r3, #7
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	3348      	adds	r3, #72	@ 0x48
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	493c      	ldr	r1, [pc, #240]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007c6a:	f7ff fdc9 	bl	8007800 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	01db      	lsls	r3, r3, #7
 8007c72:	3348      	adds	r3, #72	@ 0x48
 8007c74:	4a39      	ldr	r2, [pc, #228]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007c76:	2120      	movs	r1, #32
 8007c78:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 8007c7a:	4b41      	ldr	r3, [pc, #260]	@ (8007d80 <uSD_Card_SendData_To_Buffer+0x2cc>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	b218      	sxth	r0, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	01db      	lsls	r3, r3, #7
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	3349      	adds	r3, #73	@ 0x49
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	01db      	lsls	r3, r3, #7
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	3351      	adds	r3, #81	@ 0x51
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	4930      	ldr	r1, [pc, #192]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007c9a:	f7ff fdb1 	bl	8007800 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	01db      	lsls	r3, r3, #7
 8007ca2:	3351      	adds	r3, #81	@ 0x51
 8007ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ca6:	2120      	movs	r1, #32
 8007ca8:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 8007caa:	4b36      	ldr	r3, [pc, #216]	@ (8007d84 <uSD_Card_SendData_To_Buffer+0x2d0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	b218      	sxth	r0, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	01db      	lsls	r3, r3, #7
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	3352      	adds	r3, #82	@ 0x52
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	01db      	lsls	r3, r3, #7
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	335a      	adds	r3, #90	@ 0x5a
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	4924      	ldr	r1, [pc, #144]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007cca:	f7ff fd99 	bl	8007800 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	01db      	lsls	r3, r3, #7
 8007cd2:	335a      	adds	r3, #90	@ 0x5a
 8007cd4:	4a21      	ldr	r2, [pc, #132]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007cd6:	2120      	movs	r1, #32
 8007cd8:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 8007cda:	4b2b      	ldr	r3, [pc, #172]	@ (8007d88 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007cdc:	edd3 7a00 	vldr	s15, [r3]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	01db      	lsls	r3, r3, #7
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	335b      	adds	r3, #91	@ 0x5b
 8007cea:	b2d9      	uxtb	r1, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	01db      	lsls	r3, r3, #7
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	3362      	adds	r3, #98	@ 0x62
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4818      	ldr	r0, [pc, #96]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8007d00:	f7ff fddd 	bl	80078be <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	01db      	lsls	r3, r3, #7
 8007d08:	3362      	adds	r3, #98	@ 0x62
 8007d0a:	4a14      	ldr	r2, [pc, #80]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007d0c:	2120      	movs	r1, #32
 8007d0e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 8007d10:	4b1d      	ldr	r3, [pc, #116]	@ (8007d88 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007d12:	edd3 7a01 	vldr	s15, [r3, #4]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	01db      	lsls	r3, r3, #7
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	3363      	adds	r3, #99	@ 0x63
 8007d20:	b2d9      	uxtb	r1, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	01db      	lsls	r3, r3, #7
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	336a      	adds	r3, #106	@ 0x6a
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	480a      	ldr	r0, [pc, #40]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007d32:	eeb0 0a67 	vmov.f32	s0, s15
 8007d36:	f7ff fdc2 	bl	80078be <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	01db      	lsls	r3, r3, #7
 8007d3e:	336a      	adds	r3, #106	@ 0x6a
 8007d40:	4a06      	ldr	r2, [pc, #24]	@ (8007d5c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007d42:	2120      	movs	r1, #32
 8007d44:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007d46:	4b10      	ldr	r3, [pc, #64]	@ (8007d88 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007d48:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	01db      	lsls	r3, r3, #7
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	336b      	adds	r3, #107	@ 0x6b
 8007d56:	e019      	b.n	8007d8c <uSD_Card_SendData_To_Buffer+0x2d8>
 8007d58:	000041ec 	.word	0x000041ec
 8007d5c:	24002f28 	.word	0x24002f28
 8007d60:	000041b4 	.word	0x000041b4
 8007d64:	000041b6 	.word	0x000041b6
 8007d68:	000041b8 	.word	0x000041b8
 8007d6c:	000041ba 	.word	0x000041ba
 8007d70:	0000407c 	.word	0x0000407c
 8007d74:	00004078 	.word	0x00004078
 8007d78:	00004080 	.word	0x00004080
 8007d7c:	000040c4 	.word	0x000040c4
 8007d80:	000040c8 	.word	0x000040c8
 8007d84:	000040cc 	.word	0x000040cc
 8007d88:	00000088 	.word	0x00000088
 8007d8c:	b2d9      	uxtb	r1, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	01db      	lsls	r3, r3, #7
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	3372      	adds	r3, #114	@ 0x72
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	482d      	ldr	r0, [pc, #180]	@ (8007e54 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8007da2:	f7ff fd8c 	bl	80078be <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	01db      	lsls	r3, r3, #7
 8007daa:	3372      	adds	r3, #114	@ 0x72
 8007dac:	4a29      	ldr	r2, [pc, #164]	@ (8007e54 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007dae:	2120      	movs	r1, #32
 8007db0:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 8007db2:	4b29      	ldr	r3, [pc, #164]	@ (8007e58 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b218      	sxth	r0, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	01db      	lsls	r3, r3, #7
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	3373      	adds	r3, #115	@ 0x73
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	01db      	lsls	r3, r3, #7
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	3377      	adds	r3, #119	@ 0x77
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	4920      	ldr	r1, [pc, #128]	@ (8007e54 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007dd2:	f7ff fd15 	bl	8007800 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	01db      	lsls	r3, r3, #7
 8007dda:	3377      	adds	r3, #119	@ 0x77
 8007ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e54 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007dde:	2120      	movs	r1, #32
 8007de0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 8007de2:	4b1d      	ldr	r3, [pc, #116]	@ (8007e58 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007de4:	8a5b      	ldrh	r3, [r3, #18]
 8007de6:	b218      	sxth	r0, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	01db      	lsls	r3, r3, #7
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	3378      	adds	r3, #120	@ 0x78
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	01db      	lsls	r3, r3, #7
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	337a      	adds	r3, #122	@ 0x7a
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	4914      	ldr	r1, [pc, #80]	@ (8007e54 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007e02:	f7ff fcfd 	bl	8007800 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	01db      	lsls	r3, r3, #7
 8007e0a:	337a      	adds	r3, #122	@ 0x7a
 8007e0c:	4a11      	ldr	r2, [pc, #68]	@ (8007e54 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007e0e:	2120      	movs	r1, #32
 8007e10:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 8007e12:	4b12      	ldr	r3, [pc, #72]	@ (8007e5c <uSD_Card_SendData_To_Buffer+0x3a8>)
 8007e14:	edd3 7a00 	vldr	s15, [r3]
 8007e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e1c:	ee17 3a90 	vmov	r3, s15
 8007e20:	b218      	sxth	r0, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	01db      	lsls	r3, r3, #7
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	337b      	adds	r3, #123	@ 0x7b
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	01db      	lsls	r3, r3, #7
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	337f      	adds	r3, #127	@ 0x7f
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	4906      	ldr	r1, [pc, #24]	@ (8007e54 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007e3c:	f7ff fce0 	bl	8007800 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3301      	adds	r3, #1
 8007e44:	01db      	lsls	r3, r3, #7
 8007e46:	4a03      	ldr	r2, [pc, #12]	@ (8007e54 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007e48:	210a      	movs	r1, #10
 8007e4a:	54d1      	strb	r1, [r2, r3]
}
 8007e4c:	bf00      	nop
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	24002f28 	.word	0x24002f28
 8007e58:	00000188 	.word	0x00000188
 8007e5c:	00000058 	.word	0x00000058

08007e60 <Stack_Push>:

void Stack_Push(float data){
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 8007e6a:	4b22      	ldr	r3, [pc, #136]	@ (8007ef4 <Stack_Push+0x94>)
 8007e6c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e70:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007e74:	3301      	adds	r3, #1
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	4b1e      	ldr	r3, [pc, #120]	@ (8007ef4 <Stack_Push+0x94>)
 8007e7a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e7e:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 8007e82:	4b1c      	ldr	r3, [pc, #112]	@ (8007ef4 <Stack_Push+0x94>)
 8007e84:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e88:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007e8c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007e90:	d105      	bne.n	8007e9e <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 8007e92:	4b18      	ldr	r3, [pc, #96]	@ (8007ef4 <Stack_Push+0x94>)
 8007e94:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 8007e9e:	4b15      	ldr	r3, [pc, #84]	@ (8007ef4 <Stack_Push+0x94>)
 8007ea0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007ea4:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007ea8:	4a12      	ldr	r2, [pc, #72]	@ (8007ef4 <Stack_Push+0x94>)
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 8007eb2:	4b10      	ldr	r3, [pc, #64]	@ (8007ef4 <Stack_Push+0x94>)
 8007eb4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007eb8:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef4 <Stack_Push+0x94>)
 8007ec2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007ec6:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 8007eca:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef4 <Stack_Push+0x94>)
 8007ecc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007ed0:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007ed4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007ed8:	d105      	bne.n	8007ee6 <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 8007eda:	4b06      	ldr	r3, [pc, #24]	@ (8007ef4 <Stack_Push+0x94>)
 8007edc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	000001ac 	.word	0x000001ac

08007ef8 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 2;
 8007efc:	4b05      	ldr	r3, [pc, #20]	@ (8007f14 <ROOL_MAX_VAL+0x1c>)
 8007efe:	2202      	movs	r2, #2
 8007f00:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return 5000;
 8007f04:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	00000188 	.word	0x00000188

08007f18 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 8007f18:	b480      	push	{r7}
 8007f1a:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 1;
 8007f1c:	4b04      	ldr	r3, [pc, #16]	@ (8007f30 <ROOL_MIN_VAL+0x18>)
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return -5000;
 8007f24:	4b03      	ldr	r3, [pc, #12]	@ (8007f34 <ROOL_MIN_VAL+0x1c>)
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	00000188 	.word	0x00000188
 8007f34:	ffffec78 	.word	0xffffec78

08007f38 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007f38:	b480      	push	{r7}
 8007f3a:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 2;
 8007f3c:	4b05      	ldr	r3, [pc, #20]	@ (8007f54 <PITCH_MAX_VAL+0x1c>)
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return 5000;
 8007f44:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	00000188 	.word	0x00000188

08007f58 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 8007f58:	b480      	push	{r7}
 8007f5a:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 1;
 8007f5c:	4b04      	ldr	r3, [pc, #16]	@ (8007f70 <PITCH_MIN_VAL+0x18>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return -5000;
 8007f64:	4b03      	ldr	r3, [pc, #12]	@ (8007f74 <PITCH_MIN_VAL+0x1c>)
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	00000188 	.word	0x00000188
 8007f74:	ffffec78 	.word	0xffffec78

08007f78 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 2;
 8007f7c:	4b05      	ldr	r3, [pc, #20]	@ (8007f94 <YAW_MAX_VAL+0x1c>)
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return 5000;
 8007f84:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	00000188 	.word	0x00000188

08007f98 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007f98:	b480      	push	{r7}
 8007f9a:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 1;
 8007f9c:	4b04      	ldr	r3, [pc, #16]	@ (8007fb0 <YAW_MIN_VAL+0x18>)
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return -5000;
 8007fa4:	4b03      	ldr	r3, [pc, #12]	@ (8007fb4 <YAW_MIN_VAL+0x1c>)
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	00000188 	.word	0x00000188
 8007fb4:	ffffec78 	.word	0xffffec78

08007fb8 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007fb8:	b480      	push	{r7}
 8007fba:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 0;
 8007fbc:	4b08      	ldr	r3, [pc, #32]	@ (8007fe0 <ROOL_GOOD_VAL+0x28>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return pid_angular_rate_rool;
 8007fc4:	4b07      	ldr	r3, [pc, #28]	@ (8007fe4 <ROOL_GOOD_VAL+0x2c>)
 8007fc6:	edd3 7a00 	vldr	s15, [r3]
 8007fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fce:	ee17 3a90 	vmov	r3, s15
 8007fd2:	b21b      	sxth	r3, r3
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	00000188 	.word	0x00000188
 8007fe4:	000040f0 	.word	0x000040f0

08007fe8 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007fe8:	b480      	push	{r7}
 8007fea:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 0;
 8007fec:	4b08      	ldr	r3, [pc, #32]	@ (8008010 <PITCH_GOOD_VAL+0x28>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return pid_angular_rate_pitch;
 8007ff4:	4b07      	ldr	r3, [pc, #28]	@ (8008014 <PITCH_GOOD_VAL+0x2c>)
 8007ff6:	edd3 7a00 	vldr	s15, [r3]
 8007ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ffe:	ee17 3a90 	vmov	r3, s15
 8008002:	b21b      	sxth	r3, r3
}
 8008004:	4618      	mov	r0, r3
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	00000188 	.word	0x00000188
 8008014:	000040e8 	.word	0x000040e8

08008018 <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 8008018:	b480      	push	{r7}
 800801a:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 0;
 800801c:	4b08      	ldr	r3, [pc, #32]	@ (8008040 <YAW_GOOD_VAL+0x28>)
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return pid_angular_rate_yaw;
 8008024:	4b07      	ldr	r3, [pc, #28]	@ (8008044 <YAW_GOOD_VAL+0x2c>)
 8008026:	edd3 7a00 	vldr	s15, [r3]
 800802a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800802e:	ee17 3a90 	vmov	r3, s15
 8008032:	b21b      	sxth	r3, r3
}
 8008034:	4618      	mov	r0, r3
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	00000188 	.word	0x00000188
 8008044:	000040ec 	.word	0x000040ec

08008048 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800804e:	463b      	mov	r3, r7
 8008050:	2200      	movs	r2, #0
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	605a      	str	r2, [r3, #4]
 8008056:	609a      	str	r2, [r3, #8]
 8008058:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800805a:	f003 fc4f 	bl	800b8fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800805e:	2301      	movs	r3, #1
 8008060:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8008062:	2300      	movs	r3, #0
 8008064:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8008066:	2300      	movs	r3, #0
 8008068:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800806a:	231f      	movs	r3, #31
 800806c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800806e:	2387      	movs	r3, #135	@ 0x87
 8008070:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8008072:	2300      	movs	r3, #0
 8008074:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8008076:	2300      	movs	r3, #0
 8008078:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800807a:	2301      	movs	r3, #1
 800807c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800807e:	2301      	movs	r3, #1
 8008080:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8008082:	2300      	movs	r3, #0
 8008084:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8008086:	2300      	movs	r3, #0
 8008088:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800808a:	463b      	mov	r3, r7
 800808c:	4618      	mov	r0, r3
 800808e:	f003 fc6d 	bl	800b96c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8008092:	2004      	movs	r0, #4
 8008094:	f003 fc4a 	bl	800b92c <HAL_MPU_Enable>

}
 8008098:	bf00      	nop
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80080a0:	b480      	push	{r7}
 80080a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80080a4:	b672      	cpsid	i
}
 80080a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80080a8:	bf00      	nop
 80080aa:	e7fd      	b.n	80080a8 <Error_Handler+0x8>

080080ac <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80080b0:	4b27      	ldr	r3, [pc, #156]	@ (8008150 <MX_SPI2_Init+0xa4>)
 80080b2:	4a28      	ldr	r2, [pc, #160]	@ (8008154 <MX_SPI2_Init+0xa8>)
 80080b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80080b6:	4b26      	ldr	r3, [pc, #152]	@ (8008150 <MX_SPI2_Init+0xa4>)
 80080b8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80080bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80080be:	4b24      	ldr	r3, [pc, #144]	@ (8008150 <MX_SPI2_Init+0xa4>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80080c4:	4b22      	ldr	r3, [pc, #136]	@ (8008150 <MX_SPI2_Init+0xa4>)
 80080c6:	2207      	movs	r2, #7
 80080c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80080ca:	4b21      	ldr	r3, [pc, #132]	@ (8008150 <MX_SPI2_Init+0xa4>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80080d0:	4b1f      	ldr	r3, [pc, #124]	@ (8008150 <MX_SPI2_Init+0xa4>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80080d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008150 <MX_SPI2_Init+0xa4>)
 80080d8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80080dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080de:	4b1c      	ldr	r3, [pc, #112]	@ (8008150 <MX_SPI2_Init+0xa4>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80080e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008150 <MX_SPI2_Init+0xa4>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80080ea:	4b19      	ldr	r3, [pc, #100]	@ (8008150 <MX_SPI2_Init+0xa4>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080f0:	4b17      	ldr	r3, [pc, #92]	@ (8008150 <MX_SPI2_Init+0xa4>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80080f6:	4b16      	ldr	r3, [pc, #88]	@ (8008150 <MX_SPI2_Init+0xa4>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80080fc:	4b14      	ldr	r3, [pc, #80]	@ (8008150 <MX_SPI2_Init+0xa4>)
 80080fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008102:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8008104:	4b12      	ldr	r3, [pc, #72]	@ (8008150 <MX_SPI2_Init+0xa4>)
 8008106:	2200      	movs	r2, #0
 8008108:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800810a:	4b11      	ldr	r3, [pc, #68]	@ (8008150 <MX_SPI2_Init+0xa4>)
 800810c:	2200      	movs	r2, #0
 800810e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008110:	4b0f      	ldr	r3, [pc, #60]	@ (8008150 <MX_SPI2_Init+0xa4>)
 8008112:	2200      	movs	r2, #0
 8008114:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008116:	4b0e      	ldr	r3, [pc, #56]	@ (8008150 <MX_SPI2_Init+0xa4>)
 8008118:	2200      	movs	r2, #0
 800811a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800811c:	4b0c      	ldr	r3, [pc, #48]	@ (8008150 <MX_SPI2_Init+0xa4>)
 800811e:	2200      	movs	r2, #0
 8008120:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8008122:	4b0b      	ldr	r3, [pc, #44]	@ (8008150 <MX_SPI2_Init+0xa4>)
 8008124:	2200      	movs	r2, #0
 8008126:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8008128:	4b09      	ldr	r3, [pc, #36]	@ (8008150 <MX_SPI2_Init+0xa4>)
 800812a:	2200      	movs	r2, #0
 800812c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800812e:	4b08      	ldr	r3, [pc, #32]	@ (8008150 <MX_SPI2_Init+0xa4>)
 8008130:	2200      	movs	r2, #0
 8008132:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008134:	4b06      	ldr	r3, [pc, #24]	@ (8008150 <MX_SPI2_Init+0xa4>)
 8008136:	2200      	movs	r2, #0
 8008138:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800813a:	4805      	ldr	r0, [pc, #20]	@ (8008150 <MX_SPI2_Init+0xa4>)
 800813c:	f00c fca0 	bl	8014a80 <HAL_SPI_Init>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8008146:	f7ff ffab 	bl	80080a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800814a:	bf00      	nop
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	240001ec 	.word	0x240001ec
 8008154:	40003800 	.word	0x40003800

08008158 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 800815c:	4b27      	ldr	r3, [pc, #156]	@ (80081fc <MX_SPI6_Init+0xa4>)
 800815e:	4a28      	ldr	r2, [pc, #160]	@ (8008200 <MX_SPI6_Init+0xa8>)
 8008160:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8008162:	4b26      	ldr	r3, [pc, #152]	@ (80081fc <MX_SPI6_Init+0xa4>)
 8008164:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8008168:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 800816a:	4b24      	ldr	r3, [pc, #144]	@ (80081fc <MX_SPI6_Init+0xa4>)
 800816c:	2200      	movs	r2, #0
 800816e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8008170:	4b22      	ldr	r3, [pc, #136]	@ (80081fc <MX_SPI6_Init+0xa4>)
 8008172:	2207      	movs	r2, #7
 8008174:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008176:	4b21      	ldr	r3, [pc, #132]	@ (80081fc <MX_SPI6_Init+0xa4>)
 8008178:	2200      	movs	r2, #0
 800817a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800817c:	4b1f      	ldr	r3, [pc, #124]	@ (80081fc <MX_SPI6_Init+0xa4>)
 800817e:	2200      	movs	r2, #0
 8008180:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8008182:	4b1e      	ldr	r3, [pc, #120]	@ (80081fc <MX_SPI6_Init+0xa4>)
 8008184:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8008188:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800818a:	4b1c      	ldr	r3, [pc, #112]	@ (80081fc <MX_SPI6_Init+0xa4>)
 800818c:	2200      	movs	r2, #0
 800818e:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008190:	4b1a      	ldr	r3, [pc, #104]	@ (80081fc <MX_SPI6_Init+0xa4>)
 8008192:	2200      	movs	r2, #0
 8008194:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8008196:	4b19      	ldr	r3, [pc, #100]	@ (80081fc <MX_SPI6_Init+0xa4>)
 8008198:	2200      	movs	r2, #0
 800819a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800819c:	4b17      	ldr	r3, [pc, #92]	@ (80081fc <MX_SPI6_Init+0xa4>)
 800819e:	2200      	movs	r2, #0
 80081a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 80081a2:	4b16      	ldr	r3, [pc, #88]	@ (80081fc <MX_SPI6_Init+0xa4>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80081a8:	4b14      	ldr	r3, [pc, #80]	@ (80081fc <MX_SPI6_Init+0xa4>)
 80081aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80081ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80081b0:	4b12      	ldr	r3, [pc, #72]	@ (80081fc <MX_SPI6_Init+0xa4>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80081b6:	4b11      	ldr	r3, [pc, #68]	@ (80081fc <MX_SPI6_Init+0xa4>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80081bc:	4b0f      	ldr	r3, [pc, #60]	@ (80081fc <MX_SPI6_Init+0xa4>)
 80081be:	2200      	movs	r2, #0
 80081c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80081c2:	4b0e      	ldr	r3, [pc, #56]	@ (80081fc <MX_SPI6_Init+0xa4>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80081c8:	4b0c      	ldr	r3, [pc, #48]	@ (80081fc <MX_SPI6_Init+0xa4>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80081ce:	4b0b      	ldr	r3, [pc, #44]	@ (80081fc <MX_SPI6_Init+0xa4>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80081d4:	4b09      	ldr	r3, [pc, #36]	@ (80081fc <MX_SPI6_Init+0xa4>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80081da:	4b08      	ldr	r3, [pc, #32]	@ (80081fc <MX_SPI6_Init+0xa4>)
 80081dc:	2200      	movs	r2, #0
 80081de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80081e0:	4b06      	ldr	r3, [pc, #24]	@ (80081fc <MX_SPI6_Init+0xa4>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80081e6:	4805      	ldr	r0, [pc, #20]	@ (80081fc <MX_SPI6_Init+0xa4>)
 80081e8:	f00c fc4a 	bl	8014a80 <HAL_SPI_Init>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 80081f2:	f7ff ff55 	bl	80080a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 80081f6:	bf00      	nop
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	24000274 	.word	0x24000274
 8008200:	58001400 	.word	0x58001400

08008204 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b0ba      	sub	sp, #232	@ 0xe8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800820c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	609a      	str	r2, [r3, #8]
 8008218:	60da      	str	r2, [r3, #12]
 800821a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800821c:	f107 0318 	add.w	r3, r7, #24
 8008220:	22b8      	movs	r2, #184	@ 0xb8
 8008222:	2100      	movs	r1, #0
 8008224:	4618      	mov	r0, r3
 8008226:	f016 fad7 	bl	801e7d8 <memset>
  if(spiHandle->Instance==SPI2)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a7b      	ldr	r2, [pc, #492]	@ (800841c <HAL_SPI_MspInit+0x218>)
 8008230:	4293      	cmp	r3, r2
 8008232:	f040 8089 	bne.w	8008348 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008236:	4b7a      	ldr	r3, [pc, #488]	@ (8008420 <HAL_SPI_MspInit+0x21c>)
 8008238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800823c:	4a78      	ldr	r2, [pc, #480]	@ (8008420 <HAL_SPI_MspInit+0x21c>)
 800823e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008242:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008246:	4b76      	ldr	r3, [pc, #472]	@ (8008420 <HAL_SPI_MspInit+0x21c>)
 8008248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800824c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008250:	617b      	str	r3, [r7, #20]
 8008252:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008254:	4b72      	ldr	r3, [pc, #456]	@ (8008420 <HAL_SPI_MspInit+0x21c>)
 8008256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800825a:	4a71      	ldr	r2, [pc, #452]	@ (8008420 <HAL_SPI_MspInit+0x21c>)
 800825c:	f043 0302 	orr.w	r3, r3, #2
 8008260:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008264:	4b6e      	ldr	r3, [pc, #440]	@ (8008420 <HAL_SPI_MspInit+0x21c>)
 8008266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	613b      	str	r3, [r7, #16]
 8008270:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008272:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800827a:	2302      	movs	r3, #2
 800827c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008280:	2300      	movs	r3, #0
 8008282:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008286:	2301      	movs	r3, #1
 8008288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800828c:	2305      	movs	r3, #5
 800828e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008292:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008296:	4619      	mov	r1, r3
 8008298:	4862      	ldr	r0, [pc, #392]	@ (8008424 <HAL_SPI_MspInit+0x220>)
 800829a:	f006 f9f9 	bl	800e690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800829e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80082a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082a6:	2302      	movs	r3, #2
 80082a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082ac:	2301      	movs	r3, #1
 80082ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80082b2:	2301      	movs	r3, #1
 80082b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80082b8:	2305      	movs	r3, #5
 80082ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80082c2:	4619      	mov	r1, r3
 80082c4:	4857      	ldr	r0, [pc, #348]	@ (8008424 <HAL_SPI_MspInit+0x220>)
 80082c6:	f006 f9e3 	bl	800e690 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 80082ca:	4b57      	ldr	r3, [pc, #348]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 80082cc:	4a57      	ldr	r2, [pc, #348]	@ (800842c <HAL_SPI_MspInit+0x228>)
 80082ce:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80082d0:	4b55      	ldr	r3, [pc, #340]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 80082d2:	2228      	movs	r2, #40	@ 0x28
 80082d4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80082d6:	4b54      	ldr	r3, [pc, #336]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 80082d8:	2240      	movs	r2, #64	@ 0x40
 80082da:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80082dc:	4b52      	ldr	r3, [pc, #328]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 80082de:	2200      	movs	r2, #0
 80082e0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80082e2:	4b51      	ldr	r3, [pc, #324]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 80082e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80082e8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80082ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80082f0:	4b4d      	ldr	r3, [pc, #308]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80082f6:	4b4c      	ldr	r3, [pc, #304]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80082fc:	4b4a      	ldr	r3, [pc, #296]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 80082fe:	2200      	movs	r2, #0
 8008300:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008302:	4b49      	ldr	r3, [pc, #292]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 8008304:	2204      	movs	r2, #4
 8008306:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008308:	4b47      	ldr	r3, [pc, #284]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 800830a:	2203      	movs	r2, #3
 800830c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800830e:	4b46      	ldr	r3, [pc, #280]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 8008310:	2200      	movs	r2, #0
 8008312:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008314:	4b44      	ldr	r3, [pc, #272]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 8008316:	2200      	movs	r2, #0
 8008318:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800831a:	4843      	ldr	r0, [pc, #268]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 800831c:	f003 fb66 	bl	800b9ec <HAL_DMA_Init>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8008326:	f7ff febb 	bl	80080a0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a3e      	ldr	r2, [pc, #248]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 800832e:	679a      	str	r2, [r3, #120]	@ 0x78
 8008330:	4a3d      	ldr	r2, [pc, #244]	@ (8008428 <HAL_SPI_MspInit+0x224>)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8008336:	2200      	movs	r2, #0
 8008338:	2100      	movs	r1, #0
 800833a:	2024      	movs	r0, #36	@ 0x24
 800833c:	f003 faa9 	bl	800b892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008340:	2024      	movs	r0, #36	@ 0x24
 8008342:	f003 fac0 	bl	800b8c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8008346:	e064      	b.n	8008412 <HAL_SPI_MspInit+0x20e>
  else if(spiHandle->Instance==SPI6)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a38      	ldr	r2, [pc, #224]	@ (8008430 <HAL_SPI_MspInit+0x22c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d15f      	bne.n	8008412 <HAL_SPI_MspInit+0x20e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8008352:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008356:	f04f 0300 	mov.w	r3, #0
 800835a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 800835e:	2318      	movs	r3, #24
 8008360:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 8008362:	23c8      	movs	r3, #200	@ 0xc8
 8008364:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 8008366:	2301      	movs	r3, #1
 8008368:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 800836a:	230a      	movs	r3, #10
 800836c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800836e:	2302      	movs	r3, #2
 8008370:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8008372:	2300      	movs	r3, #0
 8008374:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8008376:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800837a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 8008380:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008384:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008388:	f107 0318 	add.w	r3, r7, #24
 800838c:	4618      	mov	r0, r3
 800838e:	f009 ff91 	bl	80122b4 <HAL_RCCEx_PeriphCLKConfig>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <HAL_SPI_MspInit+0x198>
      Error_Handler();
 8008398:	f7ff fe82 	bl	80080a0 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 800839c:	4b20      	ldr	r3, [pc, #128]	@ (8008420 <HAL_SPI_MspInit+0x21c>)
 800839e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80083a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008420 <HAL_SPI_MspInit+0x21c>)
 80083a4:	f043 0320 	orr.w	r3, r3, #32
 80083a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80083ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008420 <HAL_SPI_MspInit+0x21c>)
 80083ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083ba:	4b19      	ldr	r3, [pc, #100]	@ (8008420 <HAL_SPI_MspInit+0x21c>)
 80083bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083c0:	4a17      	ldr	r2, [pc, #92]	@ (8008420 <HAL_SPI_MspInit+0x21c>)
 80083c2:	f043 0302 	orr.w	r3, r3, #2
 80083c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80083ca:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <HAL_SPI_MspInit+0x21c>)
 80083cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	60bb      	str	r3, [r7, #8]
 80083d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80083d8:	2338      	movs	r3, #56	@ 0x38
 80083da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083de:	2302      	movs	r3, #2
 80083e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083e4:	2300      	movs	r3, #0
 80083e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083ea:	2300      	movs	r3, #0
 80083ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80083f0:	2308      	movs	r3, #8
 80083f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80083fa:	4619      	mov	r1, r3
 80083fc:	4809      	ldr	r0, [pc, #36]	@ (8008424 <HAL_SPI_MspInit+0x220>)
 80083fe:	f006 f947 	bl	800e690 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 0, 0);
 8008402:	2200      	movs	r2, #0
 8008404:	2100      	movs	r1, #0
 8008406:	2056      	movs	r0, #86	@ 0x56
 8008408:	f003 fa43 	bl	800b892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 800840c:	2056      	movs	r0, #86	@ 0x56
 800840e:	f003 fa5a 	bl	800b8c6 <HAL_NVIC_EnableIRQ>
}
 8008412:	bf00      	nop
 8008414:	37e8      	adds	r7, #232	@ 0xe8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	40003800 	.word	0x40003800
 8008420:	58024400 	.word	0x58024400
 8008424:	58020400 	.word	0x58020400
 8008428:	240002fc 	.word	0x240002fc
 800842c:	40020010 	.word	0x40020010
 8008430:	58001400 	.word	0x58001400

08008434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800843a:	4b0a      	ldr	r3, [pc, #40]	@ (8008464 <HAL_MspInit+0x30>)
 800843c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008440:	4a08      	ldr	r2, [pc, #32]	@ (8008464 <HAL_MspInit+0x30>)
 8008442:	f043 0302 	orr.w	r3, r3, #2
 8008446:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800844a:	4b06      	ldr	r3, [pc, #24]	@ (8008464 <HAL_MspInit+0x30>)
 800844c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	607b      	str	r3, [r7, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	58024400 	.word	0x58024400

08008468 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8008468:	b480      	push	{r7}
 800846a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800846c:	4b0b      	ldr	r3, [pc, #44]	@ (800849c <SDTimer_Handler+0x34>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d004      	beq.n	800847e <SDTimer_Handler+0x16>
    Timer1--;
 8008474:	4b09      	ldr	r3, [pc, #36]	@ (800849c <SDTimer_Handler+0x34>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3b01      	subs	r3, #1
 800847a:	4a08      	ldr	r2, [pc, #32]	@ (800849c <SDTimer_Handler+0x34>)
 800847c:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 800847e:	4b08      	ldr	r3, [pc, #32]	@ (80084a0 <SDTimer_Handler+0x38>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d004      	beq.n	8008490 <SDTimer_Handler+0x28>
    Timer2--;
 8008486:	4b06      	ldr	r3, [pc, #24]	@ (80084a0 <SDTimer_Handler+0x38>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3b01      	subs	r3, #1
 800848c:	4a04      	ldr	r2, [pc, #16]	@ (80084a0 <SDTimer_Handler+0x38>)
 800848e:	6013      	str	r3, [r2, #0]
}
 8008490:	bf00      	nop
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	24000378 	.word	0x24000378
 80084a0:	2400037c 	.word	0x2400037c
 80084a4:	00000000 	.word	0x00000000

080084a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 80084ae:	2200      	movs	r2, #0
 80084b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80084b4:	48bc      	ldr	r0, [pc, #752]	@ (80087a8 <NMI_Handler+0x300>)
 80084b6:	f006 faab 	bl	800ea10 <HAL_GPIO_WritePin>
	LED_Y_0;
 80084ba:	2200      	movs	r2, #0
 80084bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80084c0:	48ba      	ldr	r0, [pc, #744]	@ (80087ac <NMI_Handler+0x304>)
 80084c2:	f006 faa5 	bl	800ea10 <HAL_GPIO_WritePin>
	LED_R_1;
 80084c6:	2201      	movs	r2, #1
 80084c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80084cc:	48b7      	ldr	r0, [pc, #732]	@ (80087ac <NMI_Handler+0x304>)
 80084ce:	f006 fa9f 	bl	800ea10 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 80084d2:	48b7      	ldr	r0, [pc, #732]	@ (80087b0 <NMI_Handler+0x308>)
 80084d4:	f015 ff88 	bl	801e3e8 <f_close>

	wanted_rool = 0;
 80084d8:	4bb6      	ldr	r3, [pc, #728]	@ (80087b4 <NMI_Handler+0x30c>)
 80084da:	f04f 0200 	mov.w	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80084e0:	4bb5      	ldr	r3, [pc, #724]	@ (80087b8 <NMI_Handler+0x310>)
 80084e2:	f04f 0200 	mov.w	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80084e8:	4bb4      	ldr	r3, [pc, #720]	@ (80087bc <NMI_Handler+0x314>)
 80084ea:	f04f 0200 	mov.w	r2, #0
 80084ee:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80084f0:	4bb3      	ldr	r3, [pc, #716]	@ (80087c0 <NMI_Handler+0x318>)
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	b21a      	sxth	r2, r3
 80084f6:	4bb3      	ldr	r3, [pc, #716]	@ (80087c4 <NMI_Handler+0x31c>)
 80084f8:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 80084fa:	2001      	movs	r0, #1
 80084fc:	f001 f94c 	bl	8009798 <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8008500:	4bb1      	ldr	r3, [pc, #708]	@ (80087c8 <NMI_Handler+0x320>)
 8008502:	edd3 7a00 	vldr	s15, [r3]
 8008506:	4bb1      	ldr	r3, [pc, #708]	@ (80087cc <NMI_Handler+0x324>)
 8008508:	ed93 7a00 	vldr	s14, [r3]
 800850c:	4bb0      	ldr	r3, [pc, #704]	@ (80087d0 <NMI_Handler+0x328>)
 800850e:	edd3 6a00 	vldr	s13, [r3]
 8008512:	4bb0      	ldr	r3, [pc, #704]	@ (80087d4 <NMI_Handler+0x32c>)
 8008514:	ed93 6a00 	vldr	s12, [r3]
 8008518:	4baf      	ldr	r3, [pc, #700]	@ (80087d8 <NMI_Handler+0x330>)
 800851a:	edd3 5a00 	vldr	s11, [r3]
 800851e:	4baf      	ldr	r3, [pc, #700]	@ (80087dc <NMI_Handler+0x334>)
 8008520:	ed93 5a00 	vldr	s10, [r3]
 8008524:	4bae      	ldr	r3, [pc, #696]	@ (80087e0 <NMI_Handler+0x338>)
 8008526:	edd3 4a00 	vldr	s9, [r3]
 800852a:	4bae      	ldr	r3, [pc, #696]	@ (80087e4 <NMI_Handler+0x33c>)
 800852c:	ed93 4a00 	vldr	s8, [r3]
 8008530:	4bad      	ldr	r3, [pc, #692]	@ (80087e8 <NMI_Handler+0x340>)
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	4bad      	ldr	r3, [pc, #692]	@ (80087ec <NMI_Handler+0x344>)
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	eef0 3a44 	vmov.f32	s7, s8
 800853c:	eeb0 3a64 	vmov.f32	s6, s9
 8008540:	eef0 2a45 	vmov.f32	s5, s10
 8008544:	eeb0 2a65 	vmov.f32	s4, s11
 8008548:	eef0 1a46 	vmov.f32	s3, s12
 800854c:	eeb0 1a66 	vmov.f32	s2, s13
 8008550:	eef0 0a47 	vmov.f32	s1, s14
 8008554:	eeb0 0a67 	vmov.f32	s0, s15
 8008558:	4ba5      	ldr	r3, [pc, #660]	@ (80087f0 <NMI_Handler+0x348>)
 800855a:	4aa6      	ldr	r2, [pc, #664]	@ (80087f4 <NMI_Handler+0x34c>)
 800855c:	49a6      	ldr	r1, [pc, #664]	@ (80087f8 <NMI_Handler+0x350>)
 800855e:	48a7      	ldr	r0, [pc, #668]	@ (80087fc <NMI_Handler+0x354>)
 8008560:	f7f9 f89a 	bl	8001698 <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 8008564:	4ba5      	ldr	r3, [pc, #660]	@ (80087fc <NMI_Handler+0x354>)
 8008566:	edd3 7a00 	vldr	s15, [r3]
 800856a:	4ba3      	ldr	r3, [pc, #652]	@ (80087f8 <NMI_Handler+0x350>)
 800856c:	ed93 7a00 	vldr	s14, [r3]
 8008570:	4ba0      	ldr	r3, [pc, #640]	@ (80087f4 <NMI_Handler+0x34c>)
 8008572:	edd3 6a00 	vldr	s13, [r3]
 8008576:	49a2      	ldr	r1, [pc, #648]	@ (8008800 <NMI_Handler+0x358>)
 8008578:	48a2      	ldr	r0, [pc, #648]	@ (8008804 <NMI_Handler+0x35c>)
 800857a:	eeb0 1a66 	vmov.f32	s2, s13
 800857e:	eef0 0a47 	vmov.f32	s1, s14
 8008582:	eeb0 0a67 	vmov.f32	s0, s15
 8008586:	f7f9 f80b 	bl	80015a0 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 800858a:	4b9e      	ldr	r3, [pc, #632]	@ (8008804 <NMI_Handler+0x35c>)
 800858c:	edd3 7a00 	vldr	s15, [r3]
 8008590:	4b9b      	ldr	r3, [pc, #620]	@ (8008800 <NMI_Handler+0x358>)
 8008592:	ed93 7a00 	vldr	s14, [r3]
 8008596:	4b9c      	ldr	r3, [pc, #624]	@ (8008808 <NMI_Handler+0x360>)
 8008598:	edd3 6a00 	vldr	s13, [r3]
 800859c:	4b94      	ldr	r3, [pc, #592]	@ (80087f0 <NMI_Handler+0x348>)
 800859e:	ed93 6a00 	vldr	s12, [r3]
 80085a2:	4b92      	ldr	r3, [pc, #584]	@ (80087ec <NMI_Handler+0x344>)
 80085a4:	edd3 5a00 	vldr	s11, [r3]
 80085a8:	4b8f      	ldr	r3, [pc, #572]	@ (80087e8 <NMI_Handler+0x340>)
 80085aa:	ed93 5a00 	vldr	s10, [r3]
 80085ae:	eef0 2a45 	vmov.f32	s5, s10
 80085b2:	eeb0 2a65 	vmov.f32	s4, s11
 80085b6:	eef0 1a46 	vmov.f32	s3, s12
 80085ba:	eeb0 1a66 	vmov.f32	s2, s13
 80085be:	eef0 0a47 	vmov.f32	s1, s14
 80085c2:	eeb0 0a67 	vmov.f32	s0, s15
 80085c6:	4891      	ldr	r0, [pc, #580]	@ (800880c <NMI_Handler+0x364>)
 80085c8:	f7f9 f9e0 	bl	800198c <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 80085cc:	4b8f      	ldr	r3, [pc, #572]	@ (800880c <NMI_Handler+0x364>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a8f      	ldr	r2, [pc, #572]	@ (8008810 <NMI_Handler+0x368>)
 80085d2:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 80085d4:	4b8d      	ldr	r3, [pc, #564]	@ (800880c <NMI_Handler+0x364>)
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	4a8e      	ldr	r2, [pc, #568]	@ (8008814 <NMI_Handler+0x36c>)
 80085da:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 80085dc:	4b8b      	ldr	r3, [pc, #556]	@ (800880c <NMI_Handler+0x364>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	4a8d      	ldr	r2, [pc, #564]	@ (8008818 <NMI_Handler+0x370>)
 80085e2:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 80085e4:	4b73      	ldr	r3, [pc, #460]	@ (80087b4 <NMI_Handler+0x30c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a8c      	ldr	r2, [pc, #560]	@ (800881c <NMI_Handler+0x374>)
 80085ea:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 80085ec:	4b72      	ldr	r3, [pc, #456]	@ (80087b8 <NMI_Handler+0x310>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a8b      	ldr	r2, [pc, #556]	@ (8008820 <NMI_Handler+0x378>)
 80085f2:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 80085f4:	4b71      	ldr	r3, [pc, #452]	@ (80087bc <NMI_Handler+0x314>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a8a      	ldr	r2, [pc, #552]	@ (8008824 <NMI_Handler+0x37c>)
 80085fa:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 80085fc:	4b8a      	ldr	r3, [pc, #552]	@ (8008828 <NMI_Handler+0x380>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	ee07 3a90 	vmov	s15, r3
 8008604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008608:	4b6b      	ldr	r3, [pc, #428]	@ (80087b8 <NMI_Handler+0x310>)
 800860a:	edd3 6a00 	vldr	s13, [r3]
 800860e:	4b80      	ldr	r3, [pc, #512]	@ (8008810 <NMI_Handler+0x368>)
 8008610:	edd3 7a00 	vldr	s15, [r3]
 8008614:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800861c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008620:	ee17 2a90 	vmov	r2, s15
 8008624:	4b80      	ldr	r3, [pc, #512]	@ (8008828 <NMI_Handler+0x380>)
 8008626:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 8008628:	4b80      	ldr	r3, [pc, #512]	@ (800882c <NMI_Handler+0x384>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	ee07 3a90 	vmov	s15, r3
 8008630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008634:	4b5f      	ldr	r3, [pc, #380]	@ (80087b4 <NMI_Handler+0x30c>)
 8008636:	edd3 6a00 	vldr	s13, [r3]
 800863a:	4b76      	ldr	r3, [pc, #472]	@ (8008814 <NMI_Handler+0x36c>)
 800863c:	edd3 7a00 	vldr	s15, [r3]
 8008640:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800864c:	ee17 2a90 	vmov	r2, s15
 8008650:	4b76      	ldr	r3, [pc, #472]	@ (800882c <NMI_Handler+0x384>)
 8008652:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 8008654:	4b76      	ldr	r3, [pc, #472]	@ (8008830 <NMI_Handler+0x388>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	ee07 3a90 	vmov	s15, r3
 800865c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008660:	4b56      	ldr	r3, [pc, #344]	@ (80087bc <NMI_Handler+0x314>)
 8008662:	edd3 6a00 	vldr	s13, [r3]
 8008666:	4b6c      	ldr	r3, [pc, #432]	@ (8008818 <NMI_Handler+0x370>)
 8008668:	edd3 7a00 	vldr	s15, [r3]
 800866c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008678:	ee17 2a90 	vmov	r2, s15
 800867c:	4b6c      	ldr	r3, [pc, #432]	@ (8008830 <NMI_Handler+0x388>)
 800867e:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 8008680:	4b6c      	ldr	r3, [pc, #432]	@ (8008834 <NMI_Handler+0x38c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	ee07 3a90 	vmov	s15, r3
 8008688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800868c:	4b6a      	ldr	r3, [pc, #424]	@ (8008838 <NMI_Handler+0x390>)
 800868e:	edd3 6a00 	vldr	s13, [r3]
 8008692:	4b57      	ldr	r3, [pc, #348]	@ (80087f0 <NMI_Handler+0x348>)
 8008694:	edd3 7a00 	vldr	s15, [r3]
 8008698:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800869c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086a4:	ee17 2a90 	vmov	r2, s15
 80086a8:	4b62      	ldr	r3, [pc, #392]	@ (8008834 <NMI_Handler+0x38c>)
 80086aa:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 80086ac:	4b63      	ldr	r3, [pc, #396]	@ (800883c <NMI_Handler+0x394>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	ee07 3a90 	vmov	s15, r3
 80086b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086b8:	4b61      	ldr	r3, [pc, #388]	@ (8008840 <NMI_Handler+0x398>)
 80086ba:	edd3 6a00 	vldr	s13, [r3]
 80086be:	4b4b      	ldr	r3, [pc, #300]	@ (80087ec <NMI_Handler+0x344>)
 80086c0:	edd3 7a00 	vldr	s15, [r3]
 80086c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80086c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086d0:	ee17 2a90 	vmov	r2, s15
 80086d4:	4b59      	ldr	r3, [pc, #356]	@ (800883c <NMI_Handler+0x394>)
 80086d6:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 80086d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008844 <NMI_Handler+0x39c>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	ee07 3a90 	vmov	s15, r3
 80086e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086e4:	4b58      	ldr	r3, [pc, #352]	@ (8008848 <NMI_Handler+0x3a0>)
 80086e6:	edd3 6a00 	vldr	s13, [r3]
 80086ea:	4b3f      	ldr	r3, [pc, #252]	@ (80087e8 <NMI_Handler+0x340>)
 80086ec:	edd3 7a00 	vldr	s15, [r3]
 80086f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80086f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086fc:	ee17 2a90 	vmov	r2, s15
 8008700:	4b50      	ldr	r3, [pc, #320]	@ (8008844 <NMI_Handler+0x39c>)
 8008702:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8008704:	2201      	movs	r2, #1
 8008706:	4951      	ldr	r1, [pc, #324]	@ (800884c <NMI_Handler+0x3a4>)
 8008708:	484b      	ldr	r0, [pc, #300]	@ (8008838 <NMI_Handler+0x390>)
 800870a:	f7fb fa3f 	bl	8003b8c <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 800870e:	2202      	movs	r2, #2
 8008710:	494f      	ldr	r1, [pc, #316]	@ (8008850 <NMI_Handler+0x3a8>)
 8008712:	484b      	ldr	r0, [pc, #300]	@ (8008840 <NMI_Handler+0x398>)
 8008714:	f7fb fa3a 	bl	8003b8c <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8008718:	2204      	movs	r2, #4
 800871a:	494e      	ldr	r1, [pc, #312]	@ (8008854 <NMI_Handler+0x3ac>)
 800871c:	484e      	ldr	r0, [pc, #312]	@ (8008858 <NMI_Handler+0x3b0>)
 800871e:	f7fb fa35 	bl	8003b8c <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8008722:	2205      	movs	r2, #5
 8008724:	494d      	ldr	r1, [pc, #308]	@ (800885c <NMI_Handler+0x3b4>)
 8008726:	484e      	ldr	r0, [pc, #312]	@ (8008860 <NMI_Handler+0x3b8>)
 8008728:	f7fb fa30 	bl	8003b8c <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 800872c:	2206      	movs	r2, #6
 800872e:	494d      	ldr	r1, [pc, #308]	@ (8008864 <NMI_Handler+0x3bc>)
 8008730:	484d      	ldr	r0, [pc, #308]	@ (8008868 <NMI_Handler+0x3c0>)
 8008732:	f7fb fa2b 	bl	8003b8c <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 8008736:	4b20      	ldr	r3, [pc, #128]	@ (80087b8 <NMI_Handler+0x310>)
 8008738:	ed93 7a00 	vldr	s14, [r3]
 800873c:	4b34      	ldr	r3, [pc, #208]	@ (8008810 <NMI_Handler+0x368>)
 800873e:	edd3 7a00 	vldr	s15, [r3]
 8008742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008746:	4b49      	ldr	r3, [pc, #292]	@ (800886c <NMI_Handler+0x3c4>)
 8008748:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 800874c:	4b19      	ldr	r3, [pc, #100]	@ (80087b4 <NMI_Handler+0x30c>)
 800874e:	ed93 7a00 	vldr	s14, [r3]
 8008752:	4b30      	ldr	r3, [pc, #192]	@ (8008814 <NMI_Handler+0x36c>)
 8008754:	edd3 7a00 	vldr	s15, [r3]
 8008758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800875c:	4b44      	ldr	r3, [pc, #272]	@ (8008870 <NMI_Handler+0x3c8>)
 800875e:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 8008762:	4b35      	ldr	r3, [pc, #212]	@ (8008838 <NMI_Handler+0x390>)
 8008764:	ed93 7a00 	vldr	s14, [r3]
 8008768:	4b21      	ldr	r3, [pc, #132]	@ (80087f0 <NMI_Handler+0x348>)
 800876a:	edd3 7a00 	vldr	s15, [r3]
 800876e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008772:	4b40      	ldr	r3, [pc, #256]	@ (8008874 <NMI_Handler+0x3cc>)
 8008774:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 8008778:	4b31      	ldr	r3, [pc, #196]	@ (8008840 <NMI_Handler+0x398>)
 800877a:	ed93 7a00 	vldr	s14, [r3]
 800877e:	4b1b      	ldr	r3, [pc, #108]	@ (80087ec <NMI_Handler+0x344>)
 8008780:	edd3 7a00 	vldr	s15, [r3]
 8008784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008788:	4b3b      	ldr	r3, [pc, #236]	@ (8008878 <NMI_Handler+0x3d0>)
 800878a:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 800878e:	4b0b      	ldr	r3, [pc, #44]	@ (80087bc <NMI_Handler+0x314>)
 8008790:	ed93 7a00 	vldr	s14, [r3]
 8008794:	4b14      	ldr	r3, [pc, #80]	@ (80087e8 <NMI_Handler+0x340>)
 8008796:	edd3 7a00 	vldr	s15, [r3]
 800879a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800879e:	4b37      	ldr	r3, [pc, #220]	@ (800887c <NMI_Handler+0x3d4>)
 80087a0:	edc3 7a00 	vstr	s15, [r3]
 80087a4:	e06c      	b.n	8008880 <NMI_Handler+0x3d8>
 80087a6:	bf00      	nop
 80087a8:	58021000 	.word	0x58021000
 80087ac:	58020400 	.word	0x58020400
 80087b0:	24001ef0 	.word	0x24001ef0
 80087b4:	0000407c 	.word	0x0000407c
 80087b8:	00004078 	.word	0x00004078
 80087bc:	00004080 	.word	0x00004080
 80087c0:	0801f298 	.word	0x0801f298
 80087c4:	0000406c 	.word	0x0000406c
 80087c8:	00000030 	.word	0x00000030
 80087cc:	00000034 	.word	0x00000034
 80087d0:	00000038 	.word	0x00000038
 80087d4:	0000003c 	.word	0x0000003c
 80087d8:	00000040 	.word	0x00000040
 80087dc:	00000044 	.word	0x00000044
 80087e0:	0801f28c 	.word	0x0801f28c
 80087e4:	0801f290 	.word	0x0801f290
 80087e8:	00000014 	.word	0x00000014
 80087ec:	00000010 	.word	0x00000010
 80087f0:	0000000c 	.word	0x0000000c
 80087f4:	00000008 	.word	0x00000008
 80087f8:	00000004 	.word	0x00000004
 80087fc:	00000000 	.word	0x00000000
 8008800:	0000001c 	.word	0x0000001c
 8008804:	00000018 	.word	0x00000018
 8008808:	00000058 	.word	0x00000058
 800880c:	00000088 	.word	0x00000088
 8008810:	00004088 	.word	0x00004088
 8008814:	0000408c 	.word	0x0000408c
 8008818:	00004090 	.word	0x00004090
 800881c:	00004064 	.word	0x00004064
 8008820:	00004060 	.word	0x00004060
 8008824:	00004068 	.word	0x00004068
 8008828:	000040c4 	.word	0x000040c4
 800882c:	000040c8 	.word	0x000040c8
 8008830:	000040cc 	.word	0x000040cc
 8008834:	000040d0 	.word	0x000040d0
 8008838:	000040dc 	.word	0x000040dc
 800883c:	000040d4 	.word	0x000040d4
 8008840:	000040e4 	.word	0x000040e4
 8008844:	000040d8 	.word	0x000040d8
 8008848:	000040e0 	.word	0x000040e0
 800884c:	00004118 	.word	0x00004118
 8008850:	0000412c 	.word	0x0000412c
 8008854:	00004178 	.word	0x00004178
 8008858:	000040e8 	.word	0x000040e8
 800885c:	0000418c 	.word	0x0000418c
 8008860:	000040f0 	.word	0x000040f0
 8008864:	000041a0 	.word	0x000041a0
 8008868:	000040ec 	.word	0x000040ec
 800886c:	000040ac 	.word	0x000040ac
 8008870:	000040b0 	.word	0x000040b0
 8008874:	000040b8 	.word	0x000040b8
 8008878:	000040bc 	.word	0x000040bc
 800887c:	000040c0 	.word	0x000040c0


		MYDRON.ROOL = pid_angular_rate_rool;
 8008880:	4b99      	ldr	r3, [pc, #612]	@ (8008ae8 <NMI_Handler+0x640>)
 8008882:	edd3 7a00 	vldr	s15, [r3]
 8008886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800888a:	ee17 3a90 	vmov	r3, s15
 800888e:	b21a      	sxth	r2, r3
 8008890:	4b96      	ldr	r3, [pc, #600]	@ (8008aec <NMI_Handler+0x644>)
 8008892:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 8008894:	4b96      	ldr	r3, [pc, #600]	@ (8008af0 <NMI_Handler+0x648>)
 8008896:	edd3 7a00 	vldr	s15, [r3]
 800889a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800889e:	ee17 3a90 	vmov	r3, s15
 80088a2:	b21a      	sxth	r2, r3
 80088a4:	4b91      	ldr	r3, [pc, #580]	@ (8008aec <NMI_Handler+0x644>)
 80088a6:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 80088a8:	4b92      	ldr	r3, [pc, #584]	@ (8008af4 <NMI_Handler+0x64c>)
 80088aa:	edd3 7a00 	vldr	s15, [r3]
 80088ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088b2:	ee17 3a90 	vmov	r3, s15
 80088b6:	b21a      	sxth	r2, r3
 80088b8:	4b8c      	ldr	r3, [pc, #560]	@ (8008aec <NMI_Handler+0x644>)
 80088ba:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 80088bc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80088c0:	f7fb f83a 	bl	8003938 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 80088c4:	4b89      	ldr	r3, [pc, #548]	@ (8008aec <NMI_Handler+0x644>)
 80088c6:	885b      	ldrh	r3, [r3, #2]
 80088c8:	461a      	mov	r2, r3
 80088ca:	4b8b      	ldr	r3, [pc, #556]	@ (8008af8 <NMI_Handler+0x650>)
 80088cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	dd05      	ble.n	80088e0 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 80088d4:	4b88      	ldr	r3, [pc, #544]	@ (8008af8 <NMI_Handler+0x650>)
 80088d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088da:	b29a      	uxth	r2, r3
 80088dc:	4b83      	ldr	r3, [pc, #524]	@ (8008aec <NMI_Handler+0x644>)
 80088de:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 80088e0:	4b82      	ldr	r3, [pc, #520]	@ (8008aec <NMI_Handler+0x644>)
 80088e2:	885b      	ldrh	r3, [r3, #2]
 80088e4:	ee07 3a90 	vmov	s15, r3
 80088e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80088ec:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8008ad0 <NMI_Handler+0x628>
 80088f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80088f4:	4b7d      	ldr	r3, [pc, #500]	@ (8008aec <NMI_Handler+0x644>)
 80088f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008902:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008906:	4b79      	ldr	r3, [pc, #484]	@ (8008aec <NMI_Handler+0x644>)
 8008908:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800890c:	ee07 3a90 	vmov	s15, r3
 8008910:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008914:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008918:	4b74      	ldr	r3, [pc, #464]	@ (8008aec <NMI_Handler+0x644>)
 800891a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008926:	ee36 7b07 	vadd.f64	d7, d6, d7
 800892a:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008ad8 <NMI_Handler+0x630>
 800892e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008932:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008ae0 <NMI_Handler+0x638>
 8008936:	ee37 7b06 	vadd.f64	d7, d7, d6
 800893a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800893e:	ee17 3a90 	vmov	r3, s15
 8008942:	b29a      	uxth	r2, r3
 8008944:	4b6d      	ldr	r3, [pc, #436]	@ (8008afc <NMI_Handler+0x654>)
 8008946:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008948:	4b68      	ldr	r3, [pc, #416]	@ (8008aec <NMI_Handler+0x644>)
 800894a:	885b      	ldrh	r3, [r3, #2]
 800894c:	ee07 3a90 	vmov	s15, r3
 8008950:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008954:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8008ad0 <NMI_Handler+0x628>
 8008958:	ee27 6b06 	vmul.f64	d6, d7, d6
 800895c:	4b63      	ldr	r3, [pc, #396]	@ (8008aec <NMI_Handler+0x644>)
 800895e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800896a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800896e:	4b5f      	ldr	r3, [pc, #380]	@ (8008aec <NMI_Handler+0x644>)
 8008970:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008974:	ee07 3a90 	vmov	s15, r3
 8008978:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800897c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008980:	4b5a      	ldr	r3, [pc, #360]	@ (8008aec <NMI_Handler+0x644>)
 8008982:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800898e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008992:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008ad8 <NMI_Handler+0x630>
 8008996:	ee37 7b06 	vadd.f64	d7, d7, d6
 800899a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008ae0 <NMI_Handler+0x638>
 800899e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80089a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80089a6:	ee17 3a90 	vmov	r3, s15
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	4b54      	ldr	r3, [pc, #336]	@ (8008b00 <NMI_Handler+0x658>)
 80089ae:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 80089b0:	4b4e      	ldr	r3, [pc, #312]	@ (8008aec <NMI_Handler+0x644>)
 80089b2:	885b      	ldrh	r3, [r3, #2]
 80089b4:	ee07 3a90 	vmov	s15, r3
 80089b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80089bc:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8008ad0 <NMI_Handler+0x628>
 80089c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80089c4:	4b49      	ldr	r3, [pc, #292]	@ (8008aec <NMI_Handler+0x644>)
 80089c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80089d2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80089d6:	4b45      	ldr	r3, [pc, #276]	@ (8008aec <NMI_Handler+0x644>)
 80089d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80089dc:	ee07 3a90 	vmov	s15, r3
 80089e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80089e4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80089e8:	4b40      	ldr	r3, [pc, #256]	@ (8008aec <NMI_Handler+0x644>)
 80089ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80089f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80089fa:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008ad8 <NMI_Handler+0x630>
 80089fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008a02:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008ae0 <NMI_Handler+0x638>
 8008a06:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008a0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008a0e:	ee17 3a90 	vmov	r3, s15
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	4b3b      	ldr	r3, [pc, #236]	@ (8008b04 <NMI_Handler+0x65c>)
 8008a16:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 8008a18:	4b34      	ldr	r3, [pc, #208]	@ (8008aec <NMI_Handler+0x644>)
 8008a1a:	885b      	ldrh	r3, [r3, #2]
 8008a1c:	ee07 3a90 	vmov	s15, r3
 8008a20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008a24:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8008ad0 <NMI_Handler+0x628>
 8008a28:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8008aec <NMI_Handler+0x644>)
 8008a2e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008a3a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8008aec <NMI_Handler+0x644>)
 8008a40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008a44:	ee07 3a90 	vmov	s15, r3
 8008a48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008a4c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008a50:	4b26      	ldr	r3, [pc, #152]	@ (8008aec <NMI_Handler+0x644>)
 8008a52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008a5e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008a62:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008ad8 <NMI_Handler+0x630>
 8008a66:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008a6a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008ae0 <NMI_Handler+0x638>
 8008a6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008a72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008a76:	ee17 3a90 	vmov	r3, s15
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	4b22      	ldr	r3, [pc, #136]	@ (8008b08 <NMI_Handler+0x660>)
 8008a7e:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 8008a80:	4b1e      	ldr	r3, [pc, #120]	@ (8008afc <NMI_Handler+0x654>)
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7f8 f9d5 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 8008a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8008b00 <NMI_Handler+0x658>)
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7f8 f9f2 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 8008a94:	4b1b      	ldr	r3, [pc, #108]	@ (8008b04 <NMI_Handler+0x65c>)
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7f8 fa0f 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 8008a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8008b08 <NMI_Handler+0x660>)
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f8 fa2c 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 8008aa8:	4b14      	ldr	r3, [pc, #80]	@ (8008afc <NMI_Handler+0x654>)
 8008aaa:	881a      	ldrh	r2, [r3, #0]
 8008aac:	4b17      	ldr	r3, [pc, #92]	@ (8008b0c <NMI_Handler+0x664>)
 8008aae:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 8008ab0:	4b13      	ldr	r3, [pc, #76]	@ (8008b00 <NMI_Handler+0x658>)
 8008ab2:	881a      	ldrh	r2, [r3, #0]
 8008ab4:	4b16      	ldr	r3, [pc, #88]	@ (8008b10 <NMI_Handler+0x668>)
 8008ab6:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 8008ab8:	4b12      	ldr	r3, [pc, #72]	@ (8008b04 <NMI_Handler+0x65c>)
 8008aba:	881a      	ldrh	r2, [r3, #0]
 8008abc:	4b15      	ldr	r3, [pc, #84]	@ (8008b14 <NMI_Handler+0x66c>)
 8008abe:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 8008ac0:	4b11      	ldr	r3, [pc, #68]	@ (8008b08 <NMI_Handler+0x660>)
 8008ac2:	881a      	ldrh	r2, [r3, #0]
 8008ac4:	4b14      	ldr	r3, [pc, #80]	@ (8008b18 <NMI_Handler+0x670>)
 8008ac6:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 8008ac8:	e517      	b.n	80084fa <NMI_Handler+0x52>
 8008aca:	bf00      	nop
 8008acc:	f3af 8000 	nop.w
 8008ad0:	66666666 	.word	0x66666666
 8008ad4:	3fe66666 	.word	0x3fe66666
 8008ad8:	00000000 	.word	0x00000000
 8008adc:	40c48200 	.word	0x40c48200
 8008ae0:	00000000 	.word	0x00000000
 8008ae4:	407f4000 	.word	0x407f4000
 8008ae8:	000040f0 	.word	0x000040f0
 8008aec:	00000188 	.word	0x00000188
 8008af0:	000040e8 	.word	0x000040e8
 8008af4:	000040ec 	.word	0x000040ec
 8008af8:	0000406e 	.word	0x0000406e
 8008afc:	000041b4 	.word	0x000041b4
 8008b00:	000041b6 	.word	0x000041b6
 8008b04:	000041b8 	.word	0x000041b8
 8008b08:	000041ba 	.word	0x000041ba
 8008b0c:	000041bc 	.word	0x000041bc
 8008b10:	000041be 	.word	0x000041be
 8008b14:	000041c0 	.word	0x000041c0
 8008b18:	000041c2 	.word	0x000041c2

08008b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 8008b20:	2201      	movs	r2, #1
 8008b22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b26:	4812      	ldr	r0, [pc, #72]	@ (8008b70 <HardFault_Handler+0x54>)
 8008b28:	f005 ff72 	bl	800ea10 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008b32:	4810      	ldr	r0, [pc, #64]	@ (8008b74 <HardFault_Handler+0x58>)
 8008b34:	f005 ff6c 	bl	800ea10 <HAL_GPIO_WritePin>
	LED_R_1;
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008b3e:	480d      	ldr	r0, [pc, #52]	@ (8008b74 <HardFault_Handler+0x58>)
 8008b40:	f005 ff66 	bl	800ea10 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008b44:	480c      	ldr	r0, [pc, #48]	@ (8008b78 <HardFault_Handler+0x5c>)
 8008b46:	f015 fc4f 	bl	801e3e8 <f_close>
	wanted_rool = 0;
 8008b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b7c <HardFault_Handler+0x60>)
 8008b4c:	f04f 0200 	mov.w	r2, #0
 8008b50:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008b52:	4b0b      	ldr	r3, [pc, #44]	@ (8008b80 <HardFault_Handler+0x64>)
 8008b54:	f04f 0200 	mov.w	r2, #0
 8008b58:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b84 <HardFault_Handler+0x68>)
 8008b5c:	f04f 0200 	mov.w	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008b62:	4b09      	ldr	r3, [pc, #36]	@ (8008b88 <HardFault_Handler+0x6c>)
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	b21a      	sxth	r2, r3
 8008b68:	4b08      	ldr	r3, [pc, #32]	@ (8008b8c <HardFault_Handler+0x70>)
 8008b6a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b6c:	bf00      	nop
 8008b6e:	e7fd      	b.n	8008b6c <HardFault_Handler+0x50>
 8008b70:	58021000 	.word	0x58021000
 8008b74:	58020400 	.word	0x58020400
 8008b78:	24001ef0 	.word	0x24001ef0
 8008b7c:	0000407c 	.word	0x0000407c
 8008b80:	00004078 	.word	0x00004078
 8008b84:	00004080 	.word	0x00004080
 8008b88:	0801f298 	.word	0x0801f298
 8008b8c:	0000406c 	.word	0x0000406c

08008b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 8008b94:	2200      	movs	r2, #0
 8008b96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b9a:	4812      	ldr	r0, [pc, #72]	@ (8008be4 <MemManage_Handler+0x54>)
 8008b9c:	f005 ff38 	bl	800ea10 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008ba6:	4810      	ldr	r0, [pc, #64]	@ (8008be8 <MemManage_Handler+0x58>)
 8008ba8:	f005 ff32 	bl	800ea10 <HAL_GPIO_WritePin>
	LED_R_1;
 8008bac:	2201      	movs	r2, #1
 8008bae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008bb2:	480d      	ldr	r0, [pc, #52]	@ (8008be8 <MemManage_Handler+0x58>)
 8008bb4:	f005 ff2c 	bl	800ea10 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008bb8:	480c      	ldr	r0, [pc, #48]	@ (8008bec <MemManage_Handler+0x5c>)
 8008bba:	f015 fc15 	bl	801e3e8 <f_close>
	wanted_rool = 0;
 8008bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf0 <MemManage_Handler+0x60>)
 8008bc0:	f04f 0200 	mov.w	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008bf4 <MemManage_Handler+0x64>)
 8008bc8:	f04f 0200 	mov.w	r2, #0
 8008bcc:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008bce:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf8 <MemManage_Handler+0x68>)
 8008bd0:	f04f 0200 	mov.w	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008bd6:	4b09      	ldr	r3, [pc, #36]	@ (8008bfc <MemManage_Handler+0x6c>)
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	b21a      	sxth	r2, r3
 8008bdc:	4b08      	ldr	r3, [pc, #32]	@ (8008c00 <MemManage_Handler+0x70>)
 8008bde:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008be0:	bf00      	nop
 8008be2:	e7fd      	b.n	8008be0 <MemManage_Handler+0x50>
 8008be4:	58021000 	.word	0x58021000
 8008be8:	58020400 	.word	0x58020400
 8008bec:	24001ef0 	.word	0x24001ef0
 8008bf0:	0000407c 	.word	0x0000407c
 8008bf4:	00004078 	.word	0x00004078
 8008bf8:	00004080 	.word	0x00004080
 8008bfc:	0801f298 	.word	0x0801f298
 8008c00:	0000406c 	.word	0x0000406c

08008c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008c0e:	4812      	ldr	r0, [pc, #72]	@ (8008c58 <BusFault_Handler+0x54>)
 8008c10:	f005 fefe 	bl	800ea10 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008c14:	2201      	movs	r2, #1
 8008c16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008c1a:	4810      	ldr	r0, [pc, #64]	@ (8008c5c <BusFault_Handler+0x58>)
 8008c1c:	f005 fef8 	bl	800ea10 <HAL_GPIO_WritePin>
	LED_R_1;
 8008c20:	2201      	movs	r2, #1
 8008c22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008c26:	480d      	ldr	r0, [pc, #52]	@ (8008c5c <BusFault_Handler+0x58>)
 8008c28:	f005 fef2 	bl	800ea10 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008c2c:	480c      	ldr	r0, [pc, #48]	@ (8008c60 <BusFault_Handler+0x5c>)
 8008c2e:	f015 fbdb 	bl	801e3e8 <f_close>
	wanted_rool = 0;
 8008c32:	4b0c      	ldr	r3, [pc, #48]	@ (8008c64 <BusFault_Handler+0x60>)
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c68 <BusFault_Handler+0x64>)
 8008c3c:	f04f 0200 	mov.w	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008c42:	4b0a      	ldr	r3, [pc, #40]	@ (8008c6c <BusFault_Handler+0x68>)
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008c4a:	4b09      	ldr	r3, [pc, #36]	@ (8008c70 <BusFault_Handler+0x6c>)
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b21a      	sxth	r2, r3
 8008c50:	4b08      	ldr	r3, [pc, #32]	@ (8008c74 <BusFault_Handler+0x70>)
 8008c52:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008c54:	bf00      	nop
 8008c56:	e7fd      	b.n	8008c54 <BusFault_Handler+0x50>
 8008c58:	58021000 	.word	0x58021000
 8008c5c:	58020400 	.word	0x58020400
 8008c60:	24001ef0 	.word	0x24001ef0
 8008c64:	0000407c 	.word	0x0000407c
 8008c68:	00004078 	.word	0x00004078
 8008c6c:	00004080 	.word	0x00004080
 8008c70:	0801f298 	.word	0x0801f298
 8008c74:	0000406c 	.word	0x0000406c

08008c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008c82:	4812      	ldr	r0, [pc, #72]	@ (8008ccc <UsageFault_Handler+0x54>)
 8008c84:	f005 fec4 	bl	800ea10 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008c8e:	4810      	ldr	r0, [pc, #64]	@ (8008cd0 <UsageFault_Handler+0x58>)
 8008c90:	f005 febe 	bl	800ea10 <HAL_GPIO_WritePin>
	LED_R_1;
 8008c94:	2201      	movs	r2, #1
 8008c96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008c9a:	480d      	ldr	r0, [pc, #52]	@ (8008cd0 <UsageFault_Handler+0x58>)
 8008c9c:	f005 feb8 	bl	800ea10 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008ca0:	480c      	ldr	r0, [pc, #48]	@ (8008cd4 <UsageFault_Handler+0x5c>)
 8008ca2:	f015 fba1 	bl	801e3e8 <f_close>
	wanted_rool = 0;
 8008ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd8 <UsageFault_Handler+0x60>)
 8008ca8:	f04f 0200 	mov.w	r2, #0
 8008cac:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008cae:	4b0b      	ldr	r3, [pc, #44]	@ (8008cdc <UsageFault_Handler+0x64>)
 8008cb0:	f04f 0200 	mov.w	r2, #0
 8008cb4:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce0 <UsageFault_Handler+0x68>)
 8008cb8:	f04f 0200 	mov.w	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008cbe:	4b09      	ldr	r3, [pc, #36]	@ (8008ce4 <UsageFault_Handler+0x6c>)
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	b21a      	sxth	r2, r3
 8008cc4:	4b08      	ldr	r3, [pc, #32]	@ (8008ce8 <UsageFault_Handler+0x70>)
 8008cc6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008cc8:	bf00      	nop
 8008cca:	e7fd      	b.n	8008cc8 <UsageFault_Handler+0x50>
 8008ccc:	58021000 	.word	0x58021000
 8008cd0:	58020400 	.word	0x58020400
 8008cd4:	24001ef0 	.word	0x24001ef0
 8008cd8:	0000407c 	.word	0x0000407c
 8008cdc:	00004078 	.word	0x00004078
 8008ce0:	00004080 	.word	0x00004080
 8008ce4:	0801f298 	.word	0x0801f298
 8008ce8:	0000406c 	.word	0x0000406c

08008cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008cec:	b480      	push	{r7}
 8008cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008cf0:	bf00      	nop
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008cfe:	bf00      	nop
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d0c:	bf00      	nop
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
	...

08008d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8008d1c:	4b08      	ldr	r3, [pc, #32]	@ (8008d40 <SysTick_Handler+0x28>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3301      	adds	r3, #1
 8008d22:	4a07      	ldr	r2, [pc, #28]	@ (8008d40 <SysTick_Handler+0x28>)
 8008d24:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8008d26:	4b06      	ldr	r3, [pc, #24]	@ (8008d40 <SysTick_Handler+0x28>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b09      	cmp	r3, #9
 8008d2c:	d904      	bls.n	8008d38 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 8008d2e:	4b04      	ldr	r3, [pc, #16]	@ (8008d40 <SysTick_Handler+0x28>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8008d34:	f7ff fb98 	bl	8008468 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008d38:	f000 fd0e 	bl	8009758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008d3c:	bf00      	nop
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	24000374 	.word	0x24000374

08008d44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008d48:	4802      	ldr	r0, [pc, #8]	@ (8008d54 <DMA1_Stream0_IRQHandler+0x10>)
 8008d4a:	f004 f975 	bl	800d038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008d4e:	bf00      	nop
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	240002fc 	.word	0x240002fc

08008d58 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8008d5c:	4802      	ldr	r0, [pc, #8]	@ (8008d68 <ADC_IRQHandler+0x10>)
 8008d5e:	f001 fb49 	bl	800a3f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008d62:	bf00      	nop
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	240000ac 	.word	0x240000ac

08008d6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008d70:	4802      	ldr	r0, [pc, #8]	@ (8008d7c <TIM2_IRQHandler+0x10>)
 8008d72:	f00e f960 	bl	8017036 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008d76:	bf00      	nop
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	240003cc 	.word	0x240003cc

08008d80 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008d84:	4802      	ldr	r0, [pc, #8]	@ (8008d90 <SPI2_IRQHandler+0x10>)
 8008d86:	f00d f9cf 	bl	8016128 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008d8a:	bf00      	nop
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	240001ec 	.word	0x240001ec

08008d94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008d98:	4802      	ldr	r0, [pc, #8]	@ (8008da4 <USART1_IRQHandler+0x10>)
 8008d9a:	f00f fda3 	bl	80188e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008d9e:	bf00      	nop
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	240004b0 	.word	0x240004b0

08008da8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8008dac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008db0:	f005 fe47 	bl	800ea42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008db4:	bf00      	nop
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008dbc:	4802      	ldr	r0, [pc, #8]	@ (8008dc8 <DMA2_Stream0_IRQHandler+0x10>)
 8008dbe:	f004 f93b 	bl	800d038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008dc2:	bf00      	nop
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	2400011c 	.word	0x2400011c

08008dcc <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8008dd0:	4802      	ldr	r0, [pc, #8]	@ (8008ddc <SPI6_IRQHandler+0x10>)
 8008dd2:	f00d f9a9 	bl	8016128 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8008dd6:	bf00      	nop
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	24000274 	.word	0x24000274

08008de0 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008de4:	4802      	ldr	r0, [pc, #8]	@ (8008df0 <I2C5_EV_IRQHandler+0x10>)
 8008de6:	f006 fa21 	bl	800f22c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8008dea:	bf00      	nop
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	24000198 	.word	0x24000198

08008df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008df4:	b480      	push	{r7}
 8008df6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008df8:	4b32      	ldr	r3, [pc, #200]	@ (8008ec4 <SystemInit+0xd0>)
 8008dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dfe:	4a31      	ldr	r2, [pc, #196]	@ (8008ec4 <SystemInit+0xd0>)
 8008e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008e08:	4b2f      	ldr	r3, [pc, #188]	@ (8008ec8 <SystemInit+0xd4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 030f 	and.w	r3, r3, #15
 8008e10:	2b06      	cmp	r3, #6
 8008e12:	d807      	bhi.n	8008e24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008e14:	4b2c      	ldr	r3, [pc, #176]	@ (8008ec8 <SystemInit+0xd4>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f023 030f 	bic.w	r3, r3, #15
 8008e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8008ec8 <SystemInit+0xd4>)
 8008e1e:	f043 0307 	orr.w	r3, r3, #7
 8008e22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008e24:	4b29      	ldr	r3, [pc, #164]	@ (8008ecc <SystemInit+0xd8>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a28      	ldr	r2, [pc, #160]	@ (8008ecc <SystemInit+0xd8>)
 8008e2a:	f043 0301 	orr.w	r3, r3, #1
 8008e2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008e30:	4b26      	ldr	r3, [pc, #152]	@ (8008ecc <SystemInit+0xd8>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008e36:	4b25      	ldr	r3, [pc, #148]	@ (8008ecc <SystemInit+0xd8>)
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	4924      	ldr	r1, [pc, #144]	@ (8008ecc <SystemInit+0xd8>)
 8008e3c:	4b24      	ldr	r3, [pc, #144]	@ (8008ed0 <SystemInit+0xdc>)
 8008e3e:	4013      	ands	r3, r2
 8008e40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008e42:	4b21      	ldr	r3, [pc, #132]	@ (8008ec8 <SystemInit+0xd4>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0308 	and.w	r3, r3, #8
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d007      	beq.n	8008e5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ec8 <SystemInit+0xd4>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f023 030f 	bic.w	r3, r3, #15
 8008e56:	4a1c      	ldr	r2, [pc, #112]	@ (8008ec8 <SystemInit+0xd4>)
 8008e58:	f043 0307 	orr.w	r3, r3, #7
 8008e5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8008ecc <SystemInit+0xd8>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008e64:	4b19      	ldr	r3, [pc, #100]	@ (8008ecc <SystemInit+0xd8>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008e6a:	4b18      	ldr	r3, [pc, #96]	@ (8008ecc <SystemInit+0xd8>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008e70:	4b16      	ldr	r3, [pc, #88]	@ (8008ecc <SystemInit+0xd8>)
 8008e72:	4a18      	ldr	r2, [pc, #96]	@ (8008ed4 <SystemInit+0xe0>)
 8008e74:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008e76:	4b15      	ldr	r3, [pc, #84]	@ (8008ecc <SystemInit+0xd8>)
 8008e78:	4a17      	ldr	r2, [pc, #92]	@ (8008ed8 <SystemInit+0xe4>)
 8008e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008e7c:	4b13      	ldr	r3, [pc, #76]	@ (8008ecc <SystemInit+0xd8>)
 8008e7e:	4a17      	ldr	r2, [pc, #92]	@ (8008edc <SystemInit+0xe8>)
 8008e80:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008e82:	4b12      	ldr	r3, [pc, #72]	@ (8008ecc <SystemInit+0xd8>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008e88:	4b10      	ldr	r3, [pc, #64]	@ (8008ecc <SystemInit+0xd8>)
 8008e8a:	4a14      	ldr	r2, [pc, #80]	@ (8008edc <SystemInit+0xe8>)
 8008e8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8008ecc <SystemInit+0xd8>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008e94:	4b0d      	ldr	r3, [pc, #52]	@ (8008ecc <SystemInit+0xd8>)
 8008e96:	4a11      	ldr	r2, [pc, #68]	@ (8008edc <SystemInit+0xe8>)
 8008e98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008ecc <SystemInit+0xd8>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8008ecc <SystemInit+0xd8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a09      	ldr	r2, [pc, #36]	@ (8008ecc <SystemInit+0xd8>)
 8008ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008eaa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008eac:	4b07      	ldr	r3, [pc, #28]	@ (8008ecc <SystemInit+0xd8>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ee0 <SystemInit+0xec>)
 8008eb4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008eb8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008eba:	bf00      	nop
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	e000ed00 	.word	0xe000ed00
 8008ec8:	52002000 	.word	0x52002000
 8008ecc:	58024400 	.word	0x58024400
 8008ed0:	eaf6ed7f 	.word	0xeaf6ed7f
 8008ed4:	02020200 	.word	0x02020200
 8008ed8:	01ff0000 	.word	0x01ff0000
 8008edc:	01010280 	.word	0x01010280
 8008ee0:	52004000 	.word	0x52004000

08008ee4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b098      	sub	sp, #96	@ 0x60
 8008ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008eea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	605a      	str	r2, [r3, #4]
 8008ef4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008ef6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	605a      	str	r2, [r3, #4]
 8008f00:	609a      	str	r2, [r3, #8]
 8008f02:	60da      	str	r2, [r3, #12]
 8008f04:	611a      	str	r2, [r3, #16]
 8008f06:	615a      	str	r2, [r3, #20]
 8008f08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008f0a:	1d3b      	adds	r3, r7, #4
 8008f0c:	2234      	movs	r2, #52	@ 0x34
 8008f0e:	2100      	movs	r1, #0
 8008f10:	4618      	mov	r0, r3
 8008f12:	f015 fc61 	bl	801e7d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008f16:	4b45      	ldr	r3, [pc, #276]	@ (800902c <MX_TIM1_Init+0x148>)
 8008f18:	4a45      	ldr	r2, [pc, #276]	@ (8009030 <MX_TIM1_Init+0x14c>)
 8008f1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8008f1c:	4b43      	ldr	r3, [pc, #268]	@ (800902c <MX_TIM1_Init+0x148>)
 8008f1e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008f22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f24:	4b41      	ldr	r3, [pc, #260]	@ (800902c <MX_TIM1_Init+0x148>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8008f2a:	4b40      	ldr	r3, [pc, #256]	@ (800902c <MX_TIM1_Init+0x148>)
 8008f2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f32:	4b3e      	ldr	r3, [pc, #248]	@ (800902c <MX_TIM1_Init+0x148>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008f38:	4b3c      	ldr	r3, [pc, #240]	@ (800902c <MX_TIM1_Init+0x148>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800902c <MX_TIM1_Init+0x148>)
 8008f40:	2280      	movs	r2, #128	@ 0x80
 8008f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008f44:	4839      	ldr	r0, [pc, #228]	@ (800902c <MX_TIM1_Init+0x148>)
 8008f46:	f00d feab 	bl	8016ca0 <HAL_TIM_PWM_Init>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8008f50:	f7ff f8a6 	bl	80080a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f54:	2300      	movs	r3, #0
 8008f56:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008f60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008f64:	4619      	mov	r1, r3
 8008f66:	4831      	ldr	r0, [pc, #196]	@ (800902c <MX_TIM1_Init+0x148>)
 8008f68:	f00f f9b8 	bl	80182dc <HAL_TIMEx_MasterConfigSynchronization>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008f72:	f7ff f895 	bl	80080a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f76:	2360      	movs	r3, #96	@ 0x60
 8008f78:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008f82:	2300      	movs	r3, #0
 8008f84:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f86:	2300      	movs	r3, #0
 8008f88:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008f92:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008f96:	2204      	movs	r2, #4
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4824      	ldr	r0, [pc, #144]	@ (800902c <MX_TIM1_Init+0x148>)
 8008f9c:	f00e f9ee 	bl	801737c <HAL_TIM_PWM_ConfigChannel>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8008fa6:	f7ff f87b 	bl	80080a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008faa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008fae:	2208      	movs	r2, #8
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	481e      	ldr	r0, [pc, #120]	@ (800902c <MX_TIM1_Init+0x148>)
 8008fb4:	f00e f9e2 	bl	801737c <HAL_TIM_PWM_ConfigChannel>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8008fbe:	f7ff f86f 	bl	80080a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008fc2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008fc6:	220c      	movs	r2, #12
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4818      	ldr	r0, [pc, #96]	@ (800902c <MX_TIM1_Init+0x148>)
 8008fcc:	f00e f9d6 	bl	801737c <HAL_TIM_PWM_ConfigChannel>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008fd6:	f7ff f863 	bl	80080a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008fea:	2300      	movs	r3, #0
 8008fec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008fee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008ff2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008ffc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009000:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009006:	2300      	movs	r3, #0
 8009008:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800900a:	1d3b      	adds	r3, r7, #4
 800900c:	4619      	mov	r1, r3
 800900e:	4807      	ldr	r0, [pc, #28]	@ (800902c <MX_TIM1_Init+0x148>)
 8009010:	f00f fa00 	bl	8018414 <HAL_TIMEx_ConfigBreakDeadTime>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800901a:	f7ff f841 	bl	80080a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800901e:	4803      	ldr	r0, [pc, #12]	@ (800902c <MX_TIM1_Init+0x148>)
 8009020:	f000 f9da 	bl	80093d8 <HAL_TIM_MspPostInit>

}
 8009024:	bf00      	nop
 8009026:	3760      	adds	r7, #96	@ 0x60
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	24000380 	.word	0x24000380
 8009030:	40010000 	.word	0x40010000

08009034 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800903a:	f107 0314 	add.w	r3, r7, #20
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	605a      	str	r2, [r3, #4]
 8009044:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8009046:	1d3b      	adds	r3, r7, #4
 8009048:	2200      	movs	r2, #0
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	605a      	str	r2, [r3, #4]
 800904e:	609a      	str	r2, [r3, #8]
 8009050:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009052:	4b21      	ldr	r3, [pc, #132]	@ (80090d8 <MX_TIM2_Init+0xa4>)
 8009054:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009058:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 800905a:	4b1f      	ldr	r3, [pc, #124]	@ (80090d8 <MX_TIM2_Init+0xa4>)
 800905c:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8009060:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009062:	4b1d      	ldr	r3, [pc, #116]	@ (80090d8 <MX_TIM2_Init+0xa4>)
 8009064:	2200      	movs	r2, #0
 8009066:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8009068:	4b1b      	ldr	r3, [pc, #108]	@ (80090d8 <MX_TIM2_Init+0xa4>)
 800906a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800906e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009070:	4b19      	ldr	r3, [pc, #100]	@ (80090d8 <MX_TIM2_Init+0xa4>)
 8009072:	2200      	movs	r2, #0
 8009074:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009076:	4b18      	ldr	r3, [pc, #96]	@ (80090d8 <MX_TIM2_Init+0xa4>)
 8009078:	2280      	movs	r2, #128	@ 0x80
 800907a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800907c:	4816      	ldr	r0, [pc, #88]	@ (80090d8 <MX_TIM2_Init+0xa4>)
 800907e:	f00d ff83 	bl	8016f88 <HAL_TIM_IC_Init>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8009088:	f7ff f80a 	bl	80080a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800908c:	2300      	movs	r3, #0
 800908e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009090:	2300      	movs	r3, #0
 8009092:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009094:	f107 0314 	add.w	r3, r7, #20
 8009098:	4619      	mov	r1, r3
 800909a:	480f      	ldr	r0, [pc, #60]	@ (80090d8 <MX_TIM2_Init+0xa4>)
 800909c:	f00f f91e 	bl	80182dc <HAL_TIMEx_MasterConfigSynchronization>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80090a6:	f7fe fffb 	bl	80080a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80090aa:	2300      	movs	r3, #0
 80090ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80090ae:	2301      	movs	r3, #1
 80090b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80090b2:	2300      	movs	r3, #0
 80090b4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80090ba:	1d3b      	adds	r3, r7, #4
 80090bc:	2200      	movs	r2, #0
 80090be:	4619      	mov	r1, r3
 80090c0:	4805      	ldr	r0, [pc, #20]	@ (80090d8 <MX_TIM2_Init+0xa4>)
 80090c2:	f00e f8bf 	bl	8017244 <HAL_TIM_IC_ConfigChannel>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80090cc:	f7fe ffe8 	bl	80080a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80090d0:	bf00      	nop
 80090d2:	3720      	adds	r7, #32
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	240003cc 	.word	0x240003cc

080090dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b08a      	sub	sp, #40	@ 0x28
 80090e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80090e2:	f107 031c 	add.w	r3, r7, #28
 80090e6:	2200      	movs	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	605a      	str	r2, [r3, #4]
 80090ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80090ee:	463b      	mov	r3, r7
 80090f0:	2200      	movs	r2, #0
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	605a      	str	r2, [r3, #4]
 80090f6:	609a      	str	r2, [r3, #8]
 80090f8:	60da      	str	r2, [r3, #12]
 80090fa:	611a      	str	r2, [r3, #16]
 80090fc:	615a      	str	r2, [r3, #20]
 80090fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009100:	4b32      	ldr	r3, [pc, #200]	@ (80091cc <MX_TIM3_Init+0xf0>)
 8009102:	4a33      	ldr	r2, [pc, #204]	@ (80091d0 <MX_TIM3_Init+0xf4>)
 8009104:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8009106:	4b31      	ldr	r3, [pc, #196]	@ (80091cc <MX_TIM3_Init+0xf0>)
 8009108:	221c      	movs	r2, #28
 800910a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800910c:	4b2f      	ldr	r3, [pc, #188]	@ (80091cc <MX_TIM3_Init+0xf0>)
 800910e:	2200      	movs	r2, #0
 8009110:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8009112:	4b2e      	ldr	r3, [pc, #184]	@ (80091cc <MX_TIM3_Init+0xf0>)
 8009114:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8009118:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800911a:	4b2c      	ldr	r3, [pc, #176]	@ (80091cc <MX_TIM3_Init+0xf0>)
 800911c:	2200      	movs	r2, #0
 800911e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009120:	4b2a      	ldr	r3, [pc, #168]	@ (80091cc <MX_TIM3_Init+0xf0>)
 8009122:	2200      	movs	r2, #0
 8009124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009126:	4829      	ldr	r0, [pc, #164]	@ (80091cc <MX_TIM3_Init+0xf0>)
 8009128:	f00d fdba 	bl	8016ca0 <HAL_TIM_PWM_Init>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8009132:	f7fe ffb5 	bl	80080a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009136:	2300      	movs	r3, #0
 8009138:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800913a:	2300      	movs	r3, #0
 800913c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800913e:	f107 031c 	add.w	r3, r7, #28
 8009142:	4619      	mov	r1, r3
 8009144:	4821      	ldr	r0, [pc, #132]	@ (80091cc <MX_TIM3_Init+0xf0>)
 8009146:	f00f f8c9 	bl	80182dc <HAL_TIMEx_MasterConfigSynchronization>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8009150:	f7fe ffa6 	bl	80080a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009154:	2360      	movs	r3, #96	@ 0x60
 8009156:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800915c:	2300      	movs	r3, #0
 800915e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009160:	2300      	movs	r3, #0
 8009162:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009164:	463b      	mov	r3, r7
 8009166:	2200      	movs	r2, #0
 8009168:	4619      	mov	r1, r3
 800916a:	4818      	ldr	r0, [pc, #96]	@ (80091cc <MX_TIM3_Init+0xf0>)
 800916c:	f00e f906 	bl	801737c <HAL_TIM_PWM_ConfigChannel>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8009176:	f7fe ff93 	bl	80080a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800917a:	463b      	mov	r3, r7
 800917c:	2204      	movs	r2, #4
 800917e:	4619      	mov	r1, r3
 8009180:	4812      	ldr	r0, [pc, #72]	@ (80091cc <MX_TIM3_Init+0xf0>)
 8009182:	f00e f8fb 	bl	801737c <HAL_TIM_PWM_ConfigChannel>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800918c:	f7fe ff88 	bl	80080a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009190:	463b      	mov	r3, r7
 8009192:	2208      	movs	r2, #8
 8009194:	4619      	mov	r1, r3
 8009196:	480d      	ldr	r0, [pc, #52]	@ (80091cc <MX_TIM3_Init+0xf0>)
 8009198:	f00e f8f0 	bl	801737c <HAL_TIM_PWM_ConfigChannel>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80091a2:	f7fe ff7d 	bl	80080a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80091a6:	463b      	mov	r3, r7
 80091a8:	220c      	movs	r2, #12
 80091aa:	4619      	mov	r1, r3
 80091ac:	4807      	ldr	r0, [pc, #28]	@ (80091cc <MX_TIM3_Init+0xf0>)
 80091ae:	f00e f8e5 	bl	801737c <HAL_TIM_PWM_ConfigChannel>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d001      	beq.n	80091bc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80091b8:	f7fe ff72 	bl	80080a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80091bc:	4803      	ldr	r0, [pc, #12]	@ (80091cc <MX_TIM3_Init+0xf0>)
 80091be:	f000 f90b 	bl	80093d8 <HAL_TIM_MspPostInit>

}
 80091c2:	bf00      	nop
 80091c4:	3728      	adds	r7, #40	@ 0x28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	24000418 	.word	0x24000418
 80091d0:	40000400 	.word	0x40000400

080091d4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80091da:	f107 0310 	add.w	r3, r7, #16
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	605a      	str	r2, [r3, #4]
 80091e4:	609a      	str	r2, [r3, #8]
 80091e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091e8:	1d3b      	adds	r3, r7, #4
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]
 80091ee:	605a      	str	r2, [r3, #4]
 80091f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80091f2:	4b21      	ldr	r3, [pc, #132]	@ (8009278 <MX_TIM8_Init+0xa4>)
 80091f4:	4a21      	ldr	r2, [pc, #132]	@ (800927c <MX_TIM8_Init+0xa8>)
 80091f6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 80091f8:	4b1f      	ldr	r3, [pc, #124]	@ (8009278 <MX_TIM8_Init+0xa4>)
 80091fa:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 80091fe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009200:	4b1d      	ldr	r3, [pc, #116]	@ (8009278 <MX_TIM8_Init+0xa4>)
 8009202:	2200      	movs	r2, #0
 8009204:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8009206:	4b1c      	ldr	r3, [pc, #112]	@ (8009278 <MX_TIM8_Init+0xa4>)
 8009208:	f242 720f 	movw	r2, #9999	@ 0x270f
 800920c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800920e:	4b1a      	ldr	r3, [pc, #104]	@ (8009278 <MX_TIM8_Init+0xa4>)
 8009210:	2200      	movs	r2, #0
 8009212:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009214:	4b18      	ldr	r3, [pc, #96]	@ (8009278 <MX_TIM8_Init+0xa4>)
 8009216:	2200      	movs	r2, #0
 8009218:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800921a:	4b17      	ldr	r3, [pc, #92]	@ (8009278 <MX_TIM8_Init+0xa4>)
 800921c:	2200      	movs	r2, #0
 800921e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009220:	4815      	ldr	r0, [pc, #84]	@ (8009278 <MX_TIM8_Init+0xa4>)
 8009222:	f00d fbe2 	bl	80169ea <HAL_TIM_Base_Init>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 800922c:	f7fe ff38 	bl	80080a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009234:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009236:	f107 0310 	add.w	r3, r7, #16
 800923a:	4619      	mov	r1, r3
 800923c:	480e      	ldr	r0, [pc, #56]	@ (8009278 <MX_TIM8_Init+0xa4>)
 800923e:	f00e f9b1 	bl	80175a4 <HAL_TIM_ConfigClockSource>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8009248:	f7fe ff2a 	bl	80080a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800924c:	2320      	movs	r3, #32
 800924e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8009250:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009254:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009256:	2300      	movs	r3, #0
 8009258:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800925a:	1d3b      	adds	r3, r7, #4
 800925c:	4619      	mov	r1, r3
 800925e:	4806      	ldr	r0, [pc, #24]	@ (8009278 <MX_TIM8_Init+0xa4>)
 8009260:	f00f f83c 	bl	80182dc <HAL_TIMEx_MasterConfigSynchronization>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800926a:	f7fe ff19 	bl	80080a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800926e:	bf00      	nop
 8009270:	3720      	adds	r7, #32
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	24000464 	.word	0x24000464
 800927c:	40010400 	.word	0x40010400

08009280 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a16      	ldr	r2, [pc, #88]	@ (80092e8 <HAL_TIM_PWM_MspInit+0x68>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d10f      	bne.n	80092b2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009292:	4b16      	ldr	r3, [pc, #88]	@ (80092ec <HAL_TIM_PWM_MspInit+0x6c>)
 8009294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009298:	4a14      	ldr	r2, [pc, #80]	@ (80092ec <HAL_TIM_PWM_MspInit+0x6c>)
 800929a:	f043 0301 	orr.w	r3, r3, #1
 800929e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80092a2:	4b12      	ldr	r3, [pc, #72]	@ (80092ec <HAL_TIM_PWM_MspInit+0x6c>)
 80092a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80092b0:	e013      	b.n	80092da <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a0e      	ldr	r2, [pc, #56]	@ (80092f0 <HAL_TIM_PWM_MspInit+0x70>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d10e      	bne.n	80092da <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80092bc:	4b0b      	ldr	r3, [pc, #44]	@ (80092ec <HAL_TIM_PWM_MspInit+0x6c>)
 80092be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092c2:	4a0a      	ldr	r2, [pc, #40]	@ (80092ec <HAL_TIM_PWM_MspInit+0x6c>)
 80092c4:	f043 0302 	orr.w	r3, r3, #2
 80092c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80092cc:	4b07      	ldr	r3, [pc, #28]	@ (80092ec <HAL_TIM_PWM_MspInit+0x6c>)
 80092ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	60bb      	str	r3, [r7, #8]
 80092d8:	68bb      	ldr	r3, [r7, #8]
}
 80092da:	bf00      	nop
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	40010000 	.word	0x40010000
 80092ec:	58024400 	.word	0x58024400
 80092f0:	40000400 	.word	0x40000400

080092f4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08a      	sub	sp, #40	@ 0x28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092fc:	f107 0314 	add.w	r3, r7, #20
 8009300:	2200      	movs	r2, #0
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	605a      	str	r2, [r3, #4]
 8009306:	609a      	str	r2, [r3, #8]
 8009308:	60da      	str	r2, [r3, #12]
 800930a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009314:	d135      	bne.n	8009382 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009316:	4b1d      	ldr	r3, [pc, #116]	@ (800938c <HAL_TIM_IC_MspInit+0x98>)
 8009318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800931c:	4a1b      	ldr	r2, [pc, #108]	@ (800938c <HAL_TIM_IC_MspInit+0x98>)
 800931e:	f043 0301 	orr.w	r3, r3, #1
 8009322:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009326:	4b19      	ldr	r3, [pc, #100]	@ (800938c <HAL_TIM_IC_MspInit+0x98>)
 8009328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	613b      	str	r3, [r7, #16]
 8009332:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009334:	4b15      	ldr	r3, [pc, #84]	@ (800938c <HAL_TIM_IC_MspInit+0x98>)
 8009336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800933a:	4a14      	ldr	r2, [pc, #80]	@ (800938c <HAL_TIM_IC_MspInit+0x98>)
 800933c:	f043 0301 	orr.w	r3, r3, #1
 8009340:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009344:	4b11      	ldr	r3, [pc, #68]	@ (800938c <HAL_TIM_IC_MspInit+0x98>)
 8009346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009352:	2301      	movs	r3, #1
 8009354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009356:	2302      	movs	r3, #2
 8009358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800935a:	2300      	movs	r3, #0
 800935c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800935e:	2300      	movs	r3, #0
 8009360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009362:	2301      	movs	r3, #1
 8009364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009366:	f107 0314 	add.w	r3, r7, #20
 800936a:	4619      	mov	r1, r3
 800936c:	4808      	ldr	r0, [pc, #32]	@ (8009390 <HAL_TIM_IC_MspInit+0x9c>)
 800936e:	f005 f98f 	bl	800e690 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8009372:	2200      	movs	r2, #0
 8009374:	2101      	movs	r1, #1
 8009376:	201c      	movs	r0, #28
 8009378:	f002 fa8b 	bl	800b892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800937c:	201c      	movs	r0, #28
 800937e:	f002 faa2 	bl	800b8c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8009382:	bf00      	nop
 8009384:	3728      	adds	r7, #40	@ 0x28
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	58024400 	.word	0x58024400
 8009390:	58020000 	.word	0x58020000

08009394 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a0b      	ldr	r2, [pc, #44]	@ (80093d0 <HAL_TIM_Base_MspInit+0x3c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d10e      	bne.n	80093c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80093a6:	4b0b      	ldr	r3, [pc, #44]	@ (80093d4 <HAL_TIM_Base_MspInit+0x40>)
 80093a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093ac:	4a09      	ldr	r2, [pc, #36]	@ (80093d4 <HAL_TIM_Base_MspInit+0x40>)
 80093ae:	f043 0302 	orr.w	r3, r3, #2
 80093b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80093b6:	4b07      	ldr	r3, [pc, #28]	@ (80093d4 <HAL_TIM_Base_MspInit+0x40>)
 80093b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093bc:	f003 0302 	and.w	r3, r3, #2
 80093c0:	60fb      	str	r3, [r7, #12]
 80093c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80093c4:	bf00      	nop
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	40010400 	.word	0x40010400
 80093d4:	58024400 	.word	0x58024400

080093d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08a      	sub	sp, #40	@ 0x28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093e0:	f107 0314 	add.w	r3, r7, #20
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	605a      	str	r2, [r3, #4]
 80093ea:	609a      	str	r2, [r3, #8]
 80093ec:	60da      	str	r2, [r3, #12]
 80093ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a26      	ldr	r2, [pc, #152]	@ (8009490 <HAL_TIM_MspPostInit+0xb8>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d120      	bne.n	800943c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80093fa:	4b26      	ldr	r3, [pc, #152]	@ (8009494 <HAL_TIM_MspPostInit+0xbc>)
 80093fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009400:	4a24      	ldr	r2, [pc, #144]	@ (8009494 <HAL_TIM_MspPostInit+0xbc>)
 8009402:	f043 0310 	orr.w	r3, r3, #16
 8009406:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800940a:	4b22      	ldr	r3, [pc, #136]	@ (8009494 <HAL_TIM_MspPostInit+0xbc>)
 800940c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009410:	f003 0310 	and.w	r3, r3, #16
 8009414:	613b      	str	r3, [r7, #16]
 8009416:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8009418:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800941c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800941e:	2302      	movs	r3, #2
 8009420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009422:	2300      	movs	r3, #0
 8009424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009426:	2300      	movs	r3, #0
 8009428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800942a:	2301      	movs	r3, #1
 800942c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800942e:	f107 0314 	add.w	r3, r7, #20
 8009432:	4619      	mov	r1, r3
 8009434:	4818      	ldr	r0, [pc, #96]	@ (8009498 <HAL_TIM_MspPostInit+0xc0>)
 8009436:	f005 f92b 	bl	800e690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800943a:	e024      	b.n	8009486 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a16      	ldr	r2, [pc, #88]	@ (800949c <HAL_TIM_MspPostInit+0xc4>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d11f      	bne.n	8009486 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009446:	4b13      	ldr	r3, [pc, #76]	@ (8009494 <HAL_TIM_MspPostInit+0xbc>)
 8009448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800944c:	4a11      	ldr	r2, [pc, #68]	@ (8009494 <HAL_TIM_MspPostInit+0xbc>)
 800944e:	f043 0304 	orr.w	r3, r3, #4
 8009452:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009456:	4b0f      	ldr	r3, [pc, #60]	@ (8009494 <HAL_TIM_MspPostInit+0xbc>)
 8009458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	60fb      	str	r3, [r7, #12]
 8009462:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8009464:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8009468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800946a:	2302      	movs	r3, #2
 800946c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800946e:	2300      	movs	r3, #0
 8009470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009472:	2300      	movs	r3, #0
 8009474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009476:	2302      	movs	r3, #2
 8009478:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800947a:	f107 0314 	add.w	r3, r7, #20
 800947e:	4619      	mov	r1, r3
 8009480:	4807      	ldr	r0, [pc, #28]	@ (80094a0 <HAL_TIM_MspPostInit+0xc8>)
 8009482:	f005 f905 	bl	800e690 <HAL_GPIO_Init>
}
 8009486:	bf00      	nop
 8009488:	3728      	adds	r7, #40	@ 0x28
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	40010000 	.word	0x40010000
 8009494:	58024400 	.word	0x58024400
 8009498:	58021000 	.word	0x58021000
 800949c:	40000400 	.word	0x40000400
 80094a0:	58020800 	.word	0x58020800

080094a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80094a8:	4b22      	ldr	r3, [pc, #136]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 80094aa:	4a23      	ldr	r2, [pc, #140]	@ (8009538 <MX_USART1_UART_Init+0x94>)
 80094ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80094ae:	4b21      	ldr	r3, [pc, #132]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 80094b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80094b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80094b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80094bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 80094be:	2200      	movs	r2, #0
 80094c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80094c2:	4b1c      	ldr	r3, [pc, #112]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80094c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 80094ca:	220c      	movs	r2, #12
 80094cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80094ce:	4b19      	ldr	r3, [pc, #100]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80094d4:	4b17      	ldr	r3, [pc, #92]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80094da:	4b16      	ldr	r3, [pc, #88]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 80094dc:	2200      	movs	r2, #0
 80094de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80094e0:	4b14      	ldr	r3, [pc, #80]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80094e6:	4b13      	ldr	r3, [pc, #76]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80094ec:	4811      	ldr	r0, [pc, #68]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 80094ee:	f00f f83b 	bl	8018568 <HAL_UART_Init>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80094f8:	f7fe fdd2 	bl	80080a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80094fc:	2100      	movs	r1, #0
 80094fe:	480d      	ldr	r0, [pc, #52]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 8009500:	f011 feeb 	bl	801b2da <HAL_UARTEx_SetTxFifoThreshold>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800950a:	f7fe fdc9 	bl	80080a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800950e:	2100      	movs	r1, #0
 8009510:	4808      	ldr	r0, [pc, #32]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 8009512:	f011 ff20 	bl	801b356 <HAL_UARTEx_SetRxFifoThreshold>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800951c:	f7fe fdc0 	bl	80080a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8009520:	4804      	ldr	r0, [pc, #16]	@ (8009534 <MX_USART1_UART_Init+0x90>)
 8009522:	f011 fea1 	bl	801b268 <HAL_UARTEx_DisableFifoMode>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800952c:	f7fe fdb8 	bl	80080a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009530:	bf00      	nop
 8009532:	bd80      	pop	{r7, pc}
 8009534:	240004b0 	.word	0x240004b0
 8009538:	40011000 	.word	0x40011000

0800953c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b0b8      	sub	sp, #224	@ 0xe0
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009544:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	605a      	str	r2, [r3, #4]
 800954e:	609a      	str	r2, [r3, #8]
 8009550:	60da      	str	r2, [r3, #12]
 8009552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009554:	f107 0310 	add.w	r3, r7, #16
 8009558:	22b8      	movs	r2, #184	@ 0xb8
 800955a:	2100      	movs	r1, #0
 800955c:	4618      	mov	r0, r3
 800955e:	f015 f93b 	bl	801e7d8 <memset>
  if(uartHandle->Instance==USART1)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a2b      	ldr	r2, [pc, #172]	@ (8009614 <HAL_UART_MspInit+0xd8>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d14e      	bne.n	800960a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800956c:	f04f 0201 	mov.w	r2, #1
 8009570:	f04f 0300 	mov.w	r3, #0
 8009574:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8009578:	2300      	movs	r3, #0
 800957a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800957e:	f107 0310 	add.w	r3, r7, #16
 8009582:	4618      	mov	r0, r3
 8009584:	f008 fe96 	bl	80122b4 <HAL_RCCEx_PeriphCLKConfig>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800958e:	f7fe fd87 	bl	80080a0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009592:	4b21      	ldr	r3, [pc, #132]	@ (8009618 <HAL_UART_MspInit+0xdc>)
 8009594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009598:	4a1f      	ldr	r2, [pc, #124]	@ (8009618 <HAL_UART_MspInit+0xdc>)
 800959a:	f043 0310 	orr.w	r3, r3, #16
 800959e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80095a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009618 <HAL_UART_MspInit+0xdc>)
 80095a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095a8:	f003 0310 	and.w	r3, r3, #16
 80095ac:	60fb      	str	r3, [r7, #12]
 80095ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095b0:	4b19      	ldr	r3, [pc, #100]	@ (8009618 <HAL_UART_MspInit+0xdc>)
 80095b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095b6:	4a18      	ldr	r2, [pc, #96]	@ (8009618 <HAL_UART_MspInit+0xdc>)
 80095b8:	f043 0301 	orr.w	r3, r3, #1
 80095bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80095c0:	4b15      	ldr	r3, [pc, #84]	@ (8009618 <HAL_UART_MspInit+0xdc>)
 80095c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	60bb      	str	r3, [r7, #8]
 80095cc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80095ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80095d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095d6:	2302      	movs	r3, #2
 80095d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095dc:	2300      	movs	r3, #0
 80095de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095e2:	2300      	movs	r3, #0
 80095e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80095e8:	2307      	movs	r3, #7
 80095ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095ee:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80095f2:	4619      	mov	r1, r3
 80095f4:	4809      	ldr	r0, [pc, #36]	@ (800961c <HAL_UART_MspInit+0xe0>)
 80095f6:	f005 f84b 	bl	800e690 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80095fa:	2200      	movs	r2, #0
 80095fc:	2100      	movs	r1, #0
 80095fe:	2025      	movs	r0, #37	@ 0x25
 8009600:	f002 f947 	bl	800b892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009604:	2025      	movs	r0, #37	@ 0x25
 8009606:	f002 f95e 	bl	800b8c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800960a:	bf00      	nop
 800960c:	37e0      	adds	r7, #224	@ 0xe0
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	40011000 	.word	0x40011000
 8009618:	58024400 	.word	0x58024400
 800961c:	58020000 	.word	0x58020000

08009620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009658 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009624:	f7ff fbe6 	bl	8008df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009628:	480c      	ldr	r0, [pc, #48]	@ (800965c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800962a:	490d      	ldr	r1, [pc, #52]	@ (8009660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800962c:	4a0d      	ldr	r2, [pc, #52]	@ (8009664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800962e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009630:	e002      	b.n	8009638 <LoopCopyDataInit>

08009632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009636:	3304      	adds	r3, #4

08009638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800963a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800963c:	d3f9      	bcc.n	8009632 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800963e:	4a0a      	ldr	r2, [pc, #40]	@ (8009668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009640:	4c0a      	ldr	r4, [pc, #40]	@ (800966c <LoopFillZerobss+0x22>)
  movs r3, #0
 8009642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009644:	e001      	b.n	800964a <LoopFillZerobss>

08009646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009648:	3204      	adds	r2, #4

0800964a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800964a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800964c:	d3fb      	bcc.n	8009646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800964e:	f015 f8d1 	bl	801e7f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009652:	f7fb fd49 	bl	80050e8 <main>
  bx  lr
 8009656:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009658:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800965c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009660:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8009664:	08021058 	.word	0x08021058
  ldr r2, =_sbss
 8009668:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800966c:	240008ac 	.word	0x240008ac

08009670 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009670:	e7fe      	b.n	8009670 <ADC3_IRQHandler>
	...

08009674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800967a:	2003      	movs	r0, #3
 800967c:	f002 f8fe 	bl	800b87c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009680:	f008 fc42 	bl	8011f08 <HAL_RCC_GetSysClockFreq>
 8009684:	4602      	mov	r2, r0
 8009686:	4b15      	ldr	r3, [pc, #84]	@ (80096dc <HAL_Init+0x68>)
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	0a1b      	lsrs	r3, r3, #8
 800968c:	f003 030f 	and.w	r3, r3, #15
 8009690:	4913      	ldr	r1, [pc, #76]	@ (80096e0 <HAL_Init+0x6c>)
 8009692:	5ccb      	ldrb	r3, [r1, r3]
 8009694:	f003 031f 	and.w	r3, r3, #31
 8009698:	fa22 f303 	lsr.w	r3, r2, r3
 800969c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800969e:	4b0f      	ldr	r3, [pc, #60]	@ (80096dc <HAL_Init+0x68>)
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	f003 030f 	and.w	r3, r3, #15
 80096a6:	4a0e      	ldr	r2, [pc, #56]	@ (80096e0 <HAL_Init+0x6c>)
 80096a8:	5cd3      	ldrb	r3, [r2, r3]
 80096aa:	f003 031f 	and.w	r3, r3, #31
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	fa22 f303 	lsr.w	r3, r2, r3
 80096b4:	4a0b      	ldr	r2, [pc, #44]	@ (80096e4 <HAL_Init+0x70>)
 80096b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80096b8:	4a0b      	ldr	r2, [pc, #44]	@ (80096e8 <HAL_Init+0x74>)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80096be:	200f      	movs	r0, #15
 80096c0:	f000 f814 	bl	80096ec <HAL_InitTick>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e002      	b.n	80096d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80096ce:	f7fe feb1 	bl	8008434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	58024400 	.word	0x58024400
 80096e0:	0801f29c 	.word	0x0801f29c
 80096e4:	24000008 	.word	0x24000008
 80096e8:	24000004 	.word	0x24000004

080096ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80096f4:	4b15      	ldr	r3, [pc, #84]	@ (800974c <HAL_InitTick+0x60>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d101      	bne.n	8009700 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e021      	b.n	8009744 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8009700:	4b13      	ldr	r3, [pc, #76]	@ (8009750 <HAL_InitTick+0x64>)
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	4b11      	ldr	r3, [pc, #68]	@ (800974c <HAL_InitTick+0x60>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	4619      	mov	r1, r3
 800970a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800970e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009712:	fbb2 f3f3 	udiv	r3, r2, r3
 8009716:	4618      	mov	r0, r3
 8009718:	f002 f8e3 	bl	800b8e2 <HAL_SYSTICK_Config>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e00e      	b.n	8009744 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b0f      	cmp	r3, #15
 800972a:	d80a      	bhi.n	8009742 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800972c:	2200      	movs	r2, #0
 800972e:	6879      	ldr	r1, [r7, #4]
 8009730:	f04f 30ff 	mov.w	r0, #4294967295
 8009734:	f002 f8ad 	bl	800b892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009738:	4a06      	ldr	r2, [pc, #24]	@ (8009754 <HAL_InitTick+0x68>)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	e000      	b.n	8009744 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	24000010 	.word	0x24000010
 8009750:	24000004 	.word	0x24000004
 8009754:	2400000c 	.word	0x2400000c

08009758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009758:	b480      	push	{r7}
 800975a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800975c:	4b06      	ldr	r3, [pc, #24]	@ (8009778 <HAL_IncTick+0x20>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	461a      	mov	r2, r3
 8009762:	4b06      	ldr	r3, [pc, #24]	@ (800977c <HAL_IncTick+0x24>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4413      	add	r3, r2
 8009768:	4a04      	ldr	r2, [pc, #16]	@ (800977c <HAL_IncTick+0x24>)
 800976a:	6013      	str	r3, [r2, #0]
}
 800976c:	bf00      	nop
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	24000010 	.word	0x24000010
 800977c:	24000544 	.word	0x24000544

08009780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009780:	b480      	push	{r7}
 8009782:	af00      	add	r7, sp, #0
  return uwTick;
 8009784:	4b03      	ldr	r3, [pc, #12]	@ (8009794 <HAL_GetTick+0x14>)
 8009786:	681b      	ldr	r3, [r3, #0]
}
 8009788:	4618      	mov	r0, r3
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	24000544 	.word	0x24000544

08009798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80097a0:	f7ff ffee 	bl	8009780 <HAL_GetTick>
 80097a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b0:	d005      	beq.n	80097be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80097b2:	4b0a      	ldr	r3, [pc, #40]	@ (80097dc <HAL_Delay+0x44>)
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	461a      	mov	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4413      	add	r3, r2
 80097bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80097be:	bf00      	nop
 80097c0:	f7ff ffde 	bl	8009780 <HAL_GetTick>
 80097c4:	4602      	mov	r2, r0
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d8f7      	bhi.n	80097c0 <HAL_Delay+0x28>
  {
  }
}
 80097d0:	bf00      	nop
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	24000010 	.word	0x24000010

080097e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	431a      	orrs	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	609a      	str	r2, [r3, #8]
}
 80097fa:	bf00      	nop
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009806:	b480      	push	{r7}
 8009808:	b083      	sub	sp, #12
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	431a      	orrs	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	609a      	str	r2, [r3, #8]
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800983c:	4618      	mov	r0, r3
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a18      	ldr	r2, [pc, #96]	@ (80098b8 <LL_ADC_SetChannelPreselection+0x70>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d027      	beq.n	80098aa <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009860:	2b00      	cmp	r3, #0
 8009862:	d107      	bne.n	8009874 <LL_ADC_SetChannelPreselection+0x2c>
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	0e9b      	lsrs	r3, r3, #26
 8009868:	f003 031f 	and.w	r3, r3, #31
 800986c:	2201      	movs	r2, #1
 800986e:	fa02 f303 	lsl.w	r3, r2, r3
 8009872:	e015      	b.n	80098a0 <LL_ADC_SetChannelPreselection+0x58>
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	fa93 f3a3 	rbit	r3, r3
 800987e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 800988a:	2320      	movs	r3, #32
 800988c:	e003      	b.n	8009896 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	fab3 f383 	clz	r3, r3
 8009894:	b2db      	uxtb	r3, r3
 8009896:	f003 031f 	and.w	r3, r3, #31
 800989a:	2201      	movs	r2, #1
 800989c:	fa02 f303 	lsl.w	r3, r2, r3
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	69d2      	ldr	r2, [r2, #28]
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80098aa:	bf00      	nop
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	58026000 	.word	0x58026000

080098bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3360      	adds	r3, #96	@ 0x60
 80098ce:	461a      	mov	r2, r3
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4a10      	ldr	r2, [pc, #64]	@ (800991c <LL_ADC_SetOffset+0x60>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d10b      	bne.n	80098f8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80098f6:	e00b      	b.n	8009910 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	430b      	orrs	r3, r1
 800990a:	431a      	orrs	r2, r3
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	601a      	str	r2, [r3, #0]
}
 8009910:	bf00      	nop
 8009912:	371c      	adds	r7, #28
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	58026000 	.word	0x58026000

08009920 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	3360      	adds	r3, #96	@ 0x60
 800992e:	461a      	mov	r2, r3
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009940:	4618      	mov	r0, r3
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	f003 031f 	and.w	r3, r3, #31
 8009966:	6879      	ldr	r1, [r7, #4]
 8009968:	fa01 f303 	lsl.w	r3, r1, r3
 800996c:	431a      	orrs	r2, r3
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	611a      	str	r2, [r3, #16]
}
 8009972:	bf00      	nop
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
	...

08009980 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4a0c      	ldr	r2, [pc, #48]	@ (80099c0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d00e      	beq.n	80099b2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	3360      	adds	r3, #96	@ 0x60
 8009998:	461a      	mov	r2, r3
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	431a      	orrs	r2, r3
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	601a      	str	r2, [r3, #0]
  }
}
 80099b2:	bf00      	nop
 80099b4:	371c      	adds	r7, #28
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	58026000 	.word	0x58026000

080099c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009a04 <LL_ADC_SetOffsetSaturation+0x40>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d10e      	bne.n	80099f6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	3360      	adds	r3, #96	@ 0x60
 80099dc:	461a      	mov	r2, r3
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	431a      	orrs	r2, r3
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80099f6:	bf00      	nop
 80099f8:	371c      	adds	r7, #28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	58026000 	.word	0x58026000

08009a08 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b087      	sub	sp, #28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	4a0c      	ldr	r2, [pc, #48]	@ (8009a48 <LL_ADC_SetOffsetSign+0x40>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d10e      	bne.n	8009a3a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	3360      	adds	r3, #96	@ 0x60
 8009a20:	461a      	mov	r2, r3
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	431a      	orrs	r2, r3
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8009a3a:	bf00      	nop
 8009a3c:	371c      	adds	r7, #28
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	58026000 	.word	0x58026000

08009a4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b087      	sub	sp, #28
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3360      	adds	r3, #96	@ 0x60
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	4a0c      	ldr	r2, [pc, #48]	@ (8009a9c <LL_ADC_SetOffsetState+0x50>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d108      	bne.n	8009a80 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8009a7e:	e007      	b.n	8009a90 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	601a      	str	r2, [r3, #0]
}
 8009a90:	bf00      	nop
 8009a92:	371c      	adds	r7, #28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	58026000 	.word	0x58026000

08009aa0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e000      	b.n	8009aba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b087      	sub	sp, #28
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	60f8      	str	r0, [r7, #12]
 8009ace:	60b9      	str	r1, [r7, #8]
 8009ad0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3330      	adds	r3, #48	@ 0x30
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	0a1b      	lsrs	r3, r3, #8
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	f003 030c 	and.w	r3, r3, #12
 8009ae2:	4413      	add	r3, r2
 8009ae4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f003 031f 	and.w	r3, r3, #31
 8009af0:	211f      	movs	r1, #31
 8009af2:	fa01 f303 	lsl.w	r3, r1, r3
 8009af6:	43db      	mvns	r3, r3
 8009af8:	401a      	ands	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	0e9b      	lsrs	r3, r3, #26
 8009afe:	f003 011f 	and.w	r1, r3, #31
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	f003 031f 	and.w	r3, r3, #31
 8009b08:	fa01 f303 	lsl.w	r3, r1, r3
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009b12:	bf00      	nop
 8009b14:	371c      	adds	r7, #28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b083      	sub	sp, #12
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	f023 0203 	bic.w	r2, r3, #3
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	431a      	orrs	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	60da      	str	r2, [r3, #12]
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	f043 0201 	orr.w	r2, r3, #1
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	60da      	str	r2, [r3, #12]
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a08      	ldr	r2, [pc, #32]	@ (8009b94 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d107      	bne.n	8009b86 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	f023 0203 	bic.w	r2, r3, #3
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	431a      	orrs	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	60da      	str	r2, [r3, #12]
  }
}
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	58026000 	.word	0x58026000

08009b98 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ba4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d101      	bne.n	8009bb0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8009bac:	2301      	movs	r3, #1
 8009bae:	e000      	b.n	8009bb2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr

08009bbe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009bbe:	b480      	push	{r7}
 8009bc0:	b087      	sub	sp, #28
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	60f8      	str	r0, [r7, #12]
 8009bc6:	60b9      	str	r1, [r7, #8]
 8009bc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3314      	adds	r3, #20
 8009bce:	461a      	mov	r2, r3
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	0e5b      	lsrs	r3, r3, #25
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	f003 0304 	and.w	r3, r3, #4
 8009bda:	4413      	add	r3, r2
 8009bdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	0d1b      	lsrs	r3, r3, #20
 8009be6:	f003 031f 	and.w	r3, r3, #31
 8009bea:	2107      	movs	r1, #7
 8009bec:	fa01 f303 	lsl.w	r3, r1, r3
 8009bf0:	43db      	mvns	r3, r3
 8009bf2:	401a      	ands	r2, r3
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	0d1b      	lsrs	r3, r3, #20
 8009bf8:	f003 031f 	and.w	r3, r3, #31
 8009bfc:	6879      	ldr	r1, [r7, #4]
 8009bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8009c02:	431a      	orrs	r2, r3
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009c08:	bf00      	nop
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4a1a      	ldr	r2, [pc, #104]	@ (8009c8c <LL_ADC_SetChannelSingleDiff+0x78>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d115      	bne.n	8009c54 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c34:	43db      	mvns	r3, r3
 8009c36:	401a      	ands	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f003 0318 	and.w	r3, r3, #24
 8009c3e:	4914      	ldr	r1, [pc, #80]	@ (8009c90 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009c40:	40d9      	lsrs	r1, r3
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	400b      	ands	r3, r1
 8009c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8009c52:	e014      	b.n	8009c7e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c60:	43db      	mvns	r3, r3
 8009c62:	401a      	ands	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f003 0318 	and.w	r3, r3, #24
 8009c6a:	4909      	ldr	r1, [pc, #36]	@ (8009c90 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009c6c:	40d9      	lsrs	r1, r3
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	400b      	ands	r3, r1
 8009c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c76:	431a      	orrs	r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8009c7e:	bf00      	nop
 8009c80:	3714      	adds	r7, #20
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	58026000 	.word	0x58026000
 8009c90:	000fffff 	.word	0x000fffff

08009c94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f003 031f 	and.w	r3, r3, #31
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	689a      	ldr	r2, [r3, #8]
 8009cd8:	4b04      	ldr	r3, [pc, #16]	@ (8009cec <LL_ADC_DisableDeepPowerDown+0x20>)
 8009cda:	4013      	ands	r3, r2
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	6093      	str	r3, [r2, #8]
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	5fffffc0 	.word	0x5fffffc0

08009cf0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d04:	d101      	bne.n	8009d0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009d06:	2301      	movs	r3, #1
 8009d08:	e000      	b.n	8009d0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	4b05      	ldr	r3, [pc, #20]	@ (8009d3c <LL_ADC_EnableInternalRegulator+0x24>)
 8009d26:	4013      	ands	r3, r2
 8009d28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	6fffffc0 	.word	0x6fffffc0

08009d40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d54:	d101      	bne.n	8009d5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009d56:	2301      	movs	r3, #1
 8009d58:	e000      	b.n	8009d5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	689a      	ldr	r2, [r3, #8]
 8009d74:	4b05      	ldr	r3, [pc, #20]	@ (8009d8c <LL_ADC_Enable+0x24>)
 8009d76:	4013      	ands	r3, r2
 8009d78:	f043 0201 	orr.w	r2, r3, #1
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	7fffffc0 	.word	0x7fffffc0

08009d90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d101      	bne.n	8009da8 <LL_ADC_IsEnabled+0x18>
 8009da4:	2301      	movs	r3, #1
 8009da6:	e000      	b.n	8009daa <LL_ADC_IsEnabled+0x1a>
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
	...

08009db8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689a      	ldr	r2, [r3, #8]
 8009dc4:	4b05      	ldr	r3, [pc, #20]	@ (8009ddc <LL_ADC_REG_StartConversion+0x24>)
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	f043 0204 	orr.w	r2, r3, #4
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	7fffffc0 	.word	0x7fffffc0

08009de0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f003 0304 	and.w	r3, r3, #4
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d101      	bne.n	8009df8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009df4:	2301      	movs	r3, #1
 8009df6:	e000      	b.n	8009dfa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009e06:	b480      	push	{r7}
 8009e08:	b083      	sub	sp, #12
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	f003 0308 	and.w	r3, r3, #8
 8009e16:	2b08      	cmp	r3, #8
 8009e18:	d101      	bne.n	8009e1e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e000      	b.n	8009e20 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009e2c:	b590      	push	{r4, r7, lr}
 8009e2e:	b089      	sub	sp, #36	@ 0x24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e1ee      	b.n	800a224 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d109      	bne.n	8009e68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7f9 fcb3 	bl	80037c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff ff3f 	bl	8009cf0 <LL_ADC_IsDeepPowerDownEnabled>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d004      	beq.n	8009e82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7ff ff25 	bl	8009ccc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7ff ff5a 	bl	8009d40 <LL_ADC_IsInternalRegulatorEnabled>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d114      	bne.n	8009ebc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff ff3e 	bl	8009d18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009e9c:	4b8e      	ldr	r3, [pc, #568]	@ (800a0d8 <HAL_ADC_Init+0x2ac>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	099b      	lsrs	r3, r3, #6
 8009ea2:	4a8e      	ldr	r2, [pc, #568]	@ (800a0dc <HAL_ADC_Init+0x2b0>)
 8009ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea8:	099b      	lsrs	r3, r3, #6
 8009eaa:	3301      	adds	r3, #1
 8009eac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009eae:	e002      	b.n	8009eb6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1f9      	bne.n	8009eb0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7ff ff3d 	bl	8009d40 <LL_ADC_IsInternalRegulatorEnabled>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10d      	bne.n	8009ee8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ed0:	f043 0210 	orr.w	r2, r3, #16
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009edc:	f043 0201 	orr.w	r2, r3, #1
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7ff ff77 	bl	8009de0 <LL_ADC_REG_IsConversionOngoing>
 8009ef2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ef8:	f003 0310 	and.w	r3, r3, #16
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f040 8188 	bne.w	800a212 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f040 8184 	bne.w	800a212 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f0e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009f12:	f043 0202 	orr.w	r2, r3, #2
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff ff36 	bl	8009d90 <LL_ADC_IsEnabled>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d136      	bne.n	8009f98 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a6c      	ldr	r2, [pc, #432]	@ (800a0e0 <HAL_ADC_Init+0x2b4>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d004      	beq.n	8009f3e <HAL_ADC_Init+0x112>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a6a      	ldr	r2, [pc, #424]	@ (800a0e4 <HAL_ADC_Init+0x2b8>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d10e      	bne.n	8009f5c <HAL_ADC_Init+0x130>
 8009f3e:	4868      	ldr	r0, [pc, #416]	@ (800a0e0 <HAL_ADC_Init+0x2b4>)
 8009f40:	f7ff ff26 	bl	8009d90 <LL_ADC_IsEnabled>
 8009f44:	4604      	mov	r4, r0
 8009f46:	4867      	ldr	r0, [pc, #412]	@ (800a0e4 <HAL_ADC_Init+0x2b8>)
 8009f48:	f7ff ff22 	bl	8009d90 <LL_ADC_IsEnabled>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	4323      	orrs	r3, r4
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	bf0c      	ite	eq
 8009f54:	2301      	moveq	r3, #1
 8009f56:	2300      	movne	r3, #0
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	e008      	b.n	8009f6e <HAL_ADC_Init+0x142>
 8009f5c:	4862      	ldr	r0, [pc, #392]	@ (800a0e8 <HAL_ADC_Init+0x2bc>)
 8009f5e:	f7ff ff17 	bl	8009d90 <LL_ADC_IsEnabled>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	bf0c      	ite	eq
 8009f68:	2301      	moveq	r3, #1
 8009f6a:	2300      	movne	r3, #0
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d012      	beq.n	8009f98 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a5a      	ldr	r2, [pc, #360]	@ (800a0e0 <HAL_ADC_Init+0x2b4>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d004      	beq.n	8009f86 <HAL_ADC_Init+0x15a>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a58      	ldr	r2, [pc, #352]	@ (800a0e4 <HAL_ADC_Init+0x2b8>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d101      	bne.n	8009f8a <HAL_ADC_Init+0x15e>
 8009f86:	4a59      	ldr	r2, [pc, #356]	@ (800a0ec <HAL_ADC_Init+0x2c0>)
 8009f88:	e000      	b.n	8009f8c <HAL_ADC_Init+0x160>
 8009f8a:	4a59      	ldr	r2, [pc, #356]	@ (800a0f0 <HAL_ADC_Init+0x2c4>)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	4619      	mov	r1, r3
 8009f92:	4610      	mov	r0, r2
 8009f94:	f7ff fc24 	bl	80097e0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a52      	ldr	r2, [pc, #328]	@ (800a0e8 <HAL_ADC_Init+0x2bc>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d129      	bne.n	8009ff6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	7e5b      	ldrb	r3, [r3, #25]
 8009fa6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009fac:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8009fb2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	2b08      	cmp	r3, #8
 8009fba:	d013      	beq.n	8009fe4 <HAL_ADC_Init+0x1b8>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	2b0c      	cmp	r3, #12
 8009fc2:	d00d      	beq.n	8009fe0 <HAL_ADC_Init+0x1b4>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	2b1c      	cmp	r3, #28
 8009fca:	d007      	beq.n	8009fdc <HAL_ADC_Init+0x1b0>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	2b18      	cmp	r3, #24
 8009fd2:	d101      	bne.n	8009fd8 <HAL_ADC_Init+0x1ac>
 8009fd4:	2318      	movs	r3, #24
 8009fd6:	e006      	b.n	8009fe6 <HAL_ADC_Init+0x1ba>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	e004      	b.n	8009fe6 <HAL_ADC_Init+0x1ba>
 8009fdc:	2310      	movs	r3, #16
 8009fde:	e002      	b.n	8009fe6 <HAL_ADC_Init+0x1ba>
 8009fe0:	2308      	movs	r3, #8
 8009fe2:	e000      	b.n	8009fe6 <HAL_ADC_Init+0x1ba>
 8009fe4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8009fe6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	61bb      	str	r3, [r7, #24]
 8009ff4:	e00e      	b.n	800a014 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	7e5b      	ldrb	r3, [r3, #25]
 8009ffa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a000:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800a006:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a00e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a010:	4313      	orrs	r3, r2
 800a012:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d106      	bne.n	800a02c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a022:	3b01      	subs	r3, #1
 800a024:	045b      	lsls	r3, r3, #17
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	4313      	orrs	r3, r2
 800a02a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a030:	2b00      	cmp	r3, #0
 800a032:	d009      	beq.n	800a048 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a038:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a040:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	4313      	orrs	r3, r2
 800a046:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a26      	ldr	r2, [pc, #152]	@ (800a0e8 <HAL_ADC_Init+0x2bc>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d115      	bne.n	800a07e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68da      	ldr	r2, [r3, #12]
 800a058:	4b26      	ldr	r3, [pc, #152]	@ (800a0f4 <HAL_ADC_Init+0x2c8>)
 800a05a:	4013      	ands	r3, r2
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	6812      	ldr	r2, [r2, #0]
 800a060:	69b9      	ldr	r1, [r7, #24]
 800a062:	430b      	orrs	r3, r1
 800a064:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	611a      	str	r2, [r3, #16]
 800a07c:	e009      	b.n	800a092 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68da      	ldr	r2, [r3, #12]
 800a084:	4b1c      	ldr	r3, [pc, #112]	@ (800a0f8 <HAL_ADC_Init+0x2cc>)
 800a086:	4013      	ands	r3, r2
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	6812      	ldr	r2, [r2, #0]
 800a08c:	69b9      	ldr	r1, [r7, #24]
 800a08e:	430b      	orrs	r3, r1
 800a090:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4618      	mov	r0, r3
 800a098:	f7ff fea2 	bl	8009de0 <LL_ADC_REG_IsConversionOngoing>
 800a09c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7ff feaf 	bl	8009e06 <LL_ADC_INJ_IsConversionOngoing>
 800a0a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f040 808e 	bne.w	800a1ce <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f040 808a 	bne.w	800a1ce <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a0a      	ldr	r2, [pc, #40]	@ (800a0e8 <HAL_ADC_Init+0x2bc>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d11b      	bne.n	800a0fc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	7e1b      	ldrb	r3, [r3, #24]
 800a0c8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a0d0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	61bb      	str	r3, [r7, #24]
 800a0d6:	e018      	b.n	800a10a <HAL_ADC_Init+0x2de>
 800a0d8:	24000004 	.word	0x24000004
 800a0dc:	053e2d63 	.word	0x053e2d63
 800a0e0:	40022000 	.word	0x40022000
 800a0e4:	40022100 	.word	0x40022100
 800a0e8:	58026000 	.word	0x58026000
 800a0ec:	40022300 	.word	0x40022300
 800a0f0:	58026300 	.word	0x58026300
 800a0f4:	fff04007 	.word	0xfff04007
 800a0f8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	7e1b      	ldrb	r3, [r3, #24]
 800a100:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800a106:	4313      	orrs	r3, r2
 800a108:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68da      	ldr	r2, [r3, #12]
 800a110:	4b46      	ldr	r3, [pc, #280]	@ (800a22c <HAL_ADC_Init+0x400>)
 800a112:	4013      	ands	r3, r2
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	6812      	ldr	r2, [r2, #0]
 800a118:	69b9      	ldr	r1, [r7, #24]
 800a11a:	430b      	orrs	r3, r1
 800a11c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a124:	2b01      	cmp	r3, #1
 800a126:	d137      	bne.n	800a198 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a12c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a3f      	ldr	r2, [pc, #252]	@ (800a230 <HAL_ADC_Init+0x404>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d116      	bne.n	800a166 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	691a      	ldr	r2, [r3, #16]
 800a13e:	4b3d      	ldr	r3, [pc, #244]	@ (800a234 <HAL_ADC_Init+0x408>)
 800a140:	4013      	ands	r3, r2
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a14a:	4311      	orrs	r1, r2
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a150:	4311      	orrs	r1, r2
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a156:	430a      	orrs	r2, r1
 800a158:	431a      	orrs	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f042 0201 	orr.w	r2, r2, #1
 800a162:	611a      	str	r2, [r3, #16]
 800a164:	e020      	b.n	800a1a8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	691a      	ldr	r2, [r3, #16]
 800a16c:	4b32      	ldr	r3, [pc, #200]	@ (800a238 <HAL_ADC_Init+0x40c>)
 800a16e:	4013      	ands	r3, r2
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a174:	3a01      	subs	r2, #1
 800a176:	0411      	lsls	r1, r2, #16
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a17c:	4311      	orrs	r1, r2
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a182:	4311      	orrs	r1, r2
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a188:	430a      	orrs	r2, r1
 800a18a:	431a      	orrs	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f042 0201 	orr.w	r2, r2, #1
 800a194:	611a      	str	r2, [r3, #16]
 800a196:	e007      	b.n	800a1a8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	691a      	ldr	r2, [r3, #16]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 0201 	bic.w	r2, r2, #1
 800a1a6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	430a      	orrs	r2, r1
 800a1bc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a1b      	ldr	r2, [pc, #108]	@ (800a230 <HAL_ADC_Init+0x404>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d002      	beq.n	800a1ce <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f001 f967 	bl	800b49c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d10c      	bne.n	800a1f0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1dc:	f023 010f 	bic.w	r1, r3, #15
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	69db      	ldr	r3, [r3, #28]
 800a1e4:	1e5a      	subs	r2, r3, #1
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	430a      	orrs	r2, r1
 800a1ec:	631a      	str	r2, [r3, #48]	@ 0x30
 800a1ee:	e007      	b.n	800a200 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f022 020f 	bic.w	r2, r2, #15
 800a1fe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a204:	f023 0303 	bic.w	r3, r3, #3
 800a208:	f043 0201 	orr.w	r2, r3, #1
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	661a      	str	r2, [r3, #96]	@ 0x60
 800a210:	e007      	b.n	800a222 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a216:	f043 0210 	orr.w	r2, r3, #16
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a222:	7ffb      	ldrb	r3, [r7, #31]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3724      	adds	r7, #36	@ 0x24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd90      	pop	{r4, r7, pc}
 800a22c:	ffffbffc 	.word	0xffffbffc
 800a230:	58026000 	.word	0x58026000
 800a234:	fc00f81f 	.word	0xfc00f81f
 800a238:	fc00f81e 	.word	0xfc00f81e

0800a23c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a60      	ldr	r2, [pc, #384]	@ (800a3d0 <HAL_ADC_Start_DMA+0x194>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d004      	beq.n	800a25c <HAL_ADC_Start_DMA+0x20>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a5f      	ldr	r2, [pc, #380]	@ (800a3d4 <HAL_ADC_Start_DMA+0x198>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d101      	bne.n	800a260 <HAL_ADC_Start_DMA+0x24>
 800a25c:	4b5e      	ldr	r3, [pc, #376]	@ (800a3d8 <HAL_ADC_Start_DMA+0x19c>)
 800a25e:	e000      	b.n	800a262 <HAL_ADC_Start_DMA+0x26>
 800a260:	4b5e      	ldr	r3, [pc, #376]	@ (800a3dc <HAL_ADC_Start_DMA+0x1a0>)
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff fd16 	bl	8009c94 <LL_ADC_GetMultimode>
 800a268:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4618      	mov	r0, r3
 800a270:	f7ff fdb6 	bl	8009de0 <LL_ADC_REG_IsConversionOngoing>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	f040 80a2 	bne.w	800a3c0 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a282:	2b01      	cmp	r3, #1
 800a284:	d101      	bne.n	800a28a <HAL_ADC_Start_DMA+0x4e>
 800a286:	2302      	movs	r3, #2
 800a288:	e09d      	b.n	800a3c6 <HAL_ADC_Start_DMA+0x18a>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d006      	beq.n	800a2a6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	2b05      	cmp	r3, #5
 800a29c:	d003      	beq.n	800a2a6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	2b09      	cmp	r3, #9
 800a2a2:	f040 8086 	bne.w	800a3b2 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 ffda 	bl	800b260 <ADC_Enable>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a2b0:	7dfb      	ldrb	r3, [r7, #23]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d178      	bne.n	800a3a8 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a2ba:	4b49      	ldr	r3, [pc, #292]	@ (800a3e0 <HAL_ADC_Start_DMA+0x1a4>)
 800a2bc:	4013      	ands	r3, r2
 800a2be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a42      	ldr	r2, [pc, #264]	@ (800a3d4 <HAL_ADC_Start_DMA+0x198>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d002      	beq.n	800a2d6 <HAL_ADC_Start_DMA+0x9a>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	e000      	b.n	800a2d8 <HAL_ADC_Start_DMA+0x9c>
 800a2d6:	4b3e      	ldr	r3, [pc, #248]	@ (800a3d0 <HAL_ADC_Start_DMA+0x194>)
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	6812      	ldr	r2, [r2, #0]
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d002      	beq.n	800a2e6 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d105      	bne.n	800a2f2 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d006      	beq.n	800a30c <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a302:	f023 0206 	bic.w	r2, r3, #6
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	665a      	str	r2, [r3, #100]	@ 0x64
 800a30a:	e002      	b.n	800a312 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a316:	4a33      	ldr	r2, [pc, #204]	@ (800a3e4 <HAL_ADC_Start_DMA+0x1a8>)
 800a318:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a31e:	4a32      	ldr	r2, [pc, #200]	@ (800a3e8 <HAL_ADC_Start_DMA+0x1ac>)
 800a320:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a326:	4a31      	ldr	r2, [pc, #196]	@ (800a3ec <HAL_ADC_Start_DMA+0x1b0>)
 800a328:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	221c      	movs	r2, #28
 800a330:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f042 0210 	orr.w	r2, r2, #16
 800a348:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a28      	ldr	r2, [pc, #160]	@ (800a3f0 <HAL_ADC_Start_DMA+0x1b4>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d10f      	bne.n	800a374 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	4619      	mov	r1, r3
 800a362:	4610      	mov	r0, r2
 800a364:	f7ff fbfe 	bl	8009b64 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7ff fbe9 	bl	8009b44 <LL_ADC_EnableDMAReq>
 800a372:	e007      	b.n	800a384 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37c:	4619      	mov	r1, r3
 800a37e:	4610      	mov	r0, r2
 800a380:	f7ff fbcd 	bl	8009b1e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3340      	adds	r3, #64	@ 0x40
 800a38e:	4619      	mov	r1, r3
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f001 fe82 	bl	800c09c <HAL_DMA_Start_IT>
 800a398:	4603      	mov	r3, r0
 800a39a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff fd09 	bl	8009db8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a3a6:	e00d      	b.n	800a3c4 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800a3b0:	e008      	b.n	800a3c4 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a3be:	e001      	b.n	800a3c4 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a3c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3718      	adds	r7, #24
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	40022000 	.word	0x40022000
 800a3d4:	40022100 	.word	0x40022100
 800a3d8:	40022300 	.word	0x40022300
 800a3dc:	58026300 	.word	0x58026300
 800a3e0:	fffff0fe 	.word	0xfffff0fe
 800a3e4:	0800b375 	.word	0x0800b375
 800a3e8:	0800b44d 	.word	0x0800b44d
 800a3ec:	0800b469 	.word	0x0800b469
 800a3f0:	58026000 	.word	0x58026000

0800a3f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08a      	sub	sp, #40	@ 0x28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a87      	ldr	r2, [pc, #540]	@ (800a634 <HAL_ADC_IRQHandler+0x240>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d004      	beq.n	800a424 <HAL_ADC_IRQHandler+0x30>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a86      	ldr	r2, [pc, #536]	@ (800a638 <HAL_ADC_IRQHandler+0x244>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d101      	bne.n	800a428 <HAL_ADC_IRQHandler+0x34>
 800a424:	4b85      	ldr	r3, [pc, #532]	@ (800a63c <HAL_ADC_IRQHandler+0x248>)
 800a426:	e000      	b.n	800a42a <HAL_ADC_IRQHandler+0x36>
 800a428:	4b85      	ldr	r3, [pc, #532]	@ (800a640 <HAL_ADC_IRQHandler+0x24c>)
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7ff fc32 	bl	8009c94 <LL_ADC_GetMultimode>
 800a430:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	f003 0302 	and.w	r3, r3, #2
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d017      	beq.n	800a46c <HAL_ADC_IRQHandler+0x78>
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	f003 0302 	and.w	r3, r3, #2
 800a442:	2b00      	cmp	r3, #0
 800a444:	d012      	beq.n	800a46c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a44a:	f003 0310 	and.w	r3, r3, #16
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d105      	bne.n	800a45e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a456:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f001 f932 	bl	800b6c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2202      	movs	r2, #2
 800a46a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	f003 0304 	and.w	r3, r3, #4
 800a472:	2b00      	cmp	r3, #0
 800a474:	d004      	beq.n	800a480 <HAL_ADC_IRQHandler+0x8c>
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	f003 0304 	and.w	r3, r3, #4
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10a      	bne.n	800a496 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a486:	2b00      	cmp	r3, #0
 800a488:	f000 8083 	beq.w	800a592 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	f003 0308 	and.w	r3, r3, #8
 800a492:	2b00      	cmp	r3, #0
 800a494:	d07d      	beq.n	800a592 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a49a:	f003 0310 	and.w	r3, r3, #16
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d105      	bne.n	800a4ae <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff faf4 	bl	8009aa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d062      	beq.n	800a584 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a5d      	ldr	r2, [pc, #372]	@ (800a638 <HAL_ADC_IRQHandler+0x244>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d002      	beq.n	800a4ce <HAL_ADC_IRQHandler+0xda>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	e000      	b.n	800a4d0 <HAL_ADC_IRQHandler+0xdc>
 800a4ce:	4b59      	ldr	r3, [pc, #356]	@ (800a634 <HAL_ADC_IRQHandler+0x240>)
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	6812      	ldr	r2, [r2, #0]
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d008      	beq.n	800a4ea <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d005      	beq.n	800a4ea <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2b05      	cmp	r3, #5
 800a4e2:	d002      	beq.n	800a4ea <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	2b09      	cmp	r3, #9
 800a4e8:	d104      	bne.n	800a4f4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	623b      	str	r3, [r7, #32]
 800a4f2:	e00c      	b.n	800a50e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a4f      	ldr	r2, [pc, #316]	@ (800a638 <HAL_ADC_IRQHandler+0x244>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d002      	beq.n	800a504 <HAL_ADC_IRQHandler+0x110>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	e000      	b.n	800a506 <HAL_ADC_IRQHandler+0x112>
 800a504:	4b4b      	ldr	r3, [pc, #300]	@ (800a634 <HAL_ADC_IRQHandler+0x240>)
 800a506:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800a50e:	6a3b      	ldr	r3, [r7, #32]
 800a510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d135      	bne.n	800a584 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0308 	and.w	r3, r3, #8
 800a522:	2b08      	cmp	r3, #8
 800a524:	d12e      	bne.n	800a584 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7ff fc58 	bl	8009de0 <LL_ADC_REG_IsConversionOngoing>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d11a      	bne.n	800a56c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 020c 	bic.w	r2, r2, #12
 800a544:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a54a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a556:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d112      	bne.n	800a584 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a562:	f043 0201 	orr.w	r2, r3, #1
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	661a      	str	r2, [r3, #96]	@ 0x60
 800a56a:	e00b      	b.n	800a584 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a570:	f043 0210 	orr.w	r2, r3, #16
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a57c:	f043 0201 	orr.w	r2, r3, #1
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f96f 	bl	800a868 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	220c      	movs	r2, #12
 800a590:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	f003 0320 	and.w	r3, r3, #32
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d004      	beq.n	800a5a6 <HAL_ADC_IRQHandler+0x1b2>
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	f003 0320 	and.w	r3, r3, #32
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10b      	bne.n	800a5be <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 80a0 	beq.w	800a6f2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f000 809a 	beq.w	800a6f2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5c2:	f003 0310 	and.w	r3, r3, #16
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d105      	bne.n	800a5d6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5ce:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7ff fadc 	bl	8009b98 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a5e0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7ff fa5a 	bl	8009aa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a5ec:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a11      	ldr	r2, [pc, #68]	@ (800a638 <HAL_ADC_IRQHandler+0x244>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d002      	beq.n	800a5fe <HAL_ADC_IRQHandler+0x20a>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	e000      	b.n	800a600 <HAL_ADC_IRQHandler+0x20c>
 800a5fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a634 <HAL_ADC_IRQHandler+0x240>)
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	6812      	ldr	r2, [r2, #0]
 800a604:	4293      	cmp	r3, r2
 800a606:	d008      	beq.n	800a61a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d005      	beq.n	800a61a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	2b06      	cmp	r3, #6
 800a612:	d002      	beq.n	800a61a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	2b07      	cmp	r3, #7
 800a618:	d104      	bne.n	800a624 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	623b      	str	r3, [r7, #32]
 800a622:	e014      	b.n	800a64e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a03      	ldr	r2, [pc, #12]	@ (800a638 <HAL_ADC_IRQHandler+0x244>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d00a      	beq.n	800a644 <HAL_ADC_IRQHandler+0x250>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	e008      	b.n	800a646 <HAL_ADC_IRQHandler+0x252>
 800a634:	40022000 	.word	0x40022000
 800a638:	40022100 	.word	0x40022100
 800a63c:	40022300 	.word	0x40022300
 800a640:	58026300 	.word	0x58026300
 800a644:	4b84      	ldr	r3, [pc, #528]	@ (800a858 <HAL_ADC_IRQHandler+0x464>)
 800a646:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d047      	beq.n	800a6e4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d007      	beq.n	800a66e <HAL_ADC_IRQHandler+0x27a>
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d03f      	beq.n	800a6e4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d13a      	bne.n	800a6e4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a678:	2b40      	cmp	r3, #64	@ 0x40
 800a67a:	d133      	bne.n	800a6e4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a682:	2b00      	cmp	r3, #0
 800a684:	d12e      	bne.n	800a6e4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7ff fbbb 	bl	8009e06 <LL_ADC_INJ_IsConversionOngoing>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d11a      	bne.n	800a6cc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a6a4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d112      	bne.n	800a6e4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6c2:	f043 0201 	orr.w	r2, r3, #1
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	661a      	str	r2, [r3, #96]	@ 0x60
 800a6ca:	e00b      	b.n	800a6e4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6d0:	f043 0210 	orr.w	r2, r3, #16
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6dc:	f043 0201 	orr.w	r2, r3, #1
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 ffc7 	bl	800b678 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2260      	movs	r2, #96	@ 0x60
 800a6f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d011      	beq.n	800a720 <HAL_ADC_IRQHandler+0x32c>
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00c      	beq.n	800a720 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a70a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f8bc 	bl	800a890 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2280      	movs	r2, #128	@ 0x80
 800a71e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a726:	2b00      	cmp	r3, #0
 800a728:	d012      	beq.n	800a750 <HAL_ADC_IRQHandler+0x35c>
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00d      	beq.n	800a750 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a738:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 ffad 	bl	800b6a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a74e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a756:	2b00      	cmp	r3, #0
 800a758:	d012      	beq.n	800a780 <HAL_ADC_IRQHandler+0x38c>
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00d      	beq.n	800a780 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a768:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 ff9f 	bl	800b6b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a77e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	f003 0310 	and.w	r3, r3, #16
 800a786:	2b00      	cmp	r3, #0
 800a788:	d043      	beq.n	800a812 <HAL_ADC_IRQHandler+0x41e>
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	f003 0310 	and.w	r3, r3, #16
 800a790:	2b00      	cmp	r3, #0
 800a792:	d03e      	beq.n	800a812 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800a79c:	2301      	movs	r3, #1
 800a79e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7a0:	e021      	b.n	800a7e6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d015      	beq.n	800a7d4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a2a      	ldr	r2, [pc, #168]	@ (800a858 <HAL_ADC_IRQHandler+0x464>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d004      	beq.n	800a7bc <HAL_ADC_IRQHandler+0x3c8>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a29      	ldr	r2, [pc, #164]	@ (800a85c <HAL_ADC_IRQHandler+0x468>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d101      	bne.n	800a7c0 <HAL_ADC_IRQHandler+0x3cc>
 800a7bc:	4b28      	ldr	r3, [pc, #160]	@ (800a860 <HAL_ADC_IRQHandler+0x46c>)
 800a7be:	e000      	b.n	800a7c2 <HAL_ADC_IRQHandler+0x3ce>
 800a7c0:	4b28      	ldr	r3, [pc, #160]	@ (800a864 <HAL_ADC_IRQHandler+0x470>)
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7ff fa74 	bl	8009cb0 <LL_ADC_GetMultiDMATransfer>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00b      	beq.n	800a7e6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7d2:	e008      	b.n	800a7e6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	f003 0303 	and.w	r3, r3, #3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d10e      	bne.n	800a80a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7f0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7fc:	f043 0202 	orr.w	r2, r3, #2
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 f84d 	bl	800a8a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2210      	movs	r2, #16
 800a810:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d018      	beq.n	800a84e <HAL_ADC_IRQHandler+0x45a>
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a822:	2b00      	cmp	r3, #0
 800a824:	d013      	beq.n	800a84e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a82a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a836:	f043 0208 	orr.w	r2, r3, #8
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a846:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 ff1f 	bl	800b68c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a84e:	bf00      	nop
 800a850:	3728      	adds	r7, #40	@ 0x28
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	40022000 	.word	0x40022000
 800a85c:	40022100 	.word	0x40022100
 800a860:	40022300 	.word	0x40022300
 800a864:	58026300 	.word	0x58026300

0800a868 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a8b8:	b590      	push	{r4, r7, lr}
 800a8ba:	b0a5      	sub	sp, #148	@ 0x94
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8d2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	4aa4      	ldr	r2, [pc, #656]	@ (800ab6c <HAL_ADC_ConfigChannel+0x2b4>)
 800a8da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d102      	bne.n	800a8ec <HAL_ADC_ConfigChannel+0x34>
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	f000 bca2 	b.w	800b230 <HAL_ADC_ConfigChannel+0x978>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7ff fa71 	bl	8009de0 <LL_ADC_REG_IsConversionOngoing>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	f040 8486 	bne.w	800b212 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	db31      	blt.n	800a972 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a97      	ldr	r2, [pc, #604]	@ (800ab70 <HAL_ADC_ConfigChannel+0x2b8>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d02c      	beq.n	800a972 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a920:	2b00      	cmp	r3, #0
 800a922:	d108      	bne.n	800a936 <HAL_ADC_ConfigChannel+0x7e>
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	0e9b      	lsrs	r3, r3, #26
 800a92a:	f003 031f 	and.w	r3, r3, #31
 800a92e:	2201      	movs	r2, #1
 800a930:	fa02 f303 	lsl.w	r3, r2, r3
 800a934:	e016      	b.n	800a964 <HAL_ADC_ConfigChannel+0xac>
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a93c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a93e:	fa93 f3a3 	rbit	r3, r3
 800a942:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a944:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a946:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800a94e:	2320      	movs	r3, #32
 800a950:	e003      	b.n	800a95a <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800a952:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a954:	fab3 f383 	clz	r3, r3
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	f003 031f 	and.w	r3, r3, #31
 800a95e:	2201      	movs	r2, #1
 800a960:	fa02 f303 	lsl.w	r3, r2, r3
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	6812      	ldr	r2, [r2, #0]
 800a968:	69d1      	ldr	r1, [r2, #28]
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	6812      	ldr	r2, [r2, #0]
 800a96e:	430b      	orrs	r3, r1
 800a970:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6818      	ldr	r0, [r3, #0]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	6859      	ldr	r1, [r3, #4]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	461a      	mov	r2, r3
 800a980:	f7ff f8a1 	bl	8009ac6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff fa29 	bl	8009de0 <LL_ADC_REG_IsConversionOngoing>
 800a98e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff fa35 	bl	8009e06 <LL_ADC_INJ_IsConversionOngoing>
 800a99c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a9a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f040 824a 	bne.w	800ae3e <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a9aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f040 8245 	bne.w	800ae3e <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6818      	ldr	r0, [r3, #0]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	6819      	ldr	r1, [r3, #0]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	f7ff f8fc 	bl	8009bbe <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a69      	ldr	r2, [pc, #420]	@ (800ab70 <HAL_ADC_ConfigChannel+0x2b8>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d10d      	bne.n	800a9ec <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	695a      	ldr	r2, [r3, #20]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	08db      	lsrs	r3, r3, #3
 800a9dc:	f003 0303 	and.w	r3, r3, #3
 800a9e0:	005b      	lsls	r3, r3, #1
 800a9e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a9ea:	e032      	b.n	800aa52 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a9ec:	4b61      	ldr	r3, [pc, #388]	@ (800ab74 <HAL_ADC_ConfigChannel+0x2bc>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a9f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9f8:	d10b      	bne.n	800aa12 <HAL_ADC_ConfigChannel+0x15a>
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	695a      	ldr	r2, [r3, #20]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	089b      	lsrs	r3, r3, #2
 800aa06:	f003 0307 	and.w	r3, r3, #7
 800aa0a:	005b      	lsls	r3, r3, #1
 800aa0c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa10:	e01d      	b.n	800aa4e <HAL_ADC_ConfigChannel+0x196>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	f003 0310 	and.w	r3, r3, #16
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10b      	bne.n	800aa38 <HAL_ADC_ConfigChannel+0x180>
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	695a      	ldr	r2, [r3, #20]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	089b      	lsrs	r3, r3, #2
 800aa2c:	f003 0307 	and.w	r3, r3, #7
 800aa30:	005b      	lsls	r3, r3, #1
 800aa32:	fa02 f303 	lsl.w	r3, r2, r3
 800aa36:	e00a      	b.n	800aa4e <HAL_ADC_ConfigChannel+0x196>
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	695a      	ldr	r2, [r3, #20]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	089b      	lsrs	r3, r3, #2
 800aa44:	f003 0304 	and.w	r3, r3, #4
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	2b04      	cmp	r3, #4
 800aa58:	d048      	beq.n	800aaec <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6818      	ldr	r0, [r3, #0]
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	6919      	ldr	r1, [r3, #16]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa6a:	f7fe ff27 	bl	80098bc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a3f      	ldr	r2, [pc, #252]	@ (800ab70 <HAL_ADC_ConfigChannel+0x2b8>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d119      	bne.n	800aaac <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6818      	ldr	r0, [r3, #0]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	6919      	ldr	r1, [r3, #16]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	69db      	ldr	r3, [r3, #28]
 800aa84:	461a      	mov	r2, r3
 800aa86:	f7fe ffbf 	bl	8009a08 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6818      	ldr	r0, [r3, #0]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	6919      	ldr	r1, [r3, #16]
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d102      	bne.n	800aaa2 <HAL_ADC_ConfigChannel+0x1ea>
 800aa9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aaa0:	e000      	b.n	800aaa4 <HAL_ADC_ConfigChannel+0x1ec>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	f7fe ff8d 	bl	80099c4 <LL_ADC_SetOffsetSaturation>
 800aaaa:	e1c8      	b.n	800ae3e <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6818      	ldr	r0, [r3, #0]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	6919      	ldr	r1, [r3, #16]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d102      	bne.n	800aac4 <HAL_ADC_ConfigChannel+0x20c>
 800aabe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aac2:	e000      	b.n	800aac6 <HAL_ADC_ConfigChannel+0x20e>
 800aac4:	2300      	movs	r3, #0
 800aac6:	461a      	mov	r2, r3
 800aac8:	f7fe ff5a 	bl	8009980 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6818      	ldr	r0, [r3, #0]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	6919      	ldr	r1, [r3, #16]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	7e1b      	ldrb	r3, [r3, #24]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d102      	bne.n	800aae2 <HAL_ADC_ConfigChannel+0x22a>
 800aadc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aae0:	e000      	b.n	800aae4 <HAL_ADC_ConfigChannel+0x22c>
 800aae2:	2300      	movs	r3, #0
 800aae4:	461a      	mov	r2, r3
 800aae6:	f7fe ff31 	bl	800994c <LL_ADC_SetDataRightShift>
 800aaea:	e1a8      	b.n	800ae3e <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a1f      	ldr	r2, [pc, #124]	@ (800ab70 <HAL_ADC_ConfigChannel+0x2b8>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	f040 815b 	bne.w	800adae <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2100      	movs	r1, #0
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fe ff0e 	bl	8009920 <LL_ADC_GetOffsetChannel>
 800ab04:	4603      	mov	r3, r0
 800ab06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10a      	bne.n	800ab24 <HAL_ADC_ConfigChannel+0x26c>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2100      	movs	r1, #0
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fe ff03 	bl	8009920 <LL_ADC_GetOffsetChannel>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	0e9b      	lsrs	r3, r3, #26
 800ab1e:	f003 021f 	and.w	r2, r3, #31
 800ab22:	e017      	b.n	800ab54 <HAL_ADC_ConfigChannel+0x29c>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2100      	movs	r1, #0
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe fef8 	bl	8009920 <LL_ADC_GetOffsetChannel>
 800ab30:	4603      	mov	r3, r0
 800ab32:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab36:	fa93 f3a3 	rbit	r3, r3
 800ab3a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800ab3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800ab40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d101      	bne.n	800ab4a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800ab46:	2320      	movs	r3, #32
 800ab48:	e003      	b.n	800ab52 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800ab4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab4c:	fab3 f383 	clz	r3, r3
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	461a      	mov	r2, r3
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10b      	bne.n	800ab78 <HAL_ADC_ConfigChannel+0x2c0>
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	0e9b      	lsrs	r3, r3, #26
 800ab66:	f003 031f 	and.w	r3, r3, #31
 800ab6a:	e017      	b.n	800ab9c <HAL_ADC_ConfigChannel+0x2e4>
 800ab6c:	47ff0000 	.word	0x47ff0000
 800ab70:	58026000 	.word	0x58026000
 800ab74:	5c001000 	.word	0x5c001000
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab80:	fa93 f3a3 	rbit	r3, r3
 800ab84:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800ab86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab88:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800ab8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800ab90:	2320      	movs	r3, #32
 800ab92:	e003      	b.n	800ab9c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800ab94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab96:	fab3 f383 	clz	r3, r3
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d106      	bne.n	800abae <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2200      	movs	r2, #0
 800aba6:	2100      	movs	r1, #0
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fe ff4f 	bl	8009a4c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2101      	movs	r1, #1
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fe feb3 	bl	8009920 <LL_ADC_GetOffsetChannel>
 800abba:	4603      	mov	r3, r0
 800abbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10a      	bne.n	800abda <HAL_ADC_ConfigChannel+0x322>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2101      	movs	r1, #1
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fe fea8 	bl	8009920 <LL_ADC_GetOffsetChannel>
 800abd0:	4603      	mov	r3, r0
 800abd2:	0e9b      	lsrs	r3, r3, #26
 800abd4:	f003 021f 	and.w	r2, r3, #31
 800abd8:	e017      	b.n	800ac0a <HAL_ADC_ConfigChannel+0x352>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2101      	movs	r1, #1
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7fe fe9d 	bl	8009920 <LL_ADC_GetOffsetChannel>
 800abe6:	4603      	mov	r3, r0
 800abe8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abec:	fa93 f3a3 	rbit	r3, r3
 800abf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800abf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abf4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800abf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d101      	bne.n	800ac00 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800abfc:	2320      	movs	r3, #32
 800abfe:	e003      	b.n	800ac08 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800ac00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac02:	fab3 f383 	clz	r3, r3
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	461a      	mov	r2, r3
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d105      	bne.n	800ac22 <HAL_ADC_ConfigChannel+0x36a>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	0e9b      	lsrs	r3, r3, #26
 800ac1c:	f003 031f 	and.w	r3, r3, #31
 800ac20:	e011      	b.n	800ac46 <HAL_ADC_ConfigChannel+0x38e>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac2a:	fa93 f3a3 	rbit	r3, r3
 800ac2e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800ac30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac32:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800ac34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d101      	bne.n	800ac3e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800ac3a:	2320      	movs	r3, #32
 800ac3c:	e003      	b.n	800ac46 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800ac3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac40:	fab3 f383 	clz	r3, r3
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d106      	bne.n	800ac58 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2101      	movs	r1, #1
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe fefa 	bl	8009a4c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2102      	movs	r1, #2
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fe fe5e 	bl	8009920 <LL_ADC_GetOffsetChannel>
 800ac64:	4603      	mov	r3, r0
 800ac66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10a      	bne.n	800ac84 <HAL_ADC_ConfigChannel+0x3cc>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2102      	movs	r1, #2
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7fe fe53 	bl	8009920 <LL_ADC_GetOffsetChannel>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	0e9b      	lsrs	r3, r3, #26
 800ac7e:	f003 021f 	and.w	r2, r3, #31
 800ac82:	e017      	b.n	800acb4 <HAL_ADC_ConfigChannel+0x3fc>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2102      	movs	r1, #2
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fe fe48 	bl	8009920 <LL_ADC_GetOffsetChannel>
 800ac90:	4603      	mov	r3, r0
 800ac92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac96:	fa93 f3a3 	rbit	r3, r3
 800ac9a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800ac9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800aca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800aca6:	2320      	movs	r3, #32
 800aca8:	e003      	b.n	800acb2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800acaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acac:	fab3 f383 	clz	r3, r3
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	461a      	mov	r2, r3
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d105      	bne.n	800accc <HAL_ADC_ConfigChannel+0x414>
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	0e9b      	lsrs	r3, r3, #26
 800acc6:	f003 031f 	and.w	r3, r3, #31
 800acca:	e011      	b.n	800acf0 <HAL_ADC_ConfigChannel+0x438>
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd4:	fa93 f3a3 	rbit	r3, r3
 800acd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800acda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acdc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800acde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d101      	bne.n	800ace8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800ace4:	2320      	movs	r3, #32
 800ace6:	e003      	b.n	800acf0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800ace8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acea:	fab3 f383 	clz	r3, r3
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d106      	bne.n	800ad02 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2200      	movs	r2, #0
 800acfa:	2102      	movs	r1, #2
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fe fea5 	bl	8009a4c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2103      	movs	r1, #3
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fe fe09 	bl	8009920 <LL_ADC_GetOffsetChannel>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10a      	bne.n	800ad2e <HAL_ADC_ConfigChannel+0x476>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2103      	movs	r1, #3
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fe fdfe 	bl	8009920 <LL_ADC_GetOffsetChannel>
 800ad24:	4603      	mov	r3, r0
 800ad26:	0e9b      	lsrs	r3, r3, #26
 800ad28:	f003 021f 	and.w	r2, r3, #31
 800ad2c:	e017      	b.n	800ad5e <HAL_ADC_ConfigChannel+0x4a6>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2103      	movs	r1, #3
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fe fdf3 	bl	8009920 <LL_ADC_GetOffsetChannel>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad3e:	6a3b      	ldr	r3, [r7, #32]
 800ad40:	fa93 f3a3 	rbit	r3, r3
 800ad44:	61fb      	str	r3, [r7, #28]
  return result;
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ad4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d101      	bne.n	800ad54 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800ad50:	2320      	movs	r3, #32
 800ad52:	e003      	b.n	800ad5c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800ad54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad56:	fab3 f383 	clz	r3, r3
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d105      	bne.n	800ad76 <HAL_ADC_ConfigChannel+0x4be>
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	0e9b      	lsrs	r3, r3, #26
 800ad70:	f003 031f 	and.w	r3, r3, #31
 800ad74:	e011      	b.n	800ad9a <HAL_ADC_ConfigChannel+0x4e2>
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	fa93 f3a3 	rbit	r3, r3
 800ad82:	613b      	str	r3, [r7, #16]
  return result;
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800ad8e:	2320      	movs	r3, #32
 800ad90:	e003      	b.n	800ad9a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	fab3 f383 	clz	r3, r3
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d14f      	bne.n	800ae3e <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2200      	movs	r2, #0
 800ada4:	2103      	movs	r1, #3
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fe fe50 	bl	8009a4c <LL_ADC_SetOffsetState>
 800adac:	e047      	b.n	800ae3e <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	069b      	lsls	r3, r3, #26
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d107      	bne.n	800add2 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800add0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800add8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	069b      	lsls	r3, r3, #26
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d107      	bne.n	800adf6 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800adf4:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adfc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	069b      	lsls	r3, r3, #26
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d107      	bne.n	800ae1a <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ae18:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	069b      	lsls	r3, r3, #26
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d107      	bne.n	800ae3e <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ae3c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fe ffa4 	bl	8009d90 <LL_ADC_IsEnabled>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f040 81ea 	bne.w	800b224 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6818      	ldr	r0, [r3, #0]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	6819      	ldr	r1, [r3, #0]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	f7fe fed9 	bl	8009c14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	4a7a      	ldr	r2, [pc, #488]	@ (800b050 <HAL_ADC_ConfigChannel+0x798>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	f040 80e0 	bne.w	800b02e <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4977      	ldr	r1, [pc, #476]	@ (800b054 <HAL_ADC_ConfigChannel+0x79c>)
 800ae78:	428b      	cmp	r3, r1
 800ae7a:	d147      	bne.n	800af0c <HAL_ADC_ConfigChannel+0x654>
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4975      	ldr	r1, [pc, #468]	@ (800b058 <HAL_ADC_ConfigChannel+0x7a0>)
 800ae82:	428b      	cmp	r3, r1
 800ae84:	d040      	beq.n	800af08 <HAL_ADC_ConfigChannel+0x650>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4974      	ldr	r1, [pc, #464]	@ (800b05c <HAL_ADC_ConfigChannel+0x7a4>)
 800ae8c:	428b      	cmp	r3, r1
 800ae8e:	d039      	beq.n	800af04 <HAL_ADC_ConfigChannel+0x64c>
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4972      	ldr	r1, [pc, #456]	@ (800b060 <HAL_ADC_ConfigChannel+0x7a8>)
 800ae96:	428b      	cmp	r3, r1
 800ae98:	d032      	beq.n	800af00 <HAL_ADC_ConfigChannel+0x648>
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4971      	ldr	r1, [pc, #452]	@ (800b064 <HAL_ADC_ConfigChannel+0x7ac>)
 800aea0:	428b      	cmp	r3, r1
 800aea2:	d02b      	beq.n	800aefc <HAL_ADC_ConfigChannel+0x644>
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	496f      	ldr	r1, [pc, #444]	@ (800b068 <HAL_ADC_ConfigChannel+0x7b0>)
 800aeaa:	428b      	cmp	r3, r1
 800aeac:	d024      	beq.n	800aef8 <HAL_ADC_ConfigChannel+0x640>
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	496e      	ldr	r1, [pc, #440]	@ (800b06c <HAL_ADC_ConfigChannel+0x7b4>)
 800aeb4:	428b      	cmp	r3, r1
 800aeb6:	d01d      	beq.n	800aef4 <HAL_ADC_ConfigChannel+0x63c>
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	496c      	ldr	r1, [pc, #432]	@ (800b070 <HAL_ADC_ConfigChannel+0x7b8>)
 800aebe:	428b      	cmp	r3, r1
 800aec0:	d016      	beq.n	800aef0 <HAL_ADC_ConfigChannel+0x638>
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	496b      	ldr	r1, [pc, #428]	@ (800b074 <HAL_ADC_ConfigChannel+0x7bc>)
 800aec8:	428b      	cmp	r3, r1
 800aeca:	d00f      	beq.n	800aeec <HAL_ADC_ConfigChannel+0x634>
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4969      	ldr	r1, [pc, #420]	@ (800b078 <HAL_ADC_ConfigChannel+0x7c0>)
 800aed2:	428b      	cmp	r3, r1
 800aed4:	d008      	beq.n	800aee8 <HAL_ADC_ConfigChannel+0x630>
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4968      	ldr	r1, [pc, #416]	@ (800b07c <HAL_ADC_ConfigChannel+0x7c4>)
 800aedc:	428b      	cmp	r3, r1
 800aede:	d101      	bne.n	800aee4 <HAL_ADC_ConfigChannel+0x62c>
 800aee0:	4b67      	ldr	r3, [pc, #412]	@ (800b080 <HAL_ADC_ConfigChannel+0x7c8>)
 800aee2:	e0a0      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800aee4:	2300      	movs	r3, #0
 800aee6:	e09e      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800aee8:	4b66      	ldr	r3, [pc, #408]	@ (800b084 <HAL_ADC_ConfigChannel+0x7cc>)
 800aeea:	e09c      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800aeec:	4b66      	ldr	r3, [pc, #408]	@ (800b088 <HAL_ADC_ConfigChannel+0x7d0>)
 800aeee:	e09a      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800aef0:	4b60      	ldr	r3, [pc, #384]	@ (800b074 <HAL_ADC_ConfigChannel+0x7bc>)
 800aef2:	e098      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800aef4:	4b5e      	ldr	r3, [pc, #376]	@ (800b070 <HAL_ADC_ConfigChannel+0x7b8>)
 800aef6:	e096      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800aef8:	4b64      	ldr	r3, [pc, #400]	@ (800b08c <HAL_ADC_ConfigChannel+0x7d4>)
 800aefa:	e094      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800aefc:	4b64      	ldr	r3, [pc, #400]	@ (800b090 <HAL_ADC_ConfigChannel+0x7d8>)
 800aefe:	e092      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af00:	4b64      	ldr	r3, [pc, #400]	@ (800b094 <HAL_ADC_ConfigChannel+0x7dc>)
 800af02:	e090      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af04:	4b64      	ldr	r3, [pc, #400]	@ (800b098 <HAL_ADC_ConfigChannel+0x7e0>)
 800af06:	e08e      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af08:	2301      	movs	r3, #1
 800af0a:	e08c      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4962      	ldr	r1, [pc, #392]	@ (800b09c <HAL_ADC_ConfigChannel+0x7e4>)
 800af12:	428b      	cmp	r3, r1
 800af14:	d140      	bne.n	800af98 <HAL_ADC_ConfigChannel+0x6e0>
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	494f      	ldr	r1, [pc, #316]	@ (800b058 <HAL_ADC_ConfigChannel+0x7a0>)
 800af1c:	428b      	cmp	r3, r1
 800af1e:	d039      	beq.n	800af94 <HAL_ADC_ConfigChannel+0x6dc>
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	494d      	ldr	r1, [pc, #308]	@ (800b05c <HAL_ADC_ConfigChannel+0x7a4>)
 800af26:	428b      	cmp	r3, r1
 800af28:	d032      	beq.n	800af90 <HAL_ADC_ConfigChannel+0x6d8>
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	494c      	ldr	r1, [pc, #304]	@ (800b060 <HAL_ADC_ConfigChannel+0x7a8>)
 800af30:	428b      	cmp	r3, r1
 800af32:	d02b      	beq.n	800af8c <HAL_ADC_ConfigChannel+0x6d4>
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	494a      	ldr	r1, [pc, #296]	@ (800b064 <HAL_ADC_ConfigChannel+0x7ac>)
 800af3a:	428b      	cmp	r3, r1
 800af3c:	d024      	beq.n	800af88 <HAL_ADC_ConfigChannel+0x6d0>
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4949      	ldr	r1, [pc, #292]	@ (800b068 <HAL_ADC_ConfigChannel+0x7b0>)
 800af44:	428b      	cmp	r3, r1
 800af46:	d01d      	beq.n	800af84 <HAL_ADC_ConfigChannel+0x6cc>
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4947      	ldr	r1, [pc, #284]	@ (800b06c <HAL_ADC_ConfigChannel+0x7b4>)
 800af4e:	428b      	cmp	r3, r1
 800af50:	d016      	beq.n	800af80 <HAL_ADC_ConfigChannel+0x6c8>
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4946      	ldr	r1, [pc, #280]	@ (800b070 <HAL_ADC_ConfigChannel+0x7b8>)
 800af58:	428b      	cmp	r3, r1
 800af5a:	d00f      	beq.n	800af7c <HAL_ADC_ConfigChannel+0x6c4>
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4944      	ldr	r1, [pc, #272]	@ (800b074 <HAL_ADC_ConfigChannel+0x7bc>)
 800af62:	428b      	cmp	r3, r1
 800af64:	d008      	beq.n	800af78 <HAL_ADC_ConfigChannel+0x6c0>
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4944      	ldr	r1, [pc, #272]	@ (800b07c <HAL_ADC_ConfigChannel+0x7c4>)
 800af6c:	428b      	cmp	r3, r1
 800af6e:	d101      	bne.n	800af74 <HAL_ADC_ConfigChannel+0x6bc>
 800af70:	4b43      	ldr	r3, [pc, #268]	@ (800b080 <HAL_ADC_ConfigChannel+0x7c8>)
 800af72:	e058      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af74:	2300      	movs	r3, #0
 800af76:	e056      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af78:	4b43      	ldr	r3, [pc, #268]	@ (800b088 <HAL_ADC_ConfigChannel+0x7d0>)
 800af7a:	e054      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af7c:	4b3d      	ldr	r3, [pc, #244]	@ (800b074 <HAL_ADC_ConfigChannel+0x7bc>)
 800af7e:	e052      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af80:	4b3b      	ldr	r3, [pc, #236]	@ (800b070 <HAL_ADC_ConfigChannel+0x7b8>)
 800af82:	e050      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af84:	4b41      	ldr	r3, [pc, #260]	@ (800b08c <HAL_ADC_ConfigChannel+0x7d4>)
 800af86:	e04e      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af88:	4b41      	ldr	r3, [pc, #260]	@ (800b090 <HAL_ADC_ConfigChannel+0x7d8>)
 800af8a:	e04c      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af8c:	4b41      	ldr	r3, [pc, #260]	@ (800b094 <HAL_ADC_ConfigChannel+0x7dc>)
 800af8e:	e04a      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af90:	4b41      	ldr	r3, [pc, #260]	@ (800b098 <HAL_ADC_ConfigChannel+0x7e0>)
 800af92:	e048      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af94:	2301      	movs	r3, #1
 800af96:	e046      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4940      	ldr	r1, [pc, #256]	@ (800b0a0 <HAL_ADC_ConfigChannel+0x7e8>)
 800af9e:	428b      	cmp	r3, r1
 800afa0:	d140      	bne.n	800b024 <HAL_ADC_ConfigChannel+0x76c>
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	492c      	ldr	r1, [pc, #176]	@ (800b058 <HAL_ADC_ConfigChannel+0x7a0>)
 800afa8:	428b      	cmp	r3, r1
 800afaa:	d039      	beq.n	800b020 <HAL_ADC_ConfigChannel+0x768>
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	492a      	ldr	r1, [pc, #168]	@ (800b05c <HAL_ADC_ConfigChannel+0x7a4>)
 800afb2:	428b      	cmp	r3, r1
 800afb4:	d032      	beq.n	800b01c <HAL_ADC_ConfigChannel+0x764>
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4929      	ldr	r1, [pc, #164]	@ (800b060 <HAL_ADC_ConfigChannel+0x7a8>)
 800afbc:	428b      	cmp	r3, r1
 800afbe:	d02b      	beq.n	800b018 <HAL_ADC_ConfigChannel+0x760>
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4927      	ldr	r1, [pc, #156]	@ (800b064 <HAL_ADC_ConfigChannel+0x7ac>)
 800afc6:	428b      	cmp	r3, r1
 800afc8:	d024      	beq.n	800b014 <HAL_ADC_ConfigChannel+0x75c>
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4926      	ldr	r1, [pc, #152]	@ (800b068 <HAL_ADC_ConfigChannel+0x7b0>)
 800afd0:	428b      	cmp	r3, r1
 800afd2:	d01d      	beq.n	800b010 <HAL_ADC_ConfigChannel+0x758>
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4924      	ldr	r1, [pc, #144]	@ (800b06c <HAL_ADC_ConfigChannel+0x7b4>)
 800afda:	428b      	cmp	r3, r1
 800afdc:	d016      	beq.n	800b00c <HAL_ADC_ConfigChannel+0x754>
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4923      	ldr	r1, [pc, #140]	@ (800b070 <HAL_ADC_ConfigChannel+0x7b8>)
 800afe4:	428b      	cmp	r3, r1
 800afe6:	d00f      	beq.n	800b008 <HAL_ADC_ConfigChannel+0x750>
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4926      	ldr	r1, [pc, #152]	@ (800b088 <HAL_ADC_ConfigChannel+0x7d0>)
 800afee:	428b      	cmp	r3, r1
 800aff0:	d008      	beq.n	800b004 <HAL_ADC_ConfigChannel+0x74c>
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	492b      	ldr	r1, [pc, #172]	@ (800b0a4 <HAL_ADC_ConfigChannel+0x7ec>)
 800aff8:	428b      	cmp	r3, r1
 800affa:	d101      	bne.n	800b000 <HAL_ADC_ConfigChannel+0x748>
 800affc:	4b2a      	ldr	r3, [pc, #168]	@ (800b0a8 <HAL_ADC_ConfigChannel+0x7f0>)
 800affe:	e012      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800b000:	2300      	movs	r3, #0
 800b002:	e010      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800b004:	4b27      	ldr	r3, [pc, #156]	@ (800b0a4 <HAL_ADC_ConfigChannel+0x7ec>)
 800b006:	e00e      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800b008:	4b1a      	ldr	r3, [pc, #104]	@ (800b074 <HAL_ADC_ConfigChannel+0x7bc>)
 800b00a:	e00c      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800b00c:	4b18      	ldr	r3, [pc, #96]	@ (800b070 <HAL_ADC_ConfigChannel+0x7b8>)
 800b00e:	e00a      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800b010:	4b1e      	ldr	r3, [pc, #120]	@ (800b08c <HAL_ADC_ConfigChannel+0x7d4>)
 800b012:	e008      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800b014:	4b1e      	ldr	r3, [pc, #120]	@ (800b090 <HAL_ADC_ConfigChannel+0x7d8>)
 800b016:	e006      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800b018:	4b1e      	ldr	r3, [pc, #120]	@ (800b094 <HAL_ADC_ConfigChannel+0x7dc>)
 800b01a:	e004      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800b01c:	4b1e      	ldr	r3, [pc, #120]	@ (800b098 <HAL_ADC_ConfigChannel+0x7e0>)
 800b01e:	e002      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800b020:	2301      	movs	r3, #1
 800b022:	e000      	b.n	800b026 <HAL_ADC_ConfigChannel+0x76e>
 800b024:	2300      	movs	r3, #0
 800b026:	4619      	mov	r1, r3
 800b028:	4610      	mov	r0, r2
 800b02a:	f7fe fc0d 	bl	8009848 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	f280 80f6 	bge.w	800b224 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a05      	ldr	r2, [pc, #20]	@ (800b054 <HAL_ADC_ConfigChannel+0x79c>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d004      	beq.n	800b04c <HAL_ADC_ConfigChannel+0x794>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a15      	ldr	r2, [pc, #84]	@ (800b09c <HAL_ADC_ConfigChannel+0x7e4>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d131      	bne.n	800b0b0 <HAL_ADC_ConfigChannel+0x7f8>
 800b04c:	4b17      	ldr	r3, [pc, #92]	@ (800b0ac <HAL_ADC_ConfigChannel+0x7f4>)
 800b04e:	e030      	b.n	800b0b2 <HAL_ADC_ConfigChannel+0x7fa>
 800b050:	47ff0000 	.word	0x47ff0000
 800b054:	40022000 	.word	0x40022000
 800b058:	04300002 	.word	0x04300002
 800b05c:	08600004 	.word	0x08600004
 800b060:	0c900008 	.word	0x0c900008
 800b064:	10c00010 	.word	0x10c00010
 800b068:	14f00020 	.word	0x14f00020
 800b06c:	2a000400 	.word	0x2a000400
 800b070:	2e300800 	.word	0x2e300800
 800b074:	32601000 	.word	0x32601000
 800b078:	43210000 	.word	0x43210000
 800b07c:	4b840000 	.word	0x4b840000
 800b080:	4fb80000 	.word	0x4fb80000
 800b084:	47520000 	.word	0x47520000
 800b088:	36902000 	.word	0x36902000
 800b08c:	25b00200 	.word	0x25b00200
 800b090:	21800100 	.word	0x21800100
 800b094:	1d500080 	.word	0x1d500080
 800b098:	19200040 	.word	0x19200040
 800b09c:	40022100 	.word	0x40022100
 800b0a0:	58026000 	.word	0x58026000
 800b0a4:	3ac04000 	.word	0x3ac04000
 800b0a8:	3ef08000 	.word	0x3ef08000
 800b0ac:	40022300 	.word	0x40022300
 800b0b0:	4b61      	ldr	r3, [pc, #388]	@ (800b238 <HAL_ADC_ConfigChannel+0x980>)
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fe fbba 	bl	800982c <LL_ADC_GetCommonPathInternalCh>
 800b0b8:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a5f      	ldr	r2, [pc, #380]	@ (800b23c <HAL_ADC_ConfigChannel+0x984>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d004      	beq.n	800b0ce <HAL_ADC_ConfigChannel+0x816>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a5d      	ldr	r2, [pc, #372]	@ (800b240 <HAL_ADC_ConfigChannel+0x988>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d10e      	bne.n	800b0ec <HAL_ADC_ConfigChannel+0x834>
 800b0ce:	485b      	ldr	r0, [pc, #364]	@ (800b23c <HAL_ADC_ConfigChannel+0x984>)
 800b0d0:	f7fe fe5e 	bl	8009d90 <LL_ADC_IsEnabled>
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	485a      	ldr	r0, [pc, #360]	@ (800b240 <HAL_ADC_ConfigChannel+0x988>)
 800b0d8:	f7fe fe5a 	bl	8009d90 <LL_ADC_IsEnabled>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	4323      	orrs	r3, r4
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	bf0c      	ite	eq
 800b0e4:	2301      	moveq	r3, #1
 800b0e6:	2300      	movne	r3, #0
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	e008      	b.n	800b0fe <HAL_ADC_ConfigChannel+0x846>
 800b0ec:	4855      	ldr	r0, [pc, #340]	@ (800b244 <HAL_ADC_ConfigChannel+0x98c>)
 800b0ee:	f7fe fe4f 	bl	8009d90 <LL_ADC_IsEnabled>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	bf0c      	ite	eq
 800b0f8:	2301      	moveq	r3, #1
 800b0fa:	2300      	movne	r3, #0
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d07d      	beq.n	800b1fe <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a50      	ldr	r2, [pc, #320]	@ (800b248 <HAL_ADC_ConfigChannel+0x990>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d130      	bne.n	800b16e <HAL_ADC_ConfigChannel+0x8b6>
 800b10c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b10e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b112:	2b00      	cmp	r3, #0
 800b114:	d12b      	bne.n	800b16e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a4a      	ldr	r2, [pc, #296]	@ (800b244 <HAL_ADC_ConfigChannel+0x98c>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	f040 8081 	bne.w	800b224 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a45      	ldr	r2, [pc, #276]	@ (800b23c <HAL_ADC_ConfigChannel+0x984>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d004      	beq.n	800b136 <HAL_ADC_ConfigChannel+0x87e>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a43      	ldr	r2, [pc, #268]	@ (800b240 <HAL_ADC_ConfigChannel+0x988>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d101      	bne.n	800b13a <HAL_ADC_ConfigChannel+0x882>
 800b136:	4a45      	ldr	r2, [pc, #276]	@ (800b24c <HAL_ADC_ConfigChannel+0x994>)
 800b138:	e000      	b.n	800b13c <HAL_ADC_ConfigChannel+0x884>
 800b13a:	4a3f      	ldr	r2, [pc, #252]	@ (800b238 <HAL_ADC_ConfigChannel+0x980>)
 800b13c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b13e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b142:	4619      	mov	r1, r3
 800b144:	4610      	mov	r0, r2
 800b146:	f7fe fb5e 	bl	8009806 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b14a:	4b41      	ldr	r3, [pc, #260]	@ (800b250 <HAL_ADC_ConfigChannel+0x998>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	099b      	lsrs	r3, r3, #6
 800b150:	4a40      	ldr	r2, [pc, #256]	@ (800b254 <HAL_ADC_ConfigChannel+0x99c>)
 800b152:	fba2 2303 	umull	r2, r3, r2, r3
 800b156:	099b      	lsrs	r3, r3, #6
 800b158:	3301      	adds	r3, #1
 800b15a:	005b      	lsls	r3, r3, #1
 800b15c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800b15e:	e002      	b.n	800b166 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3b01      	subs	r3, #1
 800b164:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1f9      	bne.n	800b160 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b16c:	e05a      	b.n	800b224 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a39      	ldr	r2, [pc, #228]	@ (800b258 <HAL_ADC_ConfigChannel+0x9a0>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d11e      	bne.n	800b1b6 <HAL_ADC_ConfigChannel+0x8fe>
 800b178:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b17a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d119      	bne.n	800b1b6 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a2f      	ldr	r2, [pc, #188]	@ (800b244 <HAL_ADC_ConfigChannel+0x98c>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d14b      	bne.n	800b224 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a2a      	ldr	r2, [pc, #168]	@ (800b23c <HAL_ADC_ConfigChannel+0x984>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d004      	beq.n	800b1a0 <HAL_ADC_ConfigChannel+0x8e8>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a29      	ldr	r2, [pc, #164]	@ (800b240 <HAL_ADC_ConfigChannel+0x988>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d101      	bne.n	800b1a4 <HAL_ADC_ConfigChannel+0x8ec>
 800b1a0:	4a2a      	ldr	r2, [pc, #168]	@ (800b24c <HAL_ADC_ConfigChannel+0x994>)
 800b1a2:	e000      	b.n	800b1a6 <HAL_ADC_ConfigChannel+0x8ee>
 800b1a4:	4a24      	ldr	r2, [pc, #144]	@ (800b238 <HAL_ADC_ConfigChannel+0x980>)
 800b1a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b1a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	f7fe fb29 	bl	8009806 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b1b4:	e036      	b.n	800b224 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a28      	ldr	r2, [pc, #160]	@ (800b25c <HAL_ADC_ConfigChannel+0x9a4>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d131      	bne.n	800b224 <HAL_ADC_ConfigChannel+0x96c>
 800b1c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b1c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d12c      	bne.n	800b224 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a1d      	ldr	r2, [pc, #116]	@ (800b244 <HAL_ADC_ConfigChannel+0x98c>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d127      	bne.n	800b224 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a18      	ldr	r2, [pc, #96]	@ (800b23c <HAL_ADC_ConfigChannel+0x984>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d004      	beq.n	800b1e8 <HAL_ADC_ConfigChannel+0x930>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a17      	ldr	r2, [pc, #92]	@ (800b240 <HAL_ADC_ConfigChannel+0x988>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d101      	bne.n	800b1ec <HAL_ADC_ConfigChannel+0x934>
 800b1e8:	4a18      	ldr	r2, [pc, #96]	@ (800b24c <HAL_ADC_ConfigChannel+0x994>)
 800b1ea:	e000      	b.n	800b1ee <HAL_ADC_ConfigChannel+0x936>
 800b1ec:	4a12      	ldr	r2, [pc, #72]	@ (800b238 <HAL_ADC_ConfigChannel+0x980>)
 800b1ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b1f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4610      	mov	r0, r2
 800b1f8:	f7fe fb05 	bl	8009806 <LL_ADC_SetCommonPathInternalCh>
 800b1fc:	e012      	b.n	800b224 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b202:	f043 0220 	orr.w	r2, r3, #32
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800b210:	e008      	b.n	800b224 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b216:	f043 0220 	orr.w	r2, r3, #32
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800b22c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800b230:	4618      	mov	r0, r3
 800b232:	3794      	adds	r7, #148	@ 0x94
 800b234:	46bd      	mov	sp, r7
 800b236:	bd90      	pop	{r4, r7, pc}
 800b238:	58026300 	.word	0x58026300
 800b23c:	40022000 	.word	0x40022000
 800b240:	40022100 	.word	0x40022100
 800b244:	58026000 	.word	0x58026000
 800b248:	c7520000 	.word	0xc7520000
 800b24c:	40022300 	.word	0x40022300
 800b250:	24000004 	.word	0x24000004
 800b254:	053e2d63 	.word	0x053e2d63
 800b258:	c3210000 	.word	0xc3210000
 800b25c:	cb840000 	.word	0xcb840000

0800b260 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7fe fd8f 	bl	8009d90 <LL_ADC_IsEnabled>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d16e      	bne.n	800b356 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	689a      	ldr	r2, [r3, #8]
 800b27e:	4b38      	ldr	r3, [pc, #224]	@ (800b360 <ADC_Enable+0x100>)
 800b280:	4013      	ands	r3, r2
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00d      	beq.n	800b2a2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b28a:	f043 0210 	orr.w	r2, r3, #16
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b296:	f043 0201 	orr.w	r2, r3, #1
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e05a      	b.n	800b358 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fe fd5e 	bl	8009d68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b2ac:	f7fe fa68 	bl	8009780 <HAL_GetTick>
 800b2b0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a2b      	ldr	r2, [pc, #172]	@ (800b364 <ADC_Enable+0x104>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d004      	beq.n	800b2c6 <ADC_Enable+0x66>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a29      	ldr	r2, [pc, #164]	@ (800b368 <ADC_Enable+0x108>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d101      	bne.n	800b2ca <ADC_Enable+0x6a>
 800b2c6:	4b29      	ldr	r3, [pc, #164]	@ (800b36c <ADC_Enable+0x10c>)
 800b2c8:	e000      	b.n	800b2cc <ADC_Enable+0x6c>
 800b2ca:	4b29      	ldr	r3, [pc, #164]	@ (800b370 <ADC_Enable+0x110>)
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fe fce1 	bl	8009c94 <LL_ADC_GetMultimode>
 800b2d2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a23      	ldr	r2, [pc, #140]	@ (800b368 <ADC_Enable+0x108>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d002      	beq.n	800b2e4 <ADC_Enable+0x84>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	e000      	b.n	800b2e6 <ADC_Enable+0x86>
 800b2e4:	4b1f      	ldr	r3, [pc, #124]	@ (800b364 <ADC_Enable+0x104>)
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	6812      	ldr	r2, [r2, #0]
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d02c      	beq.n	800b348 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d130      	bne.n	800b356 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b2f4:	e028      	b.n	800b348 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fe fd48 	bl	8009d90 <LL_ADC_IsEnabled>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d104      	bne.n	800b310 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fe fd2c 	bl	8009d68 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b310:	f7fe fa36 	bl	8009780 <HAL_GetTick>
 800b314:	4602      	mov	r2, r0
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d914      	bls.n	800b348 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 0301 	and.w	r3, r3, #1
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d00d      	beq.n	800b348 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b330:	f043 0210 	orr.w	r2, r3, #16
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b33c:	f043 0201 	orr.w	r2, r3, #1
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	e007      	b.n	800b358 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	2b01      	cmp	r3, #1
 800b354:	d1cf      	bne.n	800b2f6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	8000003f 	.word	0x8000003f
 800b364:	40022000 	.word	0x40022000
 800b368:	40022100 	.word	0x40022100
 800b36c:	40022300 	.word	0x40022300
 800b370:	58026300 	.word	0x58026300

0800b374 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b380:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b386:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d14b      	bne.n	800b426 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b392:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 0308 	and.w	r3, r3, #8
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d021      	beq.n	800b3ec <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7fe fb77 	bl	8009aa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d032      	beq.n	800b41e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d12b      	bne.n	800b41e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d11f      	bne.n	800b41e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3e2:	f043 0201 	orr.w	r2, r3, #1
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	661a      	str	r2, [r3, #96]	@ 0x60
 800b3ea:	e018      	b.n	800b41e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	f003 0303 	and.w	r3, r3, #3
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d111      	bne.n	800b41e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b40a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d105      	bne.n	800b41e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b416:	f043 0201 	orr.w	r2, r3, #1
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f7ff fa22 	bl	800a868 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b424:	e00e      	b.n	800b444 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b42a:	f003 0310 	and.w	r3, r3, #16
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d003      	beq.n	800b43a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f7ff fa36 	bl	800a8a4 <HAL_ADC_ErrorCallback>
}
 800b438:	e004      	b.n	800b444 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b43e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	4798      	blx	r3
}
 800b444:	bf00      	nop
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b458:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f7ff fa0e 	bl	800a87c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b460:	bf00      	nop
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b474:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b47a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b486:	f043 0204 	orr.w	r2, r3, #4
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f7ff fa08 	bl	800a8a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b494:	bf00      	nop
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a6c      	ldr	r2, [pc, #432]	@ (800b65c <ADC_ConfigureBoostMode+0x1c0>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d004      	beq.n	800b4b8 <ADC_ConfigureBoostMode+0x1c>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a6b      	ldr	r2, [pc, #428]	@ (800b660 <ADC_ConfigureBoostMode+0x1c4>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d109      	bne.n	800b4cc <ADC_ConfigureBoostMode+0x30>
 800b4b8:	4b6a      	ldr	r3, [pc, #424]	@ (800b664 <ADC_ConfigureBoostMode+0x1c8>)
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	bf14      	ite	ne
 800b4c4:	2301      	movne	r3, #1
 800b4c6:	2300      	moveq	r3, #0
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	e008      	b.n	800b4de <ADC_ConfigureBoostMode+0x42>
 800b4cc:	4b66      	ldr	r3, [pc, #408]	@ (800b668 <ADC_ConfigureBoostMode+0x1cc>)
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	bf14      	ite	ne
 800b4d8:	2301      	movne	r3, #1
 800b4da:	2300      	moveq	r3, #0
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d01c      	beq.n	800b51c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800b4e2:	f006 fe8b 	bl	80121fc <HAL_RCC_GetHCLKFreq>
 800b4e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b4f0:	d010      	beq.n	800b514 <ADC_ConfigureBoostMode+0x78>
 800b4f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b4f6:	d873      	bhi.n	800b5e0 <ADC_ConfigureBoostMode+0x144>
 800b4f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4fc:	d002      	beq.n	800b504 <ADC_ConfigureBoostMode+0x68>
 800b4fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b502:	d16d      	bne.n	800b5e0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	0c1b      	lsrs	r3, r3, #16
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b510:	60fb      	str	r3, [r7, #12]
        break;
 800b512:	e068      	b.n	800b5e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	089b      	lsrs	r3, r3, #2
 800b518:	60fb      	str	r3, [r7, #12]
        break;
 800b51a:	e064      	b.n	800b5e6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800b51c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b520:	f04f 0100 	mov.w	r1, #0
 800b524:	f008 f866 	bl	80135f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b528:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b532:	d051      	beq.n	800b5d8 <ADC_ConfigureBoostMode+0x13c>
 800b534:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b538:	d854      	bhi.n	800b5e4 <ADC_ConfigureBoostMode+0x148>
 800b53a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b53e:	d047      	beq.n	800b5d0 <ADC_ConfigureBoostMode+0x134>
 800b540:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b544:	d84e      	bhi.n	800b5e4 <ADC_ConfigureBoostMode+0x148>
 800b546:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b54a:	d03d      	beq.n	800b5c8 <ADC_ConfigureBoostMode+0x12c>
 800b54c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b550:	d848      	bhi.n	800b5e4 <ADC_ConfigureBoostMode+0x148>
 800b552:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b556:	d033      	beq.n	800b5c0 <ADC_ConfigureBoostMode+0x124>
 800b558:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b55c:	d842      	bhi.n	800b5e4 <ADC_ConfigureBoostMode+0x148>
 800b55e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b562:	d029      	beq.n	800b5b8 <ADC_ConfigureBoostMode+0x11c>
 800b564:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b568:	d83c      	bhi.n	800b5e4 <ADC_ConfigureBoostMode+0x148>
 800b56a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b56e:	d01a      	beq.n	800b5a6 <ADC_ConfigureBoostMode+0x10a>
 800b570:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b574:	d836      	bhi.n	800b5e4 <ADC_ConfigureBoostMode+0x148>
 800b576:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b57a:	d014      	beq.n	800b5a6 <ADC_ConfigureBoostMode+0x10a>
 800b57c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b580:	d830      	bhi.n	800b5e4 <ADC_ConfigureBoostMode+0x148>
 800b582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b586:	d00e      	beq.n	800b5a6 <ADC_ConfigureBoostMode+0x10a>
 800b588:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b58c:	d82a      	bhi.n	800b5e4 <ADC_ConfigureBoostMode+0x148>
 800b58e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b592:	d008      	beq.n	800b5a6 <ADC_ConfigureBoostMode+0x10a>
 800b594:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b598:	d824      	bhi.n	800b5e4 <ADC_ConfigureBoostMode+0x148>
 800b59a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b59e:	d002      	beq.n	800b5a6 <ADC_ConfigureBoostMode+0x10a>
 800b5a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b5a4:	d11e      	bne.n	800b5e4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	0c9b      	lsrs	r3, r3, #18
 800b5ac:	005b      	lsls	r3, r3, #1
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b4:	60fb      	str	r3, [r7, #12]
        break;
 800b5b6:	e016      	b.n	800b5e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	091b      	lsrs	r3, r3, #4
 800b5bc:	60fb      	str	r3, [r7, #12]
        break;
 800b5be:	e012      	b.n	800b5e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	095b      	lsrs	r3, r3, #5
 800b5c4:	60fb      	str	r3, [r7, #12]
        break;
 800b5c6:	e00e      	b.n	800b5e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	099b      	lsrs	r3, r3, #6
 800b5cc:	60fb      	str	r3, [r7, #12]
        break;
 800b5ce:	e00a      	b.n	800b5e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	09db      	lsrs	r3, r3, #7
 800b5d4:	60fb      	str	r3, [r7, #12]
        break;
 800b5d6:	e006      	b.n	800b5e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	0a1b      	lsrs	r3, r3, #8
 800b5dc:	60fb      	str	r3, [r7, #12]
        break;
 800b5de:	e002      	b.n	800b5e6 <ADC_ConfigureBoostMode+0x14a>
        break;
 800b5e0:	bf00      	nop
 800b5e2:	e000      	b.n	800b5e6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800b5e4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	085b      	lsrs	r3, r3, #1
 800b5ea:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	4a1f      	ldr	r2, [pc, #124]	@ (800b66c <ADC_ConfigureBoostMode+0x1d0>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d808      	bhi.n	800b606 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	689a      	ldr	r2, [r3, #8]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b602:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b604:	e025      	b.n	800b652 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	4a19      	ldr	r2, [pc, #100]	@ (800b670 <ADC_ConfigureBoostMode+0x1d4>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d80a      	bhi.n	800b624 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b620:	609a      	str	r2, [r3, #8]
}
 800b622:	e016      	b.n	800b652 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4a13      	ldr	r2, [pc, #76]	@ (800b674 <ADC_ConfigureBoostMode+0x1d8>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d80a      	bhi.n	800b642 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b63e:	609a      	str	r2, [r3, #8]
}
 800b640:	e007      	b.n	800b652 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	689a      	ldr	r2, [r3, #8]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b650:	609a      	str	r2, [r3, #8]
}
 800b652:	bf00      	nop
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	40022000 	.word	0x40022000
 800b660:	40022100 	.word	0x40022100
 800b664:	40022300 	.word	0x40022300
 800b668:	58026300 	.word	0x58026300
 800b66c:	005f5e10 	.word	0x005f5e10
 800b670:	00bebc20 	.word	0x00bebc20
 800b674:	017d7840 	.word	0x017d7840

0800b678 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b6a8:	bf00      	nop
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b085      	sub	sp, #20
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f003 0307 	and.w	r3, r3, #7
 800b6ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b6ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b71c <__NVIC_SetPriorityGrouping+0x40>)
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b704:	4b06      	ldr	r3, [pc, #24]	@ (800b720 <__NVIC_SetPriorityGrouping+0x44>)
 800b706:	4313      	orrs	r3, r2
 800b708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b70a:	4a04      	ldr	r2, [pc, #16]	@ (800b71c <__NVIC_SetPriorityGrouping+0x40>)
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	60d3      	str	r3, [r2, #12]
}
 800b710:	bf00      	nop
 800b712:	3714      	adds	r7, #20
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	e000ed00 	.word	0xe000ed00
 800b720:	05fa0000 	.word	0x05fa0000

0800b724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b724:	b480      	push	{r7}
 800b726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b728:	4b04      	ldr	r3, [pc, #16]	@ (800b73c <__NVIC_GetPriorityGrouping+0x18>)
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	0a1b      	lsrs	r3, r3, #8
 800b72e:	f003 0307 	and.w	r3, r3, #7
}
 800b732:	4618      	mov	r0, r3
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	e000ed00 	.word	0xe000ed00

0800b740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	4603      	mov	r3, r0
 800b748:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b74a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	db0b      	blt.n	800b76a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b752:	88fb      	ldrh	r3, [r7, #6]
 800b754:	f003 021f 	and.w	r2, r3, #31
 800b758:	4907      	ldr	r1, [pc, #28]	@ (800b778 <__NVIC_EnableIRQ+0x38>)
 800b75a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b75e:	095b      	lsrs	r3, r3, #5
 800b760:	2001      	movs	r0, #1
 800b762:	fa00 f202 	lsl.w	r2, r0, r2
 800b766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b76a:	bf00      	nop
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	e000e100 	.word	0xe000e100

0800b77c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	4603      	mov	r3, r0
 800b784:	6039      	str	r1, [r7, #0]
 800b786:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b788:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	db0a      	blt.n	800b7a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	b2da      	uxtb	r2, r3
 800b794:	490c      	ldr	r1, [pc, #48]	@ (800b7c8 <__NVIC_SetPriority+0x4c>)
 800b796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b79a:	0112      	lsls	r2, r2, #4
 800b79c:	b2d2      	uxtb	r2, r2
 800b79e:	440b      	add	r3, r1
 800b7a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b7a4:	e00a      	b.n	800b7bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	4908      	ldr	r1, [pc, #32]	@ (800b7cc <__NVIC_SetPriority+0x50>)
 800b7ac:	88fb      	ldrh	r3, [r7, #6]
 800b7ae:	f003 030f 	and.w	r3, r3, #15
 800b7b2:	3b04      	subs	r3, #4
 800b7b4:	0112      	lsls	r2, r2, #4
 800b7b6:	b2d2      	uxtb	r2, r2
 800b7b8:	440b      	add	r3, r1
 800b7ba:	761a      	strb	r2, [r3, #24]
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	e000e100 	.word	0xe000e100
 800b7cc:	e000ed00 	.word	0xe000ed00

0800b7d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b089      	sub	sp, #36	@ 0x24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f003 0307 	and.w	r3, r3, #7
 800b7e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	f1c3 0307 	rsb	r3, r3, #7
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	bf28      	it	cs
 800b7ee:	2304      	movcs	r3, #4
 800b7f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	3304      	adds	r3, #4
 800b7f6:	2b06      	cmp	r3, #6
 800b7f8:	d902      	bls.n	800b800 <NVIC_EncodePriority+0x30>
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	3b03      	subs	r3, #3
 800b7fe:	e000      	b.n	800b802 <NVIC_EncodePriority+0x32>
 800b800:	2300      	movs	r3, #0
 800b802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b804:	f04f 32ff 	mov.w	r2, #4294967295
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	fa02 f303 	lsl.w	r3, r2, r3
 800b80e:	43da      	mvns	r2, r3
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	401a      	ands	r2, r3
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b818:	f04f 31ff 	mov.w	r1, #4294967295
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	fa01 f303 	lsl.w	r3, r1, r3
 800b822:	43d9      	mvns	r1, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b828:	4313      	orrs	r3, r2
         );
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3724      	adds	r7, #36	@ 0x24
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
	...

0800b838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	3b01      	subs	r3, #1
 800b844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b848:	d301      	bcc.n	800b84e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b84a:	2301      	movs	r3, #1
 800b84c:	e00f      	b.n	800b86e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b84e:	4a0a      	ldr	r2, [pc, #40]	@ (800b878 <SysTick_Config+0x40>)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	3b01      	subs	r3, #1
 800b854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b856:	210f      	movs	r1, #15
 800b858:	f04f 30ff 	mov.w	r0, #4294967295
 800b85c:	f7ff ff8e 	bl	800b77c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b860:	4b05      	ldr	r3, [pc, #20]	@ (800b878 <SysTick_Config+0x40>)
 800b862:	2200      	movs	r2, #0
 800b864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b866:	4b04      	ldr	r3, [pc, #16]	@ (800b878 <SysTick_Config+0x40>)
 800b868:	2207      	movs	r2, #7
 800b86a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	e000e010 	.word	0xe000e010

0800b87c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff ff29 	bl	800b6dc <__NVIC_SetPriorityGrouping>
}
 800b88a:	bf00      	nop
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b086      	sub	sp, #24
 800b896:	af00      	add	r7, sp, #0
 800b898:	4603      	mov	r3, r0
 800b89a:	60b9      	str	r1, [r7, #8]
 800b89c:	607a      	str	r2, [r7, #4]
 800b89e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b8a0:	f7ff ff40 	bl	800b724 <__NVIC_GetPriorityGrouping>
 800b8a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	68b9      	ldr	r1, [r7, #8]
 800b8aa:	6978      	ldr	r0, [r7, #20]
 800b8ac:	f7ff ff90 	bl	800b7d0 <NVIC_EncodePriority>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b8b6:	4611      	mov	r1, r2
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7ff ff5f 	bl	800b77c <__NVIC_SetPriority>
}
 800b8be:	bf00      	nop
 800b8c0:	3718      	adds	r7, #24
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b082      	sub	sp, #8
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b8d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7ff ff33 	bl	800b740 <__NVIC_EnableIRQ>
}
 800b8da:	bf00      	nop
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b082      	sub	sp, #8
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7ff ffa4 	bl	800b838 <SysTick_Config>
 800b8f0:	4603      	mov	r3, r0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
	...

0800b8fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b900:	f3bf 8f5f 	dmb	sy
}
 800b904:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b906:	4b07      	ldr	r3, [pc, #28]	@ (800b924 <HAL_MPU_Disable+0x28>)
 800b908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b90a:	4a06      	ldr	r2, [pc, #24]	@ (800b924 <HAL_MPU_Disable+0x28>)
 800b90c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b910:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b912:	4b05      	ldr	r3, [pc, #20]	@ (800b928 <HAL_MPU_Disable+0x2c>)
 800b914:	2200      	movs	r2, #0
 800b916:	605a      	str	r2, [r3, #4]
}
 800b918:	bf00      	nop
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	e000ed00 	.word	0xe000ed00
 800b928:	e000ed90 	.word	0xe000ed90

0800b92c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b934:	4a0b      	ldr	r2, [pc, #44]	@ (800b964 <HAL_MPU_Enable+0x38>)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f043 0301 	orr.w	r3, r3, #1
 800b93c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b93e:	4b0a      	ldr	r3, [pc, #40]	@ (800b968 <HAL_MPU_Enable+0x3c>)
 800b940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b942:	4a09      	ldr	r2, [pc, #36]	@ (800b968 <HAL_MPU_Enable+0x3c>)
 800b944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b948:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b94a:	f3bf 8f4f 	dsb	sy
}
 800b94e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b950:	f3bf 8f6f 	isb	sy
}
 800b954:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b956:	bf00      	nop
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
 800b962:	bf00      	nop
 800b964:	e000ed90 	.word	0xe000ed90
 800b968:	e000ed00 	.word	0xe000ed00

0800b96c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	785a      	ldrb	r2, [r3, #1]
 800b978:	4b1b      	ldr	r3, [pc, #108]	@ (800b9e8 <HAL_MPU_ConfigRegion+0x7c>)
 800b97a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b97c:	4b1a      	ldr	r3, [pc, #104]	@ (800b9e8 <HAL_MPU_ConfigRegion+0x7c>)
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	4a19      	ldr	r2, [pc, #100]	@ (800b9e8 <HAL_MPU_ConfigRegion+0x7c>)
 800b982:	f023 0301 	bic.w	r3, r3, #1
 800b986:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b988:	4a17      	ldr	r2, [pc, #92]	@ (800b9e8 <HAL_MPU_ConfigRegion+0x7c>)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	7b1b      	ldrb	r3, [r3, #12]
 800b994:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	7adb      	ldrb	r3, [r3, #11]
 800b99a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b99c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	7a9b      	ldrb	r3, [r3, #10]
 800b9a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b9a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	7b5b      	ldrb	r3, [r3, #13]
 800b9aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b9ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	7b9b      	ldrb	r3, [r3, #14]
 800b9b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b9b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	7bdb      	ldrb	r3, [r3, #15]
 800b9ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b9bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	7a5b      	ldrb	r3, [r3, #9]
 800b9c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b9c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	7a1b      	ldrb	r3, [r3, #8]
 800b9ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b9cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	7812      	ldrb	r2, [r2, #0]
 800b9d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b9d4:	4a04      	ldr	r2, [pc, #16]	@ (800b9e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b9d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b9d8:	6113      	str	r3, [r2, #16]
}
 800b9da:	bf00      	nop
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	e000ed90 	.word	0xe000ed90

0800b9ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b9f4:	f7fd fec4 	bl	8009780 <HAL_GetTick>
 800b9f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d101      	bne.n	800ba04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e312      	b.n	800c02a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a66      	ldr	r2, [pc, #408]	@ (800bba4 <HAL_DMA_Init+0x1b8>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d04a      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a65      	ldr	r2, [pc, #404]	@ (800bba8 <HAL_DMA_Init+0x1bc>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d045      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a63      	ldr	r2, [pc, #396]	@ (800bbac <HAL_DMA_Init+0x1c0>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d040      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a62      	ldr	r2, [pc, #392]	@ (800bbb0 <HAL_DMA_Init+0x1c4>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d03b      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a60      	ldr	r2, [pc, #384]	@ (800bbb4 <HAL_DMA_Init+0x1c8>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d036      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a5f      	ldr	r2, [pc, #380]	@ (800bbb8 <HAL_DMA_Init+0x1cc>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d031      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a5d      	ldr	r2, [pc, #372]	@ (800bbbc <HAL_DMA_Init+0x1d0>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d02c      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a5c      	ldr	r2, [pc, #368]	@ (800bbc0 <HAL_DMA_Init+0x1d4>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d027      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a5a      	ldr	r2, [pc, #360]	@ (800bbc4 <HAL_DMA_Init+0x1d8>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d022      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a59      	ldr	r2, [pc, #356]	@ (800bbc8 <HAL_DMA_Init+0x1dc>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d01d      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a57      	ldr	r2, [pc, #348]	@ (800bbcc <HAL_DMA_Init+0x1e0>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d018      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a56      	ldr	r2, [pc, #344]	@ (800bbd0 <HAL_DMA_Init+0x1e4>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d013      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a54      	ldr	r2, [pc, #336]	@ (800bbd4 <HAL_DMA_Init+0x1e8>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d00e      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a53      	ldr	r2, [pc, #332]	@ (800bbd8 <HAL_DMA_Init+0x1ec>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d009      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a51      	ldr	r2, [pc, #324]	@ (800bbdc <HAL_DMA_Init+0x1f0>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d004      	beq.n	800baa4 <HAL_DMA_Init+0xb8>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a50      	ldr	r2, [pc, #320]	@ (800bbe0 <HAL_DMA_Init+0x1f4>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d101      	bne.n	800baa8 <HAL_DMA_Init+0xbc>
 800baa4:	2301      	movs	r3, #1
 800baa6:	e000      	b.n	800baaa <HAL_DMA_Init+0xbe>
 800baa8:	2300      	movs	r3, #0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 813c 	beq.w	800bd28 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2202      	movs	r2, #2
 800bab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a37      	ldr	r2, [pc, #220]	@ (800bba4 <HAL_DMA_Init+0x1b8>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d04a      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a36      	ldr	r2, [pc, #216]	@ (800bba8 <HAL_DMA_Init+0x1bc>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d045      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a34      	ldr	r2, [pc, #208]	@ (800bbac <HAL_DMA_Init+0x1c0>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d040      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a33      	ldr	r2, [pc, #204]	@ (800bbb0 <HAL_DMA_Init+0x1c4>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d03b      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a31      	ldr	r2, [pc, #196]	@ (800bbb4 <HAL_DMA_Init+0x1c8>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d036      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a30      	ldr	r2, [pc, #192]	@ (800bbb8 <HAL_DMA_Init+0x1cc>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d031      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a2e      	ldr	r2, [pc, #184]	@ (800bbbc <HAL_DMA_Init+0x1d0>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d02c      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a2d      	ldr	r2, [pc, #180]	@ (800bbc0 <HAL_DMA_Init+0x1d4>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d027      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a2b      	ldr	r2, [pc, #172]	@ (800bbc4 <HAL_DMA_Init+0x1d8>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d022      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a2a      	ldr	r2, [pc, #168]	@ (800bbc8 <HAL_DMA_Init+0x1dc>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d01d      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a28      	ldr	r2, [pc, #160]	@ (800bbcc <HAL_DMA_Init+0x1e0>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d018      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a27      	ldr	r2, [pc, #156]	@ (800bbd0 <HAL_DMA_Init+0x1e4>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d013      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a25      	ldr	r2, [pc, #148]	@ (800bbd4 <HAL_DMA_Init+0x1e8>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d00e      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a24      	ldr	r2, [pc, #144]	@ (800bbd8 <HAL_DMA_Init+0x1ec>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d009      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a22      	ldr	r2, [pc, #136]	@ (800bbdc <HAL_DMA_Init+0x1f0>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d004      	beq.n	800bb60 <HAL_DMA_Init+0x174>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a21      	ldr	r2, [pc, #132]	@ (800bbe0 <HAL_DMA_Init+0x1f4>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d108      	bne.n	800bb72 <HAL_DMA_Init+0x186>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f022 0201 	bic.w	r2, r2, #1
 800bb6e:	601a      	str	r2, [r3, #0]
 800bb70:	e007      	b.n	800bb82 <HAL_DMA_Init+0x196>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f022 0201 	bic.w	r2, r2, #1
 800bb80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800bb82:	e02f      	b.n	800bbe4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bb84:	f7fd fdfc 	bl	8009780 <HAL_GetTick>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	2b05      	cmp	r3, #5
 800bb90:	d928      	bls.n	800bbe4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2220      	movs	r2, #32
 800bb96:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2203      	movs	r2, #3
 800bb9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	e242      	b.n	800c02a <HAL_DMA_Init+0x63e>
 800bba4:	40020010 	.word	0x40020010
 800bba8:	40020028 	.word	0x40020028
 800bbac:	40020040 	.word	0x40020040
 800bbb0:	40020058 	.word	0x40020058
 800bbb4:	40020070 	.word	0x40020070
 800bbb8:	40020088 	.word	0x40020088
 800bbbc:	400200a0 	.word	0x400200a0
 800bbc0:	400200b8 	.word	0x400200b8
 800bbc4:	40020410 	.word	0x40020410
 800bbc8:	40020428 	.word	0x40020428
 800bbcc:	40020440 	.word	0x40020440
 800bbd0:	40020458 	.word	0x40020458
 800bbd4:	40020470 	.word	0x40020470
 800bbd8:	40020488 	.word	0x40020488
 800bbdc:	400204a0 	.word	0x400204a0
 800bbe0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f003 0301 	and.w	r3, r3, #1
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1c8      	bne.n	800bb84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bbfa:	697a      	ldr	r2, [r7, #20]
 800bbfc:	4b83      	ldr	r3, [pc, #524]	@ (800be0c <HAL_DMA_Init+0x420>)
 800bbfe:	4013      	ands	r3, r2
 800bc00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800bc0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bc16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	699b      	ldr	r3, [r3, #24]
 800bc1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bc22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6a1b      	ldr	r3, [r3, #32]
 800bc28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc34:	2b04      	cmp	r3, #4
 800bc36:	d107      	bne.n	800bc48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc40:	4313      	orrs	r3, r2
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	4313      	orrs	r3, r2
 800bc46:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	2b28      	cmp	r3, #40	@ 0x28
 800bc4e:	d903      	bls.n	800bc58 <HAL_DMA_Init+0x26c>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc56:	d91f      	bls.n	800bc98 <HAL_DMA_Init+0x2ac>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	2b3e      	cmp	r3, #62	@ 0x3e
 800bc5e:	d903      	bls.n	800bc68 <HAL_DMA_Init+0x27c>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	2b42      	cmp	r3, #66	@ 0x42
 800bc66:	d917      	bls.n	800bc98 <HAL_DMA_Init+0x2ac>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	2b46      	cmp	r3, #70	@ 0x46
 800bc6e:	d903      	bls.n	800bc78 <HAL_DMA_Init+0x28c>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	2b48      	cmp	r3, #72	@ 0x48
 800bc76:	d90f      	bls.n	800bc98 <HAL_DMA_Init+0x2ac>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	2b4e      	cmp	r3, #78	@ 0x4e
 800bc7e:	d903      	bls.n	800bc88 <HAL_DMA_Init+0x29c>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	2b52      	cmp	r3, #82	@ 0x52
 800bc86:	d907      	bls.n	800bc98 <HAL_DMA_Init+0x2ac>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	2b73      	cmp	r3, #115	@ 0x73
 800bc8e:	d905      	bls.n	800bc9c <HAL_DMA_Init+0x2b0>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	2b77      	cmp	r3, #119	@ 0x77
 800bc96:	d801      	bhi.n	800bc9c <HAL_DMA_Init+0x2b0>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e000      	b.n	800bc9e <HAL_DMA_Init+0x2b2>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bca8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	695b      	ldr	r3, [r3, #20]
 800bcb8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	f023 0307 	bic.w	r3, r3, #7
 800bcc0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc6:	697a      	ldr	r2, [r7, #20]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd0:	2b04      	cmp	r3, #4
 800bcd2:	d117      	bne.n	800bd04 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd8:	697a      	ldr	r2, [r7, #20]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00e      	beq.n	800bd04 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f002 fb48 	bl	800e37c <DMA_CheckFifoParam>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d008      	beq.n	800bd04 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2240      	movs	r2, #64	@ 0x40
 800bcf6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800bd00:	2301      	movs	r3, #1
 800bd02:	e192      	b.n	800c02a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	697a      	ldr	r2, [r7, #20]
 800bd0a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f002 fa83 	bl	800e218 <DMA_CalcBaseAndBitshift>
 800bd12:	4603      	mov	r3, r0
 800bd14:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd1a:	f003 031f 	and.w	r3, r3, #31
 800bd1e:	223f      	movs	r2, #63	@ 0x3f
 800bd20:	409a      	lsls	r2, r3
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	609a      	str	r2, [r3, #8]
 800bd26:	e0c8      	b.n	800beba <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a38      	ldr	r2, [pc, #224]	@ (800be10 <HAL_DMA_Init+0x424>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d022      	beq.n	800bd78 <HAL_DMA_Init+0x38c>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a37      	ldr	r2, [pc, #220]	@ (800be14 <HAL_DMA_Init+0x428>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d01d      	beq.n	800bd78 <HAL_DMA_Init+0x38c>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a35      	ldr	r2, [pc, #212]	@ (800be18 <HAL_DMA_Init+0x42c>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d018      	beq.n	800bd78 <HAL_DMA_Init+0x38c>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a34      	ldr	r2, [pc, #208]	@ (800be1c <HAL_DMA_Init+0x430>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d013      	beq.n	800bd78 <HAL_DMA_Init+0x38c>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a32      	ldr	r2, [pc, #200]	@ (800be20 <HAL_DMA_Init+0x434>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d00e      	beq.n	800bd78 <HAL_DMA_Init+0x38c>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a31      	ldr	r2, [pc, #196]	@ (800be24 <HAL_DMA_Init+0x438>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d009      	beq.n	800bd78 <HAL_DMA_Init+0x38c>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a2f      	ldr	r2, [pc, #188]	@ (800be28 <HAL_DMA_Init+0x43c>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d004      	beq.n	800bd78 <HAL_DMA_Init+0x38c>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a2e      	ldr	r2, [pc, #184]	@ (800be2c <HAL_DMA_Init+0x440>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d101      	bne.n	800bd7c <HAL_DMA_Init+0x390>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e000      	b.n	800bd7e <HAL_DMA_Init+0x392>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f000 8092 	beq.w	800bea8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a21      	ldr	r2, [pc, #132]	@ (800be10 <HAL_DMA_Init+0x424>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d021      	beq.n	800bdd2 <HAL_DMA_Init+0x3e6>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4a20      	ldr	r2, [pc, #128]	@ (800be14 <HAL_DMA_Init+0x428>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d01c      	beq.n	800bdd2 <HAL_DMA_Init+0x3e6>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a1e      	ldr	r2, [pc, #120]	@ (800be18 <HAL_DMA_Init+0x42c>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d017      	beq.n	800bdd2 <HAL_DMA_Init+0x3e6>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a1d      	ldr	r2, [pc, #116]	@ (800be1c <HAL_DMA_Init+0x430>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d012      	beq.n	800bdd2 <HAL_DMA_Init+0x3e6>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a1b      	ldr	r2, [pc, #108]	@ (800be20 <HAL_DMA_Init+0x434>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d00d      	beq.n	800bdd2 <HAL_DMA_Init+0x3e6>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a1a      	ldr	r2, [pc, #104]	@ (800be24 <HAL_DMA_Init+0x438>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d008      	beq.n	800bdd2 <HAL_DMA_Init+0x3e6>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a18      	ldr	r2, [pc, #96]	@ (800be28 <HAL_DMA_Init+0x43c>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d003      	beq.n	800bdd2 <HAL_DMA_Init+0x3e6>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a17      	ldr	r2, [pc, #92]	@ (800be2c <HAL_DMA_Init+0x440>)
 800bdd0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2202      	movs	r2, #2
 800bdd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800bdea:	697a      	ldr	r2, [r7, #20]
 800bdec:	4b10      	ldr	r3, [pc, #64]	@ (800be30 <HAL_DMA_Init+0x444>)
 800bdee:	4013      	ands	r3, r2
 800bdf0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	2b40      	cmp	r3, #64	@ 0x40
 800bdf8:	d01c      	beq.n	800be34 <HAL_DMA_Init+0x448>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	2b80      	cmp	r3, #128	@ 0x80
 800be00:	d102      	bne.n	800be08 <HAL_DMA_Init+0x41c>
 800be02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800be06:	e016      	b.n	800be36 <HAL_DMA_Init+0x44a>
 800be08:	2300      	movs	r3, #0
 800be0a:	e014      	b.n	800be36 <HAL_DMA_Init+0x44a>
 800be0c:	fe10803f 	.word	0xfe10803f
 800be10:	58025408 	.word	0x58025408
 800be14:	5802541c 	.word	0x5802541c
 800be18:	58025430 	.word	0x58025430
 800be1c:	58025444 	.word	0x58025444
 800be20:	58025458 	.word	0x58025458
 800be24:	5802546c 	.word	0x5802546c
 800be28:	58025480 	.word	0x58025480
 800be2c:	58025494 	.word	0x58025494
 800be30:	fffe000f 	.word	0xfffe000f
 800be34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	68d2      	ldr	r2, [r2, #12]
 800be3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800be3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800be44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	695b      	ldr	r3, [r3, #20]
 800be4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800be4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	699b      	ldr	r3, [r3, #24]
 800be52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800be54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	69db      	ldr	r3, [r3, #28]
 800be5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800be5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800be64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800be66:	697a      	ldr	r2, [r7, #20]
 800be68:	4313      	orrs	r3, r2
 800be6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	461a      	mov	r2, r3
 800be7a:	4b6e      	ldr	r3, [pc, #440]	@ (800c034 <HAL_DMA_Init+0x648>)
 800be7c:	4413      	add	r3, r2
 800be7e:	4a6e      	ldr	r2, [pc, #440]	@ (800c038 <HAL_DMA_Init+0x64c>)
 800be80:	fba2 2303 	umull	r2, r3, r2, r3
 800be84:	091b      	lsrs	r3, r3, #4
 800be86:	009a      	lsls	r2, r3, #2
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f002 f9c3 	bl	800e218 <DMA_CalcBaseAndBitshift>
 800be92:	4603      	mov	r3, r0
 800be94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be9a:	f003 031f 	and.w	r3, r3, #31
 800be9e:	2201      	movs	r2, #1
 800bea0:	409a      	lsls	r2, r3
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	605a      	str	r2, [r3, #4]
 800bea6:	e008      	b.n	800beba <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2240      	movs	r2, #64	@ 0x40
 800beac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2203      	movs	r2, #3
 800beb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800beb6:	2301      	movs	r3, #1
 800beb8:	e0b7      	b.n	800c02a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a5f      	ldr	r2, [pc, #380]	@ (800c03c <HAL_DMA_Init+0x650>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d072      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a5d      	ldr	r2, [pc, #372]	@ (800c040 <HAL_DMA_Init+0x654>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d06d      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a5c      	ldr	r2, [pc, #368]	@ (800c044 <HAL_DMA_Init+0x658>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d068      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a5a      	ldr	r2, [pc, #360]	@ (800c048 <HAL_DMA_Init+0x65c>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d063      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a59      	ldr	r2, [pc, #356]	@ (800c04c <HAL_DMA_Init+0x660>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d05e      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a57      	ldr	r2, [pc, #348]	@ (800c050 <HAL_DMA_Init+0x664>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d059      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a56      	ldr	r2, [pc, #344]	@ (800c054 <HAL_DMA_Init+0x668>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d054      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a54      	ldr	r2, [pc, #336]	@ (800c058 <HAL_DMA_Init+0x66c>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d04f      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a53      	ldr	r2, [pc, #332]	@ (800c05c <HAL_DMA_Init+0x670>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d04a      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a51      	ldr	r2, [pc, #324]	@ (800c060 <HAL_DMA_Init+0x674>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d045      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a50      	ldr	r2, [pc, #320]	@ (800c064 <HAL_DMA_Init+0x678>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d040      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a4e      	ldr	r2, [pc, #312]	@ (800c068 <HAL_DMA_Init+0x67c>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d03b      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a4d      	ldr	r2, [pc, #308]	@ (800c06c <HAL_DMA_Init+0x680>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d036      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a4b      	ldr	r2, [pc, #300]	@ (800c070 <HAL_DMA_Init+0x684>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d031      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a4a      	ldr	r2, [pc, #296]	@ (800c074 <HAL_DMA_Init+0x688>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d02c      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a48      	ldr	r2, [pc, #288]	@ (800c078 <HAL_DMA_Init+0x68c>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d027      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a47      	ldr	r2, [pc, #284]	@ (800c07c <HAL_DMA_Init+0x690>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d022      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a45      	ldr	r2, [pc, #276]	@ (800c080 <HAL_DMA_Init+0x694>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d01d      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a44      	ldr	r2, [pc, #272]	@ (800c084 <HAL_DMA_Init+0x698>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d018      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a42      	ldr	r2, [pc, #264]	@ (800c088 <HAL_DMA_Init+0x69c>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d013      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a41      	ldr	r2, [pc, #260]	@ (800c08c <HAL_DMA_Init+0x6a0>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d00e      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a3f      	ldr	r2, [pc, #252]	@ (800c090 <HAL_DMA_Init+0x6a4>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d009      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a3e      	ldr	r2, [pc, #248]	@ (800c094 <HAL_DMA_Init+0x6a8>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d004      	beq.n	800bfaa <HAL_DMA_Init+0x5be>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a3c      	ldr	r2, [pc, #240]	@ (800c098 <HAL_DMA_Init+0x6ac>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d101      	bne.n	800bfae <HAL_DMA_Init+0x5c2>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e000      	b.n	800bfb0 <HAL_DMA_Init+0x5c4>
 800bfae:	2300      	movs	r3, #0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d032      	beq.n	800c01a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f002 fa5d 	bl	800e474 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	2b80      	cmp	r3, #128	@ 0x80
 800bfc0:	d102      	bne.n	800bfc8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685a      	ldr	r2, [r3, #4]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bfd0:	b2d2      	uxtb	r2, r2
 800bfd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bfdc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d010      	beq.n	800c008 <HAL_DMA_Init+0x61c>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	2b08      	cmp	r3, #8
 800bfec:	d80c      	bhi.n	800c008 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f002 fada 	bl	800e5a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bff8:	2200      	movs	r2, #0
 800bffa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c004:	605a      	str	r2, [r3, #4]
 800c006:	e008      	b.n	800c01a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3718      	adds	r7, #24
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	a7fdabf8 	.word	0xa7fdabf8
 800c038:	cccccccd 	.word	0xcccccccd
 800c03c:	40020010 	.word	0x40020010
 800c040:	40020028 	.word	0x40020028
 800c044:	40020040 	.word	0x40020040
 800c048:	40020058 	.word	0x40020058
 800c04c:	40020070 	.word	0x40020070
 800c050:	40020088 	.word	0x40020088
 800c054:	400200a0 	.word	0x400200a0
 800c058:	400200b8 	.word	0x400200b8
 800c05c:	40020410 	.word	0x40020410
 800c060:	40020428 	.word	0x40020428
 800c064:	40020440 	.word	0x40020440
 800c068:	40020458 	.word	0x40020458
 800c06c:	40020470 	.word	0x40020470
 800c070:	40020488 	.word	0x40020488
 800c074:	400204a0 	.word	0x400204a0
 800c078:	400204b8 	.word	0x400204b8
 800c07c:	58025408 	.word	0x58025408
 800c080:	5802541c 	.word	0x5802541c
 800c084:	58025430 	.word	0x58025430
 800c088:	58025444 	.word	0x58025444
 800c08c:	58025458 	.word	0x58025458
 800c090:	5802546c 	.word	0x5802546c
 800c094:	58025480 	.word	0x58025480
 800c098:	58025494 	.word	0x58025494

0800c09c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b086      	sub	sp, #24
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
 800c0a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e226      	b.n	800c506 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d101      	bne.n	800c0c6 <HAL_DMA_Start_IT+0x2a>
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	e21f      	b.n	800c506 <HAL_DMA_Start_IT+0x46a>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	f040 820a 	bne.w	800c4f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2202      	movs	r2, #2
 800c0e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a68      	ldr	r2, [pc, #416]	@ (800c290 <HAL_DMA_Start_IT+0x1f4>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d04a      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a66      	ldr	r2, [pc, #408]	@ (800c294 <HAL_DMA_Start_IT+0x1f8>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d045      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a65      	ldr	r2, [pc, #404]	@ (800c298 <HAL_DMA_Start_IT+0x1fc>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d040      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a63      	ldr	r2, [pc, #396]	@ (800c29c <HAL_DMA_Start_IT+0x200>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d03b      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a62      	ldr	r2, [pc, #392]	@ (800c2a0 <HAL_DMA_Start_IT+0x204>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d036      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a60      	ldr	r2, [pc, #384]	@ (800c2a4 <HAL_DMA_Start_IT+0x208>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d031      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a5f      	ldr	r2, [pc, #380]	@ (800c2a8 <HAL_DMA_Start_IT+0x20c>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d02c      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a5d      	ldr	r2, [pc, #372]	@ (800c2ac <HAL_DMA_Start_IT+0x210>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d027      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a5c      	ldr	r2, [pc, #368]	@ (800c2b0 <HAL_DMA_Start_IT+0x214>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d022      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a5a      	ldr	r2, [pc, #360]	@ (800c2b4 <HAL_DMA_Start_IT+0x218>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d01d      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a59      	ldr	r2, [pc, #356]	@ (800c2b8 <HAL_DMA_Start_IT+0x21c>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d018      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a57      	ldr	r2, [pc, #348]	@ (800c2bc <HAL_DMA_Start_IT+0x220>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d013      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a56      	ldr	r2, [pc, #344]	@ (800c2c0 <HAL_DMA_Start_IT+0x224>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d00e      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a54      	ldr	r2, [pc, #336]	@ (800c2c4 <HAL_DMA_Start_IT+0x228>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d009      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a53      	ldr	r2, [pc, #332]	@ (800c2c8 <HAL_DMA_Start_IT+0x22c>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d004      	beq.n	800c18a <HAL_DMA_Start_IT+0xee>
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a51      	ldr	r2, [pc, #324]	@ (800c2cc <HAL_DMA_Start_IT+0x230>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d108      	bne.n	800c19c <HAL_DMA_Start_IT+0x100>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f022 0201 	bic.w	r2, r2, #1
 800c198:	601a      	str	r2, [r3, #0]
 800c19a:	e007      	b.n	800c1ac <HAL_DMA_Start_IT+0x110>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f022 0201 	bic.w	r2, r2, #1
 800c1aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	68b9      	ldr	r1, [r7, #8]
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f001 fe84 	bl	800dec0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a34      	ldr	r2, [pc, #208]	@ (800c290 <HAL_DMA_Start_IT+0x1f4>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d04a      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a33      	ldr	r2, [pc, #204]	@ (800c294 <HAL_DMA_Start_IT+0x1f8>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d045      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a31      	ldr	r2, [pc, #196]	@ (800c298 <HAL_DMA_Start_IT+0x1fc>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d040      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a30      	ldr	r2, [pc, #192]	@ (800c29c <HAL_DMA_Start_IT+0x200>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d03b      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a2e      	ldr	r2, [pc, #184]	@ (800c2a0 <HAL_DMA_Start_IT+0x204>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d036      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a2d      	ldr	r2, [pc, #180]	@ (800c2a4 <HAL_DMA_Start_IT+0x208>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d031      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a2b      	ldr	r2, [pc, #172]	@ (800c2a8 <HAL_DMA_Start_IT+0x20c>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d02c      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a2a      	ldr	r2, [pc, #168]	@ (800c2ac <HAL_DMA_Start_IT+0x210>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d027      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a28      	ldr	r2, [pc, #160]	@ (800c2b0 <HAL_DMA_Start_IT+0x214>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d022      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a27      	ldr	r2, [pc, #156]	@ (800c2b4 <HAL_DMA_Start_IT+0x218>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d01d      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a25      	ldr	r2, [pc, #148]	@ (800c2b8 <HAL_DMA_Start_IT+0x21c>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d018      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4a24      	ldr	r2, [pc, #144]	@ (800c2bc <HAL_DMA_Start_IT+0x220>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d013      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a22      	ldr	r2, [pc, #136]	@ (800c2c0 <HAL_DMA_Start_IT+0x224>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d00e      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a21      	ldr	r2, [pc, #132]	@ (800c2c4 <HAL_DMA_Start_IT+0x228>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d009      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4a1f      	ldr	r2, [pc, #124]	@ (800c2c8 <HAL_DMA_Start_IT+0x22c>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d004      	beq.n	800c258 <HAL_DMA_Start_IT+0x1bc>
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a1e      	ldr	r2, [pc, #120]	@ (800c2cc <HAL_DMA_Start_IT+0x230>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d101      	bne.n	800c25c <HAL_DMA_Start_IT+0x1c0>
 800c258:	2301      	movs	r3, #1
 800c25a:	e000      	b.n	800c25e <HAL_DMA_Start_IT+0x1c2>
 800c25c:	2300      	movs	r3, #0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d036      	beq.n	800c2d0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f023 021e 	bic.w	r2, r3, #30
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f042 0216 	orr.w	r2, r2, #22
 800c274:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d03e      	beq.n	800c2fc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f042 0208 	orr.w	r2, r2, #8
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	e035      	b.n	800c2fc <HAL_DMA_Start_IT+0x260>
 800c290:	40020010 	.word	0x40020010
 800c294:	40020028 	.word	0x40020028
 800c298:	40020040 	.word	0x40020040
 800c29c:	40020058 	.word	0x40020058
 800c2a0:	40020070 	.word	0x40020070
 800c2a4:	40020088 	.word	0x40020088
 800c2a8:	400200a0 	.word	0x400200a0
 800c2ac:	400200b8 	.word	0x400200b8
 800c2b0:	40020410 	.word	0x40020410
 800c2b4:	40020428 	.word	0x40020428
 800c2b8:	40020440 	.word	0x40020440
 800c2bc:	40020458 	.word	0x40020458
 800c2c0:	40020470 	.word	0x40020470
 800c2c4:	40020488 	.word	0x40020488
 800c2c8:	400204a0 	.word	0x400204a0
 800c2cc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f023 020e 	bic.w	r2, r3, #14
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f042 020a 	orr.w	r2, r2, #10
 800c2e2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d007      	beq.n	800c2fc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f042 0204 	orr.w	r2, r2, #4
 800c2fa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a83      	ldr	r2, [pc, #524]	@ (800c510 <HAL_DMA_Start_IT+0x474>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d072      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a82      	ldr	r2, [pc, #520]	@ (800c514 <HAL_DMA_Start_IT+0x478>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d06d      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a80      	ldr	r2, [pc, #512]	@ (800c518 <HAL_DMA_Start_IT+0x47c>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d068      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a7f      	ldr	r2, [pc, #508]	@ (800c51c <HAL_DMA_Start_IT+0x480>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d063      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a7d      	ldr	r2, [pc, #500]	@ (800c520 <HAL_DMA_Start_IT+0x484>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d05e      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a7c      	ldr	r2, [pc, #496]	@ (800c524 <HAL_DMA_Start_IT+0x488>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d059      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a7a      	ldr	r2, [pc, #488]	@ (800c528 <HAL_DMA_Start_IT+0x48c>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d054      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a79      	ldr	r2, [pc, #484]	@ (800c52c <HAL_DMA_Start_IT+0x490>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d04f      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a77      	ldr	r2, [pc, #476]	@ (800c530 <HAL_DMA_Start_IT+0x494>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d04a      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a76      	ldr	r2, [pc, #472]	@ (800c534 <HAL_DMA_Start_IT+0x498>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d045      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a74      	ldr	r2, [pc, #464]	@ (800c538 <HAL_DMA_Start_IT+0x49c>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d040      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a73      	ldr	r2, [pc, #460]	@ (800c53c <HAL_DMA_Start_IT+0x4a0>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d03b      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a71      	ldr	r2, [pc, #452]	@ (800c540 <HAL_DMA_Start_IT+0x4a4>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d036      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a70      	ldr	r2, [pc, #448]	@ (800c544 <HAL_DMA_Start_IT+0x4a8>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d031      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a6e      	ldr	r2, [pc, #440]	@ (800c548 <HAL_DMA_Start_IT+0x4ac>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d02c      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a6d      	ldr	r2, [pc, #436]	@ (800c54c <HAL_DMA_Start_IT+0x4b0>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d027      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a6b      	ldr	r2, [pc, #428]	@ (800c550 <HAL_DMA_Start_IT+0x4b4>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d022      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a6a      	ldr	r2, [pc, #424]	@ (800c554 <HAL_DMA_Start_IT+0x4b8>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d01d      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a68      	ldr	r2, [pc, #416]	@ (800c558 <HAL_DMA_Start_IT+0x4bc>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d018      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a67      	ldr	r2, [pc, #412]	@ (800c55c <HAL_DMA_Start_IT+0x4c0>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d013      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a65      	ldr	r2, [pc, #404]	@ (800c560 <HAL_DMA_Start_IT+0x4c4>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d00e      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a64      	ldr	r2, [pc, #400]	@ (800c564 <HAL_DMA_Start_IT+0x4c8>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d009      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a62      	ldr	r2, [pc, #392]	@ (800c568 <HAL_DMA_Start_IT+0x4cc>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d004      	beq.n	800c3ec <HAL_DMA_Start_IT+0x350>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a61      	ldr	r2, [pc, #388]	@ (800c56c <HAL_DMA_Start_IT+0x4d0>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d101      	bne.n	800c3f0 <HAL_DMA_Start_IT+0x354>
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e000      	b.n	800c3f2 <HAL_DMA_Start_IT+0x356>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d01a      	beq.n	800c42c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c400:	2b00      	cmp	r3, #0
 800c402:	d007      	beq.n	800c414 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c40e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c412:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d007      	beq.n	800c42c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c426:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c42a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a37      	ldr	r2, [pc, #220]	@ (800c510 <HAL_DMA_Start_IT+0x474>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d04a      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a36      	ldr	r2, [pc, #216]	@ (800c514 <HAL_DMA_Start_IT+0x478>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d045      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a34      	ldr	r2, [pc, #208]	@ (800c518 <HAL_DMA_Start_IT+0x47c>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d040      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a33      	ldr	r2, [pc, #204]	@ (800c51c <HAL_DMA_Start_IT+0x480>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d03b      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a31      	ldr	r2, [pc, #196]	@ (800c520 <HAL_DMA_Start_IT+0x484>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d036      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a30      	ldr	r2, [pc, #192]	@ (800c524 <HAL_DMA_Start_IT+0x488>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d031      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a2e      	ldr	r2, [pc, #184]	@ (800c528 <HAL_DMA_Start_IT+0x48c>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d02c      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a2d      	ldr	r2, [pc, #180]	@ (800c52c <HAL_DMA_Start_IT+0x490>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d027      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a2b      	ldr	r2, [pc, #172]	@ (800c530 <HAL_DMA_Start_IT+0x494>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d022      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a2a      	ldr	r2, [pc, #168]	@ (800c534 <HAL_DMA_Start_IT+0x498>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d01d      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a28      	ldr	r2, [pc, #160]	@ (800c538 <HAL_DMA_Start_IT+0x49c>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d018      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a27      	ldr	r2, [pc, #156]	@ (800c53c <HAL_DMA_Start_IT+0x4a0>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d013      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a25      	ldr	r2, [pc, #148]	@ (800c540 <HAL_DMA_Start_IT+0x4a4>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d00e      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a24      	ldr	r2, [pc, #144]	@ (800c544 <HAL_DMA_Start_IT+0x4a8>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d009      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a22      	ldr	r2, [pc, #136]	@ (800c548 <HAL_DMA_Start_IT+0x4ac>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d004      	beq.n	800c4cc <HAL_DMA_Start_IT+0x430>
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a21      	ldr	r2, [pc, #132]	@ (800c54c <HAL_DMA_Start_IT+0x4b0>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d108      	bne.n	800c4de <HAL_DMA_Start_IT+0x442>
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f042 0201 	orr.w	r2, r2, #1
 800c4da:	601a      	str	r2, [r3, #0]
 800c4dc:	e012      	b.n	800c504 <HAL_DMA_Start_IT+0x468>
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f042 0201 	orr.w	r2, r2, #1
 800c4ec:	601a      	str	r2, [r3, #0]
 800c4ee:	e009      	b.n	800c504 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c4f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800c500:	2301      	movs	r3, #1
 800c502:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c504:	7dfb      	ldrb	r3, [r7, #23]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3718      	adds	r7, #24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	40020010 	.word	0x40020010
 800c514:	40020028 	.word	0x40020028
 800c518:	40020040 	.word	0x40020040
 800c51c:	40020058 	.word	0x40020058
 800c520:	40020070 	.word	0x40020070
 800c524:	40020088 	.word	0x40020088
 800c528:	400200a0 	.word	0x400200a0
 800c52c:	400200b8 	.word	0x400200b8
 800c530:	40020410 	.word	0x40020410
 800c534:	40020428 	.word	0x40020428
 800c538:	40020440 	.word	0x40020440
 800c53c:	40020458 	.word	0x40020458
 800c540:	40020470 	.word	0x40020470
 800c544:	40020488 	.word	0x40020488
 800c548:	400204a0 	.word	0x400204a0
 800c54c:	400204b8 	.word	0x400204b8
 800c550:	58025408 	.word	0x58025408
 800c554:	5802541c 	.word	0x5802541c
 800c558:	58025430 	.word	0x58025430
 800c55c:	58025444 	.word	0x58025444
 800c560:	58025458 	.word	0x58025458
 800c564:	5802546c 	.word	0x5802546c
 800c568:	58025480 	.word	0x58025480
 800c56c:	58025494 	.word	0x58025494

0800c570 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c578:	f7fd f902 	bl	8009780 <HAL_GetTick>
 800c57c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d101      	bne.n	800c588 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	e2dc      	b.n	800cb42 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	2b02      	cmp	r3, #2
 800c592:	d008      	beq.n	800c5a6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2280      	movs	r2, #128	@ 0x80
 800c598:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e2cd      	b.n	800cb42 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a76      	ldr	r2, [pc, #472]	@ (800c784 <HAL_DMA_Abort+0x214>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d04a      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a74      	ldr	r2, [pc, #464]	@ (800c788 <HAL_DMA_Abort+0x218>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d045      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a73      	ldr	r2, [pc, #460]	@ (800c78c <HAL_DMA_Abort+0x21c>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d040      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a71      	ldr	r2, [pc, #452]	@ (800c790 <HAL_DMA_Abort+0x220>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d03b      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a70      	ldr	r2, [pc, #448]	@ (800c794 <HAL_DMA_Abort+0x224>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d036      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a6e      	ldr	r2, [pc, #440]	@ (800c798 <HAL_DMA_Abort+0x228>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d031      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a6d      	ldr	r2, [pc, #436]	@ (800c79c <HAL_DMA_Abort+0x22c>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d02c      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a6b      	ldr	r2, [pc, #428]	@ (800c7a0 <HAL_DMA_Abort+0x230>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d027      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a6a      	ldr	r2, [pc, #424]	@ (800c7a4 <HAL_DMA_Abort+0x234>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d022      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a68      	ldr	r2, [pc, #416]	@ (800c7a8 <HAL_DMA_Abort+0x238>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d01d      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a67      	ldr	r2, [pc, #412]	@ (800c7ac <HAL_DMA_Abort+0x23c>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d018      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a65      	ldr	r2, [pc, #404]	@ (800c7b0 <HAL_DMA_Abort+0x240>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d013      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a64      	ldr	r2, [pc, #400]	@ (800c7b4 <HAL_DMA_Abort+0x244>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d00e      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a62      	ldr	r2, [pc, #392]	@ (800c7b8 <HAL_DMA_Abort+0x248>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d009      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a61      	ldr	r2, [pc, #388]	@ (800c7bc <HAL_DMA_Abort+0x24c>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d004      	beq.n	800c646 <HAL_DMA_Abort+0xd6>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a5f      	ldr	r2, [pc, #380]	@ (800c7c0 <HAL_DMA_Abort+0x250>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d101      	bne.n	800c64a <HAL_DMA_Abort+0xda>
 800c646:	2301      	movs	r3, #1
 800c648:	e000      	b.n	800c64c <HAL_DMA_Abort+0xdc>
 800c64a:	2300      	movs	r3, #0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d013      	beq.n	800c678 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f022 021e 	bic.w	r2, r2, #30
 800c65e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	695a      	ldr	r2, [r3, #20]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c66e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	617b      	str	r3, [r7, #20]
 800c676:	e00a      	b.n	800c68e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f022 020e 	bic.w	r2, r2, #14
 800c686:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a3c      	ldr	r2, [pc, #240]	@ (800c784 <HAL_DMA_Abort+0x214>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d072      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a3a      	ldr	r2, [pc, #232]	@ (800c788 <HAL_DMA_Abort+0x218>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d06d      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a39      	ldr	r2, [pc, #228]	@ (800c78c <HAL_DMA_Abort+0x21c>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d068      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a37      	ldr	r2, [pc, #220]	@ (800c790 <HAL_DMA_Abort+0x220>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d063      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a36      	ldr	r2, [pc, #216]	@ (800c794 <HAL_DMA_Abort+0x224>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d05e      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a34      	ldr	r2, [pc, #208]	@ (800c798 <HAL_DMA_Abort+0x228>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d059      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a33      	ldr	r2, [pc, #204]	@ (800c79c <HAL_DMA_Abort+0x22c>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d054      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a31      	ldr	r2, [pc, #196]	@ (800c7a0 <HAL_DMA_Abort+0x230>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d04f      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a30      	ldr	r2, [pc, #192]	@ (800c7a4 <HAL_DMA_Abort+0x234>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d04a      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a2e      	ldr	r2, [pc, #184]	@ (800c7a8 <HAL_DMA_Abort+0x238>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d045      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a2d      	ldr	r2, [pc, #180]	@ (800c7ac <HAL_DMA_Abort+0x23c>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d040      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a2b      	ldr	r2, [pc, #172]	@ (800c7b0 <HAL_DMA_Abort+0x240>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d03b      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a2a      	ldr	r2, [pc, #168]	@ (800c7b4 <HAL_DMA_Abort+0x244>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d036      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a28      	ldr	r2, [pc, #160]	@ (800c7b8 <HAL_DMA_Abort+0x248>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d031      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a27      	ldr	r2, [pc, #156]	@ (800c7bc <HAL_DMA_Abort+0x24c>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d02c      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a25      	ldr	r2, [pc, #148]	@ (800c7c0 <HAL_DMA_Abort+0x250>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d027      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a24      	ldr	r2, [pc, #144]	@ (800c7c4 <HAL_DMA_Abort+0x254>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d022      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a22      	ldr	r2, [pc, #136]	@ (800c7c8 <HAL_DMA_Abort+0x258>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d01d      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a21      	ldr	r2, [pc, #132]	@ (800c7cc <HAL_DMA_Abort+0x25c>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d018      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a1f      	ldr	r2, [pc, #124]	@ (800c7d0 <HAL_DMA_Abort+0x260>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d013      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a1e      	ldr	r2, [pc, #120]	@ (800c7d4 <HAL_DMA_Abort+0x264>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d00e      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a1c      	ldr	r2, [pc, #112]	@ (800c7d8 <HAL_DMA_Abort+0x268>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d009      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a1b      	ldr	r2, [pc, #108]	@ (800c7dc <HAL_DMA_Abort+0x26c>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d004      	beq.n	800c77e <HAL_DMA_Abort+0x20e>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a19      	ldr	r2, [pc, #100]	@ (800c7e0 <HAL_DMA_Abort+0x270>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d132      	bne.n	800c7e4 <HAL_DMA_Abort+0x274>
 800c77e:	2301      	movs	r3, #1
 800c780:	e031      	b.n	800c7e6 <HAL_DMA_Abort+0x276>
 800c782:	bf00      	nop
 800c784:	40020010 	.word	0x40020010
 800c788:	40020028 	.word	0x40020028
 800c78c:	40020040 	.word	0x40020040
 800c790:	40020058 	.word	0x40020058
 800c794:	40020070 	.word	0x40020070
 800c798:	40020088 	.word	0x40020088
 800c79c:	400200a0 	.word	0x400200a0
 800c7a0:	400200b8 	.word	0x400200b8
 800c7a4:	40020410 	.word	0x40020410
 800c7a8:	40020428 	.word	0x40020428
 800c7ac:	40020440 	.word	0x40020440
 800c7b0:	40020458 	.word	0x40020458
 800c7b4:	40020470 	.word	0x40020470
 800c7b8:	40020488 	.word	0x40020488
 800c7bc:	400204a0 	.word	0x400204a0
 800c7c0:	400204b8 	.word	0x400204b8
 800c7c4:	58025408 	.word	0x58025408
 800c7c8:	5802541c 	.word	0x5802541c
 800c7cc:	58025430 	.word	0x58025430
 800c7d0:	58025444 	.word	0x58025444
 800c7d4:	58025458 	.word	0x58025458
 800c7d8:	5802546c 	.word	0x5802546c
 800c7dc:	58025480 	.word	0x58025480
 800c7e0:	58025494 	.word	0x58025494
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d007      	beq.n	800c7fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c7f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a6d      	ldr	r2, [pc, #436]	@ (800c9b4 <HAL_DMA_Abort+0x444>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d04a      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a6b      	ldr	r2, [pc, #428]	@ (800c9b8 <HAL_DMA_Abort+0x448>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d045      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a6a      	ldr	r2, [pc, #424]	@ (800c9bc <HAL_DMA_Abort+0x44c>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d040      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a68      	ldr	r2, [pc, #416]	@ (800c9c0 <HAL_DMA_Abort+0x450>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d03b      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a67      	ldr	r2, [pc, #412]	@ (800c9c4 <HAL_DMA_Abort+0x454>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d036      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a65      	ldr	r2, [pc, #404]	@ (800c9c8 <HAL_DMA_Abort+0x458>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d031      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a64      	ldr	r2, [pc, #400]	@ (800c9cc <HAL_DMA_Abort+0x45c>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d02c      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a62      	ldr	r2, [pc, #392]	@ (800c9d0 <HAL_DMA_Abort+0x460>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d027      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a61      	ldr	r2, [pc, #388]	@ (800c9d4 <HAL_DMA_Abort+0x464>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d022      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a5f      	ldr	r2, [pc, #380]	@ (800c9d8 <HAL_DMA_Abort+0x468>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d01d      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4a5e      	ldr	r2, [pc, #376]	@ (800c9dc <HAL_DMA_Abort+0x46c>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d018      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a5c      	ldr	r2, [pc, #368]	@ (800c9e0 <HAL_DMA_Abort+0x470>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d013      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a5b      	ldr	r2, [pc, #364]	@ (800c9e4 <HAL_DMA_Abort+0x474>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d00e      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a59      	ldr	r2, [pc, #356]	@ (800c9e8 <HAL_DMA_Abort+0x478>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d009      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a58      	ldr	r2, [pc, #352]	@ (800c9ec <HAL_DMA_Abort+0x47c>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d004      	beq.n	800c89a <HAL_DMA_Abort+0x32a>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a56      	ldr	r2, [pc, #344]	@ (800c9f0 <HAL_DMA_Abort+0x480>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d108      	bne.n	800c8ac <HAL_DMA_Abort+0x33c>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f022 0201 	bic.w	r2, r2, #1
 800c8a8:	601a      	str	r2, [r3, #0]
 800c8aa:	e007      	b.n	800c8bc <HAL_DMA_Abort+0x34c>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f022 0201 	bic.w	r2, r2, #1
 800c8ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c8bc:	e013      	b.n	800c8e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c8be:	f7fc ff5f 	bl	8009780 <HAL_GetTick>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	1ad3      	subs	r3, r2, r3
 800c8c8:	2b05      	cmp	r3, #5
 800c8ca:	d90c      	bls.n	800c8e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2220      	movs	r2, #32
 800c8d0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2203      	movs	r2, #3
 800c8d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e12d      	b.n	800cb42 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f003 0301 	and.w	r3, r3, #1
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1e5      	bne.n	800c8be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a2f      	ldr	r2, [pc, #188]	@ (800c9b4 <HAL_DMA_Abort+0x444>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d04a      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a2d      	ldr	r2, [pc, #180]	@ (800c9b8 <HAL_DMA_Abort+0x448>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d045      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a2c      	ldr	r2, [pc, #176]	@ (800c9bc <HAL_DMA_Abort+0x44c>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d040      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a2a      	ldr	r2, [pc, #168]	@ (800c9c0 <HAL_DMA_Abort+0x450>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d03b      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a29      	ldr	r2, [pc, #164]	@ (800c9c4 <HAL_DMA_Abort+0x454>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d036      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a27      	ldr	r2, [pc, #156]	@ (800c9c8 <HAL_DMA_Abort+0x458>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d031      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a26      	ldr	r2, [pc, #152]	@ (800c9cc <HAL_DMA_Abort+0x45c>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d02c      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a24      	ldr	r2, [pc, #144]	@ (800c9d0 <HAL_DMA_Abort+0x460>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d027      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a23      	ldr	r2, [pc, #140]	@ (800c9d4 <HAL_DMA_Abort+0x464>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d022      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a21      	ldr	r2, [pc, #132]	@ (800c9d8 <HAL_DMA_Abort+0x468>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d01d      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a20      	ldr	r2, [pc, #128]	@ (800c9dc <HAL_DMA_Abort+0x46c>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d018      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a1e      	ldr	r2, [pc, #120]	@ (800c9e0 <HAL_DMA_Abort+0x470>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d013      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a1d      	ldr	r2, [pc, #116]	@ (800c9e4 <HAL_DMA_Abort+0x474>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d00e      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a1b      	ldr	r2, [pc, #108]	@ (800c9e8 <HAL_DMA_Abort+0x478>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d009      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a1a      	ldr	r2, [pc, #104]	@ (800c9ec <HAL_DMA_Abort+0x47c>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d004      	beq.n	800c992 <HAL_DMA_Abort+0x422>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a18      	ldr	r2, [pc, #96]	@ (800c9f0 <HAL_DMA_Abort+0x480>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d101      	bne.n	800c996 <HAL_DMA_Abort+0x426>
 800c992:	2301      	movs	r3, #1
 800c994:	e000      	b.n	800c998 <HAL_DMA_Abort+0x428>
 800c996:	2300      	movs	r3, #0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d02b      	beq.n	800c9f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9a6:	f003 031f 	and.w	r3, r3, #31
 800c9aa:	223f      	movs	r2, #63	@ 0x3f
 800c9ac:	409a      	lsls	r2, r3
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	609a      	str	r2, [r3, #8]
 800c9b2:	e02a      	b.n	800ca0a <HAL_DMA_Abort+0x49a>
 800c9b4:	40020010 	.word	0x40020010
 800c9b8:	40020028 	.word	0x40020028
 800c9bc:	40020040 	.word	0x40020040
 800c9c0:	40020058 	.word	0x40020058
 800c9c4:	40020070 	.word	0x40020070
 800c9c8:	40020088 	.word	0x40020088
 800c9cc:	400200a0 	.word	0x400200a0
 800c9d0:	400200b8 	.word	0x400200b8
 800c9d4:	40020410 	.word	0x40020410
 800c9d8:	40020428 	.word	0x40020428
 800c9dc:	40020440 	.word	0x40020440
 800c9e0:	40020458 	.word	0x40020458
 800c9e4:	40020470 	.word	0x40020470
 800c9e8:	40020488 	.word	0x40020488
 800c9ec:	400204a0 	.word	0x400204a0
 800c9f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9fe:	f003 031f 	and.w	r3, r3, #31
 800ca02:	2201      	movs	r2, #1
 800ca04:	409a      	lsls	r2, r3
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a4f      	ldr	r2, [pc, #316]	@ (800cb4c <HAL_DMA_Abort+0x5dc>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d072      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a4d      	ldr	r2, [pc, #308]	@ (800cb50 <HAL_DMA_Abort+0x5e0>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d06d      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a4c      	ldr	r2, [pc, #304]	@ (800cb54 <HAL_DMA_Abort+0x5e4>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d068      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a4a      	ldr	r2, [pc, #296]	@ (800cb58 <HAL_DMA_Abort+0x5e8>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d063      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a49      	ldr	r2, [pc, #292]	@ (800cb5c <HAL_DMA_Abort+0x5ec>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d05e      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a47      	ldr	r2, [pc, #284]	@ (800cb60 <HAL_DMA_Abort+0x5f0>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d059      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a46      	ldr	r2, [pc, #280]	@ (800cb64 <HAL_DMA_Abort+0x5f4>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d054      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a44      	ldr	r2, [pc, #272]	@ (800cb68 <HAL_DMA_Abort+0x5f8>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d04f      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a43      	ldr	r2, [pc, #268]	@ (800cb6c <HAL_DMA_Abort+0x5fc>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d04a      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a41      	ldr	r2, [pc, #260]	@ (800cb70 <HAL_DMA_Abort+0x600>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d045      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a40      	ldr	r2, [pc, #256]	@ (800cb74 <HAL_DMA_Abort+0x604>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d040      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a3e      	ldr	r2, [pc, #248]	@ (800cb78 <HAL_DMA_Abort+0x608>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d03b      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a3d      	ldr	r2, [pc, #244]	@ (800cb7c <HAL_DMA_Abort+0x60c>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d036      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a3b      	ldr	r2, [pc, #236]	@ (800cb80 <HAL_DMA_Abort+0x610>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d031      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a3a      	ldr	r2, [pc, #232]	@ (800cb84 <HAL_DMA_Abort+0x614>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d02c      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a38      	ldr	r2, [pc, #224]	@ (800cb88 <HAL_DMA_Abort+0x618>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d027      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4a37      	ldr	r2, [pc, #220]	@ (800cb8c <HAL_DMA_Abort+0x61c>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d022      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a35      	ldr	r2, [pc, #212]	@ (800cb90 <HAL_DMA_Abort+0x620>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d01d      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a34      	ldr	r2, [pc, #208]	@ (800cb94 <HAL_DMA_Abort+0x624>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d018      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a32      	ldr	r2, [pc, #200]	@ (800cb98 <HAL_DMA_Abort+0x628>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d013      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a31      	ldr	r2, [pc, #196]	@ (800cb9c <HAL_DMA_Abort+0x62c>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d00e      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a2f      	ldr	r2, [pc, #188]	@ (800cba0 <HAL_DMA_Abort+0x630>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d009      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a2e      	ldr	r2, [pc, #184]	@ (800cba4 <HAL_DMA_Abort+0x634>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d004      	beq.n	800cafa <HAL_DMA_Abort+0x58a>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a2c      	ldr	r2, [pc, #176]	@ (800cba8 <HAL_DMA_Abort+0x638>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d101      	bne.n	800cafe <HAL_DMA_Abort+0x58e>
 800cafa:	2301      	movs	r3, #1
 800cafc:	e000      	b.n	800cb00 <HAL_DMA_Abort+0x590>
 800cafe:	2300      	movs	r3, #0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d015      	beq.n	800cb30 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800cb0c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00c      	beq.n	800cb30 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cb24:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800cb2e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2201      	movs	r2, #1
 800cb34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3718      	adds	r7, #24
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	40020010 	.word	0x40020010
 800cb50:	40020028 	.word	0x40020028
 800cb54:	40020040 	.word	0x40020040
 800cb58:	40020058 	.word	0x40020058
 800cb5c:	40020070 	.word	0x40020070
 800cb60:	40020088 	.word	0x40020088
 800cb64:	400200a0 	.word	0x400200a0
 800cb68:	400200b8 	.word	0x400200b8
 800cb6c:	40020410 	.word	0x40020410
 800cb70:	40020428 	.word	0x40020428
 800cb74:	40020440 	.word	0x40020440
 800cb78:	40020458 	.word	0x40020458
 800cb7c:	40020470 	.word	0x40020470
 800cb80:	40020488 	.word	0x40020488
 800cb84:	400204a0 	.word	0x400204a0
 800cb88:	400204b8 	.word	0x400204b8
 800cb8c:	58025408 	.word	0x58025408
 800cb90:	5802541c 	.word	0x5802541c
 800cb94:	58025430 	.word	0x58025430
 800cb98:	58025444 	.word	0x58025444
 800cb9c:	58025458 	.word	0x58025458
 800cba0:	5802546c 	.word	0x5802546c
 800cba4:	58025480 	.word	0x58025480
 800cba8:	58025494 	.word	0x58025494

0800cbac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d101      	bne.n	800cbbe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e237      	b.n	800d02e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d004      	beq.n	800cbd4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2280      	movs	r2, #128	@ 0x80
 800cbce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e22c      	b.n	800d02e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a5c      	ldr	r2, [pc, #368]	@ (800cd4c <HAL_DMA_Abort_IT+0x1a0>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d04a      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a5b      	ldr	r2, [pc, #364]	@ (800cd50 <HAL_DMA_Abort_IT+0x1a4>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d045      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a59      	ldr	r2, [pc, #356]	@ (800cd54 <HAL_DMA_Abort_IT+0x1a8>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d040      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a58      	ldr	r2, [pc, #352]	@ (800cd58 <HAL_DMA_Abort_IT+0x1ac>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d03b      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a56      	ldr	r2, [pc, #344]	@ (800cd5c <HAL_DMA_Abort_IT+0x1b0>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d036      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a55      	ldr	r2, [pc, #340]	@ (800cd60 <HAL_DMA_Abort_IT+0x1b4>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d031      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a53      	ldr	r2, [pc, #332]	@ (800cd64 <HAL_DMA_Abort_IT+0x1b8>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d02c      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a52      	ldr	r2, [pc, #328]	@ (800cd68 <HAL_DMA_Abort_IT+0x1bc>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d027      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a50      	ldr	r2, [pc, #320]	@ (800cd6c <HAL_DMA_Abort_IT+0x1c0>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d022      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a4f      	ldr	r2, [pc, #316]	@ (800cd70 <HAL_DMA_Abort_IT+0x1c4>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d01d      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a4d      	ldr	r2, [pc, #308]	@ (800cd74 <HAL_DMA_Abort_IT+0x1c8>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d018      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a4c      	ldr	r2, [pc, #304]	@ (800cd78 <HAL_DMA_Abort_IT+0x1cc>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d013      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a4a      	ldr	r2, [pc, #296]	@ (800cd7c <HAL_DMA_Abort_IT+0x1d0>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d00e      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a49      	ldr	r2, [pc, #292]	@ (800cd80 <HAL_DMA_Abort_IT+0x1d4>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d009      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a47      	ldr	r2, [pc, #284]	@ (800cd84 <HAL_DMA_Abort_IT+0x1d8>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d004      	beq.n	800cc74 <HAL_DMA_Abort_IT+0xc8>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a46      	ldr	r2, [pc, #280]	@ (800cd88 <HAL_DMA_Abort_IT+0x1dc>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d101      	bne.n	800cc78 <HAL_DMA_Abort_IT+0xcc>
 800cc74:	2301      	movs	r3, #1
 800cc76:	e000      	b.n	800cc7a <HAL_DMA_Abort_IT+0xce>
 800cc78:	2300      	movs	r3, #0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	f000 8086 	beq.w	800cd8c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2204      	movs	r2, #4
 800cc84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a2f      	ldr	r2, [pc, #188]	@ (800cd4c <HAL_DMA_Abort_IT+0x1a0>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d04a      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a2e      	ldr	r2, [pc, #184]	@ (800cd50 <HAL_DMA_Abort_IT+0x1a4>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d045      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a2c      	ldr	r2, [pc, #176]	@ (800cd54 <HAL_DMA_Abort_IT+0x1a8>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d040      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a2b      	ldr	r2, [pc, #172]	@ (800cd58 <HAL_DMA_Abort_IT+0x1ac>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d03b      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a29      	ldr	r2, [pc, #164]	@ (800cd5c <HAL_DMA_Abort_IT+0x1b0>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d036      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a28      	ldr	r2, [pc, #160]	@ (800cd60 <HAL_DMA_Abort_IT+0x1b4>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d031      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a26      	ldr	r2, [pc, #152]	@ (800cd64 <HAL_DMA_Abort_IT+0x1b8>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d02c      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4a25      	ldr	r2, [pc, #148]	@ (800cd68 <HAL_DMA_Abort_IT+0x1bc>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d027      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a23      	ldr	r2, [pc, #140]	@ (800cd6c <HAL_DMA_Abort_IT+0x1c0>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d022      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a22      	ldr	r2, [pc, #136]	@ (800cd70 <HAL_DMA_Abort_IT+0x1c4>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d01d      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a20      	ldr	r2, [pc, #128]	@ (800cd74 <HAL_DMA_Abort_IT+0x1c8>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d018      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a1f      	ldr	r2, [pc, #124]	@ (800cd78 <HAL_DMA_Abort_IT+0x1cc>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d013      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a1d      	ldr	r2, [pc, #116]	@ (800cd7c <HAL_DMA_Abort_IT+0x1d0>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d00e      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a1c      	ldr	r2, [pc, #112]	@ (800cd80 <HAL_DMA_Abort_IT+0x1d4>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d009      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a1a      	ldr	r2, [pc, #104]	@ (800cd84 <HAL_DMA_Abort_IT+0x1d8>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d004      	beq.n	800cd28 <HAL_DMA_Abort_IT+0x17c>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a19      	ldr	r2, [pc, #100]	@ (800cd88 <HAL_DMA_Abort_IT+0x1dc>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d108      	bne.n	800cd3a <HAL_DMA_Abort_IT+0x18e>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f022 0201 	bic.w	r2, r2, #1
 800cd36:	601a      	str	r2, [r3, #0]
 800cd38:	e178      	b.n	800d02c <HAL_DMA_Abort_IT+0x480>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f022 0201 	bic.w	r2, r2, #1
 800cd48:	601a      	str	r2, [r3, #0]
 800cd4a:	e16f      	b.n	800d02c <HAL_DMA_Abort_IT+0x480>
 800cd4c:	40020010 	.word	0x40020010
 800cd50:	40020028 	.word	0x40020028
 800cd54:	40020040 	.word	0x40020040
 800cd58:	40020058 	.word	0x40020058
 800cd5c:	40020070 	.word	0x40020070
 800cd60:	40020088 	.word	0x40020088
 800cd64:	400200a0 	.word	0x400200a0
 800cd68:	400200b8 	.word	0x400200b8
 800cd6c:	40020410 	.word	0x40020410
 800cd70:	40020428 	.word	0x40020428
 800cd74:	40020440 	.word	0x40020440
 800cd78:	40020458 	.word	0x40020458
 800cd7c:	40020470 	.word	0x40020470
 800cd80:	40020488 	.word	0x40020488
 800cd84:	400204a0 	.word	0x400204a0
 800cd88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f022 020e 	bic.w	r2, r2, #14
 800cd9a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a6c      	ldr	r2, [pc, #432]	@ (800cf54 <HAL_DMA_Abort_IT+0x3a8>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d04a      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a6b      	ldr	r2, [pc, #428]	@ (800cf58 <HAL_DMA_Abort_IT+0x3ac>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d045      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a69      	ldr	r2, [pc, #420]	@ (800cf5c <HAL_DMA_Abort_IT+0x3b0>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d040      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a68      	ldr	r2, [pc, #416]	@ (800cf60 <HAL_DMA_Abort_IT+0x3b4>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d03b      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a66      	ldr	r2, [pc, #408]	@ (800cf64 <HAL_DMA_Abort_IT+0x3b8>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d036      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a65      	ldr	r2, [pc, #404]	@ (800cf68 <HAL_DMA_Abort_IT+0x3bc>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d031      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a63      	ldr	r2, [pc, #396]	@ (800cf6c <HAL_DMA_Abort_IT+0x3c0>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d02c      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a62      	ldr	r2, [pc, #392]	@ (800cf70 <HAL_DMA_Abort_IT+0x3c4>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d027      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a60      	ldr	r2, [pc, #384]	@ (800cf74 <HAL_DMA_Abort_IT+0x3c8>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d022      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4a5f      	ldr	r2, [pc, #380]	@ (800cf78 <HAL_DMA_Abort_IT+0x3cc>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d01d      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a5d      	ldr	r2, [pc, #372]	@ (800cf7c <HAL_DMA_Abort_IT+0x3d0>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d018      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a5c      	ldr	r2, [pc, #368]	@ (800cf80 <HAL_DMA_Abort_IT+0x3d4>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d013      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a5a      	ldr	r2, [pc, #360]	@ (800cf84 <HAL_DMA_Abort_IT+0x3d8>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d00e      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a59      	ldr	r2, [pc, #356]	@ (800cf88 <HAL_DMA_Abort_IT+0x3dc>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d009      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a57      	ldr	r2, [pc, #348]	@ (800cf8c <HAL_DMA_Abort_IT+0x3e0>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d004      	beq.n	800ce3c <HAL_DMA_Abort_IT+0x290>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a56      	ldr	r2, [pc, #344]	@ (800cf90 <HAL_DMA_Abort_IT+0x3e4>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d108      	bne.n	800ce4e <HAL_DMA_Abort_IT+0x2a2>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f022 0201 	bic.w	r2, r2, #1
 800ce4a:	601a      	str	r2, [r3, #0]
 800ce4c:	e007      	b.n	800ce5e <HAL_DMA_Abort_IT+0x2b2>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f022 0201 	bic.w	r2, r2, #1
 800ce5c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a3c      	ldr	r2, [pc, #240]	@ (800cf54 <HAL_DMA_Abort_IT+0x3a8>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d072      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a3a      	ldr	r2, [pc, #232]	@ (800cf58 <HAL_DMA_Abort_IT+0x3ac>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d06d      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a39      	ldr	r2, [pc, #228]	@ (800cf5c <HAL_DMA_Abort_IT+0x3b0>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d068      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a37      	ldr	r2, [pc, #220]	@ (800cf60 <HAL_DMA_Abort_IT+0x3b4>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d063      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a36      	ldr	r2, [pc, #216]	@ (800cf64 <HAL_DMA_Abort_IT+0x3b8>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d05e      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a34      	ldr	r2, [pc, #208]	@ (800cf68 <HAL_DMA_Abort_IT+0x3bc>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d059      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a33      	ldr	r2, [pc, #204]	@ (800cf6c <HAL_DMA_Abort_IT+0x3c0>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d054      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a31      	ldr	r2, [pc, #196]	@ (800cf70 <HAL_DMA_Abort_IT+0x3c4>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d04f      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a30      	ldr	r2, [pc, #192]	@ (800cf74 <HAL_DMA_Abort_IT+0x3c8>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d04a      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a2e      	ldr	r2, [pc, #184]	@ (800cf78 <HAL_DMA_Abort_IT+0x3cc>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d045      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a2d      	ldr	r2, [pc, #180]	@ (800cf7c <HAL_DMA_Abort_IT+0x3d0>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d040      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a2b      	ldr	r2, [pc, #172]	@ (800cf80 <HAL_DMA_Abort_IT+0x3d4>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d03b      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a2a      	ldr	r2, [pc, #168]	@ (800cf84 <HAL_DMA_Abort_IT+0x3d8>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d036      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a28      	ldr	r2, [pc, #160]	@ (800cf88 <HAL_DMA_Abort_IT+0x3dc>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d031      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a27      	ldr	r2, [pc, #156]	@ (800cf8c <HAL_DMA_Abort_IT+0x3e0>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d02c      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a25      	ldr	r2, [pc, #148]	@ (800cf90 <HAL_DMA_Abort_IT+0x3e4>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d027      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a24      	ldr	r2, [pc, #144]	@ (800cf94 <HAL_DMA_Abort_IT+0x3e8>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d022      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a22      	ldr	r2, [pc, #136]	@ (800cf98 <HAL_DMA_Abort_IT+0x3ec>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d01d      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a21      	ldr	r2, [pc, #132]	@ (800cf9c <HAL_DMA_Abort_IT+0x3f0>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d018      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a1f      	ldr	r2, [pc, #124]	@ (800cfa0 <HAL_DMA_Abort_IT+0x3f4>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d013      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a1e      	ldr	r2, [pc, #120]	@ (800cfa4 <HAL_DMA_Abort_IT+0x3f8>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d00e      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a1c      	ldr	r2, [pc, #112]	@ (800cfa8 <HAL_DMA_Abort_IT+0x3fc>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d009      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a1b      	ldr	r2, [pc, #108]	@ (800cfac <HAL_DMA_Abort_IT+0x400>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d004      	beq.n	800cf4e <HAL_DMA_Abort_IT+0x3a2>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a19      	ldr	r2, [pc, #100]	@ (800cfb0 <HAL_DMA_Abort_IT+0x404>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d132      	bne.n	800cfb4 <HAL_DMA_Abort_IT+0x408>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e031      	b.n	800cfb6 <HAL_DMA_Abort_IT+0x40a>
 800cf52:	bf00      	nop
 800cf54:	40020010 	.word	0x40020010
 800cf58:	40020028 	.word	0x40020028
 800cf5c:	40020040 	.word	0x40020040
 800cf60:	40020058 	.word	0x40020058
 800cf64:	40020070 	.word	0x40020070
 800cf68:	40020088 	.word	0x40020088
 800cf6c:	400200a0 	.word	0x400200a0
 800cf70:	400200b8 	.word	0x400200b8
 800cf74:	40020410 	.word	0x40020410
 800cf78:	40020428 	.word	0x40020428
 800cf7c:	40020440 	.word	0x40020440
 800cf80:	40020458 	.word	0x40020458
 800cf84:	40020470 	.word	0x40020470
 800cf88:	40020488 	.word	0x40020488
 800cf8c:	400204a0 	.word	0x400204a0
 800cf90:	400204b8 	.word	0x400204b8
 800cf94:	58025408 	.word	0x58025408
 800cf98:	5802541c 	.word	0x5802541c
 800cf9c:	58025430 	.word	0x58025430
 800cfa0:	58025444 	.word	0x58025444
 800cfa4:	58025458 	.word	0x58025458
 800cfa8:	5802546c 	.word	0x5802546c
 800cfac:	58025480 	.word	0x58025480
 800cfb0:	58025494 	.word	0x58025494
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d028      	beq.n	800d00c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cfc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cfc8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfd4:	f003 031f 	and.w	r3, r3, #31
 800cfd8:	2201      	movs	r2, #1
 800cfda:	409a      	lsls	r2, r3
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800cfe8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00c      	beq.n	800d00c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cffc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d000:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800d00a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d020:	2b00      	cmp	r3, #0
 800d022:	d003      	beq.n	800d02c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop

0800d038 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b08a      	sub	sp, #40	@ 0x28
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800d040:	2300      	movs	r3, #0
 800d042:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d044:	4b67      	ldr	r3, [pc, #412]	@ (800d1e4 <HAL_DMA_IRQHandler+0x1ac>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a67      	ldr	r2, [pc, #412]	@ (800d1e8 <HAL_DMA_IRQHandler+0x1b0>)
 800d04a:	fba2 2303 	umull	r2, r3, r2, r3
 800d04e:	0a9b      	lsrs	r3, r3, #10
 800d050:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d056:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d05c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800d05e:	6a3b      	ldr	r3, [r7, #32]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a5f      	ldr	r2, [pc, #380]	@ (800d1ec <HAL_DMA_IRQHandler+0x1b4>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d04a      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a5d      	ldr	r2, [pc, #372]	@ (800d1f0 <HAL_DMA_IRQHandler+0x1b8>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d045      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4a5c      	ldr	r2, [pc, #368]	@ (800d1f4 <HAL_DMA_IRQHandler+0x1bc>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d040      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a5a      	ldr	r2, [pc, #360]	@ (800d1f8 <HAL_DMA_IRQHandler+0x1c0>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d03b      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4a59      	ldr	r2, [pc, #356]	@ (800d1fc <HAL_DMA_IRQHandler+0x1c4>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d036      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a57      	ldr	r2, [pc, #348]	@ (800d200 <HAL_DMA_IRQHandler+0x1c8>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d031      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a56      	ldr	r2, [pc, #344]	@ (800d204 <HAL_DMA_IRQHandler+0x1cc>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d02c      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a54      	ldr	r2, [pc, #336]	@ (800d208 <HAL_DMA_IRQHandler+0x1d0>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d027      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a53      	ldr	r2, [pc, #332]	@ (800d20c <HAL_DMA_IRQHandler+0x1d4>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d022      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a51      	ldr	r2, [pc, #324]	@ (800d210 <HAL_DMA_IRQHandler+0x1d8>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d01d      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a50      	ldr	r2, [pc, #320]	@ (800d214 <HAL_DMA_IRQHandler+0x1dc>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d018      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a4e      	ldr	r2, [pc, #312]	@ (800d218 <HAL_DMA_IRQHandler+0x1e0>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d013      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4a4d      	ldr	r2, [pc, #308]	@ (800d21c <HAL_DMA_IRQHandler+0x1e4>)
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d00e      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a4b      	ldr	r2, [pc, #300]	@ (800d220 <HAL_DMA_IRQHandler+0x1e8>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d009      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4a4a      	ldr	r2, [pc, #296]	@ (800d224 <HAL_DMA_IRQHandler+0x1ec>)
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d004      	beq.n	800d10a <HAL_DMA_IRQHandler+0xd2>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a48      	ldr	r2, [pc, #288]	@ (800d228 <HAL_DMA_IRQHandler+0x1f0>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d101      	bne.n	800d10e <HAL_DMA_IRQHandler+0xd6>
 800d10a:	2301      	movs	r3, #1
 800d10c:	e000      	b.n	800d110 <HAL_DMA_IRQHandler+0xd8>
 800d10e:	2300      	movs	r3, #0
 800d110:	2b00      	cmp	r3, #0
 800d112:	f000 842b 	beq.w	800d96c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d11a:	f003 031f 	and.w	r3, r3, #31
 800d11e:	2208      	movs	r2, #8
 800d120:	409a      	lsls	r2, r3
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	4013      	ands	r3, r2
 800d126:	2b00      	cmp	r3, #0
 800d128:	f000 80a2 	beq.w	800d270 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a2e      	ldr	r2, [pc, #184]	@ (800d1ec <HAL_DMA_IRQHandler+0x1b4>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d04a      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4a2d      	ldr	r2, [pc, #180]	@ (800d1f0 <HAL_DMA_IRQHandler+0x1b8>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d045      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a2b      	ldr	r2, [pc, #172]	@ (800d1f4 <HAL_DMA_IRQHandler+0x1bc>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d040      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a2a      	ldr	r2, [pc, #168]	@ (800d1f8 <HAL_DMA_IRQHandler+0x1c0>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d03b      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a28      	ldr	r2, [pc, #160]	@ (800d1fc <HAL_DMA_IRQHandler+0x1c4>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d036      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4a27      	ldr	r2, [pc, #156]	@ (800d200 <HAL_DMA_IRQHandler+0x1c8>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d031      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a25      	ldr	r2, [pc, #148]	@ (800d204 <HAL_DMA_IRQHandler+0x1cc>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d02c      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a24      	ldr	r2, [pc, #144]	@ (800d208 <HAL_DMA_IRQHandler+0x1d0>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d027      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a22      	ldr	r2, [pc, #136]	@ (800d20c <HAL_DMA_IRQHandler+0x1d4>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d022      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a21      	ldr	r2, [pc, #132]	@ (800d210 <HAL_DMA_IRQHandler+0x1d8>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d01d      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a1f      	ldr	r2, [pc, #124]	@ (800d214 <HAL_DMA_IRQHandler+0x1dc>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d018      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a1e      	ldr	r2, [pc, #120]	@ (800d218 <HAL_DMA_IRQHandler+0x1e0>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d013      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a1c      	ldr	r2, [pc, #112]	@ (800d21c <HAL_DMA_IRQHandler+0x1e4>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d00e      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a1b      	ldr	r2, [pc, #108]	@ (800d220 <HAL_DMA_IRQHandler+0x1e8>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d009      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a19      	ldr	r2, [pc, #100]	@ (800d224 <HAL_DMA_IRQHandler+0x1ec>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d004      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x194>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a18      	ldr	r2, [pc, #96]	@ (800d228 <HAL_DMA_IRQHandler+0x1f0>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d12f      	bne.n	800d22c <HAL_DMA_IRQHandler+0x1f4>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f003 0304 	and.w	r3, r3, #4
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	bf14      	ite	ne
 800d1da:	2301      	movne	r3, #1
 800d1dc:	2300      	moveq	r3, #0
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	e02e      	b.n	800d240 <HAL_DMA_IRQHandler+0x208>
 800d1e2:	bf00      	nop
 800d1e4:	24000004 	.word	0x24000004
 800d1e8:	1b4e81b5 	.word	0x1b4e81b5
 800d1ec:	40020010 	.word	0x40020010
 800d1f0:	40020028 	.word	0x40020028
 800d1f4:	40020040 	.word	0x40020040
 800d1f8:	40020058 	.word	0x40020058
 800d1fc:	40020070 	.word	0x40020070
 800d200:	40020088 	.word	0x40020088
 800d204:	400200a0 	.word	0x400200a0
 800d208:	400200b8 	.word	0x400200b8
 800d20c:	40020410 	.word	0x40020410
 800d210:	40020428 	.word	0x40020428
 800d214:	40020440 	.word	0x40020440
 800d218:	40020458 	.word	0x40020458
 800d21c:	40020470 	.word	0x40020470
 800d220:	40020488 	.word	0x40020488
 800d224:	400204a0 	.word	0x400204a0
 800d228:	400204b8 	.word	0x400204b8
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f003 0308 	and.w	r3, r3, #8
 800d236:	2b00      	cmp	r3, #0
 800d238:	bf14      	ite	ne
 800d23a:	2301      	movne	r3, #1
 800d23c:	2300      	moveq	r3, #0
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	2b00      	cmp	r3, #0
 800d242:	d015      	beq.n	800d270 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f022 0204 	bic.w	r2, r2, #4
 800d252:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d258:	f003 031f 	and.w	r3, r3, #31
 800d25c:	2208      	movs	r2, #8
 800d25e:	409a      	lsls	r2, r3
 800d260:	6a3b      	ldr	r3, [r7, #32]
 800d262:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d268:	f043 0201 	orr.w	r2, r3, #1
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d274:	f003 031f 	and.w	r3, r3, #31
 800d278:	69ba      	ldr	r2, [r7, #24]
 800d27a:	fa22 f303 	lsr.w	r3, r2, r3
 800d27e:	f003 0301 	and.w	r3, r3, #1
 800d282:	2b00      	cmp	r3, #0
 800d284:	d06e      	beq.n	800d364 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a69      	ldr	r2, [pc, #420]	@ (800d430 <HAL_DMA_IRQHandler+0x3f8>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d04a      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a67      	ldr	r2, [pc, #412]	@ (800d434 <HAL_DMA_IRQHandler+0x3fc>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d045      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a66      	ldr	r2, [pc, #408]	@ (800d438 <HAL_DMA_IRQHandler+0x400>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d040      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a64      	ldr	r2, [pc, #400]	@ (800d43c <HAL_DMA_IRQHandler+0x404>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d03b      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a63      	ldr	r2, [pc, #396]	@ (800d440 <HAL_DMA_IRQHandler+0x408>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d036      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a61      	ldr	r2, [pc, #388]	@ (800d444 <HAL_DMA_IRQHandler+0x40c>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d031      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a60      	ldr	r2, [pc, #384]	@ (800d448 <HAL_DMA_IRQHandler+0x410>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d02c      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a5e      	ldr	r2, [pc, #376]	@ (800d44c <HAL_DMA_IRQHandler+0x414>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d027      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a5d      	ldr	r2, [pc, #372]	@ (800d450 <HAL_DMA_IRQHandler+0x418>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d022      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a5b      	ldr	r2, [pc, #364]	@ (800d454 <HAL_DMA_IRQHandler+0x41c>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d01d      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a5a      	ldr	r2, [pc, #360]	@ (800d458 <HAL_DMA_IRQHandler+0x420>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d018      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a58      	ldr	r2, [pc, #352]	@ (800d45c <HAL_DMA_IRQHandler+0x424>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d013      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a57      	ldr	r2, [pc, #348]	@ (800d460 <HAL_DMA_IRQHandler+0x428>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d00e      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a55      	ldr	r2, [pc, #340]	@ (800d464 <HAL_DMA_IRQHandler+0x42c>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d009      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a54      	ldr	r2, [pc, #336]	@ (800d468 <HAL_DMA_IRQHandler+0x430>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d004      	beq.n	800d326 <HAL_DMA_IRQHandler+0x2ee>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a52      	ldr	r2, [pc, #328]	@ (800d46c <HAL_DMA_IRQHandler+0x434>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d10a      	bne.n	800d33c <HAL_DMA_IRQHandler+0x304>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	695b      	ldr	r3, [r3, #20]
 800d32c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d330:	2b00      	cmp	r3, #0
 800d332:	bf14      	ite	ne
 800d334:	2301      	movne	r3, #1
 800d336:	2300      	moveq	r3, #0
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	e003      	b.n	800d344 <HAL_DMA_IRQHandler+0x30c>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2300      	movs	r3, #0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d00d      	beq.n	800d364 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d34c:	f003 031f 	and.w	r3, r3, #31
 800d350:	2201      	movs	r2, #1
 800d352:	409a      	lsls	r2, r3
 800d354:	6a3b      	ldr	r3, [r7, #32]
 800d356:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d35c:	f043 0202 	orr.w	r2, r3, #2
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d368:	f003 031f 	and.w	r3, r3, #31
 800d36c:	2204      	movs	r2, #4
 800d36e:	409a      	lsls	r2, r3
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	4013      	ands	r3, r2
 800d374:	2b00      	cmp	r3, #0
 800d376:	f000 808f 	beq.w	800d498 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a2c      	ldr	r2, [pc, #176]	@ (800d430 <HAL_DMA_IRQHandler+0x3f8>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d04a      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a2a      	ldr	r2, [pc, #168]	@ (800d434 <HAL_DMA_IRQHandler+0x3fc>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d045      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4a29      	ldr	r2, [pc, #164]	@ (800d438 <HAL_DMA_IRQHandler+0x400>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d040      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a27      	ldr	r2, [pc, #156]	@ (800d43c <HAL_DMA_IRQHandler+0x404>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d03b      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4a26      	ldr	r2, [pc, #152]	@ (800d440 <HAL_DMA_IRQHandler+0x408>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d036      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4a24      	ldr	r2, [pc, #144]	@ (800d444 <HAL_DMA_IRQHandler+0x40c>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d031      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4a23      	ldr	r2, [pc, #140]	@ (800d448 <HAL_DMA_IRQHandler+0x410>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d02c      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a21      	ldr	r2, [pc, #132]	@ (800d44c <HAL_DMA_IRQHandler+0x414>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d027      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4a20      	ldr	r2, [pc, #128]	@ (800d450 <HAL_DMA_IRQHandler+0x418>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d022      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a1e      	ldr	r2, [pc, #120]	@ (800d454 <HAL_DMA_IRQHandler+0x41c>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d01d      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4a1d      	ldr	r2, [pc, #116]	@ (800d458 <HAL_DMA_IRQHandler+0x420>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d018      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a1b      	ldr	r2, [pc, #108]	@ (800d45c <HAL_DMA_IRQHandler+0x424>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d013      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a1a      	ldr	r2, [pc, #104]	@ (800d460 <HAL_DMA_IRQHandler+0x428>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d00e      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a18      	ldr	r2, [pc, #96]	@ (800d464 <HAL_DMA_IRQHandler+0x42c>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d009      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a17      	ldr	r2, [pc, #92]	@ (800d468 <HAL_DMA_IRQHandler+0x430>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d004      	beq.n	800d41a <HAL_DMA_IRQHandler+0x3e2>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a15      	ldr	r2, [pc, #84]	@ (800d46c <HAL_DMA_IRQHandler+0x434>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d12a      	bne.n	800d470 <HAL_DMA_IRQHandler+0x438>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f003 0302 	and.w	r3, r3, #2
 800d424:	2b00      	cmp	r3, #0
 800d426:	bf14      	ite	ne
 800d428:	2301      	movne	r3, #1
 800d42a:	2300      	moveq	r3, #0
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	e023      	b.n	800d478 <HAL_DMA_IRQHandler+0x440>
 800d430:	40020010 	.word	0x40020010
 800d434:	40020028 	.word	0x40020028
 800d438:	40020040 	.word	0x40020040
 800d43c:	40020058 	.word	0x40020058
 800d440:	40020070 	.word	0x40020070
 800d444:	40020088 	.word	0x40020088
 800d448:	400200a0 	.word	0x400200a0
 800d44c:	400200b8 	.word	0x400200b8
 800d450:	40020410 	.word	0x40020410
 800d454:	40020428 	.word	0x40020428
 800d458:	40020440 	.word	0x40020440
 800d45c:	40020458 	.word	0x40020458
 800d460:	40020470 	.word	0x40020470
 800d464:	40020488 	.word	0x40020488
 800d468:	400204a0 	.word	0x400204a0
 800d46c:	400204b8 	.word	0x400204b8
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2300      	movs	r3, #0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00d      	beq.n	800d498 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d480:	f003 031f 	and.w	r3, r3, #31
 800d484:	2204      	movs	r2, #4
 800d486:	409a      	lsls	r2, r3
 800d488:	6a3b      	ldr	r3, [r7, #32]
 800d48a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d490:	f043 0204 	orr.w	r2, r3, #4
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d49c:	f003 031f 	and.w	r3, r3, #31
 800d4a0:	2210      	movs	r2, #16
 800d4a2:	409a      	lsls	r2, r3
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	4013      	ands	r3, r2
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f000 80a6 	beq.w	800d5fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a85      	ldr	r2, [pc, #532]	@ (800d6c8 <HAL_DMA_IRQHandler+0x690>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d04a      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a83      	ldr	r2, [pc, #524]	@ (800d6cc <HAL_DMA_IRQHandler+0x694>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d045      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4a82      	ldr	r2, [pc, #520]	@ (800d6d0 <HAL_DMA_IRQHandler+0x698>)
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d040      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a80      	ldr	r2, [pc, #512]	@ (800d6d4 <HAL_DMA_IRQHandler+0x69c>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d03b      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a7f      	ldr	r2, [pc, #508]	@ (800d6d8 <HAL_DMA_IRQHandler+0x6a0>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d036      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a7d      	ldr	r2, [pc, #500]	@ (800d6dc <HAL_DMA_IRQHandler+0x6a4>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d031      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4a7c      	ldr	r2, [pc, #496]	@ (800d6e0 <HAL_DMA_IRQHandler+0x6a8>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d02c      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a7a      	ldr	r2, [pc, #488]	@ (800d6e4 <HAL_DMA_IRQHandler+0x6ac>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d027      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4a79      	ldr	r2, [pc, #484]	@ (800d6e8 <HAL_DMA_IRQHandler+0x6b0>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d022      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4a77      	ldr	r2, [pc, #476]	@ (800d6ec <HAL_DMA_IRQHandler+0x6b4>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d01d      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4a76      	ldr	r2, [pc, #472]	@ (800d6f0 <HAL_DMA_IRQHandler+0x6b8>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	d018      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a74      	ldr	r2, [pc, #464]	@ (800d6f4 <HAL_DMA_IRQHandler+0x6bc>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d013      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4a73      	ldr	r2, [pc, #460]	@ (800d6f8 <HAL_DMA_IRQHandler+0x6c0>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d00e      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4a71      	ldr	r2, [pc, #452]	@ (800d6fc <HAL_DMA_IRQHandler+0x6c4>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d009      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4a70      	ldr	r2, [pc, #448]	@ (800d700 <HAL_DMA_IRQHandler+0x6c8>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d004      	beq.n	800d54e <HAL_DMA_IRQHandler+0x516>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a6e      	ldr	r2, [pc, #440]	@ (800d704 <HAL_DMA_IRQHandler+0x6cc>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d10a      	bne.n	800d564 <HAL_DMA_IRQHandler+0x52c>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f003 0308 	and.w	r3, r3, #8
 800d558:	2b00      	cmp	r3, #0
 800d55a:	bf14      	ite	ne
 800d55c:	2301      	movne	r3, #1
 800d55e:	2300      	moveq	r3, #0
 800d560:	b2db      	uxtb	r3, r3
 800d562:	e009      	b.n	800d578 <HAL_DMA_IRQHandler+0x540>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f003 0304 	and.w	r3, r3, #4
 800d56e:	2b00      	cmp	r3, #0
 800d570:	bf14      	ite	ne
 800d572:	2301      	movne	r3, #1
 800d574:	2300      	moveq	r3, #0
 800d576:	b2db      	uxtb	r3, r3
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d03e      	beq.n	800d5fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d580:	f003 031f 	and.w	r3, r3, #31
 800d584:	2210      	movs	r2, #16
 800d586:	409a      	lsls	r2, r3
 800d588:	6a3b      	ldr	r3, [r7, #32]
 800d58a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d596:	2b00      	cmp	r3, #0
 800d598:	d018      	beq.n	800d5cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d108      	bne.n	800d5ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d024      	beq.n	800d5fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	4798      	blx	r3
 800d5b8:	e01f      	b.n	800d5fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d01b      	beq.n	800d5fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	4798      	blx	r3
 800d5ca:	e016      	b.n	800d5fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d107      	bne.n	800d5ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f022 0208 	bic.w	r2, r2, #8
 800d5e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d003      	beq.n	800d5fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5fe:	f003 031f 	and.w	r3, r3, #31
 800d602:	2220      	movs	r2, #32
 800d604:	409a      	lsls	r2, r3
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	4013      	ands	r3, r2
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f000 8110 	beq.w	800d830 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a2c      	ldr	r2, [pc, #176]	@ (800d6c8 <HAL_DMA_IRQHandler+0x690>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d04a      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a2b      	ldr	r2, [pc, #172]	@ (800d6cc <HAL_DMA_IRQHandler+0x694>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d045      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a29      	ldr	r2, [pc, #164]	@ (800d6d0 <HAL_DMA_IRQHandler+0x698>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d040      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a28      	ldr	r2, [pc, #160]	@ (800d6d4 <HAL_DMA_IRQHandler+0x69c>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d03b      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	4a26      	ldr	r2, [pc, #152]	@ (800d6d8 <HAL_DMA_IRQHandler+0x6a0>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d036      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4a25      	ldr	r2, [pc, #148]	@ (800d6dc <HAL_DMA_IRQHandler+0x6a4>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d031      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a23      	ldr	r2, [pc, #140]	@ (800d6e0 <HAL_DMA_IRQHandler+0x6a8>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d02c      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a22      	ldr	r2, [pc, #136]	@ (800d6e4 <HAL_DMA_IRQHandler+0x6ac>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d027      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a20      	ldr	r2, [pc, #128]	@ (800d6e8 <HAL_DMA_IRQHandler+0x6b0>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d022      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4a1f      	ldr	r2, [pc, #124]	@ (800d6ec <HAL_DMA_IRQHandler+0x6b4>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d01d      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a1d      	ldr	r2, [pc, #116]	@ (800d6f0 <HAL_DMA_IRQHandler+0x6b8>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d018      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4a1c      	ldr	r2, [pc, #112]	@ (800d6f4 <HAL_DMA_IRQHandler+0x6bc>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d013      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a1a      	ldr	r2, [pc, #104]	@ (800d6f8 <HAL_DMA_IRQHandler+0x6c0>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d00e      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a19      	ldr	r2, [pc, #100]	@ (800d6fc <HAL_DMA_IRQHandler+0x6c4>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d009      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a17      	ldr	r2, [pc, #92]	@ (800d700 <HAL_DMA_IRQHandler+0x6c8>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d004      	beq.n	800d6b0 <HAL_DMA_IRQHandler+0x678>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a16      	ldr	r2, [pc, #88]	@ (800d704 <HAL_DMA_IRQHandler+0x6cc>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d12b      	bne.n	800d708 <HAL_DMA_IRQHandler+0x6d0>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f003 0310 	and.w	r3, r3, #16
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	bf14      	ite	ne
 800d6be:	2301      	movne	r3, #1
 800d6c0:	2300      	moveq	r3, #0
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	e02a      	b.n	800d71c <HAL_DMA_IRQHandler+0x6e4>
 800d6c6:	bf00      	nop
 800d6c8:	40020010 	.word	0x40020010
 800d6cc:	40020028 	.word	0x40020028
 800d6d0:	40020040 	.word	0x40020040
 800d6d4:	40020058 	.word	0x40020058
 800d6d8:	40020070 	.word	0x40020070
 800d6dc:	40020088 	.word	0x40020088
 800d6e0:	400200a0 	.word	0x400200a0
 800d6e4:	400200b8 	.word	0x400200b8
 800d6e8:	40020410 	.word	0x40020410
 800d6ec:	40020428 	.word	0x40020428
 800d6f0:	40020440 	.word	0x40020440
 800d6f4:	40020458 	.word	0x40020458
 800d6f8:	40020470 	.word	0x40020470
 800d6fc:	40020488 	.word	0x40020488
 800d700:	400204a0 	.word	0x400204a0
 800d704:	400204b8 	.word	0x400204b8
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f003 0302 	and.w	r3, r3, #2
 800d712:	2b00      	cmp	r3, #0
 800d714:	bf14      	ite	ne
 800d716:	2301      	movne	r3, #1
 800d718:	2300      	moveq	r3, #0
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	f000 8087 	beq.w	800d830 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d726:	f003 031f 	and.w	r3, r3, #31
 800d72a:	2220      	movs	r2, #32
 800d72c:	409a      	lsls	r2, r3
 800d72e:	6a3b      	ldr	r3, [r7, #32]
 800d730:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	2b04      	cmp	r3, #4
 800d73c:	d139      	bne.n	800d7b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f022 0216 	bic.w	r2, r2, #22
 800d74c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	695a      	ldr	r2, [r3, #20]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d75c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d762:	2b00      	cmp	r3, #0
 800d764:	d103      	bne.n	800d76e <HAL_DMA_IRQHandler+0x736>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d007      	beq.n	800d77e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f022 0208 	bic.w	r2, r2, #8
 800d77c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d782:	f003 031f 	and.w	r3, r3, #31
 800d786:	223f      	movs	r2, #63	@ 0x3f
 800d788:	409a      	lsls	r2, r3
 800d78a:	6a3b      	ldr	r3, [r7, #32]
 800d78c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2201      	movs	r2, #1
 800d792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f000 834a 	beq.w	800de3c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	4798      	blx	r3
          }
          return;
 800d7b0:	e344      	b.n	800de3c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d018      	beq.n	800d7f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d108      	bne.n	800d7e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d02c      	beq.n	800d830 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	4798      	blx	r3
 800d7de:	e027      	b.n	800d830 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d023      	beq.n	800d830 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	4798      	blx	r3
 800d7f0:	e01e      	b.n	800d830 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d10f      	bne.n	800d820 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f022 0210 	bic.w	r2, r2, #16
 800d80e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2201      	movs	r2, #1
 800d814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d824:	2b00      	cmp	r3, #0
 800d826:	d003      	beq.n	800d830 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d834:	2b00      	cmp	r3, #0
 800d836:	f000 8306 	beq.w	800de46 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d83e:	f003 0301 	and.w	r3, r3, #1
 800d842:	2b00      	cmp	r3, #0
 800d844:	f000 8088 	beq.w	800d958 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2204      	movs	r2, #4
 800d84c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a7a      	ldr	r2, [pc, #488]	@ (800da40 <HAL_DMA_IRQHandler+0xa08>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d04a      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4a79      	ldr	r2, [pc, #484]	@ (800da44 <HAL_DMA_IRQHandler+0xa0c>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d045      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4a77      	ldr	r2, [pc, #476]	@ (800da48 <HAL_DMA_IRQHandler+0xa10>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d040      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a76      	ldr	r2, [pc, #472]	@ (800da4c <HAL_DMA_IRQHandler+0xa14>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d03b      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a74      	ldr	r2, [pc, #464]	@ (800da50 <HAL_DMA_IRQHandler+0xa18>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d036      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4a73      	ldr	r2, [pc, #460]	@ (800da54 <HAL_DMA_IRQHandler+0xa1c>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d031      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a71      	ldr	r2, [pc, #452]	@ (800da58 <HAL_DMA_IRQHandler+0xa20>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d02c      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4a70      	ldr	r2, [pc, #448]	@ (800da5c <HAL_DMA_IRQHandler+0xa24>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d027      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4a6e      	ldr	r2, [pc, #440]	@ (800da60 <HAL_DMA_IRQHandler+0xa28>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d022      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4a6d      	ldr	r2, [pc, #436]	@ (800da64 <HAL_DMA_IRQHandler+0xa2c>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d01d      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a6b      	ldr	r2, [pc, #428]	@ (800da68 <HAL_DMA_IRQHandler+0xa30>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d018      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4a6a      	ldr	r2, [pc, #424]	@ (800da6c <HAL_DMA_IRQHandler+0xa34>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d013      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a68      	ldr	r2, [pc, #416]	@ (800da70 <HAL_DMA_IRQHandler+0xa38>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d00e      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a67      	ldr	r2, [pc, #412]	@ (800da74 <HAL_DMA_IRQHandler+0xa3c>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d009      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a65      	ldr	r2, [pc, #404]	@ (800da78 <HAL_DMA_IRQHandler+0xa40>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d004      	beq.n	800d8f0 <HAL_DMA_IRQHandler+0x8b8>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a64      	ldr	r2, [pc, #400]	@ (800da7c <HAL_DMA_IRQHandler+0xa44>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d108      	bne.n	800d902 <HAL_DMA_IRQHandler+0x8ca>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f022 0201 	bic.w	r2, r2, #1
 800d8fe:	601a      	str	r2, [r3, #0]
 800d900:	e007      	b.n	800d912 <HAL_DMA_IRQHandler+0x8da>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f022 0201 	bic.w	r2, r2, #1
 800d910:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	3301      	adds	r3, #1
 800d916:	60fb      	str	r3, [r7, #12]
 800d918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d307      	bcc.n	800d92e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f003 0301 	and.w	r3, r3, #1
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1f2      	bne.n	800d912 <HAL_DMA_IRQHandler+0x8da>
 800d92c:	e000      	b.n	800d930 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d92e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f003 0301 	and.w	r3, r3, #1
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d004      	beq.n	800d948 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2203      	movs	r2, #3
 800d942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d946:	e003      	b.n	800d950 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2201      	movs	r2, #1
 800d94c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f000 8272 	beq.w	800de46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	4798      	blx	r3
 800d96a:	e26c      	b.n	800de46 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a43      	ldr	r2, [pc, #268]	@ (800da80 <HAL_DMA_IRQHandler+0xa48>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d022      	beq.n	800d9bc <HAL_DMA_IRQHandler+0x984>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a42      	ldr	r2, [pc, #264]	@ (800da84 <HAL_DMA_IRQHandler+0xa4c>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d01d      	beq.n	800d9bc <HAL_DMA_IRQHandler+0x984>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a40      	ldr	r2, [pc, #256]	@ (800da88 <HAL_DMA_IRQHandler+0xa50>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d018      	beq.n	800d9bc <HAL_DMA_IRQHandler+0x984>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a3f      	ldr	r2, [pc, #252]	@ (800da8c <HAL_DMA_IRQHandler+0xa54>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d013      	beq.n	800d9bc <HAL_DMA_IRQHandler+0x984>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4a3d      	ldr	r2, [pc, #244]	@ (800da90 <HAL_DMA_IRQHandler+0xa58>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d00e      	beq.n	800d9bc <HAL_DMA_IRQHandler+0x984>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a3c      	ldr	r2, [pc, #240]	@ (800da94 <HAL_DMA_IRQHandler+0xa5c>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d009      	beq.n	800d9bc <HAL_DMA_IRQHandler+0x984>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a3a      	ldr	r2, [pc, #232]	@ (800da98 <HAL_DMA_IRQHandler+0xa60>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d004      	beq.n	800d9bc <HAL_DMA_IRQHandler+0x984>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4a39      	ldr	r2, [pc, #228]	@ (800da9c <HAL_DMA_IRQHandler+0xa64>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d101      	bne.n	800d9c0 <HAL_DMA_IRQHandler+0x988>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e000      	b.n	800d9c2 <HAL_DMA_IRQHandler+0x98a>
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	f000 823f 	beq.w	800de46 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d9d4:	f003 031f 	and.w	r3, r3, #31
 800d9d8:	2204      	movs	r2, #4
 800d9da:	409a      	lsls	r2, r3
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	4013      	ands	r3, r2
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f000 80cd 	beq.w	800db80 <HAL_DMA_IRQHandler+0xb48>
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	f003 0304 	and.w	r3, r3, #4
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	f000 80c7 	beq.w	800db80 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d9f6:	f003 031f 	and.w	r3, r3, #31
 800d9fa:	2204      	movs	r2, #4
 800d9fc:	409a      	lsls	r2, r3
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d049      	beq.n	800daa0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800da12:	2b00      	cmp	r3, #0
 800da14:	d109      	bne.n	800da2a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	f000 8210 	beq.w	800de40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800da28:	e20a      	b.n	800de40 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da2e:	2b00      	cmp	r3, #0
 800da30:	f000 8206 	beq.w	800de40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800da3c:	e200      	b.n	800de40 <HAL_DMA_IRQHandler+0xe08>
 800da3e:	bf00      	nop
 800da40:	40020010 	.word	0x40020010
 800da44:	40020028 	.word	0x40020028
 800da48:	40020040 	.word	0x40020040
 800da4c:	40020058 	.word	0x40020058
 800da50:	40020070 	.word	0x40020070
 800da54:	40020088 	.word	0x40020088
 800da58:	400200a0 	.word	0x400200a0
 800da5c:	400200b8 	.word	0x400200b8
 800da60:	40020410 	.word	0x40020410
 800da64:	40020428 	.word	0x40020428
 800da68:	40020440 	.word	0x40020440
 800da6c:	40020458 	.word	0x40020458
 800da70:	40020470 	.word	0x40020470
 800da74:	40020488 	.word	0x40020488
 800da78:	400204a0 	.word	0x400204a0
 800da7c:	400204b8 	.word	0x400204b8
 800da80:	58025408 	.word	0x58025408
 800da84:	5802541c 	.word	0x5802541c
 800da88:	58025430 	.word	0x58025430
 800da8c:	58025444 	.word	0x58025444
 800da90:	58025458 	.word	0x58025458
 800da94:	5802546c 	.word	0x5802546c
 800da98:	58025480 	.word	0x58025480
 800da9c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	f003 0320 	and.w	r3, r3, #32
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d160      	bne.n	800db6c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a7f      	ldr	r2, [pc, #508]	@ (800dcac <HAL_DMA_IRQHandler+0xc74>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d04a      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a7d      	ldr	r2, [pc, #500]	@ (800dcb0 <HAL_DMA_IRQHandler+0xc78>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d045      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4a7c      	ldr	r2, [pc, #496]	@ (800dcb4 <HAL_DMA_IRQHandler+0xc7c>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d040      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a7a      	ldr	r2, [pc, #488]	@ (800dcb8 <HAL_DMA_IRQHandler+0xc80>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d03b      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a79      	ldr	r2, [pc, #484]	@ (800dcbc <HAL_DMA_IRQHandler+0xc84>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d036      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a77      	ldr	r2, [pc, #476]	@ (800dcc0 <HAL_DMA_IRQHandler+0xc88>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d031      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a76      	ldr	r2, [pc, #472]	@ (800dcc4 <HAL_DMA_IRQHandler+0xc8c>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d02c      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a74      	ldr	r2, [pc, #464]	@ (800dcc8 <HAL_DMA_IRQHandler+0xc90>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d027      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4a73      	ldr	r2, [pc, #460]	@ (800dccc <HAL_DMA_IRQHandler+0xc94>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d022      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a71      	ldr	r2, [pc, #452]	@ (800dcd0 <HAL_DMA_IRQHandler+0xc98>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d01d      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a70      	ldr	r2, [pc, #448]	@ (800dcd4 <HAL_DMA_IRQHandler+0xc9c>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d018      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a6e      	ldr	r2, [pc, #440]	@ (800dcd8 <HAL_DMA_IRQHandler+0xca0>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d013      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a6d      	ldr	r2, [pc, #436]	@ (800dcdc <HAL_DMA_IRQHandler+0xca4>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d00e      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a6b      	ldr	r2, [pc, #428]	@ (800dce0 <HAL_DMA_IRQHandler+0xca8>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d009      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a6a      	ldr	r2, [pc, #424]	@ (800dce4 <HAL_DMA_IRQHandler+0xcac>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d004      	beq.n	800db4a <HAL_DMA_IRQHandler+0xb12>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a68      	ldr	r2, [pc, #416]	@ (800dce8 <HAL_DMA_IRQHandler+0xcb0>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d108      	bne.n	800db5c <HAL_DMA_IRQHandler+0xb24>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f022 0208 	bic.w	r2, r2, #8
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	e007      	b.n	800db6c <HAL_DMA_IRQHandler+0xb34>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f022 0204 	bic.w	r2, r2, #4
 800db6a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db70:	2b00      	cmp	r3, #0
 800db72:	f000 8165 	beq.w	800de40 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800db7e:	e15f      	b.n	800de40 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db84:	f003 031f 	and.w	r3, r3, #31
 800db88:	2202      	movs	r2, #2
 800db8a:	409a      	lsls	r2, r3
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	4013      	ands	r3, r2
 800db90:	2b00      	cmp	r3, #0
 800db92:	f000 80c5 	beq.w	800dd20 <HAL_DMA_IRQHandler+0xce8>
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	f003 0302 	and.w	r3, r3, #2
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f000 80bf 	beq.w	800dd20 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dba6:	f003 031f 	and.w	r3, r3, #31
 800dbaa:	2202      	movs	r2, #2
 800dbac:	409a      	lsls	r2, r3
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d018      	beq.n	800dbee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d109      	bne.n	800dbda <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f000 813a 	beq.w	800de44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dbd8:	e134      	b.n	800de44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	f000 8130 	beq.w	800de44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dbec:	e12a      	b.n	800de44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	f003 0320 	and.w	r3, r3, #32
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f040 8089 	bne.w	800dd0c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	4a2b      	ldr	r2, [pc, #172]	@ (800dcac <HAL_DMA_IRQHandler+0xc74>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d04a      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a29      	ldr	r2, [pc, #164]	@ (800dcb0 <HAL_DMA_IRQHandler+0xc78>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d045      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a28      	ldr	r2, [pc, #160]	@ (800dcb4 <HAL_DMA_IRQHandler+0xc7c>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d040      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a26      	ldr	r2, [pc, #152]	@ (800dcb8 <HAL_DMA_IRQHandler+0xc80>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d03b      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a25      	ldr	r2, [pc, #148]	@ (800dcbc <HAL_DMA_IRQHandler+0xc84>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d036      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a23      	ldr	r2, [pc, #140]	@ (800dcc0 <HAL_DMA_IRQHandler+0xc88>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d031      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4a22      	ldr	r2, [pc, #136]	@ (800dcc4 <HAL_DMA_IRQHandler+0xc8c>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d02c      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4a20      	ldr	r2, [pc, #128]	@ (800dcc8 <HAL_DMA_IRQHandler+0xc90>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d027      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4a1f      	ldr	r2, [pc, #124]	@ (800dccc <HAL_DMA_IRQHandler+0xc94>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d022      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a1d      	ldr	r2, [pc, #116]	@ (800dcd0 <HAL_DMA_IRQHandler+0xc98>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d01d      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4a1c      	ldr	r2, [pc, #112]	@ (800dcd4 <HAL_DMA_IRQHandler+0xc9c>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d018      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a1a      	ldr	r2, [pc, #104]	@ (800dcd8 <HAL_DMA_IRQHandler+0xca0>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d013      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a19      	ldr	r2, [pc, #100]	@ (800dcdc <HAL_DMA_IRQHandler+0xca4>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d00e      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a17      	ldr	r2, [pc, #92]	@ (800dce0 <HAL_DMA_IRQHandler+0xca8>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d009      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a16      	ldr	r2, [pc, #88]	@ (800dce4 <HAL_DMA_IRQHandler+0xcac>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d004      	beq.n	800dc9a <HAL_DMA_IRQHandler+0xc62>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a14      	ldr	r2, [pc, #80]	@ (800dce8 <HAL_DMA_IRQHandler+0xcb0>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d128      	bne.n	800dcec <HAL_DMA_IRQHandler+0xcb4>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	681a      	ldr	r2, [r3, #0]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f022 0214 	bic.w	r2, r2, #20
 800dca8:	601a      	str	r2, [r3, #0]
 800dcaa:	e027      	b.n	800dcfc <HAL_DMA_IRQHandler+0xcc4>
 800dcac:	40020010 	.word	0x40020010
 800dcb0:	40020028 	.word	0x40020028
 800dcb4:	40020040 	.word	0x40020040
 800dcb8:	40020058 	.word	0x40020058
 800dcbc:	40020070 	.word	0x40020070
 800dcc0:	40020088 	.word	0x40020088
 800dcc4:	400200a0 	.word	0x400200a0
 800dcc8:	400200b8 	.word	0x400200b8
 800dccc:	40020410 	.word	0x40020410
 800dcd0:	40020428 	.word	0x40020428
 800dcd4:	40020440 	.word	0x40020440
 800dcd8:	40020458 	.word	0x40020458
 800dcdc:	40020470 	.word	0x40020470
 800dce0:	40020488 	.word	0x40020488
 800dce4:	400204a0 	.word	0x400204a0
 800dce8:	400204b8 	.word	0x400204b8
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f022 020a 	bic.w	r2, r2, #10
 800dcfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	f000 8097 	beq.w	800de44 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dd1e:	e091      	b.n	800de44 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd24:	f003 031f 	and.w	r3, r3, #31
 800dd28:	2208      	movs	r2, #8
 800dd2a:	409a      	lsls	r2, r3
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	4013      	ands	r3, r2
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f000 8088 	beq.w	800de46 <HAL_DMA_IRQHandler+0xe0e>
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	f003 0308 	and.w	r3, r3, #8
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f000 8082 	beq.w	800de46 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a41      	ldr	r2, [pc, #260]	@ (800de4c <HAL_DMA_IRQHandler+0xe14>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d04a      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a3f      	ldr	r2, [pc, #252]	@ (800de50 <HAL_DMA_IRQHandler+0xe18>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d045      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a3e      	ldr	r2, [pc, #248]	@ (800de54 <HAL_DMA_IRQHandler+0xe1c>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d040      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a3c      	ldr	r2, [pc, #240]	@ (800de58 <HAL_DMA_IRQHandler+0xe20>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d03b      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a3b      	ldr	r2, [pc, #236]	@ (800de5c <HAL_DMA_IRQHandler+0xe24>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d036      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a39      	ldr	r2, [pc, #228]	@ (800de60 <HAL_DMA_IRQHandler+0xe28>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d031      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a38      	ldr	r2, [pc, #224]	@ (800de64 <HAL_DMA_IRQHandler+0xe2c>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d02c      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a36      	ldr	r2, [pc, #216]	@ (800de68 <HAL_DMA_IRQHandler+0xe30>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d027      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4a35      	ldr	r2, [pc, #212]	@ (800de6c <HAL_DMA_IRQHandler+0xe34>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d022      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a33      	ldr	r2, [pc, #204]	@ (800de70 <HAL_DMA_IRQHandler+0xe38>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d01d      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4a32      	ldr	r2, [pc, #200]	@ (800de74 <HAL_DMA_IRQHandler+0xe3c>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d018      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a30      	ldr	r2, [pc, #192]	@ (800de78 <HAL_DMA_IRQHandler+0xe40>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d013      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4a2f      	ldr	r2, [pc, #188]	@ (800de7c <HAL_DMA_IRQHandler+0xe44>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d00e      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	4a2d      	ldr	r2, [pc, #180]	@ (800de80 <HAL_DMA_IRQHandler+0xe48>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d009      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4a2c      	ldr	r2, [pc, #176]	@ (800de84 <HAL_DMA_IRQHandler+0xe4c>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d004      	beq.n	800dde2 <HAL_DMA_IRQHandler+0xdaa>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4a2a      	ldr	r2, [pc, #168]	@ (800de88 <HAL_DMA_IRQHandler+0xe50>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d108      	bne.n	800ddf4 <HAL_DMA_IRQHandler+0xdbc>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f022 021c 	bic.w	r2, r2, #28
 800ddf0:	601a      	str	r2, [r3, #0]
 800ddf2:	e007      	b.n	800de04 <HAL_DMA_IRQHandler+0xdcc>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f022 020e 	bic.w	r2, r2, #14
 800de02:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de08:	f003 031f 	and.w	r3, r3, #31
 800de0c:	2201      	movs	r2, #1
 800de0e:	409a      	lsls	r2, r3
 800de10:	69fb      	ldr	r3, [r7, #28]
 800de12:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2201      	movs	r2, #1
 800de18:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2201      	movs	r2, #1
 800de1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d009      	beq.n	800de46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	4798      	blx	r3
 800de3a:	e004      	b.n	800de46 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800de3c:	bf00      	nop
 800de3e:	e002      	b.n	800de46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800de40:	bf00      	nop
 800de42:	e000      	b.n	800de46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800de44:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800de46:	3728      	adds	r7, #40	@ 0x28
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	40020010 	.word	0x40020010
 800de50:	40020028 	.word	0x40020028
 800de54:	40020040 	.word	0x40020040
 800de58:	40020058 	.word	0x40020058
 800de5c:	40020070 	.word	0x40020070
 800de60:	40020088 	.word	0x40020088
 800de64:	400200a0 	.word	0x400200a0
 800de68:	400200b8 	.word	0x400200b8
 800de6c:	40020410 	.word	0x40020410
 800de70:	40020428 	.word	0x40020428
 800de74:	40020440 	.word	0x40020440
 800de78:	40020458 	.word	0x40020458
 800de7c:	40020470 	.word	0x40020470
 800de80:	40020488 	.word	0x40020488
 800de84:	400204a0 	.word	0x400204a0
 800de88:	400204b8 	.word	0x400204b8

0800de8c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800de9a:	b2db      	uxtb	r3, r3
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	370c      	adds	r7, #12
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	370c      	adds	r7, #12
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b087      	sub	sp, #28
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]
 800decc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ded2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ded8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4a7f      	ldr	r2, [pc, #508]	@ (800e0dc <DMA_SetConfig+0x21c>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d072      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a7d      	ldr	r2, [pc, #500]	@ (800e0e0 <DMA_SetConfig+0x220>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d06d      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a7c      	ldr	r2, [pc, #496]	@ (800e0e4 <DMA_SetConfig+0x224>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d068      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a7a      	ldr	r2, [pc, #488]	@ (800e0e8 <DMA_SetConfig+0x228>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d063      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a79      	ldr	r2, [pc, #484]	@ (800e0ec <DMA_SetConfig+0x22c>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d05e      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a77      	ldr	r2, [pc, #476]	@ (800e0f0 <DMA_SetConfig+0x230>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d059      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a76      	ldr	r2, [pc, #472]	@ (800e0f4 <DMA_SetConfig+0x234>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d054      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a74      	ldr	r2, [pc, #464]	@ (800e0f8 <DMA_SetConfig+0x238>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d04f      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a73      	ldr	r2, [pc, #460]	@ (800e0fc <DMA_SetConfig+0x23c>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d04a      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a71      	ldr	r2, [pc, #452]	@ (800e100 <DMA_SetConfig+0x240>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d045      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a70      	ldr	r2, [pc, #448]	@ (800e104 <DMA_SetConfig+0x244>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d040      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4a6e      	ldr	r2, [pc, #440]	@ (800e108 <DMA_SetConfig+0x248>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d03b      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a6d      	ldr	r2, [pc, #436]	@ (800e10c <DMA_SetConfig+0x24c>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d036      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4a6b      	ldr	r2, [pc, #428]	@ (800e110 <DMA_SetConfig+0x250>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d031      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4a6a      	ldr	r2, [pc, #424]	@ (800e114 <DMA_SetConfig+0x254>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d02c      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a68      	ldr	r2, [pc, #416]	@ (800e118 <DMA_SetConfig+0x258>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d027      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4a67      	ldr	r2, [pc, #412]	@ (800e11c <DMA_SetConfig+0x25c>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d022      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a65      	ldr	r2, [pc, #404]	@ (800e120 <DMA_SetConfig+0x260>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d01d      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a64      	ldr	r2, [pc, #400]	@ (800e124 <DMA_SetConfig+0x264>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d018      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a62      	ldr	r2, [pc, #392]	@ (800e128 <DMA_SetConfig+0x268>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d013      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4a61      	ldr	r2, [pc, #388]	@ (800e12c <DMA_SetConfig+0x26c>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d00e      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4a5f      	ldr	r2, [pc, #380]	@ (800e130 <DMA_SetConfig+0x270>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d009      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4a5e      	ldr	r2, [pc, #376]	@ (800e134 <DMA_SetConfig+0x274>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d004      	beq.n	800dfca <DMA_SetConfig+0x10a>
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4a5c      	ldr	r2, [pc, #368]	@ (800e138 <DMA_SetConfig+0x278>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d101      	bne.n	800dfce <DMA_SetConfig+0x10e>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e000      	b.n	800dfd0 <DMA_SetConfig+0x110>
 800dfce:	2300      	movs	r3, #0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00d      	beq.n	800dff0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800dfdc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d004      	beq.n	800dff0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800dfee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4a39      	ldr	r2, [pc, #228]	@ (800e0dc <DMA_SetConfig+0x21c>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d04a      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4a38      	ldr	r2, [pc, #224]	@ (800e0e0 <DMA_SetConfig+0x220>)
 800e000:	4293      	cmp	r3, r2
 800e002:	d045      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4a36      	ldr	r2, [pc, #216]	@ (800e0e4 <DMA_SetConfig+0x224>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d040      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4a35      	ldr	r2, [pc, #212]	@ (800e0e8 <DMA_SetConfig+0x228>)
 800e014:	4293      	cmp	r3, r2
 800e016:	d03b      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4a33      	ldr	r2, [pc, #204]	@ (800e0ec <DMA_SetConfig+0x22c>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d036      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4a32      	ldr	r2, [pc, #200]	@ (800e0f0 <DMA_SetConfig+0x230>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d031      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4a30      	ldr	r2, [pc, #192]	@ (800e0f4 <DMA_SetConfig+0x234>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d02c      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4a2f      	ldr	r2, [pc, #188]	@ (800e0f8 <DMA_SetConfig+0x238>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d027      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4a2d      	ldr	r2, [pc, #180]	@ (800e0fc <DMA_SetConfig+0x23c>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d022      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a2c      	ldr	r2, [pc, #176]	@ (800e100 <DMA_SetConfig+0x240>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d01d      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4a2a      	ldr	r2, [pc, #168]	@ (800e104 <DMA_SetConfig+0x244>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d018      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4a29      	ldr	r2, [pc, #164]	@ (800e108 <DMA_SetConfig+0x248>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d013      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a27      	ldr	r2, [pc, #156]	@ (800e10c <DMA_SetConfig+0x24c>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d00e      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4a26      	ldr	r2, [pc, #152]	@ (800e110 <DMA_SetConfig+0x250>)
 800e078:	4293      	cmp	r3, r2
 800e07a:	d009      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a24      	ldr	r2, [pc, #144]	@ (800e114 <DMA_SetConfig+0x254>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d004      	beq.n	800e090 <DMA_SetConfig+0x1d0>
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4a23      	ldr	r2, [pc, #140]	@ (800e118 <DMA_SetConfig+0x258>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d101      	bne.n	800e094 <DMA_SetConfig+0x1d4>
 800e090:	2301      	movs	r3, #1
 800e092:	e000      	b.n	800e096 <DMA_SetConfig+0x1d6>
 800e094:	2300      	movs	r3, #0
 800e096:	2b00      	cmp	r3, #0
 800e098:	d059      	beq.n	800e14e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e09e:	f003 031f 	and.w	r3, r3, #31
 800e0a2:	223f      	movs	r2, #63	@ 0x3f
 800e0a4:	409a      	lsls	r2, r3
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800e0b8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	683a      	ldr	r2, [r7, #0]
 800e0c0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	2b40      	cmp	r3, #64	@ 0x40
 800e0c8:	d138      	bne.n	800e13c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	68ba      	ldr	r2, [r7, #8]
 800e0d8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800e0da:	e086      	b.n	800e1ea <DMA_SetConfig+0x32a>
 800e0dc:	40020010 	.word	0x40020010
 800e0e0:	40020028 	.word	0x40020028
 800e0e4:	40020040 	.word	0x40020040
 800e0e8:	40020058 	.word	0x40020058
 800e0ec:	40020070 	.word	0x40020070
 800e0f0:	40020088 	.word	0x40020088
 800e0f4:	400200a0 	.word	0x400200a0
 800e0f8:	400200b8 	.word	0x400200b8
 800e0fc:	40020410 	.word	0x40020410
 800e100:	40020428 	.word	0x40020428
 800e104:	40020440 	.word	0x40020440
 800e108:	40020458 	.word	0x40020458
 800e10c:	40020470 	.word	0x40020470
 800e110:	40020488 	.word	0x40020488
 800e114:	400204a0 	.word	0x400204a0
 800e118:	400204b8 	.word	0x400204b8
 800e11c:	58025408 	.word	0x58025408
 800e120:	5802541c 	.word	0x5802541c
 800e124:	58025430 	.word	0x58025430
 800e128:	58025444 	.word	0x58025444
 800e12c:	58025458 	.word	0x58025458
 800e130:	5802546c 	.word	0x5802546c
 800e134:	58025480 	.word	0x58025480
 800e138:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	68ba      	ldr	r2, [r7, #8]
 800e142:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	60da      	str	r2, [r3, #12]
}
 800e14c:	e04d      	b.n	800e1ea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4a29      	ldr	r2, [pc, #164]	@ (800e1f8 <DMA_SetConfig+0x338>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d022      	beq.n	800e19e <DMA_SetConfig+0x2de>
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a27      	ldr	r2, [pc, #156]	@ (800e1fc <DMA_SetConfig+0x33c>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d01d      	beq.n	800e19e <DMA_SetConfig+0x2de>
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4a26      	ldr	r2, [pc, #152]	@ (800e200 <DMA_SetConfig+0x340>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d018      	beq.n	800e19e <DMA_SetConfig+0x2de>
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4a24      	ldr	r2, [pc, #144]	@ (800e204 <DMA_SetConfig+0x344>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d013      	beq.n	800e19e <DMA_SetConfig+0x2de>
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a23      	ldr	r2, [pc, #140]	@ (800e208 <DMA_SetConfig+0x348>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d00e      	beq.n	800e19e <DMA_SetConfig+0x2de>
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a21      	ldr	r2, [pc, #132]	@ (800e20c <DMA_SetConfig+0x34c>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d009      	beq.n	800e19e <DMA_SetConfig+0x2de>
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	4a20      	ldr	r2, [pc, #128]	@ (800e210 <DMA_SetConfig+0x350>)
 800e190:	4293      	cmp	r3, r2
 800e192:	d004      	beq.n	800e19e <DMA_SetConfig+0x2de>
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4a1e      	ldr	r2, [pc, #120]	@ (800e214 <DMA_SetConfig+0x354>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d101      	bne.n	800e1a2 <DMA_SetConfig+0x2e2>
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e000      	b.n	800e1a4 <DMA_SetConfig+0x2e4>
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d020      	beq.n	800e1ea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e1ac:	f003 031f 	and.w	r3, r3, #31
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	409a      	lsls	r2, r3
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	683a      	ldr	r2, [r7, #0]
 800e1be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	2b40      	cmp	r3, #64	@ 0x40
 800e1c6:	d108      	bne.n	800e1da <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	68ba      	ldr	r2, [r7, #8]
 800e1d6:	60da      	str	r2, [r3, #12]
}
 800e1d8:	e007      	b.n	800e1ea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	68ba      	ldr	r2, [r7, #8]
 800e1e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	60da      	str	r2, [r3, #12]
}
 800e1ea:	bf00      	nop
 800e1ec:	371c      	adds	r7, #28
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr
 800e1f6:	bf00      	nop
 800e1f8:	58025408 	.word	0x58025408
 800e1fc:	5802541c 	.word	0x5802541c
 800e200:	58025430 	.word	0x58025430
 800e204:	58025444 	.word	0x58025444
 800e208:	58025458 	.word	0x58025458
 800e20c:	5802546c 	.word	0x5802546c
 800e210:	58025480 	.word	0x58025480
 800e214:	58025494 	.word	0x58025494

0800e218 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a42      	ldr	r2, [pc, #264]	@ (800e330 <DMA_CalcBaseAndBitshift+0x118>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d04a      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4a41      	ldr	r2, [pc, #260]	@ (800e334 <DMA_CalcBaseAndBitshift+0x11c>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d045      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4a3f      	ldr	r2, [pc, #252]	@ (800e338 <DMA_CalcBaseAndBitshift+0x120>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d040      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4a3e      	ldr	r2, [pc, #248]	@ (800e33c <DMA_CalcBaseAndBitshift+0x124>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d03b      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a3c      	ldr	r2, [pc, #240]	@ (800e340 <DMA_CalcBaseAndBitshift+0x128>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d036      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a3b      	ldr	r2, [pc, #236]	@ (800e344 <DMA_CalcBaseAndBitshift+0x12c>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d031      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a39      	ldr	r2, [pc, #228]	@ (800e348 <DMA_CalcBaseAndBitshift+0x130>)
 800e262:	4293      	cmp	r3, r2
 800e264:	d02c      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4a38      	ldr	r2, [pc, #224]	@ (800e34c <DMA_CalcBaseAndBitshift+0x134>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d027      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a36      	ldr	r2, [pc, #216]	@ (800e350 <DMA_CalcBaseAndBitshift+0x138>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d022      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a35      	ldr	r2, [pc, #212]	@ (800e354 <DMA_CalcBaseAndBitshift+0x13c>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d01d      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4a33      	ldr	r2, [pc, #204]	@ (800e358 <DMA_CalcBaseAndBitshift+0x140>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d018      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4a32      	ldr	r2, [pc, #200]	@ (800e35c <DMA_CalcBaseAndBitshift+0x144>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d013      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a30      	ldr	r2, [pc, #192]	@ (800e360 <DMA_CalcBaseAndBitshift+0x148>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d00e      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a2f      	ldr	r2, [pc, #188]	@ (800e364 <DMA_CalcBaseAndBitshift+0x14c>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d009      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a2d      	ldr	r2, [pc, #180]	@ (800e368 <DMA_CalcBaseAndBitshift+0x150>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d004      	beq.n	800e2c0 <DMA_CalcBaseAndBitshift+0xa8>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a2c      	ldr	r2, [pc, #176]	@ (800e36c <DMA_CalcBaseAndBitshift+0x154>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d101      	bne.n	800e2c4 <DMA_CalcBaseAndBitshift+0xac>
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	e000      	b.n	800e2c6 <DMA_CalcBaseAndBitshift+0xae>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d024      	beq.n	800e314 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	3b10      	subs	r3, #16
 800e2d2:	4a27      	ldr	r2, [pc, #156]	@ (800e370 <DMA_CalcBaseAndBitshift+0x158>)
 800e2d4:	fba2 2303 	umull	r2, r3, r2, r3
 800e2d8:	091b      	lsrs	r3, r3, #4
 800e2da:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f003 0307 	and.w	r3, r3, #7
 800e2e2:	4a24      	ldr	r2, [pc, #144]	@ (800e374 <DMA_CalcBaseAndBitshift+0x15c>)
 800e2e4:	5cd3      	ldrb	r3, [r2, r3]
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2b03      	cmp	r3, #3
 800e2f0:	d908      	bls.n	800e304 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	4b1f      	ldr	r3, [pc, #124]	@ (800e378 <DMA_CalcBaseAndBitshift+0x160>)
 800e2fa:	4013      	ands	r3, r2
 800e2fc:	1d1a      	adds	r2, r3, #4
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	659a      	str	r2, [r3, #88]	@ 0x58
 800e302:	e00d      	b.n	800e320 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	461a      	mov	r2, r3
 800e30a:	4b1b      	ldr	r3, [pc, #108]	@ (800e378 <DMA_CalcBaseAndBitshift+0x160>)
 800e30c:	4013      	ands	r3, r2
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	6593      	str	r3, [r2, #88]	@ 0x58
 800e312:	e005      	b.n	800e320 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800e324:	4618      	mov	r0, r3
 800e326:	3714      	adds	r7, #20
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr
 800e330:	40020010 	.word	0x40020010
 800e334:	40020028 	.word	0x40020028
 800e338:	40020040 	.word	0x40020040
 800e33c:	40020058 	.word	0x40020058
 800e340:	40020070 	.word	0x40020070
 800e344:	40020088 	.word	0x40020088
 800e348:	400200a0 	.word	0x400200a0
 800e34c:	400200b8 	.word	0x400200b8
 800e350:	40020410 	.word	0x40020410
 800e354:	40020428 	.word	0x40020428
 800e358:	40020440 	.word	0x40020440
 800e35c:	40020458 	.word	0x40020458
 800e360:	40020470 	.word	0x40020470
 800e364:	40020488 	.word	0x40020488
 800e368:	400204a0 	.word	0x400204a0
 800e36c:	400204b8 	.word	0x400204b8
 800e370:	aaaaaaab 	.word	0xaaaaaaab
 800e374:	0801f2ac 	.word	0x0801f2ac
 800e378:	fffffc00 	.word	0xfffffc00

0800e37c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b085      	sub	sp, #20
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e384:	2300      	movs	r3, #0
 800e386:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d120      	bne.n	800e3d2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e394:	2b03      	cmp	r3, #3
 800e396:	d858      	bhi.n	800e44a <DMA_CheckFifoParam+0xce>
 800e398:	a201      	add	r2, pc, #4	@ (adr r2, 800e3a0 <DMA_CheckFifoParam+0x24>)
 800e39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e39e:	bf00      	nop
 800e3a0:	0800e3b1 	.word	0x0800e3b1
 800e3a4:	0800e3c3 	.word	0x0800e3c3
 800e3a8:	0800e3b1 	.word	0x0800e3b1
 800e3ac:	0800e44b 	.word	0x0800e44b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d048      	beq.n	800e44e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e3c0:	e045      	b.n	800e44e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e3ca:	d142      	bne.n	800e452 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e3d0:	e03f      	b.n	800e452 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	699b      	ldr	r3, [r3, #24]
 800e3d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e3da:	d123      	bne.n	800e424 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3e0:	2b03      	cmp	r3, #3
 800e3e2:	d838      	bhi.n	800e456 <DMA_CheckFifoParam+0xda>
 800e3e4:	a201      	add	r2, pc, #4	@ (adr r2, 800e3ec <DMA_CheckFifoParam+0x70>)
 800e3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ea:	bf00      	nop
 800e3ec:	0800e3fd 	.word	0x0800e3fd
 800e3f0:	0800e403 	.word	0x0800e403
 800e3f4:	0800e3fd 	.word	0x0800e3fd
 800e3f8:	0800e415 	.word	0x0800e415
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	73fb      	strb	r3, [r7, #15]
        break;
 800e400:	e030      	b.n	800e464 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e406:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d025      	beq.n	800e45a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800e40e:	2301      	movs	r3, #1
 800e410:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e412:	e022      	b.n	800e45a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e418:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e41c:	d11f      	bne.n	800e45e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800e41e:	2301      	movs	r3, #1
 800e420:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e422:	e01c      	b.n	800e45e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e428:	2b02      	cmp	r3, #2
 800e42a:	d902      	bls.n	800e432 <DMA_CheckFifoParam+0xb6>
 800e42c:	2b03      	cmp	r3, #3
 800e42e:	d003      	beq.n	800e438 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800e430:	e018      	b.n	800e464 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800e432:	2301      	movs	r3, #1
 800e434:	73fb      	strb	r3, [r7, #15]
        break;
 800e436:	e015      	b.n	800e464 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e43c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00e      	beq.n	800e462 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800e444:	2301      	movs	r3, #1
 800e446:	73fb      	strb	r3, [r7, #15]
    break;
 800e448:	e00b      	b.n	800e462 <DMA_CheckFifoParam+0xe6>
        break;
 800e44a:	bf00      	nop
 800e44c:	e00a      	b.n	800e464 <DMA_CheckFifoParam+0xe8>
        break;
 800e44e:	bf00      	nop
 800e450:	e008      	b.n	800e464 <DMA_CheckFifoParam+0xe8>
        break;
 800e452:	bf00      	nop
 800e454:	e006      	b.n	800e464 <DMA_CheckFifoParam+0xe8>
        break;
 800e456:	bf00      	nop
 800e458:	e004      	b.n	800e464 <DMA_CheckFifoParam+0xe8>
        break;
 800e45a:	bf00      	nop
 800e45c:	e002      	b.n	800e464 <DMA_CheckFifoParam+0xe8>
        break;
 800e45e:	bf00      	nop
 800e460:	e000      	b.n	800e464 <DMA_CheckFifoParam+0xe8>
    break;
 800e462:	bf00      	nop
    }
  }

  return status;
 800e464:	7bfb      	ldrb	r3, [r7, #15]
}
 800e466:	4618      	mov	r0, r3
 800e468:	3714      	adds	r7, #20
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop

0800e474 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e474:	b480      	push	{r7}
 800e476:	b085      	sub	sp, #20
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	4a38      	ldr	r2, [pc, #224]	@ (800e568 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800e488:	4293      	cmp	r3, r2
 800e48a:	d022      	beq.n	800e4d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4a36      	ldr	r2, [pc, #216]	@ (800e56c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d01d      	beq.n	800e4d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4a35      	ldr	r2, [pc, #212]	@ (800e570 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d018      	beq.n	800e4d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4a33      	ldr	r2, [pc, #204]	@ (800e574 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d013      	beq.n	800e4d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4a32      	ldr	r2, [pc, #200]	@ (800e578 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d00e      	beq.n	800e4d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4a30      	ldr	r2, [pc, #192]	@ (800e57c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d009      	beq.n	800e4d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	4a2f      	ldr	r2, [pc, #188]	@ (800e580 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d004      	beq.n	800e4d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4a2d      	ldr	r2, [pc, #180]	@ (800e584 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d101      	bne.n	800e4d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e000      	b.n	800e4d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d01a      	beq.n	800e512 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	3b08      	subs	r3, #8
 800e4e4:	4a28      	ldr	r2, [pc, #160]	@ (800e588 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800e4e6:	fba2 2303 	umull	r2, r3, r2, r3
 800e4ea:	091b      	lsrs	r3, r3, #4
 800e4ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	4b26      	ldr	r3, [pc, #152]	@ (800e58c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800e4f2:	4413      	add	r3, r2
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	4a24      	ldr	r2, [pc, #144]	@ (800e590 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800e500:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f003 031f 	and.w	r3, r3, #31
 800e508:	2201      	movs	r2, #1
 800e50a:	409a      	lsls	r2, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e510:	e024      	b.n	800e55c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	b2db      	uxtb	r3, r3
 800e518:	3b10      	subs	r3, #16
 800e51a:	4a1e      	ldr	r2, [pc, #120]	@ (800e594 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800e51c:	fba2 2303 	umull	r2, r3, r2, r3
 800e520:	091b      	lsrs	r3, r3, #4
 800e522:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	4a1c      	ldr	r2, [pc, #112]	@ (800e598 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d806      	bhi.n	800e53a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	4a1b      	ldr	r2, [pc, #108]	@ (800e59c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d902      	bls.n	800e53a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	3308      	adds	r3, #8
 800e538:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	4b18      	ldr	r3, [pc, #96]	@ (800e5a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800e53e:	4413      	add	r3, r2
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	461a      	mov	r2, r3
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	4a16      	ldr	r2, [pc, #88]	@ (800e5a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e54c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f003 031f 	and.w	r3, r3, #31
 800e554:	2201      	movs	r2, #1
 800e556:	409a      	lsls	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e55c:	bf00      	nop
 800e55e:	3714      	adds	r7, #20
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr
 800e568:	58025408 	.word	0x58025408
 800e56c:	5802541c 	.word	0x5802541c
 800e570:	58025430 	.word	0x58025430
 800e574:	58025444 	.word	0x58025444
 800e578:	58025458 	.word	0x58025458
 800e57c:	5802546c 	.word	0x5802546c
 800e580:	58025480 	.word	0x58025480
 800e584:	58025494 	.word	0x58025494
 800e588:	cccccccd 	.word	0xcccccccd
 800e58c:	16009600 	.word	0x16009600
 800e590:	58025880 	.word	0x58025880
 800e594:	aaaaaaab 	.word	0xaaaaaaab
 800e598:	400204b8 	.word	0x400204b8
 800e59c:	4002040f 	.word	0x4002040f
 800e5a0:	10008200 	.word	0x10008200
 800e5a4:	40020880 	.word	0x40020880

0800e5a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d04a      	beq.n	800e654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2b08      	cmp	r3, #8
 800e5c2:	d847      	bhi.n	800e654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a25      	ldr	r2, [pc, #148]	@ (800e660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d022      	beq.n	800e614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4a24      	ldr	r2, [pc, #144]	@ (800e664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d01d      	beq.n	800e614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a22      	ldr	r2, [pc, #136]	@ (800e668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d018      	beq.n	800e614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a21      	ldr	r2, [pc, #132]	@ (800e66c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d013      	beq.n	800e614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4a1f      	ldr	r2, [pc, #124]	@ (800e670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d00e      	beq.n	800e614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4a1e      	ldr	r2, [pc, #120]	@ (800e674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d009      	beq.n	800e614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4a1c      	ldr	r2, [pc, #112]	@ (800e678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d004      	beq.n	800e614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4a1b      	ldr	r2, [pc, #108]	@ (800e67c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d101      	bne.n	800e618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e614:	2301      	movs	r3, #1
 800e616:	e000      	b.n	800e61a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e618:	2300      	movs	r3, #0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00a      	beq.n	800e634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	4b17      	ldr	r3, [pc, #92]	@ (800e680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e622:	4413      	add	r3, r2
 800e624:	009b      	lsls	r3, r3, #2
 800e626:	461a      	mov	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4a15      	ldr	r2, [pc, #84]	@ (800e684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e630:	671a      	str	r2, [r3, #112]	@ 0x70
 800e632:	e009      	b.n	800e648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e634:	68fa      	ldr	r2, [r7, #12]
 800e636:	4b14      	ldr	r3, [pc, #80]	@ (800e688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800e638:	4413      	add	r3, r2
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	461a      	mov	r2, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	4a11      	ldr	r2, [pc, #68]	@ (800e68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800e646:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	3b01      	subs	r3, #1
 800e64c:	2201      	movs	r2, #1
 800e64e:	409a      	lsls	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800e654:	bf00      	nop
 800e656:	3714      	adds	r7, #20
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr
 800e660:	58025408 	.word	0x58025408
 800e664:	5802541c 	.word	0x5802541c
 800e668:	58025430 	.word	0x58025430
 800e66c:	58025444 	.word	0x58025444
 800e670:	58025458 	.word	0x58025458
 800e674:	5802546c 	.word	0x5802546c
 800e678:	58025480 	.word	0x58025480
 800e67c:	58025494 	.word	0x58025494
 800e680:	1600963f 	.word	0x1600963f
 800e684:	58025940 	.word	0x58025940
 800e688:	1000823f 	.word	0x1000823f
 800e68c:	40020940 	.word	0x40020940

0800e690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800e690:	b480      	push	{r7}
 800e692:	b089      	sub	sp, #36	@ 0x24
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e69a:	2300      	movs	r3, #0
 800e69c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e69e:	4b86      	ldr	r3, [pc, #536]	@ (800e8b8 <HAL_GPIO_Init+0x228>)
 800e6a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e6a2:	e18c      	b.n	800e9be <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	2101      	movs	r1, #1
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	fa01 f303 	lsl.w	r3, r1, r3
 800e6b0:	4013      	ands	r3, r2
 800e6b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f000 817e 	beq.w	800e9b8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	f003 0303 	and.w	r3, r3, #3
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d005      	beq.n	800e6d4 <HAL_GPIO_Init+0x44>
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	f003 0303 	and.w	r3, r3, #3
 800e6d0:	2b02      	cmp	r3, #2
 800e6d2:	d130      	bne.n	800e736 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e6da:	69fb      	ldr	r3, [r7, #28]
 800e6dc:	005b      	lsls	r3, r3, #1
 800e6de:	2203      	movs	r2, #3
 800e6e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e6e4:	43db      	mvns	r3, r3
 800e6e6:	69ba      	ldr	r2, [r7, #24]
 800e6e8:	4013      	ands	r3, r2
 800e6ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	68da      	ldr	r2, [r3, #12]
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	005b      	lsls	r3, r3, #1
 800e6f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e6f8:	69ba      	ldr	r2, [r7, #24]
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	69ba      	ldr	r2, [r7, #24]
 800e702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e70a:	2201      	movs	r2, #1
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	fa02 f303 	lsl.w	r3, r2, r3
 800e712:	43db      	mvns	r3, r3
 800e714:	69ba      	ldr	r2, [r7, #24]
 800e716:	4013      	ands	r3, r2
 800e718:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	091b      	lsrs	r3, r3, #4
 800e720:	f003 0201 	and.w	r2, r3, #1
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	fa02 f303 	lsl.w	r3, r2, r3
 800e72a:	69ba      	ldr	r2, [r7, #24]
 800e72c:	4313      	orrs	r3, r2
 800e72e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	69ba      	ldr	r2, [r7, #24]
 800e734:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	f003 0303 	and.w	r3, r3, #3
 800e73e:	2b03      	cmp	r3, #3
 800e740:	d017      	beq.n	800e772 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	68db      	ldr	r3, [r3, #12]
 800e746:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	005b      	lsls	r3, r3, #1
 800e74c:	2203      	movs	r2, #3
 800e74e:	fa02 f303 	lsl.w	r3, r2, r3
 800e752:	43db      	mvns	r3, r3
 800e754:	69ba      	ldr	r2, [r7, #24]
 800e756:	4013      	ands	r3, r2
 800e758:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	689a      	ldr	r2, [r3, #8]
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	fa02 f303 	lsl.w	r3, r2, r3
 800e766:	69ba      	ldr	r2, [r7, #24]
 800e768:	4313      	orrs	r3, r2
 800e76a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	69ba      	ldr	r2, [r7, #24]
 800e770:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	f003 0303 	and.w	r3, r3, #3
 800e77a:	2b02      	cmp	r3, #2
 800e77c:	d123      	bne.n	800e7c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	08da      	lsrs	r2, r3, #3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	3208      	adds	r2, #8
 800e786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e78a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	f003 0307 	and.w	r3, r3, #7
 800e792:	009b      	lsls	r3, r3, #2
 800e794:	220f      	movs	r2, #15
 800e796:	fa02 f303 	lsl.w	r3, r2, r3
 800e79a:	43db      	mvns	r3, r3
 800e79c:	69ba      	ldr	r2, [r7, #24]
 800e79e:	4013      	ands	r3, r2
 800e7a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	691a      	ldr	r2, [r3, #16]
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	f003 0307 	and.w	r3, r3, #7
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e7b2:	69ba      	ldr	r2, [r7, #24]
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	08da      	lsrs	r2, r3, #3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	3208      	adds	r2, #8
 800e7c0:	69b9      	ldr	r1, [r7, #24]
 800e7c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	005b      	lsls	r3, r3, #1
 800e7d0:	2203      	movs	r2, #3
 800e7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800e7d6:	43db      	mvns	r3, r3
 800e7d8:	69ba      	ldr	r2, [r7, #24]
 800e7da:	4013      	ands	r3, r2
 800e7dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	f003 0203 	and.w	r2, r3, #3
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	005b      	lsls	r3, r3, #1
 800e7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e7ee:	69ba      	ldr	r2, [r7, #24]
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	69ba      	ldr	r2, [r7, #24]
 800e7f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e802:	2b00      	cmp	r3, #0
 800e804:	f000 80d8 	beq.w	800e9b8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e808:	4b2c      	ldr	r3, [pc, #176]	@ (800e8bc <HAL_GPIO_Init+0x22c>)
 800e80a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e80e:	4a2b      	ldr	r2, [pc, #172]	@ (800e8bc <HAL_GPIO_Init+0x22c>)
 800e810:	f043 0302 	orr.w	r3, r3, #2
 800e814:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800e818:	4b28      	ldr	r3, [pc, #160]	@ (800e8bc <HAL_GPIO_Init+0x22c>)
 800e81a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e81e:	f003 0302 	and.w	r3, r3, #2
 800e822:	60fb      	str	r3, [r7, #12]
 800e824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e826:	4a26      	ldr	r2, [pc, #152]	@ (800e8c0 <HAL_GPIO_Init+0x230>)
 800e828:	69fb      	ldr	r3, [r7, #28]
 800e82a:	089b      	lsrs	r3, r3, #2
 800e82c:	3302      	adds	r3, #2
 800e82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	f003 0303 	and.w	r3, r3, #3
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	220f      	movs	r2, #15
 800e83e:	fa02 f303 	lsl.w	r3, r2, r3
 800e842:	43db      	mvns	r3, r3
 800e844:	69ba      	ldr	r2, [r7, #24]
 800e846:	4013      	ands	r3, r2
 800e848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4a1d      	ldr	r2, [pc, #116]	@ (800e8c4 <HAL_GPIO_Init+0x234>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d04a      	beq.n	800e8e8 <HAL_GPIO_Init+0x258>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4a1c      	ldr	r2, [pc, #112]	@ (800e8c8 <HAL_GPIO_Init+0x238>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d02b      	beq.n	800e8b2 <HAL_GPIO_Init+0x222>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4a1b      	ldr	r2, [pc, #108]	@ (800e8cc <HAL_GPIO_Init+0x23c>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d025      	beq.n	800e8ae <HAL_GPIO_Init+0x21e>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	4a1a      	ldr	r2, [pc, #104]	@ (800e8d0 <HAL_GPIO_Init+0x240>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d01f      	beq.n	800e8aa <HAL_GPIO_Init+0x21a>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4a19      	ldr	r2, [pc, #100]	@ (800e8d4 <HAL_GPIO_Init+0x244>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d019      	beq.n	800e8a6 <HAL_GPIO_Init+0x216>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4a18      	ldr	r2, [pc, #96]	@ (800e8d8 <HAL_GPIO_Init+0x248>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d013      	beq.n	800e8a2 <HAL_GPIO_Init+0x212>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4a17      	ldr	r2, [pc, #92]	@ (800e8dc <HAL_GPIO_Init+0x24c>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d00d      	beq.n	800e89e <HAL_GPIO_Init+0x20e>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4a16      	ldr	r2, [pc, #88]	@ (800e8e0 <HAL_GPIO_Init+0x250>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d007      	beq.n	800e89a <HAL_GPIO_Init+0x20a>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4a15      	ldr	r2, [pc, #84]	@ (800e8e4 <HAL_GPIO_Init+0x254>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d101      	bne.n	800e896 <HAL_GPIO_Init+0x206>
 800e892:	2309      	movs	r3, #9
 800e894:	e029      	b.n	800e8ea <HAL_GPIO_Init+0x25a>
 800e896:	230a      	movs	r3, #10
 800e898:	e027      	b.n	800e8ea <HAL_GPIO_Init+0x25a>
 800e89a:	2307      	movs	r3, #7
 800e89c:	e025      	b.n	800e8ea <HAL_GPIO_Init+0x25a>
 800e89e:	2306      	movs	r3, #6
 800e8a0:	e023      	b.n	800e8ea <HAL_GPIO_Init+0x25a>
 800e8a2:	2305      	movs	r3, #5
 800e8a4:	e021      	b.n	800e8ea <HAL_GPIO_Init+0x25a>
 800e8a6:	2304      	movs	r3, #4
 800e8a8:	e01f      	b.n	800e8ea <HAL_GPIO_Init+0x25a>
 800e8aa:	2303      	movs	r3, #3
 800e8ac:	e01d      	b.n	800e8ea <HAL_GPIO_Init+0x25a>
 800e8ae:	2302      	movs	r3, #2
 800e8b0:	e01b      	b.n	800e8ea <HAL_GPIO_Init+0x25a>
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e019      	b.n	800e8ea <HAL_GPIO_Init+0x25a>
 800e8b6:	bf00      	nop
 800e8b8:	58000080 	.word	0x58000080
 800e8bc:	58024400 	.word	0x58024400
 800e8c0:	58000400 	.word	0x58000400
 800e8c4:	58020000 	.word	0x58020000
 800e8c8:	58020400 	.word	0x58020400
 800e8cc:	58020800 	.word	0x58020800
 800e8d0:	58020c00 	.word	0x58020c00
 800e8d4:	58021000 	.word	0x58021000
 800e8d8:	58021400 	.word	0x58021400
 800e8dc:	58021800 	.word	0x58021800
 800e8e0:	58021c00 	.word	0x58021c00
 800e8e4:	58022400 	.word	0x58022400
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	69fa      	ldr	r2, [r7, #28]
 800e8ec:	f002 0203 	and.w	r2, r2, #3
 800e8f0:	0092      	lsls	r2, r2, #2
 800e8f2:	4093      	lsls	r3, r2
 800e8f4:	69ba      	ldr	r2, [r7, #24]
 800e8f6:	4313      	orrs	r3, r2
 800e8f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e8fa:	4938      	ldr	r1, [pc, #224]	@ (800e9dc <HAL_GPIO_Init+0x34c>)
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	089b      	lsrs	r3, r3, #2
 800e900:	3302      	adds	r3, #2
 800e902:	69ba      	ldr	r2, [r7, #24]
 800e904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	43db      	mvns	r3, r3
 800e914:	69ba      	ldr	r2, [r7, #24]
 800e916:	4013      	ands	r3, r2
 800e918:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e922:	2b00      	cmp	r3, #0
 800e924:	d003      	beq.n	800e92e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e926:	69ba      	ldr	r2, [r7, #24]
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	4313      	orrs	r3, r2
 800e92c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e92e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e932:	69bb      	ldr	r3, [r7, #24]
 800e934:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	43db      	mvns	r3, r3
 800e942:	69ba      	ldr	r2, [r7, #24]
 800e944:	4013      	ands	r3, r2
 800e946:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e950:	2b00      	cmp	r3, #0
 800e952:	d003      	beq.n	800e95c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e954:	69ba      	ldr	r2, [r7, #24]
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	4313      	orrs	r3, r2
 800e95a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e95c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	685b      	ldr	r3, [r3, #4]
 800e968:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	43db      	mvns	r3, r3
 800e96e:	69ba      	ldr	r2, [r7, #24]
 800e970:	4013      	ands	r3, r2
 800e972:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d003      	beq.n	800e988 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e980:	69ba      	ldr	r2, [r7, #24]
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	4313      	orrs	r3, r2
 800e986:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	69ba      	ldr	r2, [r7, #24]
 800e98c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	43db      	mvns	r3, r3
 800e998:	69ba      	ldr	r2, [r7, #24]
 800e99a:	4013      	ands	r3, r2
 800e99c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d003      	beq.n	800e9b2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e9aa:	69ba      	ldr	r2, [r7, #24]
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	4313      	orrs	r3, r2
 800e9b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	69ba      	ldr	r2, [r7, #24]
 800e9b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	fa22 f303 	lsr.w	r3, r2, r3
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f47f ae6b 	bne.w	800e6a4 <HAL_GPIO_Init+0x14>
  }
}
 800e9ce:	bf00      	nop
 800e9d0:	bf00      	nop
 800e9d2:	3724      	adds	r7, #36	@ 0x24
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr
 800e9dc:	58000400 	.word	0x58000400

0800e9e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	691a      	ldr	r2, [r3, #16]
 800e9f0:	887b      	ldrh	r3, [r7, #2]
 800e9f2:	4013      	ands	r3, r2
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d002      	beq.n	800e9fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	73fb      	strb	r3, [r7, #15]
 800e9fc:	e001      	b.n	800ea02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ea02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3714      	adds	r7, #20
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	460b      	mov	r3, r1
 800ea1a:	807b      	strh	r3, [r7, #2]
 800ea1c:	4613      	mov	r3, r2
 800ea1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ea20:	787b      	ldrb	r3, [r7, #1]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d003      	beq.n	800ea2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ea26:	887a      	ldrh	r2, [r7, #2]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ea2c:	e003      	b.n	800ea36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ea2e:	887b      	ldrh	r3, [r7, #2]
 800ea30:	041a      	lsls	r2, r3, #16
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	619a      	str	r2, [r3, #24]
}
 800ea36:	bf00      	nop
 800ea38:	370c      	adds	r7, #12
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr

0800ea42 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ea42:	b580      	push	{r7, lr}
 800ea44:	b082      	sub	sp, #8
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	4603      	mov	r3, r0
 800ea4a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800ea4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea50:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ea54:	88fb      	ldrh	r3, [r7, #6]
 800ea56:	4013      	ands	r3, r2
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d008      	beq.n	800ea6e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ea5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ea60:	88fb      	ldrh	r3, [r7, #6]
 800ea62:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ea66:	88fb      	ldrh	r3, [r7, #6]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7f7 fd03 	bl	8006474 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800ea6e:	bf00      	nop
 800ea70:	3708      	adds	r7, #8
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
	...

0800ea78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d101      	bne.n	800ea8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ea86:	2301      	movs	r3, #1
 800ea88:	e08b      	b.n	800eba2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d106      	bne.n	800eaa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7f6 fa9a 	bl	8004fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2224      	movs	r2, #36	@ 0x24
 800eaa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f022 0201 	bic.w	r2, r2, #1
 800eaba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	685a      	ldr	r2, [r3, #4]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800eac8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	689a      	ldr	r2, [r3, #8]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ead8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d107      	bne.n	800eaf2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	689a      	ldr	r2, [r3, #8]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800eaee:	609a      	str	r2, [r3, #8]
 800eaf0:	e006      	b.n	800eb00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	689a      	ldr	r2, [r3, #8]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800eafe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	68db      	ldr	r3, [r3, #12]
 800eb04:	2b02      	cmp	r3, #2
 800eb06:	d108      	bne.n	800eb1a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	685a      	ldr	r2, [r3, #4]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eb16:	605a      	str	r2, [r3, #4]
 800eb18:	e007      	b.n	800eb2a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	685a      	ldr	r2, [r3, #4]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800eb28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	6859      	ldr	r1, [r3, #4]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	4b1d      	ldr	r3, [pc, #116]	@ (800ebac <HAL_I2C_Init+0x134>)
 800eb36:	430b      	orrs	r3, r1
 800eb38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	68da      	ldr	r2, [r3, #12]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800eb48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	691a      	ldr	r2, [r3, #16]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	695b      	ldr	r3, [r3, #20]
 800eb52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	699b      	ldr	r3, [r3, #24]
 800eb5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	430a      	orrs	r2, r1
 800eb62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	69d9      	ldr	r1, [r3, #28]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6a1a      	ldr	r2, [r3, #32]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	430a      	orrs	r2, r1
 800eb72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f042 0201 	orr.w	r2, r2, #1
 800eb82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2220      	movs	r2, #32
 800eb8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2200      	movs	r2, #0
 800eb96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3708      	adds	r7, #8
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	02008000 	.word	0x02008000

0800ebb0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b088      	sub	sp, #32
 800ebb4:	af02      	add	r7, sp, #8
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	4608      	mov	r0, r1
 800ebba:	4611      	mov	r1, r2
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	817b      	strh	r3, [r7, #10]
 800ebc2:	460b      	mov	r3, r1
 800ebc4:	813b      	strh	r3, [r7, #8]
 800ebc6:	4613      	mov	r3, r2
 800ebc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ebd0:	b2db      	uxtb	r3, r3
 800ebd2:	2b20      	cmp	r3, #32
 800ebd4:	f040 80f9 	bne.w	800edca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ebd8:	6a3b      	ldr	r3, [r7, #32]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d002      	beq.n	800ebe4 <HAL_I2C_Mem_Write+0x34>
 800ebde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d105      	bne.n	800ebf0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ebec:	2301      	movs	r3, #1
 800ebee:	e0ed      	b.n	800edcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d101      	bne.n	800ebfe <HAL_I2C_Mem_Write+0x4e>
 800ebfa:	2302      	movs	r3, #2
 800ebfc:	e0e6      	b.n	800edcc <HAL_I2C_Mem_Write+0x21c>
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2201      	movs	r2, #1
 800ec02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ec06:	f7fa fdbb 	bl	8009780 <HAL_GetTick>
 800ec0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	2319      	movs	r3, #25
 800ec12:	2201      	movs	r2, #1
 800ec14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ec18:	68f8      	ldr	r0, [r7, #12]
 800ec1a:	f002 f818 	bl	8010c4e <I2C_WaitOnFlagUntilTimeout>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d001      	beq.n	800ec28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800ec24:	2301      	movs	r3, #1
 800ec26:	e0d1      	b.n	800edcc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2221      	movs	r2, #33	@ 0x21
 800ec2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2240      	movs	r2, #64	@ 0x40
 800ec34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6a3a      	ldr	r2, [r7, #32]
 800ec42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ec48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ec50:	88f8      	ldrh	r0, [r7, #6]
 800ec52:	893a      	ldrh	r2, [r7, #8]
 800ec54:	8979      	ldrh	r1, [r7, #10]
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	9301      	str	r3, [sp, #4]
 800ec5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	4603      	mov	r3, r0
 800ec60:	68f8      	ldr	r0, [r7, #12]
 800ec62:	f001 f965 	bl	800ff30 <I2C_RequestMemoryWrite>
 800ec66:	4603      	mov	r3, r0
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d005      	beq.n	800ec78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ec74:	2301      	movs	r3, #1
 800ec76:	e0a9      	b.n	800edcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	2bff      	cmp	r3, #255	@ 0xff
 800ec80:	d90e      	bls.n	800eca0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	22ff      	movs	r2, #255	@ 0xff
 800ec86:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec8c:	b2da      	uxtb	r2, r3
 800ec8e:	8979      	ldrh	r1, [r7, #10]
 800ec90:	2300      	movs	r3, #0
 800ec92:	9300      	str	r3, [sp, #0]
 800ec94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f002 f99b 	bl	8010fd4 <I2C_TransferConfig>
 800ec9e:	e00f      	b.n	800ecc0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eca4:	b29a      	uxth	r2, r3
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecae:	b2da      	uxtb	r2, r3
 800ecb0:	8979      	ldrh	r1, [r7, #10]
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	9300      	str	r3, [sp, #0]
 800ecb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ecba:	68f8      	ldr	r0, [r7, #12]
 800ecbc:	f002 f98a 	bl	8010fd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ecc0:	697a      	ldr	r2, [r7, #20]
 800ecc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	f002 f81b 	bl	8010d00 <I2C_WaitOnTXISFlagUntilTimeout>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d001      	beq.n	800ecd4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e07b      	b.n	800edcc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecd8:	781a      	ldrb	r2, [r3, #0]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ece4:	1c5a      	adds	r2, r3, #1
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecfc:	3b01      	subs	r3, #1
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed08:	b29b      	uxth	r3, r3
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d034      	beq.n	800ed78 <HAL_I2C_Mem_Write+0x1c8>
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d130      	bne.n	800ed78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	9300      	str	r3, [sp, #0]
 800ed1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	2180      	movs	r1, #128	@ 0x80
 800ed20:	68f8      	ldr	r0, [r7, #12]
 800ed22:	f001 ff94 	bl	8010c4e <I2C_WaitOnFlagUntilTimeout>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d001      	beq.n	800ed30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	e04d      	b.n	800edcc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	2bff      	cmp	r3, #255	@ 0xff
 800ed38:	d90e      	bls.n	800ed58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	22ff      	movs	r2, #255	@ 0xff
 800ed3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed44:	b2da      	uxtb	r2, r3
 800ed46:	8979      	ldrh	r1, [r7, #10]
 800ed48:	2300      	movs	r3, #0
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f002 f93f 	bl	8010fd4 <I2C_TransferConfig>
 800ed56:	e00f      	b.n	800ed78 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed5c:	b29a      	uxth	r2, r3
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed66:	b2da      	uxtb	r2, r3
 800ed68:	8979      	ldrh	r1, [r7, #10]
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	9300      	str	r3, [sp, #0]
 800ed6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ed72:	68f8      	ldr	r0, [r7, #12]
 800ed74:	f002 f92e 	bl	8010fd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d19e      	bne.n	800ecc0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ed82:	697a      	ldr	r2, [r7, #20]
 800ed84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed86:	68f8      	ldr	r0, [r7, #12]
 800ed88:	f002 f801 	bl	8010d8e <I2C_WaitOnSTOPFlagUntilTimeout>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d001      	beq.n	800ed96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ed92:	2301      	movs	r3, #1
 800ed94:	e01a      	b.n	800edcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	2220      	movs	r2, #32
 800ed9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	6859      	ldr	r1, [r3, #4]
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681a      	ldr	r2, [r3, #0]
 800eda8:	4b0a      	ldr	r3, [pc, #40]	@ (800edd4 <HAL_I2C_Mem_Write+0x224>)
 800edaa:	400b      	ands	r3, r1
 800edac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2220      	movs	r2, #32
 800edb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2200      	movs	r2, #0
 800edba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2200      	movs	r2, #0
 800edc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800edc6:	2300      	movs	r3, #0
 800edc8:	e000      	b.n	800edcc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800edca:	2302      	movs	r3, #2
  }
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3718      	adds	r7, #24
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	fe00e800 	.word	0xfe00e800

0800edd8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b088      	sub	sp, #32
 800eddc:	af02      	add	r7, sp, #8
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	4608      	mov	r0, r1
 800ede2:	4611      	mov	r1, r2
 800ede4:	461a      	mov	r2, r3
 800ede6:	4603      	mov	r3, r0
 800ede8:	817b      	strh	r3, [r7, #10]
 800edea:	460b      	mov	r3, r1
 800edec:	813b      	strh	r3, [r7, #8]
 800edee:	4613      	mov	r3, r2
 800edf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	2b20      	cmp	r3, #32
 800edfc:	f040 80fd 	bne.w	800effa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee00:	6a3b      	ldr	r3, [r7, #32]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d002      	beq.n	800ee0c <HAL_I2C_Mem_Read+0x34>
 800ee06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d105      	bne.n	800ee18 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee12:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ee14:	2301      	movs	r3, #1
 800ee16:	e0f1      	b.n	800effc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d101      	bne.n	800ee26 <HAL_I2C_Mem_Read+0x4e>
 800ee22:	2302      	movs	r3, #2
 800ee24:	e0ea      	b.n	800effc <HAL_I2C_Mem_Read+0x224>
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ee2e:	f7fa fca7 	bl	8009780 <HAL_GetTick>
 800ee32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	2319      	movs	r3, #25
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f001 ff04 	bl	8010c4e <I2C_WaitOnFlagUntilTimeout>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d001      	beq.n	800ee50 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	e0d5      	b.n	800effc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2222      	movs	r2, #34	@ 0x22
 800ee54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2240      	movs	r2, #64	@ 0x40
 800ee5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2200      	movs	r2, #0
 800ee64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6a3a      	ldr	r2, [r7, #32]
 800ee6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ee70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2200      	movs	r2, #0
 800ee76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ee78:	88f8      	ldrh	r0, [r7, #6]
 800ee7a:	893a      	ldrh	r2, [r7, #8]
 800ee7c:	8979      	ldrh	r1, [r7, #10]
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	9301      	str	r3, [sp, #4]
 800ee82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	4603      	mov	r3, r0
 800ee88:	68f8      	ldr	r0, [r7, #12]
 800ee8a:	f001 f8a5 	bl	800ffd8 <I2C_RequestMemoryRead>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d005      	beq.n	800eea0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2200      	movs	r2, #0
 800ee98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	e0ad      	b.n	800effc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	2bff      	cmp	r3, #255	@ 0xff
 800eea8:	d90e      	bls.n	800eec8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	22ff      	movs	r2, #255	@ 0xff
 800eeae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eeb4:	b2da      	uxtb	r2, r3
 800eeb6:	8979      	ldrh	r1, [r7, #10]
 800eeb8:	4b52      	ldr	r3, [pc, #328]	@ (800f004 <HAL_I2C_Mem_Read+0x22c>)
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	f002 f887 	bl	8010fd4 <I2C_TransferConfig>
 800eec6:	e00f      	b.n	800eee8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eecc:	b29a      	uxth	r2, r3
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eed6:	b2da      	uxtb	r2, r3
 800eed8:	8979      	ldrh	r1, [r7, #10]
 800eeda:	4b4a      	ldr	r3, [pc, #296]	@ (800f004 <HAL_I2C_Mem_Read+0x22c>)
 800eedc:	9300      	str	r3, [sp, #0]
 800eede:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f002 f876 	bl	8010fd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	9300      	str	r3, [sp, #0]
 800eeec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeee:	2200      	movs	r2, #0
 800eef0:	2104      	movs	r1, #4
 800eef2:	68f8      	ldr	r0, [r7, #12]
 800eef4:	f001 feab 	bl	8010c4e <I2C_WaitOnFlagUntilTimeout>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d001      	beq.n	800ef02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800eefe:	2301      	movs	r3, #1
 800ef00:	e07c      	b.n	800effc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef0c:	b2d2      	uxtb	r2, r2
 800ef0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef14:	1c5a      	adds	r2, r3, #1
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef1e:	3b01      	subs	r3, #1
 800ef20:	b29a      	uxth	r2, r3
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	3b01      	subs	r3, #1
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d034      	beq.n	800efa8 <HAL_I2C_Mem_Read+0x1d0>
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d130      	bne.n	800efa8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	2180      	movs	r1, #128	@ 0x80
 800ef50:	68f8      	ldr	r0, [r7, #12]
 800ef52:	f001 fe7c 	bl	8010c4e <I2C_WaitOnFlagUntilTimeout>
 800ef56:	4603      	mov	r3, r0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d001      	beq.n	800ef60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e04d      	b.n	800effc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef64:	b29b      	uxth	r3, r3
 800ef66:	2bff      	cmp	r3, #255	@ 0xff
 800ef68:	d90e      	bls.n	800ef88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	22ff      	movs	r2, #255	@ 0xff
 800ef6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef74:	b2da      	uxtb	r2, r3
 800ef76:	8979      	ldrh	r1, [r7, #10]
 800ef78:	2300      	movs	r3, #0
 800ef7a:	9300      	str	r3, [sp, #0]
 800ef7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f002 f827 	bl	8010fd4 <I2C_TransferConfig>
 800ef86:	e00f      	b.n	800efa8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef8c:	b29a      	uxth	r2, r3
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef96:	b2da      	uxtb	r2, r3
 800ef98:	8979      	ldrh	r1, [r7, #10]
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	9300      	str	r3, [sp, #0]
 800ef9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800efa2:	68f8      	ldr	r0, [r7, #12]
 800efa4:	f002 f816 	bl	8010fd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efac:	b29b      	uxth	r3, r3
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d19a      	bne.n	800eee8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800efb2:	697a      	ldr	r2, [r7, #20]
 800efb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800efb6:	68f8      	ldr	r0, [r7, #12]
 800efb8:	f001 fee9 	bl	8010d8e <I2C_WaitOnSTOPFlagUntilTimeout>
 800efbc:	4603      	mov	r3, r0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d001      	beq.n	800efc6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800efc2:	2301      	movs	r3, #1
 800efc4:	e01a      	b.n	800effc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	2220      	movs	r2, #32
 800efcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	6859      	ldr	r1, [r3, #4]
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	4b0b      	ldr	r3, [pc, #44]	@ (800f008 <HAL_I2C_Mem_Read+0x230>)
 800efda:	400b      	ands	r3, r1
 800efdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2220      	movs	r2, #32
 800efe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2200      	movs	r2, #0
 800efea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2200      	movs	r2, #0
 800eff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800eff6:	2300      	movs	r3, #0
 800eff8:	e000      	b.n	800effc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800effa:	2302      	movs	r3, #2
  }
}
 800effc:	4618      	mov	r0, r3
 800effe:	3718      	adds	r7, #24
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	80002400 	.word	0x80002400
 800f008:	fe00e800 	.word	0xfe00e800

0800f00c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af02      	add	r7, sp, #8
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	4608      	mov	r0, r1
 800f016:	4611      	mov	r1, r2
 800f018:	461a      	mov	r2, r3
 800f01a:	4603      	mov	r3, r0
 800f01c:	817b      	strh	r3, [r7, #10]
 800f01e:	460b      	mov	r3, r1
 800f020:	813b      	strh	r3, [r7, #8]
 800f022:	4613      	mov	r3, r2
 800f024:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f02c:	b2db      	uxtb	r3, r3
 800f02e:	2b20      	cmp	r3, #32
 800f030:	d16a      	bne.n	800f108 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800f032:	69bb      	ldr	r3, [r7, #24]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d002      	beq.n	800f03e <HAL_I2C_Mem_Write_IT+0x32>
 800f038:	8bbb      	ldrh	r3, [r7, #28]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d105      	bne.n	800f04a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f044:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800f046:	2301      	movs	r3, #1
 800f048:	e05f      	b.n	800f10a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	699b      	ldr	r3, [r3, #24]
 800f050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f058:	d101      	bne.n	800f05e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800f05a:	2302      	movs	r3, #2
 800f05c:	e055      	b.n	800f10a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f064:	2b01      	cmp	r3, #1
 800f066:	d101      	bne.n	800f06c <HAL_I2C_Mem_Write_IT+0x60>
 800f068:	2302      	movs	r3, #2
 800f06a:	e04e      	b.n	800f10a <HAL_I2C_Mem_Write_IT+0xfe>
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2201      	movs	r2, #1
 800f070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2221      	movs	r2, #33	@ 0x21
 800f078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2240      	movs	r2, #64	@ 0x40
 800f080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2200      	movs	r2, #0
 800f088:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2200      	movs	r2, #0
 800f08e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	69ba      	ldr	r2, [r7, #24]
 800f094:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	8bba      	ldrh	r2, [r7, #28]
 800f09a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	4a1d      	ldr	r2, [pc, #116]	@ (800f114 <HAL_I2C_Mem_Write_IT+0x108>)
 800f0a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	4a1c      	ldr	r2, [pc, #112]	@ (800f118 <HAL_I2C_Mem_Write_IT+0x10c>)
 800f0a6:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800f0a8:	897a      	ldrh	r2, [r7, #10]
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f0ae:	88fb      	ldrh	r3, [r7, #6]
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d109      	bne.n	800f0c8 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f0b4:	893b      	ldrh	r3, [r7, #8]
 800f0b6:	b2da      	uxtb	r2, r3
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0c4:	651a      	str	r2, [r3, #80]	@ 0x50
 800f0c6:	e00b      	b.n	800f0e0 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f0c8:	893b      	ldrh	r3, [r7, #8]
 800f0ca:	0a1b      	lsrs	r3, r3, #8
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	b2da      	uxtb	r2, r3
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800f0d6:	893b      	ldrh	r3, [r7, #8]
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	461a      	mov	r2, r3
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800f0e0:	88fb      	ldrh	r3, [r7, #6]
 800f0e2:	b2da      	uxtb	r2, r3
 800f0e4:	8979      	ldrh	r1, [r7, #10]
 800f0e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f11c <HAL_I2C_Mem_Write_IT+0x110>)
 800f0e8:	9300      	str	r3, [sp, #0]
 800f0ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f0ee:	68f8      	ldr	r0, [r7, #12]
 800f0f0:	f001 ff70 	bl	8010fd4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f0fc:	2101      	movs	r1, #1
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f001 ff9a 	bl	8011038 <I2C_Enable_IRQ>

    return HAL_OK;
 800f104:	2300      	movs	r3, #0
 800f106:	e000      	b.n	800f10a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800f108:	2302      	movs	r3, #2
  }
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3710      	adds	r7, #16
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	ffff0000 	.word	0xffff0000
 800f118:	0800f31d 	.word	0x0800f31d
 800f11c:	80002000 	.word	0x80002000

0800f120 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b086      	sub	sp, #24
 800f124:	af02      	add	r7, sp, #8
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	4608      	mov	r0, r1
 800f12a:	4611      	mov	r1, r2
 800f12c:	461a      	mov	r2, r3
 800f12e:	4603      	mov	r3, r0
 800f130:	817b      	strh	r3, [r7, #10]
 800f132:	460b      	mov	r3, r1
 800f134:	813b      	strh	r3, [r7, #8]
 800f136:	4613      	mov	r3, r2
 800f138:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f140:	b2db      	uxtb	r3, r3
 800f142:	2b20      	cmp	r3, #32
 800f144:	d166      	bne.n	800f214 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d002      	beq.n	800f152 <HAL_I2C_Mem_Read_IT+0x32>
 800f14c:	8bbb      	ldrh	r3, [r7, #28]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d105      	bne.n	800f15e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f158:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800f15a:	2301      	movs	r3, #1
 800f15c:	e05b      	b.n	800f216 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	699b      	ldr	r3, [r3, #24]
 800f164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f16c:	d101      	bne.n	800f172 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800f16e:	2302      	movs	r3, #2
 800f170:	e051      	b.n	800f216 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d101      	bne.n	800f180 <HAL_I2C_Mem_Read_IT+0x60>
 800f17c:	2302      	movs	r3, #2
 800f17e:	e04a      	b.n	800f216 <HAL_I2C_Mem_Read_IT+0xf6>
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2201      	movs	r2, #1
 800f184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2222      	movs	r2, #34	@ 0x22
 800f18c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2240      	movs	r2, #64	@ 0x40
 800f194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2200      	movs	r2, #0
 800f19c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	69ba      	ldr	r2, [r7, #24]
 800f1a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	8bba      	ldrh	r2, [r7, #28]
 800f1a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	4a1c      	ldr	r2, [pc, #112]	@ (800f220 <HAL_I2C_Mem_Read_IT+0x100>)
 800f1ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	4a1c      	ldr	r2, [pc, #112]	@ (800f224 <HAL_I2C_Mem_Read_IT+0x104>)
 800f1b4:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800f1b6:	897a      	ldrh	r2, [r7, #10]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f1bc:	88fb      	ldrh	r3, [r7, #6]
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d109      	bne.n	800f1d6 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f1c2:	893b      	ldrh	r3, [r7, #8]
 800f1c4:	b2da      	uxtb	r2, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f1d2:	651a      	str	r2, [r3, #80]	@ 0x50
 800f1d4:	e00b      	b.n	800f1ee <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f1d6:	893b      	ldrh	r3, [r7, #8]
 800f1d8:	0a1b      	lsrs	r3, r3, #8
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	b2da      	uxtb	r2, r3
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800f1e4:	893b      	ldrh	r3, [r7, #8]
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800f1ee:	88fb      	ldrh	r3, [r7, #6]
 800f1f0:	b2da      	uxtb	r2, r3
 800f1f2:	8979      	ldrh	r1, [r7, #10]
 800f1f4:	4b0c      	ldr	r3, [pc, #48]	@ (800f228 <HAL_I2C_Mem_Read_IT+0x108>)
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	f001 feea 	bl	8010fd4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2200      	movs	r2, #0
 800f204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f208:	2101      	movs	r1, #1
 800f20a:	68f8      	ldr	r0, [r7, #12]
 800f20c:	f001 ff14 	bl	8011038 <I2C_Enable_IRQ>

    return HAL_OK;
 800f210:	2300      	movs	r3, #0
 800f212:	e000      	b.n	800f216 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800f214:	2302      	movs	r3, #2
  }
}
 800f216:	4618      	mov	r0, r3
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	ffff0000 	.word	0xffff0000
 800f224:	0800f31d 	.word	0x0800f31d
 800f228:	80002000 	.word	0x80002000

0800f22c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	699b      	ldr	r3, [r3, #24]
 800f23a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d005      	beq.n	800f258 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f250:	68ba      	ldr	r2, [r7, #8]
 800f252:	68f9      	ldr	r1, [r7, #12]
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	4798      	blx	r3
  }
}
 800f258:	bf00      	nop
 800f25a:	3710      	adds	r7, #16
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f268:	bf00      	nop
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f27c:	bf00      	nop
 800f27e:	370c      	adds	r7, #12
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr

0800f288 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f288:	b480      	push	{r7}
 800f28a:	b083      	sub	sp, #12
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f290:	bf00      	nop
 800f292:	370c      	adds	r7, #12
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f2a4:	bf00      	nop
 800f2a6:	370c      	adds	r7, #12
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b083      	sub	sp, #12
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	70fb      	strb	r3, [r7, #3]
 800f2bc:	4613      	mov	r3, r2
 800f2be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f2c0:	bf00      	nop
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr

0800f2cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f2d4:	bf00      	nop
 800f2d6:	370c      	adds	r7, #12
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr

0800f2e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b083      	sub	sp, #12
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f2e8:	bf00      	nop
 800f2ea:	370c      	adds	r7, #12
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f2fc:	bf00      	nop
 800f2fe:	370c      	adds	r7, #12
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f310:	bf00      	nop
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b088      	sub	sp, #32
 800f320:	af02      	add	r7, sp, #8
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	60b9      	str	r1, [r7, #8]
 800f326:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f328:	4b8d      	ldr	r3, [pc, #564]	@ (800f560 <I2C_Mem_ISR_IT+0x244>)
 800f32a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f336:	2b01      	cmp	r3, #1
 800f338:	d101      	bne.n	800f33e <I2C_Mem_ISR_IT+0x22>
 800f33a:	2302      	movs	r3, #2
 800f33c:	e10c      	b.n	800f558 <I2C_Mem_ISR_IT+0x23c>
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2201      	movs	r2, #1
 800f342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	f003 0310 	and.w	r3, r3, #16
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d012      	beq.n	800f376 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f356:	2b00      	cmp	r3, #0
 800f358:	d00d      	beq.n	800f376 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	2210      	movs	r2, #16
 800f360:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f366:	f043 0204 	orr.w	r2, r3, #4
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	f001 fc2b 	bl	8010bca <I2C_Flush_TXDR>
 800f374:	e0dd      	b.n	800f532 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	f003 0304 	and.w	r3, r3, #4
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d022      	beq.n	800f3c6 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f386:	2b00      	cmp	r3, #0
 800f388:	d01d      	beq.n	800f3c6 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	f023 0304 	bic.w	r3, r3, #4
 800f390:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f39c:	b2d2      	uxtb	r2, r2
 800f39e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3a4:	1c5a      	adds	r2, r3, #1
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	b29a      	uxth	r2, r3
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	3b01      	subs	r3, #1
 800f3be:	b29a      	uxth	r2, r3
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f3c4:	e0b5      	b.n	800f532 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	f003 0302 	and.w	r3, r3, #2
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d02c      	beq.n	800f42a <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d027      	beq.n	800f42a <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3e2:	d118      	bne.n	800f416 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3e8:	781a      	ldrb	r2, [r3, #0]
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3f4:	1c5a      	adds	r2, r3, #1
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3fe:	3b01      	subs	r3, #1
 800f400:	b29a      	uxth	r2, r3
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	3b01      	subs	r3, #1
 800f40e:	b29a      	uxth	r2, r3
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f414:	e08d      	b.n	800f532 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f41e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	f04f 32ff 	mov.w	r2, #4294967295
 800f426:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f428:	e083      	b.n	800f532 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f430:	2b00      	cmp	r3, #0
 800f432:	d03c      	beq.n	800f4ae <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d037      	beq.n	800f4ae <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f442:	b29b      	uxth	r3, r3
 800f444:	2b00      	cmp	r3, #0
 800f446:	d02c      	beq.n	800f4a2 <I2C_Mem_ISR_IT+0x186>
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d128      	bne.n	800f4a2 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f454:	b29b      	uxth	r3, r3
 800f456:	2bff      	cmp	r3, #255	@ 0xff
 800f458:	d910      	bls.n	800f47c <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	22ff      	movs	r2, #255	@ 0xff
 800f45e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f464:	b299      	uxth	r1, r3
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f46a:	b2da      	uxtb	r2, r3
 800f46c:	2300      	movs	r3, #0
 800f46e:	9300      	str	r3, [sp, #0]
 800f470:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f474:	68f8      	ldr	r0, [r7, #12]
 800f476:	f001 fdad 	bl	8010fd4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f47a:	e017      	b.n	800f4ac <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f480:	b29a      	uxth	r2, r3
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f48a:	b299      	uxth	r1, r3
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f490:	b2da      	uxtb	r2, r3
 800f492:	2300      	movs	r3, #0
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f001 fd9a 	bl	8010fd4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f4a0:	e004      	b.n	800f4ac <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f4a2:	2140      	movs	r1, #64	@ 0x40
 800f4a4:	68f8      	ldr	r0, [r7, #12]
 800f4a6:	f001 fa79 	bl	801099c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f4aa:	e042      	b.n	800f532 <I2C_Mem_ISR_IT+0x216>
 800f4ac:	e041      	b.n	800f532 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d03c      	beq.n	800f532 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d037      	beq.n	800f532 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f4c2:	2101      	movs	r1, #1
 800f4c4:	68f8      	ldr	r0, [r7, #12]
 800f4c6:	f001 fe3b 	bl	8011140 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f4ca:	2102      	movs	r1, #2
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f001 fdb3 	bl	8011038 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	2b22      	cmp	r3, #34	@ 0x22
 800f4dc:	d101      	bne.n	800f4e2 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800f4de:	4b21      	ldr	r3, [pc, #132]	@ (800f564 <I2C_Mem_ISR_IT+0x248>)
 800f4e0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	2bff      	cmp	r3, #255	@ 0xff
 800f4ea:	d910      	bls.n	800f50e <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	22ff      	movs	r2, #255	@ 0xff
 800f4f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4f6:	b299      	uxth	r1, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f4fc:	b2da      	uxtb	r2, r3
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	9300      	str	r3, [sp, #0]
 800f502:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f001 fd64 	bl	8010fd4 <I2C_TransferConfig>
 800f50c:	e011      	b.n	800f532 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f512:	b29a      	uxth	r2, r3
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f51c:	b299      	uxth	r1, r3
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f522:	b2da      	uxtb	r2, r3
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f52c:	68f8      	ldr	r0, [r7, #12]
 800f52e:	f001 fd51 	bl	8010fd4 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	f003 0320 	and.w	r3, r3, #32
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d008      	beq.n	800f54e <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f542:	2b00      	cmp	r3, #0
 800f544:	d003      	beq.n	800f54e <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800f546:	6939      	ldr	r1, [r7, #16]
 800f548:	68f8      	ldr	r0, [r7, #12]
 800f54a:	f000 feb7 	bl	80102bc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2200      	movs	r2, #0
 800f552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f556:	2300      	movs	r3, #0
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3718      	adds	r7, #24
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	80002000 	.word	0x80002000
 800f564:	80002400 	.word	0x80002400

0800f568 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b086      	sub	sp, #24
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f578:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f584:	2b01      	cmp	r3, #1
 800f586:	d101      	bne.n	800f58c <I2C_Slave_ISR_IT+0x24>
 800f588:	2302      	movs	r3, #2
 800f58a:	e0e2      	b.n	800f752 <I2C_Slave_ISR_IT+0x1ea>
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	2201      	movs	r2, #1
 800f590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	f003 0320 	and.w	r3, r3, #32
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d009      	beq.n	800f5b2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d004      	beq.n	800f5b2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f5a8:	6939      	ldr	r1, [r7, #16]
 800f5aa:	68f8      	ldr	r0, [r7, #12]
 800f5ac:	f000 ff4e 	bl	801044c <I2C_ITSlaveCplt>
 800f5b0:	e0ca      	b.n	800f748 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	f003 0310 	and.w	r3, r3, #16
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d04b      	beq.n	800f654 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d046      	beq.n	800f654 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d128      	bne.n	800f622 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	2b28      	cmp	r3, #40	@ 0x28
 800f5da:	d108      	bne.n	800f5ee <I2C_Slave_ISR_IT+0x86>
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f5e2:	d104      	bne.n	800f5ee <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f5e4:	6939      	ldr	r1, [r7, #16]
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f001 f984 	bl	80108f4 <I2C_ITListenCplt>
 800f5ec:	e031      	b.n	800f652 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f5f4:	b2db      	uxtb	r3, r3
 800f5f6:	2b29      	cmp	r3, #41	@ 0x29
 800f5f8:	d10e      	bne.n	800f618 <I2C_Slave_ISR_IT+0xb0>
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f600:	d00a      	beq.n	800f618 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2210      	movs	r2, #16
 800f608:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f60a:	68f8      	ldr	r0, [r7, #12]
 800f60c:	f001 fadd 	bl	8010bca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	f000 fdf6 	bl	8010202 <I2C_ITSlaveSeqCplt>
 800f616:	e01c      	b.n	800f652 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	2210      	movs	r2, #16
 800f61e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f620:	e08f      	b.n	800f742 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	2210      	movs	r2, #16
 800f628:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f62e:	f043 0204 	orr.w	r2, r3, #4
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d003      	beq.n	800f644 <I2C_Slave_ISR_IT+0xdc>
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f642:	d17e      	bne.n	800f742 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f648:	4619      	mov	r1, r3
 800f64a:	68f8      	ldr	r0, [r7, #12]
 800f64c:	f001 f9a6 	bl	801099c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f650:	e077      	b.n	800f742 <I2C_Slave_ISR_IT+0x1da>
 800f652:	e076      	b.n	800f742 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	f003 0304 	and.w	r3, r3, #4
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d02f      	beq.n	800f6be <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f664:	2b00      	cmp	r3, #0
 800f666:	d02a      	beq.n	800f6be <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d018      	beq.n	800f6a4 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f67c:	b2d2      	uxtb	r2, r2
 800f67e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f684:	1c5a      	adds	r2, r3, #1
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f68e:	3b01      	subs	r3, #1
 800f690:	b29a      	uxth	r2, r3
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	3b01      	subs	r3, #1
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d14b      	bne.n	800f746 <I2C_Slave_ISR_IT+0x1de>
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f6b4:	d047      	beq.n	800f746 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f6b6:	68f8      	ldr	r0, [r7, #12]
 800f6b8:	f000 fda3 	bl	8010202 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f6bc:	e043      	b.n	800f746 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	f003 0308 	and.w	r3, r3, #8
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d009      	beq.n	800f6dc <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d004      	beq.n	800f6dc <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f6d2:	6939      	ldr	r1, [r7, #16]
 800f6d4:	68f8      	ldr	r0, [r7, #12]
 800f6d6:	f000 fcd3 	bl	8010080 <I2C_ITAddrCplt>
 800f6da:	e035      	b.n	800f748 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	f003 0302 	and.w	r3, r3, #2
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d030      	beq.n	800f748 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d02b      	beq.n	800f748 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d018      	beq.n	800f72c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6fe:	781a      	ldrb	r2, [r3, #0]
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f70a:	1c5a      	adds	r2, r3, #1
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f714:	b29b      	uxth	r3, r3
 800f716:	3b01      	subs	r3, #1
 800f718:	b29a      	uxth	r2, r3
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f722:	3b01      	subs	r3, #1
 800f724:	b29a      	uxth	r2, r3
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f72a:	e00d      	b.n	800f748 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f732:	d002      	beq.n	800f73a <I2C_Slave_ISR_IT+0x1d2>
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d106      	bne.n	800f748 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f73a:	68f8      	ldr	r0, [r7, #12]
 800f73c:	f000 fd61 	bl	8010202 <I2C_ITSlaveSeqCplt>
 800f740:	e002      	b.n	800f748 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800f742:	bf00      	nop
 800f744:	e000      	b.n	800f748 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800f746:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2200      	movs	r2, #0
 800f74c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3718      	adds	r7, #24
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b088      	sub	sp, #32
 800f75e:	af02      	add	r7, sp, #8
 800f760:	60f8      	str	r0, [r7, #12]
 800f762:	60b9      	str	r1, [r7, #8]
 800f764:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d101      	bne.n	800f774 <I2C_Master_ISR_DMA+0x1a>
 800f770:	2302      	movs	r3, #2
 800f772:	e0d9      	b.n	800f928 <I2C_Master_ISR_DMA+0x1ce>
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2201      	movs	r2, #1
 800f778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	f003 0310 	and.w	r3, r3, #16
 800f782:	2b00      	cmp	r3, #0
 800f784:	d016      	beq.n	800f7b4 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d011      	beq.n	800f7b4 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	2210      	movs	r2, #16
 800f796:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f79c:	f043 0204 	orr.w	r2, r3, #4
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f7a4:	2120      	movs	r1, #32
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f001 fc46 	bl	8011038 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f001 fa0c 	bl	8010bca <I2C_Flush_TXDR>
 800f7b2:	e0b4      	b.n	800f91e <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d071      	beq.n	800f8a2 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d06c      	beq.n	800f8a2 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f7d6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d04e      	beq.n	800f880 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7ee:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	2bff      	cmp	r3, #255	@ 0xff
 800f7f8:	d906      	bls.n	800f808 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	22ff      	movs	r2, #255	@ 0xff
 800f7fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f804:	617b      	str	r3, [r7, #20]
 800f806:	e010      	b.n	800f82a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f80c:	b29a      	uxth	r2, r3
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f816:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f81a:	d003      	beq.n	800f824 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f820:	617b      	str	r3, [r7, #20]
 800f822:	e002      	b.n	800f82a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f824:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f828:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f82e:	b2da      	uxtb	r2, r3
 800f830:	8a79      	ldrh	r1, [r7, #18]
 800f832:	2300      	movs	r3, #0
 800f834:	9300      	str	r3, [sp, #0]
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	68f8      	ldr	r0, [r7, #12]
 800f83a:	f001 fbcb 	bl	8010fd4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f842:	b29a      	uxth	r2, r3
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f848:	1ad3      	subs	r3, r2, r3
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f856:	b2db      	uxtb	r3, r3
 800f858:	2b22      	cmp	r3, #34	@ 0x22
 800f85a:	d108      	bne.n	800f86e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	681a      	ldr	r2, [r3, #0]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f86a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f86c:	e057      	b.n	800f91e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f87c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f87e:	e04e      	b.n	800f91e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f88a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f88e:	d003      	beq.n	800f898 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f890:	68f8      	ldr	r0, [r7, #12]
 800f892:	f000 fc79 	bl	8010188 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f896:	e042      	b.n	800f91e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f898:	2140      	movs	r1, #64	@ 0x40
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f001 f87e 	bl	801099c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f8a0:	e03d      	b.n	800f91e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d028      	beq.n	800f8fe <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d023      	beq.n	800f8fe <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d119      	bne.n	800f8f4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f8ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f8ce:	d025      	beq.n	800f91c <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f8d8:	d108      	bne.n	800f8ec <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	685a      	ldr	r2, [r3, #4]
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f8e8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f8ea:	e017      	b.n	800f91c <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f8ec:	68f8      	ldr	r0, [r7, #12]
 800f8ee:	f000 fc4b 	bl	8010188 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f8f2:	e013      	b.n	800f91c <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f8f4:	2140      	movs	r1, #64	@ 0x40
 800f8f6:	68f8      	ldr	r0, [r7, #12]
 800f8f8:	f001 f850 	bl	801099c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f8fc:	e00e      	b.n	800f91c <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	f003 0320 	and.w	r3, r3, #32
 800f904:	2b00      	cmp	r3, #0
 800f906:	d00a      	beq.n	800f91e <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d005      	beq.n	800f91e <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f912:	68b9      	ldr	r1, [r7, #8]
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f000 fcd1 	bl	80102bc <I2C_ITMasterCplt>
 800f91a:	e000      	b.n	800f91e <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f91c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2200      	movs	r2, #0
 800f922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f926:	2300      	movs	r3, #0
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3718      	adds	r7, #24
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b088      	sub	sp, #32
 800f934:	af02      	add	r7, sp, #8
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f93c:	4b8d      	ldr	r3, [pc, #564]	@ (800fb74 <I2C_Mem_ISR_DMA+0x244>)
 800f93e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f946:	2b01      	cmp	r3, #1
 800f948:	d101      	bne.n	800f94e <I2C_Mem_ISR_DMA+0x1e>
 800f94a:	2302      	movs	r3, #2
 800f94c:	e10e      	b.n	800fb6c <I2C_Mem_ISR_DMA+0x23c>
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	2201      	movs	r2, #1
 800f952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	f003 0310 	and.w	r3, r3, #16
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d016      	beq.n	800f98e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f966:	2b00      	cmp	r3, #0
 800f968:	d011      	beq.n	800f98e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	2210      	movs	r2, #16
 800f970:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f976:	f043 0204 	orr.w	r2, r3, #4
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f97e:	2120      	movs	r1, #32
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f001 fb59 	bl	8011038 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f986:	68f8      	ldr	r0, [r7, #12]
 800f988:	f001 f91f 	bl	8010bca <I2C_Flush_TXDR>
 800f98c:	e0e9      	b.n	800fb62 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	f003 0302 	and.w	r3, r3, #2
 800f994:	2b00      	cmp	r3, #0
 800f996:	d00e      	beq.n	800f9b6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d009      	beq.n	800f9b6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	68fa      	ldr	r2, [r7, #12]
 800f9a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f9aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f9b2:	651a      	str	r2, [r3, #80]	@ 0x50
 800f9b4:	e0d5      	b.n	800fb62 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d05f      	beq.n	800fa80 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d05a      	beq.n	800fa80 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f9ca:	2101      	movs	r1, #1
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f001 fbb7 	bl	8011140 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f9d2:	2110      	movs	r1, #16
 800f9d4:	68f8      	ldr	r0, [r7, #12]
 800f9d6:	f001 fb2f 	bl	8011038 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d048      	beq.n	800fa76 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	2bff      	cmp	r3, #255	@ 0xff
 800f9ec:	d910      	bls.n	800fa10 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	22ff      	movs	r2, #255	@ 0xff
 800f9f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f9f8:	b299      	uxth	r1, r3
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9fe:	b2da      	uxtb	r2, r3
 800fa00:	2300      	movs	r3, #0
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800fa08:	68f8      	ldr	r0, [r7, #12]
 800fa0a:	f001 fae3 	bl	8010fd4 <I2C_TransferConfig>
 800fa0e:	e011      	b.n	800fa34 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa14:	b29a      	uxth	r2, r3
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa1e:	b299      	uxth	r1, r3
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa24:	b2da      	uxtb	r2, r3
 800fa26:	2300      	movs	r3, #0
 800fa28:	9300      	str	r3, [sp, #0]
 800fa2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f001 fad0 	bl	8010fd4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	b29a      	uxth	r2, r3
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	2b22      	cmp	r3, #34	@ 0x22
 800fa50:	d108      	bne.n	800fa64 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fa60:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800fa62:	e07e      	b.n	800fb62 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fa72:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800fa74:	e075      	b.n	800fb62 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800fa76:	2140      	movs	r1, #64	@ 0x40
 800fa78:	68f8      	ldr	r0, [r7, #12]
 800fa7a:	f000 ff8f 	bl	801099c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800fa7e:	e070      	b.n	800fb62 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d05d      	beq.n	800fb46 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d058      	beq.n	800fb46 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fa94:	2101      	movs	r1, #1
 800fa96:	68f8      	ldr	r0, [r7, #12]
 800fa98:	f001 fb52 	bl	8011140 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800fa9c:	2110      	movs	r1, #16
 800fa9e:	68f8      	ldr	r0, [r7, #12]
 800faa0:	f001 faca 	bl	8011038 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800faaa:	b2db      	uxtb	r3, r3
 800faac:	2b22      	cmp	r3, #34	@ 0x22
 800faae:	d101      	bne.n	800fab4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800fab0:	4b31      	ldr	r3, [pc, #196]	@ (800fb78 <I2C_Mem_ISR_DMA+0x248>)
 800fab2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fab8:	b29b      	uxth	r3, r3
 800faba:	2bff      	cmp	r3, #255	@ 0xff
 800fabc:	d910      	bls.n	800fae0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	22ff      	movs	r2, #255	@ 0xff
 800fac2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fac8:	b299      	uxth	r1, r3
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800face:	b2da      	uxtb	r2, r3
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	9300      	str	r3, [sp, #0]
 800fad4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f001 fa7b 	bl	8010fd4 <I2C_TransferConfig>
 800fade:	e011      	b.n	800fb04 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fae4:	b29a      	uxth	r2, r3
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800faee:	b299      	uxth	r1, r3
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800faf4:	b2da      	uxtb	r2, r3
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800fafe:	68f8      	ldr	r0, [r7, #12]
 800fb00:	f001 fa68 	bl	8010fd4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb08:	b29a      	uxth	r2, r3
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb0e:	1ad3      	subs	r3, r2, r3
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	2b22      	cmp	r3, #34	@ 0x22
 800fb20:	d108      	bne.n	800fb34 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	681a      	ldr	r2, [r3, #0]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fb30:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fb32:	e016      	b.n	800fb62 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	681a      	ldr	r2, [r3, #0]
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fb42:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fb44:	e00d      	b.n	800fb62 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	f003 0320 	and.w	r3, r3, #32
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d008      	beq.n	800fb62 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d003      	beq.n	800fb62 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800fb5a:	68b9      	ldr	r1, [r7, #8]
 800fb5c:	68f8      	ldr	r0, [r7, #12]
 800fb5e:	f000 fbad 	bl	80102bc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2200      	movs	r2, #0
 800fb66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fb6a:	2300      	movs	r3, #0
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3718      	adds	r7, #24
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	80002000 	.word	0x80002000
 800fb78:	80002400 	.word	0x80002400

0800fb7c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b088      	sub	sp, #32
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb8c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d101      	bne.n	800fba0 <I2C_Slave_ISR_DMA+0x24>
 800fb9c:	2302      	movs	r3, #2
 800fb9e:	e1c2      	b.n	800ff26 <I2C_Slave_ISR_DMA+0x3aa>
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2201      	movs	r2, #1
 800fba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	f003 0320 	and.w	r3, r3, #32
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d009      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d004      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800fbbc:	68b9      	ldr	r1, [r7, #8]
 800fbbe:	68f8      	ldr	r0, [r7, #12]
 800fbc0:	f000 fc44 	bl	801044c <I2C_ITSlaveCplt>
 800fbc4:	e1aa      	b.n	800ff1c <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	f003 0310 	and.w	r3, r3, #16
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	f000 8197 	beq.w	800ff00 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	f000 8191 	beq.w	800ff00 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d105      	bne.n	800fbf4 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	f000 817f 	beq.w	800fef2 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d07b      	beq.n	800fcf4 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d076      	beq.n	800fcf4 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	4a74      	ldr	r2, [pc, #464]	@ (800fde0 <I2C_Slave_ISR_DMA+0x264>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d059      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	4a72      	ldr	r2, [pc, #456]	@ (800fde4 <I2C_Slave_ISR_DMA+0x268>)
 800fc1a:	4293      	cmp	r3, r2
 800fc1c:	d053      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4a70      	ldr	r2, [pc, #448]	@ (800fde8 <I2C_Slave_ISR_DMA+0x26c>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d04d      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4a6e      	ldr	r2, [pc, #440]	@ (800fdec <I2C_Slave_ISR_DMA+0x270>)
 800fc32:	4293      	cmp	r3, r2
 800fc34:	d047      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	4a6c      	ldr	r2, [pc, #432]	@ (800fdf0 <I2C_Slave_ISR_DMA+0x274>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d041      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4a6a      	ldr	r2, [pc, #424]	@ (800fdf4 <I2C_Slave_ISR_DMA+0x278>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d03b      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	4a68      	ldr	r2, [pc, #416]	@ (800fdf8 <I2C_Slave_ISR_DMA+0x27c>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d035      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4a66      	ldr	r2, [pc, #408]	@ (800fdfc <I2C_Slave_ISR_DMA+0x280>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d02f      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a64      	ldr	r2, [pc, #400]	@ (800fe00 <I2C_Slave_ISR_DMA+0x284>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d029      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4a62      	ldr	r2, [pc, #392]	@ (800fe04 <I2C_Slave_ISR_DMA+0x288>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d023      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	4a60      	ldr	r2, [pc, #384]	@ (800fe08 <I2C_Slave_ISR_DMA+0x28c>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d01d      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4a5e      	ldr	r2, [pc, #376]	@ (800fe0c <I2C_Slave_ISR_DMA+0x290>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d017      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4a5c      	ldr	r2, [pc, #368]	@ (800fe10 <I2C_Slave_ISR_DMA+0x294>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d011      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4a5a      	ldr	r2, [pc, #360]	@ (800fe14 <I2C_Slave_ISR_DMA+0x298>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d00b      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4a58      	ldr	r2, [pc, #352]	@ (800fe18 <I2C_Slave_ISR_DMA+0x29c>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d005      	beq.n	800fcc6 <I2C_Slave_ISR_DMA+0x14a>
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a56      	ldr	r2, [pc, #344]	@ (800fe1c <I2C_Slave_ISR_DMA+0x2a0>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d109      	bne.n	800fcda <I2C_Slave_ISR_DMA+0x15e>
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	bf0c      	ite	eq
 800fcd2:	2301      	moveq	r3, #1
 800fcd4:	2300      	movne	r3, #0
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	e008      	b.n	800fcec <I2C_Slave_ISR_DMA+0x170>
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	bf0c      	ite	eq
 800fce6:	2301      	moveq	r3, #1
 800fce8:	2300      	movne	r3, #0
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d001      	beq.n	800fcf4 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	f000 809e 	beq.w	800fe3a <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	f000 8098 	beq.w	800fe3a <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4a33      	ldr	r2, [pc, #204]	@ (800fde0 <I2C_Slave_ISR_DMA+0x264>)
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d059      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	4a31      	ldr	r2, [pc, #196]	@ (800fde4 <I2C_Slave_ISR_DMA+0x268>)
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	d053      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	4a2f      	ldr	r2, [pc, #188]	@ (800fde8 <I2C_Slave_ISR_DMA+0x26c>)
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	d04d      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	4a2d      	ldr	r2, [pc, #180]	@ (800fdec <I2C_Slave_ISR_DMA+0x270>)
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d047      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4a2b      	ldr	r2, [pc, #172]	@ (800fdf0 <I2C_Slave_ISR_DMA+0x274>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d041      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a29      	ldr	r2, [pc, #164]	@ (800fdf4 <I2C_Slave_ISR_DMA+0x278>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d03b      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	4a27      	ldr	r2, [pc, #156]	@ (800fdf8 <I2C_Slave_ISR_DMA+0x27c>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d035      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a25      	ldr	r2, [pc, #148]	@ (800fdfc <I2C_Slave_ISR_DMA+0x280>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d02f      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a23      	ldr	r2, [pc, #140]	@ (800fe00 <I2C_Slave_ISR_DMA+0x284>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d029      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	4a21      	ldr	r2, [pc, #132]	@ (800fe04 <I2C_Slave_ISR_DMA+0x288>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d023      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	4a1f      	ldr	r2, [pc, #124]	@ (800fe08 <I2C_Slave_ISR_DMA+0x28c>)
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d01d      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	4a1d      	ldr	r2, [pc, #116]	@ (800fe0c <I2C_Slave_ISR_DMA+0x290>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d017      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4a1b      	ldr	r2, [pc, #108]	@ (800fe10 <I2C_Slave_ISR_DMA+0x294>)
 800fda2:	4293      	cmp	r3, r2
 800fda4:	d011      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4a19      	ldr	r2, [pc, #100]	@ (800fe14 <I2C_Slave_ISR_DMA+0x298>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d00b      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4a17      	ldr	r2, [pc, #92]	@ (800fe18 <I2C_Slave_ISR_DMA+0x29c>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d005      	beq.n	800fdca <I2C_Slave_ISR_DMA+0x24e>
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a15      	ldr	r2, [pc, #84]	@ (800fe1c <I2C_Slave_ISR_DMA+0x2a0>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d12a      	bne.n	800fe20 <I2C_Slave_ISR_DMA+0x2a4>
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	bf0c      	ite	eq
 800fdd6:	2301      	moveq	r3, #1
 800fdd8:	2300      	movne	r3, #0
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	e029      	b.n	800fe32 <I2C_Slave_ISR_DMA+0x2b6>
 800fdde:	bf00      	nop
 800fde0:	40020010 	.word	0x40020010
 800fde4:	40020028 	.word	0x40020028
 800fde8:	40020040 	.word	0x40020040
 800fdec:	40020058 	.word	0x40020058
 800fdf0:	40020070 	.word	0x40020070
 800fdf4:	40020088 	.word	0x40020088
 800fdf8:	400200a0 	.word	0x400200a0
 800fdfc:	400200b8 	.word	0x400200b8
 800fe00:	40020410 	.word	0x40020410
 800fe04:	40020428 	.word	0x40020428
 800fe08:	40020440 	.word	0x40020440
 800fe0c:	40020458 	.word	0x40020458
 800fe10:	40020470 	.word	0x40020470
 800fe14:	40020488 	.word	0x40020488
 800fe18:	400204a0 	.word	0x400204a0
 800fe1c:	400204b8 	.word	0x400204b8
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	bf0c      	ite	eq
 800fe2c:	2301      	moveq	r3, #1
 800fe2e:	2300      	movne	r3, #0
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d001      	beq.n	800fe3a <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800fe36:	2301      	movs	r3, #1
 800fe38:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	d128      	bne.n	800fe92 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	2b28      	cmp	r3, #40	@ 0x28
 800fe4a:	d108      	bne.n	800fe5e <I2C_Slave_ISR_DMA+0x2e2>
 800fe4c:	69bb      	ldr	r3, [r7, #24]
 800fe4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fe52:	d104      	bne.n	800fe5e <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800fe54:	68b9      	ldr	r1, [r7, #8]
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f000 fd4c 	bl	80108f4 <I2C_ITListenCplt>
 800fe5c:	e048      	b.n	800fef0 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	2b29      	cmp	r3, #41	@ 0x29
 800fe68:	d10e      	bne.n	800fe88 <I2C_Slave_ISR_DMA+0x30c>
 800fe6a:	69bb      	ldr	r3, [r7, #24]
 800fe6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800fe70:	d00a      	beq.n	800fe88 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2210      	movs	r2, #16
 800fe78:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800fe7a:	68f8      	ldr	r0, [r7, #12]
 800fe7c:	f000 fea5 	bl	8010bca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800fe80:	68f8      	ldr	r0, [r7, #12]
 800fe82:	f000 f9be 	bl	8010202 <I2C_ITSlaveSeqCplt>
 800fe86:	e033      	b.n	800fef0 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	2210      	movs	r2, #16
 800fe8e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800fe90:	e034      	b.n	800fefc <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	2210      	movs	r2, #16
 800fe98:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe9e:	f043 0204 	orr.w	r2, r3, #4
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800feac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800feae:	69bb      	ldr	r3, [r7, #24]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d003      	beq.n	800febc <I2C_Slave_ISR_DMA+0x340>
 800feb4:	69bb      	ldr	r3, [r7, #24]
 800feb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800feba:	d11f      	bne.n	800fefc <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800febc:	7dfb      	ldrb	r3, [r7, #23]
 800febe:	2b21      	cmp	r3, #33	@ 0x21
 800fec0:	d002      	beq.n	800fec8 <I2C_Slave_ISR_DMA+0x34c>
 800fec2:	7dfb      	ldrb	r3, [r7, #23]
 800fec4:	2b29      	cmp	r3, #41	@ 0x29
 800fec6:	d103      	bne.n	800fed0 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2221      	movs	r2, #33	@ 0x21
 800fecc:	631a      	str	r2, [r3, #48]	@ 0x30
 800fece:	e008      	b.n	800fee2 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fed0:	7dfb      	ldrb	r3, [r7, #23]
 800fed2:	2b22      	cmp	r3, #34	@ 0x22
 800fed4:	d002      	beq.n	800fedc <I2C_Slave_ISR_DMA+0x360>
 800fed6:	7dfb      	ldrb	r3, [r7, #23]
 800fed8:	2b2a      	cmp	r3, #42	@ 0x2a
 800feda:	d102      	bne.n	800fee2 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2222      	movs	r2, #34	@ 0x22
 800fee0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fee6:	4619      	mov	r1, r3
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f000 fd57 	bl	801099c <I2C_ITError>
      if (treatdmanack == 1U)
 800feee:	e005      	b.n	800fefc <I2C_Slave_ISR_DMA+0x380>
 800fef0:	e004      	b.n	800fefc <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	2210      	movs	r2, #16
 800fef8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fefa:	e00f      	b.n	800ff1c <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800fefc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fefe:	e00d      	b.n	800ff1c <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	f003 0308 	and.w	r3, r3, #8
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d008      	beq.n	800ff1c <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d003      	beq.n	800ff1c <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800ff14:	68b9      	ldr	r1, [r7, #8]
 800ff16:	68f8      	ldr	r0, [r7, #12]
 800ff18:	f000 f8b2 	bl	8010080 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ff24:	2300      	movs	r3, #0
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3720      	adds	r7, #32
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop

0800ff30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b086      	sub	sp, #24
 800ff34:	af02      	add	r7, sp, #8
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	4608      	mov	r0, r1
 800ff3a:	4611      	mov	r1, r2
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	4603      	mov	r3, r0
 800ff40:	817b      	strh	r3, [r7, #10]
 800ff42:	460b      	mov	r3, r1
 800ff44:	813b      	strh	r3, [r7, #8]
 800ff46:	4613      	mov	r3, r2
 800ff48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ff4a:	88fb      	ldrh	r3, [r7, #6]
 800ff4c:	b2da      	uxtb	r2, r3
 800ff4e:	8979      	ldrh	r1, [r7, #10]
 800ff50:	4b20      	ldr	r3, [pc, #128]	@ (800ffd4 <I2C_RequestMemoryWrite+0xa4>)
 800ff52:	9300      	str	r3, [sp, #0]
 800ff54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ff58:	68f8      	ldr	r0, [r7, #12]
 800ff5a:	f001 f83b 	bl	8010fd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ff5e:	69fa      	ldr	r2, [r7, #28]
 800ff60:	69b9      	ldr	r1, [r7, #24]
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f000 fecc 	bl	8010d00 <I2C_WaitOnTXISFlagUntilTimeout>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d001      	beq.n	800ff72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e02c      	b.n	800ffcc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ff72:	88fb      	ldrh	r3, [r7, #6]
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d105      	bne.n	800ff84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ff78:	893b      	ldrh	r3, [r7, #8]
 800ff7a:	b2da      	uxtb	r2, r3
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	629a      	str	r2, [r3, #40]	@ 0x28
 800ff82:	e015      	b.n	800ffb0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ff84:	893b      	ldrh	r3, [r7, #8]
 800ff86:	0a1b      	lsrs	r3, r3, #8
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	b2da      	uxtb	r2, r3
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ff92:	69fa      	ldr	r2, [r7, #28]
 800ff94:	69b9      	ldr	r1, [r7, #24]
 800ff96:	68f8      	ldr	r0, [r7, #12]
 800ff98:	f000 feb2 	bl	8010d00 <I2C_WaitOnTXISFlagUntilTimeout>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d001      	beq.n	800ffa6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	e012      	b.n	800ffcc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ffa6:	893b      	ldrh	r3, [r7, #8]
 800ffa8:	b2da      	uxtb	r2, r3
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	9300      	str	r3, [sp, #0]
 800ffb4:	69bb      	ldr	r3, [r7, #24]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	2180      	movs	r1, #128	@ 0x80
 800ffba:	68f8      	ldr	r0, [r7, #12]
 800ffbc:	f000 fe47 	bl	8010c4e <I2C_WaitOnFlagUntilTimeout>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d001      	beq.n	800ffca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	e000      	b.n	800ffcc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ffca:	2300      	movs	r3, #0
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3710      	adds	r7, #16
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	80002000 	.word	0x80002000

0800ffd8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b086      	sub	sp, #24
 800ffdc:	af02      	add	r7, sp, #8
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	4608      	mov	r0, r1
 800ffe2:	4611      	mov	r1, r2
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	817b      	strh	r3, [r7, #10]
 800ffea:	460b      	mov	r3, r1
 800ffec:	813b      	strh	r3, [r7, #8]
 800ffee:	4613      	mov	r3, r2
 800fff0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fff2:	88fb      	ldrh	r3, [r7, #6]
 800fff4:	b2da      	uxtb	r2, r3
 800fff6:	8979      	ldrh	r1, [r7, #10]
 800fff8:	4b20      	ldr	r3, [pc, #128]	@ (801007c <I2C_RequestMemoryRead+0xa4>)
 800fffa:	9300      	str	r3, [sp, #0]
 800fffc:	2300      	movs	r3, #0
 800fffe:	68f8      	ldr	r0, [r7, #12]
 8010000:	f000 ffe8 	bl	8010fd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010004:	69fa      	ldr	r2, [r7, #28]
 8010006:	69b9      	ldr	r1, [r7, #24]
 8010008:	68f8      	ldr	r0, [r7, #12]
 801000a:	f000 fe79 	bl	8010d00 <I2C_WaitOnTXISFlagUntilTimeout>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	d001      	beq.n	8010018 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8010014:	2301      	movs	r3, #1
 8010016:	e02c      	b.n	8010072 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010018:	88fb      	ldrh	r3, [r7, #6]
 801001a:	2b01      	cmp	r3, #1
 801001c:	d105      	bne.n	801002a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801001e:	893b      	ldrh	r3, [r7, #8]
 8010020:	b2da      	uxtb	r2, r3
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	629a      	str	r2, [r3, #40]	@ 0x28
 8010028:	e015      	b.n	8010056 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801002a:	893b      	ldrh	r3, [r7, #8]
 801002c:	0a1b      	lsrs	r3, r3, #8
 801002e:	b29b      	uxth	r3, r3
 8010030:	b2da      	uxtb	r2, r3
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010038:	69fa      	ldr	r2, [r7, #28]
 801003a:	69b9      	ldr	r1, [r7, #24]
 801003c:	68f8      	ldr	r0, [r7, #12]
 801003e:	f000 fe5f 	bl	8010d00 <I2C_WaitOnTXISFlagUntilTimeout>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d001      	beq.n	801004c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8010048:	2301      	movs	r3, #1
 801004a:	e012      	b.n	8010072 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801004c:	893b      	ldrh	r3, [r7, #8]
 801004e:	b2da      	uxtb	r2, r3
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8010056:	69fb      	ldr	r3, [r7, #28]
 8010058:	9300      	str	r3, [sp, #0]
 801005a:	69bb      	ldr	r3, [r7, #24]
 801005c:	2200      	movs	r2, #0
 801005e:	2140      	movs	r1, #64	@ 0x40
 8010060:	68f8      	ldr	r0, [r7, #12]
 8010062:	f000 fdf4 	bl	8010c4e <I2C_WaitOnFlagUntilTimeout>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d001      	beq.n	8010070 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801006c:	2301      	movs	r3, #1
 801006e:	e000      	b.n	8010072 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8010070:	2300      	movs	r3, #0
}
 8010072:	4618      	mov	r0, r3
 8010074:	3710      	adds	r7, #16
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	80002000 	.word	0x80002000

08010080 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b084      	sub	sp, #16
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010090:	b2db      	uxtb	r3, r3
 8010092:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010096:	2b28      	cmp	r3, #40	@ 0x28
 8010098:	d16a      	bne.n	8010170 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	699b      	ldr	r3, [r3, #24]
 80100a0:	0c1b      	lsrs	r3, r3, #16
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	f003 0301 	and.w	r3, r3, #1
 80100a8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	699b      	ldr	r3, [r3, #24]
 80100b0:	0c1b      	lsrs	r3, r3, #16
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80100b8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	689b      	ldr	r3, [r3, #8]
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80100c6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80100d4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	2b02      	cmp	r3, #2
 80100dc:	d138      	bne.n	8010150 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80100de:	897b      	ldrh	r3, [r7, #10]
 80100e0:	09db      	lsrs	r3, r3, #7
 80100e2:	b29a      	uxth	r2, r3
 80100e4:	89bb      	ldrh	r3, [r7, #12]
 80100e6:	4053      	eors	r3, r2
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	f003 0306 	and.w	r3, r3, #6
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d11c      	bne.n	801012c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80100f2:	897b      	ldrh	r3, [r7, #10]
 80100f4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80100fa:	1c5a      	adds	r2, r3, #1
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010104:	2b02      	cmp	r3, #2
 8010106:	d13b      	bne.n	8010180 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2200      	movs	r2, #0
 801010c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	2208      	movs	r2, #8
 8010114:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2200      	movs	r2, #0
 801011a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801011e:	89ba      	ldrh	r2, [r7, #12]
 8010120:	7bfb      	ldrb	r3, [r7, #15]
 8010122:	4619      	mov	r1, r3
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f7ff f8c3 	bl	800f2b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801012a:	e029      	b.n	8010180 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 801012c:	893b      	ldrh	r3, [r7, #8]
 801012e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010130:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f001 f803 	bl	8011140 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010142:	89ba      	ldrh	r2, [r7, #12]
 8010144:	7bfb      	ldrb	r3, [r7, #15]
 8010146:	4619      	mov	r1, r3
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f7ff f8b1 	bl	800f2b0 <HAL_I2C_AddrCallback>
}
 801014e:	e017      	b.n	8010180 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010150:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 fff3 	bl	8011140 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2200      	movs	r2, #0
 801015e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010162:	89ba      	ldrh	r2, [r7, #12]
 8010164:	7bfb      	ldrb	r3, [r7, #15]
 8010166:	4619      	mov	r1, r3
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f7ff f8a1 	bl	800f2b0 <HAL_I2C_AddrCallback>
}
 801016e:	e007      	b.n	8010180 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2208      	movs	r2, #8
 8010176:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2200      	movs	r2, #0
 801017c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8010180:	bf00      	nop
 8010182:	3710      	adds	r7, #16
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801019e:	b2db      	uxtb	r3, r3
 80101a0:	2b21      	cmp	r3, #33	@ 0x21
 80101a2:	d115      	bne.n	80101d0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2220      	movs	r2, #32
 80101a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2211      	movs	r2, #17
 80101b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2200      	movs	r2, #0
 80101b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80101b8:	2101      	movs	r1, #1
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 ffc0 	bl	8011140 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2200      	movs	r2, #0
 80101c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7ff f849 	bl	800f260 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80101ce:	e014      	b.n	80101fa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2220      	movs	r2, #32
 80101d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2212      	movs	r2, #18
 80101dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2200      	movs	r2, #0
 80101e2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80101e4:	2102      	movs	r1, #2
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f000 ffaa 	bl	8011140 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2200      	movs	r2, #0
 80101f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f7ff f83d 	bl	800f274 <HAL_I2C_MasterRxCpltCallback>
}
 80101fa:	bf00      	nop
 80101fc:	3708      	adds	r7, #8
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}

08010202 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010202:	b580      	push	{r7, lr}
 8010204:	b084      	sub	sp, #16
 8010206:	af00      	add	r7, sp, #0
 8010208:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2200      	movs	r2, #0
 8010216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010220:	2b00      	cmp	r3, #0
 8010222:	d008      	beq.n	8010236 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010232:	601a      	str	r2, [r3, #0]
 8010234:	e00c      	b.n	8010250 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801023c:	2b00      	cmp	r3, #0
 801023e:	d007      	beq.n	8010250 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801024e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010256:	b2db      	uxtb	r3, r3
 8010258:	2b29      	cmp	r3, #41	@ 0x29
 801025a:	d112      	bne.n	8010282 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2228      	movs	r2, #40	@ 0x28
 8010260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2221      	movs	r2, #33	@ 0x21
 8010268:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801026a:	2101      	movs	r1, #1
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f000 ff67 	bl	8011140 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2200      	movs	r2, #0
 8010276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7ff f804 	bl	800f288 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010280:	e017      	b.n	80102b2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010288:	b2db      	uxtb	r3, r3
 801028a:	2b2a      	cmp	r3, #42	@ 0x2a
 801028c:	d111      	bne.n	80102b2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2228      	movs	r2, #40	@ 0x28
 8010292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2222      	movs	r2, #34	@ 0x22
 801029a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801029c:	2102      	movs	r1, #2
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f000 ff4e 	bl	8011140 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2200      	movs	r2, #0
 80102a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f7fe fff5 	bl	800f29c <HAL_I2C_SlaveRxCpltCallback>
}
 80102b2:	bf00      	nop
 80102b4:	3710      	adds	r7, #16
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
	...

080102bc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b086      	sub	sp, #24
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2220      	movs	r2, #32
 80102d0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	2b21      	cmp	r3, #33	@ 0x21
 80102dc:	d107      	bne.n	80102ee <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80102de:	2101      	movs	r1, #1
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f000 ff2d 	bl	8011140 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2211      	movs	r2, #17
 80102ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80102ec:	e00c      	b.n	8010308 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	2b22      	cmp	r3, #34	@ 0x22
 80102f8:	d106      	bne.n	8010308 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80102fa:	2102      	movs	r1, #2
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f000 ff1f 	bl	8011140 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2212      	movs	r2, #18
 8010306:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	6859      	ldr	r1, [r3, #4]
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681a      	ldr	r2, [r3, #0]
 8010312:	4b4c      	ldr	r3, [pc, #304]	@ (8010444 <I2C_ITMasterCplt+0x188>)
 8010314:	400b      	ands	r3, r1
 8010316:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2200      	movs	r2, #0
 801031c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	4a49      	ldr	r2, [pc, #292]	@ (8010448 <I2C_ITMasterCplt+0x18c>)
 8010322:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	f003 0310 	and.w	r3, r3, #16
 801032a:	2b00      	cmp	r3, #0
 801032c:	d009      	beq.n	8010342 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2210      	movs	r2, #16
 8010334:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801033a:	f043 0204 	orr.w	r2, r3, #4
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b60      	cmp	r3, #96	@ 0x60
 801034c:	d10a      	bne.n	8010364 <I2C_ITMasterCplt+0xa8>
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	f003 0304 	and.w	r3, r3, #4
 8010354:	2b00      	cmp	r3, #0
 8010356:	d005      	beq.n	8010364 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801035e:	b2db      	uxtb	r3, r3
 8010360:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8010362:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f000 fc30 	bl	8010bca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801036e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010376:	b2db      	uxtb	r3, r3
 8010378:	2b60      	cmp	r3, #96	@ 0x60
 801037a:	d002      	beq.n	8010382 <I2C_ITMasterCplt+0xc6>
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d006      	beq.n	8010390 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010386:	4619      	mov	r1, r3
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 fb07 	bl	801099c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 801038e:	e054      	b.n	801043a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010396:	b2db      	uxtb	r3, r3
 8010398:	2b21      	cmp	r3, #33	@ 0x21
 801039a:	d124      	bne.n	80103e6 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2220      	movs	r2, #32
 80103a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2200      	movs	r2, #0
 80103a8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	2b40      	cmp	r3, #64	@ 0x40
 80103b4:	d10b      	bne.n	80103ce <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2200      	movs	r2, #0
 80103ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2200      	movs	r2, #0
 80103c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f7fe ff8a 	bl	800f2e0 <HAL_I2C_MemTxCpltCallback>
}
 80103cc:	e035      	b.n	801043a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2200      	movs	r2, #0
 80103d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2200      	movs	r2, #0
 80103da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f7fe ff3e 	bl	800f260 <HAL_I2C_MasterTxCpltCallback>
}
 80103e4:	e029      	b.n	801043a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80103ec:	b2db      	uxtb	r3, r3
 80103ee:	2b22      	cmp	r3, #34	@ 0x22
 80103f0:	d123      	bne.n	801043a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2220      	movs	r2, #32
 80103f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2200      	movs	r2, #0
 80103fe:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010406:	b2db      	uxtb	r3, r3
 8010408:	2b40      	cmp	r3, #64	@ 0x40
 801040a:	d10b      	bne.n	8010424 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2200      	movs	r2, #0
 8010410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2200      	movs	r2, #0
 8010418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7f6 f8a7 	bl	8006570 <HAL_I2C_MemRxCpltCallback>
}
 8010422:	e00a      	b.n	801043a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2200      	movs	r2, #0
 8010428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2200      	movs	r2, #0
 8010430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f7fe ff1d 	bl	800f274 <HAL_I2C_MasterRxCpltCallback>
}
 801043a:	bf00      	nop
 801043c:	3718      	adds	r7, #24
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
 8010442:	bf00      	nop
 8010444:	fe00e800 	.word	0xfe00e800
 8010448:	ffff0000 	.word	0xffff0000

0801044c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b086      	sub	sp, #24
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010466:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801046e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2220      	movs	r2, #32
 8010476:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010478:	7afb      	ldrb	r3, [r7, #11]
 801047a:	2b21      	cmp	r3, #33	@ 0x21
 801047c:	d002      	beq.n	8010484 <I2C_ITSlaveCplt+0x38>
 801047e:	7afb      	ldrb	r3, [r7, #11]
 8010480:	2b29      	cmp	r3, #41	@ 0x29
 8010482:	d108      	bne.n	8010496 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8010484:	f248 0101 	movw	r1, #32769	@ 0x8001
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 fe59 	bl	8011140 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2221      	movs	r2, #33	@ 0x21
 8010492:	631a      	str	r2, [r3, #48]	@ 0x30
 8010494:	e019      	b.n	80104ca <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010496:	7afb      	ldrb	r3, [r7, #11]
 8010498:	2b22      	cmp	r3, #34	@ 0x22
 801049a:	d002      	beq.n	80104a2 <I2C_ITSlaveCplt+0x56>
 801049c:	7afb      	ldrb	r3, [r7, #11]
 801049e:	2b2a      	cmp	r3, #42	@ 0x2a
 80104a0:	d108      	bne.n	80104b4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80104a2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f000 fe4a 	bl	8011140 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2222      	movs	r2, #34	@ 0x22
 80104b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80104b2:	e00a      	b.n	80104ca <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80104b4:	7afb      	ldrb	r3, [r7, #11]
 80104b6:	2b28      	cmp	r3, #40	@ 0x28
 80104b8:	d107      	bne.n	80104ca <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80104ba:	f248 0103 	movw	r1, #32771	@ 0x8003
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f000 fe3e 	bl	8011140 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2200      	movs	r2, #0
 80104c8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	685a      	ldr	r2, [r3, #4]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80104d8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	6859      	ldr	r1, [r3, #4]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	4b7f      	ldr	r3, [pc, #508]	@ (80106e4 <I2C_ITSlaveCplt+0x298>)
 80104e6:	400b      	ands	r3, r1
 80104e8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f000 fb6d 	bl	8010bca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d07a      	beq.n	80105f0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010508:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801050e:	2b00      	cmp	r3, #0
 8010510:	f000 8111 	beq.w	8010736 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	4a73      	ldr	r2, [pc, #460]	@ (80106e8 <I2C_ITSlaveCplt+0x29c>)
 801051c:	4293      	cmp	r3, r2
 801051e:	d059      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	4a71      	ldr	r2, [pc, #452]	@ (80106ec <I2C_ITSlaveCplt+0x2a0>)
 8010528:	4293      	cmp	r3, r2
 801052a:	d053      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	4a6f      	ldr	r2, [pc, #444]	@ (80106f0 <I2C_ITSlaveCplt+0x2a4>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d04d      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	4a6d      	ldr	r2, [pc, #436]	@ (80106f4 <I2C_ITSlaveCplt+0x2a8>)
 8010540:	4293      	cmp	r3, r2
 8010542:	d047      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	4a6b      	ldr	r2, [pc, #428]	@ (80106f8 <I2C_ITSlaveCplt+0x2ac>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d041      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	4a69      	ldr	r2, [pc, #420]	@ (80106fc <I2C_ITSlaveCplt+0x2b0>)
 8010558:	4293      	cmp	r3, r2
 801055a:	d03b      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	4a67      	ldr	r2, [pc, #412]	@ (8010700 <I2C_ITSlaveCplt+0x2b4>)
 8010564:	4293      	cmp	r3, r2
 8010566:	d035      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	4a65      	ldr	r2, [pc, #404]	@ (8010704 <I2C_ITSlaveCplt+0x2b8>)
 8010570:	4293      	cmp	r3, r2
 8010572:	d02f      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	4a63      	ldr	r2, [pc, #396]	@ (8010708 <I2C_ITSlaveCplt+0x2bc>)
 801057c:	4293      	cmp	r3, r2
 801057e:	d029      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	4a61      	ldr	r2, [pc, #388]	@ (801070c <I2C_ITSlaveCplt+0x2c0>)
 8010588:	4293      	cmp	r3, r2
 801058a:	d023      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	4a5f      	ldr	r2, [pc, #380]	@ (8010710 <I2C_ITSlaveCplt+0x2c4>)
 8010594:	4293      	cmp	r3, r2
 8010596:	d01d      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	4a5d      	ldr	r2, [pc, #372]	@ (8010714 <I2C_ITSlaveCplt+0x2c8>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	d017      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	4a5b      	ldr	r2, [pc, #364]	@ (8010718 <I2C_ITSlaveCplt+0x2cc>)
 80105ac:	4293      	cmp	r3, r2
 80105ae:	d011      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	4a59      	ldr	r2, [pc, #356]	@ (801071c <I2C_ITSlaveCplt+0x2d0>)
 80105b8:	4293      	cmp	r3, r2
 80105ba:	d00b      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	4a57      	ldr	r2, [pc, #348]	@ (8010720 <I2C_ITSlaveCplt+0x2d4>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d005      	beq.n	80105d4 <I2C_ITSlaveCplt+0x188>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	4a55      	ldr	r2, [pc, #340]	@ (8010724 <I2C_ITSlaveCplt+0x2d8>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d105      	bne.n	80105e0 <I2C_ITSlaveCplt+0x194>
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	b29b      	uxth	r3, r3
 80105de:	e004      	b.n	80105ea <I2C_ITSlaveCplt+0x19e>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	687a      	ldr	r2, [r7, #4]
 80105ec:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80105ee:	e0a2      	b.n	8010736 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	f000 809d 	beq.w	8010736 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801060a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010610:	2b00      	cmp	r3, #0
 8010612:	f000 8090 	beq.w	8010736 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4a32      	ldr	r2, [pc, #200]	@ (80106e8 <I2C_ITSlaveCplt+0x29c>)
 801061e:	4293      	cmp	r3, r2
 8010620:	d059      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4a30      	ldr	r2, [pc, #192]	@ (80106ec <I2C_ITSlaveCplt+0x2a0>)
 801062a:	4293      	cmp	r3, r2
 801062c:	d053      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	4a2e      	ldr	r2, [pc, #184]	@ (80106f0 <I2C_ITSlaveCplt+0x2a4>)
 8010636:	4293      	cmp	r3, r2
 8010638:	d04d      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	4a2c      	ldr	r2, [pc, #176]	@ (80106f4 <I2C_ITSlaveCplt+0x2a8>)
 8010642:	4293      	cmp	r3, r2
 8010644:	d047      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	4a2a      	ldr	r2, [pc, #168]	@ (80106f8 <I2C_ITSlaveCplt+0x2ac>)
 801064e:	4293      	cmp	r3, r2
 8010650:	d041      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4a28      	ldr	r2, [pc, #160]	@ (80106fc <I2C_ITSlaveCplt+0x2b0>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d03b      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4a26      	ldr	r2, [pc, #152]	@ (8010700 <I2C_ITSlaveCplt+0x2b4>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d035      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a24      	ldr	r2, [pc, #144]	@ (8010704 <I2C_ITSlaveCplt+0x2b8>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d02f      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	4a22      	ldr	r2, [pc, #136]	@ (8010708 <I2C_ITSlaveCplt+0x2bc>)
 801067e:	4293      	cmp	r3, r2
 8010680:	d029      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4a20      	ldr	r2, [pc, #128]	@ (801070c <I2C_ITSlaveCplt+0x2c0>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d023      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a1e      	ldr	r2, [pc, #120]	@ (8010710 <I2C_ITSlaveCplt+0x2c4>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d01d      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	4a1c      	ldr	r2, [pc, #112]	@ (8010714 <I2C_ITSlaveCplt+0x2c8>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d017      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	4a1a      	ldr	r2, [pc, #104]	@ (8010718 <I2C_ITSlaveCplt+0x2cc>)
 80106ae:	4293      	cmp	r3, r2
 80106b0:	d011      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4a18      	ldr	r2, [pc, #96]	@ (801071c <I2C_ITSlaveCplt+0x2d0>)
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d00b      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	4a16      	ldr	r2, [pc, #88]	@ (8010720 <I2C_ITSlaveCplt+0x2d4>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d005      	beq.n	80106d6 <I2C_ITSlaveCplt+0x28a>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	4a14      	ldr	r2, [pc, #80]	@ (8010724 <I2C_ITSlaveCplt+0x2d8>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d128      	bne.n	8010728 <I2C_ITSlaveCplt+0x2dc>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	b29b      	uxth	r3, r3
 80106e0:	e027      	b.n	8010732 <I2C_ITSlaveCplt+0x2e6>
 80106e2:	bf00      	nop
 80106e4:	fe00e800 	.word	0xfe00e800
 80106e8:	40020010 	.word	0x40020010
 80106ec:	40020028 	.word	0x40020028
 80106f0:	40020040 	.word	0x40020040
 80106f4:	40020058 	.word	0x40020058
 80106f8:	40020070 	.word	0x40020070
 80106fc:	40020088 	.word	0x40020088
 8010700:	400200a0 	.word	0x400200a0
 8010704:	400200b8 	.word	0x400200b8
 8010708:	40020410 	.word	0x40020410
 801070c:	40020428 	.word	0x40020428
 8010710:	40020440 	.word	0x40020440
 8010714:	40020458 	.word	0x40020458
 8010718:	40020470 	.word	0x40020470
 801071c:	40020488 	.word	0x40020488
 8010720:	400204a0 	.word	0x400204a0
 8010724:	400204b8 	.word	0x400204b8
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	b29b      	uxth	r3, r3
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	f003 0304 	and.w	r3, r3, #4
 801073c:	2b00      	cmp	r3, #0
 801073e:	d020      	beq.n	8010782 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	f023 0304 	bic.w	r3, r3, #4
 8010746:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010752:	b2d2      	uxtb	r2, r2
 8010754:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801075a:	1c5a      	adds	r2, r3, #1
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010764:	2b00      	cmp	r3, #0
 8010766:	d00c      	beq.n	8010782 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801076c:	3b01      	subs	r3, #1
 801076e:	b29a      	uxth	r2, r3
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010778:	b29b      	uxth	r3, r3
 801077a:	3b01      	subs	r3, #1
 801077c:	b29a      	uxth	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010786:	b29b      	uxth	r3, r3
 8010788:	2b00      	cmp	r3, #0
 801078a:	d005      	beq.n	8010798 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010790:	f043 0204 	orr.w	r2, r3, #4
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	f003 0310 	and.w	r3, r3, #16
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d049      	beq.n	8010836 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d044      	beq.n	8010836 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d128      	bne.n	8010808 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	2b28      	cmp	r3, #40	@ 0x28
 80107c0:	d108      	bne.n	80107d4 <I2C_ITSlaveCplt+0x388>
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80107c8:	d104      	bne.n	80107d4 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80107ca:	6979      	ldr	r1, [r7, #20]
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f000 f891 	bl	80108f4 <I2C_ITListenCplt>
 80107d2:	e030      	b.n	8010836 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80107da:	b2db      	uxtb	r3, r3
 80107dc:	2b29      	cmp	r3, #41	@ 0x29
 80107de:	d10e      	bne.n	80107fe <I2C_ITSlaveCplt+0x3b2>
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80107e6:	d00a      	beq.n	80107fe <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	2210      	movs	r2, #16
 80107ee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f000 f9ea 	bl	8010bca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f7ff fd03 	bl	8010202 <I2C_ITSlaveSeqCplt>
 80107fc:	e01b      	b.n	8010836 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	2210      	movs	r2, #16
 8010804:	61da      	str	r2, [r3, #28]
 8010806:	e016      	b.n	8010836 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	2210      	movs	r2, #16
 801080e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010814:	f043 0204 	orr.w	r2, r3, #4
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d003      	beq.n	801082a <I2C_ITSlaveCplt+0x3de>
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010828:	d105      	bne.n	8010836 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801082e:	4619      	mov	r1, r3
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f000 f8b3 	bl	801099c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2200      	movs	r2, #0
 801083a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2200      	movs	r2, #0
 8010842:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010848:	2b00      	cmp	r3, #0
 801084a:	d010      	beq.n	801086e <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010850:	4619      	mov	r1, r3
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 f8a2 	bl	801099c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801085e:	b2db      	uxtb	r3, r3
 8010860:	2b28      	cmp	r3, #40	@ 0x28
 8010862:	d141      	bne.n	80108e8 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8010864:	6979      	ldr	r1, [r7, #20]
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f000 f844 	bl	80108f4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801086c:	e03c      	b.n	80108e8 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010872:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8010876:	d014      	beq.n	80108a2 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f7ff fcc2 	bl	8010202 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	4a1b      	ldr	r2, [pc, #108]	@ (80108f0 <I2C_ITSlaveCplt+0x4a4>)
 8010882:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2220      	movs	r2, #32
 8010888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2200      	movs	r2, #0
 8010890:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2200      	movs	r2, #0
 8010896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 801089a:	6878      	ldr	r0, [r7, #4]
 801089c:	f7fe fd16 	bl	800f2cc <HAL_I2C_ListenCpltCallback>
}
 80108a0:	e022      	b.n	80108e8 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80108a8:	b2db      	uxtb	r3, r3
 80108aa:	2b22      	cmp	r3, #34	@ 0x22
 80108ac:	d10e      	bne.n	80108cc <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2220      	movs	r2, #32
 80108b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2200      	movs	r2, #0
 80108ba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2200      	movs	r2, #0
 80108c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f7fe fce9 	bl	800f29c <HAL_I2C_SlaveRxCpltCallback>
}
 80108ca:	e00d      	b.n	80108e8 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2220      	movs	r2, #32
 80108d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2200      	movs	r2, #0
 80108d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2200      	movs	r2, #0
 80108de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f7fe fcd0 	bl	800f288 <HAL_I2C_SlaveTxCpltCallback>
}
 80108e8:	bf00      	nop
 80108ea:	3718      	adds	r7, #24
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	ffff0000 	.word	0xffff0000

080108f4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	4a25      	ldr	r2, [pc, #148]	@ (8010998 <I2C_ITListenCplt+0xa4>)
 8010902:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2200      	movs	r2, #0
 8010908:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2220      	movs	r2, #32
 801090e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2200      	movs	r2, #0
 8010916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2200      	movs	r2, #0
 801091e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	f003 0304 	and.w	r3, r3, #4
 8010926:	2b00      	cmp	r3, #0
 8010928:	d022      	beq.n	8010970 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010934:	b2d2      	uxtb	r2, r2
 8010936:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801093c:	1c5a      	adds	r2, r3, #1
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010946:	2b00      	cmp	r3, #0
 8010948:	d012      	beq.n	8010970 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801094e:	3b01      	subs	r3, #1
 8010950:	b29a      	uxth	r2, r3
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801095a:	b29b      	uxth	r3, r3
 801095c:	3b01      	subs	r3, #1
 801095e:	b29a      	uxth	r2, r3
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010968:	f043 0204 	orr.w	r2, r3, #4
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010970:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010974:	6878      	ldr	r0, [r7, #4]
 8010976:	f000 fbe3 	bl	8011140 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2210      	movs	r2, #16
 8010980:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2200      	movs	r2, #0
 8010986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7fe fc9e 	bl	800f2cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8010990:	bf00      	nop
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	ffff0000 	.word	0xffff0000

0801099c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b084      	sub	sp, #16
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80109ac:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2200      	movs	r2, #0
 80109b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4a6d      	ldr	r2, [pc, #436]	@ (8010b70 <I2C_ITError+0x1d4>)
 80109ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2200      	movs	r2, #0
 80109c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	431a      	orrs	r2, r3
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80109ce:	7bfb      	ldrb	r3, [r7, #15]
 80109d0:	2b28      	cmp	r3, #40	@ 0x28
 80109d2:	d005      	beq.n	80109e0 <I2C_ITError+0x44>
 80109d4:	7bfb      	ldrb	r3, [r7, #15]
 80109d6:	2b29      	cmp	r3, #41	@ 0x29
 80109d8:	d002      	beq.n	80109e0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80109da:	7bfb      	ldrb	r3, [r7, #15]
 80109dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80109de:	d10b      	bne.n	80109f8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80109e0:	2103      	movs	r1, #3
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f000 fbac 	bl	8011140 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2228      	movs	r2, #40	@ 0x28
 80109ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	4a60      	ldr	r2, [pc, #384]	@ (8010b74 <I2C_ITError+0x1d8>)
 80109f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80109f6:	e030      	b.n	8010a5a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80109f8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f000 fb9f 	bl	8011140 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f000 f8e1 	bl	8010bca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010a0e:	b2db      	uxtb	r3, r3
 8010a10:	2b60      	cmp	r3, #96	@ 0x60
 8010a12:	d01f      	beq.n	8010a54 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2220      	movs	r2, #32
 8010a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	699b      	ldr	r3, [r3, #24]
 8010a22:	f003 0320 	and.w	r3, r3, #32
 8010a26:	2b20      	cmp	r3, #32
 8010a28:	d114      	bne.n	8010a54 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	699b      	ldr	r3, [r3, #24]
 8010a30:	f003 0310 	and.w	r3, r3, #16
 8010a34:	2b10      	cmp	r3, #16
 8010a36:	d109      	bne.n	8010a4c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2210      	movs	r2, #16
 8010a3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a44:	f043 0204 	orr.w	r2, r3, #4
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	2220      	movs	r2, #32
 8010a52:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2200      	movs	r2, #0
 8010a58:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a5e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d039      	beq.n	8010adc <I2C_ITError+0x140>
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	2b11      	cmp	r3, #17
 8010a6c:	d002      	beq.n	8010a74 <I2C_ITError+0xd8>
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	2b21      	cmp	r3, #33	@ 0x21
 8010a72:	d133      	bne.n	8010adc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010a7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010a82:	d107      	bne.n	8010a94 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	681a      	ldr	r2, [r3, #0]
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010a92:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7fd f9f7 	bl	800de8c <HAL_DMA_GetState>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2b01      	cmp	r3, #1
 8010aa2:	d017      	beq.n	8010ad4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010aa8:	4a33      	ldr	r2, [pc, #204]	@ (8010b78 <I2C_ITError+0x1dc>)
 8010aaa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7fc f877 	bl	800cbac <HAL_DMA_Abort_IT>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d04d      	beq.n	8010b60 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010aca:	687a      	ldr	r2, [r7, #4]
 8010acc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010ace:	4610      	mov	r0, r2
 8010ad0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010ad2:	e045      	b.n	8010b60 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f000 f851 	bl	8010b7c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010ada:	e041      	b.n	8010b60 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d039      	beq.n	8010b58 <I2C_ITError+0x1bc>
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	2b12      	cmp	r3, #18
 8010ae8:	d002      	beq.n	8010af0 <I2C_ITError+0x154>
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	2b22      	cmp	r3, #34	@ 0x22
 8010aee:	d133      	bne.n	8010b58 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010afa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010afe:	d107      	bne.n	8010b10 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010b0e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7fd f9b9 	bl	800de8c <HAL_DMA_GetState>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	d017      	beq.n	8010b50 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b24:	4a14      	ldr	r2, [pc, #80]	@ (8010b78 <I2C_ITError+0x1dc>)
 8010b26:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7fc f839 	bl	800cbac <HAL_DMA_Abort_IT>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d011      	beq.n	8010b64 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b46:	687a      	ldr	r2, [r7, #4]
 8010b48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010b4a:	4610      	mov	r0, r2
 8010b4c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010b4e:	e009      	b.n	8010b64 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f000 f813 	bl	8010b7c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010b56:	e005      	b.n	8010b64 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f000 f80f 	bl	8010b7c <I2C_TreatErrorCallback>
  }
}
 8010b5e:	e002      	b.n	8010b66 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010b60:	bf00      	nop
 8010b62:	e000      	b.n	8010b66 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010b64:	bf00      	nop
}
 8010b66:	bf00      	nop
 8010b68:	3710      	adds	r7, #16
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	ffff0000 	.word	0xffff0000
 8010b74:	0800f569 	.word	0x0800f569
 8010b78:	08010c13 	.word	0x08010c13

08010b7c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	2b60      	cmp	r3, #96	@ 0x60
 8010b8e:	d10e      	bne.n	8010bae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2220      	movs	r2, #32
 8010b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f7fe fbae 	bl	800f308 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010bac:	e009      	b.n	8010bc2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7fe fb99 	bl	800f2f4 <HAL_I2C_ErrorCallback>
}
 8010bc2:	bf00      	nop
 8010bc4:	3708      	adds	r7, #8
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}

08010bca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010bca:	b480      	push	{r7}
 8010bcc:	b083      	sub	sp, #12
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	699b      	ldr	r3, [r3, #24]
 8010bd8:	f003 0302 	and.w	r3, r3, #2
 8010bdc:	2b02      	cmp	r3, #2
 8010bde:	d103      	bne.n	8010be8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	2200      	movs	r2, #0
 8010be6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	699b      	ldr	r3, [r3, #24]
 8010bee:	f003 0301 	and.w	r3, r3, #1
 8010bf2:	2b01      	cmp	r3, #1
 8010bf4:	d007      	beq.n	8010c06 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	699a      	ldr	r2, [r3, #24]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f042 0201 	orr.w	r2, r2, #1
 8010c04:	619a      	str	r2, [r3, #24]
  }
}
 8010c06:	bf00      	nop
 8010c08:	370c      	adds	r7, #12
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c10:	4770      	bx	lr

08010c12 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b084      	sub	sp, #16
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c1e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d003      	beq.n	8010c30 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d003      	beq.n	8010c40 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8010c40:	68f8      	ldr	r0, [r7, #12]
 8010c42:	f7ff ff9b 	bl	8010b7c <I2C_TreatErrorCallback>
}
 8010c46:	bf00      	nop
 8010c48:	3710      	adds	r7, #16
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}

08010c4e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b084      	sub	sp, #16
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	60f8      	str	r0, [r7, #12]
 8010c56:	60b9      	str	r1, [r7, #8]
 8010c58:	603b      	str	r3, [r7, #0]
 8010c5a:	4613      	mov	r3, r2
 8010c5c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010c5e:	e03b      	b.n	8010cd8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010c60:	69ba      	ldr	r2, [r7, #24]
 8010c62:	6839      	ldr	r1, [r7, #0]
 8010c64:	68f8      	ldr	r0, [r7, #12]
 8010c66:	f000 f8d5 	bl	8010e14 <I2C_IsErrorOccurred>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d001      	beq.n	8010c74 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8010c70:	2301      	movs	r3, #1
 8010c72:	e041      	b.n	8010cf8 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c7a:	d02d      	beq.n	8010cd8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010c7c:	f7f8 fd80 	bl	8009780 <HAL_GetTick>
 8010c80:	4602      	mov	r2, r0
 8010c82:	69bb      	ldr	r3, [r7, #24]
 8010c84:	1ad3      	subs	r3, r2, r3
 8010c86:	683a      	ldr	r2, [r7, #0]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d302      	bcc.n	8010c92 <I2C_WaitOnFlagUntilTimeout+0x44>
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d122      	bne.n	8010cd8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	699a      	ldr	r2, [r3, #24]
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	4013      	ands	r3, r2
 8010c9c:	68ba      	ldr	r2, [r7, #8]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	bf0c      	ite	eq
 8010ca2:	2301      	moveq	r3, #1
 8010ca4:	2300      	movne	r3, #0
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	461a      	mov	r2, r3
 8010caa:	79fb      	ldrb	r3, [r7, #7]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d113      	bne.n	8010cd8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cb4:	f043 0220 	orr.w	r2, r3, #32
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2220      	movs	r2, #32
 8010cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	e00f      	b.n	8010cf8 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	699a      	ldr	r2, [r3, #24]
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	4013      	ands	r3, r2
 8010ce2:	68ba      	ldr	r2, [r7, #8]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	bf0c      	ite	eq
 8010ce8:	2301      	moveq	r3, #1
 8010cea:	2300      	movne	r3, #0
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	461a      	mov	r2, r3
 8010cf0:	79fb      	ldrb	r3, [r7, #7]
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d0b4      	beq.n	8010c60 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010cf6:	2300      	movs	r3, #0
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3710      	adds	r7, #16
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b084      	sub	sp, #16
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010d0c:	e033      	b.n	8010d76 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010d0e:	687a      	ldr	r2, [r7, #4]
 8010d10:	68b9      	ldr	r1, [r7, #8]
 8010d12:	68f8      	ldr	r0, [r7, #12]
 8010d14:	f000 f87e 	bl	8010e14 <I2C_IsErrorOccurred>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d001      	beq.n	8010d22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010d1e:	2301      	movs	r3, #1
 8010d20:	e031      	b.n	8010d86 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d28:	d025      	beq.n	8010d76 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010d2a:	f7f8 fd29 	bl	8009780 <HAL_GetTick>
 8010d2e:	4602      	mov	r2, r0
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	1ad3      	subs	r3, r2, r3
 8010d34:	68ba      	ldr	r2, [r7, #8]
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d302      	bcc.n	8010d40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d11a      	bne.n	8010d76 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	699b      	ldr	r3, [r3, #24]
 8010d46:	f003 0302 	and.w	r3, r3, #2
 8010d4a:	2b02      	cmp	r3, #2
 8010d4c:	d013      	beq.n	8010d76 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d52:	f043 0220 	orr.w	r2, r3, #32
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2220      	movs	r2, #32
 8010d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2200      	movs	r2, #0
 8010d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010d72:	2301      	movs	r3, #1
 8010d74:	e007      	b.n	8010d86 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	699b      	ldr	r3, [r3, #24]
 8010d7c:	f003 0302 	and.w	r3, r3, #2
 8010d80:	2b02      	cmp	r3, #2
 8010d82:	d1c4      	bne.n	8010d0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010d84:	2300      	movs	r3, #0
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3710      	adds	r7, #16
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b084      	sub	sp, #16
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	60f8      	str	r0, [r7, #12]
 8010d96:	60b9      	str	r1, [r7, #8]
 8010d98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010d9a:	e02f      	b.n	8010dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	68b9      	ldr	r1, [r7, #8]
 8010da0:	68f8      	ldr	r0, [r7, #12]
 8010da2:	f000 f837 	bl	8010e14 <I2C_IsErrorOccurred>
 8010da6:	4603      	mov	r3, r0
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d001      	beq.n	8010db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010dac:	2301      	movs	r3, #1
 8010dae:	e02d      	b.n	8010e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010db0:	f7f8 fce6 	bl	8009780 <HAL_GetTick>
 8010db4:	4602      	mov	r2, r0
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	1ad3      	subs	r3, r2, r3
 8010dba:	68ba      	ldr	r2, [r7, #8]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d302      	bcc.n	8010dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d11a      	bne.n	8010dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	699b      	ldr	r3, [r3, #24]
 8010dcc:	f003 0320 	and.w	r3, r3, #32
 8010dd0:	2b20      	cmp	r3, #32
 8010dd2:	d013      	beq.n	8010dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010dd8:	f043 0220 	orr.w	r2, r3, #32
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	2220      	movs	r2, #32
 8010de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	2200      	movs	r2, #0
 8010dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2200      	movs	r2, #0
 8010df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8010df8:	2301      	movs	r3, #1
 8010dfa:	e007      	b.n	8010e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	699b      	ldr	r3, [r3, #24]
 8010e02:	f003 0320 	and.w	r3, r3, #32
 8010e06:	2b20      	cmp	r3, #32
 8010e08:	d1c8      	bne.n	8010d9c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010e0a:	2300      	movs	r3, #0
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3710      	adds	r7, #16
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}

08010e14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b08a      	sub	sp, #40	@ 0x28
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010e20:	2300      	movs	r3, #0
 8010e22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	699b      	ldr	r3, [r3, #24]
 8010e2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	f003 0310 	and.w	r3, r3, #16
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d068      	beq.n	8010f12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	2210      	movs	r2, #16
 8010e46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010e48:	e049      	b.n	8010ede <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e50:	d045      	beq.n	8010ede <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010e52:	f7f8 fc95 	bl	8009780 <HAL_GetTick>
 8010e56:	4602      	mov	r2, r0
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	1ad3      	subs	r3, r2, r3
 8010e5c:	68ba      	ldr	r2, [r7, #8]
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d302      	bcc.n	8010e68 <I2C_IsErrorOccurred+0x54>
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d13a      	bne.n	8010ede <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010e72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010e7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	699b      	ldr	r3, [r3, #24]
 8010e82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010e86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010e8a:	d121      	bne.n	8010ed0 <I2C_IsErrorOccurred+0xbc>
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010e92:	d01d      	beq.n	8010ed0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8010e94:	7cfb      	ldrb	r3, [r7, #19]
 8010e96:	2b20      	cmp	r3, #32
 8010e98:	d01a      	beq.n	8010ed0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	685a      	ldr	r2, [r3, #4]
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010ea8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010eaa:	f7f8 fc69 	bl	8009780 <HAL_GetTick>
 8010eae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010eb0:	e00e      	b.n	8010ed0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010eb2:	f7f8 fc65 	bl	8009780 <HAL_GetTick>
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	69fb      	ldr	r3, [r7, #28]
 8010eba:	1ad3      	subs	r3, r2, r3
 8010ebc:	2b19      	cmp	r3, #25
 8010ebe:	d907      	bls.n	8010ed0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010ec0:	6a3b      	ldr	r3, [r7, #32]
 8010ec2:	f043 0320 	orr.w	r3, r3, #32
 8010ec6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8010ec8:	2301      	movs	r3, #1
 8010eca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8010ece:	e006      	b.n	8010ede <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	699b      	ldr	r3, [r3, #24]
 8010ed6:	f003 0320 	and.w	r3, r3, #32
 8010eda:	2b20      	cmp	r3, #32
 8010edc:	d1e9      	bne.n	8010eb2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	699b      	ldr	r3, [r3, #24]
 8010ee4:	f003 0320 	and.w	r3, r3, #32
 8010ee8:	2b20      	cmp	r3, #32
 8010eea:	d003      	beq.n	8010ef4 <I2C_IsErrorOccurred+0xe0>
 8010eec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d0aa      	beq.n	8010e4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d103      	bne.n	8010f04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	2220      	movs	r2, #32
 8010f02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010f04:	6a3b      	ldr	r3, [r7, #32]
 8010f06:	f043 0304 	orr.w	r3, r3, #4
 8010f0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	699b      	ldr	r3, [r3, #24]
 8010f18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d00b      	beq.n	8010f3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010f24:	6a3b      	ldr	r3, [r7, #32]
 8010f26:	f043 0301 	orr.w	r3, r3, #1
 8010f2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010f34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010f36:	2301      	movs	r3, #1
 8010f38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010f3c:	69bb      	ldr	r3, [r7, #24]
 8010f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d00b      	beq.n	8010f5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010f46:	6a3b      	ldr	r3, [r7, #32]
 8010f48:	f043 0308 	orr.w	r3, r3, #8
 8010f4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010f56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010f58:	2301      	movs	r3, #1
 8010f5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010f5e:	69bb      	ldr	r3, [r7, #24]
 8010f60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00b      	beq.n	8010f80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010f68:	6a3b      	ldr	r3, [r7, #32]
 8010f6a:	f043 0302 	orr.w	r3, r3, #2
 8010f6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8010f80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d01c      	beq.n	8010fc2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f7ff fe1e 	bl	8010bca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	6859      	ldr	r1, [r3, #4]
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681a      	ldr	r2, [r3, #0]
 8010f98:	4b0d      	ldr	r3, [pc, #52]	@ (8010fd0 <I2C_IsErrorOccurred+0x1bc>)
 8010f9a:	400b      	ands	r3, r1
 8010f9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010fa2:	6a3b      	ldr	r3, [r7, #32]
 8010fa4:	431a      	orrs	r2, r3
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	2220      	movs	r2, #32
 8010fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8010fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3728      	adds	r7, #40	@ 0x28
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	fe00e800 	.word	0xfe00e800

08010fd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b087      	sub	sp, #28
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	60f8      	str	r0, [r7, #12]
 8010fdc:	607b      	str	r3, [r7, #4]
 8010fde:	460b      	mov	r3, r1
 8010fe0:	817b      	strh	r3, [r7, #10]
 8010fe2:	4613      	mov	r3, r2
 8010fe4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010fe6:	897b      	ldrh	r3, [r7, #10]
 8010fe8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010fec:	7a7b      	ldrb	r3, [r7, #9]
 8010fee:	041b      	lsls	r3, r3, #16
 8010ff0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010ff4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010ffa:	6a3b      	ldr	r3, [r7, #32]
 8010ffc:	4313      	orrs	r3, r2
 8010ffe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011002:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	685a      	ldr	r2, [r3, #4]
 801100a:	6a3b      	ldr	r3, [r7, #32]
 801100c:	0d5b      	lsrs	r3, r3, #21
 801100e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8011012:	4b08      	ldr	r3, [pc, #32]	@ (8011034 <I2C_TransferConfig+0x60>)
 8011014:	430b      	orrs	r3, r1
 8011016:	43db      	mvns	r3, r3
 8011018:	ea02 0103 	and.w	r1, r2, r3
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	697a      	ldr	r2, [r7, #20]
 8011022:	430a      	orrs	r2, r1
 8011024:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8011026:	bf00      	nop
 8011028:	371c      	adds	r7, #28
 801102a:	46bd      	mov	sp, r7
 801102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011030:	4770      	bx	lr
 8011032:	bf00      	nop
 8011034:	03ff63ff 	.word	0x03ff63ff

08011038 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011038:	b480      	push	{r7}
 801103a:	b085      	sub	sp, #20
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	460b      	mov	r3, r1
 8011042:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8011044:	2300      	movs	r3, #0
 8011046:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801104c:	4a39      	ldr	r2, [pc, #228]	@ (8011134 <I2C_Enable_IRQ+0xfc>)
 801104e:	4293      	cmp	r3, r2
 8011050:	d032      	beq.n	80110b8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011056:	4a38      	ldr	r2, [pc, #224]	@ (8011138 <I2C_Enable_IRQ+0x100>)
 8011058:	4293      	cmp	r3, r2
 801105a:	d02d      	beq.n	80110b8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011060:	4a36      	ldr	r2, [pc, #216]	@ (801113c <I2C_Enable_IRQ+0x104>)
 8011062:	4293      	cmp	r3, r2
 8011064:	d028      	beq.n	80110b8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011066:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801106a:	2b00      	cmp	r3, #0
 801106c:	da03      	bge.n	8011076 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8011074:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011076:	887b      	ldrh	r3, [r7, #2]
 8011078:	f003 0301 	and.w	r3, r3, #1
 801107c:	2b00      	cmp	r3, #0
 801107e:	d003      	beq.n	8011088 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8011086:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011088:	887b      	ldrh	r3, [r7, #2]
 801108a:	f003 0302 	and.w	r3, r3, #2
 801108e:	2b00      	cmp	r3, #0
 8011090:	d003      	beq.n	801109a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8011098:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801109a:	887b      	ldrh	r3, [r7, #2]
 801109c:	2b10      	cmp	r3, #16
 801109e:	d103      	bne.n	80110a8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80110a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80110a8:	887b      	ldrh	r3, [r7, #2]
 80110aa:	2b20      	cmp	r3, #32
 80110ac:	d133      	bne.n	8011116 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f043 0320 	orr.w	r3, r3, #32
 80110b4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80110b6:	e02e      	b.n	8011116 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80110b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	da03      	bge.n	80110c8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80110c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80110c8:	887b      	ldrh	r3, [r7, #2]
 80110ca:	f003 0301 	and.w	r3, r3, #1
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d003      	beq.n	80110da <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80110d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80110da:	887b      	ldrh	r3, [r7, #2]
 80110dc:	f003 0302 	and.w	r3, r3, #2
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d003      	beq.n	80110ec <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80110ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80110ec:	887b      	ldrh	r3, [r7, #2]
 80110ee:	2b10      	cmp	r3, #16
 80110f0:	d103      	bne.n	80110fa <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80110f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80110fa:	887b      	ldrh	r3, [r7, #2]
 80110fc:	2b20      	cmp	r3, #32
 80110fe:	d103      	bne.n	8011108 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8011106:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8011108:	887b      	ldrh	r3, [r7, #2]
 801110a:	2b40      	cmp	r3, #64	@ 0x40
 801110c:	d103      	bne.n	8011116 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011114:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	6819      	ldr	r1, [r3, #0]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	68fa      	ldr	r2, [r7, #12]
 8011122:	430a      	orrs	r2, r1
 8011124:	601a      	str	r2, [r3, #0]
}
 8011126:	bf00      	nop
 8011128:	3714      	adds	r7, #20
 801112a:	46bd      	mov	sp, r7
 801112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011130:	4770      	bx	lr
 8011132:	bf00      	nop
 8011134:	0800f75b 	.word	0x0800f75b
 8011138:	0800fb7d 	.word	0x0800fb7d
 801113c:	0800f931 	.word	0x0800f931

08011140 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011140:	b480      	push	{r7}
 8011142:	b085      	sub	sp, #20
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	460b      	mov	r3, r1
 801114a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801114c:	2300      	movs	r3, #0
 801114e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011150:	887b      	ldrh	r3, [r7, #2]
 8011152:	f003 0301 	and.w	r3, r3, #1
 8011156:	2b00      	cmp	r3, #0
 8011158:	d00f      	beq.n	801117a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8011160:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011168:	b2db      	uxtb	r3, r3
 801116a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 801116e:	2b28      	cmp	r3, #40	@ 0x28
 8011170:	d003      	beq.n	801117a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8011178:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801117a:	887b      	ldrh	r3, [r7, #2]
 801117c:	f003 0302 	and.w	r3, r3, #2
 8011180:	2b00      	cmp	r3, #0
 8011182:	d00f      	beq.n	80111a4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 801118a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011192:	b2db      	uxtb	r3, r3
 8011194:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8011198:	2b28      	cmp	r3, #40	@ 0x28
 801119a:	d003      	beq.n	80111a4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80111a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80111a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	da03      	bge.n	80111b4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80111b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80111b4:	887b      	ldrh	r3, [r7, #2]
 80111b6:	2b10      	cmp	r3, #16
 80111b8:	d103      	bne.n	80111c2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80111c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80111c2:	887b      	ldrh	r3, [r7, #2]
 80111c4:	2b20      	cmp	r3, #32
 80111c6:	d103      	bne.n	80111d0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f043 0320 	orr.w	r3, r3, #32
 80111ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80111d0:	887b      	ldrh	r3, [r7, #2]
 80111d2:	2b40      	cmp	r3, #64	@ 0x40
 80111d4:	d103      	bne.n	80111de <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111dc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	6819      	ldr	r1, [r3, #0]
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	43da      	mvns	r2, r3
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	400a      	ands	r2, r1
 80111ee:	601a      	str	r2, [r3, #0]
}
 80111f0:	bf00      	nop
 80111f2:	3714      	adds	r7, #20
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr

080111fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801120c:	b2db      	uxtb	r3, r3
 801120e:	2b20      	cmp	r3, #32
 8011210:	d138      	bne.n	8011284 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011218:	2b01      	cmp	r3, #1
 801121a:	d101      	bne.n	8011220 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801121c:	2302      	movs	r3, #2
 801121e:	e032      	b.n	8011286 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2201      	movs	r2, #1
 8011224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2224      	movs	r2, #36	@ 0x24
 801122c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	681a      	ldr	r2, [r3, #0]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f022 0201 	bic.w	r2, r2, #1
 801123e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	681a      	ldr	r2, [r3, #0]
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801124e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	6819      	ldr	r1, [r3, #0]
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	683a      	ldr	r2, [r7, #0]
 801125c:	430a      	orrs	r2, r1
 801125e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f042 0201 	orr.w	r2, r2, #1
 801126e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2220      	movs	r2, #32
 8011274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2200      	movs	r2, #0
 801127c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8011280:	2300      	movs	r3, #0
 8011282:	e000      	b.n	8011286 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011284:	2302      	movs	r3, #2
  }
}
 8011286:	4618      	mov	r0, r3
 8011288:	370c      	adds	r7, #12
 801128a:	46bd      	mov	sp, r7
 801128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011290:	4770      	bx	lr

08011292 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011292:	b480      	push	{r7}
 8011294:	b085      	sub	sp, #20
 8011296:	af00      	add	r7, sp, #0
 8011298:	6078      	str	r0, [r7, #4]
 801129a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	2b20      	cmp	r3, #32
 80112a6:	d139      	bne.n	801131c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d101      	bne.n	80112b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80112b2:	2302      	movs	r3, #2
 80112b4:	e033      	b.n	801131e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2201      	movs	r2, #1
 80112ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2224      	movs	r2, #36	@ 0x24
 80112c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f022 0201 	bic.w	r2, r2, #1
 80112d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80112e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	021b      	lsls	r3, r3, #8
 80112ea:	68fa      	ldr	r2, [r7, #12]
 80112ec:	4313      	orrs	r3, r2
 80112ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	68fa      	ldr	r2, [r7, #12]
 80112f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	681a      	ldr	r2, [r3, #0]
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	f042 0201 	orr.w	r2, r2, #1
 8011306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2220      	movs	r2, #32
 801130c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2200      	movs	r2, #0
 8011314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8011318:	2300      	movs	r3, #0
 801131a:	e000      	b.n	801131e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801131c:	2302      	movs	r3, #2
  }
}
 801131e:	4618      	mov	r0, r3
 8011320:	3714      	adds	r7, #20
 8011322:	46bd      	mov	sp, r7
 8011324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011328:	4770      	bx	lr
	...

0801132c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 801132c:	b480      	push	{r7}
 801132e:	b085      	sub	sp, #20
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011334:	4b0d      	ldr	r3, [pc, #52]	@ (801136c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8011336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801133a:	4a0c      	ldr	r2, [pc, #48]	@ (801136c <HAL_I2CEx_EnableFastModePlus+0x40>)
 801133c:	f043 0302 	orr.w	r3, r3, #2
 8011340:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011344:	4b09      	ldr	r3, [pc, #36]	@ (801136c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8011346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801134a:	f003 0302 	and.w	r3, r3, #2
 801134e:	60fb      	str	r3, [r7, #12]
 8011350:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8011352:	4b07      	ldr	r3, [pc, #28]	@ (8011370 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8011354:	685a      	ldr	r2, [r3, #4]
 8011356:	4906      	ldr	r1, [pc, #24]	@ (8011370 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	4313      	orrs	r3, r2
 801135c:	604b      	str	r3, [r1, #4]
}
 801135e:	bf00      	nop
 8011360:	3714      	adds	r7, #20
 8011362:	46bd      	mov	sp, r7
 8011364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011368:	4770      	bx	lr
 801136a:	bf00      	nop
 801136c:	58024400 	.word	0x58024400
 8011370:	58000400 	.word	0x58000400

08011374 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801137c:	4b19      	ldr	r3, [pc, #100]	@ (80113e4 <HAL_PWREx_ConfigSupply+0x70>)
 801137e:	68db      	ldr	r3, [r3, #12]
 8011380:	f003 0304 	and.w	r3, r3, #4
 8011384:	2b04      	cmp	r3, #4
 8011386:	d00a      	beq.n	801139e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8011388:	4b16      	ldr	r3, [pc, #88]	@ (80113e4 <HAL_PWREx_ConfigSupply+0x70>)
 801138a:	68db      	ldr	r3, [r3, #12]
 801138c:	f003 0307 	and.w	r3, r3, #7
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	429a      	cmp	r2, r3
 8011394:	d001      	beq.n	801139a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8011396:	2301      	movs	r3, #1
 8011398:	e01f      	b.n	80113da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801139a:	2300      	movs	r3, #0
 801139c:	e01d      	b.n	80113da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801139e:	4b11      	ldr	r3, [pc, #68]	@ (80113e4 <HAL_PWREx_ConfigSupply+0x70>)
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	f023 0207 	bic.w	r2, r3, #7
 80113a6:	490f      	ldr	r1, [pc, #60]	@ (80113e4 <HAL_PWREx_ConfigSupply+0x70>)
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	4313      	orrs	r3, r2
 80113ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80113ae:	f7f8 f9e7 	bl	8009780 <HAL_GetTick>
 80113b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80113b4:	e009      	b.n	80113ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80113b6:	f7f8 f9e3 	bl	8009780 <HAL_GetTick>
 80113ba:	4602      	mov	r2, r0
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80113c4:	d901      	bls.n	80113ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80113c6:	2301      	movs	r3, #1
 80113c8:	e007      	b.n	80113da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80113ca:	4b06      	ldr	r3, [pc, #24]	@ (80113e4 <HAL_PWREx_ConfigSupply+0x70>)
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80113d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80113d6:	d1ee      	bne.n	80113b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80113d8:	2300      	movs	r3, #0
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3710      	adds	r7, #16
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
 80113e2:	bf00      	nop
 80113e4:	58024800 	.word	0x58024800

080113e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b08c      	sub	sp, #48	@ 0x30
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d101      	bne.n	80113fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80113f6:	2301      	movs	r3, #1
 80113f8:	e3c8      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	f003 0301 	and.w	r3, r3, #1
 8011402:	2b00      	cmp	r3, #0
 8011404:	f000 8087 	beq.w	8011516 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011408:	4b88      	ldr	r3, [pc, #544]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 801140a:	691b      	ldr	r3, [r3, #16]
 801140c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011410:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011412:	4b86      	ldr	r3, [pc, #536]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011416:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8011418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801141a:	2b10      	cmp	r3, #16
 801141c:	d007      	beq.n	801142e <HAL_RCC_OscConfig+0x46>
 801141e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011420:	2b18      	cmp	r3, #24
 8011422:	d110      	bne.n	8011446 <HAL_RCC_OscConfig+0x5e>
 8011424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011426:	f003 0303 	and.w	r3, r3, #3
 801142a:	2b02      	cmp	r3, #2
 801142c:	d10b      	bne.n	8011446 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801142e:	4b7f      	ldr	r3, [pc, #508]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011436:	2b00      	cmp	r3, #0
 8011438:	d06c      	beq.n	8011514 <HAL_RCC_OscConfig+0x12c>
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d168      	bne.n	8011514 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8011442:	2301      	movs	r3, #1
 8011444:	e3a2      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801144e:	d106      	bne.n	801145e <HAL_RCC_OscConfig+0x76>
 8011450:	4b76      	ldr	r3, [pc, #472]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	4a75      	ldr	r2, [pc, #468]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801145a:	6013      	str	r3, [r2, #0]
 801145c:	e02e      	b.n	80114bc <HAL_RCC_OscConfig+0xd4>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d10c      	bne.n	8011480 <HAL_RCC_OscConfig+0x98>
 8011466:	4b71      	ldr	r3, [pc, #452]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	4a70      	ldr	r2, [pc, #448]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 801146c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011470:	6013      	str	r3, [r2, #0]
 8011472:	4b6e      	ldr	r3, [pc, #440]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	4a6d      	ldr	r2, [pc, #436]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011478:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801147c:	6013      	str	r3, [r2, #0]
 801147e:	e01d      	b.n	80114bc <HAL_RCC_OscConfig+0xd4>
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011488:	d10c      	bne.n	80114a4 <HAL_RCC_OscConfig+0xbc>
 801148a:	4b68      	ldr	r3, [pc, #416]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	4a67      	ldr	r2, [pc, #412]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011494:	6013      	str	r3, [r2, #0]
 8011496:	4b65      	ldr	r3, [pc, #404]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	4a64      	ldr	r2, [pc, #400]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 801149c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80114a0:	6013      	str	r3, [r2, #0]
 80114a2:	e00b      	b.n	80114bc <HAL_RCC_OscConfig+0xd4>
 80114a4:	4b61      	ldr	r3, [pc, #388]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	4a60      	ldr	r2, [pc, #384]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 80114aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80114ae:	6013      	str	r3, [r2, #0]
 80114b0:	4b5e      	ldr	r3, [pc, #376]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	4a5d      	ldr	r2, [pc, #372]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 80114b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80114ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d013      	beq.n	80114ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80114c4:	f7f8 f95c 	bl	8009780 <HAL_GetTick>
 80114c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80114ca:	e008      	b.n	80114de <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80114cc:	f7f8 f958 	bl	8009780 <HAL_GetTick>
 80114d0:	4602      	mov	r2, r0
 80114d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d4:	1ad3      	subs	r3, r2, r3
 80114d6:	2b64      	cmp	r3, #100	@ 0x64
 80114d8:	d901      	bls.n	80114de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80114da:	2303      	movs	r3, #3
 80114dc:	e356      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80114de:	4b53      	ldr	r3, [pc, #332]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d0f0      	beq.n	80114cc <HAL_RCC_OscConfig+0xe4>
 80114ea:	e014      	b.n	8011516 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80114ec:	f7f8 f948 	bl	8009780 <HAL_GetTick>
 80114f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80114f2:	e008      	b.n	8011506 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80114f4:	f7f8 f944 	bl	8009780 <HAL_GetTick>
 80114f8:	4602      	mov	r2, r0
 80114fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114fc:	1ad3      	subs	r3, r2, r3
 80114fe:	2b64      	cmp	r3, #100	@ 0x64
 8011500:	d901      	bls.n	8011506 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8011502:	2303      	movs	r3, #3
 8011504:	e342      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011506:	4b49      	ldr	r3, [pc, #292]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801150e:	2b00      	cmp	r3, #0
 8011510:	d1f0      	bne.n	80114f4 <HAL_RCC_OscConfig+0x10c>
 8011512:	e000      	b.n	8011516 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f003 0302 	and.w	r3, r3, #2
 801151e:	2b00      	cmp	r3, #0
 8011520:	f000 808c 	beq.w	801163c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011524:	4b41      	ldr	r3, [pc, #260]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011526:	691b      	ldr	r3, [r3, #16]
 8011528:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801152c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801152e:	4b3f      	ldr	r3, [pc, #252]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011532:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011534:	6a3b      	ldr	r3, [r7, #32]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d007      	beq.n	801154a <HAL_RCC_OscConfig+0x162>
 801153a:	6a3b      	ldr	r3, [r7, #32]
 801153c:	2b18      	cmp	r3, #24
 801153e:	d137      	bne.n	80115b0 <HAL_RCC_OscConfig+0x1c8>
 8011540:	69fb      	ldr	r3, [r7, #28]
 8011542:	f003 0303 	and.w	r3, r3, #3
 8011546:	2b00      	cmp	r3, #0
 8011548:	d132      	bne.n	80115b0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801154a:	4b38      	ldr	r3, [pc, #224]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	f003 0304 	and.w	r3, r3, #4
 8011552:	2b00      	cmp	r3, #0
 8011554:	d005      	beq.n	8011562 <HAL_RCC_OscConfig+0x17a>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d101      	bne.n	8011562 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801155e:	2301      	movs	r3, #1
 8011560:	e314      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011562:	4b32      	ldr	r3, [pc, #200]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f023 0219 	bic.w	r2, r3, #25
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	68db      	ldr	r3, [r3, #12]
 801156e:	492f      	ldr	r1, [pc, #188]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011570:	4313      	orrs	r3, r2
 8011572:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011574:	f7f8 f904 	bl	8009780 <HAL_GetTick>
 8011578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801157a:	e008      	b.n	801158e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801157c:	f7f8 f900 	bl	8009780 <HAL_GetTick>
 8011580:	4602      	mov	r2, r0
 8011582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011584:	1ad3      	subs	r3, r2, r3
 8011586:	2b02      	cmp	r3, #2
 8011588:	d901      	bls.n	801158e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801158a:	2303      	movs	r3, #3
 801158c:	e2fe      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801158e:	4b27      	ldr	r3, [pc, #156]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	f003 0304 	and.w	r3, r3, #4
 8011596:	2b00      	cmp	r3, #0
 8011598:	d0f0      	beq.n	801157c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801159a:	4b24      	ldr	r3, [pc, #144]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	691b      	ldr	r3, [r3, #16]
 80115a6:	061b      	lsls	r3, r3, #24
 80115a8:	4920      	ldr	r1, [pc, #128]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 80115aa:	4313      	orrs	r3, r2
 80115ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80115ae:	e045      	b.n	801163c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	68db      	ldr	r3, [r3, #12]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d026      	beq.n	8011606 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80115b8:	4b1c      	ldr	r3, [pc, #112]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	f023 0219 	bic.w	r2, r3, #25
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	4919      	ldr	r1, [pc, #100]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 80115c6:	4313      	orrs	r3, r2
 80115c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80115ca:	f7f8 f8d9 	bl	8009780 <HAL_GetTick>
 80115ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80115d0:	e008      	b.n	80115e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80115d2:	f7f8 f8d5 	bl	8009780 <HAL_GetTick>
 80115d6:	4602      	mov	r2, r0
 80115d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115da:	1ad3      	subs	r3, r2, r3
 80115dc:	2b02      	cmp	r3, #2
 80115de:	d901      	bls.n	80115e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80115e0:	2303      	movs	r3, #3
 80115e2:	e2d3      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80115e4:	4b11      	ldr	r3, [pc, #68]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	f003 0304 	and.w	r3, r3, #4
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d0f0      	beq.n	80115d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80115f0:	4b0e      	ldr	r3, [pc, #56]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	691b      	ldr	r3, [r3, #16]
 80115fc:	061b      	lsls	r3, r3, #24
 80115fe:	490b      	ldr	r1, [pc, #44]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011600:	4313      	orrs	r3, r2
 8011602:	604b      	str	r3, [r1, #4]
 8011604:	e01a      	b.n	801163c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011606:	4b09      	ldr	r3, [pc, #36]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	4a08      	ldr	r2, [pc, #32]	@ (801162c <HAL_RCC_OscConfig+0x244>)
 801160c:	f023 0301 	bic.w	r3, r3, #1
 8011610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011612:	f7f8 f8b5 	bl	8009780 <HAL_GetTick>
 8011616:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011618:	e00a      	b.n	8011630 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801161a:	f7f8 f8b1 	bl	8009780 <HAL_GetTick>
 801161e:	4602      	mov	r2, r0
 8011620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011622:	1ad3      	subs	r3, r2, r3
 8011624:	2b02      	cmp	r3, #2
 8011626:	d903      	bls.n	8011630 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8011628:	2303      	movs	r3, #3
 801162a:	e2af      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
 801162c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011630:	4b96      	ldr	r3, [pc, #600]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	f003 0304 	and.w	r3, r3, #4
 8011638:	2b00      	cmp	r3, #0
 801163a:	d1ee      	bne.n	801161a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	f003 0310 	and.w	r3, r3, #16
 8011644:	2b00      	cmp	r3, #0
 8011646:	d06a      	beq.n	801171e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011648:	4b90      	ldr	r3, [pc, #576]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 801164a:	691b      	ldr	r3, [r3, #16]
 801164c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011650:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011652:	4b8e      	ldr	r3, [pc, #568]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011656:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8011658:	69bb      	ldr	r3, [r7, #24]
 801165a:	2b08      	cmp	r3, #8
 801165c:	d007      	beq.n	801166e <HAL_RCC_OscConfig+0x286>
 801165e:	69bb      	ldr	r3, [r7, #24]
 8011660:	2b18      	cmp	r3, #24
 8011662:	d11b      	bne.n	801169c <HAL_RCC_OscConfig+0x2b4>
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	f003 0303 	and.w	r3, r3, #3
 801166a:	2b01      	cmp	r3, #1
 801166c:	d116      	bne.n	801169c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801166e:	4b87      	ldr	r3, [pc, #540]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011676:	2b00      	cmp	r3, #0
 8011678:	d005      	beq.n	8011686 <HAL_RCC_OscConfig+0x29e>
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	69db      	ldr	r3, [r3, #28]
 801167e:	2b80      	cmp	r3, #128	@ 0x80
 8011680:	d001      	beq.n	8011686 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8011682:	2301      	movs	r3, #1
 8011684:	e282      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011686:	4b81      	ldr	r3, [pc, #516]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	6a1b      	ldr	r3, [r3, #32]
 8011692:	061b      	lsls	r3, r3, #24
 8011694:	497d      	ldr	r1, [pc, #500]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011696:	4313      	orrs	r3, r2
 8011698:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801169a:	e040      	b.n	801171e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	69db      	ldr	r3, [r3, #28]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d023      	beq.n	80116ec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80116a4:	4b79      	ldr	r3, [pc, #484]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	4a78      	ldr	r2, [pc, #480]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 80116aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80116b0:	f7f8 f866 	bl	8009780 <HAL_GetTick>
 80116b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80116b6:	e008      	b.n	80116ca <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80116b8:	f7f8 f862 	bl	8009780 <HAL_GetTick>
 80116bc:	4602      	mov	r2, r0
 80116be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116c0:	1ad3      	subs	r3, r2, r3
 80116c2:	2b02      	cmp	r3, #2
 80116c4:	d901      	bls.n	80116ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80116c6:	2303      	movs	r3, #3
 80116c8:	e260      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80116ca:	4b70      	ldr	r3, [pc, #448]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d0f0      	beq.n	80116b8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80116d6:	4b6d      	ldr	r3, [pc, #436]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 80116d8:	68db      	ldr	r3, [r3, #12]
 80116da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	6a1b      	ldr	r3, [r3, #32]
 80116e2:	061b      	lsls	r3, r3, #24
 80116e4:	4969      	ldr	r1, [pc, #420]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 80116e6:	4313      	orrs	r3, r2
 80116e8:	60cb      	str	r3, [r1, #12]
 80116ea:	e018      	b.n	801171e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80116ec:	4b67      	ldr	r3, [pc, #412]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	4a66      	ldr	r2, [pc, #408]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 80116f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80116f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80116f8:	f7f8 f842 	bl	8009780 <HAL_GetTick>
 80116fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80116fe:	e008      	b.n	8011712 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8011700:	f7f8 f83e 	bl	8009780 <HAL_GetTick>
 8011704:	4602      	mov	r2, r0
 8011706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011708:	1ad3      	subs	r3, r2, r3
 801170a:	2b02      	cmp	r3, #2
 801170c:	d901      	bls.n	8011712 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801170e:	2303      	movs	r3, #3
 8011710:	e23c      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011712:	4b5e      	ldr	r3, [pc, #376]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801171a:	2b00      	cmp	r3, #0
 801171c:	d1f0      	bne.n	8011700 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	f003 0308 	and.w	r3, r3, #8
 8011726:	2b00      	cmp	r3, #0
 8011728:	d036      	beq.n	8011798 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	695b      	ldr	r3, [r3, #20]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d019      	beq.n	8011766 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011732:	4b56      	ldr	r3, [pc, #344]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011736:	4a55      	ldr	r2, [pc, #340]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011738:	f043 0301 	orr.w	r3, r3, #1
 801173c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801173e:	f7f8 f81f 	bl	8009780 <HAL_GetTick>
 8011742:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011744:	e008      	b.n	8011758 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011746:	f7f8 f81b 	bl	8009780 <HAL_GetTick>
 801174a:	4602      	mov	r2, r0
 801174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801174e:	1ad3      	subs	r3, r2, r3
 8011750:	2b02      	cmp	r3, #2
 8011752:	d901      	bls.n	8011758 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8011754:	2303      	movs	r3, #3
 8011756:	e219      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011758:	4b4c      	ldr	r3, [pc, #304]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 801175a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801175c:	f003 0302 	and.w	r3, r3, #2
 8011760:	2b00      	cmp	r3, #0
 8011762:	d0f0      	beq.n	8011746 <HAL_RCC_OscConfig+0x35e>
 8011764:	e018      	b.n	8011798 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011766:	4b49      	ldr	r3, [pc, #292]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801176a:	4a48      	ldr	r2, [pc, #288]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 801176c:	f023 0301 	bic.w	r3, r3, #1
 8011770:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011772:	f7f8 f805 	bl	8009780 <HAL_GetTick>
 8011776:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011778:	e008      	b.n	801178c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801177a:	f7f8 f801 	bl	8009780 <HAL_GetTick>
 801177e:	4602      	mov	r2, r0
 8011780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011782:	1ad3      	subs	r3, r2, r3
 8011784:	2b02      	cmp	r3, #2
 8011786:	d901      	bls.n	801178c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8011788:	2303      	movs	r3, #3
 801178a:	e1ff      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801178c:	4b3f      	ldr	r3, [pc, #252]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 801178e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011790:	f003 0302 	and.w	r3, r3, #2
 8011794:	2b00      	cmp	r3, #0
 8011796:	d1f0      	bne.n	801177a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	f003 0320 	and.w	r3, r3, #32
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d036      	beq.n	8011812 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	699b      	ldr	r3, [r3, #24]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d019      	beq.n	80117e0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80117ac:	4b37      	ldr	r3, [pc, #220]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	4a36      	ldr	r2, [pc, #216]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 80117b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80117b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80117b8:	f7f7 ffe2 	bl	8009780 <HAL_GetTick>
 80117bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80117be:	e008      	b.n	80117d2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80117c0:	f7f7 ffde 	bl	8009780 <HAL_GetTick>
 80117c4:	4602      	mov	r2, r0
 80117c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c8:	1ad3      	subs	r3, r2, r3
 80117ca:	2b02      	cmp	r3, #2
 80117cc:	d901      	bls.n	80117d2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80117ce:	2303      	movs	r3, #3
 80117d0:	e1dc      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80117d2:	4b2e      	ldr	r3, [pc, #184]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d0f0      	beq.n	80117c0 <HAL_RCC_OscConfig+0x3d8>
 80117de:	e018      	b.n	8011812 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80117e0:	4b2a      	ldr	r3, [pc, #168]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	4a29      	ldr	r2, [pc, #164]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 80117e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80117ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80117ec:	f7f7 ffc8 	bl	8009780 <HAL_GetTick>
 80117f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80117f2:	e008      	b.n	8011806 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80117f4:	f7f7 ffc4 	bl	8009780 <HAL_GetTick>
 80117f8:	4602      	mov	r2, r0
 80117fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117fc:	1ad3      	subs	r3, r2, r3
 80117fe:	2b02      	cmp	r3, #2
 8011800:	d901      	bls.n	8011806 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8011802:	2303      	movs	r3, #3
 8011804:	e1c2      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011806:	4b21      	ldr	r3, [pc, #132]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801180e:	2b00      	cmp	r3, #0
 8011810:	d1f0      	bne.n	80117f4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	f003 0304 	and.w	r3, r3, #4
 801181a:	2b00      	cmp	r3, #0
 801181c:	f000 8086 	beq.w	801192c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011820:	4b1b      	ldr	r3, [pc, #108]	@ (8011890 <HAL_RCC_OscConfig+0x4a8>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	4a1a      	ldr	r2, [pc, #104]	@ (8011890 <HAL_RCC_OscConfig+0x4a8>)
 8011826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801182a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801182c:	f7f7 ffa8 	bl	8009780 <HAL_GetTick>
 8011830:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011832:	e008      	b.n	8011846 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011834:	f7f7 ffa4 	bl	8009780 <HAL_GetTick>
 8011838:	4602      	mov	r2, r0
 801183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	2b64      	cmp	r3, #100	@ 0x64
 8011840:	d901      	bls.n	8011846 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8011842:	2303      	movs	r3, #3
 8011844:	e1a2      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011846:	4b12      	ldr	r3, [pc, #72]	@ (8011890 <HAL_RCC_OscConfig+0x4a8>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801184e:	2b00      	cmp	r3, #0
 8011850:	d0f0      	beq.n	8011834 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	689b      	ldr	r3, [r3, #8]
 8011856:	2b01      	cmp	r3, #1
 8011858:	d106      	bne.n	8011868 <HAL_RCC_OscConfig+0x480>
 801185a:	4b0c      	ldr	r3, [pc, #48]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 801185c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801185e:	4a0b      	ldr	r2, [pc, #44]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011860:	f043 0301 	orr.w	r3, r3, #1
 8011864:	6713      	str	r3, [r2, #112]	@ 0x70
 8011866:	e032      	b.n	80118ce <HAL_RCC_OscConfig+0x4e6>
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d111      	bne.n	8011894 <HAL_RCC_OscConfig+0x4ac>
 8011870:	4b06      	ldr	r3, [pc, #24]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011874:	4a05      	ldr	r2, [pc, #20]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011876:	f023 0301 	bic.w	r3, r3, #1
 801187a:	6713      	str	r3, [r2, #112]	@ 0x70
 801187c:	4b03      	ldr	r3, [pc, #12]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 801187e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011880:	4a02      	ldr	r2, [pc, #8]	@ (801188c <HAL_RCC_OscConfig+0x4a4>)
 8011882:	f023 0304 	bic.w	r3, r3, #4
 8011886:	6713      	str	r3, [r2, #112]	@ 0x70
 8011888:	e021      	b.n	80118ce <HAL_RCC_OscConfig+0x4e6>
 801188a:	bf00      	nop
 801188c:	58024400 	.word	0x58024400
 8011890:	58024800 	.word	0x58024800
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	689b      	ldr	r3, [r3, #8]
 8011898:	2b05      	cmp	r3, #5
 801189a:	d10c      	bne.n	80118b6 <HAL_RCC_OscConfig+0x4ce>
 801189c:	4b83      	ldr	r3, [pc, #524]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 801189e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118a0:	4a82      	ldr	r2, [pc, #520]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80118a2:	f043 0304 	orr.w	r3, r3, #4
 80118a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80118a8:	4b80      	ldr	r3, [pc, #512]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80118aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118ac:	4a7f      	ldr	r2, [pc, #508]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80118ae:	f043 0301 	orr.w	r3, r3, #1
 80118b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80118b4:	e00b      	b.n	80118ce <HAL_RCC_OscConfig+0x4e6>
 80118b6:	4b7d      	ldr	r3, [pc, #500]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80118b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118ba:	4a7c      	ldr	r2, [pc, #496]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80118bc:	f023 0301 	bic.w	r3, r3, #1
 80118c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80118c2:	4b7a      	ldr	r3, [pc, #488]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80118c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118c6:	4a79      	ldr	r2, [pc, #484]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80118c8:	f023 0304 	bic.w	r3, r3, #4
 80118cc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	689b      	ldr	r3, [r3, #8]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d015      	beq.n	8011902 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80118d6:	f7f7 ff53 	bl	8009780 <HAL_GetTick>
 80118da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80118dc:	e00a      	b.n	80118f4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80118de:	f7f7 ff4f 	bl	8009780 <HAL_GetTick>
 80118e2:	4602      	mov	r2, r0
 80118e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118e6:	1ad3      	subs	r3, r2, r3
 80118e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d901      	bls.n	80118f4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80118f0:	2303      	movs	r3, #3
 80118f2:	e14b      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80118f4:	4b6d      	ldr	r3, [pc, #436]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80118f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118f8:	f003 0302 	and.w	r3, r3, #2
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d0ee      	beq.n	80118de <HAL_RCC_OscConfig+0x4f6>
 8011900:	e014      	b.n	801192c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011902:	f7f7 ff3d 	bl	8009780 <HAL_GetTick>
 8011906:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011908:	e00a      	b.n	8011920 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801190a:	f7f7 ff39 	bl	8009780 <HAL_GetTick>
 801190e:	4602      	mov	r2, r0
 8011910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011912:	1ad3      	subs	r3, r2, r3
 8011914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011918:	4293      	cmp	r3, r2
 801191a:	d901      	bls.n	8011920 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 801191c:	2303      	movs	r3, #3
 801191e:	e135      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011920:	4b62      	ldr	r3, [pc, #392]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011924:	f003 0302 	and.w	r3, r3, #2
 8011928:	2b00      	cmp	r3, #0
 801192a:	d1ee      	bne.n	801190a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011930:	2b00      	cmp	r3, #0
 8011932:	f000 812a 	beq.w	8011b8a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8011936:	4b5d      	ldr	r3, [pc, #372]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011938:	691b      	ldr	r3, [r3, #16]
 801193a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801193e:	2b18      	cmp	r3, #24
 8011940:	f000 80ba 	beq.w	8011ab8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011948:	2b02      	cmp	r3, #2
 801194a:	f040 8095 	bne.w	8011a78 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801194e:	4b57      	ldr	r3, [pc, #348]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	4a56      	ldr	r2, [pc, #344]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011954:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801195a:	f7f7 ff11 	bl	8009780 <HAL_GetTick>
 801195e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011960:	e008      	b.n	8011974 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011962:	f7f7 ff0d 	bl	8009780 <HAL_GetTick>
 8011966:	4602      	mov	r2, r0
 8011968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801196a:	1ad3      	subs	r3, r2, r3
 801196c:	2b02      	cmp	r3, #2
 801196e:	d901      	bls.n	8011974 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8011970:	2303      	movs	r3, #3
 8011972:	e10b      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011974:	4b4d      	ldr	r3, [pc, #308]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801197c:	2b00      	cmp	r3, #0
 801197e:	d1f0      	bne.n	8011962 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011980:	4b4a      	ldr	r3, [pc, #296]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011982:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011984:	4b4a      	ldr	r3, [pc, #296]	@ (8011ab0 <HAL_RCC_OscConfig+0x6c8>)
 8011986:	4013      	ands	r3, r2
 8011988:	687a      	ldr	r2, [r7, #4]
 801198a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801198c:	687a      	ldr	r2, [r7, #4]
 801198e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011990:	0112      	lsls	r2, r2, #4
 8011992:	430a      	orrs	r2, r1
 8011994:	4945      	ldr	r1, [pc, #276]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011996:	4313      	orrs	r3, r2
 8011998:	628b      	str	r3, [r1, #40]	@ 0x28
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801199e:	3b01      	subs	r3, #1
 80119a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80119a8:	3b01      	subs	r3, #1
 80119aa:	025b      	lsls	r3, r3, #9
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	431a      	orrs	r2, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119b4:	3b01      	subs	r3, #1
 80119b6:	041b      	lsls	r3, r3, #16
 80119b8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80119bc:	431a      	orrs	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119c2:	3b01      	subs	r3, #1
 80119c4:	061b      	lsls	r3, r3, #24
 80119c6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80119ca:	4938      	ldr	r1, [pc, #224]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80119cc:	4313      	orrs	r3, r2
 80119ce:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80119d0:	4b36      	ldr	r3, [pc, #216]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80119d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119d4:	4a35      	ldr	r2, [pc, #212]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80119d6:	f023 0301 	bic.w	r3, r3, #1
 80119da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80119dc:	4b33      	ldr	r3, [pc, #204]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80119de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80119e0:	4b34      	ldr	r3, [pc, #208]	@ (8011ab4 <HAL_RCC_OscConfig+0x6cc>)
 80119e2:	4013      	ands	r3, r2
 80119e4:	687a      	ldr	r2, [r7, #4]
 80119e6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80119e8:	00d2      	lsls	r2, r2, #3
 80119ea:	4930      	ldr	r1, [pc, #192]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80119ec:	4313      	orrs	r3, r2
 80119ee:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80119f0:	4b2e      	ldr	r3, [pc, #184]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80119f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119f4:	f023 020c 	bic.w	r2, r3, #12
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119fc:	492b      	ldr	r1, [pc, #172]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 80119fe:	4313      	orrs	r3, r2
 8011a00:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8011a02:	4b2a      	ldr	r3, [pc, #168]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a06:	f023 0202 	bic.w	r2, r3, #2
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a0e:	4927      	ldr	r1, [pc, #156]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a10:	4313      	orrs	r3, r2
 8011a12:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011a14:	4b25      	ldr	r3, [pc, #148]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a18:	4a24      	ldr	r2, [pc, #144]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011a20:	4b22      	ldr	r3, [pc, #136]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a24:	4a21      	ldr	r2, [pc, #132]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a30:	4a1e      	ldr	r2, [pc, #120]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8011a38:	4b1c      	ldr	r3, [pc, #112]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a3e:	f043 0301 	orr.w	r3, r3, #1
 8011a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011a44:	4b19      	ldr	r3, [pc, #100]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	4a18      	ldr	r2, [pc, #96]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011a50:	f7f7 fe96 	bl	8009780 <HAL_GetTick>
 8011a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011a56:	e008      	b.n	8011a6a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011a58:	f7f7 fe92 	bl	8009780 <HAL_GetTick>
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a60:	1ad3      	subs	r3, r2, r3
 8011a62:	2b02      	cmp	r3, #2
 8011a64:	d901      	bls.n	8011a6a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8011a66:	2303      	movs	r3, #3
 8011a68:	e090      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011a6a:	4b10      	ldr	r3, [pc, #64]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d0f0      	beq.n	8011a58 <HAL_RCC_OscConfig+0x670>
 8011a76:	e088      	b.n	8011b8a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011a78:	4b0c      	ldr	r3, [pc, #48]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011a84:	f7f7 fe7c 	bl	8009780 <HAL_GetTick>
 8011a88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011a8a:	e008      	b.n	8011a9e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011a8c:	f7f7 fe78 	bl	8009780 <HAL_GetTick>
 8011a90:	4602      	mov	r2, r0
 8011a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a94:	1ad3      	subs	r3, r2, r3
 8011a96:	2b02      	cmp	r3, #2
 8011a98:	d901      	bls.n	8011a9e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8011a9a:	2303      	movs	r3, #3
 8011a9c:	e076      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011a9e:	4b03      	ldr	r3, [pc, #12]	@ (8011aac <HAL_RCC_OscConfig+0x6c4>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d1f0      	bne.n	8011a8c <HAL_RCC_OscConfig+0x6a4>
 8011aaa:	e06e      	b.n	8011b8a <HAL_RCC_OscConfig+0x7a2>
 8011aac:	58024400 	.word	0x58024400
 8011ab0:	fffffc0c 	.word	0xfffffc0c
 8011ab4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8011ab8:	4b36      	ldr	r3, [pc, #216]	@ (8011b94 <HAL_RCC_OscConfig+0x7ac>)
 8011aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011abc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8011abe:	4b35      	ldr	r3, [pc, #212]	@ (8011b94 <HAL_RCC_OscConfig+0x7ac>)
 8011ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ac2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d031      	beq.n	8011b30 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	f003 0203 	and.w	r2, r3, #3
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d12a      	bne.n	8011b30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011ada:	693b      	ldr	r3, [r7, #16]
 8011adc:	091b      	lsrs	r3, r3, #4
 8011ade:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d122      	bne.n	8011b30 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011af4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d11a      	bne.n	8011b30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	0a5b      	lsrs	r3, r3, #9
 8011afe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d111      	bne.n	8011b30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	0c1b      	lsrs	r3, r3, #16
 8011b10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d108      	bne.n	8011b30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	0e1b      	lsrs	r3, r3, #24
 8011b22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d001      	beq.n	8011b34 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8011b30:	2301      	movs	r3, #1
 8011b32:	e02b      	b.n	8011b8c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011b34:	4b17      	ldr	r3, [pc, #92]	@ (8011b94 <HAL_RCC_OscConfig+0x7ac>)
 8011b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b38:	08db      	lsrs	r3, r3, #3
 8011b3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b3e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b44:	693a      	ldr	r2, [r7, #16]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d01f      	beq.n	8011b8a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8011b4a:	4b12      	ldr	r3, [pc, #72]	@ (8011b94 <HAL_RCC_OscConfig+0x7ac>)
 8011b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b4e:	4a11      	ldr	r2, [pc, #68]	@ (8011b94 <HAL_RCC_OscConfig+0x7ac>)
 8011b50:	f023 0301 	bic.w	r3, r3, #1
 8011b54:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011b56:	f7f7 fe13 	bl	8009780 <HAL_GetTick>
 8011b5a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8011b5c:	bf00      	nop
 8011b5e:	f7f7 fe0f 	bl	8009780 <HAL_GetTick>
 8011b62:	4602      	mov	r2, r0
 8011b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b66:	4293      	cmp	r3, r2
 8011b68:	d0f9      	beq.n	8011b5e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8011b94 <HAL_RCC_OscConfig+0x7ac>)
 8011b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8011b98 <HAL_RCC_OscConfig+0x7b0>)
 8011b70:	4013      	ands	r3, r2
 8011b72:	687a      	ldr	r2, [r7, #4]
 8011b74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011b76:	00d2      	lsls	r2, r2, #3
 8011b78:	4906      	ldr	r1, [pc, #24]	@ (8011b94 <HAL_RCC_OscConfig+0x7ac>)
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8011b7e:	4b05      	ldr	r3, [pc, #20]	@ (8011b94 <HAL_RCC_OscConfig+0x7ac>)
 8011b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b82:	4a04      	ldr	r2, [pc, #16]	@ (8011b94 <HAL_RCC_OscConfig+0x7ac>)
 8011b84:	f043 0301 	orr.w	r3, r3, #1
 8011b88:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8011b8a:	2300      	movs	r3, #0
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	3730      	adds	r7, #48	@ 0x30
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	58024400 	.word	0x58024400
 8011b98:	ffff0007 	.word	0xffff0007

08011b9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b086      	sub	sp, #24
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d101      	bne.n	8011bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011bac:	2301      	movs	r3, #1
 8011bae:	e19c      	b.n	8011eea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011bb0:	4b8a      	ldr	r3, [pc, #552]	@ (8011ddc <HAL_RCC_ClockConfig+0x240>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	f003 030f 	and.w	r3, r3, #15
 8011bb8:	683a      	ldr	r2, [r7, #0]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d910      	bls.n	8011be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011bbe:	4b87      	ldr	r3, [pc, #540]	@ (8011ddc <HAL_RCC_ClockConfig+0x240>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f023 020f 	bic.w	r2, r3, #15
 8011bc6:	4985      	ldr	r1, [pc, #532]	@ (8011ddc <HAL_RCC_ClockConfig+0x240>)
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	4313      	orrs	r3, r2
 8011bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011bce:	4b83      	ldr	r3, [pc, #524]	@ (8011ddc <HAL_RCC_ClockConfig+0x240>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	f003 030f 	and.w	r3, r3, #15
 8011bd6:	683a      	ldr	r2, [r7, #0]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d001      	beq.n	8011be0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011bdc:	2301      	movs	r3, #1
 8011bde:	e184      	b.n	8011eea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	f003 0304 	and.w	r3, r3, #4
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d010      	beq.n	8011c0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	691a      	ldr	r2, [r3, #16]
 8011bf0:	4b7b      	ldr	r3, [pc, #492]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011bf2:	699b      	ldr	r3, [r3, #24]
 8011bf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d908      	bls.n	8011c0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011bfc:	4b78      	ldr	r3, [pc, #480]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011bfe:	699b      	ldr	r3, [r3, #24]
 8011c00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	691b      	ldr	r3, [r3, #16]
 8011c08:	4975      	ldr	r1, [pc, #468]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011c0a:	4313      	orrs	r3, r2
 8011c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	f003 0308 	and.w	r3, r3, #8
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d010      	beq.n	8011c3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	695a      	ldr	r2, [r3, #20]
 8011c1e:	4b70      	ldr	r3, [pc, #448]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011c20:	69db      	ldr	r3, [r3, #28]
 8011c22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d908      	bls.n	8011c3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011c2c:	69db      	ldr	r3, [r3, #28]
 8011c2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	695b      	ldr	r3, [r3, #20]
 8011c36:	496a      	ldr	r1, [pc, #424]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011c38:	4313      	orrs	r3, r2
 8011c3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f003 0310 	and.w	r3, r3, #16
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d010      	beq.n	8011c6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	699a      	ldr	r2, [r3, #24]
 8011c4c:	4b64      	ldr	r3, [pc, #400]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011c4e:	69db      	ldr	r3, [r3, #28]
 8011c50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d908      	bls.n	8011c6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011c58:	4b61      	ldr	r3, [pc, #388]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011c5a:	69db      	ldr	r3, [r3, #28]
 8011c5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	699b      	ldr	r3, [r3, #24]
 8011c64:	495e      	ldr	r1, [pc, #376]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011c66:	4313      	orrs	r3, r2
 8011c68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	f003 0320 	and.w	r3, r3, #32
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d010      	beq.n	8011c98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	69da      	ldr	r2, [r3, #28]
 8011c7a:	4b59      	ldr	r3, [pc, #356]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011c7c:	6a1b      	ldr	r3, [r3, #32]
 8011c7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d908      	bls.n	8011c98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011c86:	4b56      	ldr	r3, [pc, #344]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011c88:	6a1b      	ldr	r3, [r3, #32]
 8011c8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	69db      	ldr	r3, [r3, #28]
 8011c92:	4953      	ldr	r1, [pc, #332]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011c94:	4313      	orrs	r3, r2
 8011c96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	f003 0302 	and.w	r3, r3, #2
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d010      	beq.n	8011cc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	68da      	ldr	r2, [r3, #12]
 8011ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011caa:	699b      	ldr	r3, [r3, #24]
 8011cac:	f003 030f 	and.w	r3, r3, #15
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d908      	bls.n	8011cc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011cb4:	4b4a      	ldr	r3, [pc, #296]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011cb6:	699b      	ldr	r3, [r3, #24]
 8011cb8:	f023 020f 	bic.w	r2, r3, #15
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	68db      	ldr	r3, [r3, #12]
 8011cc0:	4947      	ldr	r1, [pc, #284]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011cc2:	4313      	orrs	r3, r2
 8011cc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	f003 0301 	and.w	r3, r3, #1
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d055      	beq.n	8011d7e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011cd2:	4b43      	ldr	r3, [pc, #268]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011cd4:	699b      	ldr	r3, [r3, #24]
 8011cd6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	689b      	ldr	r3, [r3, #8]
 8011cde:	4940      	ldr	r1, [pc, #256]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011ce0:	4313      	orrs	r3, r2
 8011ce2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	2b02      	cmp	r3, #2
 8011cea:	d107      	bne.n	8011cfc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011cec:	4b3c      	ldr	r3, [pc, #240]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d121      	bne.n	8011d3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	e0f6      	b.n	8011eea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	685b      	ldr	r3, [r3, #4]
 8011d00:	2b03      	cmp	r3, #3
 8011d02:	d107      	bne.n	8011d14 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011d04:	4b36      	ldr	r3, [pc, #216]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d115      	bne.n	8011d3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011d10:	2301      	movs	r3, #1
 8011d12:	e0ea      	b.n	8011eea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	d107      	bne.n	8011d2c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011d1c:	4b30      	ldr	r3, [pc, #192]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d109      	bne.n	8011d3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011d28:	2301      	movs	r3, #1
 8011d2a:	e0de      	b.n	8011eea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f003 0304 	and.w	r3, r3, #4
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d101      	bne.n	8011d3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011d38:	2301      	movs	r3, #1
 8011d3a:	e0d6      	b.n	8011eea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011d3c:	4b28      	ldr	r3, [pc, #160]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011d3e:	691b      	ldr	r3, [r3, #16]
 8011d40:	f023 0207 	bic.w	r2, r3, #7
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	4925      	ldr	r1, [pc, #148]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011d4a:	4313      	orrs	r3, r2
 8011d4c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011d4e:	f7f7 fd17 	bl	8009780 <HAL_GetTick>
 8011d52:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011d54:	e00a      	b.n	8011d6c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d56:	f7f7 fd13 	bl	8009780 <HAL_GetTick>
 8011d5a:	4602      	mov	r2, r0
 8011d5c:	697b      	ldr	r3, [r7, #20]
 8011d5e:	1ad3      	subs	r3, r2, r3
 8011d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011d64:	4293      	cmp	r3, r2
 8011d66:	d901      	bls.n	8011d6c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011d68:	2303      	movs	r3, #3
 8011d6a:	e0be      	b.n	8011eea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011d6e:	691b      	ldr	r3, [r3, #16]
 8011d70:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	685b      	ldr	r3, [r3, #4]
 8011d78:	00db      	lsls	r3, r3, #3
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d1eb      	bne.n	8011d56 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	f003 0302 	and.w	r3, r3, #2
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d010      	beq.n	8011dac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	68da      	ldr	r2, [r3, #12]
 8011d8e:	4b14      	ldr	r3, [pc, #80]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011d90:	699b      	ldr	r3, [r3, #24]
 8011d92:	f003 030f 	and.w	r3, r3, #15
 8011d96:	429a      	cmp	r2, r3
 8011d98:	d208      	bcs.n	8011dac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011d9a:	4b11      	ldr	r3, [pc, #68]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011d9c:	699b      	ldr	r3, [r3, #24]
 8011d9e:	f023 020f 	bic.w	r2, r3, #15
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	68db      	ldr	r3, [r3, #12]
 8011da6:	490e      	ldr	r1, [pc, #56]	@ (8011de0 <HAL_RCC_ClockConfig+0x244>)
 8011da8:	4313      	orrs	r3, r2
 8011daa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011dac:	4b0b      	ldr	r3, [pc, #44]	@ (8011ddc <HAL_RCC_ClockConfig+0x240>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f003 030f 	and.w	r3, r3, #15
 8011db4:	683a      	ldr	r2, [r7, #0]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d214      	bcs.n	8011de4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011dba:	4b08      	ldr	r3, [pc, #32]	@ (8011ddc <HAL_RCC_ClockConfig+0x240>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f023 020f 	bic.w	r2, r3, #15
 8011dc2:	4906      	ldr	r1, [pc, #24]	@ (8011ddc <HAL_RCC_ClockConfig+0x240>)
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	4313      	orrs	r3, r2
 8011dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011dca:	4b04      	ldr	r3, [pc, #16]	@ (8011ddc <HAL_RCC_ClockConfig+0x240>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	f003 030f 	and.w	r3, r3, #15
 8011dd2:	683a      	ldr	r2, [r7, #0]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d005      	beq.n	8011de4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011dd8:	2301      	movs	r3, #1
 8011dda:	e086      	b.n	8011eea <HAL_RCC_ClockConfig+0x34e>
 8011ddc:	52002000 	.word	0x52002000
 8011de0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	f003 0304 	and.w	r3, r3, #4
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d010      	beq.n	8011e12 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	691a      	ldr	r2, [r3, #16]
 8011df4:	4b3f      	ldr	r3, [pc, #252]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011df6:	699b      	ldr	r3, [r3, #24]
 8011df8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	d208      	bcs.n	8011e12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011e00:	4b3c      	ldr	r3, [pc, #240]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011e02:	699b      	ldr	r3, [r3, #24]
 8011e04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	691b      	ldr	r3, [r3, #16]
 8011e0c:	4939      	ldr	r1, [pc, #228]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011e0e:	4313      	orrs	r3, r2
 8011e10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	f003 0308 	and.w	r3, r3, #8
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d010      	beq.n	8011e40 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	695a      	ldr	r2, [r3, #20]
 8011e22:	4b34      	ldr	r3, [pc, #208]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011e24:	69db      	ldr	r3, [r3, #28]
 8011e26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d208      	bcs.n	8011e40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011e2e:	4b31      	ldr	r3, [pc, #196]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011e30:	69db      	ldr	r3, [r3, #28]
 8011e32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	695b      	ldr	r3, [r3, #20]
 8011e3a:	492e      	ldr	r1, [pc, #184]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011e3c:	4313      	orrs	r3, r2
 8011e3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f003 0310 	and.w	r3, r3, #16
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d010      	beq.n	8011e6e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	699a      	ldr	r2, [r3, #24]
 8011e50:	4b28      	ldr	r3, [pc, #160]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011e52:	69db      	ldr	r3, [r3, #28]
 8011e54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d208      	bcs.n	8011e6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011e5c:	4b25      	ldr	r3, [pc, #148]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011e5e:	69db      	ldr	r3, [r3, #28]
 8011e60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	699b      	ldr	r3, [r3, #24]
 8011e68:	4922      	ldr	r1, [pc, #136]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011e6a:	4313      	orrs	r3, r2
 8011e6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	f003 0320 	and.w	r3, r3, #32
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d010      	beq.n	8011e9c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	69da      	ldr	r2, [r3, #28]
 8011e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011e80:	6a1b      	ldr	r3, [r3, #32]
 8011e82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d208      	bcs.n	8011e9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011e8c:	6a1b      	ldr	r3, [r3, #32]
 8011e8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	69db      	ldr	r3, [r3, #28]
 8011e96:	4917      	ldr	r1, [pc, #92]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011e98:	4313      	orrs	r3, r2
 8011e9a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011e9c:	f000 f834 	bl	8011f08 <HAL_RCC_GetSysClockFreq>
 8011ea0:	4602      	mov	r2, r0
 8011ea2:	4b14      	ldr	r3, [pc, #80]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011ea4:	699b      	ldr	r3, [r3, #24]
 8011ea6:	0a1b      	lsrs	r3, r3, #8
 8011ea8:	f003 030f 	and.w	r3, r3, #15
 8011eac:	4912      	ldr	r1, [pc, #72]	@ (8011ef8 <HAL_RCC_ClockConfig+0x35c>)
 8011eae:	5ccb      	ldrb	r3, [r1, r3]
 8011eb0:	f003 031f 	and.w	r3, r3, #31
 8011eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8011eb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011eba:	4b0e      	ldr	r3, [pc, #56]	@ (8011ef4 <HAL_RCC_ClockConfig+0x358>)
 8011ebc:	699b      	ldr	r3, [r3, #24]
 8011ebe:	f003 030f 	and.w	r3, r3, #15
 8011ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8011ef8 <HAL_RCC_ClockConfig+0x35c>)
 8011ec4:	5cd3      	ldrb	r3, [r2, r3]
 8011ec6:	f003 031f 	and.w	r3, r3, #31
 8011eca:	693a      	ldr	r2, [r7, #16]
 8011ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8011ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8011efc <HAL_RCC_ClockConfig+0x360>)
 8011ed2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8011f00 <HAL_RCC_ClockConfig+0x364>)
 8011ed6:	693b      	ldr	r3, [r7, #16]
 8011ed8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8011eda:	4b0a      	ldr	r3, [pc, #40]	@ (8011f04 <HAL_RCC_ClockConfig+0x368>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7f7 fc04 	bl	80096ec <HAL_InitTick>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3718      	adds	r7, #24
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}
 8011ef2:	bf00      	nop
 8011ef4:	58024400 	.word	0x58024400
 8011ef8:	0801f29c 	.word	0x0801f29c
 8011efc:	24000008 	.word	0x24000008
 8011f00:	24000004 	.word	0x24000004
 8011f04:	2400000c 	.word	0x2400000c

08011f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b089      	sub	sp, #36	@ 0x24
 8011f0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011f0e:	4bb3      	ldr	r3, [pc, #716]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f10:	691b      	ldr	r3, [r3, #16]
 8011f12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011f16:	2b18      	cmp	r3, #24
 8011f18:	f200 8155 	bhi.w	80121c6 <HAL_RCC_GetSysClockFreq+0x2be>
 8011f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8011f24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8011f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f22:	bf00      	nop
 8011f24:	08011f89 	.word	0x08011f89
 8011f28:	080121c7 	.word	0x080121c7
 8011f2c:	080121c7 	.word	0x080121c7
 8011f30:	080121c7 	.word	0x080121c7
 8011f34:	080121c7 	.word	0x080121c7
 8011f38:	080121c7 	.word	0x080121c7
 8011f3c:	080121c7 	.word	0x080121c7
 8011f40:	080121c7 	.word	0x080121c7
 8011f44:	08011faf 	.word	0x08011faf
 8011f48:	080121c7 	.word	0x080121c7
 8011f4c:	080121c7 	.word	0x080121c7
 8011f50:	080121c7 	.word	0x080121c7
 8011f54:	080121c7 	.word	0x080121c7
 8011f58:	080121c7 	.word	0x080121c7
 8011f5c:	080121c7 	.word	0x080121c7
 8011f60:	080121c7 	.word	0x080121c7
 8011f64:	08011fb5 	.word	0x08011fb5
 8011f68:	080121c7 	.word	0x080121c7
 8011f6c:	080121c7 	.word	0x080121c7
 8011f70:	080121c7 	.word	0x080121c7
 8011f74:	080121c7 	.word	0x080121c7
 8011f78:	080121c7 	.word	0x080121c7
 8011f7c:	080121c7 	.word	0x080121c7
 8011f80:	080121c7 	.word	0x080121c7
 8011f84:	08011fbb 	.word	0x08011fbb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011f88:	4b94      	ldr	r3, [pc, #592]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f003 0320 	and.w	r3, r3, #32
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d009      	beq.n	8011fa8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011f94:	4b91      	ldr	r3, [pc, #580]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	08db      	lsrs	r3, r3, #3
 8011f9a:	f003 0303 	and.w	r3, r3, #3
 8011f9e:	4a90      	ldr	r2, [pc, #576]	@ (80121e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8011fa4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8011fa6:	e111      	b.n	80121cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011fa8:	4b8d      	ldr	r3, [pc, #564]	@ (80121e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011faa:	61bb      	str	r3, [r7, #24]
      break;
 8011fac:	e10e      	b.n	80121cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8011fae:	4b8d      	ldr	r3, [pc, #564]	@ (80121e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011fb0:	61bb      	str	r3, [r7, #24]
      break;
 8011fb2:	e10b      	b.n	80121cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8011fb4:	4b8c      	ldr	r3, [pc, #560]	@ (80121e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011fb6:	61bb      	str	r3, [r7, #24]
      break;
 8011fb8:	e108      	b.n	80121cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011fba:	4b88      	ldr	r3, [pc, #544]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fbe:	f003 0303 	and.w	r3, r3, #3
 8011fc2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011fc4:	4b85      	ldr	r3, [pc, #532]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fc8:	091b      	lsrs	r3, r3, #4
 8011fca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011fce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011fd0:	4b82      	ldr	r3, [pc, #520]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fd4:	f003 0301 	and.w	r3, r3, #1
 8011fd8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011fda:	4b80      	ldr	r3, [pc, #512]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fde:	08db      	lsrs	r3, r3, #3
 8011fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011fe4:	68fa      	ldr	r2, [r7, #12]
 8011fe6:	fb02 f303 	mul.w	r3, r2, r3
 8011fea:	ee07 3a90 	vmov	s15, r3
 8011fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ff2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	f000 80e1 	beq.w	80121c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	2b02      	cmp	r3, #2
 8012002:	f000 8083 	beq.w	801210c <HAL_RCC_GetSysClockFreq+0x204>
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	2b02      	cmp	r3, #2
 801200a:	f200 80a1 	bhi.w	8012150 <HAL_RCC_GetSysClockFreq+0x248>
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d003      	beq.n	801201c <HAL_RCC_GetSysClockFreq+0x114>
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	2b01      	cmp	r3, #1
 8012018:	d056      	beq.n	80120c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 801201a:	e099      	b.n	8012150 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801201c:	4b6f      	ldr	r3, [pc, #444]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	f003 0320 	and.w	r3, r3, #32
 8012024:	2b00      	cmp	r3, #0
 8012026:	d02d      	beq.n	8012084 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012028:	4b6c      	ldr	r3, [pc, #432]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	08db      	lsrs	r3, r3, #3
 801202e:	f003 0303 	and.w	r3, r3, #3
 8012032:	4a6b      	ldr	r2, [pc, #428]	@ (80121e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012034:	fa22 f303 	lsr.w	r3, r2, r3
 8012038:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	ee07 3a90 	vmov	s15, r3
 8012040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012044:	693b      	ldr	r3, [r7, #16]
 8012046:	ee07 3a90 	vmov	s15, r3
 801204a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801204e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012052:	4b62      	ldr	r3, [pc, #392]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801205a:	ee07 3a90 	vmov	s15, r3
 801205e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012062:	ed97 6a02 	vldr	s12, [r7, #8]
 8012066:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80121ec <HAL_RCC_GetSysClockFreq+0x2e4>
 801206a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801206e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801207a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801207e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8012082:	e087      	b.n	8012194 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012084:	693b      	ldr	r3, [r7, #16]
 8012086:	ee07 3a90 	vmov	s15, r3
 801208a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801208e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80121f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8012092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012096:	4b51      	ldr	r3, [pc, #324]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801209a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801209e:	ee07 3a90 	vmov	s15, r3
 80120a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80120a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80120aa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80121ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80120ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80120b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80120b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80120ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80120be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80120c6:	e065      	b.n	8012194 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	ee07 3a90 	vmov	s15, r3
 80120ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80120d2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80121f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80120d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80120da:	4b40      	ldr	r3, [pc, #256]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80120dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120e2:	ee07 3a90 	vmov	s15, r3
 80120e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80120ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80120ee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80121ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80120f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80120f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80120fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80120fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012106:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801210a:	e043      	b.n	8012194 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	ee07 3a90 	vmov	s15, r3
 8012112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012116:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80121f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 801211a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801211e:	4b2f      	ldr	r3, [pc, #188]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012126:	ee07 3a90 	vmov	s15, r3
 801212a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801212e:	ed97 6a02 	vldr	s12, [r7, #8]
 8012132:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80121ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8012136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801213a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801213e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012146:	ee67 7a27 	vmul.f32	s15, s14, s15
 801214a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801214e:	e021      	b.n	8012194 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	ee07 3a90 	vmov	s15, r3
 8012156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801215a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80121f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801215e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012162:	4b1e      	ldr	r3, [pc, #120]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801216a:	ee07 3a90 	vmov	s15, r3
 801216e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012172:	ed97 6a02 	vldr	s12, [r7, #8]
 8012176:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80121ec <HAL_RCC_GetSysClockFreq+0x2e4>
 801217a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801217e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801218a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801218e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8012192:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8012194:	4b11      	ldr	r3, [pc, #68]	@ (80121dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012198:	0a5b      	lsrs	r3, r3, #9
 801219a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801219e:	3301      	adds	r3, #1
 80121a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	ee07 3a90 	vmov	s15, r3
 80121a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80121ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80121b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80121b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80121b8:	ee17 3a90 	vmov	r3, s15
 80121bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80121be:	e005      	b.n	80121cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80121c0:	2300      	movs	r3, #0
 80121c2:	61bb      	str	r3, [r7, #24]
      break;
 80121c4:	e002      	b.n	80121cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80121c6:	4b07      	ldr	r3, [pc, #28]	@ (80121e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80121c8:	61bb      	str	r3, [r7, #24]
      break;
 80121ca:	bf00      	nop
  }

  return sysclockfreq;
 80121cc:	69bb      	ldr	r3, [r7, #24]
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3724      	adds	r7, #36	@ 0x24
 80121d2:	46bd      	mov	sp, r7
 80121d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop
 80121dc:	58024400 	.word	0x58024400
 80121e0:	03d09000 	.word	0x03d09000
 80121e4:	003d0900 	.word	0x003d0900
 80121e8:	016e3600 	.word	0x016e3600
 80121ec:	46000000 	.word	0x46000000
 80121f0:	4c742400 	.word	0x4c742400
 80121f4:	4a742400 	.word	0x4a742400
 80121f8:	4bb71b00 	.word	0x4bb71b00

080121fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012202:	f7ff fe81 	bl	8011f08 <HAL_RCC_GetSysClockFreq>
 8012206:	4602      	mov	r2, r0
 8012208:	4b10      	ldr	r3, [pc, #64]	@ (801224c <HAL_RCC_GetHCLKFreq+0x50>)
 801220a:	699b      	ldr	r3, [r3, #24]
 801220c:	0a1b      	lsrs	r3, r3, #8
 801220e:	f003 030f 	and.w	r3, r3, #15
 8012212:	490f      	ldr	r1, [pc, #60]	@ (8012250 <HAL_RCC_GetHCLKFreq+0x54>)
 8012214:	5ccb      	ldrb	r3, [r1, r3]
 8012216:	f003 031f 	and.w	r3, r3, #31
 801221a:	fa22 f303 	lsr.w	r3, r2, r3
 801221e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012220:	4b0a      	ldr	r3, [pc, #40]	@ (801224c <HAL_RCC_GetHCLKFreq+0x50>)
 8012222:	699b      	ldr	r3, [r3, #24]
 8012224:	f003 030f 	and.w	r3, r3, #15
 8012228:	4a09      	ldr	r2, [pc, #36]	@ (8012250 <HAL_RCC_GetHCLKFreq+0x54>)
 801222a:	5cd3      	ldrb	r3, [r2, r3]
 801222c:	f003 031f 	and.w	r3, r3, #31
 8012230:	687a      	ldr	r2, [r7, #4]
 8012232:	fa22 f303 	lsr.w	r3, r2, r3
 8012236:	4a07      	ldr	r2, [pc, #28]	@ (8012254 <HAL_RCC_GetHCLKFreq+0x58>)
 8012238:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801223a:	4a07      	ldr	r2, [pc, #28]	@ (8012258 <HAL_RCC_GetHCLKFreq+0x5c>)
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012240:	4b04      	ldr	r3, [pc, #16]	@ (8012254 <HAL_RCC_GetHCLKFreq+0x58>)
 8012242:	681b      	ldr	r3, [r3, #0]
}
 8012244:	4618      	mov	r0, r3
 8012246:	3708      	adds	r7, #8
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}
 801224c:	58024400 	.word	0x58024400
 8012250:	0801f29c 	.word	0x0801f29c
 8012254:	24000008 	.word	0x24000008
 8012258:	24000004 	.word	0x24000004

0801225c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8012260:	f7ff ffcc 	bl	80121fc <HAL_RCC_GetHCLKFreq>
 8012264:	4602      	mov	r2, r0
 8012266:	4b06      	ldr	r3, [pc, #24]	@ (8012280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012268:	69db      	ldr	r3, [r3, #28]
 801226a:	091b      	lsrs	r3, r3, #4
 801226c:	f003 0307 	and.w	r3, r3, #7
 8012270:	4904      	ldr	r1, [pc, #16]	@ (8012284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012272:	5ccb      	ldrb	r3, [r1, r3]
 8012274:	f003 031f 	and.w	r3, r3, #31
 8012278:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801227c:	4618      	mov	r0, r3
 801227e:	bd80      	pop	{r7, pc}
 8012280:	58024400 	.word	0x58024400
 8012284:	0801f29c 	.word	0x0801f29c

08012288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801228c:	f7ff ffb6 	bl	80121fc <HAL_RCC_GetHCLKFreq>
 8012290:	4602      	mov	r2, r0
 8012292:	4b06      	ldr	r3, [pc, #24]	@ (80122ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8012294:	69db      	ldr	r3, [r3, #28]
 8012296:	0a1b      	lsrs	r3, r3, #8
 8012298:	f003 0307 	and.w	r3, r3, #7
 801229c:	4904      	ldr	r1, [pc, #16]	@ (80122b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 801229e:	5ccb      	ldrb	r3, [r1, r3]
 80122a0:	f003 031f 	and.w	r3, r3, #31
 80122a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	58024400 	.word	0x58024400
 80122b0:	0801f29c 	.word	0x0801f29c

080122b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80122b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80122b8:	b0c6      	sub	sp, #280	@ 0x118
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80122c0:	2300      	movs	r3, #0
 80122c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80122c6:	2300      	movs	r3, #0
 80122c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80122cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80122d8:	2500      	movs	r5, #0
 80122da:	ea54 0305 	orrs.w	r3, r4, r5
 80122de:	d049      	beq.n	8012374 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80122e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80122e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80122ea:	d02f      	beq.n	801234c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80122ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80122f0:	d828      	bhi.n	8012344 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80122f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80122f6:	d01a      	beq.n	801232e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80122f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80122fc:	d822      	bhi.n	8012344 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d003      	beq.n	801230a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8012302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012306:	d007      	beq.n	8012318 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012308:	e01c      	b.n	8012344 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801230a:	4bab      	ldr	r3, [pc, #684]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801230e:	4aaa      	ldr	r2, [pc, #680]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012314:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012316:	e01a      	b.n	801234e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801231c:	3308      	adds	r3, #8
 801231e:	2102      	movs	r1, #2
 8012320:	4618      	mov	r0, r3
 8012322:	f002 fa49 	bl	80147b8 <RCCEx_PLL2_Config>
 8012326:	4603      	mov	r3, r0
 8012328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801232c:	e00f      	b.n	801234e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801232e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012332:	3328      	adds	r3, #40	@ 0x28
 8012334:	2102      	movs	r1, #2
 8012336:	4618      	mov	r0, r3
 8012338:	f002 faf0 	bl	801491c <RCCEx_PLL3_Config>
 801233c:	4603      	mov	r3, r0
 801233e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012342:	e004      	b.n	801234e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012344:	2301      	movs	r3, #1
 8012346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801234a:	e000      	b.n	801234e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801234c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801234e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012352:	2b00      	cmp	r3, #0
 8012354:	d10a      	bne.n	801236c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8012356:	4b98      	ldr	r3, [pc, #608]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801235a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801235e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012364:	4a94      	ldr	r2, [pc, #592]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012366:	430b      	orrs	r3, r1
 8012368:	6513      	str	r3, [r2, #80]	@ 0x50
 801236a:	e003      	b.n	8012374 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801236c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012370:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801237c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8012380:	f04f 0900 	mov.w	r9, #0
 8012384:	ea58 0309 	orrs.w	r3, r8, r9
 8012388:	d047      	beq.n	801241a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801238a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012390:	2b04      	cmp	r3, #4
 8012392:	d82a      	bhi.n	80123ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8012394:	a201      	add	r2, pc, #4	@ (adr r2, 801239c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8012396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801239a:	bf00      	nop
 801239c:	080123b1 	.word	0x080123b1
 80123a0:	080123bf 	.word	0x080123bf
 80123a4:	080123d5 	.word	0x080123d5
 80123a8:	080123f3 	.word	0x080123f3
 80123ac:	080123f3 	.word	0x080123f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80123b0:	4b81      	ldr	r3, [pc, #516]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80123b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123b4:	4a80      	ldr	r2, [pc, #512]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80123b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80123ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80123bc:	e01a      	b.n	80123f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80123be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123c2:	3308      	adds	r3, #8
 80123c4:	2100      	movs	r1, #0
 80123c6:	4618      	mov	r0, r3
 80123c8:	f002 f9f6 	bl	80147b8 <RCCEx_PLL2_Config>
 80123cc:	4603      	mov	r3, r0
 80123ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80123d2:	e00f      	b.n	80123f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80123d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123d8:	3328      	adds	r3, #40	@ 0x28
 80123da:	2100      	movs	r1, #0
 80123dc:	4618      	mov	r0, r3
 80123de:	f002 fa9d 	bl	801491c <RCCEx_PLL3_Config>
 80123e2:	4603      	mov	r3, r0
 80123e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80123e8:	e004      	b.n	80123f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80123ea:	2301      	movs	r3, #1
 80123ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80123f0:	e000      	b.n	80123f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80123f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80123f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d10a      	bne.n	8012412 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80123fc:	4b6e      	ldr	r3, [pc, #440]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80123fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012400:	f023 0107 	bic.w	r1, r3, #7
 8012404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801240a:	4a6b      	ldr	r2, [pc, #428]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801240c:	430b      	orrs	r3, r1
 801240e:	6513      	str	r3, [r2, #80]	@ 0x50
 8012410:	e003      	b.n	801241a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012416:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801241a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012422:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8012426:	f04f 0b00 	mov.w	fp, #0
 801242a:	ea5a 030b 	orrs.w	r3, sl, fp
 801242e:	d05b      	beq.n	80124e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8012430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012434:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012438:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 801243c:	d03b      	beq.n	80124b6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 801243e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8012442:	d834      	bhi.n	80124ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012444:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012448:	d037      	beq.n	80124ba <HAL_RCCEx_PeriphCLKConfig+0x206>
 801244a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801244e:	d82e      	bhi.n	80124ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012450:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012454:	d033      	beq.n	80124be <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8012456:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801245a:	d828      	bhi.n	80124ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801245c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012460:	d01a      	beq.n	8012498 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8012462:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012466:	d822      	bhi.n	80124ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012468:	2b00      	cmp	r3, #0
 801246a:	d003      	beq.n	8012474 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 801246c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012470:	d007      	beq.n	8012482 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8012472:	e01c      	b.n	80124ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012474:	4b50      	ldr	r3, [pc, #320]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012478:	4a4f      	ldr	r2, [pc, #316]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801247a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801247e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012480:	e01e      	b.n	80124c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012486:	3308      	adds	r3, #8
 8012488:	2100      	movs	r1, #0
 801248a:	4618      	mov	r0, r3
 801248c:	f002 f994 	bl	80147b8 <RCCEx_PLL2_Config>
 8012490:	4603      	mov	r3, r0
 8012492:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8012496:	e013      	b.n	80124c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801249c:	3328      	adds	r3, #40	@ 0x28
 801249e:	2100      	movs	r1, #0
 80124a0:	4618      	mov	r0, r3
 80124a2:	f002 fa3b 	bl	801491c <RCCEx_PLL3_Config>
 80124a6:	4603      	mov	r3, r0
 80124a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80124ac:	e008      	b.n	80124c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80124ae:	2301      	movs	r3, #1
 80124b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80124b4:	e004      	b.n	80124c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80124b6:	bf00      	nop
 80124b8:	e002      	b.n	80124c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80124ba:	bf00      	nop
 80124bc:	e000      	b.n	80124c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80124be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80124c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d10b      	bne.n	80124e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80124c8:	4b3b      	ldr	r3, [pc, #236]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80124ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80124cc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80124d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80124d8:	4a37      	ldr	r2, [pc, #220]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80124da:	430b      	orrs	r3, r1
 80124dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80124de:	e003      	b.n	80124e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80124e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80124e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80124f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80124f8:	2300      	movs	r3, #0
 80124fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80124fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8012502:	460b      	mov	r3, r1
 8012504:	4313      	orrs	r3, r2
 8012506:	d05d      	beq.n	80125c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8012508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801250c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012510:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8012514:	d03b      	beq.n	801258e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8012516:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801251a:	d834      	bhi.n	8012586 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801251c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012520:	d037      	beq.n	8012592 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8012522:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012526:	d82e      	bhi.n	8012586 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012528:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801252c:	d033      	beq.n	8012596 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 801252e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012532:	d828      	bhi.n	8012586 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012534:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012538:	d01a      	beq.n	8012570 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801253a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801253e:	d822      	bhi.n	8012586 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012540:	2b00      	cmp	r3, #0
 8012542:	d003      	beq.n	801254c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8012544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012548:	d007      	beq.n	801255a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801254a:	e01c      	b.n	8012586 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801254c:	4b1a      	ldr	r3, [pc, #104]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801254e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012550:	4a19      	ldr	r2, [pc, #100]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012558:	e01e      	b.n	8012598 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801255a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801255e:	3308      	adds	r3, #8
 8012560:	2100      	movs	r1, #0
 8012562:	4618      	mov	r0, r3
 8012564:	f002 f928 	bl	80147b8 <RCCEx_PLL2_Config>
 8012568:	4603      	mov	r3, r0
 801256a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801256e:	e013      	b.n	8012598 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012574:	3328      	adds	r3, #40	@ 0x28
 8012576:	2100      	movs	r1, #0
 8012578:	4618      	mov	r0, r3
 801257a:	f002 f9cf 	bl	801491c <RCCEx_PLL3_Config>
 801257e:	4603      	mov	r3, r0
 8012580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012584:	e008      	b.n	8012598 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8012586:	2301      	movs	r3, #1
 8012588:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801258c:	e004      	b.n	8012598 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801258e:	bf00      	nop
 8012590:	e002      	b.n	8012598 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8012592:	bf00      	nop
 8012594:	e000      	b.n	8012598 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8012596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801259c:	2b00      	cmp	r3, #0
 801259e:	d10d      	bne.n	80125bc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80125a0:	4b05      	ldr	r3, [pc, #20]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80125a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80125a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80125b0:	4a01      	ldr	r2, [pc, #4]	@ (80125b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80125b2:	430b      	orrs	r3, r1
 80125b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80125b6:	e005      	b.n	80125c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80125b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80125c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80125d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80125d4:	2300      	movs	r3, #0
 80125d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80125da:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80125de:	460b      	mov	r3, r1
 80125e0:	4313      	orrs	r3, r2
 80125e2:	d03a      	beq.n	801265a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80125e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80125ea:	2b30      	cmp	r3, #48	@ 0x30
 80125ec:	d01f      	beq.n	801262e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80125ee:	2b30      	cmp	r3, #48	@ 0x30
 80125f0:	d819      	bhi.n	8012626 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80125f2:	2b20      	cmp	r3, #32
 80125f4:	d00c      	beq.n	8012610 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80125f6:	2b20      	cmp	r3, #32
 80125f8:	d815      	bhi.n	8012626 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d019      	beq.n	8012632 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80125fe:	2b10      	cmp	r3, #16
 8012600:	d111      	bne.n	8012626 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012602:	4baa      	ldr	r3, [pc, #680]	@ (80128ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012606:	4aa9      	ldr	r2, [pc, #676]	@ (80128ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801260c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801260e:	e011      	b.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012614:	3308      	adds	r3, #8
 8012616:	2102      	movs	r1, #2
 8012618:	4618      	mov	r0, r3
 801261a:	f002 f8cd 	bl	80147b8 <RCCEx_PLL2_Config>
 801261e:	4603      	mov	r3, r0
 8012620:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012624:	e006      	b.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012626:	2301      	movs	r3, #1
 8012628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801262c:	e002      	b.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801262e:	bf00      	nop
 8012630:	e000      	b.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8012632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012634:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012638:	2b00      	cmp	r3, #0
 801263a:	d10a      	bne.n	8012652 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801263c:	4b9b      	ldr	r3, [pc, #620]	@ (80128ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801263e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012640:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8012644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801264a:	4a98      	ldr	r2, [pc, #608]	@ (80128ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801264c:	430b      	orrs	r3, r1
 801264e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012650:	e003      	b.n	801265a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012652:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012656:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801265a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012662:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8012666:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801266a:	2300      	movs	r3, #0
 801266c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012670:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8012674:	460b      	mov	r3, r1
 8012676:	4313      	orrs	r3, r2
 8012678:	d051      	beq.n	801271e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801267a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012684:	d035      	beq.n	80126f2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8012686:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801268a:	d82e      	bhi.n	80126ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 801268c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012690:	d031      	beq.n	80126f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8012692:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012696:	d828      	bhi.n	80126ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801269c:	d01a      	beq.n	80126d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 801269e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80126a2:	d822      	bhi.n	80126ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d003      	beq.n	80126b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80126a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80126ac:	d007      	beq.n	80126be <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80126ae:	e01c      	b.n	80126ea <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80126b0:	4b7e      	ldr	r3, [pc, #504]	@ (80128ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80126b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126b4:	4a7d      	ldr	r2, [pc, #500]	@ (80128ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80126b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80126ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80126bc:	e01c      	b.n	80126f8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80126be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126c2:	3308      	adds	r3, #8
 80126c4:	2100      	movs	r1, #0
 80126c6:	4618      	mov	r0, r3
 80126c8:	f002 f876 	bl	80147b8 <RCCEx_PLL2_Config>
 80126cc:	4603      	mov	r3, r0
 80126ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80126d2:	e011      	b.n	80126f8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80126d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126d8:	3328      	adds	r3, #40	@ 0x28
 80126da:	2100      	movs	r1, #0
 80126dc:	4618      	mov	r0, r3
 80126de:	f002 f91d 	bl	801491c <RCCEx_PLL3_Config>
 80126e2:	4603      	mov	r3, r0
 80126e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80126e8:	e006      	b.n	80126f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80126ea:	2301      	movs	r3, #1
 80126ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80126f0:	e002      	b.n	80126f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80126f2:	bf00      	nop
 80126f4:	e000      	b.n	80126f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80126f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80126f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d10a      	bne.n	8012716 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8012700:	4b6a      	ldr	r3, [pc, #424]	@ (80128ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012704:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8012708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801270c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801270e:	4a67      	ldr	r2, [pc, #412]	@ (80128ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012710:	430b      	orrs	r3, r1
 8012712:	6513      	str	r3, [r2, #80]	@ 0x50
 8012714:	e003      	b.n	801271e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012716:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801271a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801271e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012726:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801272a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801272e:	2300      	movs	r3, #0
 8012730:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012734:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8012738:	460b      	mov	r3, r1
 801273a:	4313      	orrs	r3, r2
 801273c:	d053      	beq.n	80127e6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801273e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012748:	d033      	beq.n	80127b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801274a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801274e:	d82c      	bhi.n	80127aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012750:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012754:	d02f      	beq.n	80127b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8012756:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801275a:	d826      	bhi.n	80127aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801275c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012760:	d02b      	beq.n	80127ba <HAL_RCCEx_PeriphCLKConfig+0x506>
 8012762:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012766:	d820      	bhi.n	80127aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801276c:	d012      	beq.n	8012794 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 801276e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012772:	d81a      	bhi.n	80127aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012774:	2b00      	cmp	r3, #0
 8012776:	d022      	beq.n	80127be <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8012778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801277c:	d115      	bne.n	80127aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801277e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012782:	3308      	adds	r3, #8
 8012784:	2101      	movs	r1, #1
 8012786:	4618      	mov	r0, r3
 8012788:	f002 f816 	bl	80147b8 <RCCEx_PLL2_Config>
 801278c:	4603      	mov	r3, r0
 801278e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012792:	e015      	b.n	80127c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012798:	3328      	adds	r3, #40	@ 0x28
 801279a:	2101      	movs	r1, #1
 801279c:	4618      	mov	r0, r3
 801279e:	f002 f8bd 	bl	801491c <RCCEx_PLL3_Config>
 80127a2:	4603      	mov	r3, r0
 80127a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80127a8:	e00a      	b.n	80127c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80127aa:	2301      	movs	r3, #1
 80127ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80127b0:	e006      	b.n	80127c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80127b2:	bf00      	nop
 80127b4:	e004      	b.n	80127c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80127b6:	bf00      	nop
 80127b8:	e002      	b.n	80127c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80127ba:	bf00      	nop
 80127bc:	e000      	b.n	80127c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80127be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80127c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d10a      	bne.n	80127de <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80127c8:	4b38      	ldr	r3, [pc, #224]	@ (80128ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80127ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80127cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80127d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80127d6:	4a35      	ldr	r2, [pc, #212]	@ (80128ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80127d8:	430b      	orrs	r3, r1
 80127da:	6513      	str	r3, [r2, #80]	@ 0x50
 80127dc:	e003      	b.n	80127e6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80127e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80127f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80127f6:	2300      	movs	r3, #0
 80127f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80127fc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8012800:	460b      	mov	r3, r1
 8012802:	4313      	orrs	r3, r2
 8012804:	d058      	beq.n	80128b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8012806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801280a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801280e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012812:	d033      	beq.n	801287c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8012814:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012818:	d82c      	bhi.n	8012874 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801281a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801281e:	d02f      	beq.n	8012880 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8012820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012824:	d826      	bhi.n	8012874 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012826:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801282a:	d02b      	beq.n	8012884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 801282c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012830:	d820      	bhi.n	8012874 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012832:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012836:	d012      	beq.n	801285e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8012838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801283c:	d81a      	bhi.n	8012874 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801283e:	2b00      	cmp	r3, #0
 8012840:	d022      	beq.n	8012888 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8012842:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012846:	d115      	bne.n	8012874 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801284c:	3308      	adds	r3, #8
 801284e:	2101      	movs	r1, #1
 8012850:	4618      	mov	r0, r3
 8012852:	f001 ffb1 	bl	80147b8 <RCCEx_PLL2_Config>
 8012856:	4603      	mov	r3, r0
 8012858:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801285c:	e015      	b.n	801288a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801285e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012862:	3328      	adds	r3, #40	@ 0x28
 8012864:	2101      	movs	r1, #1
 8012866:	4618      	mov	r0, r3
 8012868:	f002 f858 	bl	801491c <RCCEx_PLL3_Config>
 801286c:	4603      	mov	r3, r0
 801286e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012872:	e00a      	b.n	801288a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8012874:	2301      	movs	r3, #1
 8012876:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801287a:	e006      	b.n	801288a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801287c:	bf00      	nop
 801287e:	e004      	b.n	801288a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012880:	bf00      	nop
 8012882:	e002      	b.n	801288a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012884:	bf00      	nop
 8012886:	e000      	b.n	801288a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012888:	bf00      	nop
    }

    if (ret == HAL_OK)
 801288a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801288e:	2b00      	cmp	r3, #0
 8012890:	d10e      	bne.n	80128b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8012892:	4b06      	ldr	r3, [pc, #24]	@ (80128ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012896:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801289a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801289e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80128a2:	4a02      	ldr	r2, [pc, #8]	@ (80128ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80128a4:	430b      	orrs	r3, r1
 80128a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80128a8:	e006      	b.n	80128b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80128aa:	bf00      	nop
 80128ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80128b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80128b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80128c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80128c8:	2300      	movs	r3, #0
 80128ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80128ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80128d2:	460b      	mov	r3, r1
 80128d4:	4313      	orrs	r3, r2
 80128d6:	d037      	beq.n	8012948 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80128d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80128e2:	d00e      	beq.n	8012902 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80128e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80128e8:	d816      	bhi.n	8012918 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d018      	beq.n	8012920 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80128ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80128f2:	d111      	bne.n	8012918 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80128f4:	4bc4      	ldr	r3, [pc, #784]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128f8:	4ac3      	ldr	r2, [pc, #780]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80128fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012900:	e00f      	b.n	8012922 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012906:	3308      	adds	r3, #8
 8012908:	2101      	movs	r1, #1
 801290a:	4618      	mov	r0, r3
 801290c:	f001 ff54 	bl	80147b8 <RCCEx_PLL2_Config>
 8012910:	4603      	mov	r3, r0
 8012912:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012916:	e004      	b.n	8012922 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012918:	2301      	movs	r3, #1
 801291a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801291e:	e000      	b.n	8012922 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8012920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012922:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012926:	2b00      	cmp	r3, #0
 8012928:	d10a      	bne.n	8012940 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801292a:	4bb7      	ldr	r3, [pc, #732]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801292c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801292e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012938:	4ab3      	ldr	r2, [pc, #716]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801293a:	430b      	orrs	r3, r1
 801293c:	6513      	str	r3, [r2, #80]	@ 0x50
 801293e:	e003      	b.n	8012948 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012944:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8012948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012950:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8012954:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012958:	2300      	movs	r3, #0
 801295a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801295e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8012962:	460b      	mov	r3, r1
 8012964:	4313      	orrs	r3, r2
 8012966:	d039      	beq.n	80129dc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8012968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801296c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801296e:	2b03      	cmp	r3, #3
 8012970:	d81c      	bhi.n	80129ac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8012972:	a201      	add	r2, pc, #4	@ (adr r2, 8012978 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8012974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012978:	080129b5 	.word	0x080129b5
 801297c:	08012989 	.word	0x08012989
 8012980:	08012997 	.word	0x08012997
 8012984:	080129b5 	.word	0x080129b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012988:	4b9f      	ldr	r3, [pc, #636]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801298c:	4a9e      	ldr	r2, [pc, #632]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801298e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012994:	e00f      	b.n	80129b6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801299a:	3308      	adds	r3, #8
 801299c:	2102      	movs	r1, #2
 801299e:	4618      	mov	r0, r3
 80129a0:	f001 ff0a 	bl	80147b8 <RCCEx_PLL2_Config>
 80129a4:	4603      	mov	r3, r0
 80129a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80129aa:	e004      	b.n	80129b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80129ac:	2301      	movs	r3, #1
 80129ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80129b2:	e000      	b.n	80129b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80129b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80129b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d10a      	bne.n	80129d4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80129be:	4b92      	ldr	r3, [pc, #584]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80129c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80129c2:	f023 0103 	bic.w	r1, r3, #3
 80129c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80129cc:	4a8e      	ldr	r2, [pc, #568]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80129ce:	430b      	orrs	r3, r1
 80129d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80129d2:	e003      	b.n	80129dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80129d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80129d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80129dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80129e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80129ec:	2300      	movs	r3, #0
 80129ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80129f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80129f6:	460b      	mov	r3, r1
 80129f8:	4313      	orrs	r3, r2
 80129fa:	f000 8099 	beq.w	8012b30 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80129fe:	4b83      	ldr	r3, [pc, #524]	@ (8012c0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	4a82      	ldr	r2, [pc, #520]	@ (8012c0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012a08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012a0a:	f7f6 feb9 	bl	8009780 <HAL_GetTick>
 8012a0e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012a12:	e00b      	b.n	8012a2c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012a14:	f7f6 feb4 	bl	8009780 <HAL_GetTick>
 8012a18:	4602      	mov	r2, r0
 8012a1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012a1e:	1ad3      	subs	r3, r2, r3
 8012a20:	2b64      	cmp	r3, #100	@ 0x64
 8012a22:	d903      	bls.n	8012a2c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8012a24:	2303      	movs	r3, #3
 8012a26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012a2a:	e005      	b.n	8012a38 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012a2c:	4b77      	ldr	r3, [pc, #476]	@ (8012c0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d0ed      	beq.n	8012a14 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8012a38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d173      	bne.n	8012b28 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012a40:	4b71      	ldr	r3, [pc, #452]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012a42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012a4c:	4053      	eors	r3, r2
 8012a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d015      	beq.n	8012a82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012a56:	4b6c      	ldr	r3, [pc, #432]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012a5e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012a62:	4b69      	ldr	r3, [pc, #420]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a66:	4a68      	ldr	r2, [pc, #416]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012a6c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8012a6e:	4b66      	ldr	r3, [pc, #408]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a72:	4a65      	ldr	r2, [pc, #404]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012a78:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8012a7a:	4a63      	ldr	r2, [pc, #396]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012a80:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8012a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012a8e:	d118      	bne.n	8012ac2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012a90:	f7f6 fe76 	bl	8009780 <HAL_GetTick>
 8012a94:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012a98:	e00d      	b.n	8012ab6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012a9a:	f7f6 fe71 	bl	8009780 <HAL_GetTick>
 8012a9e:	4602      	mov	r2, r0
 8012aa0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012aa4:	1ad2      	subs	r2, r2, r3
 8012aa6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d903      	bls.n	8012ab6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8012aae:	2303      	movs	r3, #3
 8012ab0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8012ab4:	e005      	b.n	8012ac2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012ab6:	4b54      	ldr	r3, [pc, #336]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012aba:	f003 0302 	and.w	r3, r3, #2
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d0eb      	beq.n	8012a9a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8012ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d129      	bne.n	8012b1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ace:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012ad6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012ada:	d10e      	bne.n	8012afa <HAL_RCCEx_PeriphCLKConfig+0x846>
 8012adc:	4b4a      	ldr	r3, [pc, #296]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012ade:	691b      	ldr	r3, [r3, #16]
 8012ae0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8012ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ae8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012aec:	091a      	lsrs	r2, r3, #4
 8012aee:	4b48      	ldr	r3, [pc, #288]	@ (8012c10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012af0:	4013      	ands	r3, r2
 8012af2:	4a45      	ldr	r2, [pc, #276]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012af4:	430b      	orrs	r3, r1
 8012af6:	6113      	str	r3, [r2, #16]
 8012af8:	e005      	b.n	8012b06 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8012afa:	4b43      	ldr	r3, [pc, #268]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012afc:	691b      	ldr	r3, [r3, #16]
 8012afe:	4a42      	ldr	r2, [pc, #264]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012b00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012b04:	6113      	str	r3, [r2, #16]
 8012b06:	4b40      	ldr	r3, [pc, #256]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012b08:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012b16:	4a3c      	ldr	r2, [pc, #240]	@ (8012c08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012b18:	430b      	orrs	r3, r1
 8012b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8012b1c:	e008      	b.n	8012b30 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012b1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012b26:	e003      	b.n	8012b30 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b38:	f002 0301 	and.w	r3, r2, #1
 8012b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012b40:	2300      	movs	r3, #0
 8012b42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012b46:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	4313      	orrs	r3, r2
 8012b4e:	f000 808f 	beq.w	8012c70 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8012b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012b58:	2b28      	cmp	r3, #40	@ 0x28
 8012b5a:	d871      	bhi.n	8012c40 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8012b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8012b64 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8012b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b62:	bf00      	nop
 8012b64:	08012c49 	.word	0x08012c49
 8012b68:	08012c41 	.word	0x08012c41
 8012b6c:	08012c41 	.word	0x08012c41
 8012b70:	08012c41 	.word	0x08012c41
 8012b74:	08012c41 	.word	0x08012c41
 8012b78:	08012c41 	.word	0x08012c41
 8012b7c:	08012c41 	.word	0x08012c41
 8012b80:	08012c41 	.word	0x08012c41
 8012b84:	08012c15 	.word	0x08012c15
 8012b88:	08012c41 	.word	0x08012c41
 8012b8c:	08012c41 	.word	0x08012c41
 8012b90:	08012c41 	.word	0x08012c41
 8012b94:	08012c41 	.word	0x08012c41
 8012b98:	08012c41 	.word	0x08012c41
 8012b9c:	08012c41 	.word	0x08012c41
 8012ba0:	08012c41 	.word	0x08012c41
 8012ba4:	08012c2b 	.word	0x08012c2b
 8012ba8:	08012c41 	.word	0x08012c41
 8012bac:	08012c41 	.word	0x08012c41
 8012bb0:	08012c41 	.word	0x08012c41
 8012bb4:	08012c41 	.word	0x08012c41
 8012bb8:	08012c41 	.word	0x08012c41
 8012bbc:	08012c41 	.word	0x08012c41
 8012bc0:	08012c41 	.word	0x08012c41
 8012bc4:	08012c49 	.word	0x08012c49
 8012bc8:	08012c41 	.word	0x08012c41
 8012bcc:	08012c41 	.word	0x08012c41
 8012bd0:	08012c41 	.word	0x08012c41
 8012bd4:	08012c41 	.word	0x08012c41
 8012bd8:	08012c41 	.word	0x08012c41
 8012bdc:	08012c41 	.word	0x08012c41
 8012be0:	08012c41 	.word	0x08012c41
 8012be4:	08012c49 	.word	0x08012c49
 8012be8:	08012c41 	.word	0x08012c41
 8012bec:	08012c41 	.word	0x08012c41
 8012bf0:	08012c41 	.word	0x08012c41
 8012bf4:	08012c41 	.word	0x08012c41
 8012bf8:	08012c41 	.word	0x08012c41
 8012bfc:	08012c41 	.word	0x08012c41
 8012c00:	08012c41 	.word	0x08012c41
 8012c04:	08012c49 	.word	0x08012c49
 8012c08:	58024400 	.word	0x58024400
 8012c0c:	58024800 	.word	0x58024800
 8012c10:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c18:	3308      	adds	r3, #8
 8012c1a:	2101      	movs	r1, #1
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f001 fdcb 	bl	80147b8 <RCCEx_PLL2_Config>
 8012c22:	4603      	mov	r3, r0
 8012c24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012c28:	e00f      	b.n	8012c4a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c2e:	3328      	adds	r3, #40	@ 0x28
 8012c30:	2101      	movs	r1, #1
 8012c32:	4618      	mov	r0, r3
 8012c34:	f001 fe72 	bl	801491c <RCCEx_PLL3_Config>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012c3e:	e004      	b.n	8012c4a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c40:	2301      	movs	r3, #1
 8012c42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012c46:	e000      	b.n	8012c4a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8012c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d10a      	bne.n	8012c68 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012c52:	4bbf      	ldr	r3, [pc, #764]	@ (8012f50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c56:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8012c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012c60:	4abb      	ldr	r2, [pc, #748]	@ (8012f50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012c62:	430b      	orrs	r3, r1
 8012c64:	6553      	str	r3, [r2, #84]	@ 0x54
 8012c66:	e003      	b.n	8012c70 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c78:	f002 0302 	and.w	r3, r2, #2
 8012c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012c80:	2300      	movs	r3, #0
 8012c82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012c86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8012c8a:	460b      	mov	r3, r1
 8012c8c:	4313      	orrs	r3, r2
 8012c8e:	d041      	beq.n	8012d14 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8012c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c96:	2b05      	cmp	r3, #5
 8012c98:	d824      	bhi.n	8012ce4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8012c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8012ca0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8012c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ca0:	08012ced 	.word	0x08012ced
 8012ca4:	08012cb9 	.word	0x08012cb9
 8012ca8:	08012ccf 	.word	0x08012ccf
 8012cac:	08012ced 	.word	0x08012ced
 8012cb0:	08012ced 	.word	0x08012ced
 8012cb4:	08012ced 	.word	0x08012ced
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cbc:	3308      	adds	r3, #8
 8012cbe:	2101      	movs	r1, #1
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f001 fd79 	bl	80147b8 <RCCEx_PLL2_Config>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012ccc:	e00f      	b.n	8012cee <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cd2:	3328      	adds	r3, #40	@ 0x28
 8012cd4:	2101      	movs	r1, #1
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f001 fe20 	bl	801491c <RCCEx_PLL3_Config>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012ce2:	e004      	b.n	8012cee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012cea:	e000      	b.n	8012cee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8012cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012cee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d10a      	bne.n	8012d0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012cf6:	4b96      	ldr	r3, [pc, #600]	@ (8012f50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cfa:	f023 0107 	bic.w	r1, r3, #7
 8012cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d04:	4a92      	ldr	r2, [pc, #584]	@ (8012f50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012d06:	430b      	orrs	r3, r1
 8012d08:	6553      	str	r3, [r2, #84]	@ 0x54
 8012d0a:	e003      	b.n	8012d14 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1c:	f002 0304 	and.w	r3, r2, #4
 8012d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012d24:	2300      	movs	r3, #0
 8012d26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012d2a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012d2e:	460b      	mov	r3, r1
 8012d30:	4313      	orrs	r3, r2
 8012d32:	d044      	beq.n	8012dbe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8012d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012d3c:	2b05      	cmp	r3, #5
 8012d3e:	d825      	bhi.n	8012d8c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8012d40:	a201      	add	r2, pc, #4	@ (adr r2, 8012d48 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8012d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d46:	bf00      	nop
 8012d48:	08012d95 	.word	0x08012d95
 8012d4c:	08012d61 	.word	0x08012d61
 8012d50:	08012d77 	.word	0x08012d77
 8012d54:	08012d95 	.word	0x08012d95
 8012d58:	08012d95 	.word	0x08012d95
 8012d5c:	08012d95 	.word	0x08012d95
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d64:	3308      	adds	r3, #8
 8012d66:	2101      	movs	r1, #1
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f001 fd25 	bl	80147b8 <RCCEx_PLL2_Config>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012d74:	e00f      	b.n	8012d96 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d7a:	3328      	adds	r3, #40	@ 0x28
 8012d7c:	2101      	movs	r1, #1
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f001 fdcc 	bl	801491c <RCCEx_PLL3_Config>
 8012d84:	4603      	mov	r3, r0
 8012d86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012d8a:	e004      	b.n	8012d96 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012d92:	e000      	b.n	8012d96 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8012d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012d96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d10b      	bne.n	8012db6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012d9e:	4b6c      	ldr	r3, [pc, #432]	@ (8012f50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012da2:	f023 0107 	bic.w	r1, r3, #7
 8012da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012dae:	4a68      	ldr	r2, [pc, #416]	@ (8012f50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012db0:	430b      	orrs	r3, r1
 8012db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8012db4:	e003      	b.n	8012dbe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012db6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012dba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc6:	f002 0320 	and.w	r3, r2, #32
 8012dca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012dce:	2300      	movs	r3, #0
 8012dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012dd4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8012dd8:	460b      	mov	r3, r1
 8012dda:	4313      	orrs	r3, r2
 8012ddc:	d055      	beq.n	8012e8a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8012dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012dea:	d033      	beq.n	8012e54 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8012dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012df0:	d82c      	bhi.n	8012e4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012df6:	d02f      	beq.n	8012e58 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8012df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012dfc:	d826      	bhi.n	8012e4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012dfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012e02:	d02b      	beq.n	8012e5c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8012e04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012e08:	d820      	bhi.n	8012e4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012e0e:	d012      	beq.n	8012e36 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8012e10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012e14:	d81a      	bhi.n	8012e4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d022      	beq.n	8012e60 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8012e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012e1e:	d115      	bne.n	8012e4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e24:	3308      	adds	r3, #8
 8012e26:	2100      	movs	r1, #0
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f001 fcc5 	bl	80147b8 <RCCEx_PLL2_Config>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012e34:	e015      	b.n	8012e62 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e3a:	3328      	adds	r3, #40	@ 0x28
 8012e3c:	2102      	movs	r1, #2
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f001 fd6c 	bl	801491c <RCCEx_PLL3_Config>
 8012e44:	4603      	mov	r3, r0
 8012e46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012e4a:	e00a      	b.n	8012e62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012e52:	e006      	b.n	8012e62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012e54:	bf00      	nop
 8012e56:	e004      	b.n	8012e62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012e58:	bf00      	nop
 8012e5a:	e002      	b.n	8012e62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012e5c:	bf00      	nop
 8012e5e:	e000      	b.n	8012e62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012e62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d10b      	bne.n	8012e82 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012e6a:	4b39      	ldr	r3, [pc, #228]	@ (8012f50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e6e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012e7a:	4a35      	ldr	r2, [pc, #212]	@ (8012f50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012e7c:	430b      	orrs	r3, r1
 8012e7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8012e80:	e003      	b.n	8012e8a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8012e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e92:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8012e96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012ea0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8012ea4:	460b      	mov	r3, r1
 8012ea6:	4313      	orrs	r3, r2
 8012ea8:	d058      	beq.n	8012f5c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8012eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012eb2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012eb6:	d033      	beq.n	8012f20 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8012eb8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012ebc:	d82c      	bhi.n	8012f18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ec2:	d02f      	beq.n	8012f24 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ec8:	d826      	bhi.n	8012f18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012eca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012ece:	d02b      	beq.n	8012f28 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8012ed0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012ed4:	d820      	bhi.n	8012f18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012ed6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012eda:	d012      	beq.n	8012f02 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8012edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012ee0:	d81a      	bhi.n	8012f18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d022      	beq.n	8012f2c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8012ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012eea:	d115      	bne.n	8012f18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ef0:	3308      	adds	r3, #8
 8012ef2:	2100      	movs	r1, #0
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f001 fc5f 	bl	80147b8 <RCCEx_PLL2_Config>
 8012efa:	4603      	mov	r3, r0
 8012efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012f00:	e015      	b.n	8012f2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f06:	3328      	adds	r3, #40	@ 0x28
 8012f08:	2102      	movs	r1, #2
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f001 fd06 	bl	801491c <RCCEx_PLL3_Config>
 8012f10:	4603      	mov	r3, r0
 8012f12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012f16:	e00a      	b.n	8012f2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f18:	2301      	movs	r3, #1
 8012f1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012f1e:	e006      	b.n	8012f2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012f20:	bf00      	nop
 8012f22:	e004      	b.n	8012f2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012f24:	bf00      	nop
 8012f26:	e002      	b.n	8012f2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012f28:	bf00      	nop
 8012f2a:	e000      	b.n	8012f2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d10e      	bne.n	8012f54 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012f36:	4b06      	ldr	r3, [pc, #24]	@ (8012f50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f3a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8012f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012f46:	4a02      	ldr	r2, [pc, #8]	@ (8012f50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012f48:	430b      	orrs	r3, r1
 8012f4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8012f4c:	e006      	b.n	8012f5c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8012f4e:	bf00      	nop
 8012f50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f64:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8012f68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012f72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8012f76:	460b      	mov	r3, r1
 8012f78:	4313      	orrs	r3, r2
 8012f7a:	d055      	beq.n	8013028 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8012f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012f84:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012f88:	d033      	beq.n	8012ff2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8012f8a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012f8e:	d82c      	bhi.n	8012fea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012f94:	d02f      	beq.n	8012ff6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8012f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012f9a:	d826      	bhi.n	8012fea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012f9c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012fa0:	d02b      	beq.n	8012ffa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8012fa2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012fa6:	d820      	bhi.n	8012fea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012fa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012fac:	d012      	beq.n	8012fd4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8012fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012fb2:	d81a      	bhi.n	8012fea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d022      	beq.n	8012ffe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012fbc:	d115      	bne.n	8012fea <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fc2:	3308      	adds	r3, #8
 8012fc4:	2100      	movs	r1, #0
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f001 fbf6 	bl	80147b8 <RCCEx_PLL2_Config>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012fd2:	e015      	b.n	8013000 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fd8:	3328      	adds	r3, #40	@ 0x28
 8012fda:	2102      	movs	r1, #2
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f001 fc9d 	bl	801491c <RCCEx_PLL3_Config>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012fe8:	e00a      	b.n	8013000 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012fea:	2301      	movs	r3, #1
 8012fec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012ff0:	e006      	b.n	8013000 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012ff2:	bf00      	nop
 8012ff4:	e004      	b.n	8013000 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012ff6:	bf00      	nop
 8012ff8:	e002      	b.n	8013000 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012ffa:	bf00      	nop
 8012ffc:	e000      	b.n	8013000 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013000:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013004:	2b00      	cmp	r3, #0
 8013006:	d10b      	bne.n	8013020 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8013008:	4ba0      	ldr	r3, [pc, #640]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801300a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801300c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8013010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013014:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013018:	4a9c      	ldr	r2, [pc, #624]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801301a:	430b      	orrs	r3, r1
 801301c:	6593      	str	r3, [r2, #88]	@ 0x58
 801301e:	e003      	b.n	8013028 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013024:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8013028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013030:	f002 0308 	and.w	r3, r2, #8
 8013034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013038:	2300      	movs	r3, #0
 801303a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801303e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8013042:	460b      	mov	r3, r1
 8013044:	4313      	orrs	r3, r2
 8013046:	d01e      	beq.n	8013086 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8013048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801304c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013054:	d10c      	bne.n	8013070 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8013056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801305a:	3328      	adds	r3, #40	@ 0x28
 801305c:	2102      	movs	r1, #2
 801305e:	4618      	mov	r0, r3
 8013060:	f001 fc5c 	bl	801491c <RCCEx_PLL3_Config>
 8013064:	4603      	mov	r3, r0
 8013066:	2b00      	cmp	r3, #0
 8013068:	d002      	beq.n	8013070 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 801306a:	2301      	movs	r3, #1
 801306c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8013070:	4b86      	ldr	r3, [pc, #536]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013074:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8013078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801307c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013080:	4a82      	ldr	r2, [pc, #520]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013082:	430b      	orrs	r3, r1
 8013084:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8013086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801308e:	f002 0310 	and.w	r3, r2, #16
 8013092:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013096:	2300      	movs	r3, #0
 8013098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801309c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80130a0:	460b      	mov	r3, r1
 80130a2:	4313      	orrs	r3, r2
 80130a4:	d01e      	beq.n	80130e4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80130a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80130ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80130b2:	d10c      	bne.n	80130ce <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80130b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130b8:	3328      	adds	r3, #40	@ 0x28
 80130ba:	2102      	movs	r1, #2
 80130bc:	4618      	mov	r0, r3
 80130be:	f001 fc2d 	bl	801491c <RCCEx_PLL3_Config>
 80130c2:	4603      	mov	r3, r0
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d002      	beq.n	80130ce <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80130c8:	2301      	movs	r3, #1
 80130ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80130ce:	4b6f      	ldr	r3, [pc, #444]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80130d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80130d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80130d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80130de:	4a6b      	ldr	r2, [pc, #428]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80130e0:	430b      	orrs	r3, r1
 80130e2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80130e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80130f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80130f2:	2300      	movs	r3, #0
 80130f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80130f6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80130fa:	460b      	mov	r3, r1
 80130fc:	4313      	orrs	r3, r2
 80130fe:	d03e      	beq.n	801317e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8013100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013104:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013108:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801310c:	d022      	beq.n	8013154 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 801310e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013112:	d81b      	bhi.n	801314c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8013114:	2b00      	cmp	r3, #0
 8013116:	d003      	beq.n	8013120 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8013118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801311c:	d00b      	beq.n	8013136 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 801311e:	e015      	b.n	801314c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013124:	3308      	adds	r3, #8
 8013126:	2100      	movs	r1, #0
 8013128:	4618      	mov	r0, r3
 801312a:	f001 fb45 	bl	80147b8 <RCCEx_PLL2_Config>
 801312e:	4603      	mov	r3, r0
 8013130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8013134:	e00f      	b.n	8013156 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801313a:	3328      	adds	r3, #40	@ 0x28
 801313c:	2102      	movs	r1, #2
 801313e:	4618      	mov	r0, r3
 8013140:	f001 fbec 	bl	801491c <RCCEx_PLL3_Config>
 8013144:	4603      	mov	r3, r0
 8013146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801314a:	e004      	b.n	8013156 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801314c:	2301      	movs	r3, #1
 801314e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013152:	e000      	b.n	8013156 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8013154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013156:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801315a:	2b00      	cmp	r3, #0
 801315c:	d10b      	bne.n	8013176 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801315e:	4b4b      	ldr	r3, [pc, #300]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013162:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8013166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801316a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801316e:	4a47      	ldr	r2, [pc, #284]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013170:	430b      	orrs	r3, r1
 8013172:	6593      	str	r3, [r2, #88]	@ 0x58
 8013174:	e003      	b.n	801317e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013176:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801317a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801317e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013186:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801318a:	673b      	str	r3, [r7, #112]	@ 0x70
 801318c:	2300      	movs	r3, #0
 801318e:	677b      	str	r3, [r7, #116]	@ 0x74
 8013190:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8013194:	460b      	mov	r3, r1
 8013196:	4313      	orrs	r3, r2
 8013198:	d03b      	beq.n	8013212 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801319a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801319e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80131a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80131a6:	d01f      	beq.n	80131e8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80131a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80131ac:	d818      	bhi.n	80131e0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80131ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80131b2:	d003      	beq.n	80131bc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80131b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80131b8:	d007      	beq.n	80131ca <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80131ba:	e011      	b.n	80131e0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80131bc:	4b33      	ldr	r3, [pc, #204]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80131be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131c0:	4a32      	ldr	r2, [pc, #200]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80131c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80131c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80131c8:	e00f      	b.n	80131ea <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80131ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131ce:	3328      	adds	r3, #40	@ 0x28
 80131d0:	2101      	movs	r1, #1
 80131d2:	4618      	mov	r0, r3
 80131d4:	f001 fba2 	bl	801491c <RCCEx_PLL3_Config>
 80131d8:	4603      	mov	r3, r0
 80131da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80131de:	e004      	b.n	80131ea <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80131e0:	2301      	movs	r3, #1
 80131e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80131e6:	e000      	b.n	80131ea <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80131e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80131ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d10b      	bne.n	801320a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80131f2:	4b26      	ldr	r3, [pc, #152]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80131f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80131f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80131fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013202:	4a22      	ldr	r2, [pc, #136]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013204:	430b      	orrs	r3, r1
 8013206:	6553      	str	r3, [r2, #84]	@ 0x54
 8013208:	e003      	b.n	8013212 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801320a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801320e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8013212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801321e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013220:	2300      	movs	r3, #0
 8013222:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013224:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8013228:	460b      	mov	r3, r1
 801322a:	4313      	orrs	r3, r2
 801322c:	d034      	beq.n	8013298 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801322e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013234:	2b00      	cmp	r3, #0
 8013236:	d003      	beq.n	8013240 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8013238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801323c:	d007      	beq.n	801324e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 801323e:	e011      	b.n	8013264 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013240:	4b12      	ldr	r3, [pc, #72]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013244:	4a11      	ldr	r2, [pc, #68]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801324a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801324c:	e00e      	b.n	801326c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801324e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013252:	3308      	adds	r3, #8
 8013254:	2102      	movs	r1, #2
 8013256:	4618      	mov	r0, r3
 8013258:	f001 faae 	bl	80147b8 <RCCEx_PLL2_Config>
 801325c:	4603      	mov	r3, r0
 801325e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8013262:	e003      	b.n	801326c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8013264:	2301      	movs	r3, #1
 8013266:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801326a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801326c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013270:	2b00      	cmp	r3, #0
 8013272:	d10d      	bne.n	8013290 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8013274:	4b05      	ldr	r3, [pc, #20]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013278:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801327c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013282:	4a02      	ldr	r2, [pc, #8]	@ (801328c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013284:	430b      	orrs	r3, r1
 8013286:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8013288:	e006      	b.n	8013298 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 801328a:	bf00      	nop
 801328c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013294:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8013298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80132a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80132a6:	2300      	movs	r3, #0
 80132a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80132aa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80132ae:	460b      	mov	r3, r1
 80132b0:	4313      	orrs	r3, r2
 80132b2:	d00c      	beq.n	80132ce <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80132b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132b8:	3328      	adds	r3, #40	@ 0x28
 80132ba:	2102      	movs	r1, #2
 80132bc:	4618      	mov	r0, r3
 80132be:	f001 fb2d 	bl	801491c <RCCEx_PLL3_Config>
 80132c2:	4603      	mov	r3, r0
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d002      	beq.n	80132ce <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80132c8:	2301      	movs	r3, #1
 80132ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80132ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80132da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80132dc:	2300      	movs	r3, #0
 80132de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80132e0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80132e4:	460b      	mov	r3, r1
 80132e6:	4313      	orrs	r3, r2
 80132e8:	d036      	beq.n	8013358 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80132ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80132f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80132f4:	d018      	beq.n	8013328 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80132f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80132fa:	d811      	bhi.n	8013320 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80132fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013300:	d014      	beq.n	801332c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8013302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013306:	d80b      	bhi.n	8013320 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8013308:	2b00      	cmp	r3, #0
 801330a:	d011      	beq.n	8013330 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 801330c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013310:	d106      	bne.n	8013320 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013312:	4bb7      	ldr	r3, [pc, #732]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013316:	4ab6      	ldr	r2, [pc, #728]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801331c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801331e:	e008      	b.n	8013332 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013320:	2301      	movs	r3, #1
 8013322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013326:	e004      	b.n	8013332 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013328:	bf00      	nop
 801332a:	e002      	b.n	8013332 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801332c:	bf00      	nop
 801332e:	e000      	b.n	8013332 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013332:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013336:	2b00      	cmp	r3, #0
 8013338:	d10a      	bne.n	8013350 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801333a:	4bad      	ldr	r3, [pc, #692]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801333c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801333e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8013342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013346:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013348:	4aa9      	ldr	r2, [pc, #676]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801334a:	430b      	orrs	r3, r1
 801334c:	6553      	str	r3, [r2, #84]	@ 0x54
 801334e:	e003      	b.n	8013358 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013354:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8013358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013360:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8013364:	653b      	str	r3, [r7, #80]	@ 0x50
 8013366:	2300      	movs	r3, #0
 8013368:	657b      	str	r3, [r7, #84]	@ 0x54
 801336a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801336e:	460b      	mov	r3, r1
 8013370:	4313      	orrs	r3, r2
 8013372:	d009      	beq.n	8013388 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013374:	4b9e      	ldr	r3, [pc, #632]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013378:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801337c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013382:	4a9b      	ldr	r2, [pc, #620]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013384:	430b      	orrs	r3, r1
 8013386:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013390:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8013394:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013396:	2300      	movs	r3, #0
 8013398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801339a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801339e:	460b      	mov	r3, r1
 80133a0:	4313      	orrs	r3, r2
 80133a2:	d009      	beq.n	80133b8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80133a4:	4b92      	ldr	r3, [pc, #584]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80133a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133a8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80133ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80133b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80133b2:	4a8f      	ldr	r2, [pc, #572]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80133b4:	430b      	orrs	r3, r1
 80133b6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80133b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80133bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80133c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80133c6:	2300      	movs	r3, #0
 80133c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80133ca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80133ce:	460b      	mov	r3, r1
 80133d0:	4313      	orrs	r3, r2
 80133d2:	d00e      	beq.n	80133f2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80133d4:	4b86      	ldr	r3, [pc, #536]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80133d6:	691b      	ldr	r3, [r3, #16]
 80133d8:	4a85      	ldr	r2, [pc, #532]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80133da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80133de:	6113      	str	r3, [r2, #16]
 80133e0:	4b83      	ldr	r3, [pc, #524]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80133e2:	6919      	ldr	r1, [r3, #16]
 80133e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80133e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80133ec:	4a80      	ldr	r2, [pc, #512]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80133ee:	430b      	orrs	r3, r1
 80133f0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80133f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80133f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133fa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80133fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013400:	2300      	movs	r3, #0
 8013402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013404:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8013408:	460b      	mov	r3, r1
 801340a:	4313      	orrs	r3, r2
 801340c:	d009      	beq.n	8013422 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801340e:	4b78      	ldr	r3, [pc, #480]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013412:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8013416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801341a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801341c:	4a74      	ldr	r2, [pc, #464]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801341e:	430b      	orrs	r3, r1
 8013420:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801342a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801342e:	633b      	str	r3, [r7, #48]	@ 0x30
 8013430:	2300      	movs	r3, #0
 8013432:	637b      	str	r3, [r7, #52]	@ 0x34
 8013434:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8013438:	460b      	mov	r3, r1
 801343a:	4313      	orrs	r3, r2
 801343c:	d00a      	beq.n	8013454 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801343e:	4b6c      	ldr	r3, [pc, #432]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013442:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8013446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801344e:	4a68      	ldr	r2, [pc, #416]	@ (80135f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013450:	430b      	orrs	r3, r1
 8013452:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8013454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801345c:	2100      	movs	r1, #0
 801345e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8013460:	f003 0301 	and.w	r3, r3, #1
 8013464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013466:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801346a:	460b      	mov	r3, r1
 801346c:	4313      	orrs	r3, r2
 801346e:	d011      	beq.n	8013494 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013474:	3308      	adds	r3, #8
 8013476:	2100      	movs	r1, #0
 8013478:	4618      	mov	r0, r3
 801347a:	f001 f99d 	bl	80147b8 <RCCEx_PLL2_Config>
 801347e:	4603      	mov	r3, r0
 8013480:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013488:	2b00      	cmp	r3, #0
 801348a:	d003      	beq.n	8013494 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801348c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013490:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8013494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801349c:	2100      	movs	r1, #0
 801349e:	6239      	str	r1, [r7, #32]
 80134a0:	f003 0302 	and.w	r3, r3, #2
 80134a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80134a6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80134aa:	460b      	mov	r3, r1
 80134ac:	4313      	orrs	r3, r2
 80134ae:	d011      	beq.n	80134d4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80134b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80134b4:	3308      	adds	r3, #8
 80134b6:	2101      	movs	r1, #1
 80134b8:	4618      	mov	r0, r3
 80134ba:	f001 f97d 	bl	80147b8 <RCCEx_PLL2_Config>
 80134be:	4603      	mov	r3, r0
 80134c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80134c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d003      	beq.n	80134d4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80134cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80134d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80134d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80134d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134dc:	2100      	movs	r1, #0
 80134de:	61b9      	str	r1, [r7, #24]
 80134e0:	f003 0304 	and.w	r3, r3, #4
 80134e4:	61fb      	str	r3, [r7, #28]
 80134e6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80134ea:	460b      	mov	r3, r1
 80134ec:	4313      	orrs	r3, r2
 80134ee:	d011      	beq.n	8013514 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80134f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80134f4:	3308      	adds	r3, #8
 80134f6:	2102      	movs	r1, #2
 80134f8:	4618      	mov	r0, r3
 80134fa:	f001 f95d 	bl	80147b8 <RCCEx_PLL2_Config>
 80134fe:	4603      	mov	r3, r0
 8013500:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013508:	2b00      	cmp	r3, #0
 801350a:	d003      	beq.n	8013514 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801350c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013510:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8013514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801351c:	2100      	movs	r1, #0
 801351e:	6139      	str	r1, [r7, #16]
 8013520:	f003 0308 	and.w	r3, r3, #8
 8013524:	617b      	str	r3, [r7, #20]
 8013526:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801352a:	460b      	mov	r3, r1
 801352c:	4313      	orrs	r3, r2
 801352e:	d011      	beq.n	8013554 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013534:	3328      	adds	r3, #40	@ 0x28
 8013536:	2100      	movs	r1, #0
 8013538:	4618      	mov	r0, r3
 801353a:	f001 f9ef 	bl	801491c <RCCEx_PLL3_Config>
 801353e:	4603      	mov	r3, r0
 8013540:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8013544:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013548:	2b00      	cmp	r3, #0
 801354a:	d003      	beq.n	8013554 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801354c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013550:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8013554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801355c:	2100      	movs	r1, #0
 801355e:	60b9      	str	r1, [r7, #8]
 8013560:	f003 0310 	and.w	r3, r3, #16
 8013564:	60fb      	str	r3, [r7, #12]
 8013566:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801356a:	460b      	mov	r3, r1
 801356c:	4313      	orrs	r3, r2
 801356e:	d011      	beq.n	8013594 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013574:	3328      	adds	r3, #40	@ 0x28
 8013576:	2101      	movs	r1, #1
 8013578:	4618      	mov	r0, r3
 801357a:	f001 f9cf 	bl	801491c <RCCEx_PLL3_Config>
 801357e:	4603      	mov	r3, r0
 8013580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013584:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013588:	2b00      	cmp	r3, #0
 801358a:	d003      	beq.n	8013594 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801358c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013590:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8013594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801359c:	2100      	movs	r1, #0
 801359e:	6039      	str	r1, [r7, #0]
 80135a0:	f003 0320 	and.w	r3, r3, #32
 80135a4:	607b      	str	r3, [r7, #4]
 80135a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80135aa:	460b      	mov	r3, r1
 80135ac:	4313      	orrs	r3, r2
 80135ae:	d011      	beq.n	80135d4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80135b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80135b4:	3328      	adds	r3, #40	@ 0x28
 80135b6:	2102      	movs	r1, #2
 80135b8:	4618      	mov	r0, r3
 80135ba:	f001 f9af 	bl	801491c <RCCEx_PLL3_Config>
 80135be:	4603      	mov	r3, r0
 80135c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80135c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d003      	beq.n	80135d4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80135cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80135d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80135d4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d101      	bne.n	80135e0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80135dc:	2300      	movs	r3, #0
 80135de:	e000      	b.n	80135e2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80135e0:	2301      	movs	r3, #1
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80135e8:	46bd      	mov	sp, r7
 80135ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80135ee:	bf00      	nop
 80135f0:	58024400 	.word	0x58024400

080135f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b090      	sub	sp, #64	@ 0x40
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80135fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013602:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8013606:	430b      	orrs	r3, r1
 8013608:	f040 8094 	bne.w	8013734 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801360c:	4b9b      	ldr	r3, [pc, #620]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801360e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013610:	f003 0307 	and.w	r3, r3, #7
 8013614:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013618:	2b04      	cmp	r3, #4
 801361a:	f200 8087 	bhi.w	801372c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801361e:	a201      	add	r2, pc, #4	@ (adr r2, 8013624 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8013620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013624:	08013639 	.word	0x08013639
 8013628:	08013661 	.word	0x08013661
 801362c:	08013689 	.word	0x08013689
 8013630:	08013725 	.word	0x08013725
 8013634:	080136b1 	.word	0x080136b1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013638:	4b90      	ldr	r3, [pc, #576]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013640:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013644:	d108      	bne.n	8013658 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801364a:	4618      	mov	r0, r3
 801364c:	f000 ff62 	bl	8014514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013654:	f000 bc93 	b.w	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013658:	2300      	movs	r3, #0
 801365a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801365c:	f000 bc8f 	b.w	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013660:	4b86      	ldr	r3, [pc, #536]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013668:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801366c:	d108      	bne.n	8013680 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801366e:	f107 0318 	add.w	r3, r7, #24
 8013672:	4618      	mov	r0, r3
 8013674:	f000 fca6 	bl	8013fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013678:	69bb      	ldr	r3, [r7, #24]
 801367a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801367c:	f000 bc7f 	b.w	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013680:	2300      	movs	r3, #0
 8013682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013684:	f000 bc7b 	b.w	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013688:	4b7c      	ldr	r3, [pc, #496]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013694:	d108      	bne.n	80136a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013696:	f107 030c 	add.w	r3, r7, #12
 801369a:	4618      	mov	r0, r3
 801369c:	f000 fde6 	bl	801426c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136a4:	f000 bc6b 	b.w	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80136a8:	2300      	movs	r3, #0
 80136aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136ac:	f000 bc67 	b.w	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80136b0:	4b72      	ldr	r3, [pc, #456]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80136b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80136b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80136b8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80136ba:	4b70      	ldr	r3, [pc, #448]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	f003 0304 	and.w	r3, r3, #4
 80136c2:	2b04      	cmp	r3, #4
 80136c4:	d10c      	bne.n	80136e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80136c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d109      	bne.n	80136e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80136cc:	4b6b      	ldr	r3, [pc, #428]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	08db      	lsrs	r3, r3, #3
 80136d2:	f003 0303 	and.w	r3, r3, #3
 80136d6:	4a6a      	ldr	r2, [pc, #424]	@ (8013880 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80136d8:	fa22 f303 	lsr.w	r3, r2, r3
 80136dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136de:	e01f      	b.n	8013720 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80136e0:	4b66      	ldr	r3, [pc, #408]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80136e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80136ec:	d106      	bne.n	80136fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80136ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80136f4:	d102      	bne.n	80136fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80136f6:	4b63      	ldr	r3, [pc, #396]	@ (8013884 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80136f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136fa:	e011      	b.n	8013720 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80136fc:	4b5f      	ldr	r3, [pc, #380]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013708:	d106      	bne.n	8013718 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801370a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801370c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013710:	d102      	bne.n	8013718 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013712:	4b5d      	ldr	r3, [pc, #372]	@ (8013888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013716:	e003      	b.n	8013720 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013718:	2300      	movs	r3, #0
 801371a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801371c:	f000 bc2f 	b.w	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013720:	f000 bc2d 	b.w	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013724:	4b59      	ldr	r3, [pc, #356]	@ (801388c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013728:	f000 bc29 	b.w	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801372c:	2300      	movs	r3, #0
 801372e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013730:	f000 bc25 	b.w	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8013734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013738:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 801373c:	430b      	orrs	r3, r1
 801373e:	f040 80a7 	bne.w	8013890 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8013742:	4b4e      	ldr	r3, [pc, #312]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013746:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801374a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801374e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013752:	d054      	beq.n	80137fe <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8013754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013756:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801375a:	f200 808b 	bhi.w	8013874 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801375e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013760:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013764:	f000 8083 	beq.w	801386e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8013768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801376a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801376e:	f200 8081 	bhi.w	8013874 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013778:	d02f      	beq.n	80137da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801377a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801377c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013780:	d878      	bhi.n	8013874 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013784:	2b00      	cmp	r3, #0
 8013786:	d004      	beq.n	8013792 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8013788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801378a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801378e:	d012      	beq.n	80137b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8013790:	e070      	b.n	8013874 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013792:	4b3a      	ldr	r3, [pc, #232]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801379a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801379e:	d107      	bne.n	80137b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80137a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80137a4:	4618      	mov	r0, r3
 80137a6:	f000 feb5 	bl	8014514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80137aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137ae:	e3e6      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137b0:	2300      	movs	r3, #0
 80137b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137b4:	e3e3      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80137b6:	4b31      	ldr	r3, [pc, #196]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80137be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80137c2:	d107      	bne.n	80137d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80137c4:	f107 0318 	add.w	r3, r7, #24
 80137c8:	4618      	mov	r0, r3
 80137ca:	f000 fbfb 	bl	8013fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80137ce:	69bb      	ldr	r3, [r7, #24]
 80137d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137d2:	e3d4      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137d4:	2300      	movs	r3, #0
 80137d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137d8:	e3d1      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80137da:	4b28      	ldr	r3, [pc, #160]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80137e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137e6:	d107      	bne.n	80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80137e8:	f107 030c 	add.w	r3, r7, #12
 80137ec:	4618      	mov	r0, r3
 80137ee:	f000 fd3d 	bl	801426c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137f6:	e3c2      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137f8:	2300      	movs	r3, #0
 80137fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137fc:	e3bf      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80137fe:	4b1f      	ldr	r3, [pc, #124]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013802:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013806:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013808:	4b1c      	ldr	r3, [pc, #112]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	f003 0304 	and.w	r3, r3, #4
 8013810:	2b04      	cmp	r3, #4
 8013812:	d10c      	bne.n	801382e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8013814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013816:	2b00      	cmp	r3, #0
 8013818:	d109      	bne.n	801382e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801381a:	4b18      	ldr	r3, [pc, #96]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	08db      	lsrs	r3, r3, #3
 8013820:	f003 0303 	and.w	r3, r3, #3
 8013824:	4a16      	ldr	r2, [pc, #88]	@ (8013880 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8013826:	fa22 f303 	lsr.w	r3, r2, r3
 801382a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801382c:	e01e      	b.n	801386c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801382e:	4b13      	ldr	r3, [pc, #76]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801383a:	d106      	bne.n	801384a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 801383c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801383e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013842:	d102      	bne.n	801384a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013844:	4b0f      	ldr	r3, [pc, #60]	@ (8013884 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8013846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013848:	e010      	b.n	801386c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801384a:	4b0c      	ldr	r3, [pc, #48]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013856:	d106      	bne.n	8013866 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8013858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801385a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801385e:	d102      	bne.n	8013866 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013860:	4b09      	ldr	r3, [pc, #36]	@ (8013888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013862:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013864:	e002      	b.n	801386c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013866:	2300      	movs	r3, #0
 8013868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801386a:	e388      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801386c:	e387      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801386e:	4b07      	ldr	r3, [pc, #28]	@ (801388c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013872:	e384      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013874:	2300      	movs	r3, #0
 8013876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013878:	e381      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801387a:	bf00      	nop
 801387c:	58024400 	.word	0x58024400
 8013880:	03d09000 	.word	0x03d09000
 8013884:	003d0900 	.word	0x003d0900
 8013888:	016e3600 	.word	0x016e3600
 801388c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8013890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013894:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8013898:	430b      	orrs	r3, r1
 801389a:	f040 809c 	bne.w	80139d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801389e:	4b9e      	ldr	r3, [pc, #632]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80138a2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80138a6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80138a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80138ae:	d054      	beq.n	801395a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80138b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80138b6:	f200 808b 	bhi.w	80139d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80138ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80138c0:	f000 8083 	beq.w	80139ca <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80138c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80138ca:	f200 8081 	bhi.w	80139d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80138ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80138d4:	d02f      	beq.n	8013936 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80138d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80138dc:	d878      	bhi.n	80139d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80138de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d004      	beq.n	80138ee <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80138e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80138ea:	d012      	beq.n	8013912 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80138ec:	e070      	b.n	80139d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80138ee:	4b8a      	ldr	r3, [pc, #552]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80138f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80138fa:	d107      	bne.n	801390c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80138fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013900:	4618      	mov	r0, r3
 8013902:	f000 fe07 	bl	8014514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801390a:	e338      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801390c:	2300      	movs	r3, #0
 801390e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013910:	e335      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013912:	4b81      	ldr	r3, [pc, #516]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801391a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801391e:	d107      	bne.n	8013930 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013920:	f107 0318 	add.w	r3, r7, #24
 8013924:	4618      	mov	r0, r3
 8013926:	f000 fb4d 	bl	8013fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801392a:	69bb      	ldr	r3, [r7, #24]
 801392c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801392e:	e326      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013930:	2300      	movs	r3, #0
 8013932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013934:	e323      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013936:	4b78      	ldr	r3, [pc, #480]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801393e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013942:	d107      	bne.n	8013954 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013944:	f107 030c 	add.w	r3, r7, #12
 8013948:	4618      	mov	r0, r3
 801394a:	f000 fc8f 	bl	801426c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013952:	e314      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013954:	2300      	movs	r3, #0
 8013956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013958:	e311      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801395a:	4b6f      	ldr	r3, [pc, #444]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801395c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801395e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013962:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013964:	4b6c      	ldr	r3, [pc, #432]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	f003 0304 	and.w	r3, r3, #4
 801396c:	2b04      	cmp	r3, #4
 801396e:	d10c      	bne.n	801398a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8013970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013972:	2b00      	cmp	r3, #0
 8013974:	d109      	bne.n	801398a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013976:	4b68      	ldr	r3, [pc, #416]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	08db      	lsrs	r3, r3, #3
 801397c:	f003 0303 	and.w	r3, r3, #3
 8013980:	4a66      	ldr	r2, [pc, #408]	@ (8013b1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8013982:	fa22 f303 	lsr.w	r3, r2, r3
 8013986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013988:	e01e      	b.n	80139c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801398a:	4b63      	ldr	r3, [pc, #396]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013996:	d106      	bne.n	80139a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8013998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801399a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801399e:	d102      	bne.n	80139a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80139a0:	4b5f      	ldr	r3, [pc, #380]	@ (8013b20 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80139a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139a4:	e010      	b.n	80139c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80139a6:	4b5c      	ldr	r3, [pc, #368]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80139ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80139b2:	d106      	bne.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80139b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80139ba:	d102      	bne.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80139bc:	4b59      	ldr	r3, [pc, #356]	@ (8013b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80139be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139c0:	e002      	b.n	80139c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80139c2:	2300      	movs	r3, #0
 80139c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80139c6:	e2da      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80139c8:	e2d9      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80139ca:	4b57      	ldr	r3, [pc, #348]	@ (8013b28 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80139cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139ce:	e2d6      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80139d0:	2300      	movs	r3, #0
 80139d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139d4:	e2d3      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80139d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80139da:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80139de:	430b      	orrs	r3, r1
 80139e0:	f040 80a7 	bne.w	8013b32 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80139e4:	4b4c      	ldr	r3, [pc, #304]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80139e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80139e8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80139ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80139ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80139f4:	d055      	beq.n	8013aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80139f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80139fc:	f200 8096 	bhi.w	8013b2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013a06:	f000 8084 	beq.w	8013b12 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8013a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013a10:	f200 808c 	bhi.w	8013b2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013a1a:	d030      	beq.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8013a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013a22:	f200 8083 	bhi.w	8013b2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d004      	beq.n	8013a36 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8013a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013a32:	d012      	beq.n	8013a5a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8013a34:	e07a      	b.n	8013b2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013a36:	4b38      	ldr	r3, [pc, #224]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013a3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013a42:	d107      	bne.n	8013a54 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f000 fd63 	bl	8014514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a52:	e294      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a54:	2300      	movs	r3, #0
 8013a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a58:	e291      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013a62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013a66:	d107      	bne.n	8013a78 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a68:	f107 0318 	add.w	r3, r7, #24
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f000 faa9 	bl	8013fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013a72:	69bb      	ldr	r3, [r7, #24]
 8013a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a76:	e282      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a7c:	e27f      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013a7e:	4b26      	ldr	r3, [pc, #152]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013a8a:	d107      	bne.n	8013a9c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013a8c:	f107 030c 	add.w	r3, r7, #12
 8013a90:	4618      	mov	r0, r3
 8013a92:	f000 fbeb 	bl	801426c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a9a:	e270      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013aa0:	e26d      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013aa6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013aaa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013aac:	4b1a      	ldr	r3, [pc, #104]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	f003 0304 	and.w	r3, r3, #4
 8013ab4:	2b04      	cmp	r3, #4
 8013ab6:	d10c      	bne.n	8013ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8013ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d109      	bne.n	8013ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013abe:	4b16      	ldr	r3, [pc, #88]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	08db      	lsrs	r3, r3, #3
 8013ac4:	f003 0303 	and.w	r3, r3, #3
 8013ac8:	4a14      	ldr	r2, [pc, #80]	@ (8013b1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8013aca:	fa22 f303 	lsr.w	r3, r2, r3
 8013ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013ad0:	e01e      	b.n	8013b10 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013ad2:	4b11      	ldr	r3, [pc, #68]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013ade:	d106      	bne.n	8013aee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8013ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013ae6:	d102      	bne.n	8013aee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8013b20 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8013aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013aec:	e010      	b.n	8013b10 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013aee:	4b0a      	ldr	r3, [pc, #40]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013af6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013afa:	d106      	bne.n	8013b0a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8013afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b02:	d102      	bne.n	8013b0a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013b04:	4b07      	ldr	r3, [pc, #28]	@ (8013b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b08:	e002      	b.n	8013b10 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013b0e:	e236      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013b10:	e235      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013b12:	4b05      	ldr	r3, [pc, #20]	@ (8013b28 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b16:	e232      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013b18:	58024400 	.word	0x58024400
 8013b1c:	03d09000 	.word	0x03d09000
 8013b20:	003d0900 	.word	0x003d0900
 8013b24:	016e3600 	.word	0x016e3600
 8013b28:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b30:	e225      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8013b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b36:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8013b3a:	430b      	orrs	r3, r1
 8013b3c:	f040 8085 	bne.w	8013c4a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8013b40:	4b9c      	ldr	r3, [pc, #624]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013b44:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8013b48:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8013b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013b50:	d06b      	beq.n	8013c2a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8013b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013b58:	d874      	bhi.n	8013c44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013b60:	d056      	beq.n	8013c10 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8013b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013b68:	d86c      	bhi.n	8013c44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013b70:	d03b      	beq.n	8013bea <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8013b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013b78:	d864      	bhi.n	8013c44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013b80:	d021      	beq.n	8013bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8013b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013b88:	d85c      	bhi.n	8013c44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d004      	beq.n	8013b9a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8013b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013b96:	d004      	beq.n	8013ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8013b98:	e054      	b.n	8013c44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8013b9a:	f7fe fb5f 	bl	801225c <HAL_RCC_GetPCLK1Freq>
 8013b9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013ba0:	e1ed      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013ba2:	4b84      	ldr	r3, [pc, #528]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013baa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013bae:	d107      	bne.n	8013bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013bb0:	f107 0318 	add.w	r3, r7, #24
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f000 fa05 	bl	8013fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013bba:	69fb      	ldr	r3, [r7, #28]
 8013bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013bbe:	e1de      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013bc4:	e1db      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013bc6:	4b7b      	ldr	r3, [pc, #492]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013bce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013bd2:	d107      	bne.n	8013be4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013bd4:	f107 030c 	add.w	r3, r7, #12
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f000 fb47 	bl	801426c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013be2:	e1cc      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013be4:	2300      	movs	r3, #0
 8013be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013be8:	e1c9      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013bea:	4b72      	ldr	r3, [pc, #456]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	f003 0304 	and.w	r3, r3, #4
 8013bf2:	2b04      	cmp	r3, #4
 8013bf4:	d109      	bne.n	8013c0a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013bf6:	4b6f      	ldr	r3, [pc, #444]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	08db      	lsrs	r3, r3, #3
 8013bfc:	f003 0303 	and.w	r3, r3, #3
 8013c00:	4a6d      	ldr	r2, [pc, #436]	@ (8013db8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013c02:	fa22 f303 	lsr.w	r3, r2, r3
 8013c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c08:	e1b9      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c0e:	e1b6      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013c10:	4b68      	ldr	r3, [pc, #416]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c1c:	d102      	bne.n	8013c24 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8013c1e:	4b67      	ldr	r3, [pc, #412]	@ (8013dbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c22:	e1ac      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c24:	2300      	movs	r3, #0
 8013c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c28:	e1a9      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013c2a:	4b62      	ldr	r3, [pc, #392]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013c32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013c36:	d102      	bne.n	8013c3e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8013c38:	4b61      	ldr	r3, [pc, #388]	@ (8013dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c3c:	e19f      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c42:	e19c      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013c44:	2300      	movs	r3, #0
 8013c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c48:	e199      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8013c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c4e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8013c52:	430b      	orrs	r3, r1
 8013c54:	d173      	bne.n	8013d3e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8013c56:	4b57      	ldr	r3, [pc, #348]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013c5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013c5e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013c66:	d02f      	beq.n	8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8013c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013c6e:	d863      	bhi.n	8013d38 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8013c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d004      	beq.n	8013c80 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8013c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013c7c:	d012      	beq.n	8013ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8013c7e:	e05b      	b.n	8013d38 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013c80:	4b4c      	ldr	r3, [pc, #304]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013c88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013c8c:	d107      	bne.n	8013c9e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013c8e:	f107 0318 	add.w	r3, r7, #24
 8013c92:	4618      	mov	r0, r3
 8013c94:	f000 f996 	bl	8013fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013c98:	69bb      	ldr	r3, [r7, #24]
 8013c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c9c:	e16f      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ca2:	e16c      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013ca4:	4b43      	ldr	r3, [pc, #268]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013cb0:	d107      	bne.n	8013cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013cb2:	f107 030c 	add.w	r3, r7, #12
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f000 fad8 	bl	801426c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013cc0:	e15d      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cc6:	e15a      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ccc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013cd0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013cd2:	4b38      	ldr	r3, [pc, #224]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	f003 0304 	and.w	r3, r3, #4
 8013cda:	2b04      	cmp	r3, #4
 8013cdc:	d10c      	bne.n	8013cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8013cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d109      	bne.n	8013cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013ce4:	4b33      	ldr	r3, [pc, #204]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	08db      	lsrs	r3, r3, #3
 8013cea:	f003 0303 	and.w	r3, r3, #3
 8013cee:	4a32      	ldr	r2, [pc, #200]	@ (8013db8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8013cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013cf6:	e01e      	b.n	8013d36 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013d00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013d04:	d106      	bne.n	8013d14 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8013d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013d0c:	d102      	bne.n	8013d14 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8013dbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013d12:	e010      	b.n	8013d36 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013d14:	4b27      	ldr	r3, [pc, #156]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013d1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013d20:	d106      	bne.n	8013d30 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8013d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013d28:	d102      	bne.n	8013d30 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013d2a:	4b25      	ldr	r3, [pc, #148]	@ (8013dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013d2e:	e002      	b.n	8013d36 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013d30:	2300      	movs	r3, #0
 8013d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013d34:	e123      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013d36:	e122      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d3c:	e11f      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d42:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8013d46:	430b      	orrs	r3, r1
 8013d48:	d13c      	bne.n	8013dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8013d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013d4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013d52:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d004      	beq.n	8013d64 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8013d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013d60:	d012      	beq.n	8013d88 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8013d62:	e023      	b.n	8013dac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013d64:	4b13      	ldr	r3, [pc, #76]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013d6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013d70:	d107      	bne.n	8013d82 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013d76:	4618      	mov	r0, r3
 8013d78:	f000 fbcc 	bl	8014514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d80:	e0fd      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013d82:	2300      	movs	r3, #0
 8013d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d86:	e0fa      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013d88:	4b0a      	ldr	r3, [pc, #40]	@ (8013db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013d90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013d94:	d107      	bne.n	8013da6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013d96:	f107 0318 	add.w	r3, r7, #24
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f000 f912 	bl	8013fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013da0:	6a3b      	ldr	r3, [r7, #32]
 8013da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013da4:	e0eb      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013da6:	2300      	movs	r3, #0
 8013da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013daa:	e0e8      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013dac:	2300      	movs	r3, #0
 8013dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013db0:	e0e5      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013db2:	bf00      	nop
 8013db4:	58024400 	.word	0x58024400
 8013db8:	03d09000 	.word	0x03d09000
 8013dbc:	003d0900 	.word	0x003d0900
 8013dc0:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013dc8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8013dcc:	430b      	orrs	r3, r1
 8013dce:	f040 8085 	bne.w	8013edc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8013dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8013f88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013dd6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8013dda:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013de2:	d06b      	beq.n	8013ebc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8013de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013dea:	d874      	bhi.n	8013ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013df2:	d056      	beq.n	8013ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8013df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013dfa:	d86c      	bhi.n	8013ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013e02:	d03b      	beq.n	8013e7c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8013e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013e0a:	d864      	bhi.n	8013ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013e12:	d021      	beq.n	8013e58 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8013e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013e1a:	d85c      	bhi.n	8013ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d004      	beq.n	8013e2c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8013e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013e28:	d004      	beq.n	8013e34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8013e2a:	e054      	b.n	8013ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8013e2c:	f000 f8b4 	bl	8013f98 <HAL_RCCEx_GetD3PCLK1Freq>
 8013e30:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013e32:	e0a4      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013e34:	4b54      	ldr	r3, [pc, #336]	@ (8013f88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013e40:	d107      	bne.n	8013e52 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013e42:	f107 0318 	add.w	r3, r7, #24
 8013e46:	4618      	mov	r0, r3
 8013e48:	f000 f8bc 	bl	8013fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013e4c:	69fb      	ldr	r3, [r7, #28]
 8013e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013e50:	e095      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013e52:	2300      	movs	r3, #0
 8013e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e56:	e092      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013e58:	4b4b      	ldr	r3, [pc, #300]	@ (8013f88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013e64:	d107      	bne.n	8013e76 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013e66:	f107 030c 	add.w	r3, r7, #12
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f000 f9fe 	bl	801426c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013e74:	e083      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013e76:	2300      	movs	r3, #0
 8013e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e7a:	e080      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013e7c:	4b42      	ldr	r3, [pc, #264]	@ (8013f88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	f003 0304 	and.w	r3, r3, #4
 8013e84:	2b04      	cmp	r3, #4
 8013e86:	d109      	bne.n	8013e9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013e88:	4b3f      	ldr	r3, [pc, #252]	@ (8013f88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	08db      	lsrs	r3, r3, #3
 8013e8e:	f003 0303 	and.w	r3, r3, #3
 8013e92:	4a3e      	ldr	r2, [pc, #248]	@ (8013f8c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8013e94:	fa22 f303 	lsr.w	r3, r2, r3
 8013e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013e9a:	e070      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ea0:	e06d      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013ea2:	4b39      	ldr	r3, [pc, #228]	@ (8013f88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013eae:	d102      	bne.n	8013eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8013eb0:	4b37      	ldr	r3, [pc, #220]	@ (8013f90 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8013eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013eb4:	e063      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013eba:	e060      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013ebc:	4b32      	ldr	r3, [pc, #200]	@ (8013f88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013ec4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013ec8:	d102      	bne.n	8013ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8013eca:	4b32      	ldr	r3, [pc, #200]	@ (8013f94 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ece:	e056      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ed4:	e053      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013eda:	e050      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8013edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013ee0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013ee4:	430b      	orrs	r3, r1
 8013ee6:	d148      	bne.n	8013f7a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8013ee8:	4b27      	ldr	r3, [pc, #156]	@ (8013f88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013eec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013ef0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013ef8:	d02a      	beq.n	8013f50 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8013efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013f00:	d838      	bhi.n	8013f74 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8013f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d004      	beq.n	8013f12 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8013f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013f0e:	d00d      	beq.n	8013f2c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8013f10:	e030      	b.n	8013f74 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013f12:	4b1d      	ldr	r3, [pc, #116]	@ (8013f88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013f1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013f1e:	d102      	bne.n	8013f26 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8013f20:	4b1c      	ldr	r3, [pc, #112]	@ (8013f94 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013f24:	e02b      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013f26:	2300      	movs	r3, #0
 8013f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013f2a:	e028      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013f2c:	4b16      	ldr	r3, [pc, #88]	@ (8013f88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013f34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013f38:	d107      	bne.n	8013f4a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f000 fae8 	bl	8014514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013f48:	e019      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013f4e:	e016      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013f50:	4b0d      	ldr	r3, [pc, #52]	@ (8013f88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013f58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013f5c:	d107      	bne.n	8013f6e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013f5e:	f107 0318 	add.w	r3, r7, #24
 8013f62:	4618      	mov	r0, r3
 8013f64:	f000 f82e 	bl	8013fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013f68:	69fb      	ldr	r3, [r7, #28]
 8013f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013f6c:	e007      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013f72:	e004      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013f74:	2300      	movs	r3, #0
 8013f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013f78:	e001      	b.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8013f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	3740      	adds	r7, #64	@ 0x40
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}
 8013f88:	58024400 	.word	0x58024400
 8013f8c:	03d09000 	.word	0x03d09000
 8013f90:	003d0900 	.word	0x003d0900
 8013f94:	016e3600 	.word	0x016e3600

08013f98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013f9c:	f7fe f92e 	bl	80121fc <HAL_RCC_GetHCLKFreq>
 8013fa0:	4602      	mov	r2, r0
 8013fa2:	4b06      	ldr	r3, [pc, #24]	@ (8013fbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013fa4:	6a1b      	ldr	r3, [r3, #32]
 8013fa6:	091b      	lsrs	r3, r3, #4
 8013fa8:	f003 0307 	and.w	r3, r3, #7
 8013fac:	4904      	ldr	r1, [pc, #16]	@ (8013fc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013fae:	5ccb      	ldrb	r3, [r1, r3]
 8013fb0:	f003 031f 	and.w	r3, r3, #31
 8013fb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013fb8:	4618      	mov	r0, r3
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	58024400 	.word	0x58024400
 8013fc0:	0801f29c 	.word	0x0801f29c

08013fc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013fc4:	b480      	push	{r7}
 8013fc6:	b089      	sub	sp, #36	@ 0x24
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013fcc:	4ba1      	ldr	r3, [pc, #644]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fd0:	f003 0303 	and.w	r3, r3, #3
 8013fd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013fd6:	4b9f      	ldr	r3, [pc, #636]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fda:	0b1b      	lsrs	r3, r3, #12
 8013fdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013fe0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013fe2:	4b9c      	ldr	r3, [pc, #624]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fe6:	091b      	lsrs	r3, r3, #4
 8013fe8:	f003 0301 	and.w	r3, r3, #1
 8013fec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8013fee:	4b99      	ldr	r3, [pc, #612]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ff2:	08db      	lsrs	r3, r3, #3
 8013ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ff8:	693a      	ldr	r2, [r7, #16]
 8013ffa:	fb02 f303 	mul.w	r3, r2, r3
 8013ffe:	ee07 3a90 	vmov	s15, r3
 8014002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014006:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	2b00      	cmp	r3, #0
 801400e:	f000 8111 	beq.w	8014234 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8014012:	69bb      	ldr	r3, [r7, #24]
 8014014:	2b02      	cmp	r3, #2
 8014016:	f000 8083 	beq.w	8014120 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801401a:	69bb      	ldr	r3, [r7, #24]
 801401c:	2b02      	cmp	r3, #2
 801401e:	f200 80a1 	bhi.w	8014164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8014022:	69bb      	ldr	r3, [r7, #24]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d003      	beq.n	8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8014028:	69bb      	ldr	r3, [r7, #24]
 801402a:	2b01      	cmp	r3, #1
 801402c:	d056      	beq.n	80140dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801402e:	e099      	b.n	8014164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014030:	4b88      	ldr	r3, [pc, #544]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	f003 0320 	and.w	r3, r3, #32
 8014038:	2b00      	cmp	r3, #0
 801403a:	d02d      	beq.n	8014098 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801403c:	4b85      	ldr	r3, [pc, #532]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	08db      	lsrs	r3, r3, #3
 8014042:	f003 0303 	and.w	r3, r3, #3
 8014046:	4a84      	ldr	r2, [pc, #528]	@ (8014258 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8014048:	fa22 f303 	lsr.w	r3, r2, r3
 801404c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	ee07 3a90 	vmov	s15, r3
 8014054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	ee07 3a90 	vmov	s15, r3
 801405e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014066:	4b7b      	ldr	r3, [pc, #492]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8014068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801406a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801406e:	ee07 3a90 	vmov	s15, r3
 8014072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014076:	ed97 6a03 	vldr	s12, [r7, #12]
 801407a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801425c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801407e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801408a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801408e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014092:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8014096:	e087      	b.n	80141a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8014098:	697b      	ldr	r3, [r7, #20]
 801409a:	ee07 3a90 	vmov	s15, r3
 801409e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8014260 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80140a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140aa:	4b6a      	ldr	r3, [pc, #424]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80140ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140b2:	ee07 3a90 	vmov	s15, r3
 80140b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80140be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801425c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80140c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80140c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80140ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80140da:	e065      	b.n	80141a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80140dc:	697b      	ldr	r3, [r7, #20]
 80140de:	ee07 3a90 	vmov	s15, r3
 80140e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8014264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80140ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140ee:	4b59      	ldr	r3, [pc, #356]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80140f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140f6:	ee07 3a90 	vmov	s15, r3
 80140fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8014102:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801425c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8014106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801410a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801410e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014116:	ee67 7a27 	vmul.f32	s15, s14, s15
 801411a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801411e:	e043      	b.n	80141a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8014120:	697b      	ldr	r3, [r7, #20]
 8014122:	ee07 3a90 	vmov	s15, r3
 8014126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801412a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8014268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801412e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014132:	4b48      	ldr	r3, [pc, #288]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8014134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801413a:	ee07 3a90 	vmov	s15, r3
 801413e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014142:	ed97 6a03 	vldr	s12, [r7, #12]
 8014146:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801425c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801414a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801414e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801415a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801415e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014162:	e021      	b.n	80141a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	ee07 3a90 	vmov	s15, r3
 801416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801416e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8014172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014176:	4b37      	ldr	r3, [pc, #220]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8014178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801417a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801417e:	ee07 3a90 	vmov	s15, r3
 8014182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014186:	ed97 6a03 	vldr	s12, [r7, #12]
 801418a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801425c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801418e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801419a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801419e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80141a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80141a8:	4b2a      	ldr	r3, [pc, #168]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80141aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141ac:	0a5b      	lsrs	r3, r3, #9
 80141ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141b2:	ee07 3a90 	vmov	s15, r3
 80141b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80141be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80141c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80141c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80141ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80141ce:	ee17 2a90 	vmov	r2, s15
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80141d6:	4b1f      	ldr	r3, [pc, #124]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80141d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141da:	0c1b      	lsrs	r3, r3, #16
 80141dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141e0:	ee07 3a90 	vmov	s15, r3
 80141e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80141ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80141f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80141f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80141f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80141fc:	ee17 2a90 	vmov	r2, s15
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8014204:	4b13      	ldr	r3, [pc, #76]	@ (8014254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8014206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014208:	0e1b      	lsrs	r3, r3, #24
 801420a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801420e:	ee07 3a90 	vmov	s15, r3
 8014212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801421a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801421e:	edd7 6a07 	vldr	s13, [r7, #28]
 8014222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801422a:	ee17 2a90 	vmov	r2, s15
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8014232:	e008      	b.n	8014246 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2200      	movs	r2, #0
 8014238:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	2200      	movs	r2, #0
 801423e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2200      	movs	r2, #0
 8014244:	609a      	str	r2, [r3, #8]
}
 8014246:	bf00      	nop
 8014248:	3724      	adds	r7, #36	@ 0x24
 801424a:	46bd      	mov	sp, r7
 801424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014250:	4770      	bx	lr
 8014252:	bf00      	nop
 8014254:	58024400 	.word	0x58024400
 8014258:	03d09000 	.word	0x03d09000
 801425c:	46000000 	.word	0x46000000
 8014260:	4c742400 	.word	0x4c742400
 8014264:	4a742400 	.word	0x4a742400
 8014268:	4bb71b00 	.word	0x4bb71b00

0801426c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801426c:	b480      	push	{r7}
 801426e:	b089      	sub	sp, #36	@ 0x24
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014274:	4ba1      	ldr	r3, [pc, #644]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014278:	f003 0303 	and.w	r3, r3, #3
 801427c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801427e:	4b9f      	ldr	r3, [pc, #636]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014282:	0d1b      	lsrs	r3, r3, #20
 8014284:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014288:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801428a:	4b9c      	ldr	r3, [pc, #624]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801428c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801428e:	0a1b      	lsrs	r3, r3, #8
 8014290:	f003 0301 	and.w	r3, r3, #1
 8014294:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8014296:	4b99      	ldr	r3, [pc, #612]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801429a:	08db      	lsrs	r3, r3, #3
 801429c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142a0:	693a      	ldr	r2, [r7, #16]
 80142a2:	fb02 f303 	mul.w	r3, r2, r3
 80142a6:	ee07 3a90 	vmov	s15, r3
 80142aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80142b2:	697b      	ldr	r3, [r7, #20]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	f000 8111 	beq.w	80144dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80142ba:	69bb      	ldr	r3, [r7, #24]
 80142bc:	2b02      	cmp	r3, #2
 80142be:	f000 8083 	beq.w	80143c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80142c2:	69bb      	ldr	r3, [r7, #24]
 80142c4:	2b02      	cmp	r3, #2
 80142c6:	f200 80a1 	bhi.w	801440c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80142ca:	69bb      	ldr	r3, [r7, #24]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d003      	beq.n	80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80142d0:	69bb      	ldr	r3, [r7, #24]
 80142d2:	2b01      	cmp	r3, #1
 80142d4:	d056      	beq.n	8014384 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80142d6:	e099      	b.n	801440c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80142d8:	4b88      	ldr	r3, [pc, #544]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	f003 0320 	and.w	r3, r3, #32
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d02d      	beq.n	8014340 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80142e4:	4b85      	ldr	r3, [pc, #532]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	08db      	lsrs	r3, r3, #3
 80142ea:	f003 0303 	and.w	r3, r3, #3
 80142ee:	4a84      	ldr	r2, [pc, #528]	@ (8014500 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80142f0:	fa22 f303 	lsr.w	r3, r2, r3
 80142f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80142f6:	68bb      	ldr	r3, [r7, #8]
 80142f8:	ee07 3a90 	vmov	s15, r3
 80142fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	ee07 3a90 	vmov	s15, r3
 8014306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801430a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801430e:	4b7b      	ldr	r3, [pc, #492]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014316:	ee07 3a90 	vmov	s15, r3
 801431a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801431e:	ed97 6a03 	vldr	s12, [r7, #12]
 8014322:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8014504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801432a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801432e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014336:	ee67 7a27 	vmul.f32	s15, s14, s15
 801433a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801433e:	e087      	b.n	8014450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	ee07 3a90 	vmov	s15, r3
 8014346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801434a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8014508 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014352:	4b6a      	ldr	r3, [pc, #424]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801435a:	ee07 3a90 	vmov	s15, r3
 801435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014362:	ed97 6a03 	vldr	s12, [r7, #12]
 8014366:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8014504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801437e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014382:	e065      	b.n	8014450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	ee07 3a90 	vmov	s15, r3
 801438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801438e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801450c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8014392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014396:	4b59      	ldr	r3, [pc, #356]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801439e:	ee07 3a90 	vmov	s15, r3
 80143a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80143aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8014504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80143ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80143b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80143b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80143ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80143be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80143c6:	e043      	b.n	8014450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	ee07 3a90 	vmov	s15, r3
 80143ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8014510 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80143d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80143da:	4b48      	ldr	r3, [pc, #288]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80143dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80143de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143e2:	ee07 3a90 	vmov	s15, r3
 80143e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80143ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80143f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80143f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80143fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80143fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801440a:	e021      	b.n	8014450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801440c:	697b      	ldr	r3, [r7, #20]
 801440e:	ee07 3a90 	vmov	s15, r3
 8014412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014416:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801450c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801441a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801441e:	4b37      	ldr	r3, [pc, #220]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014426:	ee07 3a90 	vmov	s15, r3
 801442a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801442e:	ed97 6a03 	vldr	s12, [r7, #12]
 8014432:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801443a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801443e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014446:	ee67 7a27 	vmul.f32	s15, s14, s15
 801444a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801444e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8014450:	4b2a      	ldr	r3, [pc, #168]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014454:	0a5b      	lsrs	r3, r3, #9
 8014456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801445a:	ee07 3a90 	vmov	s15, r3
 801445e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014466:	ee37 7a87 	vadd.f32	s14, s15, s14
 801446a:	edd7 6a07 	vldr	s13, [r7, #28]
 801446e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014476:	ee17 2a90 	vmov	r2, s15
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801447e:	4b1f      	ldr	r3, [pc, #124]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014482:	0c1b      	lsrs	r3, r3, #16
 8014484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014488:	ee07 3a90 	vmov	s15, r3
 801448c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014490:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014494:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014498:	edd7 6a07 	vldr	s13, [r7, #28]
 801449c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80144a4:	ee17 2a90 	vmov	r2, s15
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80144ac:	4b13      	ldr	r3, [pc, #76]	@ (80144fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80144ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80144b0:	0e1b      	lsrs	r3, r3, #24
 80144b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144b6:	ee07 3a90 	vmov	s15, r3
 80144ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80144c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80144c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80144ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80144d2:	ee17 2a90 	vmov	r2, s15
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80144da:	e008      	b.n	80144ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2200      	movs	r2, #0
 80144e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	2200      	movs	r2, #0
 80144e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	2200      	movs	r2, #0
 80144ec:	609a      	str	r2, [r3, #8]
}
 80144ee:	bf00      	nop
 80144f0:	3724      	adds	r7, #36	@ 0x24
 80144f2:	46bd      	mov	sp, r7
 80144f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f8:	4770      	bx	lr
 80144fa:	bf00      	nop
 80144fc:	58024400 	.word	0x58024400
 8014500:	03d09000 	.word	0x03d09000
 8014504:	46000000 	.word	0x46000000
 8014508:	4c742400 	.word	0x4c742400
 801450c:	4a742400 	.word	0x4a742400
 8014510:	4bb71b00 	.word	0x4bb71b00

08014514 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8014514:	b480      	push	{r7}
 8014516:	b089      	sub	sp, #36	@ 0x24
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801451c:	4ba0      	ldr	r3, [pc, #640]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801451e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014520:	f003 0303 	and.w	r3, r3, #3
 8014524:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8014526:	4b9e      	ldr	r3, [pc, #632]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801452a:	091b      	lsrs	r3, r3, #4
 801452c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014530:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8014532:	4b9b      	ldr	r3, [pc, #620]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014536:	f003 0301 	and.w	r3, r3, #1
 801453a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801453c:	4b98      	ldr	r3, [pc, #608]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801453e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014540:	08db      	lsrs	r3, r3, #3
 8014542:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014546:	693a      	ldr	r2, [r7, #16]
 8014548:	fb02 f303 	mul.w	r3, r2, r3
 801454c:	ee07 3a90 	vmov	s15, r3
 8014550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014554:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8014558:	697b      	ldr	r3, [r7, #20]
 801455a:	2b00      	cmp	r3, #0
 801455c:	f000 8111 	beq.w	8014782 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8014560:	69bb      	ldr	r3, [r7, #24]
 8014562:	2b02      	cmp	r3, #2
 8014564:	f000 8083 	beq.w	801466e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8014568:	69bb      	ldr	r3, [r7, #24]
 801456a:	2b02      	cmp	r3, #2
 801456c:	f200 80a1 	bhi.w	80146b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8014570:	69bb      	ldr	r3, [r7, #24]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d003      	beq.n	801457e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8014576:	69bb      	ldr	r3, [r7, #24]
 8014578:	2b01      	cmp	r3, #1
 801457a:	d056      	beq.n	801462a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801457c:	e099      	b.n	80146b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801457e:	4b88      	ldr	r3, [pc, #544]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	f003 0320 	and.w	r3, r3, #32
 8014586:	2b00      	cmp	r3, #0
 8014588:	d02d      	beq.n	80145e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801458a:	4b85      	ldr	r3, [pc, #532]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	08db      	lsrs	r3, r3, #3
 8014590:	f003 0303 	and.w	r3, r3, #3
 8014594:	4a83      	ldr	r2, [pc, #524]	@ (80147a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8014596:	fa22 f303 	lsr.w	r3, r2, r3
 801459a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	ee07 3a90 	vmov	s15, r3
 80145a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	ee07 3a90 	vmov	s15, r3
 80145ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80145b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80145b4:	4b7a      	ldr	r3, [pc, #488]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80145b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145bc:	ee07 3a90 	vmov	s15, r3
 80145c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80145c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80145c8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80147a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80145cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80145d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80145d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80145d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80145dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80145e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80145e4:	e087      	b.n	80146f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80145e6:	697b      	ldr	r3, [r7, #20]
 80145e8:	ee07 3a90 	vmov	s15, r3
 80145ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80145f0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80147ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80145f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80145f8:	4b69      	ldr	r3, [pc, #420]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80145fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014600:	ee07 3a90 	vmov	s15, r3
 8014604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014608:	ed97 6a03 	vldr	s12, [r7, #12]
 801460c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80147a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014618:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801461c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014624:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014628:	e065      	b.n	80146f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	ee07 3a90 	vmov	s15, r3
 8014630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014634:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80147b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8014638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801463c:	4b58      	ldr	r3, [pc, #352]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014644:	ee07 3a90 	vmov	s15, r3
 8014648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801464c:	ed97 6a03 	vldr	s12, [r7, #12]
 8014650:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80147a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801465c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014668:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801466c:	e043      	b.n	80146f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801466e:	697b      	ldr	r3, [r7, #20]
 8014670:	ee07 3a90 	vmov	s15, r3
 8014674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014678:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80147b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801467c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014680:	4b47      	ldr	r3, [pc, #284]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014688:	ee07 3a90 	vmov	s15, r3
 801468c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014690:	ed97 6a03 	vldr	s12, [r7, #12]
 8014694:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80147a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801469c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80146a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80146a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80146ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80146b0:	e021      	b.n	80146f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80146b2:	697b      	ldr	r3, [r7, #20]
 80146b4:	ee07 3a90 	vmov	s15, r3
 80146b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80146bc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80147ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80146c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80146c4:	4b36      	ldr	r3, [pc, #216]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80146c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80146c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146cc:	ee07 3a90 	vmov	s15, r3
 80146d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80146d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80146d8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80147a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80146dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80146e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80146e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80146e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80146f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80146f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80146f6:	4b2a      	ldr	r3, [pc, #168]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80146f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80146fa:	0a5b      	lsrs	r3, r3, #9
 80146fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014700:	ee07 3a90 	vmov	s15, r3
 8014704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014708:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801470c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014710:	edd7 6a07 	vldr	s13, [r7, #28]
 8014714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801471c:	ee17 2a90 	vmov	r2, s15
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8014724:	4b1e      	ldr	r3, [pc, #120]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014728:	0c1b      	lsrs	r3, r3, #16
 801472a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801472e:	ee07 3a90 	vmov	s15, r3
 8014732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014736:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801473a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801473e:	edd7 6a07 	vldr	s13, [r7, #28]
 8014742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801474a:	ee17 2a90 	vmov	r2, s15
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8014752:	4b13      	ldr	r3, [pc, #76]	@ (80147a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014756:	0e1b      	lsrs	r3, r3, #24
 8014758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801475c:	ee07 3a90 	vmov	s15, r3
 8014760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014764:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014768:	ee37 7a87 	vadd.f32	s14, s15, s14
 801476c:	edd7 6a07 	vldr	s13, [r7, #28]
 8014770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014778:	ee17 2a90 	vmov	r2, s15
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8014780:	e008      	b.n	8014794 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	2200      	movs	r2, #0
 8014786:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2200      	movs	r2, #0
 801478c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	2200      	movs	r2, #0
 8014792:	609a      	str	r2, [r3, #8]
}
 8014794:	bf00      	nop
 8014796:	3724      	adds	r7, #36	@ 0x24
 8014798:	46bd      	mov	sp, r7
 801479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479e:	4770      	bx	lr
 80147a0:	58024400 	.word	0x58024400
 80147a4:	03d09000 	.word	0x03d09000
 80147a8:	46000000 	.word	0x46000000
 80147ac:	4c742400 	.word	0x4c742400
 80147b0:	4a742400 	.word	0x4a742400
 80147b4:	4bb71b00 	.word	0x4bb71b00

080147b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b084      	sub	sp, #16
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80147c2:	2300      	movs	r3, #0
 80147c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80147c6:	4b53      	ldr	r3, [pc, #332]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 80147c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147ca:	f003 0303 	and.w	r3, r3, #3
 80147ce:	2b03      	cmp	r3, #3
 80147d0:	d101      	bne.n	80147d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80147d2:	2301      	movs	r3, #1
 80147d4:	e099      	b.n	801490a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80147d6:	4b4f      	ldr	r3, [pc, #316]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	4a4e      	ldr	r2, [pc, #312]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 80147dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80147e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80147e2:	f7f4 ffcd 	bl	8009780 <HAL_GetTick>
 80147e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80147e8:	e008      	b.n	80147fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80147ea:	f7f4 ffc9 	bl	8009780 <HAL_GetTick>
 80147ee:	4602      	mov	r2, r0
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	1ad3      	subs	r3, r2, r3
 80147f4:	2b02      	cmp	r3, #2
 80147f6:	d901      	bls.n	80147fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80147f8:	2303      	movs	r3, #3
 80147fa:	e086      	b.n	801490a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80147fc:	4b45      	ldr	r3, [pc, #276]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014804:	2b00      	cmp	r3, #0
 8014806:	d1f0      	bne.n	80147ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8014808:	4b42      	ldr	r3, [pc, #264]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 801480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801480c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	031b      	lsls	r3, r3, #12
 8014816:	493f      	ldr	r1, [pc, #252]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 8014818:	4313      	orrs	r3, r2
 801481a:	628b      	str	r3, [r1, #40]	@ 0x28
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	685b      	ldr	r3, [r3, #4]
 8014820:	3b01      	subs	r3, #1
 8014822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	689b      	ldr	r3, [r3, #8]
 801482a:	3b01      	subs	r3, #1
 801482c:	025b      	lsls	r3, r3, #9
 801482e:	b29b      	uxth	r3, r3
 8014830:	431a      	orrs	r2, r3
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	68db      	ldr	r3, [r3, #12]
 8014836:	3b01      	subs	r3, #1
 8014838:	041b      	lsls	r3, r3, #16
 801483a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801483e:	431a      	orrs	r2, r3
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	691b      	ldr	r3, [r3, #16]
 8014844:	3b01      	subs	r3, #1
 8014846:	061b      	lsls	r3, r3, #24
 8014848:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801484c:	4931      	ldr	r1, [pc, #196]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 801484e:	4313      	orrs	r3, r2
 8014850:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8014852:	4b30      	ldr	r3, [pc, #192]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 8014854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014856:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	695b      	ldr	r3, [r3, #20]
 801485e:	492d      	ldr	r1, [pc, #180]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 8014860:	4313      	orrs	r3, r2
 8014862:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8014864:	4b2b      	ldr	r3, [pc, #172]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 8014866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014868:	f023 0220 	bic.w	r2, r3, #32
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	699b      	ldr	r3, [r3, #24]
 8014870:	4928      	ldr	r1, [pc, #160]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 8014872:	4313      	orrs	r3, r2
 8014874:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8014876:	4b27      	ldr	r3, [pc, #156]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 8014878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801487a:	4a26      	ldr	r2, [pc, #152]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 801487c:	f023 0310 	bic.w	r3, r3, #16
 8014880:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8014882:	4b24      	ldr	r3, [pc, #144]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 8014884:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014886:	4b24      	ldr	r3, [pc, #144]	@ (8014918 <RCCEx_PLL2_Config+0x160>)
 8014888:	4013      	ands	r3, r2
 801488a:	687a      	ldr	r2, [r7, #4]
 801488c:	69d2      	ldr	r2, [r2, #28]
 801488e:	00d2      	lsls	r2, r2, #3
 8014890:	4920      	ldr	r1, [pc, #128]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 8014892:	4313      	orrs	r3, r2
 8014894:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8014896:	4b1f      	ldr	r3, [pc, #124]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 8014898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801489a:	4a1e      	ldr	r2, [pc, #120]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 801489c:	f043 0310 	orr.w	r3, r3, #16
 80148a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d106      	bne.n	80148b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80148a8:	4b1a      	ldr	r3, [pc, #104]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 80148aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148ac:	4a19      	ldr	r2, [pc, #100]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 80148ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80148b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80148b4:	e00f      	b.n	80148d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	2b01      	cmp	r3, #1
 80148ba:	d106      	bne.n	80148ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80148bc:	4b15      	ldr	r3, [pc, #84]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 80148be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148c0:	4a14      	ldr	r2, [pc, #80]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 80148c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80148c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80148c8:	e005      	b.n	80148d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80148ca:	4b12      	ldr	r3, [pc, #72]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 80148cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148ce:	4a11      	ldr	r2, [pc, #68]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 80148d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80148d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80148d6:	4b0f      	ldr	r3, [pc, #60]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	4a0e      	ldr	r2, [pc, #56]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 80148dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80148e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80148e2:	f7f4 ff4d 	bl	8009780 <HAL_GetTick>
 80148e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80148e8:	e008      	b.n	80148fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80148ea:	f7f4 ff49 	bl	8009780 <HAL_GetTick>
 80148ee:	4602      	mov	r2, r0
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	1ad3      	subs	r3, r2, r3
 80148f4:	2b02      	cmp	r3, #2
 80148f6:	d901      	bls.n	80148fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80148f8:	2303      	movs	r3, #3
 80148fa:	e006      	b.n	801490a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80148fc:	4b05      	ldr	r3, [pc, #20]	@ (8014914 <RCCEx_PLL2_Config+0x15c>)
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014904:	2b00      	cmp	r3, #0
 8014906:	d0f0      	beq.n	80148ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8014908:	7bfb      	ldrb	r3, [r7, #15]
}
 801490a:	4618      	mov	r0, r3
 801490c:	3710      	adds	r7, #16
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}
 8014912:	bf00      	nop
 8014914:	58024400 	.word	0x58024400
 8014918:	ffff0007 	.word	0xffff0007

0801491c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014926:	2300      	movs	r3, #0
 8014928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801492a:	4b53      	ldr	r3, [pc, #332]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 801492c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801492e:	f003 0303 	and.w	r3, r3, #3
 8014932:	2b03      	cmp	r3, #3
 8014934:	d101      	bne.n	801493a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8014936:	2301      	movs	r3, #1
 8014938:	e099      	b.n	8014a6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801493a:	4b4f      	ldr	r3, [pc, #316]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	4a4e      	ldr	r2, [pc, #312]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 8014940:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014946:	f7f4 ff1b 	bl	8009780 <HAL_GetTick>
 801494a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801494c:	e008      	b.n	8014960 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801494e:	f7f4 ff17 	bl	8009780 <HAL_GetTick>
 8014952:	4602      	mov	r2, r0
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	1ad3      	subs	r3, r2, r3
 8014958:	2b02      	cmp	r3, #2
 801495a:	d901      	bls.n	8014960 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801495c:	2303      	movs	r3, #3
 801495e:	e086      	b.n	8014a6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014960:	4b45      	ldr	r3, [pc, #276]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014968:	2b00      	cmp	r3, #0
 801496a:	d1f0      	bne.n	801494e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801496c:	4b42      	ldr	r3, [pc, #264]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 801496e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014970:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	051b      	lsls	r3, r3, #20
 801497a:	493f      	ldr	r1, [pc, #252]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 801497c:	4313      	orrs	r3, r2
 801497e:	628b      	str	r3, [r1, #40]	@ 0x28
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	685b      	ldr	r3, [r3, #4]
 8014984:	3b01      	subs	r3, #1
 8014986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	689b      	ldr	r3, [r3, #8]
 801498e:	3b01      	subs	r3, #1
 8014990:	025b      	lsls	r3, r3, #9
 8014992:	b29b      	uxth	r3, r3
 8014994:	431a      	orrs	r2, r3
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	68db      	ldr	r3, [r3, #12]
 801499a:	3b01      	subs	r3, #1
 801499c:	041b      	lsls	r3, r3, #16
 801499e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80149a2:	431a      	orrs	r2, r3
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	691b      	ldr	r3, [r3, #16]
 80149a8:	3b01      	subs	r3, #1
 80149aa:	061b      	lsls	r3, r3, #24
 80149ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80149b0:	4931      	ldr	r1, [pc, #196]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 80149b2:	4313      	orrs	r3, r2
 80149b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80149b6:	4b30      	ldr	r3, [pc, #192]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 80149b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	695b      	ldr	r3, [r3, #20]
 80149c2:	492d      	ldr	r1, [pc, #180]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 80149c4:	4313      	orrs	r3, r2
 80149c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80149c8:	4b2b      	ldr	r3, [pc, #172]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 80149ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	699b      	ldr	r3, [r3, #24]
 80149d4:	4928      	ldr	r1, [pc, #160]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 80149d6:	4313      	orrs	r3, r2
 80149d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80149da:	4b27      	ldr	r3, [pc, #156]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 80149dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149de:	4a26      	ldr	r2, [pc, #152]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 80149e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80149e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80149e6:	4b24      	ldr	r3, [pc, #144]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 80149e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80149ea:	4b24      	ldr	r3, [pc, #144]	@ (8014a7c <RCCEx_PLL3_Config+0x160>)
 80149ec:	4013      	ands	r3, r2
 80149ee:	687a      	ldr	r2, [r7, #4]
 80149f0:	69d2      	ldr	r2, [r2, #28]
 80149f2:	00d2      	lsls	r2, r2, #3
 80149f4:	4920      	ldr	r1, [pc, #128]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 80149f6:	4313      	orrs	r3, r2
 80149f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80149fa:	4b1f      	ldr	r3, [pc, #124]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 80149fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149fe:	4a1e      	ldr	r2, [pc, #120]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 8014a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014a04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d106      	bne.n	8014a1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 8014a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a10:	4a19      	ldr	r2, [pc, #100]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 8014a12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8014a16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014a18:	e00f      	b.n	8014a3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	2b01      	cmp	r3, #1
 8014a1e:	d106      	bne.n	8014a2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014a20:	4b15      	ldr	r3, [pc, #84]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 8014a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a24:	4a14      	ldr	r2, [pc, #80]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 8014a26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014a2c:	e005      	b.n	8014a3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014a2e:	4b12      	ldr	r3, [pc, #72]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 8014a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a32:	4a11      	ldr	r2, [pc, #68]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 8014a34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014a38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8014a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 8014a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014a46:	f7f4 fe9b 	bl	8009780 <HAL_GetTick>
 8014a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014a4c:	e008      	b.n	8014a60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014a4e:	f7f4 fe97 	bl	8009780 <HAL_GetTick>
 8014a52:	4602      	mov	r2, r0
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	1ad3      	subs	r3, r2, r3
 8014a58:	2b02      	cmp	r3, #2
 8014a5a:	d901      	bls.n	8014a60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014a5c:	2303      	movs	r3, #3
 8014a5e:	e006      	b.n	8014a6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014a60:	4b05      	ldr	r3, [pc, #20]	@ (8014a78 <RCCEx_PLL3_Config+0x15c>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d0f0      	beq.n	8014a4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3710      	adds	r7, #16
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}
 8014a76:	bf00      	nop
 8014a78:	58024400 	.word	0x58024400
 8014a7c:	ffff0007 	.word	0xffff0007

08014a80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b084      	sub	sp, #16
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d101      	bne.n	8014a92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8014a8e:	2301      	movs	r3, #1
 8014a90:	e10f      	b.n	8014cb2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	2200      	movs	r2, #0
 8014a96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	4a87      	ldr	r2, [pc, #540]	@ (8014cbc <HAL_SPI_Init+0x23c>)
 8014a9e:	4293      	cmp	r3, r2
 8014aa0:	d00f      	beq.n	8014ac2 <HAL_SPI_Init+0x42>
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	4a86      	ldr	r2, [pc, #536]	@ (8014cc0 <HAL_SPI_Init+0x240>)
 8014aa8:	4293      	cmp	r3, r2
 8014aaa:	d00a      	beq.n	8014ac2 <HAL_SPI_Init+0x42>
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	4a84      	ldr	r2, [pc, #528]	@ (8014cc4 <HAL_SPI_Init+0x244>)
 8014ab2:	4293      	cmp	r3, r2
 8014ab4:	d005      	beq.n	8014ac2 <HAL_SPI_Init+0x42>
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	68db      	ldr	r3, [r3, #12]
 8014aba:	2b0f      	cmp	r3, #15
 8014abc:	d901      	bls.n	8014ac2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8014abe:	2301      	movs	r3, #1
 8014ac0:	e0f7      	b.n	8014cb2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f001 ff76 	bl	80169b4 <SPI_GetPacketSize>
 8014ac8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	4a7b      	ldr	r2, [pc, #492]	@ (8014cbc <HAL_SPI_Init+0x23c>)
 8014ad0:	4293      	cmp	r3, r2
 8014ad2:	d00c      	beq.n	8014aee <HAL_SPI_Init+0x6e>
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	4a79      	ldr	r2, [pc, #484]	@ (8014cc0 <HAL_SPI_Init+0x240>)
 8014ada:	4293      	cmp	r3, r2
 8014adc:	d007      	beq.n	8014aee <HAL_SPI_Init+0x6e>
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	4a78      	ldr	r2, [pc, #480]	@ (8014cc4 <HAL_SPI_Init+0x244>)
 8014ae4:	4293      	cmp	r3, r2
 8014ae6:	d002      	beq.n	8014aee <HAL_SPI_Init+0x6e>
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	2b08      	cmp	r3, #8
 8014aec:	d811      	bhi.n	8014b12 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8014af2:	4a72      	ldr	r2, [pc, #456]	@ (8014cbc <HAL_SPI_Init+0x23c>)
 8014af4:	4293      	cmp	r3, r2
 8014af6:	d009      	beq.n	8014b0c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	4a70      	ldr	r2, [pc, #448]	@ (8014cc0 <HAL_SPI_Init+0x240>)
 8014afe:	4293      	cmp	r3, r2
 8014b00:	d004      	beq.n	8014b0c <HAL_SPI_Init+0x8c>
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	4a6f      	ldr	r2, [pc, #444]	@ (8014cc4 <HAL_SPI_Init+0x244>)
 8014b08:	4293      	cmp	r3, r2
 8014b0a:	d104      	bne.n	8014b16 <HAL_SPI_Init+0x96>
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	2b10      	cmp	r3, #16
 8014b10:	d901      	bls.n	8014b16 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8014b12:	2301      	movs	r3, #1
 8014b14:	e0cd      	b.n	8014cb2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014b1c:	b2db      	uxtb	r3, r3
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d106      	bne.n	8014b30 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2200      	movs	r2, #0
 8014b26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014b2a:	6878      	ldr	r0, [r7, #4]
 8014b2c:	f7f3 fb6a 	bl	8008204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2202      	movs	r2, #2
 8014b34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	681a      	ldr	r2, [r3, #0]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	f022 0201 	bic.w	r2, r2, #1
 8014b46:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	689b      	ldr	r3, [r3, #8]
 8014b4e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8014b52:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	699b      	ldr	r3, [r3, #24]
 8014b58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014b5c:	d119      	bne.n	8014b92 <HAL_SPI_Init+0x112>
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	685b      	ldr	r3, [r3, #4]
 8014b62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014b66:	d103      	bne.n	8014b70 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d008      	beq.n	8014b82 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d10c      	bne.n	8014b92 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014b7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014b80:	d107      	bne.n	8014b92 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	681a      	ldr	r2, [r3, #0]
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8014b90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	685b      	ldr	r3, [r3, #4]
 8014b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d00f      	beq.n	8014bbe <HAL_SPI_Init+0x13e>
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	68db      	ldr	r3, [r3, #12]
 8014ba2:	2b06      	cmp	r3, #6
 8014ba4:	d90b      	bls.n	8014bbe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	430a      	orrs	r2, r1
 8014bba:	601a      	str	r2, [r3, #0]
 8014bbc:	e007      	b.n	8014bce <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	681a      	ldr	r2, [r3, #0]
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014bcc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	69da      	ldr	r2, [r3, #28]
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bd6:	431a      	orrs	r2, r3
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	431a      	orrs	r2, r3
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014be0:	ea42 0103 	orr.w	r1, r2, r3
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	68da      	ldr	r2, [r3, #12]
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	430a      	orrs	r2, r1
 8014bee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014bf8:	431a      	orrs	r2, r3
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bfe:	431a      	orrs	r2, r3
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	699b      	ldr	r3, [r3, #24]
 8014c04:	431a      	orrs	r2, r3
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	691b      	ldr	r3, [r3, #16]
 8014c0a:	431a      	orrs	r2, r3
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	695b      	ldr	r3, [r3, #20]
 8014c10:	431a      	orrs	r2, r3
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	6a1b      	ldr	r3, [r3, #32]
 8014c16:	431a      	orrs	r2, r3
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	685b      	ldr	r3, [r3, #4]
 8014c1c:	431a      	orrs	r2, r3
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014c22:	431a      	orrs	r2, r3
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	689b      	ldr	r3, [r3, #8]
 8014c28:	431a      	orrs	r2, r3
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014c2e:	ea42 0103 	orr.w	r1, r2, r3
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	430a      	orrs	r2, r1
 8014c3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	685b      	ldr	r3, [r3, #4]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d113      	bne.n	8014c6e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	689b      	ldr	r3, [r3, #8]
 8014c4c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014c58:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	689b      	ldr	r3, [r3, #8]
 8014c60:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8014c6c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	f022 0201 	bic.w	r2, r2, #1
 8014c7c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	685b      	ldr	r3, [r3, #4]
 8014c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d00a      	beq.n	8014ca0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	68db      	ldr	r3, [r3, #12]
 8014c90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	430a      	orrs	r2, r1
 8014c9e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2201      	movs	r2, #1
 8014cac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8014cb0:	2300      	movs	r3, #0
}
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	3710      	adds	r7, #16
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	40013000 	.word	0x40013000
 8014cc0:	40003800 	.word	0x40003800
 8014cc4:	40003c00 	.word	0x40003c00

08014cc8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b088      	sub	sp, #32
 8014ccc:	af02      	add	r7, sp, #8
 8014cce:	60f8      	str	r0, [r7, #12]
 8014cd0:	60b9      	str	r1, [r7, #8]
 8014cd2:	603b      	str	r3, [r7, #0]
 8014cd4:	4613      	mov	r3, r2
 8014cd6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	3320      	adds	r3, #32
 8014cde:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014ce0:	f7f4 fd4e 	bl	8009780 <HAL_GetTick>
 8014ce4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014cec:	b2db      	uxtb	r3, r3
 8014cee:	2b01      	cmp	r3, #1
 8014cf0:	d001      	beq.n	8014cf6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8014cf2:	2302      	movs	r3, #2
 8014cf4:	e1d1      	b.n	801509a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014cf6:	68bb      	ldr	r3, [r7, #8]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d002      	beq.n	8014d02 <HAL_SPI_Transmit+0x3a>
 8014cfc:	88fb      	ldrh	r3, [r7, #6]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d101      	bne.n	8014d06 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8014d02:	2301      	movs	r3, #1
 8014d04:	e1c9      	b.n	801509a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014d0c:	2b01      	cmp	r3, #1
 8014d0e:	d101      	bne.n	8014d14 <HAL_SPI_Transmit+0x4c>
 8014d10:	2302      	movs	r3, #2
 8014d12:	e1c2      	b.n	801509a <HAL_SPI_Transmit+0x3d2>
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	2201      	movs	r2, #1
 8014d18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	2203      	movs	r2, #3
 8014d20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	2200      	movs	r2, #0
 8014d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	68ba      	ldr	r2, [r7, #8]
 8014d30:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	88fa      	ldrh	r2, [r7, #6]
 8014d36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	88fa      	ldrh	r2, [r7, #6]
 8014d3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	2200      	movs	r2, #0
 8014d46:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	2200      	movs	r2, #0
 8014d54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	2200      	movs	r2, #0
 8014d62:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	689b      	ldr	r3, [r3, #8]
 8014d68:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014d6c:	d108      	bne.n	8014d80 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	681a      	ldr	r2, [r3, #0]
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014d7c:	601a      	str	r2, [r3, #0]
 8014d7e:	e009      	b.n	8014d94 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	68db      	ldr	r3, [r3, #12]
 8014d86:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014d92:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	685a      	ldr	r2, [r3, #4]
 8014d9a:	4b96      	ldr	r3, [pc, #600]	@ (8014ff4 <HAL_SPI_Transmit+0x32c>)
 8014d9c:	4013      	ands	r3, r2
 8014d9e:	88f9      	ldrh	r1, [r7, #6]
 8014da0:	68fa      	ldr	r2, [r7, #12]
 8014da2:	6812      	ldr	r2, [r2, #0]
 8014da4:	430b      	orrs	r3, r1
 8014da6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	681a      	ldr	r2, [r3, #0]
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	f042 0201 	orr.w	r2, r2, #1
 8014db6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	685b      	ldr	r3, [r3, #4]
 8014dbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014dc0:	d107      	bne.n	8014dd2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	681a      	ldr	r2, [r3, #0]
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014dd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	68db      	ldr	r3, [r3, #12]
 8014dd6:	2b0f      	cmp	r3, #15
 8014dd8:	d947      	bls.n	8014e6a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014dda:	e03f      	b.n	8014e5c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	695b      	ldr	r3, [r3, #20]
 8014de2:	f003 0302 	and.w	r3, r3, #2
 8014de6:	2b02      	cmp	r3, #2
 8014de8:	d114      	bne.n	8014e14 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	6812      	ldr	r2, [r2, #0]
 8014df4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014dfa:	1d1a      	adds	r2, r3, #4
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014e06:	b29b      	uxth	r3, r3
 8014e08:	3b01      	subs	r3, #1
 8014e0a:	b29a      	uxth	r2, r3
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014e12:	e023      	b.n	8014e5c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014e14:	f7f4 fcb4 	bl	8009780 <HAL_GetTick>
 8014e18:	4602      	mov	r2, r0
 8014e1a:	693b      	ldr	r3, [r7, #16]
 8014e1c:	1ad3      	subs	r3, r2, r3
 8014e1e:	683a      	ldr	r2, [r7, #0]
 8014e20:	429a      	cmp	r2, r3
 8014e22:	d803      	bhi.n	8014e2c <HAL_SPI_Transmit+0x164>
 8014e24:	683b      	ldr	r3, [r7, #0]
 8014e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e2a:	d102      	bne.n	8014e32 <HAL_SPI_Transmit+0x16a>
 8014e2c:	683b      	ldr	r3, [r7, #0]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d114      	bne.n	8014e5c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014e32:	68f8      	ldr	r0, [r7, #12]
 8014e34:	f001 fcf0 	bl	8016818 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	2201      	movs	r2, #1
 8014e4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	2200      	movs	r2, #0
 8014e54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014e58:	2303      	movs	r3, #3
 8014e5a:	e11e      	b.n	801509a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014e62:	b29b      	uxth	r3, r3
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d1b9      	bne.n	8014ddc <HAL_SPI_Transmit+0x114>
 8014e68:	e0f1      	b.n	801504e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	68db      	ldr	r3, [r3, #12]
 8014e6e:	2b07      	cmp	r3, #7
 8014e70:	f240 80e6 	bls.w	8015040 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014e74:	e05d      	b.n	8014f32 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	695b      	ldr	r3, [r3, #20]
 8014e7c:	f003 0302 	and.w	r3, r3, #2
 8014e80:	2b02      	cmp	r3, #2
 8014e82:	d132      	bne.n	8014eea <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014e8a:	b29b      	uxth	r3, r3
 8014e8c:	2b01      	cmp	r3, #1
 8014e8e:	d918      	bls.n	8014ec2 <HAL_SPI_Transmit+0x1fa>
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d014      	beq.n	8014ec2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	6812      	ldr	r2, [r2, #0]
 8014ea2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ea8:	1d1a      	adds	r2, r3, #4
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	3b02      	subs	r3, #2
 8014eb8:	b29a      	uxth	r2, r3
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014ec0:	e037      	b.n	8014f32 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ec6:	881a      	ldrh	r2, [r3, #0]
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ed0:	1c9a      	adds	r2, r3, #2
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	3b01      	subs	r3, #1
 8014ee0:	b29a      	uxth	r2, r3
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014ee8:	e023      	b.n	8014f32 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014eea:	f7f4 fc49 	bl	8009780 <HAL_GetTick>
 8014eee:	4602      	mov	r2, r0
 8014ef0:	693b      	ldr	r3, [r7, #16]
 8014ef2:	1ad3      	subs	r3, r2, r3
 8014ef4:	683a      	ldr	r2, [r7, #0]
 8014ef6:	429a      	cmp	r2, r3
 8014ef8:	d803      	bhi.n	8014f02 <HAL_SPI_Transmit+0x23a>
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f00:	d102      	bne.n	8014f08 <HAL_SPI_Transmit+0x240>
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d114      	bne.n	8014f32 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014f08:	68f8      	ldr	r0, [r7, #12]
 8014f0a:	f001 fc85 	bl	8016818 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014f14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	2201      	movs	r2, #1
 8014f22:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014f2e:	2303      	movs	r3, #3
 8014f30:	e0b3      	b.n	801509a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014f38:	b29b      	uxth	r3, r3
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d19b      	bne.n	8014e76 <HAL_SPI_Transmit+0x1ae>
 8014f3e:	e086      	b.n	801504e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	695b      	ldr	r3, [r3, #20]
 8014f46:	f003 0302 	and.w	r3, r3, #2
 8014f4a:	2b02      	cmp	r3, #2
 8014f4c:	d154      	bne.n	8014ff8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014f54:	b29b      	uxth	r3, r3
 8014f56:	2b03      	cmp	r3, #3
 8014f58:	d918      	bls.n	8014f8c <HAL_SPI_Transmit+0x2c4>
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f5e:	2b40      	cmp	r3, #64	@ 0x40
 8014f60:	d914      	bls.n	8014f8c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	6812      	ldr	r2, [r2, #0]
 8014f6c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014f72:	1d1a      	adds	r2, r3, #4
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	3b04      	subs	r3, #4
 8014f82:	b29a      	uxth	r2, r3
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014f8a:	e059      	b.n	8015040 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014f92:	b29b      	uxth	r3, r3
 8014f94:	2b01      	cmp	r3, #1
 8014f96:	d917      	bls.n	8014fc8 <HAL_SPI_Transmit+0x300>
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d013      	beq.n	8014fc8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014fa4:	881a      	ldrh	r2, [r3, #0]
 8014fa6:	697b      	ldr	r3, [r7, #20]
 8014fa8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014fae:	1c9a      	adds	r2, r3, #2
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014fba:	b29b      	uxth	r3, r3
 8014fbc:	3b02      	subs	r3, #2
 8014fbe:	b29a      	uxth	r2, r3
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014fc6:	e03b      	b.n	8015040 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	3320      	adds	r3, #32
 8014fd2:	7812      	ldrb	r2, [r2, #0]
 8014fd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014fda:	1c5a      	adds	r2, r3, #1
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014fe6:	b29b      	uxth	r3, r3
 8014fe8:	3b01      	subs	r3, #1
 8014fea:	b29a      	uxth	r2, r3
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014ff2:	e025      	b.n	8015040 <HAL_SPI_Transmit+0x378>
 8014ff4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014ff8:	f7f4 fbc2 	bl	8009780 <HAL_GetTick>
 8014ffc:	4602      	mov	r2, r0
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	1ad3      	subs	r3, r2, r3
 8015002:	683a      	ldr	r2, [r7, #0]
 8015004:	429a      	cmp	r2, r3
 8015006:	d803      	bhi.n	8015010 <HAL_SPI_Transmit+0x348>
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801500e:	d102      	bne.n	8015016 <HAL_SPI_Transmit+0x34e>
 8015010:	683b      	ldr	r3, [r7, #0]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d114      	bne.n	8015040 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015016:	68f8      	ldr	r0, [r7, #12]
 8015018:	f001 fbfe 	bl	8016818 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015022:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	2201      	movs	r2, #1
 8015030:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	2200      	movs	r2, #0
 8015038:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801503c:	2303      	movs	r3, #3
 801503e:	e02c      	b.n	801509a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015046:	b29b      	uxth	r3, r3
 8015048:	2b00      	cmp	r3, #0
 801504a:	f47f af79 	bne.w	8014f40 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801504e:	693b      	ldr	r3, [r7, #16]
 8015050:	9300      	str	r3, [sp, #0]
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	2200      	movs	r2, #0
 8015056:	2108      	movs	r1, #8
 8015058:	68f8      	ldr	r0, [r7, #12]
 801505a:	f001 fc7d 	bl	8016958 <SPI_WaitOnFlagUntilTimeout>
 801505e:	4603      	mov	r3, r0
 8015060:	2b00      	cmp	r3, #0
 8015062:	d007      	beq.n	8015074 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801506a:	f043 0220 	orr.w	r2, r3, #32
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8015074:	68f8      	ldr	r0, [r7, #12]
 8015076:	f001 fbcf 	bl	8016818 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	2201      	movs	r2, #1
 801507e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	2200      	movs	r2, #0
 8015086:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015090:	2b00      	cmp	r3, #0
 8015092:	d001      	beq.n	8015098 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8015094:	2301      	movs	r3, #1
 8015096:	e000      	b.n	801509a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8015098:	2300      	movs	r3, #0
  }
}
 801509a:	4618      	mov	r0, r3
 801509c:	3718      	adds	r7, #24
 801509e:	46bd      	mov	sp, r7
 80150a0:	bd80      	pop	{r7, pc}
 80150a2:	bf00      	nop

080150a4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b088      	sub	sp, #32
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	60f8      	str	r0, [r7, #12]
 80150ac:	60b9      	str	r1, [r7, #8]
 80150ae:	603b      	str	r3, [r7, #0]
 80150b0:	4613      	mov	r3, r2
 80150b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80150b8:	095b      	lsrs	r3, r3, #5
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	3301      	adds	r3, #1
 80150be:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	3330      	adds	r3, #48	@ 0x30
 80150c6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80150c8:	f7f4 fb5a 	bl	8009780 <HAL_GetTick>
 80150cc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80150d4:	b2db      	uxtb	r3, r3
 80150d6:	2b01      	cmp	r3, #1
 80150d8:	d001      	beq.n	80150de <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80150da:	2302      	movs	r3, #2
 80150dc:	e250      	b.n	8015580 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d002      	beq.n	80150ea <HAL_SPI_Receive+0x46>
 80150e4:	88fb      	ldrh	r3, [r7, #6]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d101      	bne.n	80150ee <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80150ea:	2301      	movs	r3, #1
 80150ec:	e248      	b.n	8015580 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80150f4:	2b01      	cmp	r3, #1
 80150f6:	d101      	bne.n	80150fc <HAL_SPI_Receive+0x58>
 80150f8:	2302      	movs	r3, #2
 80150fa:	e241      	b.n	8015580 <HAL_SPI_Receive+0x4dc>
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	2201      	movs	r2, #1
 8015100:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	2204      	movs	r2, #4
 8015108:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	2200      	movs	r2, #0
 8015110:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	68ba      	ldr	r2, [r7, #8]
 8015118:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	88fa      	ldrh	r2, [r7, #6]
 801511e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	88fa      	ldrh	r2, [r7, #6]
 8015126:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	2200      	movs	r2, #0
 801512e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	2200      	movs	r2, #0
 8015134:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	2200      	movs	r2, #0
 801513c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	2200      	movs	r2, #0
 8015144:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	2200      	movs	r2, #0
 801514a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	689b      	ldr	r3, [r3, #8]
 8015150:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015154:	d108      	bne.n	8015168 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	681a      	ldr	r2, [r3, #0]
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8015164:	601a      	str	r2, [r3, #0]
 8015166:	e009      	b.n	801517c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	68db      	ldr	r3, [r3, #12]
 801516e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801517a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	685a      	ldr	r2, [r3, #4]
 8015182:	4b95      	ldr	r3, [pc, #596]	@ (80153d8 <HAL_SPI_Receive+0x334>)
 8015184:	4013      	ands	r3, r2
 8015186:	88f9      	ldrh	r1, [r7, #6]
 8015188:	68fa      	ldr	r2, [r7, #12]
 801518a:	6812      	ldr	r2, [r2, #0]
 801518c:	430b      	orrs	r3, r1
 801518e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	681a      	ldr	r2, [r3, #0]
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	f042 0201 	orr.w	r2, r2, #1
 801519e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	685b      	ldr	r3, [r3, #4]
 80151a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80151a8:	d107      	bne.n	80151ba <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	681a      	ldr	r2, [r3, #0]
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80151b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	68db      	ldr	r3, [r3, #12]
 80151be:	2b0f      	cmp	r3, #15
 80151c0:	d96c      	bls.n	801529c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80151c2:	e064      	b.n	801528e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	695b      	ldr	r3, [r3, #20]
 80151ca:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	695b      	ldr	r3, [r3, #20]
 80151d2:	f003 0301 	and.w	r3, r3, #1
 80151d6:	2b01      	cmp	r3, #1
 80151d8:	d114      	bne.n	8015204 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	681a      	ldr	r2, [r3, #0]
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80151e4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151ea:	1d1a      	adds	r2, r3, #4
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151f6:	b29b      	uxth	r3, r3
 80151f8:	3b01      	subs	r3, #1
 80151fa:	b29a      	uxth	r2, r3
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015202:	e044      	b.n	801528e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801520a:	b29b      	uxth	r3, r3
 801520c:	8bfa      	ldrh	r2, [r7, #30]
 801520e:	429a      	cmp	r2, r3
 8015210:	d919      	bls.n	8015246 <HAL_SPI_Receive+0x1a2>
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015218:	2b00      	cmp	r3, #0
 801521a:	d014      	beq.n	8015246 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	681a      	ldr	r2, [r3, #0]
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015224:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015226:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801522c:	1d1a      	adds	r2, r3, #4
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015238:	b29b      	uxth	r3, r3
 801523a:	3b01      	subs	r3, #1
 801523c:	b29a      	uxth	r2, r3
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015244:	e023      	b.n	801528e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015246:	f7f4 fa9b 	bl	8009780 <HAL_GetTick>
 801524a:	4602      	mov	r2, r0
 801524c:	697b      	ldr	r3, [r7, #20]
 801524e:	1ad3      	subs	r3, r2, r3
 8015250:	683a      	ldr	r2, [r7, #0]
 8015252:	429a      	cmp	r2, r3
 8015254:	d803      	bhi.n	801525e <HAL_SPI_Receive+0x1ba>
 8015256:	683b      	ldr	r3, [r7, #0]
 8015258:	f1b3 3fff 	cmp.w	r3, #4294967295
 801525c:	d102      	bne.n	8015264 <HAL_SPI_Receive+0x1c0>
 801525e:	683b      	ldr	r3, [r7, #0]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d114      	bne.n	801528e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015264:	68f8      	ldr	r0, [r7, #12]
 8015266:	f001 fad7 	bl	8016818 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015270:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	2201      	movs	r2, #1
 801527e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	2200      	movs	r2, #0
 8015286:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801528a:	2303      	movs	r3, #3
 801528c:	e178      	b.n	8015580 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015294:	b29b      	uxth	r3, r3
 8015296:	2b00      	cmp	r3, #0
 8015298:	d194      	bne.n	80151c4 <HAL_SPI_Receive+0x120>
 801529a:	e15e      	b.n	801555a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	2b07      	cmp	r3, #7
 80152a2:	f240 8153 	bls.w	801554c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80152a6:	e08f      	b.n	80153c8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	695b      	ldr	r3, [r3, #20]
 80152ae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	695b      	ldr	r3, [r3, #20]
 80152b6:	f003 0301 	and.w	r3, r3, #1
 80152ba:	2b01      	cmp	r3, #1
 80152bc:	d114      	bne.n	80152e8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152c2:	69ba      	ldr	r2, [r7, #24]
 80152c4:	8812      	ldrh	r2, [r2, #0]
 80152c6:	b292      	uxth	r2, r2
 80152c8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152ce:	1c9a      	adds	r2, r3, #2
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152da:	b29b      	uxth	r3, r3
 80152dc:	3b01      	subs	r3, #1
 80152de:	b29a      	uxth	r2, r3
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80152e6:	e06f      	b.n	80153c8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152ee:	b29b      	uxth	r3, r3
 80152f0:	8bfa      	ldrh	r2, [r7, #30]
 80152f2:	429a      	cmp	r2, r3
 80152f4:	d924      	bls.n	8015340 <HAL_SPI_Receive+0x29c>
 80152f6:	693b      	ldr	r3, [r7, #16]
 80152f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d01f      	beq.n	8015340 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015304:	69ba      	ldr	r2, [r7, #24]
 8015306:	8812      	ldrh	r2, [r2, #0]
 8015308:	b292      	uxth	r2, r2
 801530a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015310:	1c9a      	adds	r2, r3, #2
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801531a:	69ba      	ldr	r2, [r7, #24]
 801531c:	8812      	ldrh	r2, [r2, #0]
 801531e:	b292      	uxth	r2, r2
 8015320:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015326:	1c9a      	adds	r2, r3, #2
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015332:	b29b      	uxth	r3, r3
 8015334:	3b02      	subs	r3, #2
 8015336:	b29a      	uxth	r2, r3
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801533e:	e043      	b.n	80153c8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015346:	b29b      	uxth	r3, r3
 8015348:	2b01      	cmp	r3, #1
 801534a:	d119      	bne.n	8015380 <HAL_SPI_Receive+0x2dc>
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015352:	2b00      	cmp	r3, #0
 8015354:	d014      	beq.n	8015380 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801535a:	69ba      	ldr	r2, [r7, #24]
 801535c:	8812      	ldrh	r2, [r2, #0]
 801535e:	b292      	uxth	r2, r2
 8015360:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015366:	1c9a      	adds	r2, r3, #2
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015372:	b29b      	uxth	r3, r3
 8015374:	3b01      	subs	r3, #1
 8015376:	b29a      	uxth	r2, r3
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801537e:	e023      	b.n	80153c8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015380:	f7f4 f9fe 	bl	8009780 <HAL_GetTick>
 8015384:	4602      	mov	r2, r0
 8015386:	697b      	ldr	r3, [r7, #20]
 8015388:	1ad3      	subs	r3, r2, r3
 801538a:	683a      	ldr	r2, [r7, #0]
 801538c:	429a      	cmp	r2, r3
 801538e:	d803      	bhi.n	8015398 <HAL_SPI_Receive+0x2f4>
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015396:	d102      	bne.n	801539e <HAL_SPI_Receive+0x2fa>
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d114      	bne.n	80153c8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801539e:	68f8      	ldr	r0, [r7, #12]
 80153a0:	f001 fa3a 	bl	8016818 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80153aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	2201      	movs	r2, #1
 80153b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	2200      	movs	r2, #0
 80153c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80153c4:	2303      	movs	r3, #3
 80153c6:	e0db      	b.n	8015580 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80153ce:	b29b      	uxth	r3, r3
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	f47f af69 	bne.w	80152a8 <HAL_SPI_Receive+0x204>
 80153d6:	e0c0      	b.n	801555a <HAL_SPI_Receive+0x4b6>
 80153d8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	695b      	ldr	r3, [r3, #20]
 80153e2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	695b      	ldr	r3, [r3, #20]
 80153ea:	f003 0301 	and.w	r3, r3, #1
 80153ee:	2b01      	cmp	r3, #1
 80153f0:	d117      	bne.n	8015422 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153fe:	7812      	ldrb	r2, [r2, #0]
 8015400:	b2d2      	uxtb	r2, r2
 8015402:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015408:	1c5a      	adds	r2, r3, #1
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015414:	b29b      	uxth	r3, r3
 8015416:	3b01      	subs	r3, #1
 8015418:	b29a      	uxth	r2, r3
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015420:	e094      	b.n	801554c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015428:	b29b      	uxth	r3, r3
 801542a:	8bfa      	ldrh	r2, [r7, #30]
 801542c:	429a      	cmp	r2, r3
 801542e:	d946      	bls.n	80154be <HAL_SPI_Receive+0x41a>
 8015430:	693b      	ldr	r3, [r7, #16]
 8015432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015436:	2b00      	cmp	r3, #0
 8015438:	d041      	beq.n	80154be <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015446:	7812      	ldrb	r2, [r2, #0]
 8015448:	b2d2      	uxtb	r2, r2
 801544a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015450:	1c5a      	adds	r2, r3, #1
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015462:	7812      	ldrb	r2, [r2, #0]
 8015464:	b2d2      	uxtb	r2, r2
 8015466:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801546c:	1c5a      	adds	r2, r3, #1
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801547e:	7812      	ldrb	r2, [r2, #0]
 8015480:	b2d2      	uxtb	r2, r2
 8015482:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015488:	1c5a      	adds	r2, r3, #1
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801549a:	7812      	ldrb	r2, [r2, #0]
 801549c:	b2d2      	uxtb	r2, r2
 801549e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154a4:	1c5a      	adds	r2, r3, #1
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154b0:	b29b      	uxth	r3, r3
 80154b2:	3b04      	subs	r3, #4
 80154b4:	b29a      	uxth	r2, r3
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80154bc:	e046      	b.n	801554c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154c4:	b29b      	uxth	r3, r3
 80154c6:	2b03      	cmp	r3, #3
 80154c8:	d81c      	bhi.n	8015504 <HAL_SPI_Receive+0x460>
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d017      	beq.n	8015504 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154e0:	7812      	ldrb	r2, [r2, #0]
 80154e2:	b2d2      	uxtb	r2, r2
 80154e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154ea:	1c5a      	adds	r2, r3, #1
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154f6:	b29b      	uxth	r3, r3
 80154f8:	3b01      	subs	r3, #1
 80154fa:	b29a      	uxth	r2, r3
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015502:	e023      	b.n	801554c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015504:	f7f4 f93c 	bl	8009780 <HAL_GetTick>
 8015508:	4602      	mov	r2, r0
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	1ad3      	subs	r3, r2, r3
 801550e:	683a      	ldr	r2, [r7, #0]
 8015510:	429a      	cmp	r2, r3
 8015512:	d803      	bhi.n	801551c <HAL_SPI_Receive+0x478>
 8015514:	683b      	ldr	r3, [r7, #0]
 8015516:	f1b3 3fff 	cmp.w	r3, #4294967295
 801551a:	d102      	bne.n	8015522 <HAL_SPI_Receive+0x47e>
 801551c:	683b      	ldr	r3, [r7, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d114      	bne.n	801554c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015522:	68f8      	ldr	r0, [r7, #12]
 8015524:	f001 f978 	bl	8016818 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801552e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	2201      	movs	r2, #1
 801553c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	2200      	movs	r2, #0
 8015544:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8015548:	2303      	movs	r3, #3
 801554a:	e019      	b.n	8015580 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015552:	b29b      	uxth	r3, r3
 8015554:	2b00      	cmp	r3, #0
 8015556:	f47f af41 	bne.w	80153dc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801555a:	68f8      	ldr	r0, [r7, #12]
 801555c:	f001 f95c 	bl	8016818 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	2201      	movs	r2, #1
 8015564:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	2200      	movs	r2, #0
 801556c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015576:	2b00      	cmp	r3, #0
 8015578:	d001      	beq.n	801557e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 801557a:	2301      	movs	r3, #1
 801557c:	e000      	b.n	8015580 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 801557e:	2300      	movs	r3, #0
  }
}
 8015580:	4618      	mov	r0, r3
 8015582:	3720      	adds	r7, #32
 8015584:	46bd      	mov	sp, r7
 8015586:	bd80      	pop	{r7, pc}

08015588 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b08e      	sub	sp, #56	@ 0x38
 801558c:	af02      	add	r7, sp, #8
 801558e:	60f8      	str	r0, [r7, #12]
 8015590:	60b9      	str	r1, [r7, #8]
 8015592:	607a      	str	r2, [r7, #4]
 8015594:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	3320      	adds	r3, #32
 801559c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	3330      	adds	r3, #48	@ 0x30
 80155a4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155aa:	095b      	lsrs	r3, r3, #5
 80155ac:	b29b      	uxth	r3, r3
 80155ae:	3301      	adds	r3, #1
 80155b0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80155b2:	f7f4 f8e5 	bl	8009780 <HAL_GetTick>
 80155b6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80155b8:	887b      	ldrh	r3, [r7, #2]
 80155ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80155bc:	887b      	ldrh	r3, [r7, #2]
 80155be:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80155c6:	b2db      	uxtb	r3, r3
 80155c8:	2b01      	cmp	r3, #1
 80155ca:	d001      	beq.n	80155d0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80155cc:	2302      	movs	r3, #2
 80155ce:	e310      	b.n	8015bf2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d005      	beq.n	80155e2 <HAL_SPI_TransmitReceive+0x5a>
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d002      	beq.n	80155e2 <HAL_SPI_TransmitReceive+0x5a>
 80155dc:	887b      	ldrh	r3, [r7, #2]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d101      	bne.n	80155e6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80155e2:	2301      	movs	r3, #1
 80155e4:	e305      	b.n	8015bf2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80155ec:	2b01      	cmp	r3, #1
 80155ee:	d101      	bne.n	80155f4 <HAL_SPI_TransmitReceive+0x6c>
 80155f0:	2302      	movs	r3, #2
 80155f2:	e2fe      	b.n	8015bf2 <HAL_SPI_TransmitReceive+0x66a>
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	2201      	movs	r2, #1
 80155f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	2205      	movs	r2, #5
 8015600:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	2200      	movs	r2, #0
 8015608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	687a      	ldr	r2, [r7, #4]
 8015610:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	887a      	ldrh	r2, [r7, #2]
 8015616:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	887a      	ldrh	r2, [r7, #2]
 801561e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	68ba      	ldr	r2, [r7, #8]
 8015626:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	887a      	ldrh	r2, [r7, #2]
 801562c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	887a      	ldrh	r2, [r7, #2]
 8015634:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	2200      	movs	r2, #0
 801563c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	2200      	movs	r2, #0
 8015642:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	68da      	ldr	r2, [r3, #12]
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8015652:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	4a70      	ldr	r2, [pc, #448]	@ (801581c <HAL_SPI_TransmitReceive+0x294>)
 801565a:	4293      	cmp	r3, r2
 801565c:	d009      	beq.n	8015672 <HAL_SPI_TransmitReceive+0xea>
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	4a6f      	ldr	r2, [pc, #444]	@ (8015820 <HAL_SPI_TransmitReceive+0x298>)
 8015664:	4293      	cmp	r3, r2
 8015666:	d004      	beq.n	8015672 <HAL_SPI_TransmitReceive+0xea>
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	4a6d      	ldr	r2, [pc, #436]	@ (8015824 <HAL_SPI_TransmitReceive+0x29c>)
 801566e:	4293      	cmp	r3, r2
 8015670:	d102      	bne.n	8015678 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8015672:	2310      	movs	r3, #16
 8015674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015676:	e001      	b.n	801567c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8015678:	2308      	movs	r3, #8
 801567a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	685a      	ldr	r2, [r3, #4]
 8015682:	4b69      	ldr	r3, [pc, #420]	@ (8015828 <HAL_SPI_TransmitReceive+0x2a0>)
 8015684:	4013      	ands	r3, r2
 8015686:	8879      	ldrh	r1, [r7, #2]
 8015688:	68fa      	ldr	r2, [r7, #12]
 801568a:	6812      	ldr	r2, [r2, #0]
 801568c:	430b      	orrs	r3, r1
 801568e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	681a      	ldr	r2, [r3, #0]
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	f042 0201 	orr.w	r2, r2, #1
 801569e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80156a8:	d107      	bne.n	80156ba <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	681a      	ldr	r2, [r3, #0]
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80156b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	68db      	ldr	r3, [r3, #12]
 80156be:	2b0f      	cmp	r3, #15
 80156c0:	f240 80a2 	bls.w	8015808 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80156c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156c6:	089b      	lsrs	r3, r3, #2
 80156c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80156ca:	e094      	b.n	80157f6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	695b      	ldr	r3, [r3, #20]
 80156d2:	f003 0302 	and.w	r3, r3, #2
 80156d6:	2b02      	cmp	r3, #2
 80156d8:	d120      	bne.n	801571c <HAL_SPI_TransmitReceive+0x194>
 80156da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d01d      	beq.n	801571c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80156e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80156e2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80156e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156e6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80156e8:	429a      	cmp	r2, r3
 80156ea:	d217      	bcs.n	801571c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	6812      	ldr	r2, [r2, #0]
 80156f6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80156fc:	1d1a      	adds	r2, r3, #4
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015708:	b29b      	uxth	r3, r3
 801570a:	3b01      	subs	r3, #1
 801570c:	b29a      	uxth	r2, r3
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801571a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	695b      	ldr	r3, [r3, #20]
 8015722:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015724:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015726:	2b00      	cmp	r3, #0
 8015728:	d065      	beq.n	80157f6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	695b      	ldr	r3, [r3, #20]
 8015730:	f003 0301 	and.w	r3, r3, #1
 8015734:	2b01      	cmp	r3, #1
 8015736:	d118      	bne.n	801576a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	681a      	ldr	r2, [r3, #0]
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015740:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015742:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015748:	1d1a      	adds	r2, r3, #4
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015754:	b29b      	uxth	r3, r3
 8015756:	3b01      	subs	r3, #1
 8015758:	b29a      	uxth	r2, r3
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015766:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015768:	e045      	b.n	80157f6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801576a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801576c:	8bfb      	ldrh	r3, [r7, #30]
 801576e:	429a      	cmp	r2, r3
 8015770:	d21d      	bcs.n	80157ae <HAL_SPI_TransmitReceive+0x226>
 8015772:	697b      	ldr	r3, [r7, #20]
 8015774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015778:	2b00      	cmp	r3, #0
 801577a:	d018      	beq.n	80157ae <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	681a      	ldr	r2, [r3, #0]
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015784:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015786:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801578c:	1d1a      	adds	r2, r3, #4
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015798:	b29b      	uxth	r3, r3
 801579a:	3b01      	subs	r3, #1
 801579c:	b29a      	uxth	r2, r3
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80157aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80157ac:	e023      	b.n	80157f6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80157ae:	f7f3 ffe7 	bl	8009780 <HAL_GetTick>
 80157b2:	4602      	mov	r2, r0
 80157b4:	69bb      	ldr	r3, [r7, #24]
 80157b6:	1ad3      	subs	r3, r2, r3
 80157b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80157ba:	429a      	cmp	r2, r3
 80157bc:	d803      	bhi.n	80157c6 <HAL_SPI_TransmitReceive+0x23e>
 80157be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157c4:	d102      	bne.n	80157cc <HAL_SPI_TransmitReceive+0x244>
 80157c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d114      	bne.n	80157f6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80157cc:	68f8      	ldr	r0, [r7, #12]
 80157ce:	f001 f823 	bl	8016818 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80157d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	2201      	movs	r2, #1
 80157e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	2200      	movs	r2, #0
 80157ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80157f2:	2303      	movs	r3, #3
 80157f4:	e1fd      	b.n	8015bf2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80157f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	f47f af67 	bne.w	80156cc <HAL_SPI_TransmitReceive+0x144>
 80157fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015800:	2b00      	cmp	r3, #0
 8015802:	f47f af63 	bne.w	80156cc <HAL_SPI_TransmitReceive+0x144>
 8015806:	e1ce      	b.n	8015ba6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	68db      	ldr	r3, [r3, #12]
 801580c:	2b07      	cmp	r3, #7
 801580e:	f240 81c2 	bls.w	8015b96 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8015812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015814:	085b      	lsrs	r3, r3, #1
 8015816:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015818:	e0c9      	b.n	80159ae <HAL_SPI_TransmitReceive+0x426>
 801581a:	bf00      	nop
 801581c:	40013000 	.word	0x40013000
 8015820:	40003800 	.word	0x40003800
 8015824:	40003c00 	.word	0x40003c00
 8015828:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	695b      	ldr	r3, [r3, #20]
 8015832:	f003 0302 	and.w	r3, r3, #2
 8015836:	2b02      	cmp	r3, #2
 8015838:	d11f      	bne.n	801587a <HAL_SPI_TransmitReceive+0x2f2>
 801583a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801583c:	2b00      	cmp	r3, #0
 801583e:	d01c      	beq.n	801587a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015840:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015842:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015846:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015848:	429a      	cmp	r2, r3
 801584a:	d216      	bcs.n	801587a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015850:	881a      	ldrh	r2, [r3, #0]
 8015852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015854:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801585a:	1c9a      	adds	r2, r3, #2
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015866:	b29b      	uxth	r3, r3
 8015868:	3b01      	subs	r3, #1
 801586a:	b29a      	uxth	r2, r3
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015878:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	695b      	ldr	r3, [r3, #20]
 8015880:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015882:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015884:	2b00      	cmp	r3, #0
 8015886:	f000 8092 	beq.w	80159ae <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	695b      	ldr	r3, [r3, #20]
 8015890:	f003 0301 	and.w	r3, r3, #1
 8015894:	2b01      	cmp	r3, #1
 8015896:	d118      	bne.n	80158ca <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801589c:	6a3a      	ldr	r2, [r7, #32]
 801589e:	8812      	ldrh	r2, [r2, #0]
 80158a0:	b292      	uxth	r2, r2
 80158a2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158a8:	1c9a      	adds	r2, r3, #2
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	3b01      	subs	r3, #1
 80158b8:	b29a      	uxth	r2, r3
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80158c8:	e071      	b.n	80159ae <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80158ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80158cc:	8bfb      	ldrh	r3, [r7, #30]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d228      	bcs.n	8015924 <HAL_SPI_TransmitReceive+0x39c>
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d023      	beq.n	8015924 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158e0:	6a3a      	ldr	r2, [r7, #32]
 80158e2:	8812      	ldrh	r2, [r2, #0]
 80158e4:	b292      	uxth	r2, r2
 80158e6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158ec:	1c9a      	adds	r2, r3, #2
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158f6:	6a3a      	ldr	r2, [r7, #32]
 80158f8:	8812      	ldrh	r2, [r2, #0]
 80158fa:	b292      	uxth	r2, r2
 80158fc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015902:	1c9a      	adds	r2, r3, #2
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801590e:	b29b      	uxth	r3, r3
 8015910:	3b02      	subs	r3, #2
 8015912:	b29a      	uxth	r2, r3
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015920:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015922:	e044      	b.n	80159ae <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015924:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015926:	2b01      	cmp	r3, #1
 8015928:	d11d      	bne.n	8015966 <HAL_SPI_TransmitReceive+0x3de>
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015930:	2b00      	cmp	r3, #0
 8015932:	d018      	beq.n	8015966 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015938:	6a3a      	ldr	r2, [r7, #32]
 801593a:	8812      	ldrh	r2, [r2, #0]
 801593c:	b292      	uxth	r2, r2
 801593e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015944:	1c9a      	adds	r2, r3, #2
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015950:	b29b      	uxth	r3, r3
 8015952:	3b01      	subs	r3, #1
 8015954:	b29a      	uxth	r2, r3
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015962:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015964:	e023      	b.n	80159ae <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015966:	f7f3 ff0b 	bl	8009780 <HAL_GetTick>
 801596a:	4602      	mov	r2, r0
 801596c:	69bb      	ldr	r3, [r7, #24]
 801596e:	1ad3      	subs	r3, r2, r3
 8015970:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015972:	429a      	cmp	r2, r3
 8015974:	d803      	bhi.n	801597e <HAL_SPI_TransmitReceive+0x3f6>
 8015976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015978:	f1b3 3fff 	cmp.w	r3, #4294967295
 801597c:	d102      	bne.n	8015984 <HAL_SPI_TransmitReceive+0x3fc>
 801597e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015980:	2b00      	cmp	r3, #0
 8015982:	d114      	bne.n	80159ae <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015984:	68f8      	ldr	r0, [r7, #12]
 8015986:	f000 ff47 	bl	8016818 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015990:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	2201      	movs	r2, #1
 801599e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	2200      	movs	r2, #0
 80159a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80159aa:	2303      	movs	r3, #3
 80159ac:	e121      	b.n	8015bf2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80159ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	f47f af3b 	bne.w	801582c <HAL_SPI_TransmitReceive+0x2a4>
 80159b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	f47f af37 	bne.w	801582c <HAL_SPI_TransmitReceive+0x2a4>
 80159be:	e0f2      	b.n	8015ba6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	695b      	ldr	r3, [r3, #20]
 80159c6:	f003 0302 	and.w	r3, r3, #2
 80159ca:	2b02      	cmp	r3, #2
 80159cc:	d121      	bne.n	8015a12 <HAL_SPI_TransmitReceive+0x48a>
 80159ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d01e      	beq.n	8015a12 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80159d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80159d6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80159d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159da:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80159dc:	429a      	cmp	r2, r3
 80159de:	d218      	bcs.n	8015a12 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	3320      	adds	r3, #32
 80159ea:	7812      	ldrb	r2, [r2, #0]
 80159ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80159f2:	1c5a      	adds	r2, r3, #1
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80159fe:	b29b      	uxth	r3, r3
 8015a00:	3b01      	subs	r3, #1
 8015a02:	b29a      	uxth	r2, r3
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015a10:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	695b      	ldr	r3, [r3, #20]
 8015a18:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015a1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	f000 80ba 	beq.w	8015b96 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	695b      	ldr	r3, [r3, #20]
 8015a28:	f003 0301 	and.w	r3, r3, #1
 8015a2c:	2b01      	cmp	r3, #1
 8015a2e:	d11b      	bne.n	8015a68 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a3c:	7812      	ldrb	r2, [r2, #0]
 8015a3e:	b2d2      	uxtb	r2, r2
 8015a40:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a46:	1c5a      	adds	r2, r3, #1
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015a52:	b29b      	uxth	r3, r3
 8015a54:	3b01      	subs	r3, #1
 8015a56:	b29a      	uxth	r2, r3
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015a64:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015a66:	e096      	b.n	8015b96 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015a68:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015a6a:	8bfb      	ldrh	r3, [r7, #30]
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	d24a      	bcs.n	8015b06 <HAL_SPI_TransmitReceive+0x57e>
 8015a70:	697b      	ldr	r3, [r7, #20]
 8015a72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d045      	beq.n	8015b06 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a86:	7812      	ldrb	r2, [r2, #0]
 8015a88:	b2d2      	uxtb	r2, r2
 8015a8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a90:	1c5a      	adds	r2, r3, #1
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015aa2:	7812      	ldrb	r2, [r2, #0]
 8015aa4:	b2d2      	uxtb	r2, r2
 8015aa6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015aac:	1c5a      	adds	r2, r3, #1
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015abe:	7812      	ldrb	r2, [r2, #0]
 8015ac0:	b2d2      	uxtb	r2, r2
 8015ac2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015ac8:	1c5a      	adds	r2, r3, #1
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015ada:	7812      	ldrb	r2, [r2, #0]
 8015adc:	b2d2      	uxtb	r2, r2
 8015ade:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015ae4:	1c5a      	adds	r2, r3, #1
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015af0:	b29b      	uxth	r3, r3
 8015af2:	3b04      	subs	r3, #4
 8015af4:	b29a      	uxth	r2, r3
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015b02:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015b04:	e047      	b.n	8015b96 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8015b06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015b08:	2b03      	cmp	r3, #3
 8015b0a:	d820      	bhi.n	8015b4e <HAL_SPI_TransmitReceive+0x5c6>
 8015b0c:	697b      	ldr	r3, [r7, #20]
 8015b0e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d01b      	beq.n	8015b4e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015b22:	7812      	ldrb	r2, [r2, #0]
 8015b24:	b2d2      	uxtb	r2, r2
 8015b26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015b2c:	1c5a      	adds	r2, r3, #1
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015b38:	b29b      	uxth	r3, r3
 8015b3a:	3b01      	subs	r3, #1
 8015b3c:	b29a      	uxth	r2, r3
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015b4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015b4c:	e023      	b.n	8015b96 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015b4e:	f7f3 fe17 	bl	8009780 <HAL_GetTick>
 8015b52:	4602      	mov	r2, r0
 8015b54:	69bb      	ldr	r3, [r7, #24]
 8015b56:	1ad3      	subs	r3, r2, r3
 8015b58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015b5a:	429a      	cmp	r2, r3
 8015b5c:	d803      	bhi.n	8015b66 <HAL_SPI_TransmitReceive+0x5de>
 8015b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b64:	d102      	bne.n	8015b6c <HAL_SPI_TransmitReceive+0x5e4>
 8015b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d114      	bne.n	8015b96 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015b6c:	68f8      	ldr	r0, [r7, #12]
 8015b6e:	f000 fe53 	bl	8016818 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	2201      	movs	r2, #1
 8015b86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8015b92:	2303      	movs	r3, #3
 8015b94:	e02d      	b.n	8015bf2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015b96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	f47f af11 	bne.w	80159c0 <HAL_SPI_TransmitReceive+0x438>
 8015b9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	f47f af0d 	bne.w	80159c0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8015ba6:	69bb      	ldr	r3, [r7, #24]
 8015ba8:	9300      	str	r3, [sp, #0]
 8015baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bac:	2200      	movs	r2, #0
 8015bae:	2108      	movs	r1, #8
 8015bb0:	68f8      	ldr	r0, [r7, #12]
 8015bb2:	f000 fed1 	bl	8016958 <SPI_WaitOnFlagUntilTimeout>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d007      	beq.n	8015bcc <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015bc2:	f043 0220 	orr.w	r2, r3, #32
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8015bcc:	68f8      	ldr	r0, [r7, #12]
 8015bce:	f000 fe23 	bl	8016818 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	2201      	movs	r2, #1
 8015bd6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	2200      	movs	r2, #0
 8015bde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d001      	beq.n	8015bf0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8015bec:	2301      	movs	r3, #1
 8015bee:	e000      	b.n	8015bf2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8015bf0:	2300      	movs	r3, #0
  }
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3730      	adds	r7, #48	@ 0x30
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	bf00      	nop

08015bfc <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8015bfc:	b480      	push	{r7}
 8015bfe:	b085      	sub	sp, #20
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	60f8      	str	r0, [r7, #12]
 8015c04:	60b9      	str	r1, [r7, #8]
 8015c06:	4613      	mov	r3, r2
 8015c08:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if ((pData == NULL) || (Size == 0UL))
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d002      	beq.n	8015c16 <HAL_SPI_Transmit_IT+0x1a>
 8015c10:	88fb      	ldrh	r3, [r7, #6]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d101      	bne.n	8015c1a <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8015c16:	2301      	movs	r3, #1
 8015c18:	e08b      	b.n	8015d32 <HAL_SPI_Transmit_IT+0x136>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015c20:	b2db      	uxtb	r3, r3
 8015c22:	2b01      	cmp	r3, #1
 8015c24:	d001      	beq.n	8015c2a <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8015c26:	2302      	movs	r3, #2
 8015c28:	e083      	b.n	8015d32 <HAL_SPI_Transmit_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015c30:	2b01      	cmp	r3, #1
 8015c32:	d101      	bne.n	8015c38 <HAL_SPI_Transmit_IT+0x3c>
 8015c34:	2302      	movs	r3, #2
 8015c36:	e07c      	b.n	8015d32 <HAL_SPI_Transmit_IT+0x136>
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	2201      	movs	r2, #1
 8015c3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	2203      	movs	r2, #3
 8015c44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	68ba      	ldr	r2, [r7, #8]
 8015c54:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	88fa      	ldrh	r2, [r7, #6]
 8015c5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	88fa      	ldrh	r2, [r7, #6]
 8015c62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	2200      	movs	r2, #0
 8015c6a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	2200      	movs	r2, #0
 8015c70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	2200      	movs	r2, #0
 8015c78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	2200      	movs	r2, #0
 8015c80:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	68db      	ldr	r3, [r3, #12]
 8015c86:	2b0f      	cmp	r3, #15
 8015c88:	d903      	bls.n	8015c92 <HAL_SPI_Transmit_IT+0x96>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8015d40 <HAL_SPI_Transmit_IT+0x144>)
 8015c8e:	675a      	str	r2, [r3, #116]	@ 0x74
 8015c90:	e00a      	b.n	8015ca8 <HAL_SPI_Transmit_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	68db      	ldr	r3, [r3, #12]
 8015c96:	2b07      	cmp	r3, #7
 8015c98:	d903      	bls.n	8015ca2 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	4a29      	ldr	r2, [pc, #164]	@ (8015d44 <HAL_SPI_Transmit_IT+0x148>)
 8015c9e:	675a      	str	r2, [r3, #116]	@ 0x74
 8015ca0:	e002      	b.n	8015ca8 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	4a28      	ldr	r2, [pc, #160]	@ (8015d48 <HAL_SPI_Transmit_IT+0x14c>)
 8015ca6:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	689b      	ldr	r3, [r3, #8]
 8015cac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015cb0:	d108      	bne.n	8015cc4 <HAL_SPI_Transmit_IT+0xc8>
  {
    SPI_1LINE_TX(hspi);
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	681a      	ldr	r2, [r3, #0]
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015cc0:	601a      	str	r2, [r3, #0]
 8015cc2:	e009      	b.n	8015cd8 <HAL_SPI_Transmit_IT+0xdc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	68db      	ldr	r3, [r3, #12]
 8015cca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8015cd6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	685a      	ldr	r2, [r3, #4]
 8015cde:	4b1b      	ldr	r3, [pc, #108]	@ (8015d4c <HAL_SPI_Transmit_IT+0x150>)
 8015ce0:	4013      	ands	r3, r2
 8015ce2:	88f9      	ldrh	r1, [r7, #6]
 8015ce4:	68fa      	ldr	r2, [r7, #12]
 8015ce6:	6812      	ldr	r2, [r2, #0]
 8015ce8:	430b      	orrs	r3, r1
 8015cea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	681a      	ldr	r2, [r3, #0]
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	f042 0201 	orr.w	r2, r2, #1
 8015cfa:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	6919      	ldr	r1, [r3, #16]
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	681a      	ldr	r2, [r3, #0]
 8015d0e:	f240 732a 	movw	r3, #1834	@ 0x72a
 8015d12:	430b      	orrs	r3, r1
 8015d14:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	685b      	ldr	r3, [r3, #4]
 8015d1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015d1e:	d107      	bne.n	8015d30 <HAL_SPI_Transmit_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	681a      	ldr	r2, [r3, #0]
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015d2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015d30:	2300      	movs	r3, #0
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3714      	adds	r7, #20
 8015d36:	46bd      	mov	sp, r7
 8015d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3c:	4770      	bx	lr
 8015d3e:	bf00      	nop
 8015d40:	080167bf 	.word	0x080167bf
 8015d44:	08016761 	.word	0x08016761
 8015d48:	08016707 	.word	0x08016707
 8015d4c:	ffff0000 	.word	0xffff0000

08015d50 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8015d50:	b480      	push	{r7}
 8015d52:	b085      	sub	sp, #20
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	60f8      	str	r0, [r7, #12]
 8015d58:	60b9      	str	r1, [r7, #8]
 8015d5a:	4613      	mov	r3, r2
 8015d5c:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015d64:	b2db      	uxtb	r3, r3
 8015d66:	2b01      	cmp	r3, #1
 8015d68:	d001      	beq.n	8015d6e <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8015d6a:	2302      	movs	r3, #2
 8015d6c:	e08b      	b.n	8015e86 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0UL))
 8015d6e:	68bb      	ldr	r3, [r7, #8]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d002      	beq.n	8015d7a <HAL_SPI_Receive_IT+0x2a>
 8015d74:	88fb      	ldrh	r3, [r7, #6]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d101      	bne.n	8015d7e <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	e083      	b.n	8015e86 <HAL_SPI_Receive_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015d84:	2b01      	cmp	r3, #1
 8015d86:	d101      	bne.n	8015d8c <HAL_SPI_Receive_IT+0x3c>
 8015d88:	2302      	movs	r3, #2
 8015d8a:	e07c      	b.n	8015e86 <HAL_SPI_Receive_IT+0x136>
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	2201      	movs	r2, #1
 8015d90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	2204      	movs	r2, #4
 8015d98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	2200      	movs	r2, #0
 8015da0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	68ba      	ldr	r2, [r7, #8]
 8015da8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	88fa      	ldrh	r2, [r7, #6]
 8015dae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	88fa      	ldrh	r2, [r7, #6]
 8015db6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	2200      	movs	r2, #0
 8015dcc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxISR       = NULL;
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->Reload.pRxBuffPtr  = NULL;
  hspi->Reload.RxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	68db      	ldr	r3, [r3, #12]
 8015dda:	2b0f      	cmp	r3, #15
 8015ddc:	d903      	bls.n	8015de6 <HAL_SPI_Receive_IT+0x96>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	4a2c      	ldr	r2, [pc, #176]	@ (8015e94 <HAL_SPI_Receive_IT+0x144>)
 8015de2:	671a      	str	r2, [r3, #112]	@ 0x70
 8015de4:	e00a      	b.n	8015dfc <HAL_SPI_Receive_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	68db      	ldr	r3, [r3, #12]
 8015dea:	2b07      	cmp	r3, #7
 8015dec:	d903      	bls.n	8015df6 <HAL_SPI_Receive_IT+0xa6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	4a29      	ldr	r2, [pc, #164]	@ (8015e98 <HAL_SPI_Receive_IT+0x148>)
 8015df2:	671a      	str	r2, [r3, #112]	@ 0x70
 8015df4:	e002      	b.n	8015dfc <HAL_SPI_Receive_IT+0xac>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	4a28      	ldr	r2, [pc, #160]	@ (8015e9c <HAL_SPI_Receive_IT+0x14c>)
 8015dfa:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	689b      	ldr	r3, [r3, #8]
 8015e00:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015e04:	d108      	bne.n	8015e18 <HAL_SPI_Receive_IT+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	681a      	ldr	r2, [r3, #0]
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8015e14:	601a      	str	r2, [r3, #0]
 8015e16:	e009      	b.n	8015e2c <HAL_SPI_Receive_IT+0xdc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	68db      	ldr	r3, [r3, #12]
 8015e1e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8015e2a:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	685a      	ldr	r2, [r3, #4]
 8015e32:	4b1b      	ldr	r3, [pc, #108]	@ (8015ea0 <HAL_SPI_Receive_IT+0x150>)
 8015e34:	4013      	ands	r3, r2
 8015e36:	88f9      	ldrh	r1, [r7, #6]
 8015e38:	68fa      	ldr	r2, [r7, #12]
 8015e3a:	6812      	ldr	r2, [r2, #0]
 8015e3c:	430b      	orrs	r3, r1
 8015e3e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	681a      	ldr	r2, [r3, #0]
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	f042 0201 	orr.w	r2, r2, #1
 8015e4e:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	2200      	movs	r2, #0
 8015e54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	6919      	ldr	r1, [r3, #16]
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	681a      	ldr	r2, [r3, #0]
 8015e62:	f240 7349 	movw	r3, #1865	@ 0x749
 8015e66:	430b      	orrs	r3, r1
 8015e68:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	685b      	ldr	r3, [r3, #4]
 8015e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015e72:	d107      	bne.n	8015e84 <HAL_SPI_Receive_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	681a      	ldr	r2, [r3, #0]
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015e82:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015e84:	2300      	movs	r3, #0
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	3714      	adds	r7, #20
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e90:	4770      	bx	lr
 8015e92:	bf00      	nop
 8015e94:	080166af 	.word	0x080166af
 8015e98:	0801664f 	.word	0x0801664f
 8015e9c:	080165f1 	.word	0x080165f1
 8015ea0:	ffff0000 	.word	0xffff0000

08015ea4 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b084      	sub	sp, #16
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	60f8      	str	r0, [r7, #12]
 8015eac:	60b9      	str	r1, [r7, #8]
 8015eae:	4613      	mov	r3, r2
 8015eb0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015eb8:	b2db      	uxtb	r3, r3
 8015eba:	2b01      	cmp	r3, #1
 8015ebc:	d001      	beq.n	8015ec2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8015ebe:	2302      	movs	r3, #2
 8015ec0:	e126      	b.n	8016110 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d002      	beq.n	8015ece <HAL_SPI_Transmit_DMA+0x2a>
 8015ec8:	88fb      	ldrh	r3, [r7, #6]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d101      	bne.n	8015ed2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8015ece:	2301      	movs	r3, #1
 8015ed0:	e11e      	b.n	8016110 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015ed8:	2b01      	cmp	r3, #1
 8015eda:	d101      	bne.n	8015ee0 <HAL_SPI_Transmit_DMA+0x3c>
 8015edc:	2302      	movs	r3, #2
 8015ede:	e117      	b.n	8016110 <HAL_SPI_Transmit_DMA+0x26c>
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	2201      	movs	r2, #1
 8015ee4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	2203      	movs	r2, #3
 8015eec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	68ba      	ldr	r2, [r7, #8]
 8015efc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	88fa      	ldrh	r2, [r7, #6]
 8015f02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	88fa      	ldrh	r2, [r7, #6]
 8015f0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	2200      	movs	r2, #0
 8015f12:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	2200      	movs	r2, #0
 8015f18:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	2200      	movs	r2, #0
 8015f24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	689b      	ldr	r3, [r3, #8]
 8015f34:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015f38:	d108      	bne.n	8015f4c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	681a      	ldr	r2, [r3, #0]
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015f48:	601a      	str	r2, [r3, #0]
 8015f4a:	e009      	b.n	8015f60 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	68db      	ldr	r3, [r3, #12]
 8015f52:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8015f5e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	68db      	ldr	r3, [r3, #12]
 8015f64:	2b0f      	cmp	r3, #15
 8015f66:	d905      	bls.n	8015f74 <HAL_SPI_Transmit_DMA+0xd0>
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015f6c:	699b      	ldr	r3, [r3, #24]
 8015f6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015f72:	d10f      	bne.n	8015f94 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015f78:	2b07      	cmp	r3, #7
 8015f7a:	d911      	bls.n	8015fa0 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015f80:	699b      	ldr	r3, [r3, #24]
 8015f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015f86:	d00b      	beq.n	8015fa0 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015f8c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015f8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015f92:	d005      	beq.n	8015fa0 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2200      	movs	r2, #0
 8015f98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	e0b7      	b.n	8016110 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	68db      	ldr	r3, [r3, #12]
 8015fa4:	2b07      	cmp	r3, #7
 8015fa6:	d820      	bhi.n	8015fea <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fac:	699b      	ldr	r3, [r3, #24]
 8015fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015fb2:	d109      	bne.n	8015fc8 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015fba:	b29b      	uxth	r3, r3
 8015fbc:	3301      	adds	r3, #1
 8015fbe:	105b      	asrs	r3, r3, #1
 8015fc0:	b29a      	uxth	r2, r3
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fcc:	699b      	ldr	r3, [r3, #24]
 8015fce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015fd2:	d11e      	bne.n	8016012 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015fda:	b29b      	uxth	r3, r3
 8015fdc:	3303      	adds	r3, #3
 8015fde:	109b      	asrs	r3, r3, #2
 8015fe0:	b29a      	uxth	r2, r3
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015fe8:	e013      	b.n	8016012 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	68db      	ldr	r3, [r3, #12]
 8015fee:	2b0f      	cmp	r3, #15
 8015ff0:	d80f      	bhi.n	8016012 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ff6:	699b      	ldr	r3, [r3, #24]
 8015ff8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015ffc:	d109      	bne.n	8016012 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8016004:	b29b      	uxth	r3, r3
 8016006:	3301      	adds	r3, #1
 8016008:	105b      	asrs	r3, r3, #1
 801600a:	b29a      	uxth	r2, r3
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016016:	4a40      	ldr	r2, [pc, #256]	@ (8016118 <HAL_SPI_Transmit_DMA+0x274>)
 8016018:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801601e:	4a3f      	ldr	r2, [pc, #252]	@ (801611c <HAL_SPI_Transmit_DMA+0x278>)
 8016020:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016026:	4a3e      	ldr	r2, [pc, #248]	@ (8016120 <HAL_SPI_Transmit_DMA+0x27c>)
 8016028:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801602e:	2200      	movs	r2, #0
 8016030:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	689a      	ldr	r2, [r3, #8]
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8016040:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801604a:	4619      	mov	r1, r3
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	3320      	adds	r3, #32
 8016052:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801605a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 801605c:	f7f6 f81e 	bl	800c09c <HAL_DMA_Start_IT>
 8016060:	4603      	mov	r3, r0
 8016062:	2b00      	cmp	r3, #0
 8016064:	d011      	beq.n	801608a <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801606c:	f043 0210 	orr.w	r2, r3, #16
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	2201      	movs	r2, #1
 801607a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	2200      	movs	r2, #0
 8016082:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8016086:	2301      	movs	r3, #1
 8016088:	e042      	b.n	8016110 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801608e:	69db      	ldr	r3, [r3, #28]
 8016090:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016094:	d108      	bne.n	80160a8 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	6859      	ldr	r1, [r3, #4]
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	681a      	ldr	r2, [r3, #0]
 80160a0:	4b20      	ldr	r3, [pc, #128]	@ (8016124 <HAL_SPI_Transmit_DMA+0x280>)
 80160a2:	400b      	ands	r3, r1
 80160a4:	6053      	str	r3, [r2, #4]
 80160a6:	e009      	b.n	80160bc <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	685a      	ldr	r2, [r3, #4]
 80160ae:	4b1d      	ldr	r3, [pc, #116]	@ (8016124 <HAL_SPI_Transmit_DMA+0x280>)
 80160b0:	4013      	ands	r3, r2
 80160b2:	88f9      	ldrh	r1, [r7, #6]
 80160b4:	68fa      	ldr	r2, [r7, #12]
 80160b6:	6812      	ldr	r2, [r2, #0]
 80160b8:	430b      	orrs	r3, r1
 80160ba:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	689a      	ldr	r2, [r3, #8]
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80160ca:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	691a      	ldr	r2, [r3, #16]
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80160da:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	681a      	ldr	r2, [r3, #0]
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	f042 0201 	orr.w	r2, r2, #1
 80160ea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	685b      	ldr	r3, [r3, #4]
 80160f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80160f4:	d107      	bne.n	8016106 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	681a      	ldr	r2, [r3, #0]
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016104:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	2200      	movs	r2, #0
 801610a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801610e:	2300      	movs	r3, #0
}
 8016110:	4618      	mov	r0, r3
 8016112:	3710      	adds	r7, #16
 8016114:	46bd      	mov	sp, r7
 8016116:	bd80      	pop	{r7, pc}
 8016118:	0801655b 	.word	0x0801655b
 801611c:	08016515 	.word	0x08016515
 8016120:	08016577 	.word	0x08016577
 8016124:	ffff0000 	.word	0xffff0000

08016128 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b08a      	sub	sp, #40	@ 0x28
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	691b      	ldr	r3, [r3, #16]
 8016136:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	695b      	ldr	r3, [r3, #20]
 801613e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8016140:	6a3a      	ldr	r2, [r7, #32]
 8016142:	69fb      	ldr	r3, [r7, #28]
 8016144:	4013      	ands	r3, r2
 8016146:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	689b      	ldr	r3, [r3, #8]
 801614e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8016150:	2300      	movs	r3, #0
 8016152:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801615a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	3330      	adds	r3, #48	@ 0x30
 8016162:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8016164:	69fb      	ldr	r3, [r7, #28]
 8016166:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801616a:	2b00      	cmp	r3, #0
 801616c:	d010      	beq.n	8016190 <HAL_SPI_IRQHandler+0x68>
 801616e:	6a3b      	ldr	r3, [r7, #32]
 8016170:	f003 0308 	and.w	r3, r3, #8
 8016174:	2b00      	cmp	r3, #0
 8016176:	d00b      	beq.n	8016190 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	699a      	ldr	r2, [r3, #24]
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016186:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f000 f9b9 	bl	8016500 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801618e:	e192      	b.n	80164b6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8016190:	69bb      	ldr	r3, [r7, #24]
 8016192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016196:	2b00      	cmp	r3, #0
 8016198:	d113      	bne.n	80161c2 <HAL_SPI_IRQHandler+0x9a>
 801619a:	69bb      	ldr	r3, [r7, #24]
 801619c:	f003 0320 	and.w	r3, r3, #32
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d10e      	bne.n	80161c2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80161a4:	69bb      	ldr	r3, [r7, #24]
 80161a6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d009      	beq.n	80161c2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	4798      	blx	r3
    handled = 1UL;
 80161be:	2301      	movs	r3, #1
 80161c0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80161c2:	69bb      	ldr	r3, [r7, #24]
 80161c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d10f      	bne.n	80161ec <HAL_SPI_IRQHandler+0xc4>
 80161cc:	69bb      	ldr	r3, [r7, #24]
 80161ce:	f003 0301 	and.w	r3, r3, #1
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d00a      	beq.n	80161ec <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80161d6:	69bb      	ldr	r3, [r7, #24]
 80161d8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d105      	bne.n	80161ec <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80161e4:	6878      	ldr	r0, [r7, #4]
 80161e6:	4798      	blx	r3
    handled = 1UL;
 80161e8:	2301      	movs	r3, #1
 80161ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80161ec:	69bb      	ldr	r3, [r7, #24]
 80161ee:	f003 0320 	and.w	r3, r3, #32
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d10f      	bne.n	8016216 <HAL_SPI_IRQHandler+0xee>
 80161f6:	69bb      	ldr	r3, [r7, #24]
 80161f8:	f003 0302 	and.w	r3, r3, #2
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d00a      	beq.n	8016216 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8016200:	69bb      	ldr	r3, [r7, #24]
 8016202:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8016206:	2b00      	cmp	r3, #0
 8016208:	d105      	bne.n	8016216 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	4798      	blx	r3
    handled = 1UL;
 8016212:	2301      	movs	r3, #1
 8016214:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8016216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016218:	2b00      	cmp	r3, #0
 801621a:	f040 8147 	bne.w	80164ac <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801621e:	69bb      	ldr	r3, [r7, #24]
 8016220:	f003 0308 	and.w	r3, r3, #8
 8016224:	2b00      	cmp	r3, #0
 8016226:	f000 808b 	beq.w	8016340 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	699a      	ldr	r2, [r3, #24]
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	f042 0208 	orr.w	r2, r2, #8
 8016238:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	699a      	ldr	r2, [r3, #24]
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	f042 0210 	orr.w	r2, r2, #16
 8016248:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	699a      	ldr	r2, [r3, #24]
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016258:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	691a      	ldr	r2, [r3, #16]
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	f022 0208 	bic.w	r2, r2, #8
 8016268:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	689b      	ldr	r3, [r3, #8]
 8016270:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8016274:	2b00      	cmp	r3, #0
 8016276:	d13d      	bne.n	80162f4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8016278:	e036      	b.n	80162e8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	68db      	ldr	r3, [r3, #12]
 801627e:	2b0f      	cmp	r3, #15
 8016280:	d90b      	bls.n	801629a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	681a      	ldr	r2, [r3, #0]
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801628a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801628c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016292:	1d1a      	adds	r2, r3, #4
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	665a      	str	r2, [r3, #100]	@ 0x64
 8016298:	e01d      	b.n	80162d6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	68db      	ldr	r3, [r3, #12]
 801629e:	2b07      	cmp	r3, #7
 80162a0:	d90b      	bls.n	80162ba <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80162a6:	68fa      	ldr	r2, [r7, #12]
 80162a8:	8812      	ldrh	r2, [r2, #0]
 80162aa:	b292      	uxth	r2, r2
 80162ac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80162b2:	1c9a      	adds	r2, r3, #2
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	665a      	str	r2, [r3, #100]	@ 0x64
 80162b8:	e00d      	b.n	80162d6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80162c6:	7812      	ldrb	r2, [r2, #0]
 80162c8:	b2d2      	uxtb	r2, r2
 80162ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80162d0:	1c5a      	adds	r2, r3, #1
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80162dc:	b29b      	uxth	r3, r3
 80162de:	3b01      	subs	r3, #1
 80162e0:	b29a      	uxth	r2, r3
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80162ee:	b29b      	uxth	r3, r3
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d1c2      	bne.n	801627a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f000 fa8f 	bl	8016818 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2201      	movs	r2, #1
 80162fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016308:	2b00      	cmp	r3, #0
 801630a:	d003      	beq.n	8016314 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801630c:	6878      	ldr	r0, [r7, #4]
 801630e:	f000 f8ed 	bl	80164ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8016312:	e0d0      	b.n	80164b6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8016314:	7cfb      	ldrb	r3, [r7, #19]
 8016316:	2b05      	cmp	r3, #5
 8016318:	d103      	bne.n	8016322 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f000 f8d2 	bl	80164c4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8016320:	e0c6      	b.n	80164b0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8016322:	7cfb      	ldrb	r3, [r7, #19]
 8016324:	2b04      	cmp	r3, #4
 8016326:	d103      	bne.n	8016330 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8016328:	6878      	ldr	r0, [r7, #4]
 801632a:	f7f0 ff87 	bl	800723c <HAL_SPI_RxCpltCallback>
    return;
 801632e:	e0bf      	b.n	80164b0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8016330:	7cfb      	ldrb	r3, [r7, #19]
 8016332:	2b03      	cmp	r3, #3
 8016334:	f040 80bc 	bne.w	80164b0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f7f0 ff61 	bl	8007200 <HAL_SPI_TxCpltCallback>
    return;
 801633e:	e0b7      	b.n	80164b0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8016340:	69bb      	ldr	r3, [r7, #24]
 8016342:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8016346:	2b00      	cmp	r3, #0
 8016348:	f000 80b5 	beq.w	80164b6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801634c:	69bb      	ldr	r3, [r7, #24]
 801634e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016352:	2b00      	cmp	r3, #0
 8016354:	d00f      	beq.n	8016376 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801635c:	f043 0204 	orr.w	r2, r3, #4
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	699a      	ldr	r2, [r3, #24]
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016374:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8016376:	69bb      	ldr	r3, [r7, #24]
 8016378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801637c:	2b00      	cmp	r3, #0
 801637e:	d00f      	beq.n	80163a0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016386:	f043 0201 	orr.w	r2, r3, #1
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	699a      	ldr	r2, [r3, #24]
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801639e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80163a0:	69bb      	ldr	r3, [r7, #24]
 80163a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d00f      	beq.n	80163ca <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80163b0:	f043 0208 	orr.w	r2, r3, #8
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	699a      	ldr	r2, [r3, #24]
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80163c8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80163ca:	69bb      	ldr	r3, [r7, #24]
 80163cc:	f003 0320 	and.w	r3, r3, #32
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d00f      	beq.n	80163f4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80163da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	699a      	ldr	r2, [r3, #24]
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	f042 0220 	orr.w	r2, r2, #32
 80163f2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d05a      	beq.n	80164b4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	681a      	ldr	r2, [r3, #0]
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	f022 0201 	bic.w	r2, r2, #1
 801640c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	6919      	ldr	r1, [r3, #16]
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681a      	ldr	r2, [r3, #0]
 8016418:	4b28      	ldr	r3, [pc, #160]	@ (80164bc <HAL_SPI_IRQHandler+0x394>)
 801641a:	400b      	ands	r3, r1
 801641c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801641e:	697b      	ldr	r3, [r7, #20]
 8016420:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8016424:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8016428:	d138      	bne.n	801649c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	689a      	ldr	r2, [r3, #8]
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8016438:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801643e:	2b00      	cmp	r3, #0
 8016440:	d013      	beq.n	801646a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016446:	4a1e      	ldr	r2, [pc, #120]	@ (80164c0 <HAL_SPI_IRQHandler+0x398>)
 8016448:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801644e:	4618      	mov	r0, r3
 8016450:	f7f6 fbac 	bl	800cbac <HAL_DMA_Abort_IT>
 8016454:	4603      	mov	r3, r0
 8016456:	2b00      	cmp	r3, #0
 8016458:	d007      	beq.n	801646a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016460:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801646e:	2b00      	cmp	r3, #0
 8016470:	d020      	beq.n	80164b4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016476:	4a12      	ldr	r2, [pc, #72]	@ (80164c0 <HAL_SPI_IRQHandler+0x398>)
 8016478:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801647e:	4618      	mov	r0, r3
 8016480:	f7f6 fb94 	bl	800cbac <HAL_DMA_Abort_IT>
 8016484:	4603      	mov	r3, r0
 8016486:	2b00      	cmp	r3, #0
 8016488:	d014      	beq.n	80164b4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016490:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801649a:	e00b      	b.n	80164b4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	2201      	movs	r2, #1
 80164a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f000 f821 	bl	80164ec <HAL_SPI_ErrorCallback>
    return;
 80164aa:	e003      	b.n	80164b4 <HAL_SPI_IRQHandler+0x38c>
    return;
 80164ac:	bf00      	nop
 80164ae:	e002      	b.n	80164b6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80164b0:	bf00      	nop
 80164b2:	e000      	b.n	80164b6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80164b4:	bf00      	nop
  }
}
 80164b6:	3728      	adds	r7, #40	@ 0x28
 80164b8:	46bd      	mov	sp, r7
 80164ba:	bd80      	pop	{r7, pc}
 80164bc:	fffffc94 	.word	0xfffffc94
 80164c0:	080165bd 	.word	0x080165bd

080164c4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80164c4:	b480      	push	{r7}
 80164c6:	b083      	sub	sp, #12
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80164cc:	bf00      	nop
 80164ce:	370c      	adds	r7, #12
 80164d0:	46bd      	mov	sp, r7
 80164d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d6:	4770      	bx	lr

080164d8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80164d8:	b480      	push	{r7}
 80164da:	b083      	sub	sp, #12
 80164dc:	af00      	add	r7, sp, #0
 80164de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80164e0:	bf00      	nop
 80164e2:	370c      	adds	r7, #12
 80164e4:	46bd      	mov	sp, r7
 80164e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ea:	4770      	bx	lr

080164ec <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80164ec:	b480      	push	{r7}
 80164ee:	b083      	sub	sp, #12
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80164f4:	bf00      	nop
 80164f6:	370c      	adds	r7, #12
 80164f8:	46bd      	mov	sp, r7
 80164fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fe:	4770      	bx	lr

08016500 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016500:	b480      	push	{r7}
 8016502:	b083      	sub	sp, #12
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8016508:	bf00      	nop
 801650a:	370c      	adds	r7, #12
 801650c:	46bd      	mov	sp, r7
 801650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016512:	4770      	bx	lr

08016514 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b084      	sub	sp, #16
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016520:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016528:	b2db      	uxtb	r3, r3
 801652a:	2b07      	cmp	r3, #7
 801652c:	d011      	beq.n	8016552 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016532:	69db      	ldr	r3, [r3, #28]
 8016534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016538:	d103      	bne.n	8016542 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 801653a:	68f8      	ldr	r0, [r7, #12]
 801653c:	f7f0 fe60 	bl	8007200 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8016540:	e007      	b.n	8016552 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	691a      	ldr	r2, [r3, #16]
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	f042 0208 	orr.w	r2, r2, #8
 8016550:	611a      	str	r2, [r3, #16]
}
 8016552:	bf00      	nop
 8016554:	3710      	adds	r7, #16
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}

0801655a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801655a:	b580      	push	{r7, lr}
 801655c:	b084      	sub	sp, #16
 801655e:	af00      	add	r7, sp, #0
 8016560:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016566:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8016568:	68f8      	ldr	r0, [r7, #12]
 801656a:	f7ff ffb5 	bl	80164d8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801656e:	bf00      	nop
 8016570:	3710      	adds	r7, #16
 8016572:	46bd      	mov	sp, r7
 8016574:	bd80      	pop	{r7, pc}

08016576 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8016576:	b580      	push	{r7, lr}
 8016578:	b084      	sub	sp, #16
 801657a:	af00      	add	r7, sp, #0
 801657c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016582:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8016584:	6878      	ldr	r0, [r7, #4]
 8016586:	f7f7 fc8f 	bl	800dea8 <HAL_DMA_GetError>
 801658a:	4603      	mov	r3, r0
 801658c:	2b02      	cmp	r3, #2
 801658e:	d011      	beq.n	80165b4 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8016590:	68f8      	ldr	r0, [r7, #12]
 8016592:	f000 f941 	bl	8016818 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801659c:	f043 0210 	orr.w	r2, r3, #16
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	2201      	movs	r2, #1
 80165aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80165ae:	68f8      	ldr	r0, [r7, #12]
 80165b0:	f7ff ff9c 	bl	80164ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80165b4:	bf00      	nop
 80165b6:	3710      	adds	r7, #16
 80165b8:	46bd      	mov	sp, r7
 80165ba:	bd80      	pop	{r7, pc}

080165bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b084      	sub	sp, #16
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80165c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	2200      	movs	r2, #0
 80165ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	2200      	movs	r2, #0
 80165d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	2201      	movs	r2, #1
 80165de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80165e2:	68f8      	ldr	r0, [r7, #12]
 80165e4:	f7ff ff82 	bl	80164ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80165e8:	bf00      	nop
 80165ea:	3710      	adds	r7, #16
 80165ec:	46bd      	mov	sp, r7
 80165ee:	bd80      	pop	{r7, pc}

080165f0 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80165f0:	b480      	push	{r7}
 80165f2:	b083      	sub	sp, #12
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016604:	7812      	ldrb	r2, [r2, #0]
 8016606:	b2d2      	uxtb	r2, r2
 8016608:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801660e:	1c5a      	adds	r2, r3, #1
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801661a:	b29b      	uxth	r3, r3
 801661c:	3b01      	subs	r3, #1
 801661e:	b29a      	uxth	r2, r3
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801662c:	b29b      	uxth	r3, r3
 801662e:	2b00      	cmp	r3, #0
 8016630:	d107      	bne.n	8016642 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	691a      	ldr	r2, [r3, #16]
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	f022 0201 	bic.w	r2, r2, #1
 8016640:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8016642:	bf00      	nop
 8016644:	370c      	adds	r7, #12
 8016646:	46bd      	mov	sp, r7
 8016648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664c:	4770      	bx	lr

0801664e <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 801664e:	b480      	push	{r7}
 8016650:	b085      	sub	sp, #20
 8016652:	af00      	add	r7, sp, #0
 8016654:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	3330      	adds	r3, #48	@ 0x30
 801665c:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016662:	68fa      	ldr	r2, [r7, #12]
 8016664:	8812      	ldrh	r2, [r2, #0]
 8016666:	b292      	uxth	r2, r2
 8016668:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801666e:	1c9a      	adds	r2, r3, #2
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801667a:	b29b      	uxth	r3, r3
 801667c:	3b01      	subs	r3, #1
 801667e:	b29a      	uxth	r2, r3
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801668c:	b29b      	uxth	r3, r3
 801668e:	2b00      	cmp	r3, #0
 8016690:	d107      	bne.n	80166a2 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	691a      	ldr	r2, [r3, #16]
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	f022 0201 	bic.w	r2, r2, #1
 80166a0:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80166a2:	bf00      	nop
 80166a4:	3714      	adds	r7, #20
 80166a6:	46bd      	mov	sp, r7
 80166a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ac:	4770      	bx	lr

080166ae <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80166ae:	b480      	push	{r7}
 80166b0:	b083      	sub	sp, #12
 80166b2:	af00      	add	r7, sp, #0
 80166b4:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	681a      	ldr	r2, [r3, #0]
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80166be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80166c0:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80166c6:	1d1a      	adds	r2, r3, #4
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80166d2:	b29b      	uxth	r3, r3
 80166d4:	3b01      	subs	r3, #1
 80166d6:	b29a      	uxth	r2, r3
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80166e4:	b29b      	uxth	r3, r3
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d107      	bne.n	80166fa <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	691a      	ldr	r2, [r3, #16]
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	f022 0201 	bic.w	r2, r2, #1
 80166f8:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80166fa:	bf00      	nop
 80166fc:	370c      	adds	r7, #12
 80166fe:	46bd      	mov	sp, r7
 8016700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016704:	4770      	bx	lr

08016706 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8016706:	b480      	push	{r7}
 8016708:	b083      	sub	sp, #12
 801670a:	af00      	add	r7, sp, #0
 801670c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	3320      	adds	r3, #32
 8016718:	7812      	ldrb	r2, [r2, #0]
 801671a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016720:	1c5a      	adds	r2, r3, #1
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801672c:	b29b      	uxth	r3, r3
 801672e:	3b01      	subs	r3, #1
 8016730:	b29a      	uxth	r2, r3
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801673e:	b29b      	uxth	r3, r3
 8016740:	2b00      	cmp	r3, #0
 8016742:	d107      	bne.n	8016754 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	691a      	ldr	r2, [r3, #16]
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	f022 0202 	bic.w	r2, r2, #2
 8016752:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8016754:	bf00      	nop
 8016756:	370c      	adds	r7, #12
 8016758:	46bd      	mov	sp, r7
 801675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801675e:	4770      	bx	lr

08016760 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8016760:	b480      	push	{r7}
 8016762:	b085      	sub	sp, #20
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	3320      	adds	r3, #32
 801676e:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016774:	881a      	ldrh	r2, [r3, #0]
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801677e:	1c9a      	adds	r2, r3, #2
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801678a:	b29b      	uxth	r3, r3
 801678c:	3b01      	subs	r3, #1
 801678e:	b29a      	uxth	r2, r3
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801679c:	b29b      	uxth	r3, r3
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d107      	bne.n	80167b2 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	691a      	ldr	r2, [r3, #16]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	f022 0202 	bic.w	r2, r2, #2
 80167b0:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80167b2:	bf00      	nop
 80167b4:	3714      	adds	r7, #20
 80167b6:	46bd      	mov	sp, r7
 80167b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167bc:	4770      	bx	lr

080167be <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80167be:	b480      	push	{r7}
 80167c0:	b083      	sub	sp, #12
 80167c2:	af00      	add	r7, sp, #0
 80167c4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	6812      	ldr	r2, [r2, #0]
 80167d0:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80167d6:	1d1a      	adds	r2, r3, #4
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80167e2:	b29b      	uxth	r3, r3
 80167e4:	3b01      	subs	r3, #1
 80167e6:	b29a      	uxth	r2, r3
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80167f4:	b29b      	uxth	r3, r3
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d107      	bne.n	801680a <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	691a      	ldr	r2, [r3, #16]
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	f022 0202 	bic.w	r2, r2, #2
 8016808:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 801680a:	bf00      	nop
 801680c:	370c      	adds	r7, #12
 801680e:	46bd      	mov	sp, r7
 8016810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016814:	4770      	bx	lr
	...

08016818 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8016818:	b480      	push	{r7}
 801681a:	b085      	sub	sp, #20
 801681c:	af00      	add	r7, sp, #0
 801681e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	695b      	ldr	r3, [r3, #20]
 8016826:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	699a      	ldr	r2, [r3, #24]
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	f042 0208 	orr.w	r2, r2, #8
 8016836:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	699a      	ldr	r2, [r3, #24]
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	f042 0210 	orr.w	r2, r2, #16
 8016846:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	681a      	ldr	r2, [r3, #0]
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	f022 0201 	bic.w	r2, r2, #1
 8016856:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	6919      	ldr	r1, [r3, #16]
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	681a      	ldr	r2, [r3, #0]
 8016862:	4b3c      	ldr	r3, [pc, #240]	@ (8016954 <SPI_CloseTransfer+0x13c>)
 8016864:	400b      	ands	r3, r1
 8016866:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	689a      	ldr	r2, [r3, #8]
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8016876:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801687e:	b2db      	uxtb	r3, r3
 8016880:	2b04      	cmp	r3, #4
 8016882:	d014      	beq.n	80168ae <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	f003 0320 	and.w	r3, r3, #32
 801688a:	2b00      	cmp	r3, #0
 801688c:	d00f      	beq.n	80168ae <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016894:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	699a      	ldr	r2, [r3, #24]
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	f042 0220 	orr.w	r2, r2, #32
 80168ac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80168b4:	b2db      	uxtb	r3, r3
 80168b6:	2b03      	cmp	r3, #3
 80168b8:	d014      	beq.n	80168e4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d00f      	beq.n	80168e4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80168ca:	f043 0204 	orr.w	r2, r3, #4
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	699a      	ldr	r2, [r3, #24]
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80168e2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d00f      	beq.n	801690e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80168f4:	f043 0201 	orr.w	r2, r3, #1
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	699a      	ldr	r2, [r3, #24]
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801690c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016914:	2b00      	cmp	r3, #0
 8016916:	d00f      	beq.n	8016938 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801691e:	f043 0208 	orr.w	r2, r3, #8
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	699a      	ldr	r2, [r3, #24]
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016936:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2200      	movs	r2, #0
 801693c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2200      	movs	r2, #0
 8016944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8016948:	bf00      	nop
 801694a:	3714      	adds	r7, #20
 801694c:	46bd      	mov	sp, r7
 801694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016952:	4770      	bx	lr
 8016954:	fffffc90 	.word	0xfffffc90

08016958 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b084      	sub	sp, #16
 801695c:	af00      	add	r7, sp, #0
 801695e:	60f8      	str	r0, [r7, #12]
 8016960:	60b9      	str	r1, [r7, #8]
 8016962:	603b      	str	r3, [r7, #0]
 8016964:	4613      	mov	r3, r2
 8016966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8016968:	e010      	b.n	801698c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801696a:	f7f2 ff09 	bl	8009780 <HAL_GetTick>
 801696e:	4602      	mov	r2, r0
 8016970:	69bb      	ldr	r3, [r7, #24]
 8016972:	1ad3      	subs	r3, r2, r3
 8016974:	683a      	ldr	r2, [r7, #0]
 8016976:	429a      	cmp	r2, r3
 8016978:	d803      	bhi.n	8016982 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801697a:	683b      	ldr	r3, [r7, #0]
 801697c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016980:	d102      	bne.n	8016988 <SPI_WaitOnFlagUntilTimeout+0x30>
 8016982:	683b      	ldr	r3, [r7, #0]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d101      	bne.n	801698c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8016988:	2303      	movs	r3, #3
 801698a:	e00f      	b.n	80169ac <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	695a      	ldr	r2, [r3, #20]
 8016992:	68bb      	ldr	r3, [r7, #8]
 8016994:	4013      	ands	r3, r2
 8016996:	68ba      	ldr	r2, [r7, #8]
 8016998:	429a      	cmp	r2, r3
 801699a:	bf0c      	ite	eq
 801699c:	2301      	moveq	r3, #1
 801699e:	2300      	movne	r3, #0
 80169a0:	b2db      	uxtb	r3, r3
 80169a2:	461a      	mov	r2, r3
 80169a4:	79fb      	ldrb	r3, [r7, #7]
 80169a6:	429a      	cmp	r2, r3
 80169a8:	d0df      	beq.n	801696a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80169aa:	2300      	movs	r3, #0
}
 80169ac:	4618      	mov	r0, r3
 80169ae:	3710      	adds	r7, #16
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}

080169b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80169b4:	b480      	push	{r7}
 80169b6:	b085      	sub	sp, #20
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80169c0:	095b      	lsrs	r3, r3, #5
 80169c2:	3301      	adds	r3, #1
 80169c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	68db      	ldr	r3, [r3, #12]
 80169ca:	3301      	adds	r3, #1
 80169cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80169ce:	68bb      	ldr	r3, [r7, #8]
 80169d0:	3307      	adds	r3, #7
 80169d2:	08db      	lsrs	r3, r3, #3
 80169d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	68fa      	ldr	r2, [r7, #12]
 80169da:	fb02 f303 	mul.w	r3, r2, r3
}
 80169de:	4618      	mov	r0, r3
 80169e0:	3714      	adds	r7, #20
 80169e2:	46bd      	mov	sp, r7
 80169e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e8:	4770      	bx	lr

080169ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80169ea:	b580      	push	{r7, lr}
 80169ec:	b082      	sub	sp, #8
 80169ee:	af00      	add	r7, sp, #0
 80169f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d101      	bne.n	80169fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80169f8:	2301      	movs	r3, #1
 80169fa:	e049      	b.n	8016a90 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016a02:	b2db      	uxtb	r3, r3
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d106      	bne.n	8016a16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016a10:	6878      	ldr	r0, [r7, #4]
 8016a12:	f7f2 fcbf 	bl	8009394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	2202      	movs	r2, #2
 8016a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681a      	ldr	r2, [r3, #0]
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	3304      	adds	r3, #4
 8016a26:	4619      	mov	r1, r3
 8016a28:	4610      	mov	r0, r2
 8016a2a:	f000 fedb 	bl	80177e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	2201      	movs	r2, #1
 8016a32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	2201      	movs	r2, #1
 8016a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	2201      	movs	r2, #1
 8016a42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	2201      	movs	r2, #1
 8016a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	2201      	movs	r2, #1
 8016a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	2201      	movs	r2, #1
 8016a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	2201      	movs	r2, #1
 8016a62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	2201      	movs	r2, #1
 8016a6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	2201      	movs	r2, #1
 8016a72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	2201      	movs	r2, #1
 8016a7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	2201      	movs	r2, #1
 8016a82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	2201      	movs	r2, #1
 8016a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016a8e:	2300      	movs	r3, #0
}
 8016a90:	4618      	mov	r0, r3
 8016a92:	3708      	adds	r7, #8
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}

08016a98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016a98:	b480      	push	{r7}
 8016a9a:	b085      	sub	sp, #20
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016aa6:	b2db      	uxtb	r3, r3
 8016aa8:	2b01      	cmp	r3, #1
 8016aaa:	d001      	beq.n	8016ab0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016aac:	2301      	movs	r3, #1
 8016aae:	e056      	b.n	8016b5e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	2202      	movs	r2, #2
 8016ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	4a2b      	ldr	r2, [pc, #172]	@ (8016b6c <HAL_TIM_Base_Start+0xd4>)
 8016abe:	4293      	cmp	r3, r2
 8016ac0:	d02c      	beq.n	8016b1c <HAL_TIM_Base_Start+0x84>
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016aca:	d027      	beq.n	8016b1c <HAL_TIM_Base_Start+0x84>
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	4a27      	ldr	r2, [pc, #156]	@ (8016b70 <HAL_TIM_Base_Start+0xd8>)
 8016ad2:	4293      	cmp	r3, r2
 8016ad4:	d022      	beq.n	8016b1c <HAL_TIM_Base_Start+0x84>
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	4a26      	ldr	r2, [pc, #152]	@ (8016b74 <HAL_TIM_Base_Start+0xdc>)
 8016adc:	4293      	cmp	r3, r2
 8016ade:	d01d      	beq.n	8016b1c <HAL_TIM_Base_Start+0x84>
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	4a24      	ldr	r2, [pc, #144]	@ (8016b78 <HAL_TIM_Base_Start+0xe0>)
 8016ae6:	4293      	cmp	r3, r2
 8016ae8:	d018      	beq.n	8016b1c <HAL_TIM_Base_Start+0x84>
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	4a23      	ldr	r2, [pc, #140]	@ (8016b7c <HAL_TIM_Base_Start+0xe4>)
 8016af0:	4293      	cmp	r3, r2
 8016af2:	d013      	beq.n	8016b1c <HAL_TIM_Base_Start+0x84>
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	4a21      	ldr	r2, [pc, #132]	@ (8016b80 <HAL_TIM_Base_Start+0xe8>)
 8016afa:	4293      	cmp	r3, r2
 8016afc:	d00e      	beq.n	8016b1c <HAL_TIM_Base_Start+0x84>
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	4a20      	ldr	r2, [pc, #128]	@ (8016b84 <HAL_TIM_Base_Start+0xec>)
 8016b04:	4293      	cmp	r3, r2
 8016b06:	d009      	beq.n	8016b1c <HAL_TIM_Base_Start+0x84>
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8016b88 <HAL_TIM_Base_Start+0xf0>)
 8016b0e:	4293      	cmp	r3, r2
 8016b10:	d004      	beq.n	8016b1c <HAL_TIM_Base_Start+0x84>
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	4a1d      	ldr	r2, [pc, #116]	@ (8016b8c <HAL_TIM_Base_Start+0xf4>)
 8016b18:	4293      	cmp	r3, r2
 8016b1a:	d115      	bne.n	8016b48 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	689a      	ldr	r2, [r3, #8]
 8016b22:	4b1b      	ldr	r3, [pc, #108]	@ (8016b90 <HAL_TIM_Base_Start+0xf8>)
 8016b24:	4013      	ands	r3, r2
 8016b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	2b06      	cmp	r3, #6
 8016b2c:	d015      	beq.n	8016b5a <HAL_TIM_Base_Start+0xc2>
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016b34:	d011      	beq.n	8016b5a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	681a      	ldr	r2, [r3, #0]
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	f042 0201 	orr.w	r2, r2, #1
 8016b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b46:	e008      	b.n	8016b5a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	681a      	ldr	r2, [r3, #0]
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	f042 0201 	orr.w	r2, r2, #1
 8016b56:	601a      	str	r2, [r3, #0]
 8016b58:	e000      	b.n	8016b5c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016b5c:	2300      	movs	r3, #0
}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	3714      	adds	r7, #20
 8016b62:	46bd      	mov	sp, r7
 8016b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b68:	4770      	bx	lr
 8016b6a:	bf00      	nop
 8016b6c:	40010000 	.word	0x40010000
 8016b70:	40000400 	.word	0x40000400
 8016b74:	40000800 	.word	0x40000800
 8016b78:	40000c00 	.word	0x40000c00
 8016b7c:	40010400 	.word	0x40010400
 8016b80:	40001800 	.word	0x40001800
 8016b84:	40014000 	.word	0x40014000
 8016b88:	4000e000 	.word	0x4000e000
 8016b8c:	4000e400 	.word	0x4000e400
 8016b90:	00010007 	.word	0x00010007

08016b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016b94:	b480      	push	{r7}
 8016b96:	b085      	sub	sp, #20
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016ba2:	b2db      	uxtb	r3, r3
 8016ba4:	2b01      	cmp	r3, #1
 8016ba6:	d001      	beq.n	8016bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8016ba8:	2301      	movs	r3, #1
 8016baa:	e05e      	b.n	8016c6a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2202      	movs	r2, #2
 8016bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	68da      	ldr	r2, [r3, #12]
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	f042 0201 	orr.w	r2, r2, #1
 8016bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	4a2b      	ldr	r2, [pc, #172]	@ (8016c78 <HAL_TIM_Base_Start_IT+0xe4>)
 8016bca:	4293      	cmp	r3, r2
 8016bcc:	d02c      	beq.n	8016c28 <HAL_TIM_Base_Start_IT+0x94>
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016bd6:	d027      	beq.n	8016c28 <HAL_TIM_Base_Start_IT+0x94>
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	4a27      	ldr	r2, [pc, #156]	@ (8016c7c <HAL_TIM_Base_Start_IT+0xe8>)
 8016bde:	4293      	cmp	r3, r2
 8016be0:	d022      	beq.n	8016c28 <HAL_TIM_Base_Start_IT+0x94>
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	4a26      	ldr	r2, [pc, #152]	@ (8016c80 <HAL_TIM_Base_Start_IT+0xec>)
 8016be8:	4293      	cmp	r3, r2
 8016bea:	d01d      	beq.n	8016c28 <HAL_TIM_Base_Start_IT+0x94>
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	4a24      	ldr	r2, [pc, #144]	@ (8016c84 <HAL_TIM_Base_Start_IT+0xf0>)
 8016bf2:	4293      	cmp	r3, r2
 8016bf4:	d018      	beq.n	8016c28 <HAL_TIM_Base_Start_IT+0x94>
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	4a23      	ldr	r2, [pc, #140]	@ (8016c88 <HAL_TIM_Base_Start_IT+0xf4>)
 8016bfc:	4293      	cmp	r3, r2
 8016bfe:	d013      	beq.n	8016c28 <HAL_TIM_Base_Start_IT+0x94>
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	4a21      	ldr	r2, [pc, #132]	@ (8016c8c <HAL_TIM_Base_Start_IT+0xf8>)
 8016c06:	4293      	cmp	r3, r2
 8016c08:	d00e      	beq.n	8016c28 <HAL_TIM_Base_Start_IT+0x94>
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	4a20      	ldr	r2, [pc, #128]	@ (8016c90 <HAL_TIM_Base_Start_IT+0xfc>)
 8016c10:	4293      	cmp	r3, r2
 8016c12:	d009      	beq.n	8016c28 <HAL_TIM_Base_Start_IT+0x94>
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	4a1e      	ldr	r2, [pc, #120]	@ (8016c94 <HAL_TIM_Base_Start_IT+0x100>)
 8016c1a:	4293      	cmp	r3, r2
 8016c1c:	d004      	beq.n	8016c28 <HAL_TIM_Base_Start_IT+0x94>
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	4a1d      	ldr	r2, [pc, #116]	@ (8016c98 <HAL_TIM_Base_Start_IT+0x104>)
 8016c24:	4293      	cmp	r3, r2
 8016c26:	d115      	bne.n	8016c54 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	689a      	ldr	r2, [r3, #8]
 8016c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8016c9c <HAL_TIM_Base_Start_IT+0x108>)
 8016c30:	4013      	ands	r3, r2
 8016c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	2b06      	cmp	r3, #6
 8016c38:	d015      	beq.n	8016c66 <HAL_TIM_Base_Start_IT+0xd2>
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016c40:	d011      	beq.n	8016c66 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	681a      	ldr	r2, [r3, #0]
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	f042 0201 	orr.w	r2, r2, #1
 8016c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016c52:	e008      	b.n	8016c66 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	681a      	ldr	r2, [r3, #0]
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	f042 0201 	orr.w	r2, r2, #1
 8016c62:	601a      	str	r2, [r3, #0]
 8016c64:	e000      	b.n	8016c68 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016c66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016c68:	2300      	movs	r3, #0
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	3714      	adds	r7, #20
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c74:	4770      	bx	lr
 8016c76:	bf00      	nop
 8016c78:	40010000 	.word	0x40010000
 8016c7c:	40000400 	.word	0x40000400
 8016c80:	40000800 	.word	0x40000800
 8016c84:	40000c00 	.word	0x40000c00
 8016c88:	40010400 	.word	0x40010400
 8016c8c:	40001800 	.word	0x40001800
 8016c90:	40014000 	.word	0x40014000
 8016c94:	4000e000 	.word	0x4000e000
 8016c98:	4000e400 	.word	0x4000e400
 8016c9c:	00010007 	.word	0x00010007

08016ca0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b082      	sub	sp, #8
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d101      	bne.n	8016cb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016cae:	2301      	movs	r3, #1
 8016cb0:	e049      	b.n	8016d46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016cb8:	b2db      	uxtb	r3, r3
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d106      	bne.n	8016ccc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016cc6:	6878      	ldr	r0, [r7, #4]
 8016cc8:	f7f2 fada 	bl	8009280 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	2202      	movs	r2, #2
 8016cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	681a      	ldr	r2, [r3, #0]
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	3304      	adds	r3, #4
 8016cdc:	4619      	mov	r1, r3
 8016cde:	4610      	mov	r0, r2
 8016ce0:	f000 fd80 	bl	80177e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	2201      	movs	r2, #1
 8016ce8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	2201      	movs	r2, #1
 8016cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	2201      	movs	r2, #1
 8016cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	2201      	movs	r2, #1
 8016d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	2201      	movs	r2, #1
 8016d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	2201      	movs	r2, #1
 8016d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	2201      	movs	r2, #1
 8016d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	2201      	movs	r2, #1
 8016d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2201      	movs	r2, #1
 8016d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	2201      	movs	r2, #1
 8016d30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	2201      	movs	r2, #1
 8016d38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	2201      	movs	r2, #1
 8016d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016d44:	2300      	movs	r3, #0
}
 8016d46:	4618      	mov	r0, r3
 8016d48:	3708      	adds	r7, #8
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	bd80      	pop	{r7, pc}
	...

08016d50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b084      	sub	sp, #16
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
 8016d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016d5a:	683b      	ldr	r3, [r7, #0]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d109      	bne.n	8016d74 <HAL_TIM_PWM_Start+0x24>
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8016d66:	b2db      	uxtb	r3, r3
 8016d68:	2b01      	cmp	r3, #1
 8016d6a:	bf14      	ite	ne
 8016d6c:	2301      	movne	r3, #1
 8016d6e:	2300      	moveq	r3, #0
 8016d70:	b2db      	uxtb	r3, r3
 8016d72:	e03c      	b.n	8016dee <HAL_TIM_PWM_Start+0x9e>
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	2b04      	cmp	r3, #4
 8016d78:	d109      	bne.n	8016d8e <HAL_TIM_PWM_Start+0x3e>
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8016d80:	b2db      	uxtb	r3, r3
 8016d82:	2b01      	cmp	r3, #1
 8016d84:	bf14      	ite	ne
 8016d86:	2301      	movne	r3, #1
 8016d88:	2300      	moveq	r3, #0
 8016d8a:	b2db      	uxtb	r3, r3
 8016d8c:	e02f      	b.n	8016dee <HAL_TIM_PWM_Start+0x9e>
 8016d8e:	683b      	ldr	r3, [r7, #0]
 8016d90:	2b08      	cmp	r3, #8
 8016d92:	d109      	bne.n	8016da8 <HAL_TIM_PWM_Start+0x58>
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016d9a:	b2db      	uxtb	r3, r3
 8016d9c:	2b01      	cmp	r3, #1
 8016d9e:	bf14      	ite	ne
 8016da0:	2301      	movne	r3, #1
 8016da2:	2300      	moveq	r3, #0
 8016da4:	b2db      	uxtb	r3, r3
 8016da6:	e022      	b.n	8016dee <HAL_TIM_PWM_Start+0x9e>
 8016da8:	683b      	ldr	r3, [r7, #0]
 8016daa:	2b0c      	cmp	r3, #12
 8016dac:	d109      	bne.n	8016dc2 <HAL_TIM_PWM_Start+0x72>
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016db4:	b2db      	uxtb	r3, r3
 8016db6:	2b01      	cmp	r3, #1
 8016db8:	bf14      	ite	ne
 8016dba:	2301      	movne	r3, #1
 8016dbc:	2300      	moveq	r3, #0
 8016dbe:	b2db      	uxtb	r3, r3
 8016dc0:	e015      	b.n	8016dee <HAL_TIM_PWM_Start+0x9e>
 8016dc2:	683b      	ldr	r3, [r7, #0]
 8016dc4:	2b10      	cmp	r3, #16
 8016dc6:	d109      	bne.n	8016ddc <HAL_TIM_PWM_Start+0x8c>
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016dce:	b2db      	uxtb	r3, r3
 8016dd0:	2b01      	cmp	r3, #1
 8016dd2:	bf14      	ite	ne
 8016dd4:	2301      	movne	r3, #1
 8016dd6:	2300      	moveq	r3, #0
 8016dd8:	b2db      	uxtb	r3, r3
 8016dda:	e008      	b.n	8016dee <HAL_TIM_PWM_Start+0x9e>
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016de2:	b2db      	uxtb	r3, r3
 8016de4:	2b01      	cmp	r3, #1
 8016de6:	bf14      	ite	ne
 8016de8:	2301      	movne	r3, #1
 8016dea:	2300      	moveq	r3, #0
 8016dec:	b2db      	uxtb	r3, r3
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d001      	beq.n	8016df6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8016df2:	2301      	movs	r3, #1
 8016df4:	e0ab      	b.n	8016f4e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016df6:	683b      	ldr	r3, [r7, #0]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d104      	bne.n	8016e06 <HAL_TIM_PWM_Start+0xb6>
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	2202      	movs	r2, #2
 8016e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016e04:	e023      	b.n	8016e4e <HAL_TIM_PWM_Start+0xfe>
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	2b04      	cmp	r3, #4
 8016e0a:	d104      	bne.n	8016e16 <HAL_TIM_PWM_Start+0xc6>
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	2202      	movs	r2, #2
 8016e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016e14:	e01b      	b.n	8016e4e <HAL_TIM_PWM_Start+0xfe>
 8016e16:	683b      	ldr	r3, [r7, #0]
 8016e18:	2b08      	cmp	r3, #8
 8016e1a:	d104      	bne.n	8016e26 <HAL_TIM_PWM_Start+0xd6>
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	2202      	movs	r2, #2
 8016e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016e24:	e013      	b.n	8016e4e <HAL_TIM_PWM_Start+0xfe>
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	2b0c      	cmp	r3, #12
 8016e2a:	d104      	bne.n	8016e36 <HAL_TIM_PWM_Start+0xe6>
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	2202      	movs	r2, #2
 8016e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016e34:	e00b      	b.n	8016e4e <HAL_TIM_PWM_Start+0xfe>
 8016e36:	683b      	ldr	r3, [r7, #0]
 8016e38:	2b10      	cmp	r3, #16
 8016e3a:	d104      	bne.n	8016e46 <HAL_TIM_PWM_Start+0xf6>
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	2202      	movs	r2, #2
 8016e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016e44:	e003      	b.n	8016e4e <HAL_TIM_PWM_Start+0xfe>
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	2202      	movs	r2, #2
 8016e4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	2201      	movs	r2, #1
 8016e54:	6839      	ldr	r1, [r7, #0]
 8016e56:	4618      	mov	r0, r3
 8016e58:	f001 fa1a 	bl	8018290 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	4a3d      	ldr	r2, [pc, #244]	@ (8016f58 <HAL_TIM_PWM_Start+0x208>)
 8016e62:	4293      	cmp	r3, r2
 8016e64:	d013      	beq.n	8016e8e <HAL_TIM_PWM_Start+0x13e>
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	4a3c      	ldr	r2, [pc, #240]	@ (8016f5c <HAL_TIM_PWM_Start+0x20c>)
 8016e6c:	4293      	cmp	r3, r2
 8016e6e:	d00e      	beq.n	8016e8e <HAL_TIM_PWM_Start+0x13e>
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	4a3a      	ldr	r2, [pc, #232]	@ (8016f60 <HAL_TIM_PWM_Start+0x210>)
 8016e76:	4293      	cmp	r3, r2
 8016e78:	d009      	beq.n	8016e8e <HAL_TIM_PWM_Start+0x13e>
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	4a39      	ldr	r2, [pc, #228]	@ (8016f64 <HAL_TIM_PWM_Start+0x214>)
 8016e80:	4293      	cmp	r3, r2
 8016e82:	d004      	beq.n	8016e8e <HAL_TIM_PWM_Start+0x13e>
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	4a37      	ldr	r2, [pc, #220]	@ (8016f68 <HAL_TIM_PWM_Start+0x218>)
 8016e8a:	4293      	cmp	r3, r2
 8016e8c:	d101      	bne.n	8016e92 <HAL_TIM_PWM_Start+0x142>
 8016e8e:	2301      	movs	r3, #1
 8016e90:	e000      	b.n	8016e94 <HAL_TIM_PWM_Start+0x144>
 8016e92:	2300      	movs	r3, #0
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d007      	beq.n	8016ea8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8016ea6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	4a2a      	ldr	r2, [pc, #168]	@ (8016f58 <HAL_TIM_PWM_Start+0x208>)
 8016eae:	4293      	cmp	r3, r2
 8016eb0:	d02c      	beq.n	8016f0c <HAL_TIM_PWM_Start+0x1bc>
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016eba:	d027      	beq.n	8016f0c <HAL_TIM_PWM_Start+0x1bc>
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8016f6c <HAL_TIM_PWM_Start+0x21c>)
 8016ec2:	4293      	cmp	r3, r2
 8016ec4:	d022      	beq.n	8016f0c <HAL_TIM_PWM_Start+0x1bc>
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	4a29      	ldr	r2, [pc, #164]	@ (8016f70 <HAL_TIM_PWM_Start+0x220>)
 8016ecc:	4293      	cmp	r3, r2
 8016ece:	d01d      	beq.n	8016f0c <HAL_TIM_PWM_Start+0x1bc>
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	4a27      	ldr	r2, [pc, #156]	@ (8016f74 <HAL_TIM_PWM_Start+0x224>)
 8016ed6:	4293      	cmp	r3, r2
 8016ed8:	d018      	beq.n	8016f0c <HAL_TIM_PWM_Start+0x1bc>
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	4a1f      	ldr	r2, [pc, #124]	@ (8016f5c <HAL_TIM_PWM_Start+0x20c>)
 8016ee0:	4293      	cmp	r3, r2
 8016ee2:	d013      	beq.n	8016f0c <HAL_TIM_PWM_Start+0x1bc>
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	4a23      	ldr	r2, [pc, #140]	@ (8016f78 <HAL_TIM_PWM_Start+0x228>)
 8016eea:	4293      	cmp	r3, r2
 8016eec:	d00e      	beq.n	8016f0c <HAL_TIM_PWM_Start+0x1bc>
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8016f60 <HAL_TIM_PWM_Start+0x210>)
 8016ef4:	4293      	cmp	r3, r2
 8016ef6:	d009      	beq.n	8016f0c <HAL_TIM_PWM_Start+0x1bc>
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	4a1f      	ldr	r2, [pc, #124]	@ (8016f7c <HAL_TIM_PWM_Start+0x22c>)
 8016efe:	4293      	cmp	r3, r2
 8016f00:	d004      	beq.n	8016f0c <HAL_TIM_PWM_Start+0x1bc>
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	4a1e      	ldr	r2, [pc, #120]	@ (8016f80 <HAL_TIM_PWM_Start+0x230>)
 8016f08:	4293      	cmp	r3, r2
 8016f0a:	d115      	bne.n	8016f38 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	689a      	ldr	r2, [r3, #8]
 8016f12:	4b1c      	ldr	r3, [pc, #112]	@ (8016f84 <HAL_TIM_PWM_Start+0x234>)
 8016f14:	4013      	ands	r3, r2
 8016f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	2b06      	cmp	r3, #6
 8016f1c:	d015      	beq.n	8016f4a <HAL_TIM_PWM_Start+0x1fa>
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016f24:	d011      	beq.n	8016f4a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	681a      	ldr	r2, [r3, #0]
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	f042 0201 	orr.w	r2, r2, #1
 8016f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016f36:	e008      	b.n	8016f4a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	681a      	ldr	r2, [r3, #0]
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	f042 0201 	orr.w	r2, r2, #1
 8016f46:	601a      	str	r2, [r3, #0]
 8016f48:	e000      	b.n	8016f4c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016f4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016f4c:	2300      	movs	r3, #0
}
 8016f4e:	4618      	mov	r0, r3
 8016f50:	3710      	adds	r7, #16
 8016f52:	46bd      	mov	sp, r7
 8016f54:	bd80      	pop	{r7, pc}
 8016f56:	bf00      	nop
 8016f58:	40010000 	.word	0x40010000
 8016f5c:	40010400 	.word	0x40010400
 8016f60:	40014000 	.word	0x40014000
 8016f64:	40014400 	.word	0x40014400
 8016f68:	40014800 	.word	0x40014800
 8016f6c:	40000400 	.word	0x40000400
 8016f70:	40000800 	.word	0x40000800
 8016f74:	40000c00 	.word	0x40000c00
 8016f78:	40001800 	.word	0x40001800
 8016f7c:	4000e000 	.word	0x4000e000
 8016f80:	4000e400 	.word	0x4000e400
 8016f84:	00010007 	.word	0x00010007

08016f88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b082      	sub	sp, #8
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d101      	bne.n	8016f9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8016f96:	2301      	movs	r3, #1
 8016f98:	e049      	b.n	801702e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016fa0:	b2db      	uxtb	r3, r3
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d106      	bne.n	8016fb4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	2200      	movs	r2, #0
 8016faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8016fae:	6878      	ldr	r0, [r7, #4]
 8016fb0:	f7f2 f9a0 	bl	80092f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	2202      	movs	r2, #2
 8016fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	681a      	ldr	r2, [r3, #0]
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	3304      	adds	r3, #4
 8016fc4:	4619      	mov	r1, r3
 8016fc6:	4610      	mov	r0, r2
 8016fc8:	f000 fc0c 	bl	80177e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	2201      	movs	r2, #1
 8016fd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	2201      	movs	r2, #1
 8016fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	2201      	movs	r2, #1
 8016fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	2201      	movs	r2, #1
 8016fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	2201      	movs	r2, #1
 8016ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	2201      	movs	r2, #1
 8016ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	2201      	movs	r2, #1
 8017000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	2201      	movs	r2, #1
 8017008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2201      	movs	r2, #1
 8017010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	2201      	movs	r2, #1
 8017018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	2201      	movs	r2, #1
 8017020:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	2201      	movs	r2, #1
 8017028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801702c:	2300      	movs	r3, #0
}
 801702e:	4618      	mov	r0, r3
 8017030:	3708      	adds	r7, #8
 8017032:	46bd      	mov	sp, r7
 8017034:	bd80      	pop	{r7, pc}

08017036 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8017036:	b580      	push	{r7, lr}
 8017038:	b084      	sub	sp, #16
 801703a:	af00      	add	r7, sp, #0
 801703c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	68db      	ldr	r3, [r3, #12]
 8017044:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	691b      	ldr	r3, [r3, #16]
 801704c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801704e:	68bb      	ldr	r3, [r7, #8]
 8017050:	f003 0302 	and.w	r3, r3, #2
 8017054:	2b00      	cmp	r3, #0
 8017056:	d020      	beq.n	801709a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	f003 0302 	and.w	r3, r3, #2
 801705e:	2b00      	cmp	r3, #0
 8017060:	d01b      	beq.n	801709a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	f06f 0202 	mvn.w	r2, #2
 801706a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	2201      	movs	r2, #1
 8017070:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	699b      	ldr	r3, [r3, #24]
 8017078:	f003 0303 	and.w	r3, r3, #3
 801707c:	2b00      	cmp	r3, #0
 801707e:	d003      	beq.n	8017088 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8017080:	6878      	ldr	r0, [r7, #4]
 8017082:	f000 fb91 	bl	80177a8 <HAL_TIM_IC_CaptureCallback>
 8017086:	e005      	b.n	8017094 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8017088:	6878      	ldr	r0, [r7, #4]
 801708a:	f000 fb83 	bl	8017794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801708e:	6878      	ldr	r0, [r7, #4]
 8017090:	f000 fb94 	bl	80177bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	2200      	movs	r2, #0
 8017098:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801709a:	68bb      	ldr	r3, [r7, #8]
 801709c:	f003 0304 	and.w	r3, r3, #4
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d020      	beq.n	80170e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	f003 0304 	and.w	r3, r3, #4
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d01b      	beq.n	80170e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	f06f 0204 	mvn.w	r2, #4
 80170b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	2202      	movs	r2, #2
 80170bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	699b      	ldr	r3, [r3, #24]
 80170c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d003      	beq.n	80170d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80170cc:	6878      	ldr	r0, [r7, #4]
 80170ce:	f000 fb6b 	bl	80177a8 <HAL_TIM_IC_CaptureCallback>
 80170d2:	e005      	b.n	80170e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80170d4:	6878      	ldr	r0, [r7, #4]
 80170d6:	f000 fb5d 	bl	8017794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80170da:	6878      	ldr	r0, [r7, #4]
 80170dc:	f000 fb6e 	bl	80177bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	2200      	movs	r2, #0
 80170e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	f003 0308 	and.w	r3, r3, #8
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d020      	beq.n	8017132 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	f003 0308 	and.w	r3, r3, #8
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d01b      	beq.n	8017132 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	f06f 0208 	mvn.w	r2, #8
 8017102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	2204      	movs	r2, #4
 8017108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	69db      	ldr	r3, [r3, #28]
 8017110:	f003 0303 	and.w	r3, r3, #3
 8017114:	2b00      	cmp	r3, #0
 8017116:	d003      	beq.n	8017120 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017118:	6878      	ldr	r0, [r7, #4]
 801711a:	f000 fb45 	bl	80177a8 <HAL_TIM_IC_CaptureCallback>
 801711e:	e005      	b.n	801712c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017120:	6878      	ldr	r0, [r7, #4]
 8017122:	f000 fb37 	bl	8017794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017126:	6878      	ldr	r0, [r7, #4]
 8017128:	f000 fb48 	bl	80177bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	2200      	movs	r2, #0
 8017130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8017132:	68bb      	ldr	r3, [r7, #8]
 8017134:	f003 0310 	and.w	r3, r3, #16
 8017138:	2b00      	cmp	r3, #0
 801713a:	d020      	beq.n	801717e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	f003 0310 	and.w	r3, r3, #16
 8017142:	2b00      	cmp	r3, #0
 8017144:	d01b      	beq.n	801717e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	f06f 0210 	mvn.w	r2, #16
 801714e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	2208      	movs	r2, #8
 8017154:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	69db      	ldr	r3, [r3, #28]
 801715c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8017160:	2b00      	cmp	r3, #0
 8017162:	d003      	beq.n	801716c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017164:	6878      	ldr	r0, [r7, #4]
 8017166:	f000 fb1f 	bl	80177a8 <HAL_TIM_IC_CaptureCallback>
 801716a:	e005      	b.n	8017178 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801716c:	6878      	ldr	r0, [r7, #4]
 801716e:	f000 fb11 	bl	8017794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017172:	6878      	ldr	r0, [r7, #4]
 8017174:	f000 fb22 	bl	80177bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	2200      	movs	r2, #0
 801717c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801717e:	68bb      	ldr	r3, [r7, #8]
 8017180:	f003 0301 	and.w	r3, r3, #1
 8017184:	2b00      	cmp	r3, #0
 8017186:	d00c      	beq.n	80171a2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	f003 0301 	and.w	r3, r3, #1
 801718e:	2b00      	cmp	r3, #0
 8017190:	d007      	beq.n	80171a2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	f06f 0201 	mvn.w	r2, #1
 801719a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801719c:	6878      	ldr	r0, [r7, #4]
 801719e:	f7ef f829 	bl	80061f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80171a2:	68bb      	ldr	r3, [r7, #8]
 80171a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d104      	bne.n	80171b6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80171ac:	68bb      	ldr	r3, [r7, #8]
 80171ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d00c      	beq.n	80171d0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d007      	beq.n	80171d0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80171c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	f001 f9b8 	bl	8018540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80171d0:	68bb      	ldr	r3, [r7, #8]
 80171d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d00c      	beq.n	80171f4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d007      	beq.n	80171f4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80171ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80171ee:	6878      	ldr	r0, [r7, #4]
 80171f0:	f001 f9b0 	bl	8018554 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80171f4:	68bb      	ldr	r3, [r7, #8]
 80171f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d00c      	beq.n	8017218 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017204:	2b00      	cmp	r3, #0
 8017206:	d007      	beq.n	8017218 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8017210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8017212:	6878      	ldr	r0, [r7, #4]
 8017214:	f000 fadc 	bl	80177d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8017218:	68bb      	ldr	r3, [r7, #8]
 801721a:	f003 0320 	and.w	r3, r3, #32
 801721e:	2b00      	cmp	r3, #0
 8017220:	d00c      	beq.n	801723c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	f003 0320 	and.w	r3, r3, #32
 8017228:	2b00      	cmp	r3, #0
 801722a:	d007      	beq.n	801723c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	f06f 0220 	mvn.w	r2, #32
 8017234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8017236:	6878      	ldr	r0, [r7, #4]
 8017238:	f001 f978 	bl	801852c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801723c:	bf00      	nop
 801723e:	3710      	adds	r7, #16
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}

08017244 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8017244:	b580      	push	{r7, lr}
 8017246:	b086      	sub	sp, #24
 8017248:	af00      	add	r7, sp, #0
 801724a:	60f8      	str	r0, [r7, #12]
 801724c:	60b9      	str	r1, [r7, #8]
 801724e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017250:	2300      	movs	r3, #0
 8017252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801725a:	2b01      	cmp	r3, #1
 801725c:	d101      	bne.n	8017262 <HAL_TIM_IC_ConfigChannel+0x1e>
 801725e:	2302      	movs	r3, #2
 8017260:	e088      	b.n	8017374 <HAL_TIM_IC_ConfigChannel+0x130>
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	2201      	movs	r2, #1
 8017266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d11b      	bne.n	80172a8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8017274:	68bb      	ldr	r3, [r7, #8]
 8017276:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8017278:	68bb      	ldr	r3, [r7, #8]
 801727a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801727c:	68bb      	ldr	r3, [r7, #8]
 801727e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8017280:	f000 fe32 	bl	8017ee8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	699a      	ldr	r2, [r3, #24]
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	f022 020c 	bic.w	r2, r2, #12
 8017292:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	6999      	ldr	r1, [r3, #24]
 801729a:	68bb      	ldr	r3, [r7, #8]
 801729c:	689a      	ldr	r2, [r3, #8]
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	430a      	orrs	r2, r1
 80172a4:	619a      	str	r2, [r3, #24]
 80172a6:	e060      	b.n	801736a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	2b04      	cmp	r3, #4
 80172ac:	d11c      	bne.n	80172e8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80172b2:	68bb      	ldr	r3, [r7, #8]
 80172b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80172ba:	68bb      	ldr	r3, [r7, #8]
 80172bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80172be:	f000 fec2 	bl	8018046 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	699a      	ldr	r2, [r3, #24]
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80172d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	6999      	ldr	r1, [r3, #24]
 80172d8:	68bb      	ldr	r3, [r7, #8]
 80172da:	689b      	ldr	r3, [r3, #8]
 80172dc:	021a      	lsls	r2, r3, #8
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	430a      	orrs	r2, r1
 80172e4:	619a      	str	r2, [r3, #24]
 80172e6:	e040      	b.n	801736a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2b08      	cmp	r3, #8
 80172ec:	d11b      	bne.n	8017326 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80172f2:	68bb      	ldr	r3, [r7, #8]
 80172f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80172f6:	68bb      	ldr	r3, [r7, #8]
 80172f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80172fa:	68bb      	ldr	r3, [r7, #8]
 80172fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80172fe:	f000 ff0f 	bl	8018120 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	69da      	ldr	r2, [r3, #28]
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	f022 020c 	bic.w	r2, r2, #12
 8017310:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	69d9      	ldr	r1, [r3, #28]
 8017318:	68bb      	ldr	r3, [r7, #8]
 801731a:	689a      	ldr	r2, [r3, #8]
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	430a      	orrs	r2, r1
 8017322:	61da      	str	r2, [r3, #28]
 8017324:	e021      	b.n	801736a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	2b0c      	cmp	r3, #12
 801732a:	d11c      	bne.n	8017366 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8017330:	68bb      	ldr	r3, [r7, #8]
 8017332:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8017334:	68bb      	ldr	r3, [r7, #8]
 8017336:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8017338:	68bb      	ldr	r3, [r7, #8]
 801733a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 801733c:	f000 ff2c 	bl	8018198 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	69da      	ldr	r2, [r3, #28]
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801734e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	69d9      	ldr	r1, [r3, #28]
 8017356:	68bb      	ldr	r3, [r7, #8]
 8017358:	689b      	ldr	r3, [r3, #8]
 801735a:	021a      	lsls	r2, r3, #8
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	430a      	orrs	r2, r1
 8017362:	61da      	str	r2, [r3, #28]
 8017364:	e001      	b.n	801736a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8017366:	2301      	movs	r3, #1
 8017368:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	2200      	movs	r2, #0
 801736e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8017372:	7dfb      	ldrb	r3, [r7, #23]
}
 8017374:	4618      	mov	r0, r3
 8017376:	3718      	adds	r7, #24
 8017378:	46bd      	mov	sp, r7
 801737a:	bd80      	pop	{r7, pc}

0801737c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b086      	sub	sp, #24
 8017380:	af00      	add	r7, sp, #0
 8017382:	60f8      	str	r0, [r7, #12]
 8017384:	60b9      	str	r1, [r7, #8]
 8017386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017388:	2300      	movs	r3, #0
 801738a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017392:	2b01      	cmp	r3, #1
 8017394:	d101      	bne.n	801739a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8017396:	2302      	movs	r3, #2
 8017398:	e0ff      	b.n	801759a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	2201      	movs	r2, #1
 801739e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	2b14      	cmp	r3, #20
 80173a6:	f200 80f0 	bhi.w	801758a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80173aa:	a201      	add	r2, pc, #4	@ (adr r2, 80173b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80173ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173b0:	08017405 	.word	0x08017405
 80173b4:	0801758b 	.word	0x0801758b
 80173b8:	0801758b 	.word	0x0801758b
 80173bc:	0801758b 	.word	0x0801758b
 80173c0:	08017445 	.word	0x08017445
 80173c4:	0801758b 	.word	0x0801758b
 80173c8:	0801758b 	.word	0x0801758b
 80173cc:	0801758b 	.word	0x0801758b
 80173d0:	08017487 	.word	0x08017487
 80173d4:	0801758b 	.word	0x0801758b
 80173d8:	0801758b 	.word	0x0801758b
 80173dc:	0801758b 	.word	0x0801758b
 80173e0:	080174c7 	.word	0x080174c7
 80173e4:	0801758b 	.word	0x0801758b
 80173e8:	0801758b 	.word	0x0801758b
 80173ec:	0801758b 	.word	0x0801758b
 80173f0:	08017509 	.word	0x08017509
 80173f4:	0801758b 	.word	0x0801758b
 80173f8:	0801758b 	.word	0x0801758b
 80173fc:	0801758b 	.word	0x0801758b
 8017400:	08017549 	.word	0x08017549
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	68b9      	ldr	r1, [r7, #8]
 801740a:	4618      	mov	r0, r3
 801740c:	f000 fa96 	bl	801793c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	699a      	ldr	r2, [r3, #24]
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	f042 0208 	orr.w	r2, r2, #8
 801741e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	699a      	ldr	r2, [r3, #24]
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	f022 0204 	bic.w	r2, r2, #4
 801742e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	6999      	ldr	r1, [r3, #24]
 8017436:	68bb      	ldr	r3, [r7, #8]
 8017438:	691a      	ldr	r2, [r3, #16]
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	430a      	orrs	r2, r1
 8017440:	619a      	str	r2, [r3, #24]
      break;
 8017442:	e0a5      	b.n	8017590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	68b9      	ldr	r1, [r7, #8]
 801744a:	4618      	mov	r0, r3
 801744c:	f000 fb06 	bl	8017a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	699a      	ldr	r2, [r3, #24]
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801745e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	699a      	ldr	r2, [r3, #24]
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801746e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	6999      	ldr	r1, [r3, #24]
 8017476:	68bb      	ldr	r3, [r7, #8]
 8017478:	691b      	ldr	r3, [r3, #16]
 801747a:	021a      	lsls	r2, r3, #8
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	430a      	orrs	r2, r1
 8017482:	619a      	str	r2, [r3, #24]
      break;
 8017484:	e084      	b.n	8017590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	68b9      	ldr	r1, [r7, #8]
 801748c:	4618      	mov	r0, r3
 801748e:	f000 fb6f 	bl	8017b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	69da      	ldr	r2, [r3, #28]
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	f042 0208 	orr.w	r2, r2, #8
 80174a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	69da      	ldr	r2, [r3, #28]
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	f022 0204 	bic.w	r2, r2, #4
 80174b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	69d9      	ldr	r1, [r3, #28]
 80174b8:	68bb      	ldr	r3, [r7, #8]
 80174ba:	691a      	ldr	r2, [r3, #16]
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	430a      	orrs	r2, r1
 80174c2:	61da      	str	r2, [r3, #28]
      break;
 80174c4:	e064      	b.n	8017590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	68b9      	ldr	r1, [r7, #8]
 80174cc:	4618      	mov	r0, r3
 80174ce:	f000 fbd7 	bl	8017c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	69da      	ldr	r2, [r3, #28]
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80174e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	69da      	ldr	r2, [r3, #28]
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80174f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	69d9      	ldr	r1, [r3, #28]
 80174f8:	68bb      	ldr	r3, [r7, #8]
 80174fa:	691b      	ldr	r3, [r3, #16]
 80174fc:	021a      	lsls	r2, r3, #8
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	430a      	orrs	r2, r1
 8017504:	61da      	str	r2, [r3, #28]
      break;
 8017506:	e043      	b.n	8017590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	68b9      	ldr	r1, [r7, #8]
 801750e:	4618      	mov	r0, r3
 8017510:	f000 fc20 	bl	8017d54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	f042 0208 	orr.w	r2, r2, #8
 8017522:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	f022 0204 	bic.w	r2, r2, #4
 8017532:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801753a:	68bb      	ldr	r3, [r7, #8]
 801753c:	691a      	ldr	r2, [r3, #16]
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	430a      	orrs	r2, r1
 8017544:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8017546:	e023      	b.n	8017590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	68b9      	ldr	r1, [r7, #8]
 801754e:	4618      	mov	r0, r3
 8017550:	f000 fc64 	bl	8017e1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8017562:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8017572:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801757a:	68bb      	ldr	r3, [r7, #8]
 801757c:	691b      	ldr	r3, [r3, #16]
 801757e:	021a      	lsls	r2, r3, #8
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	430a      	orrs	r2, r1
 8017586:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8017588:	e002      	b.n	8017590 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801758a:	2301      	movs	r3, #1
 801758c:	75fb      	strb	r3, [r7, #23]
      break;
 801758e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	2200      	movs	r2, #0
 8017594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8017598:	7dfb      	ldrb	r3, [r7, #23]
}
 801759a:	4618      	mov	r0, r3
 801759c:	3718      	adds	r7, #24
 801759e:	46bd      	mov	sp, r7
 80175a0:	bd80      	pop	{r7, pc}
 80175a2:	bf00      	nop

080175a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b084      	sub	sp, #16
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
 80175ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80175ae:	2300      	movs	r3, #0
 80175b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80175b8:	2b01      	cmp	r3, #1
 80175ba:	d101      	bne.n	80175c0 <HAL_TIM_ConfigClockSource+0x1c>
 80175bc:	2302      	movs	r3, #2
 80175be:	e0dc      	b.n	801777a <HAL_TIM_ConfigClockSource+0x1d6>
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	2201      	movs	r2, #1
 80175c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	2202      	movs	r2, #2
 80175cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	689b      	ldr	r3, [r3, #8]
 80175d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80175d8:	68ba      	ldr	r2, [r7, #8]
 80175da:	4b6a      	ldr	r3, [pc, #424]	@ (8017784 <HAL_TIM_ConfigClockSource+0x1e0>)
 80175dc:	4013      	ands	r3, r2
 80175de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80175e0:	68bb      	ldr	r3, [r7, #8]
 80175e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80175e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	68ba      	ldr	r2, [r7, #8]
 80175ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80175f0:	683b      	ldr	r3, [r7, #0]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	4a64      	ldr	r2, [pc, #400]	@ (8017788 <HAL_TIM_ConfigClockSource+0x1e4>)
 80175f6:	4293      	cmp	r3, r2
 80175f8:	f000 80a9 	beq.w	801774e <HAL_TIM_ConfigClockSource+0x1aa>
 80175fc:	4a62      	ldr	r2, [pc, #392]	@ (8017788 <HAL_TIM_ConfigClockSource+0x1e4>)
 80175fe:	4293      	cmp	r3, r2
 8017600:	f200 80ae 	bhi.w	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
 8017604:	4a61      	ldr	r2, [pc, #388]	@ (801778c <HAL_TIM_ConfigClockSource+0x1e8>)
 8017606:	4293      	cmp	r3, r2
 8017608:	f000 80a1 	beq.w	801774e <HAL_TIM_ConfigClockSource+0x1aa>
 801760c:	4a5f      	ldr	r2, [pc, #380]	@ (801778c <HAL_TIM_ConfigClockSource+0x1e8>)
 801760e:	4293      	cmp	r3, r2
 8017610:	f200 80a6 	bhi.w	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
 8017614:	4a5e      	ldr	r2, [pc, #376]	@ (8017790 <HAL_TIM_ConfigClockSource+0x1ec>)
 8017616:	4293      	cmp	r3, r2
 8017618:	f000 8099 	beq.w	801774e <HAL_TIM_ConfigClockSource+0x1aa>
 801761c:	4a5c      	ldr	r2, [pc, #368]	@ (8017790 <HAL_TIM_ConfigClockSource+0x1ec>)
 801761e:	4293      	cmp	r3, r2
 8017620:	f200 809e 	bhi.w	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
 8017624:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8017628:	f000 8091 	beq.w	801774e <HAL_TIM_ConfigClockSource+0x1aa>
 801762c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8017630:	f200 8096 	bhi.w	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
 8017634:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017638:	f000 8089 	beq.w	801774e <HAL_TIM_ConfigClockSource+0x1aa>
 801763c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017640:	f200 808e 	bhi.w	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
 8017644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017648:	d03e      	beq.n	80176c8 <HAL_TIM_ConfigClockSource+0x124>
 801764a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801764e:	f200 8087 	bhi.w	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
 8017652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017656:	f000 8086 	beq.w	8017766 <HAL_TIM_ConfigClockSource+0x1c2>
 801765a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801765e:	d87f      	bhi.n	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
 8017660:	2b70      	cmp	r3, #112	@ 0x70
 8017662:	d01a      	beq.n	801769a <HAL_TIM_ConfigClockSource+0xf6>
 8017664:	2b70      	cmp	r3, #112	@ 0x70
 8017666:	d87b      	bhi.n	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
 8017668:	2b60      	cmp	r3, #96	@ 0x60
 801766a:	d050      	beq.n	801770e <HAL_TIM_ConfigClockSource+0x16a>
 801766c:	2b60      	cmp	r3, #96	@ 0x60
 801766e:	d877      	bhi.n	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
 8017670:	2b50      	cmp	r3, #80	@ 0x50
 8017672:	d03c      	beq.n	80176ee <HAL_TIM_ConfigClockSource+0x14a>
 8017674:	2b50      	cmp	r3, #80	@ 0x50
 8017676:	d873      	bhi.n	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
 8017678:	2b40      	cmp	r3, #64	@ 0x40
 801767a:	d058      	beq.n	801772e <HAL_TIM_ConfigClockSource+0x18a>
 801767c:	2b40      	cmp	r3, #64	@ 0x40
 801767e:	d86f      	bhi.n	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
 8017680:	2b30      	cmp	r3, #48	@ 0x30
 8017682:	d064      	beq.n	801774e <HAL_TIM_ConfigClockSource+0x1aa>
 8017684:	2b30      	cmp	r3, #48	@ 0x30
 8017686:	d86b      	bhi.n	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
 8017688:	2b20      	cmp	r3, #32
 801768a:	d060      	beq.n	801774e <HAL_TIM_ConfigClockSource+0x1aa>
 801768c:	2b20      	cmp	r3, #32
 801768e:	d867      	bhi.n	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
 8017690:	2b00      	cmp	r3, #0
 8017692:	d05c      	beq.n	801774e <HAL_TIM_ConfigClockSource+0x1aa>
 8017694:	2b10      	cmp	r3, #16
 8017696:	d05a      	beq.n	801774e <HAL_TIM_ConfigClockSource+0x1aa>
 8017698:	e062      	b.n	8017760 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801769e:	683b      	ldr	r3, [r7, #0]
 80176a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80176a2:	683b      	ldr	r3, [r7, #0]
 80176a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80176aa:	f000 fdd1 	bl	8018250 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	689b      	ldr	r3, [r3, #8]
 80176b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80176b6:	68bb      	ldr	r3, [r7, #8]
 80176b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80176bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	68ba      	ldr	r2, [r7, #8]
 80176c4:	609a      	str	r2, [r3, #8]
      break;
 80176c6:	e04f      	b.n	8017768 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80176cc:	683b      	ldr	r3, [r7, #0]
 80176ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80176d0:	683b      	ldr	r3, [r7, #0]
 80176d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80176d4:	683b      	ldr	r3, [r7, #0]
 80176d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80176d8:	f000 fdba 	bl	8018250 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	689a      	ldr	r2, [r3, #8]
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80176ea:	609a      	str	r2, [r3, #8]
      break;
 80176ec:	e03c      	b.n	8017768 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80176f2:	683b      	ldr	r3, [r7, #0]
 80176f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80176f6:	683b      	ldr	r3, [r7, #0]
 80176f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80176fa:	461a      	mov	r2, r3
 80176fc:	f000 fc74 	bl	8017fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	2150      	movs	r1, #80	@ 0x50
 8017706:	4618      	mov	r0, r3
 8017708:	f000 fd84 	bl	8018214 <TIM_ITRx_SetConfig>
      break;
 801770c:	e02c      	b.n	8017768 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8017712:	683b      	ldr	r3, [r7, #0]
 8017714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017716:	683b      	ldr	r3, [r7, #0]
 8017718:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801771a:	461a      	mov	r2, r3
 801771c:	f000 fcd0 	bl	80180c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	2160      	movs	r1, #96	@ 0x60
 8017726:	4618      	mov	r0, r3
 8017728:	f000 fd74 	bl	8018214 <TIM_ITRx_SetConfig>
      break;
 801772c:	e01c      	b.n	8017768 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8017732:	683b      	ldr	r3, [r7, #0]
 8017734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017736:	683b      	ldr	r3, [r7, #0]
 8017738:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801773a:	461a      	mov	r2, r3
 801773c:	f000 fc54 	bl	8017fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	2140      	movs	r1, #64	@ 0x40
 8017746:	4618      	mov	r0, r3
 8017748:	f000 fd64 	bl	8018214 <TIM_ITRx_SetConfig>
      break;
 801774c:	e00c      	b.n	8017768 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	681a      	ldr	r2, [r3, #0]
 8017752:	683b      	ldr	r3, [r7, #0]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	4619      	mov	r1, r3
 8017758:	4610      	mov	r0, r2
 801775a:	f000 fd5b 	bl	8018214 <TIM_ITRx_SetConfig>
      break;
 801775e:	e003      	b.n	8017768 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8017760:	2301      	movs	r3, #1
 8017762:	73fb      	strb	r3, [r7, #15]
      break;
 8017764:	e000      	b.n	8017768 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8017766:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	2201      	movs	r2, #1
 801776c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	2200      	movs	r2, #0
 8017774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8017778:	7bfb      	ldrb	r3, [r7, #15]
}
 801777a:	4618      	mov	r0, r3
 801777c:	3710      	adds	r7, #16
 801777e:	46bd      	mov	sp, r7
 8017780:	bd80      	pop	{r7, pc}
 8017782:	bf00      	nop
 8017784:	ffceff88 	.word	0xffceff88
 8017788:	00100040 	.word	0x00100040
 801778c:	00100030 	.word	0x00100030
 8017790:	00100020 	.word	0x00100020

08017794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017794:	b480      	push	{r7}
 8017796:	b083      	sub	sp, #12
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801779c:	bf00      	nop
 801779e:	370c      	adds	r7, #12
 80177a0:	46bd      	mov	sp, r7
 80177a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a6:	4770      	bx	lr

080177a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80177a8:	b480      	push	{r7}
 80177aa:	b083      	sub	sp, #12
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80177b0:	bf00      	nop
 80177b2:	370c      	adds	r7, #12
 80177b4:	46bd      	mov	sp, r7
 80177b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ba:	4770      	bx	lr

080177bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80177bc:	b480      	push	{r7}
 80177be:	b083      	sub	sp, #12
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80177c4:	bf00      	nop
 80177c6:	370c      	adds	r7, #12
 80177c8:	46bd      	mov	sp, r7
 80177ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ce:	4770      	bx	lr

080177d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80177d0:	b480      	push	{r7}
 80177d2:	b083      	sub	sp, #12
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80177d8:	bf00      	nop
 80177da:	370c      	adds	r7, #12
 80177dc:	46bd      	mov	sp, r7
 80177de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e2:	4770      	bx	lr

080177e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80177e4:	b480      	push	{r7}
 80177e6:	b085      	sub	sp, #20
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
 80177ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	4a47      	ldr	r2, [pc, #284]	@ (8017914 <TIM_Base_SetConfig+0x130>)
 80177f8:	4293      	cmp	r3, r2
 80177fa:	d013      	beq.n	8017824 <TIM_Base_SetConfig+0x40>
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017802:	d00f      	beq.n	8017824 <TIM_Base_SetConfig+0x40>
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	4a44      	ldr	r2, [pc, #272]	@ (8017918 <TIM_Base_SetConfig+0x134>)
 8017808:	4293      	cmp	r3, r2
 801780a:	d00b      	beq.n	8017824 <TIM_Base_SetConfig+0x40>
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	4a43      	ldr	r2, [pc, #268]	@ (801791c <TIM_Base_SetConfig+0x138>)
 8017810:	4293      	cmp	r3, r2
 8017812:	d007      	beq.n	8017824 <TIM_Base_SetConfig+0x40>
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	4a42      	ldr	r2, [pc, #264]	@ (8017920 <TIM_Base_SetConfig+0x13c>)
 8017818:	4293      	cmp	r3, r2
 801781a:	d003      	beq.n	8017824 <TIM_Base_SetConfig+0x40>
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	4a41      	ldr	r2, [pc, #260]	@ (8017924 <TIM_Base_SetConfig+0x140>)
 8017820:	4293      	cmp	r3, r2
 8017822:	d108      	bne.n	8017836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801782a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801782c:	683b      	ldr	r3, [r7, #0]
 801782e:	685b      	ldr	r3, [r3, #4]
 8017830:	68fa      	ldr	r2, [r7, #12]
 8017832:	4313      	orrs	r3, r2
 8017834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	4a36      	ldr	r2, [pc, #216]	@ (8017914 <TIM_Base_SetConfig+0x130>)
 801783a:	4293      	cmp	r3, r2
 801783c:	d027      	beq.n	801788e <TIM_Base_SetConfig+0xaa>
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017844:	d023      	beq.n	801788e <TIM_Base_SetConfig+0xaa>
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	4a33      	ldr	r2, [pc, #204]	@ (8017918 <TIM_Base_SetConfig+0x134>)
 801784a:	4293      	cmp	r3, r2
 801784c:	d01f      	beq.n	801788e <TIM_Base_SetConfig+0xaa>
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	4a32      	ldr	r2, [pc, #200]	@ (801791c <TIM_Base_SetConfig+0x138>)
 8017852:	4293      	cmp	r3, r2
 8017854:	d01b      	beq.n	801788e <TIM_Base_SetConfig+0xaa>
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	4a31      	ldr	r2, [pc, #196]	@ (8017920 <TIM_Base_SetConfig+0x13c>)
 801785a:	4293      	cmp	r3, r2
 801785c:	d017      	beq.n	801788e <TIM_Base_SetConfig+0xaa>
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	4a30      	ldr	r2, [pc, #192]	@ (8017924 <TIM_Base_SetConfig+0x140>)
 8017862:	4293      	cmp	r3, r2
 8017864:	d013      	beq.n	801788e <TIM_Base_SetConfig+0xaa>
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	4a2f      	ldr	r2, [pc, #188]	@ (8017928 <TIM_Base_SetConfig+0x144>)
 801786a:	4293      	cmp	r3, r2
 801786c:	d00f      	beq.n	801788e <TIM_Base_SetConfig+0xaa>
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	4a2e      	ldr	r2, [pc, #184]	@ (801792c <TIM_Base_SetConfig+0x148>)
 8017872:	4293      	cmp	r3, r2
 8017874:	d00b      	beq.n	801788e <TIM_Base_SetConfig+0xaa>
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	4a2d      	ldr	r2, [pc, #180]	@ (8017930 <TIM_Base_SetConfig+0x14c>)
 801787a:	4293      	cmp	r3, r2
 801787c:	d007      	beq.n	801788e <TIM_Base_SetConfig+0xaa>
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	4a2c      	ldr	r2, [pc, #176]	@ (8017934 <TIM_Base_SetConfig+0x150>)
 8017882:	4293      	cmp	r3, r2
 8017884:	d003      	beq.n	801788e <TIM_Base_SetConfig+0xaa>
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	4a2b      	ldr	r2, [pc, #172]	@ (8017938 <TIM_Base_SetConfig+0x154>)
 801788a:	4293      	cmp	r3, r2
 801788c:	d108      	bne.n	80178a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017896:	683b      	ldr	r3, [r7, #0]
 8017898:	68db      	ldr	r3, [r3, #12]
 801789a:	68fa      	ldr	r2, [r7, #12]
 801789c:	4313      	orrs	r3, r2
 801789e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80178a6:	683b      	ldr	r3, [r7, #0]
 80178a8:	695b      	ldr	r3, [r3, #20]
 80178aa:	4313      	orrs	r3, r2
 80178ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	689a      	ldr	r2, [r3, #8]
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80178b6:	683b      	ldr	r3, [r7, #0]
 80178b8:	681a      	ldr	r2, [r3, #0]
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	4a14      	ldr	r2, [pc, #80]	@ (8017914 <TIM_Base_SetConfig+0x130>)
 80178c2:	4293      	cmp	r3, r2
 80178c4:	d00f      	beq.n	80178e6 <TIM_Base_SetConfig+0x102>
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	4a16      	ldr	r2, [pc, #88]	@ (8017924 <TIM_Base_SetConfig+0x140>)
 80178ca:	4293      	cmp	r3, r2
 80178cc:	d00b      	beq.n	80178e6 <TIM_Base_SetConfig+0x102>
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	4a15      	ldr	r2, [pc, #84]	@ (8017928 <TIM_Base_SetConfig+0x144>)
 80178d2:	4293      	cmp	r3, r2
 80178d4:	d007      	beq.n	80178e6 <TIM_Base_SetConfig+0x102>
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	4a14      	ldr	r2, [pc, #80]	@ (801792c <TIM_Base_SetConfig+0x148>)
 80178da:	4293      	cmp	r3, r2
 80178dc:	d003      	beq.n	80178e6 <TIM_Base_SetConfig+0x102>
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	4a13      	ldr	r2, [pc, #76]	@ (8017930 <TIM_Base_SetConfig+0x14c>)
 80178e2:	4293      	cmp	r3, r2
 80178e4:	d103      	bne.n	80178ee <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80178e6:	683b      	ldr	r3, [r7, #0]
 80178e8:	691a      	ldr	r2, [r3, #16]
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	f043 0204 	orr.w	r2, r3, #4
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	2201      	movs	r2, #1
 80178fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	68fa      	ldr	r2, [r7, #12]
 8017904:	601a      	str	r2, [r3, #0]
}
 8017906:	bf00      	nop
 8017908:	3714      	adds	r7, #20
 801790a:	46bd      	mov	sp, r7
 801790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017910:	4770      	bx	lr
 8017912:	bf00      	nop
 8017914:	40010000 	.word	0x40010000
 8017918:	40000400 	.word	0x40000400
 801791c:	40000800 	.word	0x40000800
 8017920:	40000c00 	.word	0x40000c00
 8017924:	40010400 	.word	0x40010400
 8017928:	40014000 	.word	0x40014000
 801792c:	40014400 	.word	0x40014400
 8017930:	40014800 	.word	0x40014800
 8017934:	4000e000 	.word	0x4000e000
 8017938:	4000e400 	.word	0x4000e400

0801793c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801793c:	b480      	push	{r7}
 801793e:	b087      	sub	sp, #28
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
 8017944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	6a1b      	ldr	r3, [r3, #32]
 801794a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	6a1b      	ldr	r3, [r3, #32]
 8017950:	f023 0201 	bic.w	r2, r3, #1
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	685b      	ldr	r3, [r3, #4]
 801795c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	699b      	ldr	r3, [r3, #24]
 8017962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8017964:	68fa      	ldr	r2, [r7, #12]
 8017966:	4b37      	ldr	r3, [pc, #220]	@ (8017a44 <TIM_OC1_SetConfig+0x108>)
 8017968:	4013      	ands	r3, r2
 801796a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	f023 0303 	bic.w	r3, r3, #3
 8017972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017974:	683b      	ldr	r3, [r7, #0]
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	68fa      	ldr	r2, [r7, #12]
 801797a:	4313      	orrs	r3, r2
 801797c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801797e:	697b      	ldr	r3, [r7, #20]
 8017980:	f023 0302 	bic.w	r3, r3, #2
 8017984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8017986:	683b      	ldr	r3, [r7, #0]
 8017988:	689b      	ldr	r3, [r3, #8]
 801798a:	697a      	ldr	r2, [r7, #20]
 801798c:	4313      	orrs	r3, r2
 801798e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	4a2d      	ldr	r2, [pc, #180]	@ (8017a48 <TIM_OC1_SetConfig+0x10c>)
 8017994:	4293      	cmp	r3, r2
 8017996:	d00f      	beq.n	80179b8 <TIM_OC1_SetConfig+0x7c>
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	4a2c      	ldr	r2, [pc, #176]	@ (8017a4c <TIM_OC1_SetConfig+0x110>)
 801799c:	4293      	cmp	r3, r2
 801799e:	d00b      	beq.n	80179b8 <TIM_OC1_SetConfig+0x7c>
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	4a2b      	ldr	r2, [pc, #172]	@ (8017a50 <TIM_OC1_SetConfig+0x114>)
 80179a4:	4293      	cmp	r3, r2
 80179a6:	d007      	beq.n	80179b8 <TIM_OC1_SetConfig+0x7c>
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	4a2a      	ldr	r2, [pc, #168]	@ (8017a54 <TIM_OC1_SetConfig+0x118>)
 80179ac:	4293      	cmp	r3, r2
 80179ae:	d003      	beq.n	80179b8 <TIM_OC1_SetConfig+0x7c>
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	4a29      	ldr	r2, [pc, #164]	@ (8017a58 <TIM_OC1_SetConfig+0x11c>)
 80179b4:	4293      	cmp	r3, r2
 80179b6:	d10c      	bne.n	80179d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80179b8:	697b      	ldr	r3, [r7, #20]
 80179ba:	f023 0308 	bic.w	r3, r3, #8
 80179be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80179c0:	683b      	ldr	r3, [r7, #0]
 80179c2:	68db      	ldr	r3, [r3, #12]
 80179c4:	697a      	ldr	r2, [r7, #20]
 80179c6:	4313      	orrs	r3, r2
 80179c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80179ca:	697b      	ldr	r3, [r7, #20]
 80179cc:	f023 0304 	bic.w	r3, r3, #4
 80179d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	4a1c      	ldr	r2, [pc, #112]	@ (8017a48 <TIM_OC1_SetConfig+0x10c>)
 80179d6:	4293      	cmp	r3, r2
 80179d8:	d00f      	beq.n	80179fa <TIM_OC1_SetConfig+0xbe>
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	4a1b      	ldr	r2, [pc, #108]	@ (8017a4c <TIM_OC1_SetConfig+0x110>)
 80179de:	4293      	cmp	r3, r2
 80179e0:	d00b      	beq.n	80179fa <TIM_OC1_SetConfig+0xbe>
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	4a1a      	ldr	r2, [pc, #104]	@ (8017a50 <TIM_OC1_SetConfig+0x114>)
 80179e6:	4293      	cmp	r3, r2
 80179e8:	d007      	beq.n	80179fa <TIM_OC1_SetConfig+0xbe>
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	4a19      	ldr	r2, [pc, #100]	@ (8017a54 <TIM_OC1_SetConfig+0x118>)
 80179ee:	4293      	cmp	r3, r2
 80179f0:	d003      	beq.n	80179fa <TIM_OC1_SetConfig+0xbe>
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	4a18      	ldr	r2, [pc, #96]	@ (8017a58 <TIM_OC1_SetConfig+0x11c>)
 80179f6:	4293      	cmp	r3, r2
 80179f8:	d111      	bne.n	8017a1e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80179fa:	693b      	ldr	r3, [r7, #16]
 80179fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8017a02:	693b      	ldr	r3, [r7, #16]
 8017a04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8017a0a:	683b      	ldr	r3, [r7, #0]
 8017a0c:	695b      	ldr	r3, [r3, #20]
 8017a0e:	693a      	ldr	r2, [r7, #16]
 8017a10:	4313      	orrs	r3, r2
 8017a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017a14:	683b      	ldr	r3, [r7, #0]
 8017a16:	699b      	ldr	r3, [r3, #24]
 8017a18:	693a      	ldr	r2, [r7, #16]
 8017a1a:	4313      	orrs	r3, r2
 8017a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	693a      	ldr	r2, [r7, #16]
 8017a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	68fa      	ldr	r2, [r7, #12]
 8017a28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8017a2a:	683b      	ldr	r3, [r7, #0]
 8017a2c:	685a      	ldr	r2, [r3, #4]
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	697a      	ldr	r2, [r7, #20]
 8017a36:	621a      	str	r2, [r3, #32]
}
 8017a38:	bf00      	nop
 8017a3a:	371c      	adds	r7, #28
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a42:	4770      	bx	lr
 8017a44:	fffeff8f 	.word	0xfffeff8f
 8017a48:	40010000 	.word	0x40010000
 8017a4c:	40010400 	.word	0x40010400
 8017a50:	40014000 	.word	0x40014000
 8017a54:	40014400 	.word	0x40014400
 8017a58:	40014800 	.word	0x40014800

08017a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017a5c:	b480      	push	{r7}
 8017a5e:	b087      	sub	sp, #28
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
 8017a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	6a1b      	ldr	r3, [r3, #32]
 8017a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	6a1b      	ldr	r3, [r3, #32]
 8017a70:	f023 0210 	bic.w	r2, r3, #16
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	685b      	ldr	r3, [r3, #4]
 8017a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	699b      	ldr	r3, [r3, #24]
 8017a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8017a84:	68fa      	ldr	r2, [r7, #12]
 8017a86:	4b34      	ldr	r3, [pc, #208]	@ (8017b58 <TIM_OC2_SetConfig+0xfc>)
 8017a88:	4013      	ands	r3, r2
 8017a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	021b      	lsls	r3, r3, #8
 8017a9a:	68fa      	ldr	r2, [r7, #12]
 8017a9c:	4313      	orrs	r3, r2
 8017a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8017aa0:	697b      	ldr	r3, [r7, #20]
 8017aa2:	f023 0320 	bic.w	r3, r3, #32
 8017aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8017aa8:	683b      	ldr	r3, [r7, #0]
 8017aaa:	689b      	ldr	r3, [r3, #8]
 8017aac:	011b      	lsls	r3, r3, #4
 8017aae:	697a      	ldr	r2, [r7, #20]
 8017ab0:	4313      	orrs	r3, r2
 8017ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	4a29      	ldr	r2, [pc, #164]	@ (8017b5c <TIM_OC2_SetConfig+0x100>)
 8017ab8:	4293      	cmp	r3, r2
 8017aba:	d003      	beq.n	8017ac4 <TIM_OC2_SetConfig+0x68>
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	4a28      	ldr	r2, [pc, #160]	@ (8017b60 <TIM_OC2_SetConfig+0x104>)
 8017ac0:	4293      	cmp	r3, r2
 8017ac2:	d10d      	bne.n	8017ae0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017ac4:	697b      	ldr	r3, [r7, #20]
 8017ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017acc:	683b      	ldr	r3, [r7, #0]
 8017ace:	68db      	ldr	r3, [r3, #12]
 8017ad0:	011b      	lsls	r3, r3, #4
 8017ad2:	697a      	ldr	r2, [r7, #20]
 8017ad4:	4313      	orrs	r3, r2
 8017ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8017ad8:	697b      	ldr	r3, [r7, #20]
 8017ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017ade:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8017b5c <TIM_OC2_SetConfig+0x100>)
 8017ae4:	4293      	cmp	r3, r2
 8017ae6:	d00f      	beq.n	8017b08 <TIM_OC2_SetConfig+0xac>
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	4a1d      	ldr	r2, [pc, #116]	@ (8017b60 <TIM_OC2_SetConfig+0x104>)
 8017aec:	4293      	cmp	r3, r2
 8017aee:	d00b      	beq.n	8017b08 <TIM_OC2_SetConfig+0xac>
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	4a1c      	ldr	r2, [pc, #112]	@ (8017b64 <TIM_OC2_SetConfig+0x108>)
 8017af4:	4293      	cmp	r3, r2
 8017af6:	d007      	beq.n	8017b08 <TIM_OC2_SetConfig+0xac>
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	4a1b      	ldr	r2, [pc, #108]	@ (8017b68 <TIM_OC2_SetConfig+0x10c>)
 8017afc:	4293      	cmp	r3, r2
 8017afe:	d003      	beq.n	8017b08 <TIM_OC2_SetConfig+0xac>
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	4a1a      	ldr	r2, [pc, #104]	@ (8017b6c <TIM_OC2_SetConfig+0x110>)
 8017b04:	4293      	cmp	r3, r2
 8017b06:	d113      	bne.n	8017b30 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8017b08:	693b      	ldr	r3, [r7, #16]
 8017b0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8017b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8017b10:	693b      	ldr	r3, [r7, #16]
 8017b12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8017b18:	683b      	ldr	r3, [r7, #0]
 8017b1a:	695b      	ldr	r3, [r3, #20]
 8017b1c:	009b      	lsls	r3, r3, #2
 8017b1e:	693a      	ldr	r2, [r7, #16]
 8017b20:	4313      	orrs	r3, r2
 8017b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017b24:	683b      	ldr	r3, [r7, #0]
 8017b26:	699b      	ldr	r3, [r3, #24]
 8017b28:	009b      	lsls	r3, r3, #2
 8017b2a:	693a      	ldr	r2, [r7, #16]
 8017b2c:	4313      	orrs	r3, r2
 8017b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	693a      	ldr	r2, [r7, #16]
 8017b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	68fa      	ldr	r2, [r7, #12]
 8017b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017b3c:	683b      	ldr	r3, [r7, #0]
 8017b3e:	685a      	ldr	r2, [r3, #4]
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	697a      	ldr	r2, [r7, #20]
 8017b48:	621a      	str	r2, [r3, #32]
}
 8017b4a:	bf00      	nop
 8017b4c:	371c      	adds	r7, #28
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b54:	4770      	bx	lr
 8017b56:	bf00      	nop
 8017b58:	feff8fff 	.word	0xfeff8fff
 8017b5c:	40010000 	.word	0x40010000
 8017b60:	40010400 	.word	0x40010400
 8017b64:	40014000 	.word	0x40014000
 8017b68:	40014400 	.word	0x40014400
 8017b6c:	40014800 	.word	0x40014800

08017b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017b70:	b480      	push	{r7}
 8017b72:	b087      	sub	sp, #28
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	6078      	str	r0, [r7, #4]
 8017b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	6a1b      	ldr	r3, [r3, #32]
 8017b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	6a1b      	ldr	r3, [r3, #32]
 8017b84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	685b      	ldr	r3, [r3, #4]
 8017b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	69db      	ldr	r3, [r3, #28]
 8017b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8017b98:	68fa      	ldr	r2, [r7, #12]
 8017b9a:	4b33      	ldr	r3, [pc, #204]	@ (8017c68 <TIM_OC3_SetConfig+0xf8>)
 8017b9c:	4013      	ands	r3, r2
 8017b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	f023 0303 	bic.w	r3, r3, #3
 8017ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017ba8:	683b      	ldr	r3, [r7, #0]
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	68fa      	ldr	r2, [r7, #12]
 8017bae:	4313      	orrs	r3, r2
 8017bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8017bb2:	697b      	ldr	r3, [r7, #20]
 8017bb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8017bba:	683b      	ldr	r3, [r7, #0]
 8017bbc:	689b      	ldr	r3, [r3, #8]
 8017bbe:	021b      	lsls	r3, r3, #8
 8017bc0:	697a      	ldr	r2, [r7, #20]
 8017bc2:	4313      	orrs	r3, r2
 8017bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	4a28      	ldr	r2, [pc, #160]	@ (8017c6c <TIM_OC3_SetConfig+0xfc>)
 8017bca:	4293      	cmp	r3, r2
 8017bcc:	d003      	beq.n	8017bd6 <TIM_OC3_SetConfig+0x66>
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	4a27      	ldr	r2, [pc, #156]	@ (8017c70 <TIM_OC3_SetConfig+0x100>)
 8017bd2:	4293      	cmp	r3, r2
 8017bd4:	d10d      	bne.n	8017bf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8017bd6:	697b      	ldr	r3, [r7, #20]
 8017bd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8017bde:	683b      	ldr	r3, [r7, #0]
 8017be0:	68db      	ldr	r3, [r3, #12]
 8017be2:	021b      	lsls	r3, r3, #8
 8017be4:	697a      	ldr	r2, [r7, #20]
 8017be6:	4313      	orrs	r3, r2
 8017be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8017bea:	697b      	ldr	r3, [r7, #20]
 8017bec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8017bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8017c6c <TIM_OC3_SetConfig+0xfc>)
 8017bf6:	4293      	cmp	r3, r2
 8017bf8:	d00f      	beq.n	8017c1a <TIM_OC3_SetConfig+0xaa>
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8017c70 <TIM_OC3_SetConfig+0x100>)
 8017bfe:	4293      	cmp	r3, r2
 8017c00:	d00b      	beq.n	8017c1a <TIM_OC3_SetConfig+0xaa>
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	4a1b      	ldr	r2, [pc, #108]	@ (8017c74 <TIM_OC3_SetConfig+0x104>)
 8017c06:	4293      	cmp	r3, r2
 8017c08:	d007      	beq.n	8017c1a <TIM_OC3_SetConfig+0xaa>
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8017c78 <TIM_OC3_SetConfig+0x108>)
 8017c0e:	4293      	cmp	r3, r2
 8017c10:	d003      	beq.n	8017c1a <TIM_OC3_SetConfig+0xaa>
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	4a19      	ldr	r2, [pc, #100]	@ (8017c7c <TIM_OC3_SetConfig+0x10c>)
 8017c16:	4293      	cmp	r3, r2
 8017c18:	d113      	bne.n	8017c42 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8017c1a:	693b      	ldr	r3, [r7, #16]
 8017c1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8017c22:	693b      	ldr	r3, [r7, #16]
 8017c24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8017c2a:	683b      	ldr	r3, [r7, #0]
 8017c2c:	695b      	ldr	r3, [r3, #20]
 8017c2e:	011b      	lsls	r3, r3, #4
 8017c30:	693a      	ldr	r2, [r7, #16]
 8017c32:	4313      	orrs	r3, r2
 8017c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8017c36:	683b      	ldr	r3, [r7, #0]
 8017c38:	699b      	ldr	r3, [r3, #24]
 8017c3a:	011b      	lsls	r3, r3, #4
 8017c3c:	693a      	ldr	r2, [r7, #16]
 8017c3e:	4313      	orrs	r3, r2
 8017c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	693a      	ldr	r2, [r7, #16]
 8017c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	68fa      	ldr	r2, [r7, #12]
 8017c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8017c4e:	683b      	ldr	r3, [r7, #0]
 8017c50:	685a      	ldr	r2, [r3, #4]
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	697a      	ldr	r2, [r7, #20]
 8017c5a:	621a      	str	r2, [r3, #32]
}
 8017c5c:	bf00      	nop
 8017c5e:	371c      	adds	r7, #28
 8017c60:	46bd      	mov	sp, r7
 8017c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c66:	4770      	bx	lr
 8017c68:	fffeff8f 	.word	0xfffeff8f
 8017c6c:	40010000 	.word	0x40010000
 8017c70:	40010400 	.word	0x40010400
 8017c74:	40014000 	.word	0x40014000
 8017c78:	40014400 	.word	0x40014400
 8017c7c:	40014800 	.word	0x40014800

08017c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017c80:	b480      	push	{r7}
 8017c82:	b087      	sub	sp, #28
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
 8017c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	6a1b      	ldr	r3, [r3, #32]
 8017c8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	6a1b      	ldr	r3, [r3, #32]
 8017c94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	685b      	ldr	r3, [r3, #4]
 8017ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	69db      	ldr	r3, [r3, #28]
 8017ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017ca8:	68fa      	ldr	r2, [r7, #12]
 8017caa:	4b24      	ldr	r3, [pc, #144]	@ (8017d3c <TIM_OC4_SetConfig+0xbc>)
 8017cac:	4013      	ands	r3, r2
 8017cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017cb8:	683b      	ldr	r3, [r7, #0]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	021b      	lsls	r3, r3, #8
 8017cbe:	68fa      	ldr	r2, [r7, #12]
 8017cc0:	4313      	orrs	r3, r2
 8017cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017cc4:	693b      	ldr	r3, [r7, #16]
 8017cc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017ccc:	683b      	ldr	r3, [r7, #0]
 8017cce:	689b      	ldr	r3, [r3, #8]
 8017cd0:	031b      	lsls	r3, r3, #12
 8017cd2:	693a      	ldr	r2, [r7, #16]
 8017cd4:	4313      	orrs	r3, r2
 8017cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	4a19      	ldr	r2, [pc, #100]	@ (8017d40 <TIM_OC4_SetConfig+0xc0>)
 8017cdc:	4293      	cmp	r3, r2
 8017cde:	d00f      	beq.n	8017d00 <TIM_OC4_SetConfig+0x80>
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	4a18      	ldr	r2, [pc, #96]	@ (8017d44 <TIM_OC4_SetConfig+0xc4>)
 8017ce4:	4293      	cmp	r3, r2
 8017ce6:	d00b      	beq.n	8017d00 <TIM_OC4_SetConfig+0x80>
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	4a17      	ldr	r2, [pc, #92]	@ (8017d48 <TIM_OC4_SetConfig+0xc8>)
 8017cec:	4293      	cmp	r3, r2
 8017cee:	d007      	beq.n	8017d00 <TIM_OC4_SetConfig+0x80>
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	4a16      	ldr	r2, [pc, #88]	@ (8017d4c <TIM_OC4_SetConfig+0xcc>)
 8017cf4:	4293      	cmp	r3, r2
 8017cf6:	d003      	beq.n	8017d00 <TIM_OC4_SetConfig+0x80>
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	4a15      	ldr	r2, [pc, #84]	@ (8017d50 <TIM_OC4_SetConfig+0xd0>)
 8017cfc:	4293      	cmp	r3, r2
 8017cfe:	d109      	bne.n	8017d14 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8017d00:	697b      	ldr	r3, [r7, #20]
 8017d02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017d08:	683b      	ldr	r3, [r7, #0]
 8017d0a:	695b      	ldr	r3, [r3, #20]
 8017d0c:	019b      	lsls	r3, r3, #6
 8017d0e:	697a      	ldr	r2, [r7, #20]
 8017d10:	4313      	orrs	r3, r2
 8017d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	697a      	ldr	r2, [r7, #20]
 8017d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	68fa      	ldr	r2, [r7, #12]
 8017d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017d20:	683b      	ldr	r3, [r7, #0]
 8017d22:	685a      	ldr	r2, [r3, #4]
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	693a      	ldr	r2, [r7, #16]
 8017d2c:	621a      	str	r2, [r3, #32]
}
 8017d2e:	bf00      	nop
 8017d30:	371c      	adds	r7, #28
 8017d32:	46bd      	mov	sp, r7
 8017d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d38:	4770      	bx	lr
 8017d3a:	bf00      	nop
 8017d3c:	feff8fff 	.word	0xfeff8fff
 8017d40:	40010000 	.word	0x40010000
 8017d44:	40010400 	.word	0x40010400
 8017d48:	40014000 	.word	0x40014000
 8017d4c:	40014400 	.word	0x40014400
 8017d50:	40014800 	.word	0x40014800

08017d54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017d54:	b480      	push	{r7}
 8017d56:	b087      	sub	sp, #28
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
 8017d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	6a1b      	ldr	r3, [r3, #32]
 8017d62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	6a1b      	ldr	r3, [r3, #32]
 8017d68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	685b      	ldr	r3, [r3, #4]
 8017d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8017d7c:	68fa      	ldr	r2, [r7, #12]
 8017d7e:	4b21      	ldr	r3, [pc, #132]	@ (8017e04 <TIM_OC5_SetConfig+0xb0>)
 8017d80:	4013      	ands	r3, r2
 8017d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017d84:	683b      	ldr	r3, [r7, #0]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	68fa      	ldr	r2, [r7, #12]
 8017d8a:	4313      	orrs	r3, r2
 8017d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8017d8e:	693b      	ldr	r3, [r7, #16]
 8017d90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8017d94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	689b      	ldr	r3, [r3, #8]
 8017d9a:	041b      	lsls	r3, r3, #16
 8017d9c:	693a      	ldr	r2, [r7, #16]
 8017d9e:	4313      	orrs	r3, r2
 8017da0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	4a18      	ldr	r2, [pc, #96]	@ (8017e08 <TIM_OC5_SetConfig+0xb4>)
 8017da6:	4293      	cmp	r3, r2
 8017da8:	d00f      	beq.n	8017dca <TIM_OC5_SetConfig+0x76>
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	4a17      	ldr	r2, [pc, #92]	@ (8017e0c <TIM_OC5_SetConfig+0xb8>)
 8017dae:	4293      	cmp	r3, r2
 8017db0:	d00b      	beq.n	8017dca <TIM_OC5_SetConfig+0x76>
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	4a16      	ldr	r2, [pc, #88]	@ (8017e10 <TIM_OC5_SetConfig+0xbc>)
 8017db6:	4293      	cmp	r3, r2
 8017db8:	d007      	beq.n	8017dca <TIM_OC5_SetConfig+0x76>
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	4a15      	ldr	r2, [pc, #84]	@ (8017e14 <TIM_OC5_SetConfig+0xc0>)
 8017dbe:	4293      	cmp	r3, r2
 8017dc0:	d003      	beq.n	8017dca <TIM_OC5_SetConfig+0x76>
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	4a14      	ldr	r2, [pc, #80]	@ (8017e18 <TIM_OC5_SetConfig+0xc4>)
 8017dc6:	4293      	cmp	r3, r2
 8017dc8:	d109      	bne.n	8017dde <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017dca:	697b      	ldr	r3, [r7, #20]
 8017dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8017dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8017dd2:	683b      	ldr	r3, [r7, #0]
 8017dd4:	695b      	ldr	r3, [r3, #20]
 8017dd6:	021b      	lsls	r3, r3, #8
 8017dd8:	697a      	ldr	r2, [r7, #20]
 8017dda:	4313      	orrs	r3, r2
 8017ddc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	697a      	ldr	r2, [r7, #20]
 8017de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	68fa      	ldr	r2, [r7, #12]
 8017de8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017dea:	683b      	ldr	r3, [r7, #0]
 8017dec:	685a      	ldr	r2, [r3, #4]
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	693a      	ldr	r2, [r7, #16]
 8017df6:	621a      	str	r2, [r3, #32]
}
 8017df8:	bf00      	nop
 8017dfa:	371c      	adds	r7, #28
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e02:	4770      	bx	lr
 8017e04:	fffeff8f 	.word	0xfffeff8f
 8017e08:	40010000 	.word	0x40010000
 8017e0c:	40010400 	.word	0x40010400
 8017e10:	40014000 	.word	0x40014000
 8017e14:	40014400 	.word	0x40014400
 8017e18:	40014800 	.word	0x40014800

08017e1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017e1c:	b480      	push	{r7}
 8017e1e:	b087      	sub	sp, #28
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	6078      	str	r0, [r7, #4]
 8017e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	6a1b      	ldr	r3, [r3, #32]
 8017e2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	6a1b      	ldr	r3, [r3, #32]
 8017e30:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	685b      	ldr	r3, [r3, #4]
 8017e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017e44:	68fa      	ldr	r2, [r7, #12]
 8017e46:	4b22      	ldr	r3, [pc, #136]	@ (8017ed0 <TIM_OC6_SetConfig+0xb4>)
 8017e48:	4013      	ands	r3, r2
 8017e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017e4c:	683b      	ldr	r3, [r7, #0]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	021b      	lsls	r3, r3, #8
 8017e52:	68fa      	ldr	r2, [r7, #12]
 8017e54:	4313      	orrs	r3, r2
 8017e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8017e58:	693b      	ldr	r3, [r7, #16]
 8017e5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8017e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	689b      	ldr	r3, [r3, #8]
 8017e64:	051b      	lsls	r3, r3, #20
 8017e66:	693a      	ldr	r2, [r7, #16]
 8017e68:	4313      	orrs	r3, r2
 8017e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	4a19      	ldr	r2, [pc, #100]	@ (8017ed4 <TIM_OC6_SetConfig+0xb8>)
 8017e70:	4293      	cmp	r3, r2
 8017e72:	d00f      	beq.n	8017e94 <TIM_OC6_SetConfig+0x78>
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	4a18      	ldr	r2, [pc, #96]	@ (8017ed8 <TIM_OC6_SetConfig+0xbc>)
 8017e78:	4293      	cmp	r3, r2
 8017e7a:	d00b      	beq.n	8017e94 <TIM_OC6_SetConfig+0x78>
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	4a17      	ldr	r2, [pc, #92]	@ (8017edc <TIM_OC6_SetConfig+0xc0>)
 8017e80:	4293      	cmp	r3, r2
 8017e82:	d007      	beq.n	8017e94 <TIM_OC6_SetConfig+0x78>
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	4a16      	ldr	r2, [pc, #88]	@ (8017ee0 <TIM_OC6_SetConfig+0xc4>)
 8017e88:	4293      	cmp	r3, r2
 8017e8a:	d003      	beq.n	8017e94 <TIM_OC6_SetConfig+0x78>
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	4a15      	ldr	r2, [pc, #84]	@ (8017ee4 <TIM_OC6_SetConfig+0xc8>)
 8017e90:	4293      	cmp	r3, r2
 8017e92:	d109      	bne.n	8017ea8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8017e94:	697b      	ldr	r3, [r7, #20]
 8017e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8017e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8017e9c:	683b      	ldr	r3, [r7, #0]
 8017e9e:	695b      	ldr	r3, [r3, #20]
 8017ea0:	029b      	lsls	r3, r3, #10
 8017ea2:	697a      	ldr	r2, [r7, #20]
 8017ea4:	4313      	orrs	r3, r2
 8017ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	697a      	ldr	r2, [r7, #20]
 8017eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	68fa      	ldr	r2, [r7, #12]
 8017eb2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017eb4:	683b      	ldr	r3, [r7, #0]
 8017eb6:	685a      	ldr	r2, [r3, #4]
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	693a      	ldr	r2, [r7, #16]
 8017ec0:	621a      	str	r2, [r3, #32]
}
 8017ec2:	bf00      	nop
 8017ec4:	371c      	adds	r7, #28
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ecc:	4770      	bx	lr
 8017ece:	bf00      	nop
 8017ed0:	feff8fff 	.word	0xfeff8fff
 8017ed4:	40010000 	.word	0x40010000
 8017ed8:	40010400 	.word	0x40010400
 8017edc:	40014000 	.word	0x40014000
 8017ee0:	40014400 	.word	0x40014400
 8017ee4:	40014800 	.word	0x40014800

08017ee8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8017ee8:	b480      	push	{r7}
 8017eea:	b087      	sub	sp, #28
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	60f8      	str	r0, [r7, #12]
 8017ef0:	60b9      	str	r1, [r7, #8]
 8017ef2:	607a      	str	r2, [r7, #4]
 8017ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	6a1b      	ldr	r3, [r3, #32]
 8017efa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	6a1b      	ldr	r3, [r3, #32]
 8017f00:	f023 0201 	bic.w	r2, r3, #1
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	699b      	ldr	r3, [r3, #24]
 8017f0c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	4a2c      	ldr	r2, [pc, #176]	@ (8017fc4 <TIM_TI1_SetConfig+0xdc>)
 8017f12:	4293      	cmp	r3, r2
 8017f14:	d023      	beq.n	8017f5e <TIM_TI1_SetConfig+0x76>
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017f1c:	d01f      	beq.n	8017f5e <TIM_TI1_SetConfig+0x76>
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	4a29      	ldr	r2, [pc, #164]	@ (8017fc8 <TIM_TI1_SetConfig+0xe0>)
 8017f22:	4293      	cmp	r3, r2
 8017f24:	d01b      	beq.n	8017f5e <TIM_TI1_SetConfig+0x76>
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	4a28      	ldr	r2, [pc, #160]	@ (8017fcc <TIM_TI1_SetConfig+0xe4>)
 8017f2a:	4293      	cmp	r3, r2
 8017f2c:	d017      	beq.n	8017f5e <TIM_TI1_SetConfig+0x76>
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	4a27      	ldr	r2, [pc, #156]	@ (8017fd0 <TIM_TI1_SetConfig+0xe8>)
 8017f32:	4293      	cmp	r3, r2
 8017f34:	d013      	beq.n	8017f5e <TIM_TI1_SetConfig+0x76>
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	4a26      	ldr	r2, [pc, #152]	@ (8017fd4 <TIM_TI1_SetConfig+0xec>)
 8017f3a:	4293      	cmp	r3, r2
 8017f3c:	d00f      	beq.n	8017f5e <TIM_TI1_SetConfig+0x76>
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	4a25      	ldr	r2, [pc, #148]	@ (8017fd8 <TIM_TI1_SetConfig+0xf0>)
 8017f42:	4293      	cmp	r3, r2
 8017f44:	d00b      	beq.n	8017f5e <TIM_TI1_SetConfig+0x76>
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	4a24      	ldr	r2, [pc, #144]	@ (8017fdc <TIM_TI1_SetConfig+0xf4>)
 8017f4a:	4293      	cmp	r3, r2
 8017f4c:	d007      	beq.n	8017f5e <TIM_TI1_SetConfig+0x76>
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	4a23      	ldr	r2, [pc, #140]	@ (8017fe0 <TIM_TI1_SetConfig+0xf8>)
 8017f52:	4293      	cmp	r3, r2
 8017f54:	d003      	beq.n	8017f5e <TIM_TI1_SetConfig+0x76>
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	4a22      	ldr	r2, [pc, #136]	@ (8017fe4 <TIM_TI1_SetConfig+0xfc>)
 8017f5a:	4293      	cmp	r3, r2
 8017f5c:	d101      	bne.n	8017f62 <TIM_TI1_SetConfig+0x7a>
 8017f5e:	2301      	movs	r3, #1
 8017f60:	e000      	b.n	8017f64 <TIM_TI1_SetConfig+0x7c>
 8017f62:	2300      	movs	r3, #0
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d008      	beq.n	8017f7a <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8017f68:	697b      	ldr	r3, [r7, #20]
 8017f6a:	f023 0303 	bic.w	r3, r3, #3
 8017f6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8017f70:	697a      	ldr	r2, [r7, #20]
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	4313      	orrs	r3, r2
 8017f76:	617b      	str	r3, [r7, #20]
 8017f78:	e003      	b.n	8017f82 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8017f7a:	697b      	ldr	r3, [r7, #20]
 8017f7c:	f043 0301 	orr.w	r3, r3, #1
 8017f80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017f82:	697b      	ldr	r3, [r7, #20]
 8017f84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8017f8a:	683b      	ldr	r3, [r7, #0]
 8017f8c:	011b      	lsls	r3, r3, #4
 8017f8e:	b2db      	uxtb	r3, r3
 8017f90:	697a      	ldr	r2, [r7, #20]
 8017f92:	4313      	orrs	r3, r2
 8017f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017f96:	693b      	ldr	r3, [r7, #16]
 8017f98:	f023 030a 	bic.w	r3, r3, #10
 8017f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8017f9e:	68bb      	ldr	r3, [r7, #8]
 8017fa0:	f003 030a 	and.w	r3, r3, #10
 8017fa4:	693a      	ldr	r2, [r7, #16]
 8017fa6:	4313      	orrs	r3, r2
 8017fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	697a      	ldr	r2, [r7, #20]
 8017fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	693a      	ldr	r2, [r7, #16]
 8017fb4:	621a      	str	r2, [r3, #32]
}
 8017fb6:	bf00      	nop
 8017fb8:	371c      	adds	r7, #28
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc0:	4770      	bx	lr
 8017fc2:	bf00      	nop
 8017fc4:	40010000 	.word	0x40010000
 8017fc8:	40000400 	.word	0x40000400
 8017fcc:	40000800 	.word	0x40000800
 8017fd0:	40000c00 	.word	0x40000c00
 8017fd4:	40010400 	.word	0x40010400
 8017fd8:	40001800 	.word	0x40001800
 8017fdc:	40014000 	.word	0x40014000
 8017fe0:	4000e000 	.word	0x4000e000
 8017fe4:	4000e400 	.word	0x4000e400

08017fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017fe8:	b480      	push	{r7}
 8017fea:	b087      	sub	sp, #28
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	60f8      	str	r0, [r7, #12]
 8017ff0:	60b9      	str	r1, [r7, #8]
 8017ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	6a1b      	ldr	r3, [r3, #32]
 8017ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	6a1b      	ldr	r3, [r3, #32]
 8017ffe:	f023 0201 	bic.w	r2, r3, #1
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	699b      	ldr	r3, [r3, #24]
 801800a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801800c:	693b      	ldr	r3, [r7, #16]
 801800e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8018012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	011b      	lsls	r3, r3, #4
 8018018:	693a      	ldr	r2, [r7, #16]
 801801a:	4313      	orrs	r3, r2
 801801c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801801e:	697b      	ldr	r3, [r7, #20]
 8018020:	f023 030a 	bic.w	r3, r3, #10
 8018024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8018026:	697a      	ldr	r2, [r7, #20]
 8018028:	68bb      	ldr	r3, [r7, #8]
 801802a:	4313      	orrs	r3, r2
 801802c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	693a      	ldr	r2, [r7, #16]
 8018032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	697a      	ldr	r2, [r7, #20]
 8018038:	621a      	str	r2, [r3, #32]
}
 801803a:	bf00      	nop
 801803c:	371c      	adds	r7, #28
 801803e:	46bd      	mov	sp, r7
 8018040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018044:	4770      	bx	lr

08018046 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8018046:	b480      	push	{r7}
 8018048:	b087      	sub	sp, #28
 801804a:	af00      	add	r7, sp, #0
 801804c:	60f8      	str	r0, [r7, #12]
 801804e:	60b9      	str	r1, [r7, #8]
 8018050:	607a      	str	r2, [r7, #4]
 8018052:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	6a1b      	ldr	r3, [r3, #32]
 8018058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	6a1b      	ldr	r3, [r3, #32]
 801805e:	f023 0210 	bic.w	r2, r3, #16
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	699b      	ldr	r3, [r3, #24]
 801806a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801806c:	693b      	ldr	r3, [r7, #16]
 801806e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8018072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	021b      	lsls	r3, r3, #8
 8018078:	693a      	ldr	r2, [r7, #16]
 801807a:	4313      	orrs	r3, r2
 801807c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801807e:	693b      	ldr	r3, [r7, #16]
 8018080:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8018084:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8018086:	683b      	ldr	r3, [r7, #0]
 8018088:	031b      	lsls	r3, r3, #12
 801808a:	b29b      	uxth	r3, r3
 801808c:	693a      	ldr	r2, [r7, #16]
 801808e:	4313      	orrs	r3, r2
 8018090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8018092:	697b      	ldr	r3, [r7, #20]
 8018094:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8018098:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801809a:	68bb      	ldr	r3, [r7, #8]
 801809c:	011b      	lsls	r3, r3, #4
 801809e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80180a2:	697a      	ldr	r2, [r7, #20]
 80180a4:	4313      	orrs	r3, r2
 80180a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	693a      	ldr	r2, [r7, #16]
 80180ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	697a      	ldr	r2, [r7, #20]
 80180b2:	621a      	str	r2, [r3, #32]
}
 80180b4:	bf00      	nop
 80180b6:	371c      	adds	r7, #28
 80180b8:	46bd      	mov	sp, r7
 80180ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180be:	4770      	bx	lr

080180c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80180c0:	b480      	push	{r7}
 80180c2:	b087      	sub	sp, #28
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	60f8      	str	r0, [r7, #12]
 80180c8:	60b9      	str	r1, [r7, #8]
 80180ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	6a1b      	ldr	r3, [r3, #32]
 80180d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	6a1b      	ldr	r3, [r3, #32]
 80180d6:	f023 0210 	bic.w	r2, r3, #16
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	699b      	ldr	r3, [r3, #24]
 80180e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80180e4:	693b      	ldr	r3, [r7, #16]
 80180e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80180ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	031b      	lsls	r3, r3, #12
 80180f0:	693a      	ldr	r2, [r7, #16]
 80180f2:	4313      	orrs	r3, r2
 80180f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80180f6:	697b      	ldr	r3, [r7, #20]
 80180f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80180fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80180fe:	68bb      	ldr	r3, [r7, #8]
 8018100:	011b      	lsls	r3, r3, #4
 8018102:	697a      	ldr	r2, [r7, #20]
 8018104:	4313      	orrs	r3, r2
 8018106:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	693a      	ldr	r2, [r7, #16]
 801810c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	697a      	ldr	r2, [r7, #20]
 8018112:	621a      	str	r2, [r3, #32]
}
 8018114:	bf00      	nop
 8018116:	371c      	adds	r7, #28
 8018118:	46bd      	mov	sp, r7
 801811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801811e:	4770      	bx	lr

08018120 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8018120:	b480      	push	{r7}
 8018122:	b087      	sub	sp, #28
 8018124:	af00      	add	r7, sp, #0
 8018126:	60f8      	str	r0, [r7, #12]
 8018128:	60b9      	str	r1, [r7, #8]
 801812a:	607a      	str	r2, [r7, #4]
 801812c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	6a1b      	ldr	r3, [r3, #32]
 8018132:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	6a1b      	ldr	r3, [r3, #32]
 8018138:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	69db      	ldr	r3, [r3, #28]
 8018144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8018146:	693b      	ldr	r3, [r7, #16]
 8018148:	f023 0303 	bic.w	r3, r3, #3
 801814c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 801814e:	693a      	ldr	r2, [r7, #16]
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	4313      	orrs	r3, r2
 8018154:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8018156:	693b      	ldr	r3, [r7, #16]
 8018158:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801815c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801815e:	683b      	ldr	r3, [r7, #0]
 8018160:	011b      	lsls	r3, r3, #4
 8018162:	b2db      	uxtb	r3, r3
 8018164:	693a      	ldr	r2, [r7, #16]
 8018166:	4313      	orrs	r3, r2
 8018168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801816a:	697b      	ldr	r3, [r7, #20]
 801816c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8018170:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8018172:	68bb      	ldr	r3, [r7, #8]
 8018174:	021b      	lsls	r3, r3, #8
 8018176:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 801817a:	697a      	ldr	r2, [r7, #20]
 801817c:	4313      	orrs	r3, r2
 801817e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	693a      	ldr	r2, [r7, #16]
 8018184:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	697a      	ldr	r2, [r7, #20]
 801818a:	621a      	str	r2, [r3, #32]
}
 801818c:	bf00      	nop
 801818e:	371c      	adds	r7, #28
 8018190:	46bd      	mov	sp, r7
 8018192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018196:	4770      	bx	lr

08018198 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8018198:	b480      	push	{r7}
 801819a:	b087      	sub	sp, #28
 801819c:	af00      	add	r7, sp, #0
 801819e:	60f8      	str	r0, [r7, #12]
 80181a0:	60b9      	str	r1, [r7, #8]
 80181a2:	607a      	str	r2, [r7, #4]
 80181a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	6a1b      	ldr	r3, [r3, #32]
 80181aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	6a1b      	ldr	r3, [r3, #32]
 80181b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	69db      	ldr	r3, [r3, #28]
 80181bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80181be:	693b      	ldr	r3, [r7, #16]
 80181c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80181c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	021b      	lsls	r3, r3, #8
 80181ca:	693a      	ldr	r2, [r7, #16]
 80181cc:	4313      	orrs	r3, r2
 80181ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80181d0:	693b      	ldr	r3, [r7, #16]
 80181d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80181d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80181d8:	683b      	ldr	r3, [r7, #0]
 80181da:	031b      	lsls	r3, r3, #12
 80181dc:	b29b      	uxth	r3, r3
 80181de:	693a      	ldr	r2, [r7, #16]
 80181e0:	4313      	orrs	r3, r2
 80181e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80181e4:	697b      	ldr	r3, [r7, #20]
 80181e6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80181ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80181ec:	68bb      	ldr	r3, [r7, #8]
 80181ee:	031b      	lsls	r3, r3, #12
 80181f0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80181f4:	697a      	ldr	r2, [r7, #20]
 80181f6:	4313      	orrs	r3, r2
 80181f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	693a      	ldr	r2, [r7, #16]
 80181fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	697a      	ldr	r2, [r7, #20]
 8018204:	621a      	str	r2, [r3, #32]
}
 8018206:	bf00      	nop
 8018208:	371c      	adds	r7, #28
 801820a:	46bd      	mov	sp, r7
 801820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018210:	4770      	bx	lr
	...

08018214 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8018214:	b480      	push	{r7}
 8018216:	b085      	sub	sp, #20
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	689b      	ldr	r3, [r3, #8]
 8018222:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8018224:	68fa      	ldr	r2, [r7, #12]
 8018226:	4b09      	ldr	r3, [pc, #36]	@ (801824c <TIM_ITRx_SetConfig+0x38>)
 8018228:	4013      	ands	r3, r2
 801822a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801822c:	683a      	ldr	r2, [r7, #0]
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	4313      	orrs	r3, r2
 8018232:	f043 0307 	orr.w	r3, r3, #7
 8018236:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	68fa      	ldr	r2, [r7, #12]
 801823c:	609a      	str	r2, [r3, #8]
}
 801823e:	bf00      	nop
 8018240:	3714      	adds	r7, #20
 8018242:	46bd      	mov	sp, r7
 8018244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018248:	4770      	bx	lr
 801824a:	bf00      	nop
 801824c:	ffcfff8f 	.word	0xffcfff8f

08018250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8018250:	b480      	push	{r7}
 8018252:	b087      	sub	sp, #28
 8018254:	af00      	add	r7, sp, #0
 8018256:	60f8      	str	r0, [r7, #12]
 8018258:	60b9      	str	r1, [r7, #8]
 801825a:	607a      	str	r2, [r7, #4]
 801825c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	689b      	ldr	r3, [r3, #8]
 8018262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8018264:	697b      	ldr	r3, [r7, #20]
 8018266:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801826a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801826c:	683b      	ldr	r3, [r7, #0]
 801826e:	021a      	lsls	r2, r3, #8
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	431a      	orrs	r2, r3
 8018274:	68bb      	ldr	r3, [r7, #8]
 8018276:	4313      	orrs	r3, r2
 8018278:	697a      	ldr	r2, [r7, #20]
 801827a:	4313      	orrs	r3, r2
 801827c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	697a      	ldr	r2, [r7, #20]
 8018282:	609a      	str	r2, [r3, #8]
}
 8018284:	bf00      	nop
 8018286:	371c      	adds	r7, #28
 8018288:	46bd      	mov	sp, r7
 801828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828e:	4770      	bx	lr

08018290 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8018290:	b480      	push	{r7}
 8018292:	b087      	sub	sp, #28
 8018294:	af00      	add	r7, sp, #0
 8018296:	60f8      	str	r0, [r7, #12]
 8018298:	60b9      	str	r1, [r7, #8]
 801829a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801829c:	68bb      	ldr	r3, [r7, #8]
 801829e:	f003 031f 	and.w	r3, r3, #31
 80182a2:	2201      	movs	r2, #1
 80182a4:	fa02 f303 	lsl.w	r3, r2, r3
 80182a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80182aa:	68fb      	ldr	r3, [r7, #12]
 80182ac:	6a1a      	ldr	r2, [r3, #32]
 80182ae:	697b      	ldr	r3, [r7, #20]
 80182b0:	43db      	mvns	r3, r3
 80182b2:	401a      	ands	r2, r3
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	6a1a      	ldr	r2, [r3, #32]
 80182bc:	68bb      	ldr	r3, [r7, #8]
 80182be:	f003 031f 	and.w	r3, r3, #31
 80182c2:	6879      	ldr	r1, [r7, #4]
 80182c4:	fa01 f303 	lsl.w	r3, r1, r3
 80182c8:	431a      	orrs	r2, r3
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	621a      	str	r2, [r3, #32]
}
 80182ce:	bf00      	nop
 80182d0:	371c      	adds	r7, #28
 80182d2:	46bd      	mov	sp, r7
 80182d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d8:	4770      	bx	lr
	...

080182dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80182dc:	b480      	push	{r7}
 80182de:	b085      	sub	sp, #20
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	6078      	str	r0, [r7, #4]
 80182e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80182ec:	2b01      	cmp	r3, #1
 80182ee:	d101      	bne.n	80182f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80182f0:	2302      	movs	r3, #2
 80182f2:	e077      	b.n	80183e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	2201      	movs	r2, #1
 80182f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	2202      	movs	r2, #2
 8018300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	685b      	ldr	r3, [r3, #4]
 801830a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	689b      	ldr	r3, [r3, #8]
 8018312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	4a35      	ldr	r2, [pc, #212]	@ (80183f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801831a:	4293      	cmp	r3, r2
 801831c:	d004      	beq.n	8018328 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	4a34      	ldr	r2, [pc, #208]	@ (80183f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8018324:	4293      	cmp	r3, r2
 8018326:	d108      	bne.n	801833a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801832e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8018330:	683b      	ldr	r3, [r7, #0]
 8018332:	685b      	ldr	r3, [r3, #4]
 8018334:	68fa      	ldr	r2, [r7, #12]
 8018336:	4313      	orrs	r3, r2
 8018338:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8018340:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8018342:	683b      	ldr	r3, [r7, #0]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	68fa      	ldr	r2, [r7, #12]
 8018348:	4313      	orrs	r3, r2
 801834a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	68fa      	ldr	r2, [r7, #12]
 8018352:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	4a25      	ldr	r2, [pc, #148]	@ (80183f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801835a:	4293      	cmp	r3, r2
 801835c:	d02c      	beq.n	80183b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018366:	d027      	beq.n	80183b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	4a22      	ldr	r2, [pc, #136]	@ (80183f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801836e:	4293      	cmp	r3, r2
 8018370:	d022      	beq.n	80183b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	4a21      	ldr	r2, [pc, #132]	@ (80183fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8018378:	4293      	cmp	r3, r2
 801837a:	d01d      	beq.n	80183b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	4a1f      	ldr	r2, [pc, #124]	@ (8018400 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8018382:	4293      	cmp	r3, r2
 8018384:	d018      	beq.n	80183b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	4a1a      	ldr	r2, [pc, #104]	@ (80183f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801838c:	4293      	cmp	r3, r2
 801838e:	d013      	beq.n	80183b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	4a1b      	ldr	r2, [pc, #108]	@ (8018404 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8018396:	4293      	cmp	r3, r2
 8018398:	d00e      	beq.n	80183b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	4a1a      	ldr	r2, [pc, #104]	@ (8018408 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80183a0:	4293      	cmp	r3, r2
 80183a2:	d009      	beq.n	80183b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	4a18      	ldr	r2, [pc, #96]	@ (801840c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80183aa:	4293      	cmp	r3, r2
 80183ac:	d004      	beq.n	80183b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	4a17      	ldr	r2, [pc, #92]	@ (8018410 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80183b4:	4293      	cmp	r3, r2
 80183b6:	d10c      	bne.n	80183d2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80183b8:	68bb      	ldr	r3, [r7, #8]
 80183ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80183be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80183c0:	683b      	ldr	r3, [r7, #0]
 80183c2:	689b      	ldr	r3, [r3, #8]
 80183c4:	68ba      	ldr	r2, [r7, #8]
 80183c6:	4313      	orrs	r3, r2
 80183c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	68ba      	ldr	r2, [r7, #8]
 80183d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	2201      	movs	r2, #1
 80183d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	2200      	movs	r2, #0
 80183de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80183e2:	2300      	movs	r3, #0
}
 80183e4:	4618      	mov	r0, r3
 80183e6:	3714      	adds	r7, #20
 80183e8:	46bd      	mov	sp, r7
 80183ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ee:	4770      	bx	lr
 80183f0:	40010000 	.word	0x40010000
 80183f4:	40010400 	.word	0x40010400
 80183f8:	40000400 	.word	0x40000400
 80183fc:	40000800 	.word	0x40000800
 8018400:	40000c00 	.word	0x40000c00
 8018404:	40001800 	.word	0x40001800
 8018408:	40014000 	.word	0x40014000
 801840c:	4000e000 	.word	0x4000e000
 8018410:	4000e400 	.word	0x4000e400

08018414 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8018414:	b480      	push	{r7}
 8018416:	b085      	sub	sp, #20
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
 801841c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801841e:	2300      	movs	r3, #0
 8018420:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8018428:	2b01      	cmp	r3, #1
 801842a:	d101      	bne.n	8018430 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801842c:	2302      	movs	r3, #2
 801842e:	e073      	b.n	8018518 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	2201      	movs	r2, #1
 8018434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801843e:	683b      	ldr	r3, [r7, #0]
 8018440:	68db      	ldr	r3, [r3, #12]
 8018442:	4313      	orrs	r3, r2
 8018444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801844c:	683b      	ldr	r3, [r7, #0]
 801844e:	689b      	ldr	r3, [r3, #8]
 8018450:	4313      	orrs	r3, r2
 8018452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801845a:	683b      	ldr	r3, [r7, #0]
 801845c:	685b      	ldr	r3, [r3, #4]
 801845e:	4313      	orrs	r3, r2
 8018460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	4313      	orrs	r3, r2
 801846e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8018476:	683b      	ldr	r3, [r7, #0]
 8018478:	691b      	ldr	r3, [r3, #16]
 801847a:	4313      	orrs	r3, r2
 801847c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8018484:	683b      	ldr	r3, [r7, #0]
 8018486:	695b      	ldr	r3, [r3, #20]
 8018488:	4313      	orrs	r3, r2
 801848a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8018492:	683b      	ldr	r3, [r7, #0]
 8018494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018496:	4313      	orrs	r3, r2
 8018498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80184a0:	683b      	ldr	r3, [r7, #0]
 80184a2:	699b      	ldr	r3, [r3, #24]
 80184a4:	041b      	lsls	r3, r3, #16
 80184a6:	4313      	orrs	r3, r2
 80184a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80184b0:	683b      	ldr	r3, [r7, #0]
 80184b2:	69db      	ldr	r3, [r3, #28]
 80184b4:	4313      	orrs	r3, r2
 80184b6:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	4a19      	ldr	r2, [pc, #100]	@ (8018524 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80184be:	4293      	cmp	r3, r2
 80184c0:	d004      	beq.n	80184cc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	4a18      	ldr	r2, [pc, #96]	@ (8018528 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80184c8:	4293      	cmp	r3, r2
 80184ca:	d11c      	bne.n	8018506 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80184d2:	683b      	ldr	r3, [r7, #0]
 80184d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184d6:	051b      	lsls	r3, r3, #20
 80184d8:	4313      	orrs	r3, r2
 80184da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80184e2:	683b      	ldr	r3, [r7, #0]
 80184e4:	6a1b      	ldr	r3, [r3, #32]
 80184e6:	4313      	orrs	r3, r2
 80184e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80184f0:	683b      	ldr	r3, [r7, #0]
 80184f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184f4:	4313      	orrs	r3, r2
 80184f6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80184fe:	683b      	ldr	r3, [r7, #0]
 8018500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018502:	4313      	orrs	r3, r2
 8018504:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	68fa      	ldr	r2, [r7, #12]
 801850c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	2200      	movs	r2, #0
 8018512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8018516:	2300      	movs	r3, #0
}
 8018518:	4618      	mov	r0, r3
 801851a:	3714      	adds	r7, #20
 801851c:	46bd      	mov	sp, r7
 801851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018522:	4770      	bx	lr
 8018524:	40010000 	.word	0x40010000
 8018528:	40010400 	.word	0x40010400

0801852c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801852c:	b480      	push	{r7}
 801852e:	b083      	sub	sp, #12
 8018530:	af00      	add	r7, sp, #0
 8018532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018534:	bf00      	nop
 8018536:	370c      	adds	r7, #12
 8018538:	46bd      	mov	sp, r7
 801853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853e:	4770      	bx	lr

08018540 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018540:	b480      	push	{r7}
 8018542:	b083      	sub	sp, #12
 8018544:	af00      	add	r7, sp, #0
 8018546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018548:	bf00      	nop
 801854a:	370c      	adds	r7, #12
 801854c:	46bd      	mov	sp, r7
 801854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018552:	4770      	bx	lr

08018554 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018554:	b480      	push	{r7}
 8018556:	b083      	sub	sp, #12
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801855c:	bf00      	nop
 801855e:	370c      	adds	r7, #12
 8018560:	46bd      	mov	sp, r7
 8018562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018566:	4770      	bx	lr

08018568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b082      	sub	sp, #8
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d101      	bne.n	801857a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018576:	2301      	movs	r3, #1
 8018578:	e042      	b.n	8018600 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018580:	2b00      	cmp	r3, #0
 8018582:	d106      	bne.n	8018592 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	2200      	movs	r2, #0
 8018588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801858c:	6878      	ldr	r0, [r7, #4]
 801858e:	f7f0 ffd5 	bl	800953c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	2224      	movs	r2, #36	@ 0x24
 8018596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	681a      	ldr	r2, [r3, #0]
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	f022 0201 	bic.w	r2, r2, #1
 80185a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d002      	beq.n	80185b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80185b2:	6878      	ldr	r0, [r7, #4]
 80185b4:	f001 fbf8 	bl	8019da8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80185b8:	6878      	ldr	r0, [r7, #4]
 80185ba:	f000 fd89 	bl	80190d0 <UART_SetConfig>
 80185be:	4603      	mov	r3, r0
 80185c0:	2b01      	cmp	r3, #1
 80185c2:	d101      	bne.n	80185c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80185c4:	2301      	movs	r3, #1
 80185c6:	e01b      	b.n	8018600 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	685a      	ldr	r2, [r3, #4]
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80185d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	689a      	ldr	r2, [r3, #8]
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80185e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	681a      	ldr	r2, [r3, #0]
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	f042 0201 	orr.w	r2, r2, #1
 80185f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80185f8:	6878      	ldr	r0, [r7, #4]
 80185fa:	f001 fc77 	bl	8019eec <UART_CheckIdleState>
 80185fe:	4603      	mov	r3, r0
}
 8018600:	4618      	mov	r0, r3
 8018602:	3708      	adds	r7, #8
 8018604:	46bd      	mov	sp, r7
 8018606:	bd80      	pop	{r7, pc}

08018608 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b08a      	sub	sp, #40	@ 0x28
 801860c:	af02      	add	r7, sp, #8
 801860e:	60f8      	str	r0, [r7, #12]
 8018610:	60b9      	str	r1, [r7, #8]
 8018612:	603b      	str	r3, [r7, #0]
 8018614:	4613      	mov	r3, r2
 8018616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801861e:	2b20      	cmp	r3, #32
 8018620:	d17b      	bne.n	801871a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8018622:	68bb      	ldr	r3, [r7, #8]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d002      	beq.n	801862e <HAL_UART_Transmit+0x26>
 8018628:	88fb      	ldrh	r3, [r7, #6]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d101      	bne.n	8018632 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801862e:	2301      	movs	r3, #1
 8018630:	e074      	b.n	801871c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	2200      	movs	r2, #0
 8018636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	2221      	movs	r2, #33	@ 0x21
 801863e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8018642:	f7f1 f89d 	bl	8009780 <HAL_GetTick>
 8018646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	88fa      	ldrh	r2, [r7, #6]
 801864c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	88fa      	ldrh	r2, [r7, #6]
 8018654:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	689b      	ldr	r3, [r3, #8]
 801865c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018660:	d108      	bne.n	8018674 <HAL_UART_Transmit+0x6c>
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	691b      	ldr	r3, [r3, #16]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d104      	bne.n	8018674 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801866a:	2300      	movs	r3, #0
 801866c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801866e:	68bb      	ldr	r3, [r7, #8]
 8018670:	61bb      	str	r3, [r7, #24]
 8018672:	e003      	b.n	801867c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8018674:	68bb      	ldr	r3, [r7, #8]
 8018676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8018678:	2300      	movs	r3, #0
 801867a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801867c:	e030      	b.n	80186e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801867e:	683b      	ldr	r3, [r7, #0]
 8018680:	9300      	str	r3, [sp, #0]
 8018682:	697b      	ldr	r3, [r7, #20]
 8018684:	2200      	movs	r2, #0
 8018686:	2180      	movs	r1, #128	@ 0x80
 8018688:	68f8      	ldr	r0, [r7, #12]
 801868a:	f001 fcd9 	bl	801a040 <UART_WaitOnFlagUntilTimeout>
 801868e:	4603      	mov	r3, r0
 8018690:	2b00      	cmp	r3, #0
 8018692:	d005      	beq.n	80186a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	2220      	movs	r2, #32
 8018698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801869c:	2303      	movs	r3, #3
 801869e:	e03d      	b.n	801871c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80186a0:	69fb      	ldr	r3, [r7, #28]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d10b      	bne.n	80186be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80186a6:	69bb      	ldr	r3, [r7, #24]
 80186a8:	881b      	ldrh	r3, [r3, #0]
 80186aa:	461a      	mov	r2, r3
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80186b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80186b6:	69bb      	ldr	r3, [r7, #24]
 80186b8:	3302      	adds	r3, #2
 80186ba:	61bb      	str	r3, [r7, #24]
 80186bc:	e007      	b.n	80186ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80186be:	69fb      	ldr	r3, [r7, #28]
 80186c0:	781a      	ldrb	r2, [r3, #0]
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80186c8:	69fb      	ldr	r3, [r7, #28]
 80186ca:	3301      	adds	r3, #1
 80186cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80186d4:	b29b      	uxth	r3, r3
 80186d6:	3b01      	subs	r3, #1
 80186d8:	b29a      	uxth	r2, r3
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80186e6:	b29b      	uxth	r3, r3
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d1c8      	bne.n	801867e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80186ec:	683b      	ldr	r3, [r7, #0]
 80186ee:	9300      	str	r3, [sp, #0]
 80186f0:	697b      	ldr	r3, [r7, #20]
 80186f2:	2200      	movs	r2, #0
 80186f4:	2140      	movs	r1, #64	@ 0x40
 80186f6:	68f8      	ldr	r0, [r7, #12]
 80186f8:	f001 fca2 	bl	801a040 <UART_WaitOnFlagUntilTimeout>
 80186fc:	4603      	mov	r3, r0
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d005      	beq.n	801870e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	2220      	movs	r2, #32
 8018706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801870a:	2303      	movs	r3, #3
 801870c:	e006      	b.n	801871c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	2220      	movs	r2, #32
 8018712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8018716:	2300      	movs	r3, #0
 8018718:	e000      	b.n	801871c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801871a:	2302      	movs	r3, #2
  }
}
 801871c:	4618      	mov	r0, r3
 801871e:	3720      	adds	r7, #32
 8018720:	46bd      	mov	sp, r7
 8018722:	bd80      	pop	{r7, pc}

08018724 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8018724:	b480      	push	{r7}
 8018726:	b091      	sub	sp, #68	@ 0x44
 8018728:	af00      	add	r7, sp, #0
 801872a:	60f8      	str	r0, [r7, #12]
 801872c:	60b9      	str	r1, [r7, #8]
 801872e:	4613      	mov	r3, r2
 8018730:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018738:	2b20      	cmp	r3, #32
 801873a:	d178      	bne.n	801882e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 801873c:	68bb      	ldr	r3, [r7, #8]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d002      	beq.n	8018748 <HAL_UART_Transmit_IT+0x24>
 8018742:	88fb      	ldrh	r3, [r7, #6]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d101      	bne.n	801874c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8018748:	2301      	movs	r3, #1
 801874a:	e071      	b.n	8018830 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	68ba      	ldr	r2, [r7, #8]
 8018750:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	88fa      	ldrh	r2, [r7, #6]
 8018756:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	88fa      	ldrh	r2, [r7, #6]
 801875e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	2200      	movs	r2, #0
 8018766:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	2200      	movs	r2, #0
 801876c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	2221      	movs	r2, #33	@ 0x21
 8018774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801877c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018780:	d12a      	bne.n	80187d8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	689b      	ldr	r3, [r3, #8]
 8018786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801878a:	d107      	bne.n	801879c <HAL_UART_Transmit_IT+0x78>
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	691b      	ldr	r3, [r3, #16]
 8018790:	2b00      	cmp	r3, #0
 8018792:	d103      	bne.n	801879c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	4a29      	ldr	r2, [pc, #164]	@ (801883c <HAL_UART_Transmit_IT+0x118>)
 8018798:	679a      	str	r2, [r3, #120]	@ 0x78
 801879a:	e002      	b.n	80187a2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	4a28      	ldr	r2, [pc, #160]	@ (8018840 <HAL_UART_Transmit_IT+0x11c>)
 80187a0:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	3308      	adds	r3, #8
 80187a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187ac:	e853 3f00 	ldrex	r3, [r3]
 80187b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80187b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80187b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	3308      	adds	r3, #8
 80187c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80187c2:	637a      	str	r2, [r7, #52]	@ 0x34
 80187c4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80187c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80187ca:	e841 2300 	strex	r3, r2, [r1]
 80187ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80187d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d1e5      	bne.n	80187a2 <HAL_UART_Transmit_IT+0x7e>
 80187d6:	e028      	b.n	801882a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	689b      	ldr	r3, [r3, #8]
 80187dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80187e0:	d107      	bne.n	80187f2 <HAL_UART_Transmit_IT+0xce>
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	691b      	ldr	r3, [r3, #16]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d103      	bne.n	80187f2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	4a15      	ldr	r2, [pc, #84]	@ (8018844 <HAL_UART_Transmit_IT+0x120>)
 80187ee:	679a      	str	r2, [r3, #120]	@ 0x78
 80187f0:	e002      	b.n	80187f8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	4a14      	ldr	r2, [pc, #80]	@ (8018848 <HAL_UART_Transmit_IT+0x124>)
 80187f6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187fe:	697b      	ldr	r3, [r7, #20]
 8018800:	e853 3f00 	ldrex	r3, [r3]
 8018804:	613b      	str	r3, [r7, #16]
   return(result);
 8018806:	693b      	ldr	r3, [r7, #16]
 8018808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801880c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	461a      	mov	r2, r3
 8018814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018816:	623b      	str	r3, [r7, #32]
 8018818:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801881a:	69f9      	ldr	r1, [r7, #28]
 801881c:	6a3a      	ldr	r2, [r7, #32]
 801881e:	e841 2300 	strex	r3, r2, [r1]
 8018822:	61bb      	str	r3, [r7, #24]
   return(result);
 8018824:	69bb      	ldr	r3, [r7, #24]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d1e6      	bne.n	80187f8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 801882a:	2300      	movs	r3, #0
 801882c:	e000      	b.n	8018830 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 801882e:	2302      	movs	r3, #2
  }
}
 8018830:	4618      	mov	r0, r3
 8018832:	3744      	adds	r7, #68	@ 0x44
 8018834:	46bd      	mov	sp, r7
 8018836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883a:	4770      	bx	lr
 801883c:	0801a6ab 	.word	0x0801a6ab
 8018840:	0801a5cb 	.word	0x0801a5cb
 8018844:	0801a509 	.word	0x0801a509
 8018848:	0801a451 	.word	0x0801a451

0801884c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801884c:	b580      	push	{r7, lr}
 801884e:	b08a      	sub	sp, #40	@ 0x28
 8018850:	af00      	add	r7, sp, #0
 8018852:	60f8      	str	r0, [r7, #12]
 8018854:	60b9      	str	r1, [r7, #8]
 8018856:	4613      	mov	r3, r2
 8018858:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018860:	2b20      	cmp	r3, #32
 8018862:	d137      	bne.n	80188d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8018864:	68bb      	ldr	r3, [r7, #8]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d002      	beq.n	8018870 <HAL_UART_Receive_IT+0x24>
 801886a:	88fb      	ldrh	r3, [r7, #6]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d101      	bne.n	8018874 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8018870:	2301      	movs	r3, #1
 8018872:	e030      	b.n	80188d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	2200      	movs	r2, #0
 8018878:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	4a18      	ldr	r2, [pc, #96]	@ (80188e0 <HAL_UART_Receive_IT+0x94>)
 8018880:	4293      	cmp	r3, r2
 8018882:	d01f      	beq.n	80188c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	685b      	ldr	r3, [r3, #4]
 801888a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801888e:	2b00      	cmp	r3, #0
 8018890:	d018      	beq.n	80188c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018898:	697b      	ldr	r3, [r7, #20]
 801889a:	e853 3f00 	ldrex	r3, [r3]
 801889e:	613b      	str	r3, [r7, #16]
   return(result);
 80188a0:	693b      	ldr	r3, [r7, #16]
 80188a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80188a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	461a      	mov	r2, r3
 80188ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188b0:	623b      	str	r3, [r7, #32]
 80188b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80188b4:	69f9      	ldr	r1, [r7, #28]
 80188b6:	6a3a      	ldr	r2, [r7, #32]
 80188b8:	e841 2300 	strex	r3, r2, [r1]
 80188bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80188be:	69bb      	ldr	r3, [r7, #24]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d1e6      	bne.n	8018892 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80188c4:	88fb      	ldrh	r3, [r7, #6]
 80188c6:	461a      	mov	r2, r3
 80188c8:	68b9      	ldr	r1, [r7, #8]
 80188ca:	68f8      	ldr	r0, [r7, #12]
 80188cc:	f001 fc26 	bl	801a11c <UART_Start_Receive_IT>
 80188d0:	4603      	mov	r3, r0
 80188d2:	e000      	b.n	80188d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80188d4:	2302      	movs	r3, #2
  }
}
 80188d6:	4618      	mov	r0, r3
 80188d8:	3728      	adds	r7, #40	@ 0x28
 80188da:	46bd      	mov	sp, r7
 80188dc:	bd80      	pop	{r7, pc}
 80188de:	bf00      	nop
 80188e0:	58000c00 	.word	0x58000c00

080188e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	b0ba      	sub	sp, #232	@ 0xe8
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	69db      	ldr	r3, [r3, #28]
 80188f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	689b      	ldr	r3, [r3, #8]
 8018906:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801890a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801890e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8018912:	4013      	ands	r3, r2
 8018914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8018918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801891c:	2b00      	cmp	r3, #0
 801891e:	d11b      	bne.n	8018958 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8018920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018924:	f003 0320 	and.w	r3, r3, #32
 8018928:	2b00      	cmp	r3, #0
 801892a:	d015      	beq.n	8018958 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801892c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018930:	f003 0320 	and.w	r3, r3, #32
 8018934:	2b00      	cmp	r3, #0
 8018936:	d105      	bne.n	8018944 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8018938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801893c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018940:	2b00      	cmp	r3, #0
 8018942:	d009      	beq.n	8018958 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018948:	2b00      	cmp	r3, #0
 801894a:	f000 8393 	beq.w	8019074 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018952:	6878      	ldr	r0, [r7, #4]
 8018954:	4798      	blx	r3
      }
      return;
 8018956:	e38d      	b.n	8019074 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8018958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801895c:	2b00      	cmp	r3, #0
 801895e:	f000 8123 	beq.w	8018ba8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8018962:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8018966:	4b8d      	ldr	r3, [pc, #564]	@ (8018b9c <HAL_UART_IRQHandler+0x2b8>)
 8018968:	4013      	ands	r3, r2
 801896a:	2b00      	cmp	r3, #0
 801896c:	d106      	bne.n	801897c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801896e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8018972:	4b8b      	ldr	r3, [pc, #556]	@ (8018ba0 <HAL_UART_IRQHandler+0x2bc>)
 8018974:	4013      	ands	r3, r2
 8018976:	2b00      	cmp	r3, #0
 8018978:	f000 8116 	beq.w	8018ba8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801897c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018980:	f003 0301 	and.w	r3, r3, #1
 8018984:	2b00      	cmp	r3, #0
 8018986:	d011      	beq.n	80189ac <HAL_UART_IRQHandler+0xc8>
 8018988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801898c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018990:	2b00      	cmp	r3, #0
 8018992:	d00b      	beq.n	80189ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	2201      	movs	r2, #1
 801899a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80189a2:	f043 0201 	orr.w	r2, r3, #1
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80189ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80189b0:	f003 0302 	and.w	r3, r3, #2
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d011      	beq.n	80189dc <HAL_UART_IRQHandler+0xf8>
 80189b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80189bc:	f003 0301 	and.w	r3, r3, #1
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d00b      	beq.n	80189dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	2202      	movs	r2, #2
 80189ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80189d2:	f043 0204 	orr.w	r2, r3, #4
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80189dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80189e0:	f003 0304 	and.w	r3, r3, #4
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d011      	beq.n	8018a0c <HAL_UART_IRQHandler+0x128>
 80189e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80189ec:	f003 0301 	and.w	r3, r3, #1
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d00b      	beq.n	8018a0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	2204      	movs	r2, #4
 80189fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018a02:	f043 0202 	orr.w	r2, r3, #2
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018a10:	f003 0308 	and.w	r3, r3, #8
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d017      	beq.n	8018a48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018a1c:	f003 0320 	and.w	r3, r3, #32
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d105      	bne.n	8018a30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8018a24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8018a28:	4b5c      	ldr	r3, [pc, #368]	@ (8018b9c <HAL_UART_IRQHandler+0x2b8>)
 8018a2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d00b      	beq.n	8018a48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	2208      	movs	r2, #8
 8018a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018a3e:	f043 0208 	orr.w	r2, r3, #8
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8018a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d012      	beq.n	8018a7a <HAL_UART_IRQHandler+0x196>
 8018a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018a58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d00c      	beq.n	8018a7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018a68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018a70:	f043 0220 	orr.w	r2, r3, #32
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	f000 82f9 	beq.w	8019078 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8018a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018a8a:	f003 0320 	and.w	r3, r3, #32
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d013      	beq.n	8018aba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8018a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018a96:	f003 0320 	and.w	r3, r3, #32
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d105      	bne.n	8018aaa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8018a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d007      	beq.n	8018aba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d003      	beq.n	8018aba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018ab6:	6878      	ldr	r0, [r7, #4]
 8018ab8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	689b      	ldr	r3, [r3, #8]
 8018aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018ace:	2b40      	cmp	r3, #64	@ 0x40
 8018ad0:	d005      	beq.n	8018ade <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8018ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8018ad6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d054      	beq.n	8018b88 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8018ade:	6878      	ldr	r0, [r7, #4]
 8018ae0:	f001 fc3e 	bl	801a360 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	689b      	ldr	r3, [r3, #8]
 8018aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018aee:	2b40      	cmp	r3, #64	@ 0x40
 8018af0:	d146      	bne.n	8018b80 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	3308      	adds	r3, #8
 8018af8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8018b00:	e853 3f00 	ldrex	r3, [r3]
 8018b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8018b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018b0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018b10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	3308      	adds	r3, #8
 8018b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8018b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8018b22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8018b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8018b2e:	e841 2300 	strex	r3, r2, [r1]
 8018b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8018b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d1d9      	bne.n	8018af2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d017      	beq.n	8018b78 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018b4e:	4a15      	ldr	r2, [pc, #84]	@ (8018ba4 <HAL_UART_IRQHandler+0x2c0>)
 8018b50:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f7f4 f827 	bl	800cbac <HAL_DMA_Abort_IT>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d019      	beq.n	8018b98 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018b6c:	687a      	ldr	r2, [r7, #4]
 8018b6e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8018b72:	4610      	mov	r0, r2
 8018b74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018b76:	e00f      	b.n	8018b98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8018b78:	6878      	ldr	r0, [r7, #4]
 8018b7a:	f000 fa93 	bl	80190a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018b7e:	e00b      	b.n	8018b98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018b80:	6878      	ldr	r0, [r7, #4]
 8018b82:	f000 fa8f 	bl	80190a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018b86:	e007      	b.n	8018b98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8018b88:	6878      	ldr	r0, [r7, #4]
 8018b8a:	f000 fa8b 	bl	80190a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	2200      	movs	r2, #0
 8018b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8018b96:	e26f      	b.n	8019078 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018b98:	bf00      	nop
    return;
 8018b9a:	e26d      	b.n	8019078 <HAL_UART_IRQHandler+0x794>
 8018b9c:	10000001 	.word	0x10000001
 8018ba0:	04000120 	.word	0x04000120
 8018ba4:	0801a42d 	.word	0x0801a42d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018bac:	2b01      	cmp	r3, #1
 8018bae:	f040 8203 	bne.w	8018fb8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8018bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018bb6:	f003 0310 	and.w	r3, r3, #16
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	f000 81fc 	beq.w	8018fb8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8018bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018bc4:	f003 0310 	and.w	r3, r3, #16
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	f000 81f5 	beq.w	8018fb8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	2210      	movs	r2, #16
 8018bd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	689b      	ldr	r3, [r3, #8]
 8018bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018be0:	2b40      	cmp	r3, #64	@ 0x40
 8018be2:	f040 816d 	bne.w	8018ec0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	4aa4      	ldr	r2, [pc, #656]	@ (8018e80 <HAL_UART_IRQHandler+0x59c>)
 8018bf0:	4293      	cmp	r3, r2
 8018bf2:	d068      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	4aa1      	ldr	r2, [pc, #644]	@ (8018e84 <HAL_UART_IRQHandler+0x5a0>)
 8018bfe:	4293      	cmp	r3, r2
 8018c00:	d061      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	4a9f      	ldr	r2, [pc, #636]	@ (8018e88 <HAL_UART_IRQHandler+0x5a4>)
 8018c0c:	4293      	cmp	r3, r2
 8018c0e:	d05a      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	4a9c      	ldr	r2, [pc, #624]	@ (8018e8c <HAL_UART_IRQHandler+0x5a8>)
 8018c1a:	4293      	cmp	r3, r2
 8018c1c:	d053      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	4a9a      	ldr	r2, [pc, #616]	@ (8018e90 <HAL_UART_IRQHandler+0x5ac>)
 8018c28:	4293      	cmp	r3, r2
 8018c2a:	d04c      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	4a97      	ldr	r2, [pc, #604]	@ (8018e94 <HAL_UART_IRQHandler+0x5b0>)
 8018c36:	4293      	cmp	r3, r2
 8018c38:	d045      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	4a95      	ldr	r2, [pc, #596]	@ (8018e98 <HAL_UART_IRQHandler+0x5b4>)
 8018c44:	4293      	cmp	r3, r2
 8018c46:	d03e      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	4a92      	ldr	r2, [pc, #584]	@ (8018e9c <HAL_UART_IRQHandler+0x5b8>)
 8018c52:	4293      	cmp	r3, r2
 8018c54:	d037      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	4a90      	ldr	r2, [pc, #576]	@ (8018ea0 <HAL_UART_IRQHandler+0x5bc>)
 8018c60:	4293      	cmp	r3, r2
 8018c62:	d030      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	4a8d      	ldr	r2, [pc, #564]	@ (8018ea4 <HAL_UART_IRQHandler+0x5c0>)
 8018c6e:	4293      	cmp	r3, r2
 8018c70:	d029      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	4a8b      	ldr	r2, [pc, #556]	@ (8018ea8 <HAL_UART_IRQHandler+0x5c4>)
 8018c7c:	4293      	cmp	r3, r2
 8018c7e:	d022      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	4a88      	ldr	r2, [pc, #544]	@ (8018eac <HAL_UART_IRQHandler+0x5c8>)
 8018c8a:	4293      	cmp	r3, r2
 8018c8c:	d01b      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	4a86      	ldr	r2, [pc, #536]	@ (8018eb0 <HAL_UART_IRQHandler+0x5cc>)
 8018c98:	4293      	cmp	r3, r2
 8018c9a:	d014      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	4a83      	ldr	r2, [pc, #524]	@ (8018eb4 <HAL_UART_IRQHandler+0x5d0>)
 8018ca6:	4293      	cmp	r3, r2
 8018ca8:	d00d      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	4a81      	ldr	r2, [pc, #516]	@ (8018eb8 <HAL_UART_IRQHandler+0x5d4>)
 8018cb4:	4293      	cmp	r3, r2
 8018cb6:	d006      	beq.n	8018cc6 <HAL_UART_IRQHandler+0x3e2>
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	4a7e      	ldr	r2, [pc, #504]	@ (8018ebc <HAL_UART_IRQHandler+0x5d8>)
 8018cc2:	4293      	cmp	r3, r2
 8018cc4:	d106      	bne.n	8018cd4 <HAL_UART_IRQHandler+0x3f0>
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	685b      	ldr	r3, [r3, #4]
 8018cd0:	b29b      	uxth	r3, r3
 8018cd2:	e005      	b.n	8018ce0 <HAL_UART_IRQHandler+0x3fc>
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	685b      	ldr	r3, [r3, #4]
 8018cde:	b29b      	uxth	r3, r3
 8018ce0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8018ce4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	f000 80ad 	beq.w	8018e48 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018cf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018cf8:	429a      	cmp	r2, r3
 8018cfa:	f080 80a5 	bcs.w	8018e48 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018d04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018d0e:	69db      	ldr	r3, [r3, #28]
 8018d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018d14:	f000 8087 	beq.w	8018e26 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018d24:	e853 3f00 	ldrex	r3, [r3]
 8018d28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8018d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8018d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	461a      	mov	r2, r3
 8018d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8018d42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8018d46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8018d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8018d52:	e841 2300 	strex	r3, r2, [r1]
 8018d56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8018d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d1da      	bne.n	8018d18 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	3308      	adds	r3, #8
 8018d68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018d6c:	e853 3f00 	ldrex	r3, [r3]
 8018d70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8018d72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018d74:	f023 0301 	bic.w	r3, r3, #1
 8018d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	3308      	adds	r3, #8
 8018d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8018d86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8018d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018d8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8018d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8018d92:	e841 2300 	strex	r3, r2, [r1]
 8018d96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8018d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d1e1      	bne.n	8018d62 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	3308      	adds	r3, #8
 8018da4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018da8:	e853 3f00 	ldrex	r3, [r3]
 8018dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8018dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	3308      	adds	r3, #8
 8018dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8018dc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8018dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018dc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8018dc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8018dca:	e841 2300 	strex	r3, r2, [r1]
 8018dce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8018dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d1e3      	bne.n	8018d9e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	2220      	movs	r2, #32
 8018dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	2200      	movs	r2, #0
 8018de2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018dec:	e853 3f00 	ldrex	r3, [r3]
 8018df0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8018df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018df4:	f023 0310 	bic.w	r3, r3, #16
 8018df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	461a      	mov	r2, r3
 8018e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018e06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018e08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018e0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018e0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018e0e:	e841 2300 	strex	r3, r2, [r1]
 8018e12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8018e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d1e4      	bne.n	8018de4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018e20:	4618      	mov	r0, r3
 8018e22:	f7f3 fba5 	bl	800c570 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	2202      	movs	r2, #2
 8018e2a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018e38:	b29b      	uxth	r3, r3
 8018e3a:	1ad3      	subs	r3, r2, r3
 8018e3c:	b29b      	uxth	r3, r3
 8018e3e:	4619      	mov	r1, r3
 8018e40:	6878      	ldr	r0, [r7, #4]
 8018e42:	f000 f939 	bl	80190b8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8018e46:	e119      	b.n	801907c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018e52:	429a      	cmp	r2, r3
 8018e54:	f040 8112 	bne.w	801907c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018e5e:	69db      	ldr	r3, [r3, #28]
 8018e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018e64:	f040 810a 	bne.w	801907c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	2202      	movs	r2, #2
 8018e6c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018e74:	4619      	mov	r1, r3
 8018e76:	6878      	ldr	r0, [r7, #4]
 8018e78:	f000 f91e 	bl	80190b8 <HAL_UARTEx_RxEventCallback>
      return;
 8018e7c:	e0fe      	b.n	801907c <HAL_UART_IRQHandler+0x798>
 8018e7e:	bf00      	nop
 8018e80:	40020010 	.word	0x40020010
 8018e84:	40020028 	.word	0x40020028
 8018e88:	40020040 	.word	0x40020040
 8018e8c:	40020058 	.word	0x40020058
 8018e90:	40020070 	.word	0x40020070
 8018e94:	40020088 	.word	0x40020088
 8018e98:	400200a0 	.word	0x400200a0
 8018e9c:	400200b8 	.word	0x400200b8
 8018ea0:	40020410 	.word	0x40020410
 8018ea4:	40020428 	.word	0x40020428
 8018ea8:	40020440 	.word	0x40020440
 8018eac:	40020458 	.word	0x40020458
 8018eb0:	40020470 	.word	0x40020470
 8018eb4:	40020488 	.word	0x40020488
 8018eb8:	400204a0 	.word	0x400204a0
 8018ebc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018ecc:	b29b      	uxth	r3, r3
 8018ece:	1ad3      	subs	r3, r2, r3
 8018ed0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018eda:	b29b      	uxth	r3, r3
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	f000 80cf 	beq.w	8019080 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8018ee2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	f000 80ca 	beq.w	8019080 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ef4:	e853 3f00 	ldrex	r3, [r3]
 8018ef8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8018efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018efc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8018f00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	461a      	mov	r2, r3
 8018f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8018f0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8018f10:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018f12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018f14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018f16:	e841 2300 	strex	r3, r2, [r1]
 8018f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d1e4      	bne.n	8018eec <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	3308      	adds	r3, #8
 8018f28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f2c:	e853 3f00 	ldrex	r3, [r3]
 8018f30:	623b      	str	r3, [r7, #32]
   return(result);
 8018f32:	6a3a      	ldr	r2, [r7, #32]
 8018f34:	4b55      	ldr	r3, [pc, #340]	@ (801908c <HAL_UART_IRQHandler+0x7a8>)
 8018f36:	4013      	ands	r3, r2
 8018f38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	3308      	adds	r3, #8
 8018f42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8018f46:	633a      	str	r2, [r7, #48]	@ 0x30
 8018f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018f4e:	e841 2300 	strex	r3, r2, [r1]
 8018f52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d1e3      	bne.n	8018f22 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	2220      	movs	r2, #32
 8018f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	2200      	movs	r2, #0
 8018f66:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	2200      	movs	r2, #0
 8018f6c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f74:	693b      	ldr	r3, [r7, #16]
 8018f76:	e853 3f00 	ldrex	r3, [r3]
 8018f7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	f023 0310 	bic.w	r3, r3, #16
 8018f82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	461a      	mov	r2, r3
 8018f8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8018f90:	61fb      	str	r3, [r7, #28]
 8018f92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018f94:	69b9      	ldr	r1, [r7, #24]
 8018f96:	69fa      	ldr	r2, [r7, #28]
 8018f98:	e841 2300 	strex	r3, r2, [r1]
 8018f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8018f9e:	697b      	ldr	r3, [r7, #20]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d1e4      	bne.n	8018f6e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	2202      	movs	r2, #2
 8018fa8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8018faa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8018fae:	4619      	mov	r1, r3
 8018fb0:	6878      	ldr	r0, [r7, #4]
 8018fb2:	f000 f881 	bl	80190b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8018fb6:	e063      	b.n	8019080 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8018fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018fbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d00e      	beq.n	8018fe2 <HAL_UART_IRQHandler+0x6fe>
 8018fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018fc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d008      	beq.n	8018fe2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8018fd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018fda:	6878      	ldr	r0, [r7, #4]
 8018fdc:	f002 f926 	bl	801b22c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018fe0:	e051      	b.n	8019086 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8018fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d014      	beq.n	8019018 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8018fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d105      	bne.n	8019006 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8018ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018ffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019002:	2b00      	cmp	r3, #0
 8019004:	d008      	beq.n	8019018 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801900a:	2b00      	cmp	r3, #0
 801900c:	d03a      	beq.n	8019084 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019012:	6878      	ldr	r0, [r7, #4]
 8019014:	4798      	blx	r3
    }
    return;
 8019016:	e035      	b.n	8019084 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8019018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801901c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019020:	2b00      	cmp	r3, #0
 8019022:	d009      	beq.n	8019038 <HAL_UART_IRQHandler+0x754>
 8019024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801902c:	2b00      	cmp	r3, #0
 801902e:	d003      	beq.n	8019038 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8019030:	6878      	ldr	r0, [r7, #4]
 8019032:	f001 fbaf 	bl	801a794 <UART_EndTransmit_IT>
    return;
 8019036:	e026      	b.n	8019086 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8019038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801903c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019040:	2b00      	cmp	r3, #0
 8019042:	d009      	beq.n	8019058 <HAL_UART_IRQHandler+0x774>
 8019044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019048:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801904c:	2b00      	cmp	r3, #0
 801904e:	d003      	beq.n	8019058 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8019050:	6878      	ldr	r0, [r7, #4]
 8019052:	f002 f8ff 	bl	801b254 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8019056:	e016      	b.n	8019086 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8019058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801905c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019060:	2b00      	cmp	r3, #0
 8019062:	d010      	beq.n	8019086 <HAL_UART_IRQHandler+0x7a2>
 8019064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019068:	2b00      	cmp	r3, #0
 801906a:	da0c      	bge.n	8019086 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801906c:	6878      	ldr	r0, [r7, #4]
 801906e:	f002 f8e7 	bl	801b240 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8019072:	e008      	b.n	8019086 <HAL_UART_IRQHandler+0x7a2>
      return;
 8019074:	bf00      	nop
 8019076:	e006      	b.n	8019086 <HAL_UART_IRQHandler+0x7a2>
    return;
 8019078:	bf00      	nop
 801907a:	e004      	b.n	8019086 <HAL_UART_IRQHandler+0x7a2>
      return;
 801907c:	bf00      	nop
 801907e:	e002      	b.n	8019086 <HAL_UART_IRQHandler+0x7a2>
      return;
 8019080:	bf00      	nop
 8019082:	e000      	b.n	8019086 <HAL_UART_IRQHandler+0x7a2>
    return;
 8019084:	bf00      	nop
  }
}
 8019086:	37e8      	adds	r7, #232	@ 0xe8
 8019088:	46bd      	mov	sp, r7
 801908a:	bd80      	pop	{r7, pc}
 801908c:	effffffe 	.word	0xeffffffe

08019090 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8019090:	b480      	push	{r7}
 8019092:	b083      	sub	sp, #12
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8019098:	bf00      	nop
 801909a:	370c      	adds	r7, #12
 801909c:	46bd      	mov	sp, r7
 801909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a2:	4770      	bx	lr

080190a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80190a4:	b480      	push	{r7}
 80190a6:	b083      	sub	sp, #12
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80190ac:	bf00      	nop
 80190ae:	370c      	adds	r7, #12
 80190b0:	46bd      	mov	sp, r7
 80190b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b6:	4770      	bx	lr

080190b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80190b8:	b480      	push	{r7}
 80190ba:	b083      	sub	sp, #12
 80190bc:	af00      	add	r7, sp, #0
 80190be:	6078      	str	r0, [r7, #4]
 80190c0:	460b      	mov	r3, r1
 80190c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80190c4:	bf00      	nop
 80190c6:	370c      	adds	r7, #12
 80190c8:	46bd      	mov	sp, r7
 80190ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ce:	4770      	bx	lr

080190d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80190d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80190d4:	b092      	sub	sp, #72	@ 0x48
 80190d6:	af00      	add	r7, sp, #0
 80190d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80190da:	2300      	movs	r3, #0
 80190dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80190e0:	697b      	ldr	r3, [r7, #20]
 80190e2:	689a      	ldr	r2, [r3, #8]
 80190e4:	697b      	ldr	r3, [r7, #20]
 80190e6:	691b      	ldr	r3, [r3, #16]
 80190e8:	431a      	orrs	r2, r3
 80190ea:	697b      	ldr	r3, [r7, #20]
 80190ec:	695b      	ldr	r3, [r3, #20]
 80190ee:	431a      	orrs	r2, r3
 80190f0:	697b      	ldr	r3, [r7, #20]
 80190f2:	69db      	ldr	r3, [r3, #28]
 80190f4:	4313      	orrs	r3, r2
 80190f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80190f8:	697b      	ldr	r3, [r7, #20]
 80190fa:	681b      	ldr	r3, [r3, #0]
 80190fc:	681a      	ldr	r2, [r3, #0]
 80190fe:	4bbe      	ldr	r3, [pc, #760]	@ (80193f8 <UART_SetConfig+0x328>)
 8019100:	4013      	ands	r3, r2
 8019102:	697a      	ldr	r2, [r7, #20]
 8019104:	6812      	ldr	r2, [r2, #0]
 8019106:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019108:	430b      	orrs	r3, r1
 801910a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801910c:	697b      	ldr	r3, [r7, #20]
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	685b      	ldr	r3, [r3, #4]
 8019112:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8019116:	697b      	ldr	r3, [r7, #20]
 8019118:	68da      	ldr	r2, [r3, #12]
 801911a:	697b      	ldr	r3, [r7, #20]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	430a      	orrs	r2, r1
 8019120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8019122:	697b      	ldr	r3, [r7, #20]
 8019124:	699b      	ldr	r3, [r3, #24]
 8019126:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8019128:	697b      	ldr	r3, [r7, #20]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	4ab3      	ldr	r2, [pc, #716]	@ (80193fc <UART_SetConfig+0x32c>)
 801912e:	4293      	cmp	r3, r2
 8019130:	d004      	beq.n	801913c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8019132:	697b      	ldr	r3, [r7, #20]
 8019134:	6a1b      	ldr	r3, [r3, #32]
 8019136:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019138:	4313      	orrs	r3, r2
 801913a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801913c:	697b      	ldr	r3, [r7, #20]
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	689a      	ldr	r2, [r3, #8]
 8019142:	4baf      	ldr	r3, [pc, #700]	@ (8019400 <UART_SetConfig+0x330>)
 8019144:	4013      	ands	r3, r2
 8019146:	697a      	ldr	r2, [r7, #20]
 8019148:	6812      	ldr	r2, [r2, #0]
 801914a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801914c:	430b      	orrs	r3, r1
 801914e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8019150:	697b      	ldr	r3, [r7, #20]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019156:	f023 010f 	bic.w	r1, r3, #15
 801915a:	697b      	ldr	r3, [r7, #20]
 801915c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801915e:	697b      	ldr	r3, [r7, #20]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	430a      	orrs	r2, r1
 8019164:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8019166:	697b      	ldr	r3, [r7, #20]
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	4aa6      	ldr	r2, [pc, #664]	@ (8019404 <UART_SetConfig+0x334>)
 801916c:	4293      	cmp	r3, r2
 801916e:	d177      	bne.n	8019260 <UART_SetConfig+0x190>
 8019170:	4ba5      	ldr	r3, [pc, #660]	@ (8019408 <UART_SetConfig+0x338>)
 8019172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019174:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019178:	2b28      	cmp	r3, #40	@ 0x28
 801917a:	d86d      	bhi.n	8019258 <UART_SetConfig+0x188>
 801917c:	a201      	add	r2, pc, #4	@ (adr r2, 8019184 <UART_SetConfig+0xb4>)
 801917e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019182:	bf00      	nop
 8019184:	08019229 	.word	0x08019229
 8019188:	08019259 	.word	0x08019259
 801918c:	08019259 	.word	0x08019259
 8019190:	08019259 	.word	0x08019259
 8019194:	08019259 	.word	0x08019259
 8019198:	08019259 	.word	0x08019259
 801919c:	08019259 	.word	0x08019259
 80191a0:	08019259 	.word	0x08019259
 80191a4:	08019231 	.word	0x08019231
 80191a8:	08019259 	.word	0x08019259
 80191ac:	08019259 	.word	0x08019259
 80191b0:	08019259 	.word	0x08019259
 80191b4:	08019259 	.word	0x08019259
 80191b8:	08019259 	.word	0x08019259
 80191bc:	08019259 	.word	0x08019259
 80191c0:	08019259 	.word	0x08019259
 80191c4:	08019239 	.word	0x08019239
 80191c8:	08019259 	.word	0x08019259
 80191cc:	08019259 	.word	0x08019259
 80191d0:	08019259 	.word	0x08019259
 80191d4:	08019259 	.word	0x08019259
 80191d8:	08019259 	.word	0x08019259
 80191dc:	08019259 	.word	0x08019259
 80191e0:	08019259 	.word	0x08019259
 80191e4:	08019241 	.word	0x08019241
 80191e8:	08019259 	.word	0x08019259
 80191ec:	08019259 	.word	0x08019259
 80191f0:	08019259 	.word	0x08019259
 80191f4:	08019259 	.word	0x08019259
 80191f8:	08019259 	.word	0x08019259
 80191fc:	08019259 	.word	0x08019259
 8019200:	08019259 	.word	0x08019259
 8019204:	08019249 	.word	0x08019249
 8019208:	08019259 	.word	0x08019259
 801920c:	08019259 	.word	0x08019259
 8019210:	08019259 	.word	0x08019259
 8019214:	08019259 	.word	0x08019259
 8019218:	08019259 	.word	0x08019259
 801921c:	08019259 	.word	0x08019259
 8019220:	08019259 	.word	0x08019259
 8019224:	08019251 	.word	0x08019251
 8019228:	2301      	movs	r3, #1
 801922a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801922e:	e326      	b.n	801987e <UART_SetConfig+0x7ae>
 8019230:	2304      	movs	r3, #4
 8019232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019236:	e322      	b.n	801987e <UART_SetConfig+0x7ae>
 8019238:	2308      	movs	r3, #8
 801923a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801923e:	e31e      	b.n	801987e <UART_SetConfig+0x7ae>
 8019240:	2310      	movs	r3, #16
 8019242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019246:	e31a      	b.n	801987e <UART_SetConfig+0x7ae>
 8019248:	2320      	movs	r3, #32
 801924a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801924e:	e316      	b.n	801987e <UART_SetConfig+0x7ae>
 8019250:	2340      	movs	r3, #64	@ 0x40
 8019252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019256:	e312      	b.n	801987e <UART_SetConfig+0x7ae>
 8019258:	2380      	movs	r3, #128	@ 0x80
 801925a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801925e:	e30e      	b.n	801987e <UART_SetConfig+0x7ae>
 8019260:	697b      	ldr	r3, [r7, #20]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	4a69      	ldr	r2, [pc, #420]	@ (801940c <UART_SetConfig+0x33c>)
 8019266:	4293      	cmp	r3, r2
 8019268:	d130      	bne.n	80192cc <UART_SetConfig+0x1fc>
 801926a:	4b67      	ldr	r3, [pc, #412]	@ (8019408 <UART_SetConfig+0x338>)
 801926c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801926e:	f003 0307 	and.w	r3, r3, #7
 8019272:	2b05      	cmp	r3, #5
 8019274:	d826      	bhi.n	80192c4 <UART_SetConfig+0x1f4>
 8019276:	a201      	add	r2, pc, #4	@ (adr r2, 801927c <UART_SetConfig+0x1ac>)
 8019278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801927c:	08019295 	.word	0x08019295
 8019280:	0801929d 	.word	0x0801929d
 8019284:	080192a5 	.word	0x080192a5
 8019288:	080192ad 	.word	0x080192ad
 801928c:	080192b5 	.word	0x080192b5
 8019290:	080192bd 	.word	0x080192bd
 8019294:	2300      	movs	r3, #0
 8019296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801929a:	e2f0      	b.n	801987e <UART_SetConfig+0x7ae>
 801929c:	2304      	movs	r3, #4
 801929e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80192a2:	e2ec      	b.n	801987e <UART_SetConfig+0x7ae>
 80192a4:	2308      	movs	r3, #8
 80192a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80192aa:	e2e8      	b.n	801987e <UART_SetConfig+0x7ae>
 80192ac:	2310      	movs	r3, #16
 80192ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80192b2:	e2e4      	b.n	801987e <UART_SetConfig+0x7ae>
 80192b4:	2320      	movs	r3, #32
 80192b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80192ba:	e2e0      	b.n	801987e <UART_SetConfig+0x7ae>
 80192bc:	2340      	movs	r3, #64	@ 0x40
 80192be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80192c2:	e2dc      	b.n	801987e <UART_SetConfig+0x7ae>
 80192c4:	2380      	movs	r3, #128	@ 0x80
 80192c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80192ca:	e2d8      	b.n	801987e <UART_SetConfig+0x7ae>
 80192cc:	697b      	ldr	r3, [r7, #20]
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	4a4f      	ldr	r2, [pc, #316]	@ (8019410 <UART_SetConfig+0x340>)
 80192d2:	4293      	cmp	r3, r2
 80192d4:	d130      	bne.n	8019338 <UART_SetConfig+0x268>
 80192d6:	4b4c      	ldr	r3, [pc, #304]	@ (8019408 <UART_SetConfig+0x338>)
 80192d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80192da:	f003 0307 	and.w	r3, r3, #7
 80192de:	2b05      	cmp	r3, #5
 80192e0:	d826      	bhi.n	8019330 <UART_SetConfig+0x260>
 80192e2:	a201      	add	r2, pc, #4	@ (adr r2, 80192e8 <UART_SetConfig+0x218>)
 80192e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192e8:	08019301 	.word	0x08019301
 80192ec:	08019309 	.word	0x08019309
 80192f0:	08019311 	.word	0x08019311
 80192f4:	08019319 	.word	0x08019319
 80192f8:	08019321 	.word	0x08019321
 80192fc:	08019329 	.word	0x08019329
 8019300:	2300      	movs	r3, #0
 8019302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019306:	e2ba      	b.n	801987e <UART_SetConfig+0x7ae>
 8019308:	2304      	movs	r3, #4
 801930a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801930e:	e2b6      	b.n	801987e <UART_SetConfig+0x7ae>
 8019310:	2308      	movs	r3, #8
 8019312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019316:	e2b2      	b.n	801987e <UART_SetConfig+0x7ae>
 8019318:	2310      	movs	r3, #16
 801931a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801931e:	e2ae      	b.n	801987e <UART_SetConfig+0x7ae>
 8019320:	2320      	movs	r3, #32
 8019322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019326:	e2aa      	b.n	801987e <UART_SetConfig+0x7ae>
 8019328:	2340      	movs	r3, #64	@ 0x40
 801932a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801932e:	e2a6      	b.n	801987e <UART_SetConfig+0x7ae>
 8019330:	2380      	movs	r3, #128	@ 0x80
 8019332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019336:	e2a2      	b.n	801987e <UART_SetConfig+0x7ae>
 8019338:	697b      	ldr	r3, [r7, #20]
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	4a35      	ldr	r2, [pc, #212]	@ (8019414 <UART_SetConfig+0x344>)
 801933e:	4293      	cmp	r3, r2
 8019340:	d130      	bne.n	80193a4 <UART_SetConfig+0x2d4>
 8019342:	4b31      	ldr	r3, [pc, #196]	@ (8019408 <UART_SetConfig+0x338>)
 8019344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019346:	f003 0307 	and.w	r3, r3, #7
 801934a:	2b05      	cmp	r3, #5
 801934c:	d826      	bhi.n	801939c <UART_SetConfig+0x2cc>
 801934e:	a201      	add	r2, pc, #4	@ (adr r2, 8019354 <UART_SetConfig+0x284>)
 8019350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019354:	0801936d 	.word	0x0801936d
 8019358:	08019375 	.word	0x08019375
 801935c:	0801937d 	.word	0x0801937d
 8019360:	08019385 	.word	0x08019385
 8019364:	0801938d 	.word	0x0801938d
 8019368:	08019395 	.word	0x08019395
 801936c:	2300      	movs	r3, #0
 801936e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019372:	e284      	b.n	801987e <UART_SetConfig+0x7ae>
 8019374:	2304      	movs	r3, #4
 8019376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801937a:	e280      	b.n	801987e <UART_SetConfig+0x7ae>
 801937c:	2308      	movs	r3, #8
 801937e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019382:	e27c      	b.n	801987e <UART_SetConfig+0x7ae>
 8019384:	2310      	movs	r3, #16
 8019386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801938a:	e278      	b.n	801987e <UART_SetConfig+0x7ae>
 801938c:	2320      	movs	r3, #32
 801938e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019392:	e274      	b.n	801987e <UART_SetConfig+0x7ae>
 8019394:	2340      	movs	r3, #64	@ 0x40
 8019396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801939a:	e270      	b.n	801987e <UART_SetConfig+0x7ae>
 801939c:	2380      	movs	r3, #128	@ 0x80
 801939e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80193a2:	e26c      	b.n	801987e <UART_SetConfig+0x7ae>
 80193a4:	697b      	ldr	r3, [r7, #20]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	4a1b      	ldr	r2, [pc, #108]	@ (8019418 <UART_SetConfig+0x348>)
 80193aa:	4293      	cmp	r3, r2
 80193ac:	d142      	bne.n	8019434 <UART_SetConfig+0x364>
 80193ae:	4b16      	ldr	r3, [pc, #88]	@ (8019408 <UART_SetConfig+0x338>)
 80193b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80193b2:	f003 0307 	and.w	r3, r3, #7
 80193b6:	2b05      	cmp	r3, #5
 80193b8:	d838      	bhi.n	801942c <UART_SetConfig+0x35c>
 80193ba:	a201      	add	r2, pc, #4	@ (adr r2, 80193c0 <UART_SetConfig+0x2f0>)
 80193bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193c0:	080193d9 	.word	0x080193d9
 80193c4:	080193e1 	.word	0x080193e1
 80193c8:	080193e9 	.word	0x080193e9
 80193cc:	080193f1 	.word	0x080193f1
 80193d0:	0801941d 	.word	0x0801941d
 80193d4:	08019425 	.word	0x08019425
 80193d8:	2300      	movs	r3, #0
 80193da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80193de:	e24e      	b.n	801987e <UART_SetConfig+0x7ae>
 80193e0:	2304      	movs	r3, #4
 80193e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80193e6:	e24a      	b.n	801987e <UART_SetConfig+0x7ae>
 80193e8:	2308      	movs	r3, #8
 80193ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80193ee:	e246      	b.n	801987e <UART_SetConfig+0x7ae>
 80193f0:	2310      	movs	r3, #16
 80193f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80193f6:	e242      	b.n	801987e <UART_SetConfig+0x7ae>
 80193f8:	cfff69f3 	.word	0xcfff69f3
 80193fc:	58000c00 	.word	0x58000c00
 8019400:	11fff4ff 	.word	0x11fff4ff
 8019404:	40011000 	.word	0x40011000
 8019408:	58024400 	.word	0x58024400
 801940c:	40004400 	.word	0x40004400
 8019410:	40004800 	.word	0x40004800
 8019414:	40004c00 	.word	0x40004c00
 8019418:	40005000 	.word	0x40005000
 801941c:	2320      	movs	r3, #32
 801941e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019422:	e22c      	b.n	801987e <UART_SetConfig+0x7ae>
 8019424:	2340      	movs	r3, #64	@ 0x40
 8019426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801942a:	e228      	b.n	801987e <UART_SetConfig+0x7ae>
 801942c:	2380      	movs	r3, #128	@ 0x80
 801942e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019432:	e224      	b.n	801987e <UART_SetConfig+0x7ae>
 8019434:	697b      	ldr	r3, [r7, #20]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	4ab1      	ldr	r2, [pc, #708]	@ (8019700 <UART_SetConfig+0x630>)
 801943a:	4293      	cmp	r3, r2
 801943c:	d176      	bne.n	801952c <UART_SetConfig+0x45c>
 801943e:	4bb1      	ldr	r3, [pc, #708]	@ (8019704 <UART_SetConfig+0x634>)
 8019440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019442:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019446:	2b28      	cmp	r3, #40	@ 0x28
 8019448:	d86c      	bhi.n	8019524 <UART_SetConfig+0x454>
 801944a:	a201      	add	r2, pc, #4	@ (adr r2, 8019450 <UART_SetConfig+0x380>)
 801944c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019450:	080194f5 	.word	0x080194f5
 8019454:	08019525 	.word	0x08019525
 8019458:	08019525 	.word	0x08019525
 801945c:	08019525 	.word	0x08019525
 8019460:	08019525 	.word	0x08019525
 8019464:	08019525 	.word	0x08019525
 8019468:	08019525 	.word	0x08019525
 801946c:	08019525 	.word	0x08019525
 8019470:	080194fd 	.word	0x080194fd
 8019474:	08019525 	.word	0x08019525
 8019478:	08019525 	.word	0x08019525
 801947c:	08019525 	.word	0x08019525
 8019480:	08019525 	.word	0x08019525
 8019484:	08019525 	.word	0x08019525
 8019488:	08019525 	.word	0x08019525
 801948c:	08019525 	.word	0x08019525
 8019490:	08019505 	.word	0x08019505
 8019494:	08019525 	.word	0x08019525
 8019498:	08019525 	.word	0x08019525
 801949c:	08019525 	.word	0x08019525
 80194a0:	08019525 	.word	0x08019525
 80194a4:	08019525 	.word	0x08019525
 80194a8:	08019525 	.word	0x08019525
 80194ac:	08019525 	.word	0x08019525
 80194b0:	0801950d 	.word	0x0801950d
 80194b4:	08019525 	.word	0x08019525
 80194b8:	08019525 	.word	0x08019525
 80194bc:	08019525 	.word	0x08019525
 80194c0:	08019525 	.word	0x08019525
 80194c4:	08019525 	.word	0x08019525
 80194c8:	08019525 	.word	0x08019525
 80194cc:	08019525 	.word	0x08019525
 80194d0:	08019515 	.word	0x08019515
 80194d4:	08019525 	.word	0x08019525
 80194d8:	08019525 	.word	0x08019525
 80194dc:	08019525 	.word	0x08019525
 80194e0:	08019525 	.word	0x08019525
 80194e4:	08019525 	.word	0x08019525
 80194e8:	08019525 	.word	0x08019525
 80194ec:	08019525 	.word	0x08019525
 80194f0:	0801951d 	.word	0x0801951d
 80194f4:	2301      	movs	r3, #1
 80194f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80194fa:	e1c0      	b.n	801987e <UART_SetConfig+0x7ae>
 80194fc:	2304      	movs	r3, #4
 80194fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019502:	e1bc      	b.n	801987e <UART_SetConfig+0x7ae>
 8019504:	2308      	movs	r3, #8
 8019506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801950a:	e1b8      	b.n	801987e <UART_SetConfig+0x7ae>
 801950c:	2310      	movs	r3, #16
 801950e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019512:	e1b4      	b.n	801987e <UART_SetConfig+0x7ae>
 8019514:	2320      	movs	r3, #32
 8019516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801951a:	e1b0      	b.n	801987e <UART_SetConfig+0x7ae>
 801951c:	2340      	movs	r3, #64	@ 0x40
 801951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019522:	e1ac      	b.n	801987e <UART_SetConfig+0x7ae>
 8019524:	2380      	movs	r3, #128	@ 0x80
 8019526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801952a:	e1a8      	b.n	801987e <UART_SetConfig+0x7ae>
 801952c:	697b      	ldr	r3, [r7, #20]
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	4a75      	ldr	r2, [pc, #468]	@ (8019708 <UART_SetConfig+0x638>)
 8019532:	4293      	cmp	r3, r2
 8019534:	d130      	bne.n	8019598 <UART_SetConfig+0x4c8>
 8019536:	4b73      	ldr	r3, [pc, #460]	@ (8019704 <UART_SetConfig+0x634>)
 8019538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801953a:	f003 0307 	and.w	r3, r3, #7
 801953e:	2b05      	cmp	r3, #5
 8019540:	d826      	bhi.n	8019590 <UART_SetConfig+0x4c0>
 8019542:	a201      	add	r2, pc, #4	@ (adr r2, 8019548 <UART_SetConfig+0x478>)
 8019544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019548:	08019561 	.word	0x08019561
 801954c:	08019569 	.word	0x08019569
 8019550:	08019571 	.word	0x08019571
 8019554:	08019579 	.word	0x08019579
 8019558:	08019581 	.word	0x08019581
 801955c:	08019589 	.word	0x08019589
 8019560:	2300      	movs	r3, #0
 8019562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019566:	e18a      	b.n	801987e <UART_SetConfig+0x7ae>
 8019568:	2304      	movs	r3, #4
 801956a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801956e:	e186      	b.n	801987e <UART_SetConfig+0x7ae>
 8019570:	2308      	movs	r3, #8
 8019572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019576:	e182      	b.n	801987e <UART_SetConfig+0x7ae>
 8019578:	2310      	movs	r3, #16
 801957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801957e:	e17e      	b.n	801987e <UART_SetConfig+0x7ae>
 8019580:	2320      	movs	r3, #32
 8019582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019586:	e17a      	b.n	801987e <UART_SetConfig+0x7ae>
 8019588:	2340      	movs	r3, #64	@ 0x40
 801958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801958e:	e176      	b.n	801987e <UART_SetConfig+0x7ae>
 8019590:	2380      	movs	r3, #128	@ 0x80
 8019592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019596:	e172      	b.n	801987e <UART_SetConfig+0x7ae>
 8019598:	697b      	ldr	r3, [r7, #20]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	4a5b      	ldr	r2, [pc, #364]	@ (801970c <UART_SetConfig+0x63c>)
 801959e:	4293      	cmp	r3, r2
 80195a0:	d130      	bne.n	8019604 <UART_SetConfig+0x534>
 80195a2:	4b58      	ldr	r3, [pc, #352]	@ (8019704 <UART_SetConfig+0x634>)
 80195a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80195a6:	f003 0307 	and.w	r3, r3, #7
 80195aa:	2b05      	cmp	r3, #5
 80195ac:	d826      	bhi.n	80195fc <UART_SetConfig+0x52c>
 80195ae:	a201      	add	r2, pc, #4	@ (adr r2, 80195b4 <UART_SetConfig+0x4e4>)
 80195b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195b4:	080195cd 	.word	0x080195cd
 80195b8:	080195d5 	.word	0x080195d5
 80195bc:	080195dd 	.word	0x080195dd
 80195c0:	080195e5 	.word	0x080195e5
 80195c4:	080195ed 	.word	0x080195ed
 80195c8:	080195f5 	.word	0x080195f5
 80195cc:	2300      	movs	r3, #0
 80195ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80195d2:	e154      	b.n	801987e <UART_SetConfig+0x7ae>
 80195d4:	2304      	movs	r3, #4
 80195d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80195da:	e150      	b.n	801987e <UART_SetConfig+0x7ae>
 80195dc:	2308      	movs	r3, #8
 80195de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80195e2:	e14c      	b.n	801987e <UART_SetConfig+0x7ae>
 80195e4:	2310      	movs	r3, #16
 80195e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80195ea:	e148      	b.n	801987e <UART_SetConfig+0x7ae>
 80195ec:	2320      	movs	r3, #32
 80195ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80195f2:	e144      	b.n	801987e <UART_SetConfig+0x7ae>
 80195f4:	2340      	movs	r3, #64	@ 0x40
 80195f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80195fa:	e140      	b.n	801987e <UART_SetConfig+0x7ae>
 80195fc:	2380      	movs	r3, #128	@ 0x80
 80195fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019602:	e13c      	b.n	801987e <UART_SetConfig+0x7ae>
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	4a41      	ldr	r2, [pc, #260]	@ (8019710 <UART_SetConfig+0x640>)
 801960a:	4293      	cmp	r3, r2
 801960c:	f040 8082 	bne.w	8019714 <UART_SetConfig+0x644>
 8019610:	4b3c      	ldr	r3, [pc, #240]	@ (8019704 <UART_SetConfig+0x634>)
 8019612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019614:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019618:	2b28      	cmp	r3, #40	@ 0x28
 801961a:	d86d      	bhi.n	80196f8 <UART_SetConfig+0x628>
 801961c:	a201      	add	r2, pc, #4	@ (adr r2, 8019624 <UART_SetConfig+0x554>)
 801961e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019622:	bf00      	nop
 8019624:	080196c9 	.word	0x080196c9
 8019628:	080196f9 	.word	0x080196f9
 801962c:	080196f9 	.word	0x080196f9
 8019630:	080196f9 	.word	0x080196f9
 8019634:	080196f9 	.word	0x080196f9
 8019638:	080196f9 	.word	0x080196f9
 801963c:	080196f9 	.word	0x080196f9
 8019640:	080196f9 	.word	0x080196f9
 8019644:	080196d1 	.word	0x080196d1
 8019648:	080196f9 	.word	0x080196f9
 801964c:	080196f9 	.word	0x080196f9
 8019650:	080196f9 	.word	0x080196f9
 8019654:	080196f9 	.word	0x080196f9
 8019658:	080196f9 	.word	0x080196f9
 801965c:	080196f9 	.word	0x080196f9
 8019660:	080196f9 	.word	0x080196f9
 8019664:	080196d9 	.word	0x080196d9
 8019668:	080196f9 	.word	0x080196f9
 801966c:	080196f9 	.word	0x080196f9
 8019670:	080196f9 	.word	0x080196f9
 8019674:	080196f9 	.word	0x080196f9
 8019678:	080196f9 	.word	0x080196f9
 801967c:	080196f9 	.word	0x080196f9
 8019680:	080196f9 	.word	0x080196f9
 8019684:	080196e1 	.word	0x080196e1
 8019688:	080196f9 	.word	0x080196f9
 801968c:	080196f9 	.word	0x080196f9
 8019690:	080196f9 	.word	0x080196f9
 8019694:	080196f9 	.word	0x080196f9
 8019698:	080196f9 	.word	0x080196f9
 801969c:	080196f9 	.word	0x080196f9
 80196a0:	080196f9 	.word	0x080196f9
 80196a4:	080196e9 	.word	0x080196e9
 80196a8:	080196f9 	.word	0x080196f9
 80196ac:	080196f9 	.word	0x080196f9
 80196b0:	080196f9 	.word	0x080196f9
 80196b4:	080196f9 	.word	0x080196f9
 80196b8:	080196f9 	.word	0x080196f9
 80196bc:	080196f9 	.word	0x080196f9
 80196c0:	080196f9 	.word	0x080196f9
 80196c4:	080196f1 	.word	0x080196f1
 80196c8:	2301      	movs	r3, #1
 80196ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80196ce:	e0d6      	b.n	801987e <UART_SetConfig+0x7ae>
 80196d0:	2304      	movs	r3, #4
 80196d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80196d6:	e0d2      	b.n	801987e <UART_SetConfig+0x7ae>
 80196d8:	2308      	movs	r3, #8
 80196da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80196de:	e0ce      	b.n	801987e <UART_SetConfig+0x7ae>
 80196e0:	2310      	movs	r3, #16
 80196e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80196e6:	e0ca      	b.n	801987e <UART_SetConfig+0x7ae>
 80196e8:	2320      	movs	r3, #32
 80196ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80196ee:	e0c6      	b.n	801987e <UART_SetConfig+0x7ae>
 80196f0:	2340      	movs	r3, #64	@ 0x40
 80196f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80196f6:	e0c2      	b.n	801987e <UART_SetConfig+0x7ae>
 80196f8:	2380      	movs	r3, #128	@ 0x80
 80196fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80196fe:	e0be      	b.n	801987e <UART_SetConfig+0x7ae>
 8019700:	40011400 	.word	0x40011400
 8019704:	58024400 	.word	0x58024400
 8019708:	40007800 	.word	0x40007800
 801970c:	40007c00 	.word	0x40007c00
 8019710:	40011800 	.word	0x40011800
 8019714:	697b      	ldr	r3, [r7, #20]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	4aad      	ldr	r2, [pc, #692]	@ (80199d0 <UART_SetConfig+0x900>)
 801971a:	4293      	cmp	r3, r2
 801971c:	d176      	bne.n	801980c <UART_SetConfig+0x73c>
 801971e:	4bad      	ldr	r3, [pc, #692]	@ (80199d4 <UART_SetConfig+0x904>)
 8019720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019722:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019726:	2b28      	cmp	r3, #40	@ 0x28
 8019728:	d86c      	bhi.n	8019804 <UART_SetConfig+0x734>
 801972a:	a201      	add	r2, pc, #4	@ (adr r2, 8019730 <UART_SetConfig+0x660>)
 801972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019730:	080197d5 	.word	0x080197d5
 8019734:	08019805 	.word	0x08019805
 8019738:	08019805 	.word	0x08019805
 801973c:	08019805 	.word	0x08019805
 8019740:	08019805 	.word	0x08019805
 8019744:	08019805 	.word	0x08019805
 8019748:	08019805 	.word	0x08019805
 801974c:	08019805 	.word	0x08019805
 8019750:	080197dd 	.word	0x080197dd
 8019754:	08019805 	.word	0x08019805
 8019758:	08019805 	.word	0x08019805
 801975c:	08019805 	.word	0x08019805
 8019760:	08019805 	.word	0x08019805
 8019764:	08019805 	.word	0x08019805
 8019768:	08019805 	.word	0x08019805
 801976c:	08019805 	.word	0x08019805
 8019770:	080197e5 	.word	0x080197e5
 8019774:	08019805 	.word	0x08019805
 8019778:	08019805 	.word	0x08019805
 801977c:	08019805 	.word	0x08019805
 8019780:	08019805 	.word	0x08019805
 8019784:	08019805 	.word	0x08019805
 8019788:	08019805 	.word	0x08019805
 801978c:	08019805 	.word	0x08019805
 8019790:	080197ed 	.word	0x080197ed
 8019794:	08019805 	.word	0x08019805
 8019798:	08019805 	.word	0x08019805
 801979c:	08019805 	.word	0x08019805
 80197a0:	08019805 	.word	0x08019805
 80197a4:	08019805 	.word	0x08019805
 80197a8:	08019805 	.word	0x08019805
 80197ac:	08019805 	.word	0x08019805
 80197b0:	080197f5 	.word	0x080197f5
 80197b4:	08019805 	.word	0x08019805
 80197b8:	08019805 	.word	0x08019805
 80197bc:	08019805 	.word	0x08019805
 80197c0:	08019805 	.word	0x08019805
 80197c4:	08019805 	.word	0x08019805
 80197c8:	08019805 	.word	0x08019805
 80197cc:	08019805 	.word	0x08019805
 80197d0:	080197fd 	.word	0x080197fd
 80197d4:	2301      	movs	r3, #1
 80197d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80197da:	e050      	b.n	801987e <UART_SetConfig+0x7ae>
 80197dc:	2304      	movs	r3, #4
 80197de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80197e2:	e04c      	b.n	801987e <UART_SetConfig+0x7ae>
 80197e4:	2308      	movs	r3, #8
 80197e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80197ea:	e048      	b.n	801987e <UART_SetConfig+0x7ae>
 80197ec:	2310      	movs	r3, #16
 80197ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80197f2:	e044      	b.n	801987e <UART_SetConfig+0x7ae>
 80197f4:	2320      	movs	r3, #32
 80197f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80197fa:	e040      	b.n	801987e <UART_SetConfig+0x7ae>
 80197fc:	2340      	movs	r3, #64	@ 0x40
 80197fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019802:	e03c      	b.n	801987e <UART_SetConfig+0x7ae>
 8019804:	2380      	movs	r3, #128	@ 0x80
 8019806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801980a:	e038      	b.n	801987e <UART_SetConfig+0x7ae>
 801980c:	697b      	ldr	r3, [r7, #20]
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	4a71      	ldr	r2, [pc, #452]	@ (80199d8 <UART_SetConfig+0x908>)
 8019812:	4293      	cmp	r3, r2
 8019814:	d130      	bne.n	8019878 <UART_SetConfig+0x7a8>
 8019816:	4b6f      	ldr	r3, [pc, #444]	@ (80199d4 <UART_SetConfig+0x904>)
 8019818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801981a:	f003 0307 	and.w	r3, r3, #7
 801981e:	2b05      	cmp	r3, #5
 8019820:	d826      	bhi.n	8019870 <UART_SetConfig+0x7a0>
 8019822:	a201      	add	r2, pc, #4	@ (adr r2, 8019828 <UART_SetConfig+0x758>)
 8019824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019828:	08019841 	.word	0x08019841
 801982c:	08019849 	.word	0x08019849
 8019830:	08019851 	.word	0x08019851
 8019834:	08019859 	.word	0x08019859
 8019838:	08019861 	.word	0x08019861
 801983c:	08019869 	.word	0x08019869
 8019840:	2302      	movs	r3, #2
 8019842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019846:	e01a      	b.n	801987e <UART_SetConfig+0x7ae>
 8019848:	2304      	movs	r3, #4
 801984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801984e:	e016      	b.n	801987e <UART_SetConfig+0x7ae>
 8019850:	2308      	movs	r3, #8
 8019852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019856:	e012      	b.n	801987e <UART_SetConfig+0x7ae>
 8019858:	2310      	movs	r3, #16
 801985a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801985e:	e00e      	b.n	801987e <UART_SetConfig+0x7ae>
 8019860:	2320      	movs	r3, #32
 8019862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019866:	e00a      	b.n	801987e <UART_SetConfig+0x7ae>
 8019868:	2340      	movs	r3, #64	@ 0x40
 801986a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801986e:	e006      	b.n	801987e <UART_SetConfig+0x7ae>
 8019870:	2380      	movs	r3, #128	@ 0x80
 8019872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019876:	e002      	b.n	801987e <UART_SetConfig+0x7ae>
 8019878:	2380      	movs	r3, #128	@ 0x80
 801987a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801987e:	697b      	ldr	r3, [r7, #20]
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	4a55      	ldr	r2, [pc, #340]	@ (80199d8 <UART_SetConfig+0x908>)
 8019884:	4293      	cmp	r3, r2
 8019886:	f040 80f8 	bne.w	8019a7a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801988a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801988e:	2b20      	cmp	r3, #32
 8019890:	dc46      	bgt.n	8019920 <UART_SetConfig+0x850>
 8019892:	2b02      	cmp	r3, #2
 8019894:	db75      	blt.n	8019982 <UART_SetConfig+0x8b2>
 8019896:	3b02      	subs	r3, #2
 8019898:	2b1e      	cmp	r3, #30
 801989a:	d872      	bhi.n	8019982 <UART_SetConfig+0x8b2>
 801989c:	a201      	add	r2, pc, #4	@ (adr r2, 80198a4 <UART_SetConfig+0x7d4>)
 801989e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198a2:	bf00      	nop
 80198a4:	08019927 	.word	0x08019927
 80198a8:	08019983 	.word	0x08019983
 80198ac:	0801992f 	.word	0x0801992f
 80198b0:	08019983 	.word	0x08019983
 80198b4:	08019983 	.word	0x08019983
 80198b8:	08019983 	.word	0x08019983
 80198bc:	0801993f 	.word	0x0801993f
 80198c0:	08019983 	.word	0x08019983
 80198c4:	08019983 	.word	0x08019983
 80198c8:	08019983 	.word	0x08019983
 80198cc:	08019983 	.word	0x08019983
 80198d0:	08019983 	.word	0x08019983
 80198d4:	08019983 	.word	0x08019983
 80198d8:	08019983 	.word	0x08019983
 80198dc:	0801994f 	.word	0x0801994f
 80198e0:	08019983 	.word	0x08019983
 80198e4:	08019983 	.word	0x08019983
 80198e8:	08019983 	.word	0x08019983
 80198ec:	08019983 	.word	0x08019983
 80198f0:	08019983 	.word	0x08019983
 80198f4:	08019983 	.word	0x08019983
 80198f8:	08019983 	.word	0x08019983
 80198fc:	08019983 	.word	0x08019983
 8019900:	08019983 	.word	0x08019983
 8019904:	08019983 	.word	0x08019983
 8019908:	08019983 	.word	0x08019983
 801990c:	08019983 	.word	0x08019983
 8019910:	08019983 	.word	0x08019983
 8019914:	08019983 	.word	0x08019983
 8019918:	08019983 	.word	0x08019983
 801991c:	08019975 	.word	0x08019975
 8019920:	2b40      	cmp	r3, #64	@ 0x40
 8019922:	d02a      	beq.n	801997a <UART_SetConfig+0x8aa>
 8019924:	e02d      	b.n	8019982 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8019926:	f7fa fb37 	bl	8013f98 <HAL_RCCEx_GetD3PCLK1Freq>
 801992a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801992c:	e02f      	b.n	801998e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801992e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019932:	4618      	mov	r0, r3
 8019934:	f7fa fb46 	bl	8013fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8019938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801993a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801993c:	e027      	b.n	801998e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801993e:	f107 0318 	add.w	r3, r7, #24
 8019942:	4618      	mov	r0, r3
 8019944:	f7fa fc92 	bl	801426c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8019948:	69fb      	ldr	r3, [r7, #28]
 801994a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801994c:	e01f      	b.n	801998e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801994e:	4b21      	ldr	r3, [pc, #132]	@ (80199d4 <UART_SetConfig+0x904>)
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	f003 0320 	and.w	r3, r3, #32
 8019956:	2b00      	cmp	r3, #0
 8019958:	d009      	beq.n	801996e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801995a:	4b1e      	ldr	r3, [pc, #120]	@ (80199d4 <UART_SetConfig+0x904>)
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	08db      	lsrs	r3, r3, #3
 8019960:	f003 0303 	and.w	r3, r3, #3
 8019964:	4a1d      	ldr	r2, [pc, #116]	@ (80199dc <UART_SetConfig+0x90c>)
 8019966:	fa22 f303 	lsr.w	r3, r2, r3
 801996a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801996c:	e00f      	b.n	801998e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801996e:	4b1b      	ldr	r3, [pc, #108]	@ (80199dc <UART_SetConfig+0x90c>)
 8019970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019972:	e00c      	b.n	801998e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019974:	4b1a      	ldr	r3, [pc, #104]	@ (80199e0 <UART_SetConfig+0x910>)
 8019976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019978:	e009      	b.n	801998e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801997a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801997e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019980:	e005      	b.n	801998e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8019982:	2300      	movs	r3, #0
 8019984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8019986:	2301      	movs	r3, #1
 8019988:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801998c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801998e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019990:	2b00      	cmp	r3, #0
 8019992:	f000 81ee 	beq.w	8019d72 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8019996:	697b      	ldr	r3, [r7, #20]
 8019998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801999a:	4a12      	ldr	r2, [pc, #72]	@ (80199e4 <UART_SetConfig+0x914>)
 801999c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80199a0:	461a      	mov	r2, r3
 80199a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80199a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80199a8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80199aa:	697b      	ldr	r3, [r7, #20]
 80199ac:	685a      	ldr	r2, [r3, #4]
 80199ae:	4613      	mov	r3, r2
 80199b0:	005b      	lsls	r3, r3, #1
 80199b2:	4413      	add	r3, r2
 80199b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80199b6:	429a      	cmp	r2, r3
 80199b8:	d305      	bcc.n	80199c6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80199ba:	697b      	ldr	r3, [r7, #20]
 80199bc:	685b      	ldr	r3, [r3, #4]
 80199be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80199c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80199c2:	429a      	cmp	r2, r3
 80199c4:	d910      	bls.n	80199e8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80199c6:	2301      	movs	r3, #1
 80199c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80199cc:	e1d1      	b.n	8019d72 <UART_SetConfig+0xca2>
 80199ce:	bf00      	nop
 80199d0:	40011c00 	.word	0x40011c00
 80199d4:	58024400 	.word	0x58024400
 80199d8:	58000c00 	.word	0x58000c00
 80199dc:	03d09000 	.word	0x03d09000
 80199e0:	003d0900 	.word	0x003d0900
 80199e4:	0801f2b4 	.word	0x0801f2b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80199e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80199ea:	2200      	movs	r2, #0
 80199ec:	60bb      	str	r3, [r7, #8]
 80199ee:	60fa      	str	r2, [r7, #12]
 80199f0:	697b      	ldr	r3, [r7, #20]
 80199f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199f4:	4ac0      	ldr	r2, [pc, #768]	@ (8019cf8 <UART_SetConfig+0xc28>)
 80199f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80199fa:	b29b      	uxth	r3, r3
 80199fc:	2200      	movs	r2, #0
 80199fe:	603b      	str	r3, [r7, #0]
 8019a00:	607a      	str	r2, [r7, #4]
 8019a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019a06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8019a0a:	f7e6 fcd1 	bl	80003b0 <__aeabi_uldivmod>
 8019a0e:	4602      	mov	r2, r0
 8019a10:	460b      	mov	r3, r1
 8019a12:	4610      	mov	r0, r2
 8019a14:	4619      	mov	r1, r3
 8019a16:	f04f 0200 	mov.w	r2, #0
 8019a1a:	f04f 0300 	mov.w	r3, #0
 8019a1e:	020b      	lsls	r3, r1, #8
 8019a20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8019a24:	0202      	lsls	r2, r0, #8
 8019a26:	6979      	ldr	r1, [r7, #20]
 8019a28:	6849      	ldr	r1, [r1, #4]
 8019a2a:	0849      	lsrs	r1, r1, #1
 8019a2c:	2000      	movs	r0, #0
 8019a2e:	460c      	mov	r4, r1
 8019a30:	4605      	mov	r5, r0
 8019a32:	eb12 0804 	adds.w	r8, r2, r4
 8019a36:	eb43 0905 	adc.w	r9, r3, r5
 8019a3a:	697b      	ldr	r3, [r7, #20]
 8019a3c:	685b      	ldr	r3, [r3, #4]
 8019a3e:	2200      	movs	r2, #0
 8019a40:	469a      	mov	sl, r3
 8019a42:	4693      	mov	fp, r2
 8019a44:	4652      	mov	r2, sl
 8019a46:	465b      	mov	r3, fp
 8019a48:	4640      	mov	r0, r8
 8019a4a:	4649      	mov	r1, r9
 8019a4c:	f7e6 fcb0 	bl	80003b0 <__aeabi_uldivmod>
 8019a50:	4602      	mov	r2, r0
 8019a52:	460b      	mov	r3, r1
 8019a54:	4613      	mov	r3, r2
 8019a56:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8019a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8019a5e:	d308      	bcc.n	8019a72 <UART_SetConfig+0x9a2>
 8019a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019a66:	d204      	bcs.n	8019a72 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8019a68:	697b      	ldr	r3, [r7, #20]
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019a6e:	60da      	str	r2, [r3, #12]
 8019a70:	e17f      	b.n	8019d72 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8019a72:	2301      	movs	r3, #1
 8019a74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019a78:	e17b      	b.n	8019d72 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019a7a:	697b      	ldr	r3, [r7, #20]
 8019a7c:	69db      	ldr	r3, [r3, #28]
 8019a7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019a82:	f040 80bd 	bne.w	8019c00 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8019a86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019a8a:	2b20      	cmp	r3, #32
 8019a8c:	dc48      	bgt.n	8019b20 <UART_SetConfig+0xa50>
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	db7b      	blt.n	8019b8a <UART_SetConfig+0xaba>
 8019a92:	2b20      	cmp	r3, #32
 8019a94:	d879      	bhi.n	8019b8a <UART_SetConfig+0xaba>
 8019a96:	a201      	add	r2, pc, #4	@ (adr r2, 8019a9c <UART_SetConfig+0x9cc>)
 8019a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a9c:	08019b27 	.word	0x08019b27
 8019aa0:	08019b2f 	.word	0x08019b2f
 8019aa4:	08019b8b 	.word	0x08019b8b
 8019aa8:	08019b8b 	.word	0x08019b8b
 8019aac:	08019b37 	.word	0x08019b37
 8019ab0:	08019b8b 	.word	0x08019b8b
 8019ab4:	08019b8b 	.word	0x08019b8b
 8019ab8:	08019b8b 	.word	0x08019b8b
 8019abc:	08019b47 	.word	0x08019b47
 8019ac0:	08019b8b 	.word	0x08019b8b
 8019ac4:	08019b8b 	.word	0x08019b8b
 8019ac8:	08019b8b 	.word	0x08019b8b
 8019acc:	08019b8b 	.word	0x08019b8b
 8019ad0:	08019b8b 	.word	0x08019b8b
 8019ad4:	08019b8b 	.word	0x08019b8b
 8019ad8:	08019b8b 	.word	0x08019b8b
 8019adc:	08019b57 	.word	0x08019b57
 8019ae0:	08019b8b 	.word	0x08019b8b
 8019ae4:	08019b8b 	.word	0x08019b8b
 8019ae8:	08019b8b 	.word	0x08019b8b
 8019aec:	08019b8b 	.word	0x08019b8b
 8019af0:	08019b8b 	.word	0x08019b8b
 8019af4:	08019b8b 	.word	0x08019b8b
 8019af8:	08019b8b 	.word	0x08019b8b
 8019afc:	08019b8b 	.word	0x08019b8b
 8019b00:	08019b8b 	.word	0x08019b8b
 8019b04:	08019b8b 	.word	0x08019b8b
 8019b08:	08019b8b 	.word	0x08019b8b
 8019b0c:	08019b8b 	.word	0x08019b8b
 8019b10:	08019b8b 	.word	0x08019b8b
 8019b14:	08019b8b 	.word	0x08019b8b
 8019b18:	08019b8b 	.word	0x08019b8b
 8019b1c:	08019b7d 	.word	0x08019b7d
 8019b20:	2b40      	cmp	r3, #64	@ 0x40
 8019b22:	d02e      	beq.n	8019b82 <UART_SetConfig+0xab2>
 8019b24:	e031      	b.n	8019b8a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019b26:	f7f8 fb99 	bl	801225c <HAL_RCC_GetPCLK1Freq>
 8019b2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019b2c:	e033      	b.n	8019b96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019b2e:	f7f8 fbab 	bl	8012288 <HAL_RCC_GetPCLK2Freq>
 8019b32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019b34:	e02f      	b.n	8019b96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	f7fa fa42 	bl	8013fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8019b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019b44:	e027      	b.n	8019b96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019b46:	f107 0318 	add.w	r3, r7, #24
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	f7fa fb8e 	bl	801426c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8019b50:	69fb      	ldr	r3, [r7, #28]
 8019b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019b54:	e01f      	b.n	8019b96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019b56:	4b69      	ldr	r3, [pc, #420]	@ (8019cfc <UART_SetConfig+0xc2c>)
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	f003 0320 	and.w	r3, r3, #32
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d009      	beq.n	8019b76 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8019b62:	4b66      	ldr	r3, [pc, #408]	@ (8019cfc <UART_SetConfig+0xc2c>)
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	08db      	lsrs	r3, r3, #3
 8019b68:	f003 0303 	and.w	r3, r3, #3
 8019b6c:	4a64      	ldr	r2, [pc, #400]	@ (8019d00 <UART_SetConfig+0xc30>)
 8019b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8019b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019b74:	e00f      	b.n	8019b96 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8019b76:	4b62      	ldr	r3, [pc, #392]	@ (8019d00 <UART_SetConfig+0xc30>)
 8019b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019b7a:	e00c      	b.n	8019b96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019b7c:	4b61      	ldr	r3, [pc, #388]	@ (8019d04 <UART_SetConfig+0xc34>)
 8019b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019b80:	e009      	b.n	8019b96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019b88:	e005      	b.n	8019b96 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8019b8e:	2301      	movs	r3, #1
 8019b90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019b94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8019b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	f000 80ea 	beq.w	8019d72 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019b9e:	697b      	ldr	r3, [r7, #20]
 8019ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ba2:	4a55      	ldr	r2, [pc, #340]	@ (8019cf8 <UART_SetConfig+0xc28>)
 8019ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019ba8:	461a      	mov	r2, r3
 8019baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8019bb0:	005a      	lsls	r2, r3, #1
 8019bb2:	697b      	ldr	r3, [r7, #20]
 8019bb4:	685b      	ldr	r3, [r3, #4]
 8019bb6:	085b      	lsrs	r3, r3, #1
 8019bb8:	441a      	add	r2, r3
 8019bba:	697b      	ldr	r3, [r7, #20]
 8019bbc:	685b      	ldr	r3, [r3, #4]
 8019bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8019bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bc6:	2b0f      	cmp	r3, #15
 8019bc8:	d916      	bls.n	8019bf8 <UART_SetConfig+0xb28>
 8019bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019bd0:	d212      	bcs.n	8019bf8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bd4:	b29b      	uxth	r3, r3
 8019bd6:	f023 030f 	bic.w	r3, r3, #15
 8019bda:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bde:	085b      	lsrs	r3, r3, #1
 8019be0:	b29b      	uxth	r3, r3
 8019be2:	f003 0307 	and.w	r3, r3, #7
 8019be6:	b29a      	uxth	r2, r3
 8019be8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019bea:	4313      	orrs	r3, r2
 8019bec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8019bee:	697b      	ldr	r3, [r7, #20]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019bf4:	60da      	str	r2, [r3, #12]
 8019bf6:	e0bc      	b.n	8019d72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019bf8:	2301      	movs	r3, #1
 8019bfa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019bfe:	e0b8      	b.n	8019d72 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8019c00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019c04:	2b20      	cmp	r3, #32
 8019c06:	dc4b      	bgt.n	8019ca0 <UART_SetConfig+0xbd0>
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	f2c0 8087 	blt.w	8019d1c <UART_SetConfig+0xc4c>
 8019c0e:	2b20      	cmp	r3, #32
 8019c10:	f200 8084 	bhi.w	8019d1c <UART_SetConfig+0xc4c>
 8019c14:	a201      	add	r2, pc, #4	@ (adr r2, 8019c1c <UART_SetConfig+0xb4c>)
 8019c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c1a:	bf00      	nop
 8019c1c:	08019ca7 	.word	0x08019ca7
 8019c20:	08019caf 	.word	0x08019caf
 8019c24:	08019d1d 	.word	0x08019d1d
 8019c28:	08019d1d 	.word	0x08019d1d
 8019c2c:	08019cb7 	.word	0x08019cb7
 8019c30:	08019d1d 	.word	0x08019d1d
 8019c34:	08019d1d 	.word	0x08019d1d
 8019c38:	08019d1d 	.word	0x08019d1d
 8019c3c:	08019cc7 	.word	0x08019cc7
 8019c40:	08019d1d 	.word	0x08019d1d
 8019c44:	08019d1d 	.word	0x08019d1d
 8019c48:	08019d1d 	.word	0x08019d1d
 8019c4c:	08019d1d 	.word	0x08019d1d
 8019c50:	08019d1d 	.word	0x08019d1d
 8019c54:	08019d1d 	.word	0x08019d1d
 8019c58:	08019d1d 	.word	0x08019d1d
 8019c5c:	08019cd7 	.word	0x08019cd7
 8019c60:	08019d1d 	.word	0x08019d1d
 8019c64:	08019d1d 	.word	0x08019d1d
 8019c68:	08019d1d 	.word	0x08019d1d
 8019c6c:	08019d1d 	.word	0x08019d1d
 8019c70:	08019d1d 	.word	0x08019d1d
 8019c74:	08019d1d 	.word	0x08019d1d
 8019c78:	08019d1d 	.word	0x08019d1d
 8019c7c:	08019d1d 	.word	0x08019d1d
 8019c80:	08019d1d 	.word	0x08019d1d
 8019c84:	08019d1d 	.word	0x08019d1d
 8019c88:	08019d1d 	.word	0x08019d1d
 8019c8c:	08019d1d 	.word	0x08019d1d
 8019c90:	08019d1d 	.word	0x08019d1d
 8019c94:	08019d1d 	.word	0x08019d1d
 8019c98:	08019d1d 	.word	0x08019d1d
 8019c9c:	08019d0f 	.word	0x08019d0f
 8019ca0:	2b40      	cmp	r3, #64	@ 0x40
 8019ca2:	d037      	beq.n	8019d14 <UART_SetConfig+0xc44>
 8019ca4:	e03a      	b.n	8019d1c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019ca6:	f7f8 fad9 	bl	801225c <HAL_RCC_GetPCLK1Freq>
 8019caa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019cac:	e03c      	b.n	8019d28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019cae:	f7f8 faeb 	bl	8012288 <HAL_RCC_GetPCLK2Freq>
 8019cb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019cb4:	e038      	b.n	8019d28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019cba:	4618      	mov	r0, r3
 8019cbc:	f7fa f982 	bl	8013fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8019cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019cc4:	e030      	b.n	8019d28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019cc6:	f107 0318 	add.w	r3, r7, #24
 8019cca:	4618      	mov	r0, r3
 8019ccc:	f7fa face 	bl	801426c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8019cd0:	69fb      	ldr	r3, [r7, #28]
 8019cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019cd4:	e028      	b.n	8019d28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019cd6:	4b09      	ldr	r3, [pc, #36]	@ (8019cfc <UART_SetConfig+0xc2c>)
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	f003 0320 	and.w	r3, r3, #32
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d012      	beq.n	8019d08 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8019ce2:	4b06      	ldr	r3, [pc, #24]	@ (8019cfc <UART_SetConfig+0xc2c>)
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	08db      	lsrs	r3, r3, #3
 8019ce8:	f003 0303 	and.w	r3, r3, #3
 8019cec:	4a04      	ldr	r2, [pc, #16]	@ (8019d00 <UART_SetConfig+0xc30>)
 8019cee:	fa22 f303 	lsr.w	r3, r2, r3
 8019cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019cf4:	e018      	b.n	8019d28 <UART_SetConfig+0xc58>
 8019cf6:	bf00      	nop
 8019cf8:	0801f2b4 	.word	0x0801f2b4
 8019cfc:	58024400 	.word	0x58024400
 8019d00:	03d09000 	.word	0x03d09000
 8019d04:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8019d08:	4b24      	ldr	r3, [pc, #144]	@ (8019d9c <UART_SetConfig+0xccc>)
 8019d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019d0c:	e00c      	b.n	8019d28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019d0e:	4b24      	ldr	r3, [pc, #144]	@ (8019da0 <UART_SetConfig+0xcd0>)
 8019d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019d12:	e009      	b.n	8019d28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019d14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019d1a:	e005      	b.n	8019d28 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8019d20:	2301      	movs	r3, #1
 8019d22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019d26:	bf00      	nop
    }

    if (pclk != 0U)
 8019d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d021      	beq.n	8019d72 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019d2e:	697b      	ldr	r3, [r7, #20]
 8019d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d32:	4a1c      	ldr	r2, [pc, #112]	@ (8019da4 <UART_SetConfig+0xcd4>)
 8019d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d38:	461a      	mov	r2, r3
 8019d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019d3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8019d40:	697b      	ldr	r3, [r7, #20]
 8019d42:	685b      	ldr	r3, [r3, #4]
 8019d44:	085b      	lsrs	r3, r3, #1
 8019d46:	441a      	add	r2, r3
 8019d48:	697b      	ldr	r3, [r7, #20]
 8019d4a:	685b      	ldr	r3, [r3, #4]
 8019d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019d50:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d54:	2b0f      	cmp	r3, #15
 8019d56:	d909      	bls.n	8019d6c <UART_SetConfig+0xc9c>
 8019d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019d5e:	d205      	bcs.n	8019d6c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8019d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d62:	b29a      	uxth	r2, r3
 8019d64:	697b      	ldr	r3, [r7, #20]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	60da      	str	r2, [r3, #12]
 8019d6a:	e002      	b.n	8019d72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019d6c:	2301      	movs	r3, #1
 8019d6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8019d72:	697b      	ldr	r3, [r7, #20]
 8019d74:	2201      	movs	r2, #1
 8019d76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8019d7a:	697b      	ldr	r3, [r7, #20]
 8019d7c:	2201      	movs	r2, #1
 8019d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8019d82:	697b      	ldr	r3, [r7, #20]
 8019d84:	2200      	movs	r2, #0
 8019d86:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8019d88:	697b      	ldr	r3, [r7, #20]
 8019d8a:	2200      	movs	r2, #0
 8019d8c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8019d8e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8019d92:	4618      	mov	r0, r3
 8019d94:	3748      	adds	r7, #72	@ 0x48
 8019d96:	46bd      	mov	sp, r7
 8019d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019d9c:	03d09000 	.word	0x03d09000
 8019da0:	003d0900 	.word	0x003d0900
 8019da4:	0801f2b4 	.word	0x0801f2b4

08019da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019da8:	b480      	push	{r7}
 8019daa:	b083      	sub	sp, #12
 8019dac:	af00      	add	r7, sp, #0
 8019dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019db4:	f003 0308 	and.w	r3, r3, #8
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d00a      	beq.n	8019dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	685b      	ldr	r3, [r3, #4]
 8019dc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	430a      	orrs	r2, r1
 8019dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019dd6:	f003 0301 	and.w	r3, r3, #1
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d00a      	beq.n	8019df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	685b      	ldr	r3, [r3, #4]
 8019de4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	430a      	orrs	r2, r1
 8019df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019df8:	f003 0302 	and.w	r3, r3, #2
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d00a      	beq.n	8019e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	685b      	ldr	r3, [r3, #4]
 8019e06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	430a      	orrs	r2, r1
 8019e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019e1a:	f003 0304 	and.w	r3, r3, #4
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d00a      	beq.n	8019e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	685b      	ldr	r3, [r3, #4]
 8019e28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	430a      	orrs	r2, r1
 8019e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019e3c:	f003 0310 	and.w	r3, r3, #16
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d00a      	beq.n	8019e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	689b      	ldr	r3, [r3, #8]
 8019e4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	430a      	orrs	r2, r1
 8019e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019e5e:	f003 0320 	and.w	r3, r3, #32
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d00a      	beq.n	8019e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	689b      	ldr	r3, [r3, #8]
 8019e6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	430a      	orrs	r2, r1
 8019e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d01a      	beq.n	8019ebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	685b      	ldr	r3, [r3, #4]
 8019e8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	430a      	orrs	r2, r1
 8019e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019ea2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019ea6:	d10a      	bne.n	8019ebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	685b      	ldr	r3, [r3, #4]
 8019eae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	430a      	orrs	r2, r1
 8019ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d00a      	beq.n	8019ee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	685b      	ldr	r3, [r3, #4]
 8019ed0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	430a      	orrs	r2, r1
 8019ede:	605a      	str	r2, [r3, #4]
  }
}
 8019ee0:	bf00      	nop
 8019ee2:	370c      	adds	r7, #12
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eea:	4770      	bx	lr

08019eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b098      	sub	sp, #96	@ 0x60
 8019ef0:	af02      	add	r7, sp, #8
 8019ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	2200      	movs	r2, #0
 8019ef8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019efc:	f7ef fc40 	bl	8009780 <HAL_GetTick>
 8019f00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	f003 0308 	and.w	r3, r3, #8
 8019f0c:	2b08      	cmp	r3, #8
 8019f0e:	d12f      	bne.n	8019f70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019f10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019f14:	9300      	str	r3, [sp, #0]
 8019f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f18:	2200      	movs	r2, #0
 8019f1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8019f1e:	6878      	ldr	r0, [r7, #4]
 8019f20:	f000 f88e 	bl	801a040 <UART_WaitOnFlagUntilTimeout>
 8019f24:	4603      	mov	r3, r0
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d022      	beq.n	8019f70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f32:	e853 3f00 	ldrex	r3, [r3]
 8019f36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019f3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	461a      	mov	r2, r3
 8019f46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8019f4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019f4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019f50:	e841 2300 	strex	r3, r2, [r1]
 8019f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d1e6      	bne.n	8019f2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	2220      	movs	r2, #32
 8019f60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	2200      	movs	r2, #0
 8019f68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019f6c:	2303      	movs	r3, #3
 8019f6e:	e063      	b.n	801a038 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	f003 0304 	and.w	r3, r3, #4
 8019f7a:	2b04      	cmp	r3, #4
 8019f7c:	d149      	bne.n	801a012 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019f7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019f82:	9300      	str	r3, [sp, #0]
 8019f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f86:	2200      	movs	r2, #0
 8019f88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8019f8c:	6878      	ldr	r0, [r7, #4]
 8019f8e:	f000 f857 	bl	801a040 <UART_WaitOnFlagUntilTimeout>
 8019f92:	4603      	mov	r3, r0
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d03c      	beq.n	801a012 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fa0:	e853 3f00 	ldrex	r3, [r3]
 8019fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8019fa6:	6a3b      	ldr	r3, [r7, #32]
 8019fa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	461a      	mov	r2, r3
 8019fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019fb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8019fb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019fbe:	e841 2300 	strex	r3, r2, [r1]
 8019fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d1e6      	bne.n	8019f98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	3308      	adds	r3, #8
 8019fd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fd2:	693b      	ldr	r3, [r7, #16]
 8019fd4:	e853 3f00 	ldrex	r3, [r3]
 8019fd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	f023 0301 	bic.w	r3, r3, #1
 8019fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	3308      	adds	r3, #8
 8019fe8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019fea:	61fa      	str	r2, [r7, #28]
 8019fec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fee:	69b9      	ldr	r1, [r7, #24]
 8019ff0:	69fa      	ldr	r2, [r7, #28]
 8019ff2:	e841 2300 	strex	r3, r2, [r1]
 8019ff6:	617b      	str	r3, [r7, #20]
   return(result);
 8019ff8:	697b      	ldr	r3, [r7, #20]
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d1e5      	bne.n	8019fca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	2220      	movs	r2, #32
 801a002:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	2200      	movs	r2, #0
 801a00a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a00e:	2303      	movs	r3, #3
 801a010:	e012      	b.n	801a038 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	2220      	movs	r2, #32
 801a016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	2220      	movs	r2, #32
 801a01e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	2200      	movs	r2, #0
 801a026:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	2200      	movs	r2, #0
 801a02c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	2200      	movs	r2, #0
 801a032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a036:	2300      	movs	r3, #0
}
 801a038:	4618      	mov	r0, r3
 801a03a:	3758      	adds	r7, #88	@ 0x58
 801a03c:	46bd      	mov	sp, r7
 801a03e:	bd80      	pop	{r7, pc}

0801a040 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a040:	b580      	push	{r7, lr}
 801a042:	b084      	sub	sp, #16
 801a044:	af00      	add	r7, sp, #0
 801a046:	60f8      	str	r0, [r7, #12]
 801a048:	60b9      	str	r1, [r7, #8]
 801a04a:	603b      	str	r3, [r7, #0]
 801a04c:	4613      	mov	r3, r2
 801a04e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a050:	e04f      	b.n	801a0f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a052:	69bb      	ldr	r3, [r7, #24]
 801a054:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a058:	d04b      	beq.n	801a0f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a05a:	f7ef fb91 	bl	8009780 <HAL_GetTick>
 801a05e:	4602      	mov	r2, r0
 801a060:	683b      	ldr	r3, [r7, #0]
 801a062:	1ad3      	subs	r3, r2, r3
 801a064:	69ba      	ldr	r2, [r7, #24]
 801a066:	429a      	cmp	r2, r3
 801a068:	d302      	bcc.n	801a070 <UART_WaitOnFlagUntilTimeout+0x30>
 801a06a:	69bb      	ldr	r3, [r7, #24]
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d101      	bne.n	801a074 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801a070:	2303      	movs	r3, #3
 801a072:	e04e      	b.n	801a112 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	f003 0304 	and.w	r3, r3, #4
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d037      	beq.n	801a0f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 801a082:	68bb      	ldr	r3, [r7, #8]
 801a084:	2b80      	cmp	r3, #128	@ 0x80
 801a086:	d034      	beq.n	801a0f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 801a088:	68bb      	ldr	r3, [r7, #8]
 801a08a:	2b40      	cmp	r3, #64	@ 0x40
 801a08c:	d031      	beq.n	801a0f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801a08e:	68fb      	ldr	r3, [r7, #12]
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	69db      	ldr	r3, [r3, #28]
 801a094:	f003 0308 	and.w	r3, r3, #8
 801a098:	2b08      	cmp	r3, #8
 801a09a:	d110      	bne.n	801a0be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	2208      	movs	r2, #8
 801a0a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a0a4:	68f8      	ldr	r0, [r7, #12]
 801a0a6:	f000 f95b 	bl	801a360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	2208      	movs	r2, #8
 801a0ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	2200      	movs	r2, #0
 801a0b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801a0ba:	2301      	movs	r3, #1
 801a0bc:	e029      	b.n	801a112 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	69db      	ldr	r3, [r3, #28]
 801a0c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801a0c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801a0cc:	d111      	bne.n	801a0f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	681b      	ldr	r3, [r3, #0]
 801a0d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a0d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a0d8:	68f8      	ldr	r0, [r7, #12]
 801a0da:	f000 f941 	bl	801a360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	2220      	movs	r2, #32
 801a0e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	2200      	movs	r2, #0
 801a0ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801a0ee:	2303      	movs	r3, #3
 801a0f0:	e00f      	b.n	801a112 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a0f2:	68fb      	ldr	r3, [r7, #12]
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	69da      	ldr	r2, [r3, #28]
 801a0f8:	68bb      	ldr	r3, [r7, #8]
 801a0fa:	4013      	ands	r3, r2
 801a0fc:	68ba      	ldr	r2, [r7, #8]
 801a0fe:	429a      	cmp	r2, r3
 801a100:	bf0c      	ite	eq
 801a102:	2301      	moveq	r3, #1
 801a104:	2300      	movne	r3, #0
 801a106:	b2db      	uxtb	r3, r3
 801a108:	461a      	mov	r2, r3
 801a10a:	79fb      	ldrb	r3, [r7, #7]
 801a10c:	429a      	cmp	r2, r3
 801a10e:	d0a0      	beq.n	801a052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a110:	2300      	movs	r3, #0
}
 801a112:	4618      	mov	r0, r3
 801a114:	3710      	adds	r7, #16
 801a116:	46bd      	mov	sp, r7
 801a118:	bd80      	pop	{r7, pc}
	...

0801a11c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a11c:	b480      	push	{r7}
 801a11e:	b0a3      	sub	sp, #140	@ 0x8c
 801a120:	af00      	add	r7, sp, #0
 801a122:	60f8      	str	r0, [r7, #12]
 801a124:	60b9      	str	r1, [r7, #8]
 801a126:	4613      	mov	r3, r2
 801a128:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	68ba      	ldr	r2, [r7, #8]
 801a12e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	88fa      	ldrh	r2, [r7, #6]
 801a134:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	88fa      	ldrh	r2, [r7, #6]
 801a13c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	2200      	movs	r2, #0
 801a144:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	689b      	ldr	r3, [r3, #8]
 801a14a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a14e:	d10e      	bne.n	801a16e <UART_Start_Receive_IT+0x52>
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	691b      	ldr	r3, [r3, #16]
 801a154:	2b00      	cmp	r3, #0
 801a156:	d105      	bne.n	801a164 <UART_Start_Receive_IT+0x48>
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801a15e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801a162:	e02d      	b.n	801a1c0 <UART_Start_Receive_IT+0xa4>
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	22ff      	movs	r2, #255	@ 0xff
 801a168:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801a16c:	e028      	b.n	801a1c0 <UART_Start_Receive_IT+0xa4>
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	689b      	ldr	r3, [r3, #8]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d10d      	bne.n	801a192 <UART_Start_Receive_IT+0x76>
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	691b      	ldr	r3, [r3, #16]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d104      	bne.n	801a188 <UART_Start_Receive_IT+0x6c>
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	22ff      	movs	r2, #255	@ 0xff
 801a182:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801a186:	e01b      	b.n	801a1c0 <UART_Start_Receive_IT+0xa4>
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	227f      	movs	r2, #127	@ 0x7f
 801a18c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801a190:	e016      	b.n	801a1c0 <UART_Start_Receive_IT+0xa4>
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	689b      	ldr	r3, [r3, #8]
 801a196:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a19a:	d10d      	bne.n	801a1b8 <UART_Start_Receive_IT+0x9c>
 801a19c:	68fb      	ldr	r3, [r7, #12]
 801a19e:	691b      	ldr	r3, [r3, #16]
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d104      	bne.n	801a1ae <UART_Start_Receive_IT+0x92>
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	227f      	movs	r2, #127	@ 0x7f
 801a1a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801a1ac:	e008      	b.n	801a1c0 <UART_Start_Receive_IT+0xa4>
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	223f      	movs	r2, #63	@ 0x3f
 801a1b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801a1b6:	e003      	b.n	801a1c0 <UART_Start_Receive_IT+0xa4>
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	2200      	movs	r2, #0
 801a1bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	2200      	movs	r2, #0
 801a1c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	2222      	movs	r2, #34	@ 0x22
 801a1cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a1d0:	68fb      	ldr	r3, [r7, #12]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	3308      	adds	r3, #8
 801a1d6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a1da:	e853 3f00 	ldrex	r3, [r3]
 801a1de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a1e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a1e2:	f043 0301 	orr.w	r3, r3, #1
 801a1e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	3308      	adds	r3, #8
 801a1f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a1f4:	673a      	str	r2, [r7, #112]	@ 0x70
 801a1f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1f8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801a1fa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801a1fc:	e841 2300 	strex	r3, r2, [r1]
 801a200:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 801a202:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a204:	2b00      	cmp	r3, #0
 801a206:	d1e3      	bne.n	801a1d0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a20c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a210:	d14f      	bne.n	801a2b2 <UART_Start_Receive_IT+0x196>
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a218:	88fa      	ldrh	r2, [r7, #6]
 801a21a:	429a      	cmp	r2, r3
 801a21c:	d349      	bcc.n	801a2b2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	689b      	ldr	r3, [r3, #8]
 801a222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a226:	d107      	bne.n	801a238 <UART_Start_Receive_IT+0x11c>
 801a228:	68fb      	ldr	r3, [r7, #12]
 801a22a:	691b      	ldr	r3, [r3, #16]
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d103      	bne.n	801a238 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	4a47      	ldr	r2, [pc, #284]	@ (801a350 <UART_Start_Receive_IT+0x234>)
 801a234:	675a      	str	r2, [r3, #116]	@ 0x74
 801a236:	e002      	b.n	801a23e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	4a46      	ldr	r2, [pc, #280]	@ (801a354 <UART_Start_Receive_IT+0x238>)
 801a23c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	691b      	ldr	r3, [r3, #16]
 801a242:	2b00      	cmp	r3, #0
 801a244:	d01a      	beq.n	801a27c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a24c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a24e:	e853 3f00 	ldrex	r3, [r3]
 801a252:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a25a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	461a      	mov	r2, r3
 801a264:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a268:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a26a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a26c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801a26e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a270:	e841 2300 	strex	r3, r2, [r1]
 801a274:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801a276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d1e4      	bne.n	801a246 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	3308      	adds	r3, #8
 801a282:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a286:	e853 3f00 	ldrex	r3, [r3]
 801a28a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a28e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801a292:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	3308      	adds	r3, #8
 801a29a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a29c:	64ba      	str	r2, [r7, #72]	@ 0x48
 801a29e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801a2a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a2a4:	e841 2300 	strex	r3, r2, [r1]
 801a2a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801a2aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d1e5      	bne.n	801a27c <UART_Start_Receive_IT+0x160>
 801a2b0:	e046      	b.n	801a340 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a2b2:	68fb      	ldr	r3, [r7, #12]
 801a2b4:	689b      	ldr	r3, [r3, #8]
 801a2b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a2ba:	d107      	bne.n	801a2cc <UART_Start_Receive_IT+0x1b0>
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	691b      	ldr	r3, [r3, #16]
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d103      	bne.n	801a2cc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	4a24      	ldr	r2, [pc, #144]	@ (801a358 <UART_Start_Receive_IT+0x23c>)
 801a2c8:	675a      	str	r2, [r3, #116]	@ 0x74
 801a2ca:	e002      	b.n	801a2d2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	4a23      	ldr	r2, [pc, #140]	@ (801a35c <UART_Start_Receive_IT+0x240>)
 801a2d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	691b      	ldr	r3, [r3, #16]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d019      	beq.n	801a30e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801a2da:	68fb      	ldr	r3, [r7, #12]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2e2:	e853 3f00 	ldrex	r3, [r3]
 801a2e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2ea:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801a2ee:	677b      	str	r3, [r7, #116]	@ 0x74
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	461a      	mov	r2, r3
 801a2f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a2f8:	637b      	str	r3, [r7, #52]	@ 0x34
 801a2fa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801a2fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a300:	e841 2300 	strex	r3, r2, [r1]
 801a304:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801a306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d1e6      	bne.n	801a2da <UART_Start_Receive_IT+0x1be>
 801a30c:	e018      	b.n	801a340 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a314:	697b      	ldr	r3, [r7, #20]
 801a316:	e853 3f00 	ldrex	r3, [r3]
 801a31a:	613b      	str	r3, [r7, #16]
   return(result);
 801a31c:	693b      	ldr	r3, [r7, #16]
 801a31e:	f043 0320 	orr.w	r3, r3, #32
 801a322:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	461a      	mov	r2, r3
 801a32a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a32c:	623b      	str	r3, [r7, #32]
 801a32e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a330:	69f9      	ldr	r1, [r7, #28]
 801a332:	6a3a      	ldr	r2, [r7, #32]
 801a334:	e841 2300 	strex	r3, r2, [r1]
 801a338:	61bb      	str	r3, [r7, #24]
   return(result);
 801a33a:	69bb      	ldr	r3, [r7, #24]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d1e6      	bne.n	801a30e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801a340:	2300      	movs	r3, #0
}
 801a342:	4618      	mov	r0, r3
 801a344:	378c      	adds	r7, #140	@ 0x8c
 801a346:	46bd      	mov	sp, r7
 801a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a34c:	4770      	bx	lr
 801a34e:	bf00      	nop
 801a350:	0801aec1 	.word	0x0801aec1
 801a354:	0801ab5d 	.word	0x0801ab5d
 801a358:	0801a9a5 	.word	0x0801a9a5
 801a35c:	0801a7ed 	.word	0x0801a7ed

0801a360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801a360:	b480      	push	{r7}
 801a362:	b095      	sub	sp, #84	@ 0x54
 801a364:	af00      	add	r7, sp, #0
 801a366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a370:	e853 3f00 	ldrex	r3, [r3]
 801a374:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a37c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	461a      	mov	r2, r3
 801a384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a386:	643b      	str	r3, [r7, #64]	@ 0x40
 801a388:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a38a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a38c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a38e:	e841 2300 	strex	r3, r2, [r1]
 801a392:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a396:	2b00      	cmp	r3, #0
 801a398:	d1e6      	bne.n	801a368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	3308      	adds	r3, #8
 801a3a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3a2:	6a3b      	ldr	r3, [r7, #32]
 801a3a4:	e853 3f00 	ldrex	r3, [r3]
 801a3a8:	61fb      	str	r3, [r7, #28]
   return(result);
 801a3aa:	69fa      	ldr	r2, [r7, #28]
 801a3ac:	4b1e      	ldr	r3, [pc, #120]	@ (801a428 <UART_EndRxTransfer+0xc8>)
 801a3ae:	4013      	ands	r3, r2
 801a3b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	3308      	adds	r3, #8
 801a3b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a3ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a3bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a3c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a3c2:	e841 2300 	strex	r3, r2, [r1]
 801a3c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d1e5      	bne.n	801a39a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3d2:	2b01      	cmp	r3, #1
 801a3d4:	d118      	bne.n	801a408 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	e853 3f00 	ldrex	r3, [r3]
 801a3e2:	60bb      	str	r3, [r7, #8]
   return(result);
 801a3e4:	68bb      	ldr	r3, [r7, #8]
 801a3e6:	f023 0310 	bic.w	r3, r3, #16
 801a3ea:	647b      	str	r3, [r7, #68]	@ 0x44
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	461a      	mov	r2, r3
 801a3f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a3f4:	61bb      	str	r3, [r7, #24]
 801a3f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3f8:	6979      	ldr	r1, [r7, #20]
 801a3fa:	69ba      	ldr	r2, [r7, #24]
 801a3fc:	e841 2300 	strex	r3, r2, [r1]
 801a400:	613b      	str	r3, [r7, #16]
   return(result);
 801a402:	693b      	ldr	r3, [r7, #16]
 801a404:	2b00      	cmp	r3, #0
 801a406:	d1e6      	bne.n	801a3d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	2220      	movs	r2, #32
 801a40c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	2200      	movs	r2, #0
 801a414:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	2200      	movs	r2, #0
 801a41a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801a41c:	bf00      	nop
 801a41e:	3754      	adds	r7, #84	@ 0x54
 801a420:	46bd      	mov	sp, r7
 801a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a426:	4770      	bx	lr
 801a428:	effffffe 	.word	0xeffffffe

0801a42c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801a42c:	b580      	push	{r7, lr}
 801a42e:	b084      	sub	sp, #16
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a438:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	2200      	movs	r2, #0
 801a43e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801a442:	68f8      	ldr	r0, [r7, #12]
 801a444:	f7fe fe2e 	bl	80190a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a448:	bf00      	nop
 801a44a:	3710      	adds	r7, #16
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd80      	pop	{r7, pc}

0801a450 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a450:	b480      	push	{r7}
 801a452:	b08f      	sub	sp, #60	@ 0x3c
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a45e:	2b21      	cmp	r3, #33	@ 0x21
 801a460:	d14c      	bne.n	801a4fc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a468:	b29b      	uxth	r3, r3
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d132      	bne.n	801a4d4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a474:	6a3b      	ldr	r3, [r7, #32]
 801a476:	e853 3f00 	ldrex	r3, [r3]
 801a47a:	61fb      	str	r3, [r7, #28]
   return(result);
 801a47c:	69fb      	ldr	r3, [r7, #28]
 801a47e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a482:	637b      	str	r3, [r7, #52]	@ 0x34
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	461a      	mov	r2, r3
 801a48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a48e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a490:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a494:	e841 2300 	strex	r3, r2, [r1]
 801a498:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d1e6      	bne.n	801a46e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a4a6:	68fb      	ldr	r3, [r7, #12]
 801a4a8:	e853 3f00 	ldrex	r3, [r3]
 801a4ac:	60bb      	str	r3, [r7, #8]
   return(result);
 801a4ae:	68bb      	ldr	r3, [r7, #8]
 801a4b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a4b4:	633b      	str	r3, [r7, #48]	@ 0x30
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	461a      	mov	r2, r3
 801a4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4be:	61bb      	str	r3, [r7, #24]
 801a4c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a4c2:	6979      	ldr	r1, [r7, #20]
 801a4c4:	69ba      	ldr	r2, [r7, #24]
 801a4c6:	e841 2300 	strex	r3, r2, [r1]
 801a4ca:	613b      	str	r3, [r7, #16]
   return(result);
 801a4cc:	693b      	ldr	r3, [r7, #16]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d1e6      	bne.n	801a4a0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801a4d2:	e013      	b.n	801a4fc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a4d8:	781a      	ldrb	r2, [r3, #0]
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a4e4:	1c5a      	adds	r2, r3, #1
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a4f0:	b29b      	uxth	r3, r3
 801a4f2:	3b01      	subs	r3, #1
 801a4f4:	b29a      	uxth	r2, r3
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 801a4fc:	bf00      	nop
 801a4fe:	373c      	adds	r7, #60	@ 0x3c
 801a500:	46bd      	mov	sp, r7
 801a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a506:	4770      	bx	lr

0801a508 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a508:	b480      	push	{r7}
 801a50a:	b091      	sub	sp, #68	@ 0x44
 801a50c:	af00      	add	r7, sp, #0
 801a50e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a516:	2b21      	cmp	r3, #33	@ 0x21
 801a518:	d151      	bne.n	801a5be <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a520:	b29b      	uxth	r3, r3
 801a522:	2b00      	cmp	r3, #0
 801a524:	d132      	bne.n	801a58c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a52e:	e853 3f00 	ldrex	r3, [r3]
 801a532:	623b      	str	r3, [r7, #32]
   return(result);
 801a534:	6a3b      	ldr	r3, [r7, #32]
 801a536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a53a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	461a      	mov	r2, r3
 801a542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a544:	633b      	str	r3, [r7, #48]	@ 0x30
 801a546:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a548:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a54a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a54c:	e841 2300 	strex	r3, r2, [r1]
 801a550:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a554:	2b00      	cmp	r3, #0
 801a556:	d1e6      	bne.n	801a526 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a55e:	693b      	ldr	r3, [r7, #16]
 801a560:	e853 3f00 	ldrex	r3, [r3]
 801a564:	60fb      	str	r3, [r7, #12]
   return(result);
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a56c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	461a      	mov	r2, r3
 801a574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a576:	61fb      	str	r3, [r7, #28]
 801a578:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a57a:	69b9      	ldr	r1, [r7, #24]
 801a57c:	69fa      	ldr	r2, [r7, #28]
 801a57e:	e841 2300 	strex	r3, r2, [r1]
 801a582:	617b      	str	r3, [r7, #20]
   return(result);
 801a584:	697b      	ldr	r3, [r7, #20]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d1e6      	bne.n	801a558 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801a58a:	e018      	b.n	801a5be <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a590:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801a592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a594:	881b      	ldrh	r3, [r3, #0]
 801a596:	461a      	mov	r2, r3
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a5a0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a5a6:	1c9a      	adds	r2, r3, #2
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a5b2:	b29b      	uxth	r3, r3
 801a5b4:	3b01      	subs	r3, #1
 801a5b6:	b29a      	uxth	r2, r3
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 801a5be:	bf00      	nop
 801a5c0:	3744      	adds	r7, #68	@ 0x44
 801a5c2:	46bd      	mov	sp, r7
 801a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c8:	4770      	bx	lr

0801a5ca <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a5ca:	b480      	push	{r7}
 801a5cc:	b091      	sub	sp, #68	@ 0x44
 801a5ce:	af00      	add	r7, sp, #0
 801a5d0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a5d8:	2b21      	cmp	r3, #33	@ 0x21
 801a5da:	d160      	bne.n	801a69e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801a5e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a5e4:	e057      	b.n	801a696 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a5ec:	b29b      	uxth	r3, r3
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d133      	bne.n	801a65a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	3308      	adds	r3, #8
 801a5f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5fc:	e853 3f00 	ldrex	r3, [r3]
 801a600:	623b      	str	r3, [r7, #32]
   return(result);
 801a602:	6a3b      	ldr	r3, [r7, #32]
 801a604:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801a608:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	3308      	adds	r3, #8
 801a610:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a612:	633a      	str	r2, [r7, #48]	@ 0x30
 801a614:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a61a:	e841 2300 	strex	r3, r2, [r1]
 801a61e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a622:	2b00      	cmp	r3, #0
 801a624:	d1e5      	bne.n	801a5f2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a62c:	693b      	ldr	r3, [r7, #16]
 801a62e:	e853 3f00 	ldrex	r3, [r3]
 801a632:	60fb      	str	r3, [r7, #12]
   return(result);
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a63a:	637b      	str	r3, [r7, #52]	@ 0x34
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	461a      	mov	r2, r3
 801a642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a644:	61fb      	str	r3, [r7, #28]
 801a646:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a648:	69b9      	ldr	r1, [r7, #24]
 801a64a:	69fa      	ldr	r2, [r7, #28]
 801a64c:	e841 2300 	strex	r3, r2, [r1]
 801a650:	617b      	str	r3, [r7, #20]
   return(result);
 801a652:	697b      	ldr	r3, [r7, #20]
 801a654:	2b00      	cmp	r3, #0
 801a656:	d1e6      	bne.n	801a626 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801a658:	e021      	b.n	801a69e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	69db      	ldr	r3, [r3, #28]
 801a660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a664:	2b00      	cmp	r3, #0
 801a666:	d013      	beq.n	801a690 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a66c:	781a      	ldrb	r2, [r3, #0]
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a678:	1c5a      	adds	r2, r3, #1
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a684:	b29b      	uxth	r3, r3
 801a686:	3b01      	subs	r3, #1
 801a688:	b29a      	uxth	r2, r3
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a690:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a692:	3b01      	subs	r3, #1
 801a694:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a696:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d1a4      	bne.n	801a5e6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801a69c:	e7ff      	b.n	801a69e <UART_TxISR_8BIT_FIFOEN+0xd4>
 801a69e:	bf00      	nop
 801a6a0:	3744      	adds	r7, #68	@ 0x44
 801a6a2:	46bd      	mov	sp, r7
 801a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a8:	4770      	bx	lr

0801a6aa <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a6aa:	b480      	push	{r7}
 801a6ac:	b091      	sub	sp, #68	@ 0x44
 801a6ae:	af00      	add	r7, sp, #0
 801a6b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a6b8:	2b21      	cmp	r3, #33	@ 0x21
 801a6ba:	d165      	bne.n	801a788 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801a6c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a6c4:	e05c      	b.n	801a780 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a6cc:	b29b      	uxth	r3, r3
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d133      	bne.n	801a73a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	3308      	adds	r3, #8
 801a6d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6da:	6a3b      	ldr	r3, [r7, #32]
 801a6dc:	e853 3f00 	ldrex	r3, [r3]
 801a6e0:	61fb      	str	r3, [r7, #28]
   return(result);
 801a6e2:	69fb      	ldr	r3, [r7, #28]
 801a6e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801a6e8:	637b      	str	r3, [r7, #52]	@ 0x34
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	3308      	adds	r3, #8
 801a6f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a6f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a6f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a6f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a6fa:	e841 2300 	strex	r3, r2, [r1]
 801a6fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a702:	2b00      	cmp	r3, #0
 801a704:	d1e5      	bne.n	801a6d2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	e853 3f00 	ldrex	r3, [r3]
 801a712:	60bb      	str	r3, [r7, #8]
   return(result);
 801a714:	68bb      	ldr	r3, [r7, #8]
 801a716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a71a:	633b      	str	r3, [r7, #48]	@ 0x30
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	461a      	mov	r2, r3
 801a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a724:	61bb      	str	r3, [r7, #24]
 801a726:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a728:	6979      	ldr	r1, [r7, #20]
 801a72a:	69ba      	ldr	r2, [r7, #24]
 801a72c:	e841 2300 	strex	r3, r2, [r1]
 801a730:	613b      	str	r3, [r7, #16]
   return(result);
 801a732:	693b      	ldr	r3, [r7, #16]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d1e6      	bne.n	801a706 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801a738:	e026      	b.n	801a788 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	69db      	ldr	r3, [r3, #28]
 801a740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a744:	2b00      	cmp	r3, #0
 801a746:	d018      	beq.n	801a77a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a74c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801a74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a750:	881b      	ldrh	r3, [r3, #0]
 801a752:	461a      	mov	r2, r3
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a75c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a762:	1c9a      	adds	r2, r3, #2
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a76e:	b29b      	uxth	r3, r3
 801a770:	3b01      	subs	r3, #1
 801a772:	b29a      	uxth	r2, r3
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a77a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a77c:	3b01      	subs	r3, #1
 801a77e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a780:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a782:	2b00      	cmp	r3, #0
 801a784:	d19f      	bne.n	801a6c6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801a786:	e7ff      	b.n	801a788 <UART_TxISR_16BIT_FIFOEN+0xde>
 801a788:	bf00      	nop
 801a78a:	3744      	adds	r7, #68	@ 0x44
 801a78c:	46bd      	mov	sp, r7
 801a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a792:	4770      	bx	lr

0801a794 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a794:	b580      	push	{r7, lr}
 801a796:	b088      	sub	sp, #32
 801a798:	af00      	add	r7, sp, #0
 801a79a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	e853 3f00 	ldrex	r3, [r3]
 801a7a8:	60bb      	str	r3, [r7, #8]
   return(result);
 801a7aa:	68bb      	ldr	r3, [r7, #8]
 801a7ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a7b0:	61fb      	str	r3, [r7, #28]
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	461a      	mov	r2, r3
 801a7b8:	69fb      	ldr	r3, [r7, #28]
 801a7ba:	61bb      	str	r3, [r7, #24]
 801a7bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7be:	6979      	ldr	r1, [r7, #20]
 801a7c0:	69ba      	ldr	r2, [r7, #24]
 801a7c2:	e841 2300 	strex	r3, r2, [r1]
 801a7c6:	613b      	str	r3, [r7, #16]
   return(result);
 801a7c8:	693b      	ldr	r3, [r7, #16]
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d1e6      	bne.n	801a79c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	2220      	movs	r2, #32
 801a7d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	2200      	movs	r2, #0
 801a7da:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a7dc:	6878      	ldr	r0, [r7, #4]
 801a7de:	f7fe fc57 	bl	8019090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a7e2:	bf00      	nop
 801a7e4:	3720      	adds	r7, #32
 801a7e6:	46bd      	mov	sp, r7
 801a7e8:	bd80      	pop	{r7, pc}
	...

0801a7ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b09c      	sub	sp, #112	@ 0x70
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a7fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a804:	2b22      	cmp	r3, #34	@ 0x22
 801a806:	f040 80be 	bne.w	801a986 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a810:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a814:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801a818:	b2d9      	uxtb	r1, r3
 801a81a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a81e:	b2da      	uxtb	r2, r3
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a824:	400a      	ands	r2, r1
 801a826:	b2d2      	uxtb	r2, r2
 801a828:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a82e:	1c5a      	adds	r2, r3, #1
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a83a:	b29b      	uxth	r3, r3
 801a83c:	3b01      	subs	r3, #1
 801a83e:	b29a      	uxth	r2, r3
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a84c:	b29b      	uxth	r3, r3
 801a84e:	2b00      	cmp	r3, #0
 801a850:	f040 80a1 	bne.w	801a996 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a85a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a85c:	e853 3f00 	ldrex	r3, [r3]
 801a860:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a868:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	461a      	mov	r2, r3
 801a870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a872:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a874:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a876:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a878:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a87a:	e841 2300 	strex	r3, r2, [r1]
 801a87e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a882:	2b00      	cmp	r3, #0
 801a884:	d1e6      	bne.n	801a854 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	3308      	adds	r3, #8
 801a88c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a890:	e853 3f00 	ldrex	r3, [r3]
 801a894:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a898:	f023 0301 	bic.w	r3, r3, #1
 801a89c:	667b      	str	r3, [r7, #100]	@ 0x64
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	3308      	adds	r3, #8
 801a8a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801a8a6:	647a      	str	r2, [r7, #68]	@ 0x44
 801a8a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a8aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a8ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a8ae:	e841 2300 	strex	r3, r2, [r1]
 801a8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a8b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d1e5      	bne.n	801a886 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	2220      	movs	r2, #32
 801a8be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	2200      	movs	r2, #0
 801a8c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	2200      	movs	r2, #0
 801a8cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	4a33      	ldr	r2, [pc, #204]	@ (801a9a0 <UART_RxISR_8BIT+0x1b4>)
 801a8d4:	4293      	cmp	r3, r2
 801a8d6:	d01f      	beq.n	801a918 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	685b      	ldr	r3, [r3, #4]
 801a8de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d018      	beq.n	801a918 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8ee:	e853 3f00 	ldrex	r3, [r3]
 801a8f2:	623b      	str	r3, [r7, #32]
   return(result);
 801a8f4:	6a3b      	ldr	r3, [r7, #32]
 801a8f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a8fa:	663b      	str	r3, [r7, #96]	@ 0x60
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	461a      	mov	r2, r3
 801a902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a904:	633b      	str	r3, [r7, #48]	@ 0x30
 801a906:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a908:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a90a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a90c:	e841 2300 	strex	r3, r2, [r1]
 801a910:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a914:	2b00      	cmp	r3, #0
 801a916:	d1e6      	bne.n	801a8e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a91c:	2b01      	cmp	r3, #1
 801a91e:	d12e      	bne.n	801a97e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	2200      	movs	r2, #0
 801a924:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a92c:	693b      	ldr	r3, [r7, #16]
 801a92e:	e853 3f00 	ldrex	r3, [r3]
 801a932:	60fb      	str	r3, [r7, #12]
   return(result);
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	f023 0310 	bic.w	r3, r3, #16
 801a93a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	461a      	mov	r2, r3
 801a942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a944:	61fb      	str	r3, [r7, #28]
 801a946:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a948:	69b9      	ldr	r1, [r7, #24]
 801a94a:	69fa      	ldr	r2, [r7, #28]
 801a94c:	e841 2300 	strex	r3, r2, [r1]
 801a950:	617b      	str	r3, [r7, #20]
   return(result);
 801a952:	697b      	ldr	r3, [r7, #20]
 801a954:	2b00      	cmp	r3, #0
 801a956:	d1e6      	bne.n	801a926 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	69db      	ldr	r3, [r3, #28]
 801a95e:	f003 0310 	and.w	r3, r3, #16
 801a962:	2b10      	cmp	r3, #16
 801a964:	d103      	bne.n	801a96e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	2210      	movs	r2, #16
 801a96c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a974:	4619      	mov	r1, r3
 801a976:	6878      	ldr	r0, [r7, #4]
 801a978:	f7fe fb9e 	bl	80190b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a97c:	e00b      	b.n	801a996 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a97e:	6878      	ldr	r0, [r7, #4]
 801a980:	f7eb fd9c 	bl	80064bc <HAL_UART_RxCpltCallback>
}
 801a984:	e007      	b.n	801a996 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	699a      	ldr	r2, [r3, #24]
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	f042 0208 	orr.w	r2, r2, #8
 801a994:	619a      	str	r2, [r3, #24]
}
 801a996:	bf00      	nop
 801a998:	3770      	adds	r7, #112	@ 0x70
 801a99a:	46bd      	mov	sp, r7
 801a99c:	bd80      	pop	{r7, pc}
 801a99e:	bf00      	nop
 801a9a0:	58000c00 	.word	0x58000c00

0801a9a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b09c      	sub	sp, #112	@ 0x70
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a9b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a9bc:	2b22      	cmp	r3, #34	@ 0x22
 801a9be:	f040 80be 	bne.w	801ab3e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a9c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a9d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801a9d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801a9d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a9da:	4013      	ands	r3, r2
 801a9dc:	b29a      	uxth	r2, r3
 801a9de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a9e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a9e6:	1c9a      	adds	r2, r3, #2
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a9f2:	b29b      	uxth	r3, r3
 801a9f4:	3b01      	subs	r3, #1
 801a9f6:	b29a      	uxth	r2, r3
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801aa04:	b29b      	uxth	r3, r3
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	f040 80a1 	bne.w	801ab4e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aa14:	e853 3f00 	ldrex	r3, [r3]
 801aa18:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801aa1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aa1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801aa20:	667b      	str	r3, [r7, #100]	@ 0x64
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	461a      	mov	r2, r3
 801aa28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801aa2a:	657b      	str	r3, [r7, #84]	@ 0x54
 801aa2c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801aa30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801aa32:	e841 2300 	strex	r3, r2, [r1]
 801aa36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801aa38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d1e6      	bne.n	801aa0c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	3308      	adds	r3, #8
 801aa44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa48:	e853 3f00 	ldrex	r3, [r3]
 801aa4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801aa4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa50:	f023 0301 	bic.w	r3, r3, #1
 801aa54:	663b      	str	r3, [r7, #96]	@ 0x60
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	3308      	adds	r3, #8
 801aa5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801aa5e:	643a      	str	r2, [r7, #64]	@ 0x40
 801aa60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801aa64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801aa66:	e841 2300 	strex	r3, r2, [r1]
 801aa6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801aa6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d1e5      	bne.n	801aa3e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	2220      	movs	r2, #32
 801aa76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	2200      	movs	r2, #0
 801aa84:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	4a33      	ldr	r2, [pc, #204]	@ (801ab58 <UART_RxISR_16BIT+0x1b4>)
 801aa8c:	4293      	cmp	r3, r2
 801aa8e:	d01f      	beq.n	801aad0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	685b      	ldr	r3, [r3, #4]
 801aa96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d018      	beq.n	801aad0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	681b      	ldr	r3, [r3, #0]
 801aaa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aaa4:	6a3b      	ldr	r3, [r7, #32]
 801aaa6:	e853 3f00 	ldrex	r3, [r3]
 801aaaa:	61fb      	str	r3, [r7, #28]
   return(result);
 801aaac:	69fb      	ldr	r3, [r7, #28]
 801aaae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801aab2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	461a      	mov	r2, r3
 801aaba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801aabc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801aabe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801aac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801aac4:	e841 2300 	strex	r3, r2, [r1]
 801aac8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801aaca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d1e6      	bne.n	801aa9e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aad4:	2b01      	cmp	r3, #1
 801aad6:	d12e      	bne.n	801ab36 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	2200      	movs	r2, #0
 801aadc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	e853 3f00 	ldrex	r3, [r3]
 801aaea:	60bb      	str	r3, [r7, #8]
   return(result);
 801aaec:	68bb      	ldr	r3, [r7, #8]
 801aaee:	f023 0310 	bic.w	r3, r3, #16
 801aaf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	461a      	mov	r2, r3
 801aafa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aafc:	61bb      	str	r3, [r7, #24]
 801aafe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab00:	6979      	ldr	r1, [r7, #20]
 801ab02:	69ba      	ldr	r2, [r7, #24]
 801ab04:	e841 2300 	strex	r3, r2, [r1]
 801ab08:	613b      	str	r3, [r7, #16]
   return(result);
 801ab0a:	693b      	ldr	r3, [r7, #16]
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d1e6      	bne.n	801aade <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	69db      	ldr	r3, [r3, #28]
 801ab16:	f003 0310 	and.w	r3, r3, #16
 801ab1a:	2b10      	cmp	r3, #16
 801ab1c:	d103      	bne.n	801ab26 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	2210      	movs	r2, #16
 801ab24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801ab2c:	4619      	mov	r1, r3
 801ab2e:	6878      	ldr	r0, [r7, #4]
 801ab30:	f7fe fac2 	bl	80190b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801ab34:	e00b      	b.n	801ab4e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801ab36:	6878      	ldr	r0, [r7, #4]
 801ab38:	f7eb fcc0 	bl	80064bc <HAL_UART_RxCpltCallback>
}
 801ab3c:	e007      	b.n	801ab4e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	699a      	ldr	r2, [r3, #24]
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	f042 0208 	orr.w	r2, r2, #8
 801ab4c:	619a      	str	r2, [r3, #24]
}
 801ab4e:	bf00      	nop
 801ab50:	3770      	adds	r7, #112	@ 0x70
 801ab52:	46bd      	mov	sp, r7
 801ab54:	bd80      	pop	{r7, pc}
 801ab56:	bf00      	nop
 801ab58:	58000c00 	.word	0x58000c00

0801ab5c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801ab5c:	b580      	push	{r7, lr}
 801ab5e:	b0ac      	sub	sp, #176	@ 0xb0
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ab6a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	69db      	ldr	r3, [r3, #28]
 801ab74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	689b      	ldr	r3, [r3, #8]
 801ab88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801ab92:	2b22      	cmp	r3, #34	@ 0x22
 801ab94:	f040 8181 	bne.w	801ae9a <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801ab9e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801aba2:	e124      	b.n	801adee <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abaa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801abae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801abb2:	b2d9      	uxtb	r1, r3
 801abb4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801abb8:	b2da      	uxtb	r2, r3
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801abbe:	400a      	ands	r2, r1
 801abc0:	b2d2      	uxtb	r2, r2
 801abc2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801abc8:	1c5a      	adds	r2, r3, #1
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801abd4:	b29b      	uxth	r3, r3
 801abd6:	3b01      	subs	r3, #1
 801abd8:	b29a      	uxth	r2, r3
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	69db      	ldr	r3, [r3, #28]
 801abe6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801abea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801abee:	f003 0307 	and.w	r3, r3, #7
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d053      	beq.n	801ac9e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801abf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801abfa:	f003 0301 	and.w	r3, r3, #1
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d011      	beq.n	801ac26 <UART_RxISR_8BIT_FIFOEN+0xca>
 801ac02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801ac06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d00b      	beq.n	801ac26 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	2201      	movs	r2, #1
 801ac14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ac1c:	f043 0201 	orr.w	r2, r3, #1
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ac26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801ac2a:	f003 0302 	and.w	r3, r3, #2
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d011      	beq.n	801ac56 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801ac32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801ac36:	f003 0301 	and.w	r3, r3, #1
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d00b      	beq.n	801ac56 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	2202      	movs	r2, #2
 801ac44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ac4c:	f043 0204 	orr.w	r2, r3, #4
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ac56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801ac5a:	f003 0304 	and.w	r3, r3, #4
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d011      	beq.n	801ac86 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801ac62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801ac66:	f003 0301 	and.w	r3, r3, #1
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d00b      	beq.n	801ac86 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	2204      	movs	r2, #4
 801ac74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ac7c:	f043 0202 	orr.w	r2, r3, #2
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d006      	beq.n	801ac9e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801ac90:	6878      	ldr	r0, [r7, #4]
 801ac92:	f7fe fa07 	bl	80190a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	2200      	movs	r2, #0
 801ac9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801aca4:	b29b      	uxth	r3, r3
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	f040 80a1 	bne.w	801adee <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801acb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801acb4:	e853 3f00 	ldrex	r3, [r3]
 801acb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801acba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801acbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801acc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	461a      	mov	r2, r3
 801acca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801acce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801acd0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801acd2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801acd4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801acd6:	e841 2300 	strex	r3, r2, [r1]
 801acda:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801acdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d1e4      	bne.n	801acac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	3308      	adds	r3, #8
 801ace8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801acea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801acec:	e853 3f00 	ldrex	r3, [r3]
 801acf0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801acf2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801acf4:	4b6f      	ldr	r3, [pc, #444]	@ (801aeb4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801acf6:	4013      	ands	r3, r2
 801acf8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	3308      	adds	r3, #8
 801ad02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801ad06:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ad08:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ad0a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801ad0c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801ad0e:	e841 2300 	strex	r3, r2, [r1]
 801ad12:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801ad14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d1e3      	bne.n	801ace2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	2220      	movs	r2, #32
 801ad1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	2200      	movs	r2, #0
 801ad26:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	4a61      	ldr	r2, [pc, #388]	@ (801aeb8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801ad34:	4293      	cmp	r3, r2
 801ad36:	d021      	beq.n	801ad7c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	685b      	ldr	r3, [r3, #4]
 801ad3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d01a      	beq.n	801ad7c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ad4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ad4e:	e853 3f00 	ldrex	r3, [r3]
 801ad52:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801ad54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ad56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801ad5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	681b      	ldr	r3, [r3, #0]
 801ad62:	461a      	mov	r2, r3
 801ad64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801ad68:	657b      	str	r3, [r7, #84]	@ 0x54
 801ad6a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ad6c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801ad6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ad70:	e841 2300 	strex	r3, r2, [r1]
 801ad74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801ad76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d1e4      	bne.n	801ad46 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ad80:	2b01      	cmp	r3, #1
 801ad82:	d130      	bne.n	801ade6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	2200      	movs	r2, #0
 801ad88:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ad90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ad92:	e853 3f00 	ldrex	r3, [r3]
 801ad96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801ad98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad9a:	f023 0310 	bic.w	r3, r3, #16
 801ad9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	461a      	mov	r2, r3
 801ada8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801adac:	643b      	str	r3, [r7, #64]	@ 0x40
 801adae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801adb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801adb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801adb4:	e841 2300 	strex	r3, r2, [r1]
 801adb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801adba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801adbc:	2b00      	cmp	r3, #0
 801adbe:	d1e4      	bne.n	801ad8a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	69db      	ldr	r3, [r3, #28]
 801adc6:	f003 0310 	and.w	r3, r3, #16
 801adca:	2b10      	cmp	r3, #16
 801adcc:	d103      	bne.n	801add6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	2210      	movs	r2, #16
 801add4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801addc:	4619      	mov	r1, r3
 801adde:	6878      	ldr	r0, [r7, #4]
 801ade0:	f7fe f96a 	bl	80190b8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801ade4:	e00e      	b.n	801ae04 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 801ade6:	6878      	ldr	r0, [r7, #4]
 801ade8:	f7eb fb68 	bl	80064bc <HAL_UART_RxCpltCallback>
        break;
 801adec:	e00a      	b.n	801ae04 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801adee:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d006      	beq.n	801ae04 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 801adf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801adfa:	f003 0320 	and.w	r3, r3, #32
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	f47f aed0 	bne.w	801aba4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801ae0a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801ae0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d049      	beq.n	801aeaa <UART_RxISR_8BIT_FIFOEN+0x34e>
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801ae1c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801ae20:	429a      	cmp	r2, r3
 801ae22:	d242      	bcs.n	801aeaa <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	3308      	adds	r3, #8
 801ae2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ae2c:	6a3b      	ldr	r3, [r7, #32]
 801ae2e:	e853 3f00 	ldrex	r3, [r3]
 801ae32:	61fb      	str	r3, [r7, #28]
   return(result);
 801ae34:	69fb      	ldr	r3, [r7, #28]
 801ae36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801ae3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	681b      	ldr	r3, [r3, #0]
 801ae42:	3308      	adds	r3, #8
 801ae44:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801ae48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ae4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ae4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ae4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ae50:	e841 2300 	strex	r3, r2, [r1]
 801ae54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801ae56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d1e3      	bne.n	801ae24 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	4a17      	ldr	r2, [pc, #92]	@ (801aebc <UART_RxISR_8BIT_FIFOEN+0x360>)
 801ae60:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ae68:	68fb      	ldr	r3, [r7, #12]
 801ae6a:	e853 3f00 	ldrex	r3, [r3]
 801ae6e:	60bb      	str	r3, [r7, #8]
   return(result);
 801ae70:	68bb      	ldr	r3, [r7, #8]
 801ae72:	f043 0320 	orr.w	r3, r3, #32
 801ae76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	461a      	mov	r2, r3
 801ae80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ae84:	61bb      	str	r3, [r7, #24]
 801ae86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ae88:	6979      	ldr	r1, [r7, #20]
 801ae8a:	69ba      	ldr	r2, [r7, #24]
 801ae8c:	e841 2300 	strex	r3, r2, [r1]
 801ae90:	613b      	str	r3, [r7, #16]
   return(result);
 801ae92:	693b      	ldr	r3, [r7, #16]
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d1e4      	bne.n	801ae62 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801ae98:	e007      	b.n	801aeaa <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	699a      	ldr	r2, [r3, #24]
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	f042 0208 	orr.w	r2, r2, #8
 801aea8:	619a      	str	r2, [r3, #24]
}
 801aeaa:	bf00      	nop
 801aeac:	37b0      	adds	r7, #176	@ 0xb0
 801aeae:	46bd      	mov	sp, r7
 801aeb0:	bd80      	pop	{r7, pc}
 801aeb2:	bf00      	nop
 801aeb4:	effffffe 	.word	0xeffffffe
 801aeb8:	58000c00 	.word	0x58000c00
 801aebc:	0801a7ed 	.word	0x0801a7ed

0801aec0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801aec0:	b580      	push	{r7, lr}
 801aec2:	b0ae      	sub	sp, #184	@ 0xb8
 801aec4:	af00      	add	r7, sp, #0
 801aec6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801aece:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	69db      	ldr	r3, [r3, #28]
 801aed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	689b      	ldr	r3, [r3, #8]
 801aeec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801aef6:	2b22      	cmp	r3, #34	@ 0x22
 801aef8:	f040 8185 	bne.w	801b206 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801af02:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801af06:	e128      	b.n	801b15a <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801af0e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801af16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801af1a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801af1e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801af22:	4013      	ands	r3, r2
 801af24:	b29a      	uxth	r2, r3
 801af26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801af2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801af30:	1c9a      	adds	r2, r3, #2
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801af3c:	b29b      	uxth	r3, r3
 801af3e:	3b01      	subs	r3, #1
 801af40:	b29a      	uxth	r2, r3
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	69db      	ldr	r3, [r3, #28]
 801af4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801af52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801af56:	f003 0307 	and.w	r3, r3, #7
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d053      	beq.n	801b006 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801af5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801af62:	f003 0301 	and.w	r3, r3, #1
 801af66:	2b00      	cmp	r3, #0
 801af68:	d011      	beq.n	801af8e <UART_RxISR_16BIT_FIFOEN+0xce>
 801af6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801af6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801af72:	2b00      	cmp	r3, #0
 801af74:	d00b      	beq.n	801af8e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	2201      	movs	r2, #1
 801af7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801af84:	f043 0201 	orr.w	r2, r3, #1
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801af8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801af92:	f003 0302 	and.w	r3, r3, #2
 801af96:	2b00      	cmp	r3, #0
 801af98:	d011      	beq.n	801afbe <UART_RxISR_16BIT_FIFOEN+0xfe>
 801af9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801af9e:	f003 0301 	and.w	r3, r3, #1
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d00b      	beq.n	801afbe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	681b      	ldr	r3, [r3, #0]
 801afaa:	2202      	movs	r2, #2
 801afac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801afb4:	f043 0204 	orr.w	r2, r3, #4
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801afbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801afc2:	f003 0304 	and.w	r3, r3, #4
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d011      	beq.n	801afee <UART_RxISR_16BIT_FIFOEN+0x12e>
 801afca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801afce:	f003 0301 	and.w	r3, r3, #1
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d00b      	beq.n	801afee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	2204      	movs	r2, #4
 801afdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801afe4:	f043 0202 	orr.w	r2, r3, #2
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d006      	beq.n	801b006 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801aff8:	6878      	ldr	r0, [r7, #4]
 801affa:	f7fe f853 	bl	80190a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	2200      	movs	r2, #0
 801b002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b00c:	b29b      	uxth	r3, r3
 801b00e:	2b00      	cmp	r3, #0
 801b010:	f040 80a3 	bne.w	801b15a <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b01a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b01c:	e853 3f00 	ldrex	r3, [r3]
 801b020:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801b022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b028:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	461a      	mov	r2, r3
 801b032:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801b036:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801b03a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b03c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801b03e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801b042:	e841 2300 	strex	r3, r2, [r1]
 801b046:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801b048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d1e2      	bne.n	801b014 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	3308      	adds	r3, #8
 801b054:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b056:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b058:	e853 3f00 	ldrex	r3, [r3]
 801b05c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801b05e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b060:	4b6f      	ldr	r3, [pc, #444]	@ (801b220 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801b062:	4013      	ands	r3, r2
 801b064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	3308      	adds	r3, #8
 801b06e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801b072:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801b074:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b076:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801b078:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801b07a:	e841 2300 	strex	r3, r2, [r1]
 801b07e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801b080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b082:	2b00      	cmp	r3, #0
 801b084:	d1e3      	bne.n	801b04e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	2220      	movs	r2, #32
 801b08a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	2200      	movs	r2, #0
 801b092:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	2200      	movs	r2, #0
 801b098:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	4a61      	ldr	r2, [pc, #388]	@ (801b224 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801b0a0:	4293      	cmp	r3, r2
 801b0a2:	d021      	beq.n	801b0e8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	685b      	ldr	r3, [r3, #4]
 801b0aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d01a      	beq.n	801b0e8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b0b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b0ba:	e853 3f00 	ldrex	r3, [r3]
 801b0be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801b0c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b0c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801b0c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	461a      	mov	r2, r3
 801b0d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801b0d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b0d6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b0d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b0da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b0dc:	e841 2300 	strex	r3, r2, [r1]
 801b0e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801b0e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d1e4      	bne.n	801b0b2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b0ec:	2b01      	cmp	r3, #1
 801b0ee:	d130      	bne.n	801b152 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	2200      	movs	r2, #0
 801b0f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0fe:	e853 3f00 	ldrex	r3, [r3]
 801b102:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801b104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b106:	f023 0310 	bic.w	r3, r3, #16
 801b10a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	461a      	mov	r2, r3
 801b114:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801b118:	647b      	str	r3, [r7, #68]	@ 0x44
 801b11a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b11c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801b11e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b120:	e841 2300 	strex	r3, r2, [r1]
 801b124:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801b126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d1e4      	bne.n	801b0f6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	681b      	ldr	r3, [r3, #0]
 801b130:	69db      	ldr	r3, [r3, #28]
 801b132:	f003 0310 	and.w	r3, r3, #16
 801b136:	2b10      	cmp	r3, #16
 801b138:	d103      	bne.n	801b142 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	2210      	movs	r2, #16
 801b140:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801b148:	4619      	mov	r1, r3
 801b14a:	6878      	ldr	r0, [r7, #4]
 801b14c:	f7fd ffb4 	bl	80190b8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801b150:	e00e      	b.n	801b170 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801b152:	6878      	ldr	r0, [r7, #4]
 801b154:	f7eb f9b2 	bl	80064bc <HAL_UART_RxCpltCallback>
        break;
 801b158:	e00a      	b.n	801b170 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801b15a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d006      	beq.n	801b170 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801b162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b166:	f003 0320 	and.w	r3, r3, #32
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	f47f aecc 	bne.w	801af08 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b176:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801b17a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d049      	beq.n	801b216 <UART_RxISR_16BIT_FIFOEN+0x356>
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801b188:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801b18c:	429a      	cmp	r2, r3
 801b18e:	d242      	bcs.n	801b216 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	3308      	adds	r3, #8
 801b196:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b19a:	e853 3f00 	ldrex	r3, [r3]
 801b19e:	623b      	str	r3, [r7, #32]
   return(result);
 801b1a0:	6a3b      	ldr	r3, [r7, #32]
 801b1a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801b1a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	3308      	adds	r3, #8
 801b1b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801b1b4:	633a      	str	r2, [r7, #48]	@ 0x30
 801b1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b1b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b1ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b1bc:	e841 2300 	strex	r3, r2, [r1]
 801b1c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801b1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d1e3      	bne.n	801b190 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	4a17      	ldr	r2, [pc, #92]	@ (801b228 <UART_RxISR_16BIT_FIFOEN+0x368>)
 801b1cc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b1d4:	693b      	ldr	r3, [r7, #16]
 801b1d6:	e853 3f00 	ldrex	r3, [r3]
 801b1da:	60fb      	str	r3, [r7, #12]
   return(result);
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	f043 0320 	orr.w	r3, r3, #32
 801b1e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	461a      	mov	r2, r3
 801b1ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801b1f0:	61fb      	str	r3, [r7, #28]
 801b1f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b1f4:	69b9      	ldr	r1, [r7, #24]
 801b1f6:	69fa      	ldr	r2, [r7, #28]
 801b1f8:	e841 2300 	strex	r3, r2, [r1]
 801b1fc:	617b      	str	r3, [r7, #20]
   return(result);
 801b1fe:	697b      	ldr	r3, [r7, #20]
 801b200:	2b00      	cmp	r3, #0
 801b202:	d1e4      	bne.n	801b1ce <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b204:	e007      	b.n	801b216 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	699a      	ldr	r2, [r3, #24]
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	f042 0208 	orr.w	r2, r2, #8
 801b214:	619a      	str	r2, [r3, #24]
}
 801b216:	bf00      	nop
 801b218:	37b8      	adds	r7, #184	@ 0xb8
 801b21a:	46bd      	mov	sp, r7
 801b21c:	bd80      	pop	{r7, pc}
 801b21e:	bf00      	nop
 801b220:	effffffe 	.word	0xeffffffe
 801b224:	58000c00 	.word	0x58000c00
 801b228:	0801a9a5 	.word	0x0801a9a5

0801b22c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801b22c:	b480      	push	{r7}
 801b22e:	b083      	sub	sp, #12
 801b230:	af00      	add	r7, sp, #0
 801b232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801b234:	bf00      	nop
 801b236:	370c      	adds	r7, #12
 801b238:	46bd      	mov	sp, r7
 801b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b23e:	4770      	bx	lr

0801b240 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801b240:	b480      	push	{r7}
 801b242:	b083      	sub	sp, #12
 801b244:	af00      	add	r7, sp, #0
 801b246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801b248:	bf00      	nop
 801b24a:	370c      	adds	r7, #12
 801b24c:	46bd      	mov	sp, r7
 801b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b252:	4770      	bx	lr

0801b254 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801b254:	b480      	push	{r7}
 801b256:	b083      	sub	sp, #12
 801b258:	af00      	add	r7, sp, #0
 801b25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801b25c:	bf00      	nop
 801b25e:	370c      	adds	r7, #12
 801b260:	46bd      	mov	sp, r7
 801b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b266:	4770      	bx	lr

0801b268 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801b268:	b480      	push	{r7}
 801b26a:	b085      	sub	sp, #20
 801b26c:	af00      	add	r7, sp, #0
 801b26e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801b276:	2b01      	cmp	r3, #1
 801b278:	d101      	bne.n	801b27e <HAL_UARTEx_DisableFifoMode+0x16>
 801b27a:	2302      	movs	r3, #2
 801b27c:	e027      	b.n	801b2ce <HAL_UARTEx_DisableFifoMode+0x66>
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	2201      	movs	r2, #1
 801b282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	2224      	movs	r2, #36	@ 0x24
 801b28a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	681a      	ldr	r2, [r3, #0]
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	f022 0201 	bic.w	r2, r2, #1
 801b2a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801b2ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	2200      	movs	r2, #0
 801b2b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	68fa      	ldr	r2, [r7, #12]
 801b2ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	2220      	movs	r2, #32
 801b2c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	2200      	movs	r2, #0
 801b2c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801b2cc:	2300      	movs	r3, #0
}
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	3714      	adds	r7, #20
 801b2d2:	46bd      	mov	sp, r7
 801b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d8:	4770      	bx	lr

0801b2da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801b2da:	b580      	push	{r7, lr}
 801b2dc:	b084      	sub	sp, #16
 801b2de:	af00      	add	r7, sp, #0
 801b2e0:	6078      	str	r0, [r7, #4]
 801b2e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801b2ea:	2b01      	cmp	r3, #1
 801b2ec:	d101      	bne.n	801b2f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801b2ee:	2302      	movs	r3, #2
 801b2f0:	e02d      	b.n	801b34e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	2201      	movs	r2, #1
 801b2f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	2224      	movs	r2, #36	@ 0x24
 801b2fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	681a      	ldr	r2, [r3, #0]
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	f022 0201 	bic.w	r2, r2, #1
 801b318:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	689b      	ldr	r3, [r3, #8]
 801b320:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	683a      	ldr	r2, [r7, #0]
 801b32a:	430a      	orrs	r2, r1
 801b32c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801b32e:	6878      	ldr	r0, [r7, #4]
 801b330:	f000 f850 	bl	801b3d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	68fa      	ldr	r2, [r7, #12]
 801b33a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	2220      	movs	r2, #32
 801b340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	2200      	movs	r2, #0
 801b348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801b34c:	2300      	movs	r3, #0
}
 801b34e:	4618      	mov	r0, r3
 801b350:	3710      	adds	r7, #16
 801b352:	46bd      	mov	sp, r7
 801b354:	bd80      	pop	{r7, pc}

0801b356 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801b356:	b580      	push	{r7, lr}
 801b358:	b084      	sub	sp, #16
 801b35a:	af00      	add	r7, sp, #0
 801b35c:	6078      	str	r0, [r7, #4]
 801b35e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801b366:	2b01      	cmp	r3, #1
 801b368:	d101      	bne.n	801b36e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801b36a:	2302      	movs	r3, #2
 801b36c:	e02d      	b.n	801b3ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	2201      	movs	r2, #1
 801b372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	2224      	movs	r2, #36	@ 0x24
 801b37a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	681a      	ldr	r2, [r3, #0]
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	f022 0201 	bic.w	r2, r2, #1
 801b394:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	689b      	ldr	r3, [r3, #8]
 801b39c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	683a      	ldr	r2, [r7, #0]
 801b3a6:	430a      	orrs	r2, r1
 801b3a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801b3aa:	6878      	ldr	r0, [r7, #4]
 801b3ac:	f000 f812 	bl	801b3d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	68fa      	ldr	r2, [r7, #12]
 801b3b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	2220      	movs	r2, #32
 801b3bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	2200      	movs	r2, #0
 801b3c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801b3c8:	2300      	movs	r3, #0
}
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	3710      	adds	r7, #16
 801b3ce:	46bd      	mov	sp, r7
 801b3d0:	bd80      	pop	{r7, pc}
	...

0801b3d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801b3d4:	b480      	push	{r7}
 801b3d6:	b085      	sub	sp, #20
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d108      	bne.n	801b3f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	2201      	movs	r2, #1
 801b3e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	2201      	movs	r2, #1
 801b3f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801b3f4:	e031      	b.n	801b45a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801b3f6:	2310      	movs	r3, #16
 801b3f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801b3fa:	2310      	movs	r3, #16
 801b3fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	689b      	ldr	r3, [r3, #8]
 801b404:	0e5b      	lsrs	r3, r3, #25
 801b406:	b2db      	uxtb	r3, r3
 801b408:	f003 0307 	and.w	r3, r3, #7
 801b40c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	689b      	ldr	r3, [r3, #8]
 801b414:	0f5b      	lsrs	r3, r3, #29
 801b416:	b2db      	uxtb	r3, r3
 801b418:	f003 0307 	and.w	r3, r3, #7
 801b41c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801b41e:	7bbb      	ldrb	r3, [r7, #14]
 801b420:	7b3a      	ldrb	r2, [r7, #12]
 801b422:	4911      	ldr	r1, [pc, #68]	@ (801b468 <UARTEx_SetNbDataToProcess+0x94>)
 801b424:	5c8a      	ldrb	r2, [r1, r2]
 801b426:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801b42a:	7b3a      	ldrb	r2, [r7, #12]
 801b42c:	490f      	ldr	r1, [pc, #60]	@ (801b46c <UARTEx_SetNbDataToProcess+0x98>)
 801b42e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801b430:	fb93 f3f2 	sdiv	r3, r3, r2
 801b434:	b29a      	uxth	r2, r3
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801b43c:	7bfb      	ldrb	r3, [r7, #15]
 801b43e:	7b7a      	ldrb	r2, [r7, #13]
 801b440:	4909      	ldr	r1, [pc, #36]	@ (801b468 <UARTEx_SetNbDataToProcess+0x94>)
 801b442:	5c8a      	ldrb	r2, [r1, r2]
 801b444:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801b448:	7b7a      	ldrb	r2, [r7, #13]
 801b44a:	4908      	ldr	r1, [pc, #32]	@ (801b46c <UARTEx_SetNbDataToProcess+0x98>)
 801b44c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801b44e:	fb93 f3f2 	sdiv	r3, r3, r2
 801b452:	b29a      	uxth	r2, r3
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801b45a:	bf00      	nop
 801b45c:	3714      	adds	r7, #20
 801b45e:	46bd      	mov	sp, r7
 801b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b464:	4770      	bx	lr
 801b466:	bf00      	nop
 801b468:	0801f2cc 	.word	0x0801f2cc
 801b46c:	0801f2d4 	.word	0x0801f2d4

0801b470 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801b470:	b580      	push	{r7, lr}
 801b472:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801b474:	4904      	ldr	r1, [pc, #16]	@ (801b488 <MX_FATFS_Init+0x18>)
 801b476:	4805      	ldr	r0, [pc, #20]	@ (801b48c <MX_FATFS_Init+0x1c>)
 801b478:	f003 f8d8 	bl	801e62c <FATFS_LinkDriver>
 801b47c:	4603      	mov	r3, r0
 801b47e:	461a      	mov	r2, r3
 801b480:	4b03      	ldr	r3, [pc, #12]	@ (801b490 <MX_FATFS_Init+0x20>)
 801b482:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801b484:	bf00      	nop
 801b486:	bd80      	pop	{r7, pc}
 801b488:	2400054c 	.word	0x2400054c
 801b48c:	24000014 	.word	0x24000014
 801b490:	24000548 	.word	0x24000548

0801b494 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801b494:	b480      	push	{r7}
 801b496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801b498:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801b49a:	4618      	mov	r0, r3
 801b49c:	46bd      	mov	sp, r7
 801b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4a2:	4770      	bx	lr

0801b4a4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801b4a4:	b580      	push	{r7, lr}
 801b4a6:	b082      	sub	sp, #8
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	4603      	mov	r3, r0
 801b4ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801b4ae:	79fb      	ldrb	r3, [r7, #7]
 801b4b0:	4618      	mov	r0, r3
 801b4b2:	f7e9 f907 	bl	80046c4 <SD_disk_initialize>
 801b4b6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801b4b8:	4618      	mov	r0, r3
 801b4ba:	3708      	adds	r7, #8
 801b4bc:	46bd      	mov	sp, r7
 801b4be:	bd80      	pop	{r7, pc}

0801b4c0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801b4c0:	b580      	push	{r7, lr}
 801b4c2:	b082      	sub	sp, #8
 801b4c4:	af00      	add	r7, sp, #0
 801b4c6:	4603      	mov	r3, r0
 801b4c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801b4ca:	79fb      	ldrb	r3, [r7, #7]
 801b4cc:	4618      	mov	r0, r3
 801b4ce:	f7e9 f9e5 	bl	800489c <SD_disk_status>
 801b4d2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801b4d4:	4618      	mov	r0, r3
 801b4d6:	3708      	adds	r7, #8
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	bd80      	pop	{r7, pc}

0801b4dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801b4dc:	b580      	push	{r7, lr}
 801b4de:	b084      	sub	sp, #16
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	60b9      	str	r1, [r7, #8]
 801b4e4:	607a      	str	r2, [r7, #4]
 801b4e6:	603b      	str	r3, [r7, #0]
 801b4e8:	4603      	mov	r3, r0
 801b4ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801b4ec:	7bf8      	ldrb	r0, [r7, #15]
 801b4ee:	683b      	ldr	r3, [r7, #0]
 801b4f0:	687a      	ldr	r2, [r7, #4]
 801b4f2:	68b9      	ldr	r1, [r7, #8]
 801b4f4:	f7e9 f9e8 	bl	80048c8 <SD_disk_read>
 801b4f8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801b4fa:	4618      	mov	r0, r3
 801b4fc:	3710      	adds	r7, #16
 801b4fe:	46bd      	mov	sp, r7
 801b500:	bd80      	pop	{r7, pc}

0801b502 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801b502:	b580      	push	{r7, lr}
 801b504:	b084      	sub	sp, #16
 801b506:	af00      	add	r7, sp, #0
 801b508:	60b9      	str	r1, [r7, #8]
 801b50a:	607a      	str	r2, [r7, #4]
 801b50c:	603b      	str	r3, [r7, #0]
 801b50e:	4603      	mov	r3, r0
 801b510:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801b512:	7bf8      	ldrb	r0, [r7, #15]
 801b514:	683b      	ldr	r3, [r7, #0]
 801b516:	687a      	ldr	r2, [r7, #4]
 801b518:	68b9      	ldr	r1, [r7, #8]
 801b51a:	f7e9 fa3f 	bl	800499c <SD_disk_write>
 801b51e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801b520:	4618      	mov	r0, r3
 801b522:	3710      	adds	r7, #16
 801b524:	46bd      	mov	sp, r7
 801b526:	bd80      	pop	{r7, pc}

0801b528 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801b528:	b580      	push	{r7, lr}
 801b52a:	b082      	sub	sp, #8
 801b52c:	af00      	add	r7, sp, #0
 801b52e:	4603      	mov	r3, r0
 801b530:	603a      	str	r2, [r7, #0]
 801b532:	71fb      	strb	r3, [r7, #7]
 801b534:	460b      	mov	r3, r1
 801b536:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801b538:	79b9      	ldrb	r1, [r7, #6]
 801b53a:	79fb      	ldrb	r3, [r7, #7]
 801b53c:	683a      	ldr	r2, [r7, #0]
 801b53e:	4618      	mov	r0, r3
 801b540:	f7e9 fab0 	bl	8004aa4 <SD_disk_ioctl>
 801b544:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801b546:	4618      	mov	r0, r3
 801b548:	3708      	adds	r7, #8
 801b54a:	46bd      	mov	sp, r7
 801b54c:	bd80      	pop	{r7, pc}
	...

0801b550 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801b550:	b580      	push	{r7, lr}
 801b552:	b084      	sub	sp, #16
 801b554:	af00      	add	r7, sp, #0
 801b556:	4603      	mov	r3, r0
 801b558:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801b55a:	79fb      	ldrb	r3, [r7, #7]
 801b55c:	4a08      	ldr	r2, [pc, #32]	@ (801b580 <disk_status+0x30>)
 801b55e:	009b      	lsls	r3, r3, #2
 801b560:	4413      	add	r3, r2
 801b562:	685b      	ldr	r3, [r3, #4]
 801b564:	685b      	ldr	r3, [r3, #4]
 801b566:	79fa      	ldrb	r2, [r7, #7]
 801b568:	4905      	ldr	r1, [pc, #20]	@ (801b580 <disk_status+0x30>)
 801b56a:	440a      	add	r2, r1
 801b56c:	7a12      	ldrb	r2, [r2, #8]
 801b56e:	4610      	mov	r0, r2
 801b570:	4798      	blx	r3
 801b572:	4603      	mov	r3, r0
 801b574:	73fb      	strb	r3, [r7, #15]
  return stat;
 801b576:	7bfb      	ldrb	r3, [r7, #15]
}
 801b578:	4618      	mov	r0, r3
 801b57a:	3710      	adds	r7, #16
 801b57c:	46bd      	mov	sp, r7
 801b57e:	bd80      	pop	{r7, pc}
 801b580:	24000768 	.word	0x24000768

0801b584 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801b584:	b580      	push	{r7, lr}
 801b586:	b084      	sub	sp, #16
 801b588:	af00      	add	r7, sp, #0
 801b58a:	4603      	mov	r3, r0
 801b58c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801b58e:	2300      	movs	r3, #0
 801b590:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801b592:	79fb      	ldrb	r3, [r7, #7]
 801b594:	4a0e      	ldr	r2, [pc, #56]	@ (801b5d0 <disk_initialize+0x4c>)
 801b596:	5cd3      	ldrb	r3, [r2, r3]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d114      	bne.n	801b5c6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801b59c:	79fb      	ldrb	r3, [r7, #7]
 801b59e:	4a0c      	ldr	r2, [pc, #48]	@ (801b5d0 <disk_initialize+0x4c>)
 801b5a0:	009b      	lsls	r3, r3, #2
 801b5a2:	4413      	add	r3, r2
 801b5a4:	685b      	ldr	r3, [r3, #4]
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	79fa      	ldrb	r2, [r7, #7]
 801b5aa:	4909      	ldr	r1, [pc, #36]	@ (801b5d0 <disk_initialize+0x4c>)
 801b5ac:	440a      	add	r2, r1
 801b5ae:	7a12      	ldrb	r2, [r2, #8]
 801b5b0:	4610      	mov	r0, r2
 801b5b2:	4798      	blx	r3
 801b5b4:	4603      	mov	r3, r0
 801b5b6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801b5b8:	7bfb      	ldrb	r3, [r7, #15]
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d103      	bne.n	801b5c6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801b5be:	79fb      	ldrb	r3, [r7, #7]
 801b5c0:	4a03      	ldr	r2, [pc, #12]	@ (801b5d0 <disk_initialize+0x4c>)
 801b5c2:	2101      	movs	r1, #1
 801b5c4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801b5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 801b5c8:	4618      	mov	r0, r3
 801b5ca:	3710      	adds	r7, #16
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	bd80      	pop	{r7, pc}
 801b5d0:	24000768 	.word	0x24000768

0801b5d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801b5d4:	b590      	push	{r4, r7, lr}
 801b5d6:	b087      	sub	sp, #28
 801b5d8:	af00      	add	r7, sp, #0
 801b5da:	60b9      	str	r1, [r7, #8]
 801b5dc:	607a      	str	r2, [r7, #4]
 801b5de:	603b      	str	r3, [r7, #0]
 801b5e0:	4603      	mov	r3, r0
 801b5e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801b5e4:	7bfb      	ldrb	r3, [r7, #15]
 801b5e6:	4a0a      	ldr	r2, [pc, #40]	@ (801b610 <disk_read+0x3c>)
 801b5e8:	009b      	lsls	r3, r3, #2
 801b5ea:	4413      	add	r3, r2
 801b5ec:	685b      	ldr	r3, [r3, #4]
 801b5ee:	689c      	ldr	r4, [r3, #8]
 801b5f0:	7bfb      	ldrb	r3, [r7, #15]
 801b5f2:	4a07      	ldr	r2, [pc, #28]	@ (801b610 <disk_read+0x3c>)
 801b5f4:	4413      	add	r3, r2
 801b5f6:	7a18      	ldrb	r0, [r3, #8]
 801b5f8:	683b      	ldr	r3, [r7, #0]
 801b5fa:	687a      	ldr	r2, [r7, #4]
 801b5fc:	68b9      	ldr	r1, [r7, #8]
 801b5fe:	47a0      	blx	r4
 801b600:	4603      	mov	r3, r0
 801b602:	75fb      	strb	r3, [r7, #23]
  return res;
 801b604:	7dfb      	ldrb	r3, [r7, #23]
}
 801b606:	4618      	mov	r0, r3
 801b608:	371c      	adds	r7, #28
 801b60a:	46bd      	mov	sp, r7
 801b60c:	bd90      	pop	{r4, r7, pc}
 801b60e:	bf00      	nop
 801b610:	24000768 	.word	0x24000768

0801b614 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801b614:	b590      	push	{r4, r7, lr}
 801b616:	b087      	sub	sp, #28
 801b618:	af00      	add	r7, sp, #0
 801b61a:	60b9      	str	r1, [r7, #8]
 801b61c:	607a      	str	r2, [r7, #4]
 801b61e:	603b      	str	r3, [r7, #0]
 801b620:	4603      	mov	r3, r0
 801b622:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801b624:	7bfb      	ldrb	r3, [r7, #15]
 801b626:	4a0a      	ldr	r2, [pc, #40]	@ (801b650 <disk_write+0x3c>)
 801b628:	009b      	lsls	r3, r3, #2
 801b62a:	4413      	add	r3, r2
 801b62c:	685b      	ldr	r3, [r3, #4]
 801b62e:	68dc      	ldr	r4, [r3, #12]
 801b630:	7bfb      	ldrb	r3, [r7, #15]
 801b632:	4a07      	ldr	r2, [pc, #28]	@ (801b650 <disk_write+0x3c>)
 801b634:	4413      	add	r3, r2
 801b636:	7a18      	ldrb	r0, [r3, #8]
 801b638:	683b      	ldr	r3, [r7, #0]
 801b63a:	687a      	ldr	r2, [r7, #4]
 801b63c:	68b9      	ldr	r1, [r7, #8]
 801b63e:	47a0      	blx	r4
 801b640:	4603      	mov	r3, r0
 801b642:	75fb      	strb	r3, [r7, #23]
  return res;
 801b644:	7dfb      	ldrb	r3, [r7, #23]
}
 801b646:	4618      	mov	r0, r3
 801b648:	371c      	adds	r7, #28
 801b64a:	46bd      	mov	sp, r7
 801b64c:	bd90      	pop	{r4, r7, pc}
 801b64e:	bf00      	nop
 801b650:	24000768 	.word	0x24000768

0801b654 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801b654:	b580      	push	{r7, lr}
 801b656:	b084      	sub	sp, #16
 801b658:	af00      	add	r7, sp, #0
 801b65a:	4603      	mov	r3, r0
 801b65c:	603a      	str	r2, [r7, #0]
 801b65e:	71fb      	strb	r3, [r7, #7]
 801b660:	460b      	mov	r3, r1
 801b662:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801b664:	79fb      	ldrb	r3, [r7, #7]
 801b666:	4a09      	ldr	r2, [pc, #36]	@ (801b68c <disk_ioctl+0x38>)
 801b668:	009b      	lsls	r3, r3, #2
 801b66a:	4413      	add	r3, r2
 801b66c:	685b      	ldr	r3, [r3, #4]
 801b66e:	691b      	ldr	r3, [r3, #16]
 801b670:	79fa      	ldrb	r2, [r7, #7]
 801b672:	4906      	ldr	r1, [pc, #24]	@ (801b68c <disk_ioctl+0x38>)
 801b674:	440a      	add	r2, r1
 801b676:	7a10      	ldrb	r0, [r2, #8]
 801b678:	79b9      	ldrb	r1, [r7, #6]
 801b67a:	683a      	ldr	r2, [r7, #0]
 801b67c:	4798      	blx	r3
 801b67e:	4603      	mov	r3, r0
 801b680:	73fb      	strb	r3, [r7, #15]
  return res;
 801b682:	7bfb      	ldrb	r3, [r7, #15]
}
 801b684:	4618      	mov	r0, r3
 801b686:	3710      	adds	r7, #16
 801b688:	46bd      	mov	sp, r7
 801b68a:	bd80      	pop	{r7, pc}
 801b68c:	24000768 	.word	0x24000768

0801b690 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801b690:	b480      	push	{r7}
 801b692:	b085      	sub	sp, #20
 801b694:	af00      	add	r7, sp, #0
 801b696:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	3301      	adds	r3, #1
 801b69c:	781b      	ldrb	r3, [r3, #0]
 801b69e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801b6a0:	89fb      	ldrh	r3, [r7, #14]
 801b6a2:	021b      	lsls	r3, r3, #8
 801b6a4:	b21a      	sxth	r2, r3
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	781b      	ldrb	r3, [r3, #0]
 801b6aa:	b21b      	sxth	r3, r3
 801b6ac:	4313      	orrs	r3, r2
 801b6ae:	b21b      	sxth	r3, r3
 801b6b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 801b6b2:	89fb      	ldrh	r3, [r7, #14]
}
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	3714      	adds	r7, #20
 801b6b8:	46bd      	mov	sp, r7
 801b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6be:	4770      	bx	lr

0801b6c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801b6c0:	b480      	push	{r7}
 801b6c2:	b085      	sub	sp, #20
 801b6c4:	af00      	add	r7, sp, #0
 801b6c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	3303      	adds	r3, #3
 801b6cc:	781b      	ldrb	r3, [r3, #0]
 801b6ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	021b      	lsls	r3, r3, #8
 801b6d4:	687a      	ldr	r2, [r7, #4]
 801b6d6:	3202      	adds	r2, #2
 801b6d8:	7812      	ldrb	r2, [r2, #0]
 801b6da:	4313      	orrs	r3, r2
 801b6dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801b6de:	68fb      	ldr	r3, [r7, #12]
 801b6e0:	021b      	lsls	r3, r3, #8
 801b6e2:	687a      	ldr	r2, [r7, #4]
 801b6e4:	3201      	adds	r2, #1
 801b6e6:	7812      	ldrb	r2, [r2, #0]
 801b6e8:	4313      	orrs	r3, r2
 801b6ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801b6ec:	68fb      	ldr	r3, [r7, #12]
 801b6ee:	021b      	lsls	r3, r3, #8
 801b6f0:	687a      	ldr	r2, [r7, #4]
 801b6f2:	7812      	ldrb	r2, [r2, #0]
 801b6f4:	4313      	orrs	r3, r2
 801b6f6:	60fb      	str	r3, [r7, #12]
	return rv;
 801b6f8:	68fb      	ldr	r3, [r7, #12]
}
 801b6fa:	4618      	mov	r0, r3
 801b6fc:	3714      	adds	r7, #20
 801b6fe:	46bd      	mov	sp, r7
 801b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b704:	4770      	bx	lr

0801b706 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801b706:	b480      	push	{r7}
 801b708:	b083      	sub	sp, #12
 801b70a:	af00      	add	r7, sp, #0
 801b70c:	6078      	str	r0, [r7, #4]
 801b70e:	460b      	mov	r3, r1
 801b710:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	1c5a      	adds	r2, r3, #1
 801b716:	607a      	str	r2, [r7, #4]
 801b718:	887a      	ldrh	r2, [r7, #2]
 801b71a:	b2d2      	uxtb	r2, r2
 801b71c:	701a      	strb	r2, [r3, #0]
 801b71e:	887b      	ldrh	r3, [r7, #2]
 801b720:	0a1b      	lsrs	r3, r3, #8
 801b722:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	1c5a      	adds	r2, r3, #1
 801b728:	607a      	str	r2, [r7, #4]
 801b72a:	887a      	ldrh	r2, [r7, #2]
 801b72c:	b2d2      	uxtb	r2, r2
 801b72e:	701a      	strb	r2, [r3, #0]
}
 801b730:	bf00      	nop
 801b732:	370c      	adds	r7, #12
 801b734:	46bd      	mov	sp, r7
 801b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b73a:	4770      	bx	lr

0801b73c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801b73c:	b480      	push	{r7}
 801b73e:	b083      	sub	sp, #12
 801b740:	af00      	add	r7, sp, #0
 801b742:	6078      	str	r0, [r7, #4]
 801b744:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	1c5a      	adds	r2, r3, #1
 801b74a:	607a      	str	r2, [r7, #4]
 801b74c:	683a      	ldr	r2, [r7, #0]
 801b74e:	b2d2      	uxtb	r2, r2
 801b750:	701a      	strb	r2, [r3, #0]
 801b752:	683b      	ldr	r3, [r7, #0]
 801b754:	0a1b      	lsrs	r3, r3, #8
 801b756:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	1c5a      	adds	r2, r3, #1
 801b75c:	607a      	str	r2, [r7, #4]
 801b75e:	683a      	ldr	r2, [r7, #0]
 801b760:	b2d2      	uxtb	r2, r2
 801b762:	701a      	strb	r2, [r3, #0]
 801b764:	683b      	ldr	r3, [r7, #0]
 801b766:	0a1b      	lsrs	r3, r3, #8
 801b768:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	1c5a      	adds	r2, r3, #1
 801b76e:	607a      	str	r2, [r7, #4]
 801b770:	683a      	ldr	r2, [r7, #0]
 801b772:	b2d2      	uxtb	r2, r2
 801b774:	701a      	strb	r2, [r3, #0]
 801b776:	683b      	ldr	r3, [r7, #0]
 801b778:	0a1b      	lsrs	r3, r3, #8
 801b77a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801b77c:	687b      	ldr	r3, [r7, #4]
 801b77e:	1c5a      	adds	r2, r3, #1
 801b780:	607a      	str	r2, [r7, #4]
 801b782:	683a      	ldr	r2, [r7, #0]
 801b784:	b2d2      	uxtb	r2, r2
 801b786:	701a      	strb	r2, [r3, #0]
}
 801b788:	bf00      	nop
 801b78a:	370c      	adds	r7, #12
 801b78c:	46bd      	mov	sp, r7
 801b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b792:	4770      	bx	lr

0801b794 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801b794:	b480      	push	{r7}
 801b796:	b087      	sub	sp, #28
 801b798:	af00      	add	r7, sp, #0
 801b79a:	60f8      	str	r0, [r7, #12]
 801b79c:	60b9      	str	r1, [r7, #8]
 801b79e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b7a0:	68fb      	ldr	r3, [r7, #12]
 801b7a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801b7a4:	68bb      	ldr	r3, [r7, #8]
 801b7a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d00d      	beq.n	801b7ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801b7ae:	693a      	ldr	r2, [r7, #16]
 801b7b0:	1c53      	adds	r3, r2, #1
 801b7b2:	613b      	str	r3, [r7, #16]
 801b7b4:	697b      	ldr	r3, [r7, #20]
 801b7b6:	1c59      	adds	r1, r3, #1
 801b7b8:	6179      	str	r1, [r7, #20]
 801b7ba:	7812      	ldrb	r2, [r2, #0]
 801b7bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	3b01      	subs	r3, #1
 801b7c2:	607b      	str	r3, [r7, #4]
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d1f1      	bne.n	801b7ae <mem_cpy+0x1a>
	}
}
 801b7ca:	bf00      	nop
 801b7cc:	371c      	adds	r7, #28
 801b7ce:	46bd      	mov	sp, r7
 801b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7d4:	4770      	bx	lr

0801b7d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801b7d6:	b480      	push	{r7}
 801b7d8:	b087      	sub	sp, #28
 801b7da:	af00      	add	r7, sp, #0
 801b7dc:	60f8      	str	r0, [r7, #12]
 801b7de:	60b9      	str	r1, [r7, #8]
 801b7e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b7e2:	68fb      	ldr	r3, [r7, #12]
 801b7e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801b7e6:	697b      	ldr	r3, [r7, #20]
 801b7e8:	1c5a      	adds	r2, r3, #1
 801b7ea:	617a      	str	r2, [r7, #20]
 801b7ec:	68ba      	ldr	r2, [r7, #8]
 801b7ee:	b2d2      	uxtb	r2, r2
 801b7f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	3b01      	subs	r3, #1
 801b7f6:	607b      	str	r3, [r7, #4]
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d1f3      	bne.n	801b7e6 <mem_set+0x10>
}
 801b7fe:	bf00      	nop
 801b800:	bf00      	nop
 801b802:	371c      	adds	r7, #28
 801b804:	46bd      	mov	sp, r7
 801b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b80a:	4770      	bx	lr

0801b80c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801b80c:	b480      	push	{r7}
 801b80e:	b089      	sub	sp, #36	@ 0x24
 801b810:	af00      	add	r7, sp, #0
 801b812:	60f8      	str	r0, [r7, #12]
 801b814:	60b9      	str	r1, [r7, #8]
 801b816:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	61fb      	str	r3, [r7, #28]
 801b81c:	68bb      	ldr	r3, [r7, #8]
 801b81e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801b820:	2300      	movs	r3, #0
 801b822:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801b824:	69fb      	ldr	r3, [r7, #28]
 801b826:	1c5a      	adds	r2, r3, #1
 801b828:	61fa      	str	r2, [r7, #28]
 801b82a:	781b      	ldrb	r3, [r3, #0]
 801b82c:	4619      	mov	r1, r3
 801b82e:	69bb      	ldr	r3, [r7, #24]
 801b830:	1c5a      	adds	r2, r3, #1
 801b832:	61ba      	str	r2, [r7, #24]
 801b834:	781b      	ldrb	r3, [r3, #0]
 801b836:	1acb      	subs	r3, r1, r3
 801b838:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	3b01      	subs	r3, #1
 801b83e:	607b      	str	r3, [r7, #4]
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	2b00      	cmp	r3, #0
 801b844:	d002      	beq.n	801b84c <mem_cmp+0x40>
 801b846:	697b      	ldr	r3, [r7, #20]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d0eb      	beq.n	801b824 <mem_cmp+0x18>

	return r;
 801b84c:	697b      	ldr	r3, [r7, #20]
}
 801b84e:	4618      	mov	r0, r3
 801b850:	3724      	adds	r7, #36	@ 0x24
 801b852:	46bd      	mov	sp, r7
 801b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b858:	4770      	bx	lr

0801b85a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801b85a:	b480      	push	{r7}
 801b85c:	b083      	sub	sp, #12
 801b85e:	af00      	add	r7, sp, #0
 801b860:	6078      	str	r0, [r7, #4]
 801b862:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801b864:	e002      	b.n	801b86c <chk_chr+0x12>
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	3301      	adds	r3, #1
 801b86a:	607b      	str	r3, [r7, #4]
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	781b      	ldrb	r3, [r3, #0]
 801b870:	2b00      	cmp	r3, #0
 801b872:	d005      	beq.n	801b880 <chk_chr+0x26>
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	781b      	ldrb	r3, [r3, #0]
 801b878:	461a      	mov	r2, r3
 801b87a:	683b      	ldr	r3, [r7, #0]
 801b87c:	4293      	cmp	r3, r2
 801b87e:	d1f2      	bne.n	801b866 <chk_chr+0xc>
	return *str;
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	781b      	ldrb	r3, [r3, #0]
}
 801b884:	4618      	mov	r0, r3
 801b886:	370c      	adds	r7, #12
 801b888:	46bd      	mov	sp, r7
 801b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b88e:	4770      	bx	lr

0801b890 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b890:	b480      	push	{r7}
 801b892:	b085      	sub	sp, #20
 801b894:	af00      	add	r7, sp, #0
 801b896:	6078      	str	r0, [r7, #4]
 801b898:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b89a:	2300      	movs	r3, #0
 801b89c:	60bb      	str	r3, [r7, #8]
 801b89e:	68bb      	ldr	r3, [r7, #8]
 801b8a0:	60fb      	str	r3, [r7, #12]
 801b8a2:	e029      	b.n	801b8f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801b8a4:	4a27      	ldr	r2, [pc, #156]	@ (801b944 <chk_lock+0xb4>)
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	011b      	lsls	r3, r3, #4
 801b8aa:	4413      	add	r3, r2
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d01d      	beq.n	801b8ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b8b2:	4a24      	ldr	r2, [pc, #144]	@ (801b944 <chk_lock+0xb4>)
 801b8b4:	68fb      	ldr	r3, [r7, #12]
 801b8b6:	011b      	lsls	r3, r3, #4
 801b8b8:	4413      	add	r3, r2
 801b8ba:	681a      	ldr	r2, [r3, #0]
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	429a      	cmp	r2, r3
 801b8c2:	d116      	bne.n	801b8f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801b8c4:	4a1f      	ldr	r2, [pc, #124]	@ (801b944 <chk_lock+0xb4>)
 801b8c6:	68fb      	ldr	r3, [r7, #12]
 801b8c8:	011b      	lsls	r3, r3, #4
 801b8ca:	4413      	add	r3, r2
 801b8cc:	3304      	adds	r3, #4
 801b8ce:	681a      	ldr	r2, [r3, #0]
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b8d4:	429a      	cmp	r2, r3
 801b8d6:	d10c      	bne.n	801b8f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b8d8:	4a1a      	ldr	r2, [pc, #104]	@ (801b944 <chk_lock+0xb4>)
 801b8da:	68fb      	ldr	r3, [r7, #12]
 801b8dc:	011b      	lsls	r3, r3, #4
 801b8de:	4413      	add	r3, r2
 801b8e0:	3308      	adds	r3, #8
 801b8e2:	681a      	ldr	r2, [r3, #0]
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801b8e8:	429a      	cmp	r2, r3
 801b8ea:	d102      	bne.n	801b8f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b8ec:	e007      	b.n	801b8fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801b8ee:	2301      	movs	r3, #1
 801b8f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b8f2:	68fb      	ldr	r3, [r7, #12]
 801b8f4:	3301      	adds	r3, #1
 801b8f6:	60fb      	str	r3, [r7, #12]
 801b8f8:	68fb      	ldr	r3, [r7, #12]
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d0d2      	beq.n	801b8a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801b8fe:	68fb      	ldr	r3, [r7, #12]
 801b900:	2b01      	cmp	r3, #1
 801b902:	d109      	bne.n	801b918 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801b904:	68bb      	ldr	r3, [r7, #8]
 801b906:	2b00      	cmp	r3, #0
 801b908:	d102      	bne.n	801b910 <chk_lock+0x80>
 801b90a:	683b      	ldr	r3, [r7, #0]
 801b90c:	2b02      	cmp	r3, #2
 801b90e:	d101      	bne.n	801b914 <chk_lock+0x84>
 801b910:	2300      	movs	r3, #0
 801b912:	e010      	b.n	801b936 <chk_lock+0xa6>
 801b914:	2312      	movs	r3, #18
 801b916:	e00e      	b.n	801b936 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801b918:	683b      	ldr	r3, [r7, #0]
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d108      	bne.n	801b930 <chk_lock+0xa0>
 801b91e:	4a09      	ldr	r2, [pc, #36]	@ (801b944 <chk_lock+0xb4>)
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	011b      	lsls	r3, r3, #4
 801b924:	4413      	add	r3, r2
 801b926:	330c      	adds	r3, #12
 801b928:	881b      	ldrh	r3, [r3, #0]
 801b92a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b92e:	d101      	bne.n	801b934 <chk_lock+0xa4>
 801b930:	2310      	movs	r3, #16
 801b932:	e000      	b.n	801b936 <chk_lock+0xa6>
 801b934:	2300      	movs	r3, #0
}
 801b936:	4618      	mov	r0, r3
 801b938:	3714      	adds	r7, #20
 801b93a:	46bd      	mov	sp, r7
 801b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b940:	4770      	bx	lr
 801b942:	bf00      	nop
 801b944:	24000558 	.word	0x24000558

0801b948 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801b948:	b480      	push	{r7}
 801b94a:	b083      	sub	sp, #12
 801b94c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b94e:	2300      	movs	r3, #0
 801b950:	607b      	str	r3, [r7, #4]
 801b952:	e002      	b.n	801b95a <enq_lock+0x12>
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	3301      	adds	r3, #1
 801b958:	607b      	str	r3, [r7, #4]
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d106      	bne.n	801b96e <enq_lock+0x26>
 801b960:	4a09      	ldr	r2, [pc, #36]	@ (801b988 <enq_lock+0x40>)
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	011b      	lsls	r3, r3, #4
 801b966:	4413      	add	r3, r2
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d1f2      	bne.n	801b954 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	2b01      	cmp	r3, #1
 801b972:	bf14      	ite	ne
 801b974:	2301      	movne	r3, #1
 801b976:	2300      	moveq	r3, #0
 801b978:	b2db      	uxtb	r3, r3
}
 801b97a:	4618      	mov	r0, r3
 801b97c:	370c      	adds	r7, #12
 801b97e:	46bd      	mov	sp, r7
 801b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b984:	4770      	bx	lr
 801b986:	bf00      	nop
 801b988:	24000558 	.word	0x24000558

0801b98c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b98c:	b480      	push	{r7}
 801b98e:	b085      	sub	sp, #20
 801b990:	af00      	add	r7, sp, #0
 801b992:	6078      	str	r0, [r7, #4]
 801b994:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b996:	2300      	movs	r3, #0
 801b998:	60fb      	str	r3, [r7, #12]
 801b99a:	e01f      	b.n	801b9dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801b99c:	4a41      	ldr	r2, [pc, #260]	@ (801baa4 <inc_lock+0x118>)
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	011b      	lsls	r3, r3, #4
 801b9a2:	4413      	add	r3, r2
 801b9a4:	681a      	ldr	r2, [r3, #0]
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	429a      	cmp	r2, r3
 801b9ac:	d113      	bne.n	801b9d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801b9ae:	4a3d      	ldr	r2, [pc, #244]	@ (801baa4 <inc_lock+0x118>)
 801b9b0:	68fb      	ldr	r3, [r7, #12]
 801b9b2:	011b      	lsls	r3, r3, #4
 801b9b4:	4413      	add	r3, r2
 801b9b6:	3304      	adds	r3, #4
 801b9b8:	681a      	ldr	r2, [r3, #0]
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801b9be:	429a      	cmp	r2, r3
 801b9c0:	d109      	bne.n	801b9d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801b9c2:	4a38      	ldr	r2, [pc, #224]	@ (801baa4 <inc_lock+0x118>)
 801b9c4:	68fb      	ldr	r3, [r7, #12]
 801b9c6:	011b      	lsls	r3, r3, #4
 801b9c8:	4413      	add	r3, r2
 801b9ca:	3308      	adds	r3, #8
 801b9cc:	681a      	ldr	r2, [r3, #0]
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801b9d2:	429a      	cmp	r2, r3
 801b9d4:	d006      	beq.n	801b9e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b9d6:	68fb      	ldr	r3, [r7, #12]
 801b9d8:	3301      	adds	r3, #1
 801b9da:	60fb      	str	r3, [r7, #12]
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d0dc      	beq.n	801b99c <inc_lock+0x10>
 801b9e2:	e000      	b.n	801b9e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801b9e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801b9e6:	68fb      	ldr	r3, [r7, #12]
 801b9e8:	2b01      	cmp	r3, #1
 801b9ea:	d132      	bne.n	801ba52 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b9ec:	2300      	movs	r3, #0
 801b9ee:	60fb      	str	r3, [r7, #12]
 801b9f0:	e002      	b.n	801b9f8 <inc_lock+0x6c>
 801b9f2:	68fb      	ldr	r3, [r7, #12]
 801b9f4:	3301      	adds	r3, #1
 801b9f6:	60fb      	str	r3, [r7, #12]
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	d106      	bne.n	801ba0c <inc_lock+0x80>
 801b9fe:	4a29      	ldr	r2, [pc, #164]	@ (801baa4 <inc_lock+0x118>)
 801ba00:	68fb      	ldr	r3, [r7, #12]
 801ba02:	011b      	lsls	r3, r3, #4
 801ba04:	4413      	add	r3, r2
 801ba06:	681b      	ldr	r3, [r3, #0]
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d1f2      	bne.n	801b9f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801ba0c:	68fb      	ldr	r3, [r7, #12]
 801ba0e:	2b01      	cmp	r3, #1
 801ba10:	d101      	bne.n	801ba16 <inc_lock+0x8a>
 801ba12:	2300      	movs	r3, #0
 801ba14:	e040      	b.n	801ba98 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	681a      	ldr	r2, [r3, #0]
 801ba1a:	4922      	ldr	r1, [pc, #136]	@ (801baa4 <inc_lock+0x118>)
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	011b      	lsls	r3, r3, #4
 801ba20:	440b      	add	r3, r1
 801ba22:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	689a      	ldr	r2, [r3, #8]
 801ba28:	491e      	ldr	r1, [pc, #120]	@ (801baa4 <inc_lock+0x118>)
 801ba2a:	68fb      	ldr	r3, [r7, #12]
 801ba2c:	011b      	lsls	r3, r3, #4
 801ba2e:	440b      	add	r3, r1
 801ba30:	3304      	adds	r3, #4
 801ba32:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	695a      	ldr	r2, [r3, #20]
 801ba38:	491a      	ldr	r1, [pc, #104]	@ (801baa4 <inc_lock+0x118>)
 801ba3a:	68fb      	ldr	r3, [r7, #12]
 801ba3c:	011b      	lsls	r3, r3, #4
 801ba3e:	440b      	add	r3, r1
 801ba40:	3308      	adds	r3, #8
 801ba42:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801ba44:	4a17      	ldr	r2, [pc, #92]	@ (801baa4 <inc_lock+0x118>)
 801ba46:	68fb      	ldr	r3, [r7, #12]
 801ba48:	011b      	lsls	r3, r3, #4
 801ba4a:	4413      	add	r3, r2
 801ba4c:	330c      	adds	r3, #12
 801ba4e:	2200      	movs	r2, #0
 801ba50:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801ba52:	683b      	ldr	r3, [r7, #0]
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d009      	beq.n	801ba6c <inc_lock+0xe0>
 801ba58:	4a12      	ldr	r2, [pc, #72]	@ (801baa4 <inc_lock+0x118>)
 801ba5a:	68fb      	ldr	r3, [r7, #12]
 801ba5c:	011b      	lsls	r3, r3, #4
 801ba5e:	4413      	add	r3, r2
 801ba60:	330c      	adds	r3, #12
 801ba62:	881b      	ldrh	r3, [r3, #0]
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d001      	beq.n	801ba6c <inc_lock+0xe0>
 801ba68:	2300      	movs	r3, #0
 801ba6a:	e015      	b.n	801ba98 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801ba6c:	683b      	ldr	r3, [r7, #0]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d108      	bne.n	801ba84 <inc_lock+0xf8>
 801ba72:	4a0c      	ldr	r2, [pc, #48]	@ (801baa4 <inc_lock+0x118>)
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	011b      	lsls	r3, r3, #4
 801ba78:	4413      	add	r3, r2
 801ba7a:	330c      	adds	r3, #12
 801ba7c:	881b      	ldrh	r3, [r3, #0]
 801ba7e:	3301      	adds	r3, #1
 801ba80:	b29a      	uxth	r2, r3
 801ba82:	e001      	b.n	801ba88 <inc_lock+0xfc>
 801ba84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ba88:	4906      	ldr	r1, [pc, #24]	@ (801baa4 <inc_lock+0x118>)
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	011b      	lsls	r3, r3, #4
 801ba8e:	440b      	add	r3, r1
 801ba90:	330c      	adds	r3, #12
 801ba92:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	3301      	adds	r3, #1
}
 801ba98:	4618      	mov	r0, r3
 801ba9a:	3714      	adds	r7, #20
 801ba9c:	46bd      	mov	sp, r7
 801ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baa2:	4770      	bx	lr
 801baa4:	24000558 	.word	0x24000558

0801baa8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801baa8:	b480      	push	{r7}
 801baaa:	b085      	sub	sp, #20
 801baac:	af00      	add	r7, sp, #0
 801baae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	3b01      	subs	r3, #1
 801bab4:	607b      	str	r3, [r7, #4]
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d125      	bne.n	801bb08 <dec_lock+0x60>
		n = Files[i].ctr;
 801babc:	4a17      	ldr	r2, [pc, #92]	@ (801bb1c <dec_lock+0x74>)
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	011b      	lsls	r3, r3, #4
 801bac2:	4413      	add	r3, r2
 801bac4:	330c      	adds	r3, #12
 801bac6:	881b      	ldrh	r3, [r3, #0]
 801bac8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801baca:	89fb      	ldrh	r3, [r7, #14]
 801bacc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801bad0:	d101      	bne.n	801bad6 <dec_lock+0x2e>
 801bad2:	2300      	movs	r3, #0
 801bad4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801bad6:	89fb      	ldrh	r3, [r7, #14]
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d002      	beq.n	801bae2 <dec_lock+0x3a>
 801badc:	89fb      	ldrh	r3, [r7, #14]
 801bade:	3b01      	subs	r3, #1
 801bae0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801bae2:	4a0e      	ldr	r2, [pc, #56]	@ (801bb1c <dec_lock+0x74>)
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	011b      	lsls	r3, r3, #4
 801bae8:	4413      	add	r3, r2
 801baea:	330c      	adds	r3, #12
 801baec:	89fa      	ldrh	r2, [r7, #14]
 801baee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801baf0:	89fb      	ldrh	r3, [r7, #14]
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d105      	bne.n	801bb02 <dec_lock+0x5a>
 801baf6:	4a09      	ldr	r2, [pc, #36]	@ (801bb1c <dec_lock+0x74>)
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	011b      	lsls	r3, r3, #4
 801bafc:	4413      	add	r3, r2
 801bafe:	2200      	movs	r2, #0
 801bb00:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801bb02:	2300      	movs	r3, #0
 801bb04:	737b      	strb	r3, [r7, #13]
 801bb06:	e001      	b.n	801bb0c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801bb08:	2302      	movs	r3, #2
 801bb0a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801bb0c:	7b7b      	ldrb	r3, [r7, #13]
}
 801bb0e:	4618      	mov	r0, r3
 801bb10:	3714      	adds	r7, #20
 801bb12:	46bd      	mov	sp, r7
 801bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb18:	4770      	bx	lr
 801bb1a:	bf00      	nop
 801bb1c:	24000558 	.word	0x24000558

0801bb20 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801bb20:	b480      	push	{r7}
 801bb22:	b085      	sub	sp, #20
 801bb24:	af00      	add	r7, sp, #0
 801bb26:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801bb28:	2300      	movs	r3, #0
 801bb2a:	60fb      	str	r3, [r7, #12]
 801bb2c:	e010      	b.n	801bb50 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801bb2e:	4a0d      	ldr	r2, [pc, #52]	@ (801bb64 <clear_lock+0x44>)
 801bb30:	68fb      	ldr	r3, [r7, #12]
 801bb32:	011b      	lsls	r3, r3, #4
 801bb34:	4413      	add	r3, r2
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	687a      	ldr	r2, [r7, #4]
 801bb3a:	429a      	cmp	r2, r3
 801bb3c:	d105      	bne.n	801bb4a <clear_lock+0x2a>
 801bb3e:	4a09      	ldr	r2, [pc, #36]	@ (801bb64 <clear_lock+0x44>)
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	011b      	lsls	r3, r3, #4
 801bb44:	4413      	add	r3, r2
 801bb46:	2200      	movs	r2, #0
 801bb48:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	3301      	adds	r3, #1
 801bb4e:	60fb      	str	r3, [r7, #12]
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d0eb      	beq.n	801bb2e <clear_lock+0xe>
	}
}
 801bb56:	bf00      	nop
 801bb58:	bf00      	nop
 801bb5a:	3714      	adds	r7, #20
 801bb5c:	46bd      	mov	sp, r7
 801bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb62:	4770      	bx	lr
 801bb64:	24000558 	.word	0x24000558

0801bb68 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801bb68:	b580      	push	{r7, lr}
 801bb6a:	b086      	sub	sp, #24
 801bb6c:	af00      	add	r7, sp, #0
 801bb6e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801bb70:	2300      	movs	r3, #0
 801bb72:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	78db      	ldrb	r3, [r3, #3]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d034      	beq.n	801bbe6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bb80:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	7858      	ldrb	r0, [r3, #1]
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bb8c:	2301      	movs	r3, #1
 801bb8e:	697a      	ldr	r2, [r7, #20]
 801bb90:	f7ff fd40 	bl	801b614 <disk_write>
 801bb94:	4603      	mov	r3, r0
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d002      	beq.n	801bba0 <sync_window+0x38>
			res = FR_DISK_ERR;
 801bb9a:	2301      	movs	r3, #1
 801bb9c:	73fb      	strb	r3, [r7, #15]
 801bb9e:	e022      	b.n	801bbe6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	2200      	movs	r2, #0
 801bba4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bbaa:	697a      	ldr	r2, [r7, #20]
 801bbac:	1ad2      	subs	r2, r2, r3
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	6a1b      	ldr	r3, [r3, #32]
 801bbb2:	429a      	cmp	r2, r3
 801bbb4:	d217      	bcs.n	801bbe6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	789b      	ldrb	r3, [r3, #2]
 801bbba:	613b      	str	r3, [r7, #16]
 801bbbc:	e010      	b.n	801bbe0 <sync_window+0x78>
					wsect += fs->fsize;
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	6a1b      	ldr	r3, [r3, #32]
 801bbc2:	697a      	ldr	r2, [r7, #20]
 801bbc4:	4413      	add	r3, r2
 801bbc6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	7858      	ldrb	r0, [r3, #1]
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bbd2:	2301      	movs	r3, #1
 801bbd4:	697a      	ldr	r2, [r7, #20]
 801bbd6:	f7ff fd1d 	bl	801b614 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801bbda:	693b      	ldr	r3, [r7, #16]
 801bbdc:	3b01      	subs	r3, #1
 801bbde:	613b      	str	r3, [r7, #16]
 801bbe0:	693b      	ldr	r3, [r7, #16]
 801bbe2:	2b01      	cmp	r3, #1
 801bbe4:	d8eb      	bhi.n	801bbbe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801bbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 801bbe8:	4618      	mov	r0, r3
 801bbea:	3718      	adds	r7, #24
 801bbec:	46bd      	mov	sp, r7
 801bbee:	bd80      	pop	{r7, pc}

0801bbf0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801bbf0:	b580      	push	{r7, lr}
 801bbf2:	b084      	sub	sp, #16
 801bbf4:	af00      	add	r7, sp, #0
 801bbf6:	6078      	str	r0, [r7, #4]
 801bbf8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801bbfa:	2300      	movs	r3, #0
 801bbfc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bc02:	683a      	ldr	r2, [r7, #0]
 801bc04:	429a      	cmp	r2, r3
 801bc06:	d01b      	beq.n	801bc40 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801bc08:	6878      	ldr	r0, [r7, #4]
 801bc0a:	f7ff ffad 	bl	801bb68 <sync_window>
 801bc0e:	4603      	mov	r3, r0
 801bc10:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801bc12:	7bfb      	ldrb	r3, [r7, #15]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d113      	bne.n	801bc40 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	7858      	ldrb	r0, [r3, #1]
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bc22:	2301      	movs	r3, #1
 801bc24:	683a      	ldr	r2, [r7, #0]
 801bc26:	f7ff fcd5 	bl	801b5d4 <disk_read>
 801bc2a:	4603      	mov	r3, r0
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d004      	beq.n	801bc3a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801bc30:	f04f 33ff 	mov.w	r3, #4294967295
 801bc34:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801bc36:	2301      	movs	r3, #1
 801bc38:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	683a      	ldr	r2, [r7, #0]
 801bc3e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801bc40:	7bfb      	ldrb	r3, [r7, #15]
}
 801bc42:	4618      	mov	r0, r3
 801bc44:	3710      	adds	r7, #16
 801bc46:	46bd      	mov	sp, r7
 801bc48:	bd80      	pop	{r7, pc}
	...

0801bc4c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801bc4c:	b580      	push	{r7, lr}
 801bc4e:	b084      	sub	sp, #16
 801bc50:	af00      	add	r7, sp, #0
 801bc52:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801bc54:	6878      	ldr	r0, [r7, #4]
 801bc56:	f7ff ff87 	bl	801bb68 <sync_window>
 801bc5a:	4603      	mov	r3, r0
 801bc5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801bc5e:	7bfb      	ldrb	r3, [r7, #15]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d159      	bne.n	801bd18 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	781b      	ldrb	r3, [r3, #0]
 801bc68:	2b03      	cmp	r3, #3
 801bc6a:	d149      	bne.n	801bd00 <sync_fs+0xb4>
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	791b      	ldrb	r3, [r3, #4]
 801bc70:	2b01      	cmp	r3, #1
 801bc72:	d145      	bne.n	801bd00 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	899b      	ldrh	r3, [r3, #12]
 801bc7e:	461a      	mov	r2, r3
 801bc80:	2100      	movs	r1, #0
 801bc82:	f7ff fda8 	bl	801b7d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	3338      	adds	r3, #56	@ 0x38
 801bc8a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801bc8e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801bc92:	4618      	mov	r0, r3
 801bc94:	f7ff fd37 	bl	801b706 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	3338      	adds	r3, #56	@ 0x38
 801bc9c:	4921      	ldr	r1, [pc, #132]	@ (801bd24 <sync_fs+0xd8>)
 801bc9e:	4618      	mov	r0, r3
 801bca0:	f7ff fd4c 	bl	801b73c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	3338      	adds	r3, #56	@ 0x38
 801bca8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801bcac:	491e      	ldr	r1, [pc, #120]	@ (801bd28 <sync_fs+0xdc>)
 801bcae:	4618      	mov	r0, r3
 801bcb0:	f7ff fd44 	bl	801b73c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	3338      	adds	r3, #56	@ 0x38
 801bcb8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	699b      	ldr	r3, [r3, #24]
 801bcc0:	4619      	mov	r1, r3
 801bcc2:	4610      	mov	r0, r2
 801bcc4:	f7ff fd3a 	bl	801b73c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	3338      	adds	r3, #56	@ 0x38
 801bccc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	695b      	ldr	r3, [r3, #20]
 801bcd4:	4619      	mov	r1, r3
 801bcd6:	4610      	mov	r0, r2
 801bcd8:	f7ff fd30 	bl	801b73c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bce0:	1c5a      	adds	r2, r3, #1
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	7858      	ldrb	r0, [r3, #1]
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bcf4:	2301      	movs	r3, #1
 801bcf6:	f7ff fc8d 	bl	801b614 <disk_write>
			fs->fsi_flag = 0;
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	2200      	movs	r2, #0
 801bcfe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	785b      	ldrb	r3, [r3, #1]
 801bd04:	2200      	movs	r2, #0
 801bd06:	2100      	movs	r1, #0
 801bd08:	4618      	mov	r0, r3
 801bd0a:	f7ff fca3 	bl	801b654 <disk_ioctl>
 801bd0e:	4603      	mov	r3, r0
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d001      	beq.n	801bd18 <sync_fs+0xcc>
 801bd14:	2301      	movs	r3, #1
 801bd16:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801bd18:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd1a:	4618      	mov	r0, r3
 801bd1c:	3710      	adds	r7, #16
 801bd1e:	46bd      	mov	sp, r7
 801bd20:	bd80      	pop	{r7, pc}
 801bd22:	bf00      	nop
 801bd24:	41615252 	.word	0x41615252
 801bd28:	61417272 	.word	0x61417272

0801bd2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801bd2c:	b480      	push	{r7}
 801bd2e:	b083      	sub	sp, #12
 801bd30:	af00      	add	r7, sp, #0
 801bd32:	6078      	str	r0, [r7, #4]
 801bd34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801bd36:	683b      	ldr	r3, [r7, #0]
 801bd38:	3b02      	subs	r3, #2
 801bd3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	69db      	ldr	r3, [r3, #28]
 801bd40:	3b02      	subs	r3, #2
 801bd42:	683a      	ldr	r2, [r7, #0]
 801bd44:	429a      	cmp	r2, r3
 801bd46:	d301      	bcc.n	801bd4c <clust2sect+0x20>
 801bd48:	2300      	movs	r3, #0
 801bd4a:	e008      	b.n	801bd5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	895b      	ldrh	r3, [r3, #10]
 801bd50:	461a      	mov	r2, r3
 801bd52:	683b      	ldr	r3, [r7, #0]
 801bd54:	fb03 f202 	mul.w	r2, r3, r2
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bd5c:	4413      	add	r3, r2
}
 801bd5e:	4618      	mov	r0, r3
 801bd60:	370c      	adds	r7, #12
 801bd62:	46bd      	mov	sp, r7
 801bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd68:	4770      	bx	lr

0801bd6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801bd6a:	b580      	push	{r7, lr}
 801bd6c:	b086      	sub	sp, #24
 801bd6e:	af00      	add	r7, sp, #0
 801bd70:	6078      	str	r0, [r7, #4]
 801bd72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801bd7a:	683b      	ldr	r3, [r7, #0]
 801bd7c:	2b01      	cmp	r3, #1
 801bd7e:	d904      	bls.n	801bd8a <get_fat+0x20>
 801bd80:	693b      	ldr	r3, [r7, #16]
 801bd82:	69db      	ldr	r3, [r3, #28]
 801bd84:	683a      	ldr	r2, [r7, #0]
 801bd86:	429a      	cmp	r2, r3
 801bd88:	d302      	bcc.n	801bd90 <get_fat+0x26>
		val = 1;	/* Internal error */
 801bd8a:	2301      	movs	r3, #1
 801bd8c:	617b      	str	r3, [r7, #20]
 801bd8e:	e0ba      	b.n	801bf06 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801bd90:	f04f 33ff 	mov.w	r3, #4294967295
 801bd94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801bd96:	693b      	ldr	r3, [r7, #16]
 801bd98:	781b      	ldrb	r3, [r3, #0]
 801bd9a:	2b03      	cmp	r3, #3
 801bd9c:	f000 8082 	beq.w	801bea4 <get_fat+0x13a>
 801bda0:	2b03      	cmp	r3, #3
 801bda2:	f300 80a6 	bgt.w	801bef2 <get_fat+0x188>
 801bda6:	2b01      	cmp	r3, #1
 801bda8:	d002      	beq.n	801bdb0 <get_fat+0x46>
 801bdaa:	2b02      	cmp	r3, #2
 801bdac:	d055      	beq.n	801be5a <get_fat+0xf0>
 801bdae:	e0a0      	b.n	801bef2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801bdb0:	683b      	ldr	r3, [r7, #0]
 801bdb2:	60fb      	str	r3, [r7, #12]
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	085b      	lsrs	r3, r3, #1
 801bdb8:	68fa      	ldr	r2, [r7, #12]
 801bdba:	4413      	add	r3, r2
 801bdbc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801bdbe:	693b      	ldr	r3, [r7, #16]
 801bdc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801bdc2:	693b      	ldr	r3, [r7, #16]
 801bdc4:	899b      	ldrh	r3, [r3, #12]
 801bdc6:	4619      	mov	r1, r3
 801bdc8:	68fb      	ldr	r3, [r7, #12]
 801bdca:	fbb3 f3f1 	udiv	r3, r3, r1
 801bdce:	4413      	add	r3, r2
 801bdd0:	4619      	mov	r1, r3
 801bdd2:	6938      	ldr	r0, [r7, #16]
 801bdd4:	f7ff ff0c 	bl	801bbf0 <move_window>
 801bdd8:	4603      	mov	r3, r0
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	f040 808c 	bne.w	801bef8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801bde0:	68fb      	ldr	r3, [r7, #12]
 801bde2:	1c5a      	adds	r2, r3, #1
 801bde4:	60fa      	str	r2, [r7, #12]
 801bde6:	693a      	ldr	r2, [r7, #16]
 801bde8:	8992      	ldrh	r2, [r2, #12]
 801bdea:	fbb3 f1f2 	udiv	r1, r3, r2
 801bdee:	fb01 f202 	mul.w	r2, r1, r2
 801bdf2:	1a9b      	subs	r3, r3, r2
 801bdf4:	693a      	ldr	r2, [r7, #16]
 801bdf6:	4413      	add	r3, r2
 801bdf8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801bdfc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801bdfe:	693b      	ldr	r3, [r7, #16]
 801be00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801be02:	693b      	ldr	r3, [r7, #16]
 801be04:	899b      	ldrh	r3, [r3, #12]
 801be06:	4619      	mov	r1, r3
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	fbb3 f3f1 	udiv	r3, r3, r1
 801be0e:	4413      	add	r3, r2
 801be10:	4619      	mov	r1, r3
 801be12:	6938      	ldr	r0, [r7, #16]
 801be14:	f7ff feec 	bl	801bbf0 <move_window>
 801be18:	4603      	mov	r3, r0
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d16e      	bne.n	801befc <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801be1e:	693b      	ldr	r3, [r7, #16]
 801be20:	899b      	ldrh	r3, [r3, #12]
 801be22:	461a      	mov	r2, r3
 801be24:	68fb      	ldr	r3, [r7, #12]
 801be26:	fbb3 f1f2 	udiv	r1, r3, r2
 801be2a:	fb01 f202 	mul.w	r2, r1, r2
 801be2e:	1a9b      	subs	r3, r3, r2
 801be30:	693a      	ldr	r2, [r7, #16]
 801be32:	4413      	add	r3, r2
 801be34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801be38:	021b      	lsls	r3, r3, #8
 801be3a:	68ba      	ldr	r2, [r7, #8]
 801be3c:	4313      	orrs	r3, r2
 801be3e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801be40:	683b      	ldr	r3, [r7, #0]
 801be42:	f003 0301 	and.w	r3, r3, #1
 801be46:	2b00      	cmp	r3, #0
 801be48:	d002      	beq.n	801be50 <get_fat+0xe6>
 801be4a:	68bb      	ldr	r3, [r7, #8]
 801be4c:	091b      	lsrs	r3, r3, #4
 801be4e:	e002      	b.n	801be56 <get_fat+0xec>
 801be50:	68bb      	ldr	r3, [r7, #8]
 801be52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801be56:	617b      	str	r3, [r7, #20]
			break;
 801be58:	e055      	b.n	801bf06 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801be5a:	693b      	ldr	r3, [r7, #16]
 801be5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801be5e:	693b      	ldr	r3, [r7, #16]
 801be60:	899b      	ldrh	r3, [r3, #12]
 801be62:	085b      	lsrs	r3, r3, #1
 801be64:	b29b      	uxth	r3, r3
 801be66:	4619      	mov	r1, r3
 801be68:	683b      	ldr	r3, [r7, #0]
 801be6a:	fbb3 f3f1 	udiv	r3, r3, r1
 801be6e:	4413      	add	r3, r2
 801be70:	4619      	mov	r1, r3
 801be72:	6938      	ldr	r0, [r7, #16]
 801be74:	f7ff febc 	bl	801bbf0 <move_window>
 801be78:	4603      	mov	r3, r0
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d140      	bne.n	801bf00 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801be7e:	693b      	ldr	r3, [r7, #16]
 801be80:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801be84:	683b      	ldr	r3, [r7, #0]
 801be86:	005b      	lsls	r3, r3, #1
 801be88:	693a      	ldr	r2, [r7, #16]
 801be8a:	8992      	ldrh	r2, [r2, #12]
 801be8c:	fbb3 f0f2 	udiv	r0, r3, r2
 801be90:	fb00 f202 	mul.w	r2, r0, r2
 801be94:	1a9b      	subs	r3, r3, r2
 801be96:	440b      	add	r3, r1
 801be98:	4618      	mov	r0, r3
 801be9a:	f7ff fbf9 	bl	801b690 <ld_word>
 801be9e:	4603      	mov	r3, r0
 801bea0:	617b      	str	r3, [r7, #20]
			break;
 801bea2:	e030      	b.n	801bf06 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801bea4:	693b      	ldr	r3, [r7, #16]
 801bea6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801bea8:	693b      	ldr	r3, [r7, #16]
 801beaa:	899b      	ldrh	r3, [r3, #12]
 801beac:	089b      	lsrs	r3, r3, #2
 801beae:	b29b      	uxth	r3, r3
 801beb0:	4619      	mov	r1, r3
 801beb2:	683b      	ldr	r3, [r7, #0]
 801beb4:	fbb3 f3f1 	udiv	r3, r3, r1
 801beb8:	4413      	add	r3, r2
 801beba:	4619      	mov	r1, r3
 801bebc:	6938      	ldr	r0, [r7, #16]
 801bebe:	f7ff fe97 	bl	801bbf0 <move_window>
 801bec2:	4603      	mov	r3, r0
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d11d      	bne.n	801bf04 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801bec8:	693b      	ldr	r3, [r7, #16]
 801beca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bece:	683b      	ldr	r3, [r7, #0]
 801bed0:	009b      	lsls	r3, r3, #2
 801bed2:	693a      	ldr	r2, [r7, #16]
 801bed4:	8992      	ldrh	r2, [r2, #12]
 801bed6:	fbb3 f0f2 	udiv	r0, r3, r2
 801beda:	fb00 f202 	mul.w	r2, r0, r2
 801bede:	1a9b      	subs	r3, r3, r2
 801bee0:	440b      	add	r3, r1
 801bee2:	4618      	mov	r0, r3
 801bee4:	f7ff fbec 	bl	801b6c0 <ld_dword>
 801bee8:	4603      	mov	r3, r0
 801beea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801beee:	617b      	str	r3, [r7, #20]
			break;
 801bef0:	e009      	b.n	801bf06 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801bef2:	2301      	movs	r3, #1
 801bef4:	617b      	str	r3, [r7, #20]
 801bef6:	e006      	b.n	801bf06 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801bef8:	bf00      	nop
 801befa:	e004      	b.n	801bf06 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801befc:	bf00      	nop
 801befe:	e002      	b.n	801bf06 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801bf00:	bf00      	nop
 801bf02:	e000      	b.n	801bf06 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801bf04:	bf00      	nop
		}
	}

	return val;
 801bf06:	697b      	ldr	r3, [r7, #20]
}
 801bf08:	4618      	mov	r0, r3
 801bf0a:	3718      	adds	r7, #24
 801bf0c:	46bd      	mov	sp, r7
 801bf0e:	bd80      	pop	{r7, pc}

0801bf10 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801bf10:	b590      	push	{r4, r7, lr}
 801bf12:	b089      	sub	sp, #36	@ 0x24
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	60f8      	str	r0, [r7, #12]
 801bf18:	60b9      	str	r1, [r7, #8]
 801bf1a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801bf1c:	2302      	movs	r3, #2
 801bf1e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801bf20:	68bb      	ldr	r3, [r7, #8]
 801bf22:	2b01      	cmp	r3, #1
 801bf24:	f240 8109 	bls.w	801c13a <put_fat+0x22a>
 801bf28:	68fb      	ldr	r3, [r7, #12]
 801bf2a:	69db      	ldr	r3, [r3, #28]
 801bf2c:	68ba      	ldr	r2, [r7, #8]
 801bf2e:	429a      	cmp	r2, r3
 801bf30:	f080 8103 	bcs.w	801c13a <put_fat+0x22a>
		switch (fs->fs_type) {
 801bf34:	68fb      	ldr	r3, [r7, #12]
 801bf36:	781b      	ldrb	r3, [r3, #0]
 801bf38:	2b03      	cmp	r3, #3
 801bf3a:	f000 80b6 	beq.w	801c0aa <put_fat+0x19a>
 801bf3e:	2b03      	cmp	r3, #3
 801bf40:	f300 80fb 	bgt.w	801c13a <put_fat+0x22a>
 801bf44:	2b01      	cmp	r3, #1
 801bf46:	d003      	beq.n	801bf50 <put_fat+0x40>
 801bf48:	2b02      	cmp	r3, #2
 801bf4a:	f000 8083 	beq.w	801c054 <put_fat+0x144>
 801bf4e:	e0f4      	b.n	801c13a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801bf50:	68bb      	ldr	r3, [r7, #8]
 801bf52:	61bb      	str	r3, [r7, #24]
 801bf54:	69bb      	ldr	r3, [r7, #24]
 801bf56:	085b      	lsrs	r3, r3, #1
 801bf58:	69ba      	ldr	r2, [r7, #24]
 801bf5a:	4413      	add	r3, r2
 801bf5c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	899b      	ldrh	r3, [r3, #12]
 801bf66:	4619      	mov	r1, r3
 801bf68:	69bb      	ldr	r3, [r7, #24]
 801bf6a:	fbb3 f3f1 	udiv	r3, r3, r1
 801bf6e:	4413      	add	r3, r2
 801bf70:	4619      	mov	r1, r3
 801bf72:	68f8      	ldr	r0, [r7, #12]
 801bf74:	f7ff fe3c 	bl	801bbf0 <move_window>
 801bf78:	4603      	mov	r3, r0
 801bf7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801bf7c:	7ffb      	ldrb	r3, [r7, #31]
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	f040 80d4 	bne.w	801c12c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bf8a:	69bb      	ldr	r3, [r7, #24]
 801bf8c:	1c5a      	adds	r2, r3, #1
 801bf8e:	61ba      	str	r2, [r7, #24]
 801bf90:	68fa      	ldr	r2, [r7, #12]
 801bf92:	8992      	ldrh	r2, [r2, #12]
 801bf94:	fbb3 f0f2 	udiv	r0, r3, r2
 801bf98:	fb00 f202 	mul.w	r2, r0, r2
 801bf9c:	1a9b      	subs	r3, r3, r2
 801bf9e:	440b      	add	r3, r1
 801bfa0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801bfa2:	68bb      	ldr	r3, [r7, #8]
 801bfa4:	f003 0301 	and.w	r3, r3, #1
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d00d      	beq.n	801bfc8 <put_fat+0xb8>
 801bfac:	697b      	ldr	r3, [r7, #20]
 801bfae:	781b      	ldrb	r3, [r3, #0]
 801bfb0:	b25b      	sxtb	r3, r3
 801bfb2:	f003 030f 	and.w	r3, r3, #15
 801bfb6:	b25a      	sxtb	r2, r3
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	b2db      	uxtb	r3, r3
 801bfbc:	011b      	lsls	r3, r3, #4
 801bfbe:	b25b      	sxtb	r3, r3
 801bfc0:	4313      	orrs	r3, r2
 801bfc2:	b25b      	sxtb	r3, r3
 801bfc4:	b2db      	uxtb	r3, r3
 801bfc6:	e001      	b.n	801bfcc <put_fat+0xbc>
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	b2db      	uxtb	r3, r3
 801bfcc:	697a      	ldr	r2, [r7, #20]
 801bfce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801bfd0:	68fb      	ldr	r3, [r7, #12]
 801bfd2:	2201      	movs	r2, #1
 801bfd4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801bfd6:	68fb      	ldr	r3, [r7, #12]
 801bfd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	899b      	ldrh	r3, [r3, #12]
 801bfde:	4619      	mov	r1, r3
 801bfe0:	69bb      	ldr	r3, [r7, #24]
 801bfe2:	fbb3 f3f1 	udiv	r3, r3, r1
 801bfe6:	4413      	add	r3, r2
 801bfe8:	4619      	mov	r1, r3
 801bfea:	68f8      	ldr	r0, [r7, #12]
 801bfec:	f7ff fe00 	bl	801bbf0 <move_window>
 801bff0:	4603      	mov	r3, r0
 801bff2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801bff4:	7ffb      	ldrb	r3, [r7, #31]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	f040 809a 	bne.w	801c130 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801bffc:	68fb      	ldr	r3, [r7, #12]
 801bffe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	899b      	ldrh	r3, [r3, #12]
 801c006:	461a      	mov	r2, r3
 801c008:	69bb      	ldr	r3, [r7, #24]
 801c00a:	fbb3 f0f2 	udiv	r0, r3, r2
 801c00e:	fb00 f202 	mul.w	r2, r0, r2
 801c012:	1a9b      	subs	r3, r3, r2
 801c014:	440b      	add	r3, r1
 801c016:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801c018:	68bb      	ldr	r3, [r7, #8]
 801c01a:	f003 0301 	and.w	r3, r3, #1
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d003      	beq.n	801c02a <put_fat+0x11a>
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	091b      	lsrs	r3, r3, #4
 801c026:	b2db      	uxtb	r3, r3
 801c028:	e00e      	b.n	801c048 <put_fat+0x138>
 801c02a:	697b      	ldr	r3, [r7, #20]
 801c02c:	781b      	ldrb	r3, [r3, #0]
 801c02e:	b25b      	sxtb	r3, r3
 801c030:	f023 030f 	bic.w	r3, r3, #15
 801c034:	b25a      	sxtb	r2, r3
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	0a1b      	lsrs	r3, r3, #8
 801c03a:	b25b      	sxtb	r3, r3
 801c03c:	f003 030f 	and.w	r3, r3, #15
 801c040:	b25b      	sxtb	r3, r3
 801c042:	4313      	orrs	r3, r2
 801c044:	b25b      	sxtb	r3, r3
 801c046:	b2db      	uxtb	r3, r3
 801c048:	697a      	ldr	r2, [r7, #20]
 801c04a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	2201      	movs	r2, #1
 801c050:	70da      	strb	r2, [r3, #3]
			break;
 801c052:	e072      	b.n	801c13a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	899b      	ldrh	r3, [r3, #12]
 801c05c:	085b      	lsrs	r3, r3, #1
 801c05e:	b29b      	uxth	r3, r3
 801c060:	4619      	mov	r1, r3
 801c062:	68bb      	ldr	r3, [r7, #8]
 801c064:	fbb3 f3f1 	udiv	r3, r3, r1
 801c068:	4413      	add	r3, r2
 801c06a:	4619      	mov	r1, r3
 801c06c:	68f8      	ldr	r0, [r7, #12]
 801c06e:	f7ff fdbf 	bl	801bbf0 <move_window>
 801c072:	4603      	mov	r3, r0
 801c074:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801c076:	7ffb      	ldrb	r3, [r7, #31]
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d15b      	bne.n	801c134 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801c082:	68bb      	ldr	r3, [r7, #8]
 801c084:	005b      	lsls	r3, r3, #1
 801c086:	68fa      	ldr	r2, [r7, #12]
 801c088:	8992      	ldrh	r2, [r2, #12]
 801c08a:	fbb3 f0f2 	udiv	r0, r3, r2
 801c08e:	fb00 f202 	mul.w	r2, r0, r2
 801c092:	1a9b      	subs	r3, r3, r2
 801c094:	440b      	add	r3, r1
 801c096:	687a      	ldr	r2, [r7, #4]
 801c098:	b292      	uxth	r2, r2
 801c09a:	4611      	mov	r1, r2
 801c09c:	4618      	mov	r0, r3
 801c09e:	f7ff fb32 	bl	801b706 <st_word>
			fs->wflag = 1;
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	2201      	movs	r2, #1
 801c0a6:	70da      	strb	r2, [r3, #3]
			break;
 801c0a8:	e047      	b.n	801c13a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801c0aa:	68fb      	ldr	r3, [r7, #12]
 801c0ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c0ae:	68fb      	ldr	r3, [r7, #12]
 801c0b0:	899b      	ldrh	r3, [r3, #12]
 801c0b2:	089b      	lsrs	r3, r3, #2
 801c0b4:	b29b      	uxth	r3, r3
 801c0b6:	4619      	mov	r1, r3
 801c0b8:	68bb      	ldr	r3, [r7, #8]
 801c0ba:	fbb3 f3f1 	udiv	r3, r3, r1
 801c0be:	4413      	add	r3, r2
 801c0c0:	4619      	mov	r1, r3
 801c0c2:	68f8      	ldr	r0, [r7, #12]
 801c0c4:	f7ff fd94 	bl	801bbf0 <move_window>
 801c0c8:	4603      	mov	r3, r0
 801c0ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801c0cc:	7ffb      	ldrb	r3, [r7, #31]
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d132      	bne.n	801c138 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801c0de:	68bb      	ldr	r3, [r7, #8]
 801c0e0:	009b      	lsls	r3, r3, #2
 801c0e2:	68fa      	ldr	r2, [r7, #12]
 801c0e4:	8992      	ldrh	r2, [r2, #12]
 801c0e6:	fbb3 f0f2 	udiv	r0, r3, r2
 801c0ea:	fb00 f202 	mul.w	r2, r0, r2
 801c0ee:	1a9b      	subs	r3, r3, r2
 801c0f0:	440b      	add	r3, r1
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	f7ff fae4 	bl	801b6c0 <ld_dword>
 801c0f8:	4603      	mov	r3, r0
 801c0fa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801c0fe:	4323      	orrs	r3, r4
 801c100:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801c102:	68fb      	ldr	r3, [r7, #12]
 801c104:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801c108:	68bb      	ldr	r3, [r7, #8]
 801c10a:	009b      	lsls	r3, r3, #2
 801c10c:	68fa      	ldr	r2, [r7, #12]
 801c10e:	8992      	ldrh	r2, [r2, #12]
 801c110:	fbb3 f0f2 	udiv	r0, r3, r2
 801c114:	fb00 f202 	mul.w	r2, r0, r2
 801c118:	1a9b      	subs	r3, r3, r2
 801c11a:	440b      	add	r3, r1
 801c11c:	6879      	ldr	r1, [r7, #4]
 801c11e:	4618      	mov	r0, r3
 801c120:	f7ff fb0c 	bl	801b73c <st_dword>
			fs->wflag = 1;
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	2201      	movs	r2, #1
 801c128:	70da      	strb	r2, [r3, #3]
			break;
 801c12a:	e006      	b.n	801c13a <put_fat+0x22a>
			if (res != FR_OK) break;
 801c12c:	bf00      	nop
 801c12e:	e004      	b.n	801c13a <put_fat+0x22a>
			if (res != FR_OK) break;
 801c130:	bf00      	nop
 801c132:	e002      	b.n	801c13a <put_fat+0x22a>
			if (res != FR_OK) break;
 801c134:	bf00      	nop
 801c136:	e000      	b.n	801c13a <put_fat+0x22a>
			if (res != FR_OK) break;
 801c138:	bf00      	nop
		}
	}
	return res;
 801c13a:	7ffb      	ldrb	r3, [r7, #31]
}
 801c13c:	4618      	mov	r0, r3
 801c13e:	3724      	adds	r7, #36	@ 0x24
 801c140:	46bd      	mov	sp, r7
 801c142:	bd90      	pop	{r4, r7, pc}

0801c144 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801c144:	b580      	push	{r7, lr}
 801c146:	b088      	sub	sp, #32
 801c148:	af00      	add	r7, sp, #0
 801c14a:	60f8      	str	r0, [r7, #12]
 801c14c:	60b9      	str	r1, [r7, #8]
 801c14e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801c150:	2300      	movs	r3, #0
 801c152:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801c15a:	68bb      	ldr	r3, [r7, #8]
 801c15c:	2b01      	cmp	r3, #1
 801c15e:	d904      	bls.n	801c16a <remove_chain+0x26>
 801c160:	69bb      	ldr	r3, [r7, #24]
 801c162:	69db      	ldr	r3, [r3, #28]
 801c164:	68ba      	ldr	r2, [r7, #8]
 801c166:	429a      	cmp	r2, r3
 801c168:	d301      	bcc.n	801c16e <remove_chain+0x2a>
 801c16a:	2302      	movs	r3, #2
 801c16c:	e04b      	b.n	801c206 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	2b00      	cmp	r3, #0
 801c172:	d00c      	beq.n	801c18e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801c174:	f04f 32ff 	mov.w	r2, #4294967295
 801c178:	6879      	ldr	r1, [r7, #4]
 801c17a:	69b8      	ldr	r0, [r7, #24]
 801c17c:	f7ff fec8 	bl	801bf10 <put_fat>
 801c180:	4603      	mov	r3, r0
 801c182:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801c184:	7ffb      	ldrb	r3, [r7, #31]
 801c186:	2b00      	cmp	r3, #0
 801c188:	d001      	beq.n	801c18e <remove_chain+0x4a>
 801c18a:	7ffb      	ldrb	r3, [r7, #31]
 801c18c:	e03b      	b.n	801c206 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801c18e:	68b9      	ldr	r1, [r7, #8]
 801c190:	68f8      	ldr	r0, [r7, #12]
 801c192:	f7ff fdea 	bl	801bd6a <get_fat>
 801c196:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801c198:	697b      	ldr	r3, [r7, #20]
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d031      	beq.n	801c202 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801c19e:	697b      	ldr	r3, [r7, #20]
 801c1a0:	2b01      	cmp	r3, #1
 801c1a2:	d101      	bne.n	801c1a8 <remove_chain+0x64>
 801c1a4:	2302      	movs	r3, #2
 801c1a6:	e02e      	b.n	801c206 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801c1a8:	697b      	ldr	r3, [r7, #20]
 801c1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c1ae:	d101      	bne.n	801c1b4 <remove_chain+0x70>
 801c1b0:	2301      	movs	r3, #1
 801c1b2:	e028      	b.n	801c206 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801c1b4:	2200      	movs	r2, #0
 801c1b6:	68b9      	ldr	r1, [r7, #8]
 801c1b8:	69b8      	ldr	r0, [r7, #24]
 801c1ba:	f7ff fea9 	bl	801bf10 <put_fat>
 801c1be:	4603      	mov	r3, r0
 801c1c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801c1c2:	7ffb      	ldrb	r3, [r7, #31]
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	d001      	beq.n	801c1cc <remove_chain+0x88>
 801c1c8:	7ffb      	ldrb	r3, [r7, #31]
 801c1ca:	e01c      	b.n	801c206 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801c1cc:	69bb      	ldr	r3, [r7, #24]
 801c1ce:	699a      	ldr	r2, [r3, #24]
 801c1d0:	69bb      	ldr	r3, [r7, #24]
 801c1d2:	69db      	ldr	r3, [r3, #28]
 801c1d4:	3b02      	subs	r3, #2
 801c1d6:	429a      	cmp	r2, r3
 801c1d8:	d20b      	bcs.n	801c1f2 <remove_chain+0xae>
			fs->free_clst++;
 801c1da:	69bb      	ldr	r3, [r7, #24]
 801c1dc:	699b      	ldr	r3, [r3, #24]
 801c1de:	1c5a      	adds	r2, r3, #1
 801c1e0:	69bb      	ldr	r3, [r7, #24]
 801c1e2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801c1e4:	69bb      	ldr	r3, [r7, #24]
 801c1e6:	791b      	ldrb	r3, [r3, #4]
 801c1e8:	f043 0301 	orr.w	r3, r3, #1
 801c1ec:	b2da      	uxtb	r2, r3
 801c1ee:	69bb      	ldr	r3, [r7, #24]
 801c1f0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801c1f2:	697b      	ldr	r3, [r7, #20]
 801c1f4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801c1f6:	69bb      	ldr	r3, [r7, #24]
 801c1f8:	69db      	ldr	r3, [r3, #28]
 801c1fa:	68ba      	ldr	r2, [r7, #8]
 801c1fc:	429a      	cmp	r2, r3
 801c1fe:	d3c6      	bcc.n	801c18e <remove_chain+0x4a>
 801c200:	e000      	b.n	801c204 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801c202:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801c204:	2300      	movs	r3, #0
}
 801c206:	4618      	mov	r0, r3
 801c208:	3720      	adds	r7, #32
 801c20a:	46bd      	mov	sp, r7
 801c20c:	bd80      	pop	{r7, pc}

0801c20e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801c20e:	b580      	push	{r7, lr}
 801c210:	b088      	sub	sp, #32
 801c212:	af00      	add	r7, sp, #0
 801c214:	6078      	str	r0, [r7, #4]
 801c216:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	681b      	ldr	r3, [r3, #0]
 801c21c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801c21e:	683b      	ldr	r3, [r7, #0]
 801c220:	2b00      	cmp	r3, #0
 801c222:	d10d      	bne.n	801c240 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801c224:	693b      	ldr	r3, [r7, #16]
 801c226:	695b      	ldr	r3, [r3, #20]
 801c228:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801c22a:	69bb      	ldr	r3, [r7, #24]
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d004      	beq.n	801c23a <create_chain+0x2c>
 801c230:	693b      	ldr	r3, [r7, #16]
 801c232:	69db      	ldr	r3, [r3, #28]
 801c234:	69ba      	ldr	r2, [r7, #24]
 801c236:	429a      	cmp	r2, r3
 801c238:	d31b      	bcc.n	801c272 <create_chain+0x64>
 801c23a:	2301      	movs	r3, #1
 801c23c:	61bb      	str	r3, [r7, #24]
 801c23e:	e018      	b.n	801c272 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801c240:	6839      	ldr	r1, [r7, #0]
 801c242:	6878      	ldr	r0, [r7, #4]
 801c244:	f7ff fd91 	bl	801bd6a <get_fat>
 801c248:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801c24a:	68fb      	ldr	r3, [r7, #12]
 801c24c:	2b01      	cmp	r3, #1
 801c24e:	d801      	bhi.n	801c254 <create_chain+0x46>
 801c250:	2301      	movs	r3, #1
 801c252:	e070      	b.n	801c336 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c25a:	d101      	bne.n	801c260 <create_chain+0x52>
 801c25c:	68fb      	ldr	r3, [r7, #12]
 801c25e:	e06a      	b.n	801c336 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801c260:	693b      	ldr	r3, [r7, #16]
 801c262:	69db      	ldr	r3, [r3, #28]
 801c264:	68fa      	ldr	r2, [r7, #12]
 801c266:	429a      	cmp	r2, r3
 801c268:	d201      	bcs.n	801c26e <create_chain+0x60>
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	e063      	b.n	801c336 <create_chain+0x128>
		scl = clst;
 801c26e:	683b      	ldr	r3, [r7, #0]
 801c270:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801c272:	69bb      	ldr	r3, [r7, #24]
 801c274:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801c276:	69fb      	ldr	r3, [r7, #28]
 801c278:	3301      	adds	r3, #1
 801c27a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801c27c:	693b      	ldr	r3, [r7, #16]
 801c27e:	69db      	ldr	r3, [r3, #28]
 801c280:	69fa      	ldr	r2, [r7, #28]
 801c282:	429a      	cmp	r2, r3
 801c284:	d307      	bcc.n	801c296 <create_chain+0x88>
				ncl = 2;
 801c286:	2302      	movs	r3, #2
 801c288:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801c28a:	69fa      	ldr	r2, [r7, #28]
 801c28c:	69bb      	ldr	r3, [r7, #24]
 801c28e:	429a      	cmp	r2, r3
 801c290:	d901      	bls.n	801c296 <create_chain+0x88>
 801c292:	2300      	movs	r3, #0
 801c294:	e04f      	b.n	801c336 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801c296:	69f9      	ldr	r1, [r7, #28]
 801c298:	6878      	ldr	r0, [r7, #4]
 801c29a:	f7ff fd66 	bl	801bd6a <get_fat>
 801c29e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801c2a0:	68fb      	ldr	r3, [r7, #12]
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d00e      	beq.n	801c2c4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801c2a6:	68fb      	ldr	r3, [r7, #12]
 801c2a8:	2b01      	cmp	r3, #1
 801c2aa:	d003      	beq.n	801c2b4 <create_chain+0xa6>
 801c2ac:	68fb      	ldr	r3, [r7, #12]
 801c2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2b2:	d101      	bne.n	801c2b8 <create_chain+0xaa>
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	e03e      	b.n	801c336 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801c2b8:	69fa      	ldr	r2, [r7, #28]
 801c2ba:	69bb      	ldr	r3, [r7, #24]
 801c2bc:	429a      	cmp	r2, r3
 801c2be:	d1da      	bne.n	801c276 <create_chain+0x68>
 801c2c0:	2300      	movs	r3, #0
 801c2c2:	e038      	b.n	801c336 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801c2c4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801c2c6:	f04f 32ff 	mov.w	r2, #4294967295
 801c2ca:	69f9      	ldr	r1, [r7, #28]
 801c2cc:	6938      	ldr	r0, [r7, #16]
 801c2ce:	f7ff fe1f 	bl	801bf10 <put_fat>
 801c2d2:	4603      	mov	r3, r0
 801c2d4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801c2d6:	7dfb      	ldrb	r3, [r7, #23]
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d109      	bne.n	801c2f0 <create_chain+0xe2>
 801c2dc:	683b      	ldr	r3, [r7, #0]
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d006      	beq.n	801c2f0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801c2e2:	69fa      	ldr	r2, [r7, #28]
 801c2e4:	6839      	ldr	r1, [r7, #0]
 801c2e6:	6938      	ldr	r0, [r7, #16]
 801c2e8:	f7ff fe12 	bl	801bf10 <put_fat>
 801c2ec:	4603      	mov	r3, r0
 801c2ee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801c2f0:	7dfb      	ldrb	r3, [r7, #23]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d116      	bne.n	801c324 <create_chain+0x116>
		fs->last_clst = ncl;
 801c2f6:	693b      	ldr	r3, [r7, #16]
 801c2f8:	69fa      	ldr	r2, [r7, #28]
 801c2fa:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801c2fc:	693b      	ldr	r3, [r7, #16]
 801c2fe:	699a      	ldr	r2, [r3, #24]
 801c300:	693b      	ldr	r3, [r7, #16]
 801c302:	69db      	ldr	r3, [r3, #28]
 801c304:	3b02      	subs	r3, #2
 801c306:	429a      	cmp	r2, r3
 801c308:	d804      	bhi.n	801c314 <create_chain+0x106>
 801c30a:	693b      	ldr	r3, [r7, #16]
 801c30c:	699b      	ldr	r3, [r3, #24]
 801c30e:	1e5a      	subs	r2, r3, #1
 801c310:	693b      	ldr	r3, [r7, #16]
 801c312:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801c314:	693b      	ldr	r3, [r7, #16]
 801c316:	791b      	ldrb	r3, [r3, #4]
 801c318:	f043 0301 	orr.w	r3, r3, #1
 801c31c:	b2da      	uxtb	r2, r3
 801c31e:	693b      	ldr	r3, [r7, #16]
 801c320:	711a      	strb	r2, [r3, #4]
 801c322:	e007      	b.n	801c334 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801c324:	7dfb      	ldrb	r3, [r7, #23]
 801c326:	2b01      	cmp	r3, #1
 801c328:	d102      	bne.n	801c330 <create_chain+0x122>
 801c32a:	f04f 33ff 	mov.w	r3, #4294967295
 801c32e:	e000      	b.n	801c332 <create_chain+0x124>
 801c330:	2301      	movs	r3, #1
 801c332:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801c334:	69fb      	ldr	r3, [r7, #28]
}
 801c336:	4618      	mov	r0, r3
 801c338:	3720      	adds	r7, #32
 801c33a:	46bd      	mov	sp, r7
 801c33c:	bd80      	pop	{r7, pc}

0801c33e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801c33e:	b480      	push	{r7}
 801c340:	b087      	sub	sp, #28
 801c342:	af00      	add	r7, sp, #0
 801c344:	6078      	str	r0, [r7, #4]
 801c346:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c352:	3304      	adds	r3, #4
 801c354:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801c356:	68fb      	ldr	r3, [r7, #12]
 801c358:	899b      	ldrh	r3, [r3, #12]
 801c35a:	461a      	mov	r2, r3
 801c35c:	683b      	ldr	r3, [r7, #0]
 801c35e:	fbb3 f3f2 	udiv	r3, r3, r2
 801c362:	68fa      	ldr	r2, [r7, #12]
 801c364:	8952      	ldrh	r2, [r2, #10]
 801c366:	fbb3 f3f2 	udiv	r3, r3, r2
 801c36a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801c36c:	693b      	ldr	r3, [r7, #16]
 801c36e:	1d1a      	adds	r2, r3, #4
 801c370:	613a      	str	r2, [r7, #16]
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801c376:	68bb      	ldr	r3, [r7, #8]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d101      	bne.n	801c380 <clmt_clust+0x42>
 801c37c:	2300      	movs	r3, #0
 801c37e:	e010      	b.n	801c3a2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801c380:	697a      	ldr	r2, [r7, #20]
 801c382:	68bb      	ldr	r3, [r7, #8]
 801c384:	429a      	cmp	r2, r3
 801c386:	d307      	bcc.n	801c398 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801c388:	697a      	ldr	r2, [r7, #20]
 801c38a:	68bb      	ldr	r3, [r7, #8]
 801c38c:	1ad3      	subs	r3, r2, r3
 801c38e:	617b      	str	r3, [r7, #20]
 801c390:	693b      	ldr	r3, [r7, #16]
 801c392:	3304      	adds	r3, #4
 801c394:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801c396:	e7e9      	b.n	801c36c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801c398:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801c39a:	693b      	ldr	r3, [r7, #16]
 801c39c:	681a      	ldr	r2, [r3, #0]
 801c39e:	697b      	ldr	r3, [r7, #20]
 801c3a0:	4413      	add	r3, r2
}
 801c3a2:	4618      	mov	r0, r3
 801c3a4:	371c      	adds	r7, #28
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3ac:	4770      	bx	lr

0801c3ae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801c3ae:	b580      	push	{r7, lr}
 801c3b0:	b086      	sub	sp, #24
 801c3b2:	af00      	add	r7, sp, #0
 801c3b4:	6078      	str	r0, [r7, #4]
 801c3b6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	681b      	ldr	r3, [r3, #0]
 801c3bc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801c3be:	683b      	ldr	r3, [r7, #0]
 801c3c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801c3c4:	d204      	bcs.n	801c3d0 <dir_sdi+0x22>
 801c3c6:	683b      	ldr	r3, [r7, #0]
 801c3c8:	f003 031f 	and.w	r3, r3, #31
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d001      	beq.n	801c3d4 <dir_sdi+0x26>
		return FR_INT_ERR;
 801c3d0:	2302      	movs	r3, #2
 801c3d2:	e071      	b.n	801c4b8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	683a      	ldr	r2, [r7, #0]
 801c3d8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	689b      	ldr	r3, [r3, #8]
 801c3de:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801c3e0:	697b      	ldr	r3, [r7, #20]
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d106      	bne.n	801c3f4 <dir_sdi+0x46>
 801c3e6:	693b      	ldr	r3, [r7, #16]
 801c3e8:	781b      	ldrb	r3, [r3, #0]
 801c3ea:	2b02      	cmp	r3, #2
 801c3ec:	d902      	bls.n	801c3f4 <dir_sdi+0x46>
		clst = fs->dirbase;
 801c3ee:	693b      	ldr	r3, [r7, #16]
 801c3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c3f2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801c3f4:	697b      	ldr	r3, [r7, #20]
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d10c      	bne.n	801c414 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801c3fa:	683b      	ldr	r3, [r7, #0]
 801c3fc:	095b      	lsrs	r3, r3, #5
 801c3fe:	693a      	ldr	r2, [r7, #16]
 801c400:	8912      	ldrh	r2, [r2, #8]
 801c402:	4293      	cmp	r3, r2
 801c404:	d301      	bcc.n	801c40a <dir_sdi+0x5c>
 801c406:	2302      	movs	r3, #2
 801c408:	e056      	b.n	801c4b8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801c40a:	693b      	ldr	r3, [r7, #16]
 801c40c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	61da      	str	r2, [r3, #28]
 801c412:	e02d      	b.n	801c470 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801c414:	693b      	ldr	r3, [r7, #16]
 801c416:	895b      	ldrh	r3, [r3, #10]
 801c418:	461a      	mov	r2, r3
 801c41a:	693b      	ldr	r3, [r7, #16]
 801c41c:	899b      	ldrh	r3, [r3, #12]
 801c41e:	fb02 f303 	mul.w	r3, r2, r3
 801c422:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801c424:	e019      	b.n	801c45a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	6979      	ldr	r1, [r7, #20]
 801c42a:	4618      	mov	r0, r3
 801c42c:	f7ff fc9d 	bl	801bd6a <get_fat>
 801c430:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801c432:	697b      	ldr	r3, [r7, #20]
 801c434:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c438:	d101      	bne.n	801c43e <dir_sdi+0x90>
 801c43a:	2301      	movs	r3, #1
 801c43c:	e03c      	b.n	801c4b8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801c43e:	697b      	ldr	r3, [r7, #20]
 801c440:	2b01      	cmp	r3, #1
 801c442:	d904      	bls.n	801c44e <dir_sdi+0xa0>
 801c444:	693b      	ldr	r3, [r7, #16]
 801c446:	69db      	ldr	r3, [r3, #28]
 801c448:	697a      	ldr	r2, [r7, #20]
 801c44a:	429a      	cmp	r2, r3
 801c44c:	d301      	bcc.n	801c452 <dir_sdi+0xa4>
 801c44e:	2302      	movs	r3, #2
 801c450:	e032      	b.n	801c4b8 <dir_sdi+0x10a>
			ofs -= csz;
 801c452:	683a      	ldr	r2, [r7, #0]
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	1ad3      	subs	r3, r2, r3
 801c458:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801c45a:	683a      	ldr	r2, [r7, #0]
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	429a      	cmp	r2, r3
 801c460:	d2e1      	bcs.n	801c426 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801c462:	6979      	ldr	r1, [r7, #20]
 801c464:	6938      	ldr	r0, [r7, #16]
 801c466:	f7ff fc61 	bl	801bd2c <clust2sect>
 801c46a:	4602      	mov	r2, r0
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	697a      	ldr	r2, [r7, #20]
 801c474:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	69db      	ldr	r3, [r3, #28]
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	d101      	bne.n	801c482 <dir_sdi+0xd4>
 801c47e:	2302      	movs	r3, #2
 801c480:	e01a      	b.n	801c4b8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	69da      	ldr	r2, [r3, #28]
 801c486:	693b      	ldr	r3, [r7, #16]
 801c488:	899b      	ldrh	r3, [r3, #12]
 801c48a:	4619      	mov	r1, r3
 801c48c:	683b      	ldr	r3, [r7, #0]
 801c48e:	fbb3 f3f1 	udiv	r3, r3, r1
 801c492:	441a      	add	r2, r3
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801c498:	693b      	ldr	r3, [r7, #16]
 801c49a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801c49e:	693b      	ldr	r3, [r7, #16]
 801c4a0:	899b      	ldrh	r3, [r3, #12]
 801c4a2:	461a      	mov	r2, r3
 801c4a4:	683b      	ldr	r3, [r7, #0]
 801c4a6:	fbb3 f0f2 	udiv	r0, r3, r2
 801c4aa:	fb00 f202 	mul.w	r2, r0, r2
 801c4ae:	1a9b      	subs	r3, r3, r2
 801c4b0:	18ca      	adds	r2, r1, r3
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801c4b6:	2300      	movs	r3, #0
}
 801c4b8:	4618      	mov	r0, r3
 801c4ba:	3718      	adds	r7, #24
 801c4bc:	46bd      	mov	sp, r7
 801c4be:	bd80      	pop	{r7, pc}

0801c4c0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	b086      	sub	sp, #24
 801c4c4:	af00      	add	r7, sp, #0
 801c4c6:	6078      	str	r0, [r7, #4]
 801c4c8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	695b      	ldr	r3, [r3, #20]
 801c4d4:	3320      	adds	r3, #32
 801c4d6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	69db      	ldr	r3, [r3, #28]
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d003      	beq.n	801c4e8 <dir_next+0x28>
 801c4e0:	68bb      	ldr	r3, [r7, #8]
 801c4e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801c4e6:	d301      	bcc.n	801c4ec <dir_next+0x2c>
 801c4e8:	2304      	movs	r3, #4
 801c4ea:	e0bb      	b.n	801c664 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	899b      	ldrh	r3, [r3, #12]
 801c4f0:	461a      	mov	r2, r3
 801c4f2:	68bb      	ldr	r3, [r7, #8]
 801c4f4:	fbb3 f1f2 	udiv	r1, r3, r2
 801c4f8:	fb01 f202 	mul.w	r2, r1, r2
 801c4fc:	1a9b      	subs	r3, r3, r2
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	f040 809d 	bne.w	801c63e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	69db      	ldr	r3, [r3, #28]
 801c508:	1c5a      	adds	r2, r3, #1
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	699b      	ldr	r3, [r3, #24]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d10b      	bne.n	801c52e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801c516:	68bb      	ldr	r3, [r7, #8]
 801c518:	095b      	lsrs	r3, r3, #5
 801c51a:	68fa      	ldr	r2, [r7, #12]
 801c51c:	8912      	ldrh	r2, [r2, #8]
 801c51e:	4293      	cmp	r3, r2
 801c520:	f0c0 808d 	bcc.w	801c63e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	2200      	movs	r2, #0
 801c528:	61da      	str	r2, [r3, #28]
 801c52a:	2304      	movs	r3, #4
 801c52c:	e09a      	b.n	801c664 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	899b      	ldrh	r3, [r3, #12]
 801c532:	461a      	mov	r2, r3
 801c534:	68bb      	ldr	r3, [r7, #8]
 801c536:	fbb3 f3f2 	udiv	r3, r3, r2
 801c53a:	68fa      	ldr	r2, [r7, #12]
 801c53c:	8952      	ldrh	r2, [r2, #10]
 801c53e:	3a01      	subs	r2, #1
 801c540:	4013      	ands	r3, r2
 801c542:	2b00      	cmp	r3, #0
 801c544:	d17b      	bne.n	801c63e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801c546:	687a      	ldr	r2, [r7, #4]
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	699b      	ldr	r3, [r3, #24]
 801c54c:	4619      	mov	r1, r3
 801c54e:	4610      	mov	r0, r2
 801c550:	f7ff fc0b 	bl	801bd6a <get_fat>
 801c554:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801c556:	697b      	ldr	r3, [r7, #20]
 801c558:	2b01      	cmp	r3, #1
 801c55a:	d801      	bhi.n	801c560 <dir_next+0xa0>
 801c55c:	2302      	movs	r3, #2
 801c55e:	e081      	b.n	801c664 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801c560:	697b      	ldr	r3, [r7, #20]
 801c562:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c566:	d101      	bne.n	801c56c <dir_next+0xac>
 801c568:	2301      	movs	r3, #1
 801c56a:	e07b      	b.n	801c664 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801c56c:	68fb      	ldr	r3, [r7, #12]
 801c56e:	69db      	ldr	r3, [r3, #28]
 801c570:	697a      	ldr	r2, [r7, #20]
 801c572:	429a      	cmp	r2, r3
 801c574:	d359      	bcc.n	801c62a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801c576:	683b      	ldr	r3, [r7, #0]
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d104      	bne.n	801c586 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	2200      	movs	r2, #0
 801c580:	61da      	str	r2, [r3, #28]
 801c582:	2304      	movs	r3, #4
 801c584:	e06e      	b.n	801c664 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801c586:	687a      	ldr	r2, [r7, #4]
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	699b      	ldr	r3, [r3, #24]
 801c58c:	4619      	mov	r1, r3
 801c58e:	4610      	mov	r0, r2
 801c590:	f7ff fe3d 	bl	801c20e <create_chain>
 801c594:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801c596:	697b      	ldr	r3, [r7, #20]
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d101      	bne.n	801c5a0 <dir_next+0xe0>
 801c59c:	2307      	movs	r3, #7
 801c59e:	e061      	b.n	801c664 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801c5a0:	697b      	ldr	r3, [r7, #20]
 801c5a2:	2b01      	cmp	r3, #1
 801c5a4:	d101      	bne.n	801c5aa <dir_next+0xea>
 801c5a6:	2302      	movs	r3, #2
 801c5a8:	e05c      	b.n	801c664 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801c5aa:	697b      	ldr	r3, [r7, #20]
 801c5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5b0:	d101      	bne.n	801c5b6 <dir_next+0xf6>
 801c5b2:	2301      	movs	r3, #1
 801c5b4:	e056      	b.n	801c664 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801c5b6:	68f8      	ldr	r0, [r7, #12]
 801c5b8:	f7ff fad6 	bl	801bb68 <sync_window>
 801c5bc:	4603      	mov	r3, r0
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d001      	beq.n	801c5c6 <dir_next+0x106>
 801c5c2:	2301      	movs	r3, #1
 801c5c4:	e04e      	b.n	801c664 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801c5c6:	68fb      	ldr	r3, [r7, #12]
 801c5c8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801c5cc:	68fb      	ldr	r3, [r7, #12]
 801c5ce:	899b      	ldrh	r3, [r3, #12]
 801c5d0:	461a      	mov	r2, r3
 801c5d2:	2100      	movs	r1, #0
 801c5d4:	f7ff f8ff 	bl	801b7d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801c5d8:	2300      	movs	r3, #0
 801c5da:	613b      	str	r3, [r7, #16]
 801c5dc:	6979      	ldr	r1, [r7, #20]
 801c5de:	68f8      	ldr	r0, [r7, #12]
 801c5e0:	f7ff fba4 	bl	801bd2c <clust2sect>
 801c5e4:	4602      	mov	r2, r0
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	635a      	str	r2, [r3, #52]	@ 0x34
 801c5ea:	e012      	b.n	801c612 <dir_next+0x152>
						fs->wflag = 1;
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	2201      	movs	r2, #1
 801c5f0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801c5f2:	68f8      	ldr	r0, [r7, #12]
 801c5f4:	f7ff fab8 	bl	801bb68 <sync_window>
 801c5f8:	4603      	mov	r3, r0
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	d001      	beq.n	801c602 <dir_next+0x142>
 801c5fe:	2301      	movs	r3, #1
 801c600:	e030      	b.n	801c664 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801c602:	693b      	ldr	r3, [r7, #16]
 801c604:	3301      	adds	r3, #1
 801c606:	613b      	str	r3, [r7, #16]
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c60c:	1c5a      	adds	r2, r3, #1
 801c60e:	68fb      	ldr	r3, [r7, #12]
 801c610:	635a      	str	r2, [r3, #52]	@ 0x34
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	895b      	ldrh	r3, [r3, #10]
 801c616:	461a      	mov	r2, r3
 801c618:	693b      	ldr	r3, [r7, #16]
 801c61a:	4293      	cmp	r3, r2
 801c61c:	d3e6      	bcc.n	801c5ec <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c622:	693b      	ldr	r3, [r7, #16]
 801c624:	1ad2      	subs	r2, r2, r3
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	697a      	ldr	r2, [r7, #20]
 801c62e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801c630:	6979      	ldr	r1, [r7, #20]
 801c632:	68f8      	ldr	r0, [r7, #12]
 801c634:	f7ff fb7a 	bl	801bd2c <clust2sect>
 801c638:	4602      	mov	r2, r0
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	68ba      	ldr	r2, [r7, #8]
 801c642:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	899b      	ldrh	r3, [r3, #12]
 801c64e:	461a      	mov	r2, r3
 801c650:	68bb      	ldr	r3, [r7, #8]
 801c652:	fbb3 f0f2 	udiv	r0, r3, r2
 801c656:	fb00 f202 	mul.w	r2, r0, r2
 801c65a:	1a9b      	subs	r3, r3, r2
 801c65c:	18ca      	adds	r2, r1, r3
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801c662:	2300      	movs	r3, #0
}
 801c664:	4618      	mov	r0, r3
 801c666:	3718      	adds	r7, #24
 801c668:	46bd      	mov	sp, r7
 801c66a:	bd80      	pop	{r7, pc}

0801c66c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801c66c:	b580      	push	{r7, lr}
 801c66e:	b086      	sub	sp, #24
 801c670:	af00      	add	r7, sp, #0
 801c672:	6078      	str	r0, [r7, #4]
 801c674:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801c67c:	2100      	movs	r1, #0
 801c67e:	6878      	ldr	r0, [r7, #4]
 801c680:	f7ff fe95 	bl	801c3ae <dir_sdi>
 801c684:	4603      	mov	r3, r0
 801c686:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c688:	7dfb      	ldrb	r3, [r7, #23]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d12b      	bne.n	801c6e6 <dir_alloc+0x7a>
		n = 0;
 801c68e:	2300      	movs	r3, #0
 801c690:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	69db      	ldr	r3, [r3, #28]
 801c696:	4619      	mov	r1, r3
 801c698:	68f8      	ldr	r0, [r7, #12]
 801c69a:	f7ff faa9 	bl	801bbf0 <move_window>
 801c69e:	4603      	mov	r3, r0
 801c6a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c6a2:	7dfb      	ldrb	r3, [r7, #23]
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d11d      	bne.n	801c6e4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	6a1b      	ldr	r3, [r3, #32]
 801c6ac:	781b      	ldrb	r3, [r3, #0]
 801c6ae:	2be5      	cmp	r3, #229	@ 0xe5
 801c6b0:	d004      	beq.n	801c6bc <dir_alloc+0x50>
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	6a1b      	ldr	r3, [r3, #32]
 801c6b6:	781b      	ldrb	r3, [r3, #0]
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d107      	bne.n	801c6cc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801c6bc:	693b      	ldr	r3, [r7, #16]
 801c6be:	3301      	adds	r3, #1
 801c6c0:	613b      	str	r3, [r7, #16]
 801c6c2:	693a      	ldr	r2, [r7, #16]
 801c6c4:	683b      	ldr	r3, [r7, #0]
 801c6c6:	429a      	cmp	r2, r3
 801c6c8:	d102      	bne.n	801c6d0 <dir_alloc+0x64>
 801c6ca:	e00c      	b.n	801c6e6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801c6cc:	2300      	movs	r3, #0
 801c6ce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801c6d0:	2101      	movs	r1, #1
 801c6d2:	6878      	ldr	r0, [r7, #4]
 801c6d4:	f7ff fef4 	bl	801c4c0 <dir_next>
 801c6d8:	4603      	mov	r3, r0
 801c6da:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801c6dc:	7dfb      	ldrb	r3, [r7, #23]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d0d7      	beq.n	801c692 <dir_alloc+0x26>
 801c6e2:	e000      	b.n	801c6e6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801c6e4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801c6e6:	7dfb      	ldrb	r3, [r7, #23]
 801c6e8:	2b04      	cmp	r3, #4
 801c6ea:	d101      	bne.n	801c6f0 <dir_alloc+0x84>
 801c6ec:	2307      	movs	r3, #7
 801c6ee:	75fb      	strb	r3, [r7, #23]
	return res;
 801c6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 801c6f2:	4618      	mov	r0, r3
 801c6f4:	3718      	adds	r7, #24
 801c6f6:	46bd      	mov	sp, r7
 801c6f8:	bd80      	pop	{r7, pc}

0801c6fa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801c6fa:	b580      	push	{r7, lr}
 801c6fc:	b084      	sub	sp, #16
 801c6fe:	af00      	add	r7, sp, #0
 801c700:	6078      	str	r0, [r7, #4]
 801c702:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801c704:	683b      	ldr	r3, [r7, #0]
 801c706:	331a      	adds	r3, #26
 801c708:	4618      	mov	r0, r3
 801c70a:	f7fe ffc1 	bl	801b690 <ld_word>
 801c70e:	4603      	mov	r3, r0
 801c710:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	781b      	ldrb	r3, [r3, #0]
 801c716:	2b03      	cmp	r3, #3
 801c718:	d109      	bne.n	801c72e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801c71a:	683b      	ldr	r3, [r7, #0]
 801c71c:	3314      	adds	r3, #20
 801c71e:	4618      	mov	r0, r3
 801c720:	f7fe ffb6 	bl	801b690 <ld_word>
 801c724:	4603      	mov	r3, r0
 801c726:	041b      	lsls	r3, r3, #16
 801c728:	68fa      	ldr	r2, [r7, #12]
 801c72a:	4313      	orrs	r3, r2
 801c72c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801c72e:	68fb      	ldr	r3, [r7, #12]
}
 801c730:	4618      	mov	r0, r3
 801c732:	3710      	adds	r7, #16
 801c734:	46bd      	mov	sp, r7
 801c736:	bd80      	pop	{r7, pc}

0801c738 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801c738:	b580      	push	{r7, lr}
 801c73a:	b084      	sub	sp, #16
 801c73c:	af00      	add	r7, sp, #0
 801c73e:	60f8      	str	r0, [r7, #12]
 801c740:	60b9      	str	r1, [r7, #8]
 801c742:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801c744:	68bb      	ldr	r3, [r7, #8]
 801c746:	331a      	adds	r3, #26
 801c748:	687a      	ldr	r2, [r7, #4]
 801c74a:	b292      	uxth	r2, r2
 801c74c:	4611      	mov	r1, r2
 801c74e:	4618      	mov	r0, r3
 801c750:	f7fe ffd9 	bl	801b706 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	781b      	ldrb	r3, [r3, #0]
 801c758:	2b03      	cmp	r3, #3
 801c75a:	d109      	bne.n	801c770 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801c75c:	68bb      	ldr	r3, [r7, #8]
 801c75e:	f103 0214 	add.w	r2, r3, #20
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	0c1b      	lsrs	r3, r3, #16
 801c766:	b29b      	uxth	r3, r3
 801c768:	4619      	mov	r1, r3
 801c76a:	4610      	mov	r0, r2
 801c76c:	f7fe ffcb 	bl	801b706 <st_word>
	}
}
 801c770:	bf00      	nop
 801c772:	3710      	adds	r7, #16
 801c774:	46bd      	mov	sp, r7
 801c776:	bd80      	pop	{r7, pc}

0801c778 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801c778:	b590      	push	{r4, r7, lr}
 801c77a:	b087      	sub	sp, #28
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	6078      	str	r0, [r7, #4]
 801c780:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801c782:	683b      	ldr	r3, [r7, #0]
 801c784:	331a      	adds	r3, #26
 801c786:	4618      	mov	r0, r3
 801c788:	f7fe ff82 	bl	801b690 <ld_word>
 801c78c:	4603      	mov	r3, r0
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d001      	beq.n	801c796 <cmp_lfn+0x1e>
 801c792:	2300      	movs	r3, #0
 801c794:	e059      	b.n	801c84a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801c796:	683b      	ldr	r3, [r7, #0]
 801c798:	781b      	ldrb	r3, [r3, #0]
 801c79a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c79e:	1e5a      	subs	r2, r3, #1
 801c7a0:	4613      	mov	r3, r2
 801c7a2:	005b      	lsls	r3, r3, #1
 801c7a4:	4413      	add	r3, r2
 801c7a6:	009b      	lsls	r3, r3, #2
 801c7a8:	4413      	add	r3, r2
 801c7aa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c7ac:	2301      	movs	r3, #1
 801c7ae:	81fb      	strh	r3, [r7, #14]
 801c7b0:	2300      	movs	r3, #0
 801c7b2:	613b      	str	r3, [r7, #16]
 801c7b4:	e033      	b.n	801c81e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c7b6:	4a27      	ldr	r2, [pc, #156]	@ (801c854 <cmp_lfn+0xdc>)
 801c7b8:	693b      	ldr	r3, [r7, #16]
 801c7ba:	4413      	add	r3, r2
 801c7bc:	781b      	ldrb	r3, [r3, #0]
 801c7be:	461a      	mov	r2, r3
 801c7c0:	683b      	ldr	r3, [r7, #0]
 801c7c2:	4413      	add	r3, r2
 801c7c4:	4618      	mov	r0, r3
 801c7c6:	f7fe ff63 	bl	801b690 <ld_word>
 801c7ca:	4603      	mov	r3, r0
 801c7cc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c7ce:	89fb      	ldrh	r3, [r7, #14]
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	d01a      	beq.n	801c80a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801c7d4:	697b      	ldr	r3, [r7, #20]
 801c7d6:	2bfe      	cmp	r3, #254	@ 0xfe
 801c7d8:	d812      	bhi.n	801c800 <cmp_lfn+0x88>
 801c7da:	89bb      	ldrh	r3, [r7, #12]
 801c7dc:	4618      	mov	r0, r3
 801c7de:	f001 ff71 	bl	801e6c4 <ff_wtoupper>
 801c7e2:	4603      	mov	r3, r0
 801c7e4:	461c      	mov	r4, r3
 801c7e6:	697b      	ldr	r3, [r7, #20]
 801c7e8:	1c5a      	adds	r2, r3, #1
 801c7ea:	617a      	str	r2, [r7, #20]
 801c7ec:	005b      	lsls	r3, r3, #1
 801c7ee:	687a      	ldr	r2, [r7, #4]
 801c7f0:	4413      	add	r3, r2
 801c7f2:	881b      	ldrh	r3, [r3, #0]
 801c7f4:	4618      	mov	r0, r3
 801c7f6:	f001 ff65 	bl	801e6c4 <ff_wtoupper>
 801c7fa:	4603      	mov	r3, r0
 801c7fc:	429c      	cmp	r4, r3
 801c7fe:	d001      	beq.n	801c804 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801c800:	2300      	movs	r3, #0
 801c802:	e022      	b.n	801c84a <cmp_lfn+0xd2>
			}
			wc = uc;
 801c804:	89bb      	ldrh	r3, [r7, #12]
 801c806:	81fb      	strh	r3, [r7, #14]
 801c808:	e006      	b.n	801c818 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c80a:	89bb      	ldrh	r3, [r7, #12]
 801c80c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c810:	4293      	cmp	r3, r2
 801c812:	d001      	beq.n	801c818 <cmp_lfn+0xa0>
 801c814:	2300      	movs	r3, #0
 801c816:	e018      	b.n	801c84a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c818:	693b      	ldr	r3, [r7, #16]
 801c81a:	3301      	adds	r3, #1
 801c81c:	613b      	str	r3, [r7, #16]
 801c81e:	693b      	ldr	r3, [r7, #16]
 801c820:	2b0c      	cmp	r3, #12
 801c822:	d9c8      	bls.n	801c7b6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801c824:	683b      	ldr	r3, [r7, #0]
 801c826:	781b      	ldrb	r3, [r3, #0]
 801c828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d00b      	beq.n	801c848 <cmp_lfn+0xd0>
 801c830:	89fb      	ldrh	r3, [r7, #14]
 801c832:	2b00      	cmp	r3, #0
 801c834:	d008      	beq.n	801c848 <cmp_lfn+0xd0>
 801c836:	697b      	ldr	r3, [r7, #20]
 801c838:	005b      	lsls	r3, r3, #1
 801c83a:	687a      	ldr	r2, [r7, #4]
 801c83c:	4413      	add	r3, r2
 801c83e:	881b      	ldrh	r3, [r3, #0]
 801c840:	2b00      	cmp	r3, #0
 801c842:	d001      	beq.n	801c848 <cmp_lfn+0xd0>
 801c844:	2300      	movs	r3, #0
 801c846:	e000      	b.n	801c84a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801c848:	2301      	movs	r3, #1
}
 801c84a:	4618      	mov	r0, r3
 801c84c:	371c      	adds	r7, #28
 801c84e:	46bd      	mov	sp, r7
 801c850:	bd90      	pop	{r4, r7, pc}
 801c852:	bf00      	nop
 801c854:	0801f35c 	.word	0x0801f35c

0801c858 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801c858:	b580      	push	{r7, lr}
 801c85a:	b086      	sub	sp, #24
 801c85c:	af00      	add	r7, sp, #0
 801c85e:	6078      	str	r0, [r7, #4]
 801c860:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801c862:	683b      	ldr	r3, [r7, #0]
 801c864:	331a      	adds	r3, #26
 801c866:	4618      	mov	r0, r3
 801c868:	f7fe ff12 	bl	801b690 <ld_word>
 801c86c:	4603      	mov	r3, r0
 801c86e:	2b00      	cmp	r3, #0
 801c870:	d001      	beq.n	801c876 <pick_lfn+0x1e>
 801c872:	2300      	movs	r3, #0
 801c874:	e04d      	b.n	801c912 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801c876:	683b      	ldr	r3, [r7, #0]
 801c878:	781b      	ldrb	r3, [r3, #0]
 801c87a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c87e:	1e5a      	subs	r2, r3, #1
 801c880:	4613      	mov	r3, r2
 801c882:	005b      	lsls	r3, r3, #1
 801c884:	4413      	add	r3, r2
 801c886:	009b      	lsls	r3, r3, #2
 801c888:	4413      	add	r3, r2
 801c88a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c88c:	2301      	movs	r3, #1
 801c88e:	81fb      	strh	r3, [r7, #14]
 801c890:	2300      	movs	r3, #0
 801c892:	613b      	str	r3, [r7, #16]
 801c894:	e028      	b.n	801c8e8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c896:	4a21      	ldr	r2, [pc, #132]	@ (801c91c <pick_lfn+0xc4>)
 801c898:	693b      	ldr	r3, [r7, #16]
 801c89a:	4413      	add	r3, r2
 801c89c:	781b      	ldrb	r3, [r3, #0]
 801c89e:	461a      	mov	r2, r3
 801c8a0:	683b      	ldr	r3, [r7, #0]
 801c8a2:	4413      	add	r3, r2
 801c8a4:	4618      	mov	r0, r3
 801c8a6:	f7fe fef3 	bl	801b690 <ld_word>
 801c8aa:	4603      	mov	r3, r0
 801c8ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c8ae:	89fb      	ldrh	r3, [r7, #14]
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	d00f      	beq.n	801c8d4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801c8b4:	697b      	ldr	r3, [r7, #20]
 801c8b6:	2bfe      	cmp	r3, #254	@ 0xfe
 801c8b8:	d901      	bls.n	801c8be <pick_lfn+0x66>
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	e029      	b.n	801c912 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801c8be:	89bb      	ldrh	r3, [r7, #12]
 801c8c0:	81fb      	strh	r3, [r7, #14]
 801c8c2:	697b      	ldr	r3, [r7, #20]
 801c8c4:	1c5a      	adds	r2, r3, #1
 801c8c6:	617a      	str	r2, [r7, #20]
 801c8c8:	005b      	lsls	r3, r3, #1
 801c8ca:	687a      	ldr	r2, [r7, #4]
 801c8cc:	4413      	add	r3, r2
 801c8ce:	89fa      	ldrh	r2, [r7, #14]
 801c8d0:	801a      	strh	r2, [r3, #0]
 801c8d2:	e006      	b.n	801c8e2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c8d4:	89bb      	ldrh	r3, [r7, #12]
 801c8d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c8da:	4293      	cmp	r3, r2
 801c8dc:	d001      	beq.n	801c8e2 <pick_lfn+0x8a>
 801c8de:	2300      	movs	r3, #0
 801c8e0:	e017      	b.n	801c912 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c8e2:	693b      	ldr	r3, [r7, #16]
 801c8e4:	3301      	adds	r3, #1
 801c8e6:	613b      	str	r3, [r7, #16]
 801c8e8:	693b      	ldr	r3, [r7, #16]
 801c8ea:	2b0c      	cmp	r3, #12
 801c8ec:	d9d3      	bls.n	801c896 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801c8ee:	683b      	ldr	r3, [r7, #0]
 801c8f0:	781b      	ldrb	r3, [r3, #0]
 801c8f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d00a      	beq.n	801c910 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801c8fa:	697b      	ldr	r3, [r7, #20]
 801c8fc:	2bfe      	cmp	r3, #254	@ 0xfe
 801c8fe:	d901      	bls.n	801c904 <pick_lfn+0xac>
 801c900:	2300      	movs	r3, #0
 801c902:	e006      	b.n	801c912 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801c904:	697b      	ldr	r3, [r7, #20]
 801c906:	005b      	lsls	r3, r3, #1
 801c908:	687a      	ldr	r2, [r7, #4]
 801c90a:	4413      	add	r3, r2
 801c90c:	2200      	movs	r2, #0
 801c90e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801c910:	2301      	movs	r3, #1
}
 801c912:	4618      	mov	r0, r3
 801c914:	3718      	adds	r7, #24
 801c916:	46bd      	mov	sp, r7
 801c918:	bd80      	pop	{r7, pc}
 801c91a:	bf00      	nop
 801c91c:	0801f35c 	.word	0x0801f35c

0801c920 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801c920:	b580      	push	{r7, lr}
 801c922:	b088      	sub	sp, #32
 801c924:	af00      	add	r7, sp, #0
 801c926:	60f8      	str	r0, [r7, #12]
 801c928:	60b9      	str	r1, [r7, #8]
 801c92a:	4611      	mov	r1, r2
 801c92c:	461a      	mov	r2, r3
 801c92e:	460b      	mov	r3, r1
 801c930:	71fb      	strb	r3, [r7, #7]
 801c932:	4613      	mov	r3, r2
 801c934:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801c936:	68bb      	ldr	r3, [r7, #8]
 801c938:	330d      	adds	r3, #13
 801c93a:	79ba      	ldrb	r2, [r7, #6]
 801c93c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801c93e:	68bb      	ldr	r3, [r7, #8]
 801c940:	330b      	adds	r3, #11
 801c942:	220f      	movs	r2, #15
 801c944:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801c946:	68bb      	ldr	r3, [r7, #8]
 801c948:	330c      	adds	r3, #12
 801c94a:	2200      	movs	r2, #0
 801c94c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801c94e:	68bb      	ldr	r3, [r7, #8]
 801c950:	331a      	adds	r3, #26
 801c952:	2100      	movs	r1, #0
 801c954:	4618      	mov	r0, r3
 801c956:	f7fe fed6 	bl	801b706 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801c95a:	79fb      	ldrb	r3, [r7, #7]
 801c95c:	1e5a      	subs	r2, r3, #1
 801c95e:	4613      	mov	r3, r2
 801c960:	005b      	lsls	r3, r3, #1
 801c962:	4413      	add	r3, r2
 801c964:	009b      	lsls	r3, r3, #2
 801c966:	4413      	add	r3, r2
 801c968:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801c96a:	2300      	movs	r3, #0
 801c96c:	82fb      	strh	r3, [r7, #22]
 801c96e:	2300      	movs	r3, #0
 801c970:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801c972:	8afb      	ldrh	r3, [r7, #22]
 801c974:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c978:	4293      	cmp	r3, r2
 801c97a:	d007      	beq.n	801c98c <put_lfn+0x6c>
 801c97c:	69fb      	ldr	r3, [r7, #28]
 801c97e:	1c5a      	adds	r2, r3, #1
 801c980:	61fa      	str	r2, [r7, #28]
 801c982:	005b      	lsls	r3, r3, #1
 801c984:	68fa      	ldr	r2, [r7, #12]
 801c986:	4413      	add	r3, r2
 801c988:	881b      	ldrh	r3, [r3, #0]
 801c98a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801c98c:	4a17      	ldr	r2, [pc, #92]	@ (801c9ec <put_lfn+0xcc>)
 801c98e:	69bb      	ldr	r3, [r7, #24]
 801c990:	4413      	add	r3, r2
 801c992:	781b      	ldrb	r3, [r3, #0]
 801c994:	461a      	mov	r2, r3
 801c996:	68bb      	ldr	r3, [r7, #8]
 801c998:	4413      	add	r3, r2
 801c99a:	8afa      	ldrh	r2, [r7, #22]
 801c99c:	4611      	mov	r1, r2
 801c99e:	4618      	mov	r0, r3
 801c9a0:	f7fe feb1 	bl	801b706 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801c9a4:	8afb      	ldrh	r3, [r7, #22]
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d102      	bne.n	801c9b0 <put_lfn+0x90>
 801c9aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c9ae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801c9b0:	69bb      	ldr	r3, [r7, #24]
 801c9b2:	3301      	adds	r3, #1
 801c9b4:	61bb      	str	r3, [r7, #24]
 801c9b6:	69bb      	ldr	r3, [r7, #24]
 801c9b8:	2b0c      	cmp	r3, #12
 801c9ba:	d9da      	bls.n	801c972 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801c9bc:	8afb      	ldrh	r3, [r7, #22]
 801c9be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c9c2:	4293      	cmp	r3, r2
 801c9c4:	d006      	beq.n	801c9d4 <put_lfn+0xb4>
 801c9c6:	69fb      	ldr	r3, [r7, #28]
 801c9c8:	005b      	lsls	r3, r3, #1
 801c9ca:	68fa      	ldr	r2, [r7, #12]
 801c9cc:	4413      	add	r3, r2
 801c9ce:	881b      	ldrh	r3, [r3, #0]
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d103      	bne.n	801c9dc <put_lfn+0xbc>
 801c9d4:	79fb      	ldrb	r3, [r7, #7]
 801c9d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c9da:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801c9dc:	68bb      	ldr	r3, [r7, #8]
 801c9de:	79fa      	ldrb	r2, [r7, #7]
 801c9e0:	701a      	strb	r2, [r3, #0]
}
 801c9e2:	bf00      	nop
 801c9e4:	3720      	adds	r7, #32
 801c9e6:	46bd      	mov	sp, r7
 801c9e8:	bd80      	pop	{r7, pc}
 801c9ea:	bf00      	nop
 801c9ec:	0801f35c 	.word	0x0801f35c

0801c9f0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801c9f0:	b580      	push	{r7, lr}
 801c9f2:	b08c      	sub	sp, #48	@ 0x30
 801c9f4:	af00      	add	r7, sp, #0
 801c9f6:	60f8      	str	r0, [r7, #12]
 801c9f8:	60b9      	str	r1, [r7, #8]
 801c9fa:	607a      	str	r2, [r7, #4]
 801c9fc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801c9fe:	220b      	movs	r2, #11
 801ca00:	68b9      	ldr	r1, [r7, #8]
 801ca02:	68f8      	ldr	r0, [r7, #12]
 801ca04:	f7fe fec6 	bl	801b794 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801ca08:	683b      	ldr	r3, [r7, #0]
 801ca0a:	2b05      	cmp	r3, #5
 801ca0c:	d929      	bls.n	801ca62 <gen_numname+0x72>
		sr = seq;
 801ca0e:	683b      	ldr	r3, [r7, #0]
 801ca10:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801ca12:	e020      	b.n	801ca56 <gen_numname+0x66>
			wc = *lfn++;
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	1c9a      	adds	r2, r3, #2
 801ca18:	607a      	str	r2, [r7, #4]
 801ca1a:	881b      	ldrh	r3, [r3, #0]
 801ca1c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801ca1e:	2300      	movs	r3, #0
 801ca20:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ca22:	e015      	b.n	801ca50 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801ca24:	69fb      	ldr	r3, [r7, #28]
 801ca26:	005a      	lsls	r2, r3, #1
 801ca28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ca2a:	f003 0301 	and.w	r3, r3, #1
 801ca2e:	4413      	add	r3, r2
 801ca30:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801ca32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ca34:	085b      	lsrs	r3, r3, #1
 801ca36:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801ca38:	69fb      	ldr	r3, [r7, #28]
 801ca3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d003      	beq.n	801ca4a <gen_numname+0x5a>
 801ca42:	69fa      	ldr	r2, [r7, #28]
 801ca44:	4b30      	ldr	r3, [pc, #192]	@ (801cb08 <gen_numname+0x118>)
 801ca46:	4053      	eors	r3, r2
 801ca48:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801ca4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca4c:	3301      	adds	r3, #1
 801ca4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ca50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca52:	2b0f      	cmp	r3, #15
 801ca54:	d9e6      	bls.n	801ca24 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	881b      	ldrh	r3, [r3, #0]
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d1da      	bne.n	801ca14 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801ca5e:	69fb      	ldr	r3, [r7, #28]
 801ca60:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801ca62:	2307      	movs	r3, #7
 801ca64:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801ca66:	683b      	ldr	r3, [r7, #0]
 801ca68:	b2db      	uxtb	r3, r3
 801ca6a:	f003 030f 	and.w	r3, r3, #15
 801ca6e:	b2db      	uxtb	r3, r3
 801ca70:	3330      	adds	r3, #48	@ 0x30
 801ca72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801ca76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801ca7a:	2b39      	cmp	r3, #57	@ 0x39
 801ca7c:	d904      	bls.n	801ca88 <gen_numname+0x98>
 801ca7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801ca82:	3307      	adds	r3, #7
 801ca84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801ca88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca8a:	1e5a      	subs	r2, r3, #1
 801ca8c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801ca8e:	3330      	adds	r3, #48	@ 0x30
 801ca90:	443b      	add	r3, r7
 801ca92:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801ca96:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801ca9a:	683b      	ldr	r3, [r7, #0]
 801ca9c:	091b      	lsrs	r3, r3, #4
 801ca9e:	603b      	str	r3, [r7, #0]
	} while (seq);
 801caa0:	683b      	ldr	r3, [r7, #0]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d1df      	bne.n	801ca66 <gen_numname+0x76>
	ns[i] = '~';
 801caa6:	f107 0214 	add.w	r2, r7, #20
 801caaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801caac:	4413      	add	r3, r2
 801caae:	227e      	movs	r2, #126	@ 0x7e
 801cab0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801cab2:	2300      	movs	r3, #0
 801cab4:	627b      	str	r3, [r7, #36]	@ 0x24
 801cab6:	e002      	b.n	801cabe <gen_numname+0xce>
 801cab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caba:	3301      	adds	r3, #1
 801cabc:	627b      	str	r3, [r7, #36]	@ 0x24
 801cabe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cac2:	429a      	cmp	r2, r3
 801cac4:	d205      	bcs.n	801cad2 <gen_numname+0xe2>
 801cac6:	68fa      	ldr	r2, [r7, #12]
 801cac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caca:	4413      	add	r3, r2
 801cacc:	781b      	ldrb	r3, [r3, #0]
 801cace:	2b20      	cmp	r3, #32
 801cad0:	d1f2      	bne.n	801cab8 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801cad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cad4:	2b07      	cmp	r3, #7
 801cad6:	d807      	bhi.n	801cae8 <gen_numname+0xf8>
 801cad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cada:	1c5a      	adds	r2, r3, #1
 801cadc:	62ba      	str	r2, [r7, #40]	@ 0x28
 801cade:	3330      	adds	r3, #48	@ 0x30
 801cae0:	443b      	add	r3, r7
 801cae2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801cae6:	e000      	b.n	801caea <gen_numname+0xfa>
 801cae8:	2120      	movs	r1, #32
 801caea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caec:	1c5a      	adds	r2, r3, #1
 801caee:	627a      	str	r2, [r7, #36]	@ 0x24
 801caf0:	68fa      	ldr	r2, [r7, #12]
 801caf2:	4413      	add	r3, r2
 801caf4:	460a      	mov	r2, r1
 801caf6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801caf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cafa:	2b07      	cmp	r3, #7
 801cafc:	d9e9      	bls.n	801cad2 <gen_numname+0xe2>
}
 801cafe:	bf00      	nop
 801cb00:	bf00      	nop
 801cb02:	3730      	adds	r7, #48	@ 0x30
 801cb04:	46bd      	mov	sp, r7
 801cb06:	bd80      	pop	{r7, pc}
 801cb08:	00011021 	.word	0x00011021

0801cb0c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801cb0c:	b480      	push	{r7}
 801cb0e:	b085      	sub	sp, #20
 801cb10:	af00      	add	r7, sp, #0
 801cb12:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801cb14:	2300      	movs	r3, #0
 801cb16:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801cb18:	230b      	movs	r3, #11
 801cb1a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801cb1c:	7bfb      	ldrb	r3, [r7, #15]
 801cb1e:	b2da      	uxtb	r2, r3
 801cb20:	0852      	lsrs	r2, r2, #1
 801cb22:	01db      	lsls	r3, r3, #7
 801cb24:	4313      	orrs	r3, r2
 801cb26:	b2da      	uxtb	r2, r3
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	1c59      	adds	r1, r3, #1
 801cb2c:	6079      	str	r1, [r7, #4]
 801cb2e:	781b      	ldrb	r3, [r3, #0]
 801cb30:	4413      	add	r3, r2
 801cb32:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801cb34:	68bb      	ldr	r3, [r7, #8]
 801cb36:	3b01      	subs	r3, #1
 801cb38:	60bb      	str	r3, [r7, #8]
 801cb3a:	68bb      	ldr	r3, [r7, #8]
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	d1ed      	bne.n	801cb1c <sum_sfn+0x10>
	return sum;
 801cb40:	7bfb      	ldrb	r3, [r7, #15]
}
 801cb42:	4618      	mov	r0, r3
 801cb44:	3714      	adds	r7, #20
 801cb46:	46bd      	mov	sp, r7
 801cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb4c:	4770      	bx	lr

0801cb4e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801cb4e:	b580      	push	{r7, lr}
 801cb50:	b086      	sub	sp, #24
 801cb52:	af00      	add	r7, sp, #0
 801cb54:	6078      	str	r0, [r7, #4]
 801cb56:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801cb58:	2304      	movs	r3, #4
 801cb5a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801cb62:	23ff      	movs	r3, #255	@ 0xff
 801cb64:	757b      	strb	r3, [r7, #21]
 801cb66:	23ff      	movs	r3, #255	@ 0xff
 801cb68:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801cb6a:	e081      	b.n	801cc70 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	69db      	ldr	r3, [r3, #28]
 801cb70:	4619      	mov	r1, r3
 801cb72:	6938      	ldr	r0, [r7, #16]
 801cb74:	f7ff f83c 	bl	801bbf0 <move_window>
 801cb78:	4603      	mov	r3, r0
 801cb7a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801cb7c:	7dfb      	ldrb	r3, [r7, #23]
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	d17c      	bne.n	801cc7c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	6a1b      	ldr	r3, [r3, #32]
 801cb86:	781b      	ldrb	r3, [r3, #0]
 801cb88:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801cb8a:	7dbb      	ldrb	r3, [r7, #22]
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d102      	bne.n	801cb96 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801cb90:	2304      	movs	r3, #4
 801cb92:	75fb      	strb	r3, [r7, #23]
 801cb94:	e077      	b.n	801cc86 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	6a1b      	ldr	r3, [r3, #32]
 801cb9a:	330b      	adds	r3, #11
 801cb9c:	781b      	ldrb	r3, [r3, #0]
 801cb9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cba2:	73fb      	strb	r3, [r7, #15]
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	7bfa      	ldrb	r2, [r7, #15]
 801cba8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801cbaa:	7dbb      	ldrb	r3, [r7, #22]
 801cbac:	2be5      	cmp	r3, #229	@ 0xe5
 801cbae:	d00e      	beq.n	801cbce <dir_read+0x80>
 801cbb0:	7dbb      	ldrb	r3, [r7, #22]
 801cbb2:	2b2e      	cmp	r3, #46	@ 0x2e
 801cbb4:	d00b      	beq.n	801cbce <dir_read+0x80>
 801cbb6:	7bfb      	ldrb	r3, [r7, #15]
 801cbb8:	f023 0320 	bic.w	r3, r3, #32
 801cbbc:	2b08      	cmp	r3, #8
 801cbbe:	bf0c      	ite	eq
 801cbc0:	2301      	moveq	r3, #1
 801cbc2:	2300      	movne	r3, #0
 801cbc4:	b2db      	uxtb	r3, r3
 801cbc6:	461a      	mov	r2, r3
 801cbc8:	683b      	ldr	r3, [r7, #0]
 801cbca:	4293      	cmp	r3, r2
 801cbcc:	d002      	beq.n	801cbd4 <dir_read+0x86>
				ord = 0xFF;
 801cbce:	23ff      	movs	r3, #255	@ 0xff
 801cbd0:	757b      	strb	r3, [r7, #21]
 801cbd2:	e044      	b.n	801cc5e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801cbd4:	7bfb      	ldrb	r3, [r7, #15]
 801cbd6:	2b0f      	cmp	r3, #15
 801cbd8:	d12f      	bne.n	801cc3a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801cbda:	7dbb      	ldrb	r3, [r7, #22]
 801cbdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	d00d      	beq.n	801cc00 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	6a1b      	ldr	r3, [r3, #32]
 801cbe8:	7b5b      	ldrb	r3, [r3, #13]
 801cbea:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801cbec:	7dbb      	ldrb	r3, [r7, #22]
 801cbee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801cbf2:	75bb      	strb	r3, [r7, #22]
 801cbf4:	7dbb      	ldrb	r3, [r7, #22]
 801cbf6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	695a      	ldr	r2, [r3, #20]
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801cc00:	7dba      	ldrb	r2, [r7, #22]
 801cc02:	7d7b      	ldrb	r3, [r7, #21]
 801cc04:	429a      	cmp	r2, r3
 801cc06:	d115      	bne.n	801cc34 <dir_read+0xe6>
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	6a1b      	ldr	r3, [r3, #32]
 801cc0c:	330d      	adds	r3, #13
 801cc0e:	781b      	ldrb	r3, [r3, #0]
 801cc10:	7d3a      	ldrb	r2, [r7, #20]
 801cc12:	429a      	cmp	r2, r3
 801cc14:	d10e      	bne.n	801cc34 <dir_read+0xe6>
 801cc16:	693b      	ldr	r3, [r7, #16]
 801cc18:	691a      	ldr	r2, [r3, #16]
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	6a1b      	ldr	r3, [r3, #32]
 801cc1e:	4619      	mov	r1, r3
 801cc20:	4610      	mov	r0, r2
 801cc22:	f7ff fe19 	bl	801c858 <pick_lfn>
 801cc26:	4603      	mov	r3, r0
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d003      	beq.n	801cc34 <dir_read+0xe6>
 801cc2c:	7d7b      	ldrb	r3, [r7, #21]
 801cc2e:	3b01      	subs	r3, #1
 801cc30:	b2db      	uxtb	r3, r3
 801cc32:	e000      	b.n	801cc36 <dir_read+0xe8>
 801cc34:	23ff      	movs	r3, #255	@ 0xff
 801cc36:	757b      	strb	r3, [r7, #21]
 801cc38:	e011      	b.n	801cc5e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801cc3a:	7d7b      	ldrb	r3, [r7, #21]
 801cc3c:	2b00      	cmp	r3, #0
 801cc3e:	d109      	bne.n	801cc54 <dir_read+0x106>
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	6a1b      	ldr	r3, [r3, #32]
 801cc44:	4618      	mov	r0, r3
 801cc46:	f7ff ff61 	bl	801cb0c <sum_sfn>
 801cc4a:	4603      	mov	r3, r0
 801cc4c:	461a      	mov	r2, r3
 801cc4e:	7d3b      	ldrb	r3, [r7, #20]
 801cc50:	4293      	cmp	r3, r2
 801cc52:	d015      	beq.n	801cc80 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	f04f 32ff 	mov.w	r2, #4294967295
 801cc5a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801cc5c:	e010      	b.n	801cc80 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801cc5e:	2100      	movs	r1, #0
 801cc60:	6878      	ldr	r0, [r7, #4]
 801cc62:	f7ff fc2d 	bl	801c4c0 <dir_next>
 801cc66:	4603      	mov	r3, r0
 801cc68:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801cc6a:	7dfb      	ldrb	r3, [r7, #23]
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d109      	bne.n	801cc84 <dir_read+0x136>
	while (dp->sect) {
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	69db      	ldr	r3, [r3, #28]
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	f47f af79 	bne.w	801cb6c <dir_read+0x1e>
 801cc7a:	e004      	b.n	801cc86 <dir_read+0x138>
		if (res != FR_OK) break;
 801cc7c:	bf00      	nop
 801cc7e:	e002      	b.n	801cc86 <dir_read+0x138>
					break;
 801cc80:	bf00      	nop
 801cc82:	e000      	b.n	801cc86 <dir_read+0x138>
		if (res != FR_OK) break;
 801cc84:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801cc86:	7dfb      	ldrb	r3, [r7, #23]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d002      	beq.n	801cc92 <dir_read+0x144>
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	2200      	movs	r2, #0
 801cc90:	61da      	str	r2, [r3, #28]
	return res;
 801cc92:	7dfb      	ldrb	r3, [r7, #23]
}
 801cc94:	4618      	mov	r0, r3
 801cc96:	3718      	adds	r7, #24
 801cc98:	46bd      	mov	sp, r7
 801cc9a:	bd80      	pop	{r7, pc}

0801cc9c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b086      	sub	sp, #24
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	681b      	ldr	r3, [r3, #0]
 801cca8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801ccaa:	2100      	movs	r1, #0
 801ccac:	6878      	ldr	r0, [r7, #4]
 801ccae:	f7ff fb7e 	bl	801c3ae <dir_sdi>
 801ccb2:	4603      	mov	r3, r0
 801ccb4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801ccb6:	7dfb      	ldrb	r3, [r7, #23]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d001      	beq.n	801ccc0 <dir_find+0x24>
 801ccbc:	7dfb      	ldrb	r3, [r7, #23]
 801ccbe:	e0a9      	b.n	801ce14 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801ccc0:	23ff      	movs	r3, #255	@ 0xff
 801ccc2:	753b      	strb	r3, [r7, #20]
 801ccc4:	7d3b      	ldrb	r3, [r7, #20]
 801ccc6:	757b      	strb	r3, [r7, #21]
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	f04f 32ff 	mov.w	r2, #4294967295
 801ccce:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	69db      	ldr	r3, [r3, #28]
 801ccd4:	4619      	mov	r1, r3
 801ccd6:	6938      	ldr	r0, [r7, #16]
 801ccd8:	f7fe ff8a 	bl	801bbf0 <move_window>
 801ccdc:	4603      	mov	r3, r0
 801ccde:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801cce0:	7dfb      	ldrb	r3, [r7, #23]
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	f040 8090 	bne.w	801ce08 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	6a1b      	ldr	r3, [r3, #32]
 801ccec:	781b      	ldrb	r3, [r3, #0]
 801ccee:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801ccf0:	7dbb      	ldrb	r3, [r7, #22]
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d102      	bne.n	801ccfc <dir_find+0x60>
 801ccf6:	2304      	movs	r3, #4
 801ccf8:	75fb      	strb	r3, [r7, #23]
 801ccfa:	e08a      	b.n	801ce12 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	6a1b      	ldr	r3, [r3, #32]
 801cd00:	330b      	adds	r3, #11
 801cd02:	781b      	ldrb	r3, [r3, #0]
 801cd04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cd08:	73fb      	strb	r3, [r7, #15]
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	7bfa      	ldrb	r2, [r7, #15]
 801cd0e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801cd10:	7dbb      	ldrb	r3, [r7, #22]
 801cd12:	2be5      	cmp	r3, #229	@ 0xe5
 801cd14:	d007      	beq.n	801cd26 <dir_find+0x8a>
 801cd16:	7bfb      	ldrb	r3, [r7, #15]
 801cd18:	f003 0308 	and.w	r3, r3, #8
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d009      	beq.n	801cd34 <dir_find+0x98>
 801cd20:	7bfb      	ldrb	r3, [r7, #15]
 801cd22:	2b0f      	cmp	r3, #15
 801cd24:	d006      	beq.n	801cd34 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801cd26:	23ff      	movs	r3, #255	@ 0xff
 801cd28:	757b      	strb	r3, [r7, #21]
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	f04f 32ff 	mov.w	r2, #4294967295
 801cd30:	631a      	str	r2, [r3, #48]	@ 0x30
 801cd32:	e05e      	b.n	801cdf2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801cd34:	7bfb      	ldrb	r3, [r7, #15]
 801cd36:	2b0f      	cmp	r3, #15
 801cd38:	d136      	bne.n	801cda8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801cd40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d154      	bne.n	801cdf2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801cd48:	7dbb      	ldrb	r3, [r7, #22]
 801cd4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	d00d      	beq.n	801cd6e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	6a1b      	ldr	r3, [r3, #32]
 801cd56:	7b5b      	ldrb	r3, [r3, #13]
 801cd58:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801cd5a:	7dbb      	ldrb	r3, [r7, #22]
 801cd5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801cd60:	75bb      	strb	r3, [r7, #22]
 801cd62:	7dbb      	ldrb	r3, [r7, #22]
 801cd64:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	695a      	ldr	r2, [r3, #20]
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801cd6e:	7dba      	ldrb	r2, [r7, #22]
 801cd70:	7d7b      	ldrb	r3, [r7, #21]
 801cd72:	429a      	cmp	r2, r3
 801cd74:	d115      	bne.n	801cda2 <dir_find+0x106>
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	6a1b      	ldr	r3, [r3, #32]
 801cd7a:	330d      	adds	r3, #13
 801cd7c:	781b      	ldrb	r3, [r3, #0]
 801cd7e:	7d3a      	ldrb	r2, [r7, #20]
 801cd80:	429a      	cmp	r2, r3
 801cd82:	d10e      	bne.n	801cda2 <dir_find+0x106>
 801cd84:	693b      	ldr	r3, [r7, #16]
 801cd86:	691a      	ldr	r2, [r3, #16]
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	6a1b      	ldr	r3, [r3, #32]
 801cd8c:	4619      	mov	r1, r3
 801cd8e:	4610      	mov	r0, r2
 801cd90:	f7ff fcf2 	bl	801c778 <cmp_lfn>
 801cd94:	4603      	mov	r3, r0
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d003      	beq.n	801cda2 <dir_find+0x106>
 801cd9a:	7d7b      	ldrb	r3, [r7, #21]
 801cd9c:	3b01      	subs	r3, #1
 801cd9e:	b2db      	uxtb	r3, r3
 801cda0:	e000      	b.n	801cda4 <dir_find+0x108>
 801cda2:	23ff      	movs	r3, #255	@ 0xff
 801cda4:	757b      	strb	r3, [r7, #21]
 801cda6:	e024      	b.n	801cdf2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801cda8:	7d7b      	ldrb	r3, [r7, #21]
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d109      	bne.n	801cdc2 <dir_find+0x126>
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	6a1b      	ldr	r3, [r3, #32]
 801cdb2:	4618      	mov	r0, r3
 801cdb4:	f7ff feaa 	bl	801cb0c <sum_sfn>
 801cdb8:	4603      	mov	r3, r0
 801cdba:	461a      	mov	r2, r3
 801cdbc:	7d3b      	ldrb	r3, [r7, #20]
 801cdbe:	4293      	cmp	r3, r2
 801cdc0:	d024      	beq.n	801ce0c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801cdc8:	f003 0301 	and.w	r3, r3, #1
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	d10a      	bne.n	801cde6 <dir_find+0x14a>
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	6a18      	ldr	r0, [r3, #32]
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	3324      	adds	r3, #36	@ 0x24
 801cdd8:	220b      	movs	r2, #11
 801cdda:	4619      	mov	r1, r3
 801cddc:	f7fe fd16 	bl	801b80c <mem_cmp>
 801cde0:	4603      	mov	r3, r0
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	d014      	beq.n	801ce10 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801cde6:	23ff      	movs	r3, #255	@ 0xff
 801cde8:	757b      	strb	r3, [r7, #21]
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	f04f 32ff 	mov.w	r2, #4294967295
 801cdf0:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801cdf2:	2100      	movs	r1, #0
 801cdf4:	6878      	ldr	r0, [r7, #4]
 801cdf6:	f7ff fb63 	bl	801c4c0 <dir_next>
 801cdfa:	4603      	mov	r3, r0
 801cdfc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801cdfe:	7dfb      	ldrb	r3, [r7, #23]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	f43f af65 	beq.w	801ccd0 <dir_find+0x34>
 801ce06:	e004      	b.n	801ce12 <dir_find+0x176>
		if (res != FR_OK) break;
 801ce08:	bf00      	nop
 801ce0a:	e002      	b.n	801ce12 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801ce0c:	bf00      	nop
 801ce0e:	e000      	b.n	801ce12 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801ce10:	bf00      	nop

	return res;
 801ce12:	7dfb      	ldrb	r3, [r7, #23]
}
 801ce14:	4618      	mov	r0, r3
 801ce16:	3718      	adds	r7, #24
 801ce18:	46bd      	mov	sp, r7
 801ce1a:	bd80      	pop	{r7, pc}

0801ce1c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801ce1c:	b580      	push	{r7, lr}
 801ce1e:	b08c      	sub	sp, #48	@ 0x30
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801ce30:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801ce34:	2b00      	cmp	r3, #0
 801ce36:	d001      	beq.n	801ce3c <dir_register+0x20>
 801ce38:	2306      	movs	r3, #6
 801ce3a:	e0e0      	b.n	801cffe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	627b      	str	r3, [r7, #36]	@ 0x24
 801ce40:	e002      	b.n	801ce48 <dir_register+0x2c>
 801ce42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce44:	3301      	adds	r3, #1
 801ce46:	627b      	str	r3, [r7, #36]	@ 0x24
 801ce48:	69fb      	ldr	r3, [r7, #28]
 801ce4a:	691a      	ldr	r2, [r3, #16]
 801ce4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce4e:	005b      	lsls	r3, r3, #1
 801ce50:	4413      	add	r3, r2
 801ce52:	881b      	ldrh	r3, [r3, #0]
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d1f4      	bne.n	801ce42 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801ce5e:	f107 030c 	add.w	r3, r7, #12
 801ce62:	220c      	movs	r2, #12
 801ce64:	4618      	mov	r0, r3
 801ce66:	f7fe fc95 	bl	801b794 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801ce6a:	7dfb      	ldrb	r3, [r7, #23]
 801ce6c:	f003 0301 	and.w	r3, r3, #1
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d032      	beq.n	801ceda <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	2240      	movs	r2, #64	@ 0x40
 801ce78:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801ce7c:	2301      	movs	r3, #1
 801ce7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ce80:	e016      	b.n	801ceb0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801ce88:	69fb      	ldr	r3, [r7, #28]
 801ce8a:	691a      	ldr	r2, [r3, #16]
 801ce8c:	f107 010c 	add.w	r1, r7, #12
 801ce90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce92:	f7ff fdad 	bl	801c9f0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801ce96:	6878      	ldr	r0, [r7, #4]
 801ce98:	f7ff ff00 	bl	801cc9c <dir_find>
 801ce9c:	4603      	mov	r3, r0
 801ce9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801cea2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d106      	bne.n	801ceb8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801ceaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ceac:	3301      	adds	r3, #1
 801ceae:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ceb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ceb2:	2b63      	cmp	r3, #99	@ 0x63
 801ceb4:	d9e5      	bls.n	801ce82 <dir_register+0x66>
 801ceb6:	e000      	b.n	801ceba <dir_register+0x9e>
			if (res != FR_OK) break;
 801ceb8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801ceba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cebc:	2b64      	cmp	r3, #100	@ 0x64
 801cebe:	d101      	bne.n	801cec4 <dir_register+0xa8>
 801cec0:	2307      	movs	r3, #7
 801cec2:	e09c      	b.n	801cffe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801cec4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801cec8:	2b04      	cmp	r3, #4
 801ceca:	d002      	beq.n	801ced2 <dir_register+0xb6>
 801cecc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801ced0:	e095      	b.n	801cffe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801ced2:	7dfa      	ldrb	r2, [r7, #23]
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801ceda:	7dfb      	ldrb	r3, [r7, #23]
 801cedc:	f003 0302 	and.w	r3, r3, #2
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	d007      	beq.n	801cef4 <dir_register+0xd8>
 801cee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cee6:	330c      	adds	r3, #12
 801cee8:	4a47      	ldr	r2, [pc, #284]	@ (801d008 <dir_register+0x1ec>)
 801ceea:	fba2 2303 	umull	r2, r3, r2, r3
 801ceee:	089b      	lsrs	r3, r3, #2
 801cef0:	3301      	adds	r3, #1
 801cef2:	e000      	b.n	801cef6 <dir_register+0xda>
 801cef4:	2301      	movs	r3, #1
 801cef6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801cef8:	6a39      	ldr	r1, [r7, #32]
 801cefa:	6878      	ldr	r0, [r7, #4]
 801cefc:	f7ff fbb6 	bl	801c66c <dir_alloc>
 801cf00:	4603      	mov	r3, r0
 801cf02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801cf06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801cf0a:	2b00      	cmp	r3, #0
 801cf0c:	d148      	bne.n	801cfa0 <dir_register+0x184>
 801cf0e:	6a3b      	ldr	r3, [r7, #32]
 801cf10:	3b01      	subs	r3, #1
 801cf12:	623b      	str	r3, [r7, #32]
 801cf14:	6a3b      	ldr	r3, [r7, #32]
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d042      	beq.n	801cfa0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	695a      	ldr	r2, [r3, #20]
 801cf1e:	6a3b      	ldr	r3, [r7, #32]
 801cf20:	015b      	lsls	r3, r3, #5
 801cf22:	1ad3      	subs	r3, r2, r3
 801cf24:	4619      	mov	r1, r3
 801cf26:	6878      	ldr	r0, [r7, #4]
 801cf28:	f7ff fa41 	bl	801c3ae <dir_sdi>
 801cf2c:	4603      	mov	r3, r0
 801cf2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801cf32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d132      	bne.n	801cfa0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	3324      	adds	r3, #36	@ 0x24
 801cf3e:	4618      	mov	r0, r3
 801cf40:	f7ff fde4 	bl	801cb0c <sum_sfn>
 801cf44:	4603      	mov	r3, r0
 801cf46:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	69db      	ldr	r3, [r3, #28]
 801cf4c:	4619      	mov	r1, r3
 801cf4e:	69f8      	ldr	r0, [r7, #28]
 801cf50:	f7fe fe4e 	bl	801bbf0 <move_window>
 801cf54:	4603      	mov	r3, r0
 801cf56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801cf5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d11d      	bne.n	801cf9e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801cf62:	69fb      	ldr	r3, [r7, #28]
 801cf64:	6918      	ldr	r0, [r3, #16]
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	6a19      	ldr	r1, [r3, #32]
 801cf6a:	6a3b      	ldr	r3, [r7, #32]
 801cf6c:	b2da      	uxtb	r2, r3
 801cf6e:	7efb      	ldrb	r3, [r7, #27]
 801cf70:	f7ff fcd6 	bl	801c920 <put_lfn>
				fs->wflag = 1;
 801cf74:	69fb      	ldr	r3, [r7, #28]
 801cf76:	2201      	movs	r2, #1
 801cf78:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801cf7a:	2100      	movs	r1, #0
 801cf7c:	6878      	ldr	r0, [r7, #4]
 801cf7e:	f7ff fa9f 	bl	801c4c0 <dir_next>
 801cf82:	4603      	mov	r3, r0
 801cf84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801cf88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d107      	bne.n	801cfa0 <dir_register+0x184>
 801cf90:	6a3b      	ldr	r3, [r7, #32]
 801cf92:	3b01      	subs	r3, #1
 801cf94:	623b      	str	r3, [r7, #32]
 801cf96:	6a3b      	ldr	r3, [r7, #32]
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d1d5      	bne.n	801cf48 <dir_register+0x12c>
 801cf9c:	e000      	b.n	801cfa0 <dir_register+0x184>
				if (res != FR_OK) break;
 801cf9e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801cfa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d128      	bne.n	801cffa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	69db      	ldr	r3, [r3, #28]
 801cfac:	4619      	mov	r1, r3
 801cfae:	69f8      	ldr	r0, [r7, #28]
 801cfb0:	f7fe fe1e 	bl	801bbf0 <move_window>
 801cfb4:	4603      	mov	r3, r0
 801cfb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801cfba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801cfbe:	2b00      	cmp	r3, #0
 801cfc0:	d11b      	bne.n	801cffa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	6a1b      	ldr	r3, [r3, #32]
 801cfc6:	2220      	movs	r2, #32
 801cfc8:	2100      	movs	r1, #0
 801cfca:	4618      	mov	r0, r3
 801cfcc:	f7fe fc03 	bl	801b7d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	6a18      	ldr	r0, [r3, #32]
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	3324      	adds	r3, #36	@ 0x24
 801cfd8:	220b      	movs	r2, #11
 801cfda:	4619      	mov	r1, r3
 801cfdc:	f7fe fbda 	bl	801b794 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	6a1b      	ldr	r3, [r3, #32]
 801cfea:	330c      	adds	r3, #12
 801cfec:	f002 0218 	and.w	r2, r2, #24
 801cff0:	b2d2      	uxtb	r2, r2
 801cff2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801cff4:	69fb      	ldr	r3, [r7, #28]
 801cff6:	2201      	movs	r2, #1
 801cff8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801cffa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801cffe:	4618      	mov	r0, r3
 801d000:	3730      	adds	r7, #48	@ 0x30
 801d002:	46bd      	mov	sp, r7
 801d004:	bd80      	pop	{r7, pc}
 801d006:	bf00      	nop
 801d008:	4ec4ec4f 	.word	0x4ec4ec4f

0801d00c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b086      	sub	sp, #24
 801d010:	af00      	add	r7, sp, #0
 801d012:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	695b      	ldr	r3, [r3, #20]
 801d01e:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d024:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d028:	d007      	beq.n	801d03a <dir_remove+0x2e>
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d02e:	4619      	mov	r1, r3
 801d030:	6878      	ldr	r0, [r7, #4]
 801d032:	f7ff f9bc 	bl	801c3ae <dir_sdi>
 801d036:	4603      	mov	r3, r0
 801d038:	e000      	b.n	801d03c <dir_remove+0x30>
 801d03a:	2300      	movs	r3, #0
 801d03c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d03e:	7dfb      	ldrb	r3, [r7, #23]
 801d040:	2b00      	cmp	r3, #0
 801d042:	d128      	bne.n	801d096 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	69db      	ldr	r3, [r3, #28]
 801d048:	4619      	mov	r1, r3
 801d04a:	6938      	ldr	r0, [r7, #16]
 801d04c:	f7fe fdd0 	bl	801bbf0 <move_window>
 801d050:	4603      	mov	r3, r0
 801d052:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801d054:	7dfb      	ldrb	r3, [r7, #23]
 801d056:	2b00      	cmp	r3, #0
 801d058:	d115      	bne.n	801d086 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	6a1b      	ldr	r3, [r3, #32]
 801d05e:	22e5      	movs	r2, #229	@ 0xe5
 801d060:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801d062:	693b      	ldr	r3, [r7, #16]
 801d064:	2201      	movs	r2, #1
 801d066:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	695b      	ldr	r3, [r3, #20]
 801d06c:	68fa      	ldr	r2, [r7, #12]
 801d06e:	429a      	cmp	r2, r3
 801d070:	d90b      	bls.n	801d08a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801d072:	2100      	movs	r1, #0
 801d074:	6878      	ldr	r0, [r7, #4]
 801d076:	f7ff fa23 	bl	801c4c0 <dir_next>
 801d07a:	4603      	mov	r3, r0
 801d07c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801d07e:	7dfb      	ldrb	r3, [r7, #23]
 801d080:	2b00      	cmp	r3, #0
 801d082:	d0df      	beq.n	801d044 <dir_remove+0x38>
 801d084:	e002      	b.n	801d08c <dir_remove+0x80>
			if (res != FR_OK) break;
 801d086:	bf00      	nop
 801d088:	e000      	b.n	801d08c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801d08a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801d08c:	7dfb      	ldrb	r3, [r7, #23]
 801d08e:	2b04      	cmp	r3, #4
 801d090:	d101      	bne.n	801d096 <dir_remove+0x8a>
 801d092:	2302      	movs	r3, #2
 801d094:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801d096:	7dfb      	ldrb	r3, [r7, #23]
}
 801d098:	4618      	mov	r0, r3
 801d09a:	3718      	adds	r7, #24
 801d09c:	46bd      	mov	sp, r7
 801d09e:	bd80      	pop	{r7, pc}

0801d0a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801d0a0:	b580      	push	{r7, lr}
 801d0a2:	b08a      	sub	sp, #40	@ 0x28
 801d0a4:	af00      	add	r7, sp, #0
 801d0a6:	6078      	str	r0, [r7, #4]
 801d0a8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801d0aa:	683b      	ldr	r3, [r7, #0]
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	613b      	str	r3, [r7, #16]
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	691b      	ldr	r3, [r3, #16]
 801d0b6:	60fb      	str	r3, [r7, #12]
 801d0b8:	2300      	movs	r3, #0
 801d0ba:	617b      	str	r3, [r7, #20]
 801d0bc:	697b      	ldr	r3, [r7, #20]
 801d0be:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801d0c0:	69bb      	ldr	r3, [r7, #24]
 801d0c2:	1c5a      	adds	r2, r3, #1
 801d0c4:	61ba      	str	r2, [r7, #24]
 801d0c6:	693a      	ldr	r2, [r7, #16]
 801d0c8:	4413      	add	r3, r2
 801d0ca:	781b      	ldrb	r3, [r3, #0]
 801d0cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801d0ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d0d0:	2b1f      	cmp	r3, #31
 801d0d2:	d940      	bls.n	801d156 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801d0d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d0d6:	2b2f      	cmp	r3, #47	@ 0x2f
 801d0d8:	d006      	beq.n	801d0e8 <create_name+0x48>
 801d0da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d0dc:	2b5c      	cmp	r3, #92	@ 0x5c
 801d0de:	d110      	bne.n	801d102 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801d0e0:	e002      	b.n	801d0e8 <create_name+0x48>
 801d0e2:	69bb      	ldr	r3, [r7, #24]
 801d0e4:	3301      	adds	r3, #1
 801d0e6:	61bb      	str	r3, [r7, #24]
 801d0e8:	693a      	ldr	r2, [r7, #16]
 801d0ea:	69bb      	ldr	r3, [r7, #24]
 801d0ec:	4413      	add	r3, r2
 801d0ee:	781b      	ldrb	r3, [r3, #0]
 801d0f0:	2b2f      	cmp	r3, #47	@ 0x2f
 801d0f2:	d0f6      	beq.n	801d0e2 <create_name+0x42>
 801d0f4:	693a      	ldr	r2, [r7, #16]
 801d0f6:	69bb      	ldr	r3, [r7, #24]
 801d0f8:	4413      	add	r3, r2
 801d0fa:	781b      	ldrb	r3, [r3, #0]
 801d0fc:	2b5c      	cmp	r3, #92	@ 0x5c
 801d0fe:	d0f0      	beq.n	801d0e2 <create_name+0x42>
			break;
 801d100:	e02a      	b.n	801d158 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801d102:	697b      	ldr	r3, [r7, #20]
 801d104:	2bfe      	cmp	r3, #254	@ 0xfe
 801d106:	d901      	bls.n	801d10c <create_name+0x6c>
 801d108:	2306      	movs	r3, #6
 801d10a:	e17d      	b.n	801d408 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801d10c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d10e:	b2db      	uxtb	r3, r3
 801d110:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801d112:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d114:	2101      	movs	r1, #1
 801d116:	4618      	mov	r0, r3
 801d118:	f001 fa98 	bl	801e64c <ff_convert>
 801d11c:	4603      	mov	r3, r0
 801d11e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801d120:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d122:	2b00      	cmp	r3, #0
 801d124:	d101      	bne.n	801d12a <create_name+0x8a>
 801d126:	2306      	movs	r3, #6
 801d128:	e16e      	b.n	801d408 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801d12a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d12c:	2b7f      	cmp	r3, #127	@ 0x7f
 801d12e:	d809      	bhi.n	801d144 <create_name+0xa4>
 801d130:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d132:	4619      	mov	r1, r3
 801d134:	488d      	ldr	r0, [pc, #564]	@ (801d36c <create_name+0x2cc>)
 801d136:	f7fe fb90 	bl	801b85a <chk_chr>
 801d13a:	4603      	mov	r3, r0
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	d001      	beq.n	801d144 <create_name+0xa4>
 801d140:	2306      	movs	r3, #6
 801d142:	e161      	b.n	801d408 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801d144:	697b      	ldr	r3, [r7, #20]
 801d146:	1c5a      	adds	r2, r3, #1
 801d148:	617a      	str	r2, [r7, #20]
 801d14a:	005b      	lsls	r3, r3, #1
 801d14c:	68fa      	ldr	r2, [r7, #12]
 801d14e:	4413      	add	r3, r2
 801d150:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801d152:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801d154:	e7b4      	b.n	801d0c0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801d156:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801d158:	693a      	ldr	r2, [r7, #16]
 801d15a:	69bb      	ldr	r3, [r7, #24]
 801d15c:	441a      	add	r2, r3
 801d15e:	683b      	ldr	r3, [r7, #0]
 801d160:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801d162:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d164:	2b1f      	cmp	r3, #31
 801d166:	d801      	bhi.n	801d16c <create_name+0xcc>
 801d168:	2304      	movs	r3, #4
 801d16a:	e000      	b.n	801d16e <create_name+0xce>
 801d16c:	2300      	movs	r3, #0
 801d16e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801d172:	e011      	b.n	801d198 <create_name+0xf8>
		w = lfn[di - 1];
 801d174:	697a      	ldr	r2, [r7, #20]
 801d176:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801d17a:	4413      	add	r3, r2
 801d17c:	005b      	lsls	r3, r3, #1
 801d17e:	68fa      	ldr	r2, [r7, #12]
 801d180:	4413      	add	r3, r2
 801d182:	881b      	ldrh	r3, [r3, #0]
 801d184:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801d186:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d188:	2b20      	cmp	r3, #32
 801d18a:	d002      	beq.n	801d192 <create_name+0xf2>
 801d18c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d18e:	2b2e      	cmp	r3, #46	@ 0x2e
 801d190:	d106      	bne.n	801d1a0 <create_name+0x100>
		di--;
 801d192:	697b      	ldr	r3, [r7, #20]
 801d194:	3b01      	subs	r3, #1
 801d196:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801d198:	697b      	ldr	r3, [r7, #20]
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d1ea      	bne.n	801d174 <create_name+0xd4>
 801d19e:	e000      	b.n	801d1a2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801d1a0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801d1a2:	697b      	ldr	r3, [r7, #20]
 801d1a4:	005b      	lsls	r3, r3, #1
 801d1a6:	68fa      	ldr	r2, [r7, #12]
 801d1a8:	4413      	add	r3, r2
 801d1aa:	2200      	movs	r2, #0
 801d1ac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801d1ae:	697b      	ldr	r3, [r7, #20]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d101      	bne.n	801d1b8 <create_name+0x118>
 801d1b4:	2306      	movs	r3, #6
 801d1b6:	e127      	b.n	801d408 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	3324      	adds	r3, #36	@ 0x24
 801d1bc:	220b      	movs	r2, #11
 801d1be:	2120      	movs	r1, #32
 801d1c0:	4618      	mov	r0, r3
 801d1c2:	f7fe fb08 	bl	801b7d6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801d1c6:	2300      	movs	r3, #0
 801d1c8:	61bb      	str	r3, [r7, #24]
 801d1ca:	e002      	b.n	801d1d2 <create_name+0x132>
 801d1cc:	69bb      	ldr	r3, [r7, #24]
 801d1ce:	3301      	adds	r3, #1
 801d1d0:	61bb      	str	r3, [r7, #24]
 801d1d2:	69bb      	ldr	r3, [r7, #24]
 801d1d4:	005b      	lsls	r3, r3, #1
 801d1d6:	68fa      	ldr	r2, [r7, #12]
 801d1d8:	4413      	add	r3, r2
 801d1da:	881b      	ldrh	r3, [r3, #0]
 801d1dc:	2b20      	cmp	r3, #32
 801d1de:	d0f5      	beq.n	801d1cc <create_name+0x12c>
 801d1e0:	69bb      	ldr	r3, [r7, #24]
 801d1e2:	005b      	lsls	r3, r3, #1
 801d1e4:	68fa      	ldr	r2, [r7, #12]
 801d1e6:	4413      	add	r3, r2
 801d1e8:	881b      	ldrh	r3, [r3, #0]
 801d1ea:	2b2e      	cmp	r3, #46	@ 0x2e
 801d1ec:	d0ee      	beq.n	801d1cc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801d1ee:	69bb      	ldr	r3, [r7, #24]
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	d009      	beq.n	801d208 <create_name+0x168>
 801d1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d1f8:	f043 0303 	orr.w	r3, r3, #3
 801d1fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801d200:	e002      	b.n	801d208 <create_name+0x168>
 801d202:	697b      	ldr	r3, [r7, #20]
 801d204:	3b01      	subs	r3, #1
 801d206:	617b      	str	r3, [r7, #20]
 801d208:	697b      	ldr	r3, [r7, #20]
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d009      	beq.n	801d222 <create_name+0x182>
 801d20e:	697a      	ldr	r2, [r7, #20]
 801d210:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801d214:	4413      	add	r3, r2
 801d216:	005b      	lsls	r3, r3, #1
 801d218:	68fa      	ldr	r2, [r7, #12]
 801d21a:	4413      	add	r3, r2
 801d21c:	881b      	ldrh	r3, [r3, #0]
 801d21e:	2b2e      	cmp	r3, #46	@ 0x2e
 801d220:	d1ef      	bne.n	801d202 <create_name+0x162>

	i = b = 0; ni = 8;
 801d222:	2300      	movs	r3, #0
 801d224:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801d228:	2300      	movs	r3, #0
 801d22a:	623b      	str	r3, [r7, #32]
 801d22c:	2308      	movs	r3, #8
 801d22e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801d230:	69bb      	ldr	r3, [r7, #24]
 801d232:	1c5a      	adds	r2, r3, #1
 801d234:	61ba      	str	r2, [r7, #24]
 801d236:	005b      	lsls	r3, r3, #1
 801d238:	68fa      	ldr	r2, [r7, #12]
 801d23a:	4413      	add	r3, r2
 801d23c:	881b      	ldrh	r3, [r3, #0]
 801d23e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801d240:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d242:	2b00      	cmp	r3, #0
 801d244:	f000 8090 	beq.w	801d368 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801d248:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d24a:	2b20      	cmp	r3, #32
 801d24c:	d006      	beq.n	801d25c <create_name+0x1bc>
 801d24e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d250:	2b2e      	cmp	r3, #46	@ 0x2e
 801d252:	d10a      	bne.n	801d26a <create_name+0x1ca>
 801d254:	69ba      	ldr	r2, [r7, #24]
 801d256:	697b      	ldr	r3, [r7, #20]
 801d258:	429a      	cmp	r2, r3
 801d25a:	d006      	beq.n	801d26a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801d25c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d260:	f043 0303 	orr.w	r3, r3, #3
 801d264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d268:	e07d      	b.n	801d366 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801d26a:	6a3a      	ldr	r2, [r7, #32]
 801d26c:	69fb      	ldr	r3, [r7, #28]
 801d26e:	429a      	cmp	r2, r3
 801d270:	d203      	bcs.n	801d27a <create_name+0x1da>
 801d272:	69ba      	ldr	r2, [r7, #24]
 801d274:	697b      	ldr	r3, [r7, #20]
 801d276:	429a      	cmp	r2, r3
 801d278:	d123      	bne.n	801d2c2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801d27a:	69fb      	ldr	r3, [r7, #28]
 801d27c:	2b0b      	cmp	r3, #11
 801d27e:	d106      	bne.n	801d28e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801d280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d284:	f043 0303 	orr.w	r3, r3, #3
 801d288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d28c:	e075      	b.n	801d37a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801d28e:	69ba      	ldr	r2, [r7, #24]
 801d290:	697b      	ldr	r3, [r7, #20]
 801d292:	429a      	cmp	r2, r3
 801d294:	d005      	beq.n	801d2a2 <create_name+0x202>
 801d296:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d29a:	f043 0303 	orr.w	r3, r3, #3
 801d29e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801d2a2:	69ba      	ldr	r2, [r7, #24]
 801d2a4:	697b      	ldr	r3, [r7, #20]
 801d2a6:	429a      	cmp	r2, r3
 801d2a8:	d866      	bhi.n	801d378 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801d2aa:	697b      	ldr	r3, [r7, #20]
 801d2ac:	61bb      	str	r3, [r7, #24]
 801d2ae:	2308      	movs	r3, #8
 801d2b0:	623b      	str	r3, [r7, #32]
 801d2b2:	230b      	movs	r3, #11
 801d2b4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801d2b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d2ba:	009b      	lsls	r3, r3, #2
 801d2bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801d2c0:	e051      	b.n	801d366 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801d2c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d2c4:	2b7f      	cmp	r3, #127	@ 0x7f
 801d2c6:	d914      	bls.n	801d2f2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801d2c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d2ca:	2100      	movs	r1, #0
 801d2cc:	4618      	mov	r0, r3
 801d2ce:	f001 f9bd 	bl	801e64c <ff_convert>
 801d2d2:	4603      	mov	r3, r0
 801d2d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801d2d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d2d8:	2b00      	cmp	r3, #0
 801d2da:	d004      	beq.n	801d2e6 <create_name+0x246>
 801d2dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d2de:	3b80      	subs	r3, #128	@ 0x80
 801d2e0:	4a23      	ldr	r2, [pc, #140]	@ (801d370 <create_name+0x2d0>)
 801d2e2:	5cd3      	ldrb	r3, [r2, r3]
 801d2e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801d2e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d2ea:	f043 0302 	orr.w	r3, r3, #2
 801d2ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801d2f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d007      	beq.n	801d308 <create_name+0x268>
 801d2f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d2fa:	4619      	mov	r1, r3
 801d2fc:	481d      	ldr	r0, [pc, #116]	@ (801d374 <create_name+0x2d4>)
 801d2fe:	f7fe faac 	bl	801b85a <chk_chr>
 801d302:	4603      	mov	r3, r0
 801d304:	2b00      	cmp	r3, #0
 801d306:	d008      	beq.n	801d31a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801d308:	235f      	movs	r3, #95	@ 0x5f
 801d30a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801d30c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d310:	f043 0303 	orr.w	r3, r3, #3
 801d314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d318:	e01b      	b.n	801d352 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801d31a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d31c:	2b40      	cmp	r3, #64	@ 0x40
 801d31e:	d909      	bls.n	801d334 <create_name+0x294>
 801d320:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d322:	2b5a      	cmp	r3, #90	@ 0x5a
 801d324:	d806      	bhi.n	801d334 <create_name+0x294>
					b |= 2;
 801d326:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d32a:	f043 0302 	orr.w	r3, r3, #2
 801d32e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801d332:	e00e      	b.n	801d352 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801d334:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d336:	2b60      	cmp	r3, #96	@ 0x60
 801d338:	d90b      	bls.n	801d352 <create_name+0x2b2>
 801d33a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d33c:	2b7a      	cmp	r3, #122	@ 0x7a
 801d33e:	d808      	bhi.n	801d352 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801d340:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d344:	f043 0301 	orr.w	r3, r3, #1
 801d348:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801d34c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d34e:	3b20      	subs	r3, #32
 801d350:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801d352:	6a3b      	ldr	r3, [r7, #32]
 801d354:	1c5a      	adds	r2, r3, #1
 801d356:	623a      	str	r2, [r7, #32]
 801d358:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801d35a:	b2d1      	uxtb	r1, r2
 801d35c:	687a      	ldr	r2, [r7, #4]
 801d35e:	4413      	add	r3, r2
 801d360:	460a      	mov	r2, r1
 801d362:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801d366:	e763      	b.n	801d230 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801d368:	bf00      	nop
 801d36a:	e006      	b.n	801d37a <create_name+0x2da>
 801d36c:	0801f244 	.word	0x0801f244
 801d370:	0801f2dc 	.word	0x0801f2dc
 801d374:	0801f250 	.word	0x0801f250
			if (si > di) break;			/* No extension */
 801d378:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801d380:	2be5      	cmp	r3, #229	@ 0xe5
 801d382:	d103      	bne.n	801d38c <create_name+0x2ec>
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	2205      	movs	r2, #5
 801d388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801d38c:	69fb      	ldr	r3, [r7, #28]
 801d38e:	2b08      	cmp	r3, #8
 801d390:	d104      	bne.n	801d39c <create_name+0x2fc>
 801d392:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d396:	009b      	lsls	r3, r3, #2
 801d398:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801d39c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d3a0:	f003 030c 	and.w	r3, r3, #12
 801d3a4:	2b0c      	cmp	r3, #12
 801d3a6:	d005      	beq.n	801d3b4 <create_name+0x314>
 801d3a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d3ac:	f003 0303 	and.w	r3, r3, #3
 801d3b0:	2b03      	cmp	r3, #3
 801d3b2:	d105      	bne.n	801d3c0 <create_name+0x320>
 801d3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d3b8:	f043 0302 	orr.w	r3, r3, #2
 801d3bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801d3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d3c4:	f003 0302 	and.w	r3, r3, #2
 801d3c8:	2b00      	cmp	r3, #0
 801d3ca:	d117      	bne.n	801d3fc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801d3cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d3d0:	f003 0303 	and.w	r3, r3, #3
 801d3d4:	2b01      	cmp	r3, #1
 801d3d6:	d105      	bne.n	801d3e4 <create_name+0x344>
 801d3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d3dc:	f043 0310 	orr.w	r3, r3, #16
 801d3e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801d3e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d3e8:	f003 030c 	and.w	r3, r3, #12
 801d3ec:	2b04      	cmp	r3, #4
 801d3ee:	d105      	bne.n	801d3fc <create_name+0x35c>
 801d3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d3f4:	f043 0308 	orr.w	r3, r3, #8
 801d3f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801d402:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801d406:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801d408:	4618      	mov	r0, r3
 801d40a:	3728      	adds	r7, #40	@ 0x28
 801d40c:	46bd      	mov	sp, r7
 801d40e:	bd80      	pop	{r7, pc}

0801d410 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b086      	sub	sp, #24
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
 801d418:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801d41e:	693b      	ldr	r3, [r7, #16]
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801d424:	e002      	b.n	801d42c <follow_path+0x1c>
 801d426:	683b      	ldr	r3, [r7, #0]
 801d428:	3301      	adds	r3, #1
 801d42a:	603b      	str	r3, [r7, #0]
 801d42c:	683b      	ldr	r3, [r7, #0]
 801d42e:	781b      	ldrb	r3, [r3, #0]
 801d430:	2b2f      	cmp	r3, #47	@ 0x2f
 801d432:	d0f8      	beq.n	801d426 <follow_path+0x16>
 801d434:	683b      	ldr	r3, [r7, #0]
 801d436:	781b      	ldrb	r3, [r3, #0]
 801d438:	2b5c      	cmp	r3, #92	@ 0x5c
 801d43a:	d0f4      	beq.n	801d426 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801d43c:	693b      	ldr	r3, [r7, #16]
 801d43e:	2200      	movs	r2, #0
 801d440:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801d442:	683b      	ldr	r3, [r7, #0]
 801d444:	781b      	ldrb	r3, [r3, #0]
 801d446:	2b1f      	cmp	r3, #31
 801d448:	d80a      	bhi.n	801d460 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	2280      	movs	r2, #128	@ 0x80
 801d44e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801d452:	2100      	movs	r1, #0
 801d454:	6878      	ldr	r0, [r7, #4]
 801d456:	f7fe ffaa 	bl	801c3ae <dir_sdi>
 801d45a:	4603      	mov	r3, r0
 801d45c:	75fb      	strb	r3, [r7, #23]
 801d45e:	e048      	b.n	801d4f2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801d460:	463b      	mov	r3, r7
 801d462:	4619      	mov	r1, r3
 801d464:	6878      	ldr	r0, [r7, #4]
 801d466:	f7ff fe1b 	bl	801d0a0 <create_name>
 801d46a:	4603      	mov	r3, r0
 801d46c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801d46e:	7dfb      	ldrb	r3, [r7, #23]
 801d470:	2b00      	cmp	r3, #0
 801d472:	d139      	bne.n	801d4e8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801d474:	6878      	ldr	r0, [r7, #4]
 801d476:	f7ff fc11 	bl	801cc9c <dir_find>
 801d47a:	4603      	mov	r3, r0
 801d47c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801d484:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801d486:	7dfb      	ldrb	r3, [r7, #23]
 801d488:	2b00      	cmp	r3, #0
 801d48a:	d00a      	beq.n	801d4a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801d48c:	7dfb      	ldrb	r3, [r7, #23]
 801d48e:	2b04      	cmp	r3, #4
 801d490:	d12c      	bne.n	801d4ec <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801d492:	7afb      	ldrb	r3, [r7, #11]
 801d494:	f003 0304 	and.w	r3, r3, #4
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d127      	bne.n	801d4ec <follow_path+0xdc>
 801d49c:	2305      	movs	r3, #5
 801d49e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801d4a0:	e024      	b.n	801d4ec <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801d4a2:	7afb      	ldrb	r3, [r7, #11]
 801d4a4:	f003 0304 	and.w	r3, r3, #4
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	d121      	bne.n	801d4f0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801d4ac:	693b      	ldr	r3, [r7, #16]
 801d4ae:	799b      	ldrb	r3, [r3, #6]
 801d4b0:	f003 0310 	and.w	r3, r3, #16
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	d102      	bne.n	801d4be <follow_path+0xae>
				res = FR_NO_PATH; break;
 801d4b8:	2305      	movs	r3, #5
 801d4ba:	75fb      	strb	r3, [r7, #23]
 801d4bc:	e019      	b.n	801d4f2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	695b      	ldr	r3, [r3, #20]
 801d4c8:	68fa      	ldr	r2, [r7, #12]
 801d4ca:	8992      	ldrh	r2, [r2, #12]
 801d4cc:	fbb3 f0f2 	udiv	r0, r3, r2
 801d4d0:	fb00 f202 	mul.w	r2, r0, r2
 801d4d4:	1a9b      	subs	r3, r3, r2
 801d4d6:	440b      	add	r3, r1
 801d4d8:	4619      	mov	r1, r3
 801d4da:	68f8      	ldr	r0, [r7, #12]
 801d4dc:	f7ff f90d 	bl	801c6fa <ld_clust>
 801d4e0:	4602      	mov	r2, r0
 801d4e2:	693b      	ldr	r3, [r7, #16]
 801d4e4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801d4e6:	e7bb      	b.n	801d460 <follow_path+0x50>
			if (res != FR_OK) break;
 801d4e8:	bf00      	nop
 801d4ea:	e002      	b.n	801d4f2 <follow_path+0xe2>
				break;
 801d4ec:	bf00      	nop
 801d4ee:	e000      	b.n	801d4f2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801d4f0:	bf00      	nop
			}
		}
	}

	return res;
 801d4f2:	7dfb      	ldrb	r3, [r7, #23]
}
 801d4f4:	4618      	mov	r0, r3
 801d4f6:	3718      	adds	r7, #24
 801d4f8:	46bd      	mov	sp, r7
 801d4fa:	bd80      	pop	{r7, pc}

0801d4fc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801d4fc:	b480      	push	{r7}
 801d4fe:	b087      	sub	sp, #28
 801d500:	af00      	add	r7, sp, #0
 801d502:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801d504:	f04f 33ff 	mov.w	r3, #4294967295
 801d508:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d031      	beq.n	801d576 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	681b      	ldr	r3, [r3, #0]
 801d516:	617b      	str	r3, [r7, #20]
 801d518:	e002      	b.n	801d520 <get_ldnumber+0x24>
 801d51a:	697b      	ldr	r3, [r7, #20]
 801d51c:	3301      	adds	r3, #1
 801d51e:	617b      	str	r3, [r7, #20]
 801d520:	697b      	ldr	r3, [r7, #20]
 801d522:	781b      	ldrb	r3, [r3, #0]
 801d524:	2b1f      	cmp	r3, #31
 801d526:	d903      	bls.n	801d530 <get_ldnumber+0x34>
 801d528:	697b      	ldr	r3, [r7, #20]
 801d52a:	781b      	ldrb	r3, [r3, #0]
 801d52c:	2b3a      	cmp	r3, #58	@ 0x3a
 801d52e:	d1f4      	bne.n	801d51a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801d530:	697b      	ldr	r3, [r7, #20]
 801d532:	781b      	ldrb	r3, [r3, #0]
 801d534:	2b3a      	cmp	r3, #58	@ 0x3a
 801d536:	d11c      	bne.n	801d572 <get_ldnumber+0x76>
			tp = *path;
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	681b      	ldr	r3, [r3, #0]
 801d53c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	1c5a      	adds	r2, r3, #1
 801d542:	60fa      	str	r2, [r7, #12]
 801d544:	781b      	ldrb	r3, [r3, #0]
 801d546:	3b30      	subs	r3, #48	@ 0x30
 801d548:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801d54a:	68bb      	ldr	r3, [r7, #8]
 801d54c:	2b09      	cmp	r3, #9
 801d54e:	d80e      	bhi.n	801d56e <get_ldnumber+0x72>
 801d550:	68fa      	ldr	r2, [r7, #12]
 801d552:	697b      	ldr	r3, [r7, #20]
 801d554:	429a      	cmp	r2, r3
 801d556:	d10a      	bne.n	801d56e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801d558:	68bb      	ldr	r3, [r7, #8]
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	d107      	bne.n	801d56e <get_ldnumber+0x72>
					vol = (int)i;
 801d55e:	68bb      	ldr	r3, [r7, #8]
 801d560:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801d562:	697b      	ldr	r3, [r7, #20]
 801d564:	3301      	adds	r3, #1
 801d566:	617b      	str	r3, [r7, #20]
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	697a      	ldr	r2, [r7, #20]
 801d56c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801d56e:	693b      	ldr	r3, [r7, #16]
 801d570:	e002      	b.n	801d578 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801d572:	2300      	movs	r3, #0
 801d574:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801d576:	693b      	ldr	r3, [r7, #16]
}
 801d578:	4618      	mov	r0, r3
 801d57a:	371c      	adds	r7, #28
 801d57c:	46bd      	mov	sp, r7
 801d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d582:	4770      	bx	lr

0801d584 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801d584:	b580      	push	{r7, lr}
 801d586:	b082      	sub	sp, #8
 801d588:	af00      	add	r7, sp, #0
 801d58a:	6078      	str	r0, [r7, #4]
 801d58c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	2200      	movs	r2, #0
 801d592:	70da      	strb	r2, [r3, #3]
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	f04f 32ff 	mov.w	r2, #4294967295
 801d59a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801d59c:	6839      	ldr	r1, [r7, #0]
 801d59e:	6878      	ldr	r0, [r7, #4]
 801d5a0:	f7fe fb26 	bl	801bbf0 <move_window>
 801d5a4:	4603      	mov	r3, r0
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d001      	beq.n	801d5ae <check_fs+0x2a>
 801d5aa:	2304      	movs	r3, #4
 801d5ac:	e038      	b.n	801d620 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	3338      	adds	r3, #56	@ 0x38
 801d5b2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d5b6:	4618      	mov	r0, r3
 801d5b8:	f7fe f86a 	bl	801b690 <ld_word>
 801d5bc:	4603      	mov	r3, r0
 801d5be:	461a      	mov	r2, r3
 801d5c0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d5c4:	429a      	cmp	r2, r3
 801d5c6:	d001      	beq.n	801d5cc <check_fs+0x48>
 801d5c8:	2303      	movs	r3, #3
 801d5ca:	e029      	b.n	801d620 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801d5d2:	2be9      	cmp	r3, #233	@ 0xe9
 801d5d4:	d009      	beq.n	801d5ea <check_fs+0x66>
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801d5dc:	2beb      	cmp	r3, #235	@ 0xeb
 801d5de:	d11e      	bne.n	801d61e <check_fs+0x9a>
 801d5e0:	687b      	ldr	r3, [r7, #4]
 801d5e2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801d5e6:	2b90      	cmp	r3, #144	@ 0x90
 801d5e8:	d119      	bne.n	801d61e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	3338      	adds	r3, #56	@ 0x38
 801d5ee:	3336      	adds	r3, #54	@ 0x36
 801d5f0:	4618      	mov	r0, r3
 801d5f2:	f7fe f865 	bl	801b6c0 <ld_dword>
 801d5f6:	4603      	mov	r3, r0
 801d5f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801d5fc:	4a0a      	ldr	r2, [pc, #40]	@ (801d628 <check_fs+0xa4>)
 801d5fe:	4293      	cmp	r3, r2
 801d600:	d101      	bne.n	801d606 <check_fs+0x82>
 801d602:	2300      	movs	r3, #0
 801d604:	e00c      	b.n	801d620 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	3338      	adds	r3, #56	@ 0x38
 801d60a:	3352      	adds	r3, #82	@ 0x52
 801d60c:	4618      	mov	r0, r3
 801d60e:	f7fe f857 	bl	801b6c0 <ld_dword>
 801d612:	4603      	mov	r3, r0
 801d614:	4a05      	ldr	r2, [pc, #20]	@ (801d62c <check_fs+0xa8>)
 801d616:	4293      	cmp	r3, r2
 801d618:	d101      	bne.n	801d61e <check_fs+0x9a>
 801d61a:	2300      	movs	r3, #0
 801d61c:	e000      	b.n	801d620 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801d61e:	2302      	movs	r3, #2
}
 801d620:	4618      	mov	r0, r3
 801d622:	3708      	adds	r7, #8
 801d624:	46bd      	mov	sp, r7
 801d626:	bd80      	pop	{r7, pc}
 801d628:	00544146 	.word	0x00544146
 801d62c:	33544146 	.word	0x33544146

0801d630 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801d630:	b580      	push	{r7, lr}
 801d632:	b096      	sub	sp, #88	@ 0x58
 801d634:	af00      	add	r7, sp, #0
 801d636:	60f8      	str	r0, [r7, #12]
 801d638:	60b9      	str	r1, [r7, #8]
 801d63a:	4613      	mov	r3, r2
 801d63c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801d63e:	68bb      	ldr	r3, [r7, #8]
 801d640:	2200      	movs	r2, #0
 801d642:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801d644:	68f8      	ldr	r0, [r7, #12]
 801d646:	f7ff ff59 	bl	801d4fc <get_ldnumber>
 801d64a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801d64c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d64e:	2b00      	cmp	r3, #0
 801d650:	da01      	bge.n	801d656 <find_volume+0x26>
 801d652:	230b      	movs	r3, #11
 801d654:	e265      	b.n	801db22 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801d656:	4a9f      	ldr	r2, [pc, #636]	@ (801d8d4 <find_volume+0x2a4>)
 801d658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d65a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d65e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801d660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d662:	2b00      	cmp	r3, #0
 801d664:	d101      	bne.n	801d66a <find_volume+0x3a>
 801d666:	230c      	movs	r3, #12
 801d668:	e25b      	b.n	801db22 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801d66a:	68bb      	ldr	r3, [r7, #8]
 801d66c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d66e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801d670:	79fb      	ldrb	r3, [r7, #7]
 801d672:	f023 0301 	bic.w	r3, r3, #1
 801d676:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801d678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d67a:	781b      	ldrb	r3, [r3, #0]
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	d01a      	beq.n	801d6b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801d680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d682:	785b      	ldrb	r3, [r3, #1]
 801d684:	4618      	mov	r0, r3
 801d686:	f7fd ff63 	bl	801b550 <disk_status>
 801d68a:	4603      	mov	r3, r0
 801d68c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801d690:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d694:	f003 0301 	and.w	r3, r3, #1
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d10c      	bne.n	801d6b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801d69c:	79fb      	ldrb	r3, [r7, #7]
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	d007      	beq.n	801d6b2 <find_volume+0x82>
 801d6a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d6a6:	f003 0304 	and.w	r3, r3, #4
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d001      	beq.n	801d6b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801d6ae:	230a      	movs	r3, #10
 801d6b0:	e237      	b.n	801db22 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801d6b2:	2300      	movs	r3, #0
 801d6b4:	e235      	b.n	801db22 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801d6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6b8:	2200      	movs	r2, #0
 801d6ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801d6bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d6be:	b2da      	uxtb	r2, r3
 801d6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801d6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6c6:	785b      	ldrb	r3, [r3, #1]
 801d6c8:	4618      	mov	r0, r3
 801d6ca:	f7fd ff5b 	bl	801b584 <disk_initialize>
 801d6ce:	4603      	mov	r3, r0
 801d6d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801d6d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d6d8:	f003 0301 	and.w	r3, r3, #1
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	d001      	beq.n	801d6e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801d6e0:	2303      	movs	r3, #3
 801d6e2:	e21e      	b.n	801db22 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801d6e4:	79fb      	ldrb	r3, [r7, #7]
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	d007      	beq.n	801d6fa <find_volume+0xca>
 801d6ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d6ee:	f003 0304 	and.w	r3, r3, #4
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	d001      	beq.n	801d6fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801d6f6:	230a      	movs	r3, #10
 801d6f8:	e213      	b.n	801db22 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801d6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6fc:	7858      	ldrb	r0, [r3, #1]
 801d6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d700:	330c      	adds	r3, #12
 801d702:	461a      	mov	r2, r3
 801d704:	2102      	movs	r1, #2
 801d706:	f7fd ffa5 	bl	801b654 <disk_ioctl>
 801d70a:	4603      	mov	r3, r0
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d001      	beq.n	801d714 <find_volume+0xe4>
 801d710:	2301      	movs	r3, #1
 801d712:	e206      	b.n	801db22 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801d714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d716:	899b      	ldrh	r3, [r3, #12]
 801d718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d71c:	d80d      	bhi.n	801d73a <find_volume+0x10a>
 801d71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d720:	899b      	ldrh	r3, [r3, #12]
 801d722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d726:	d308      	bcc.n	801d73a <find_volume+0x10a>
 801d728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d72a:	899b      	ldrh	r3, [r3, #12]
 801d72c:	461a      	mov	r2, r3
 801d72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d730:	899b      	ldrh	r3, [r3, #12]
 801d732:	3b01      	subs	r3, #1
 801d734:	4013      	ands	r3, r2
 801d736:	2b00      	cmp	r3, #0
 801d738:	d001      	beq.n	801d73e <find_volume+0x10e>
 801d73a:	2301      	movs	r3, #1
 801d73c:	e1f1      	b.n	801db22 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801d73e:	2300      	movs	r3, #0
 801d740:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801d742:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d744:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d746:	f7ff ff1d 	bl	801d584 <check_fs>
 801d74a:	4603      	mov	r3, r0
 801d74c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801d750:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d754:	2b02      	cmp	r3, #2
 801d756:	d149      	bne.n	801d7ec <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d758:	2300      	movs	r3, #0
 801d75a:	643b      	str	r3, [r7, #64]	@ 0x40
 801d75c:	e01e      	b.n	801d79c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801d75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d760:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801d764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d766:	011b      	lsls	r3, r3, #4
 801d768:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801d76c:	4413      	add	r3, r2
 801d76e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801d770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d772:	3304      	adds	r3, #4
 801d774:	781b      	ldrb	r3, [r3, #0]
 801d776:	2b00      	cmp	r3, #0
 801d778:	d006      	beq.n	801d788 <find_volume+0x158>
 801d77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d77c:	3308      	adds	r3, #8
 801d77e:	4618      	mov	r0, r3
 801d780:	f7fd ff9e 	bl	801b6c0 <ld_dword>
 801d784:	4602      	mov	r2, r0
 801d786:	e000      	b.n	801d78a <find_volume+0x15a>
 801d788:	2200      	movs	r2, #0
 801d78a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d78c:	009b      	lsls	r3, r3, #2
 801d78e:	3358      	adds	r3, #88	@ 0x58
 801d790:	443b      	add	r3, r7
 801d792:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d798:	3301      	adds	r3, #1
 801d79a:	643b      	str	r3, [r7, #64]	@ 0x40
 801d79c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d79e:	2b03      	cmp	r3, #3
 801d7a0:	d9dd      	bls.n	801d75e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801d7a2:	2300      	movs	r3, #0
 801d7a4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801d7a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d002      	beq.n	801d7b2 <find_volume+0x182>
 801d7ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d7ae:	3b01      	subs	r3, #1
 801d7b0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801d7b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d7b4:	009b      	lsls	r3, r3, #2
 801d7b6:	3358      	adds	r3, #88	@ 0x58
 801d7b8:	443b      	add	r3, r7
 801d7ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801d7be:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801d7c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d7c2:	2b00      	cmp	r3, #0
 801d7c4:	d005      	beq.n	801d7d2 <find_volume+0x1a2>
 801d7c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d7c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d7ca:	f7ff fedb 	bl	801d584 <check_fs>
 801d7ce:	4603      	mov	r3, r0
 801d7d0:	e000      	b.n	801d7d4 <find_volume+0x1a4>
 801d7d2:	2303      	movs	r3, #3
 801d7d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801d7d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d7dc:	2b01      	cmp	r3, #1
 801d7de:	d905      	bls.n	801d7ec <find_volume+0x1bc>
 801d7e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d7e2:	3301      	adds	r3, #1
 801d7e4:	643b      	str	r3, [r7, #64]	@ 0x40
 801d7e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d7e8:	2b03      	cmp	r3, #3
 801d7ea:	d9e2      	bls.n	801d7b2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801d7ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d7f0:	2b04      	cmp	r3, #4
 801d7f2:	d101      	bne.n	801d7f8 <find_volume+0x1c8>
 801d7f4:	2301      	movs	r3, #1
 801d7f6:	e194      	b.n	801db22 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801d7f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d7fc:	2b01      	cmp	r3, #1
 801d7fe:	d901      	bls.n	801d804 <find_volume+0x1d4>
 801d800:	230d      	movs	r3, #13
 801d802:	e18e      	b.n	801db22 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801d804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d806:	3338      	adds	r3, #56	@ 0x38
 801d808:	330b      	adds	r3, #11
 801d80a:	4618      	mov	r0, r3
 801d80c:	f7fd ff40 	bl	801b690 <ld_word>
 801d810:	4603      	mov	r3, r0
 801d812:	461a      	mov	r2, r3
 801d814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d816:	899b      	ldrh	r3, [r3, #12]
 801d818:	429a      	cmp	r2, r3
 801d81a:	d001      	beq.n	801d820 <find_volume+0x1f0>
 801d81c:	230d      	movs	r3, #13
 801d81e:	e180      	b.n	801db22 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801d820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d822:	3338      	adds	r3, #56	@ 0x38
 801d824:	3316      	adds	r3, #22
 801d826:	4618      	mov	r0, r3
 801d828:	f7fd ff32 	bl	801b690 <ld_word>
 801d82c:	4603      	mov	r3, r0
 801d82e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801d830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d832:	2b00      	cmp	r3, #0
 801d834:	d106      	bne.n	801d844 <find_volume+0x214>
 801d836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d838:	3338      	adds	r3, #56	@ 0x38
 801d83a:	3324      	adds	r3, #36	@ 0x24
 801d83c:	4618      	mov	r0, r3
 801d83e:	f7fd ff3f 	bl	801b6c0 <ld_dword>
 801d842:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801d844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d846:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d848:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801d84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d84c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801d850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d852:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801d854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d856:	789b      	ldrb	r3, [r3, #2]
 801d858:	2b01      	cmp	r3, #1
 801d85a:	d005      	beq.n	801d868 <find_volume+0x238>
 801d85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d85e:	789b      	ldrb	r3, [r3, #2]
 801d860:	2b02      	cmp	r3, #2
 801d862:	d001      	beq.n	801d868 <find_volume+0x238>
 801d864:	230d      	movs	r3, #13
 801d866:	e15c      	b.n	801db22 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801d868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d86a:	789b      	ldrb	r3, [r3, #2]
 801d86c:	461a      	mov	r2, r3
 801d86e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d870:	fb02 f303 	mul.w	r3, r2, r3
 801d874:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801d876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d878:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801d87c:	461a      	mov	r2, r3
 801d87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d880:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801d882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d884:	895b      	ldrh	r3, [r3, #10]
 801d886:	2b00      	cmp	r3, #0
 801d888:	d008      	beq.n	801d89c <find_volume+0x26c>
 801d88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d88c:	895b      	ldrh	r3, [r3, #10]
 801d88e:	461a      	mov	r2, r3
 801d890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d892:	895b      	ldrh	r3, [r3, #10]
 801d894:	3b01      	subs	r3, #1
 801d896:	4013      	ands	r3, r2
 801d898:	2b00      	cmp	r3, #0
 801d89a:	d001      	beq.n	801d8a0 <find_volume+0x270>
 801d89c:	230d      	movs	r3, #13
 801d89e:	e140      	b.n	801db22 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801d8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d8a2:	3338      	adds	r3, #56	@ 0x38
 801d8a4:	3311      	adds	r3, #17
 801d8a6:	4618      	mov	r0, r3
 801d8a8:	f7fd fef2 	bl	801b690 <ld_word>
 801d8ac:	4603      	mov	r3, r0
 801d8ae:	461a      	mov	r2, r3
 801d8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d8b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801d8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d8b6:	891b      	ldrh	r3, [r3, #8]
 801d8b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d8ba:	8992      	ldrh	r2, [r2, #12]
 801d8bc:	0952      	lsrs	r2, r2, #5
 801d8be:	b292      	uxth	r2, r2
 801d8c0:	fbb3 f1f2 	udiv	r1, r3, r2
 801d8c4:	fb01 f202 	mul.w	r2, r1, r2
 801d8c8:	1a9b      	subs	r3, r3, r2
 801d8ca:	b29b      	uxth	r3, r3
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d003      	beq.n	801d8d8 <find_volume+0x2a8>
 801d8d0:	230d      	movs	r3, #13
 801d8d2:	e126      	b.n	801db22 <find_volume+0x4f2>
 801d8d4:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801d8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d8da:	3338      	adds	r3, #56	@ 0x38
 801d8dc:	3313      	adds	r3, #19
 801d8de:	4618      	mov	r0, r3
 801d8e0:	f7fd fed6 	bl	801b690 <ld_word>
 801d8e4:	4603      	mov	r3, r0
 801d8e6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801d8e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	d106      	bne.n	801d8fc <find_volume+0x2cc>
 801d8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d8f0:	3338      	adds	r3, #56	@ 0x38
 801d8f2:	3320      	adds	r3, #32
 801d8f4:	4618      	mov	r0, r3
 801d8f6:	f7fd fee3 	bl	801b6c0 <ld_dword>
 801d8fa:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801d8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d8fe:	3338      	adds	r3, #56	@ 0x38
 801d900:	330e      	adds	r3, #14
 801d902:	4618      	mov	r0, r3
 801d904:	f7fd fec4 	bl	801b690 <ld_word>
 801d908:	4603      	mov	r3, r0
 801d90a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801d90c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d101      	bne.n	801d916 <find_volume+0x2e6>
 801d912:	230d      	movs	r3, #13
 801d914:	e105      	b.n	801db22 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801d916:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d91a:	4413      	add	r3, r2
 801d91c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d91e:	8911      	ldrh	r1, [r2, #8]
 801d920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d922:	8992      	ldrh	r2, [r2, #12]
 801d924:	0952      	lsrs	r2, r2, #5
 801d926:	b292      	uxth	r2, r2
 801d928:	fbb1 f2f2 	udiv	r2, r1, r2
 801d92c:	b292      	uxth	r2, r2
 801d92e:	4413      	add	r3, r2
 801d930:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801d932:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d936:	429a      	cmp	r2, r3
 801d938:	d201      	bcs.n	801d93e <find_volume+0x30e>
 801d93a:	230d      	movs	r3, #13
 801d93c:	e0f1      	b.n	801db22 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801d93e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d942:	1ad3      	subs	r3, r2, r3
 801d944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d946:	8952      	ldrh	r2, [r2, #10]
 801d948:	fbb3 f3f2 	udiv	r3, r3, r2
 801d94c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801d94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d950:	2b00      	cmp	r3, #0
 801d952:	d101      	bne.n	801d958 <find_volume+0x328>
 801d954:	230d      	movs	r3, #13
 801d956:	e0e4      	b.n	801db22 <find_volume+0x4f2>
		fmt = FS_FAT32;
 801d958:	2303      	movs	r3, #3
 801d95a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801d95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d960:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801d964:	4293      	cmp	r3, r2
 801d966:	d802      	bhi.n	801d96e <find_volume+0x33e>
 801d968:	2302      	movs	r3, #2
 801d96a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801d96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d970:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801d974:	4293      	cmp	r3, r2
 801d976:	d802      	bhi.n	801d97e <find_volume+0x34e>
 801d978:	2301      	movs	r3, #1
 801d97a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801d97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d980:	1c9a      	adds	r2, r3, #2
 801d982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d984:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801d986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d988:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d98a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801d98c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d98e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d990:	441a      	add	r2, r3
 801d992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d994:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801d996:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d99a:	441a      	add	r2, r3
 801d99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d99e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801d9a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d9a4:	2b03      	cmp	r3, #3
 801d9a6:	d11e      	bne.n	801d9e6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801d9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d9aa:	3338      	adds	r3, #56	@ 0x38
 801d9ac:	332a      	adds	r3, #42	@ 0x2a
 801d9ae:	4618      	mov	r0, r3
 801d9b0:	f7fd fe6e 	bl	801b690 <ld_word>
 801d9b4:	4603      	mov	r3, r0
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d001      	beq.n	801d9be <find_volume+0x38e>
 801d9ba:	230d      	movs	r3, #13
 801d9bc:	e0b1      	b.n	801db22 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801d9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d9c0:	891b      	ldrh	r3, [r3, #8]
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d001      	beq.n	801d9ca <find_volume+0x39a>
 801d9c6:	230d      	movs	r3, #13
 801d9c8:	e0ab      	b.n	801db22 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801d9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d9cc:	3338      	adds	r3, #56	@ 0x38
 801d9ce:	332c      	adds	r3, #44	@ 0x2c
 801d9d0:	4618      	mov	r0, r3
 801d9d2:	f7fd fe75 	bl	801b6c0 <ld_dword>
 801d9d6:	4602      	mov	r2, r0
 801d9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d9da:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801d9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d9de:	69db      	ldr	r3, [r3, #28]
 801d9e0:	009b      	lsls	r3, r3, #2
 801d9e2:	647b      	str	r3, [r7, #68]	@ 0x44
 801d9e4:	e01f      	b.n	801da26 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801d9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d9e8:	891b      	ldrh	r3, [r3, #8]
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d101      	bne.n	801d9f2 <find_volume+0x3c2>
 801d9ee:	230d      	movs	r3, #13
 801d9f0:	e097      	b.n	801db22 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801d9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d9f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d9f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d9f8:	441a      	add	r2, r3
 801d9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d9fc:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d9fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801da02:	2b02      	cmp	r3, #2
 801da04:	d103      	bne.n	801da0e <find_volume+0x3de>
 801da06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da08:	69db      	ldr	r3, [r3, #28]
 801da0a:	005b      	lsls	r3, r3, #1
 801da0c:	e00a      	b.n	801da24 <find_volume+0x3f4>
 801da0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da10:	69da      	ldr	r2, [r3, #28]
 801da12:	4613      	mov	r3, r2
 801da14:	005b      	lsls	r3, r3, #1
 801da16:	4413      	add	r3, r2
 801da18:	085a      	lsrs	r2, r3, #1
 801da1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da1c:	69db      	ldr	r3, [r3, #28]
 801da1e:	f003 0301 	and.w	r3, r3, #1
 801da22:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801da24:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801da26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da28:	6a1a      	ldr	r2, [r3, #32]
 801da2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da2c:	899b      	ldrh	r3, [r3, #12]
 801da2e:	4619      	mov	r1, r3
 801da30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801da32:	440b      	add	r3, r1
 801da34:	3b01      	subs	r3, #1
 801da36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801da38:	8989      	ldrh	r1, [r1, #12]
 801da3a:	fbb3 f3f1 	udiv	r3, r3, r1
 801da3e:	429a      	cmp	r2, r3
 801da40:	d201      	bcs.n	801da46 <find_volume+0x416>
 801da42:	230d      	movs	r3, #13
 801da44:	e06d      	b.n	801db22 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801da46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da48:	f04f 32ff 	mov.w	r2, #4294967295
 801da4c:	619a      	str	r2, [r3, #24]
 801da4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da50:	699a      	ldr	r2, [r3, #24]
 801da52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da54:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801da56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da58:	2280      	movs	r2, #128	@ 0x80
 801da5a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801da5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801da60:	2b03      	cmp	r3, #3
 801da62:	d149      	bne.n	801daf8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801da64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da66:	3338      	adds	r3, #56	@ 0x38
 801da68:	3330      	adds	r3, #48	@ 0x30
 801da6a:	4618      	mov	r0, r3
 801da6c:	f7fd fe10 	bl	801b690 <ld_word>
 801da70:	4603      	mov	r3, r0
 801da72:	2b01      	cmp	r3, #1
 801da74:	d140      	bne.n	801daf8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801da76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801da78:	3301      	adds	r3, #1
 801da7a:	4619      	mov	r1, r3
 801da7c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801da7e:	f7fe f8b7 	bl	801bbf0 <move_window>
 801da82:	4603      	mov	r3, r0
 801da84:	2b00      	cmp	r3, #0
 801da86:	d137      	bne.n	801daf8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801da88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da8a:	2200      	movs	r2, #0
 801da8c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801da8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da90:	3338      	adds	r3, #56	@ 0x38
 801da92:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801da96:	4618      	mov	r0, r3
 801da98:	f7fd fdfa 	bl	801b690 <ld_word>
 801da9c:	4603      	mov	r3, r0
 801da9e:	461a      	mov	r2, r3
 801daa0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801daa4:	429a      	cmp	r2, r3
 801daa6:	d127      	bne.n	801daf8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801daa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801daaa:	3338      	adds	r3, #56	@ 0x38
 801daac:	4618      	mov	r0, r3
 801daae:	f7fd fe07 	bl	801b6c0 <ld_dword>
 801dab2:	4603      	mov	r3, r0
 801dab4:	4a1d      	ldr	r2, [pc, #116]	@ (801db2c <find_volume+0x4fc>)
 801dab6:	4293      	cmp	r3, r2
 801dab8:	d11e      	bne.n	801daf8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801daba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dabc:	3338      	adds	r3, #56	@ 0x38
 801dabe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801dac2:	4618      	mov	r0, r3
 801dac4:	f7fd fdfc 	bl	801b6c0 <ld_dword>
 801dac8:	4603      	mov	r3, r0
 801daca:	4a19      	ldr	r2, [pc, #100]	@ (801db30 <find_volume+0x500>)
 801dacc:	4293      	cmp	r3, r2
 801dace:	d113      	bne.n	801daf8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801dad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dad2:	3338      	adds	r3, #56	@ 0x38
 801dad4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801dad8:	4618      	mov	r0, r3
 801dada:	f7fd fdf1 	bl	801b6c0 <ld_dword>
 801dade:	4602      	mov	r2, r0
 801dae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dae2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801dae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dae6:	3338      	adds	r3, #56	@ 0x38
 801dae8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801daec:	4618      	mov	r0, r3
 801daee:	f7fd fde7 	bl	801b6c0 <ld_dword>
 801daf2:	4602      	mov	r2, r0
 801daf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801daf6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801daf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dafa:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801dafe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801db00:	4b0c      	ldr	r3, [pc, #48]	@ (801db34 <find_volume+0x504>)
 801db02:	881b      	ldrh	r3, [r3, #0]
 801db04:	3301      	adds	r3, #1
 801db06:	b29a      	uxth	r2, r3
 801db08:	4b0a      	ldr	r3, [pc, #40]	@ (801db34 <find_volume+0x504>)
 801db0a:	801a      	strh	r2, [r3, #0]
 801db0c:	4b09      	ldr	r3, [pc, #36]	@ (801db34 <find_volume+0x504>)
 801db0e:	881a      	ldrh	r2, [r3, #0]
 801db10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801db12:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801db14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801db16:	4a08      	ldr	r2, [pc, #32]	@ (801db38 <find_volume+0x508>)
 801db18:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801db1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801db1c:	f7fe f800 	bl	801bb20 <clear_lock>
#endif
	return FR_OK;
 801db20:	2300      	movs	r3, #0
}
 801db22:	4618      	mov	r0, r3
 801db24:	3758      	adds	r7, #88	@ 0x58
 801db26:	46bd      	mov	sp, r7
 801db28:	bd80      	pop	{r7, pc}
 801db2a:	bf00      	nop
 801db2c:	41615252 	.word	0x41615252
 801db30:	61417272 	.word	0x61417272
 801db34:	24000554 	.word	0x24000554
 801db38:	24000568 	.word	0x24000568

0801db3c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801db3c:	b580      	push	{r7, lr}
 801db3e:	b084      	sub	sp, #16
 801db40:	af00      	add	r7, sp, #0
 801db42:	6078      	str	r0, [r7, #4]
 801db44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801db46:	2309      	movs	r3, #9
 801db48:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	d01c      	beq.n	801db8a <validate+0x4e>
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	681b      	ldr	r3, [r3, #0]
 801db54:	2b00      	cmp	r3, #0
 801db56:	d018      	beq.n	801db8a <validate+0x4e>
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	681b      	ldr	r3, [r3, #0]
 801db5c:	781b      	ldrb	r3, [r3, #0]
 801db5e:	2b00      	cmp	r3, #0
 801db60:	d013      	beq.n	801db8a <validate+0x4e>
 801db62:	687b      	ldr	r3, [r7, #4]
 801db64:	889a      	ldrh	r2, [r3, #4]
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	88db      	ldrh	r3, [r3, #6]
 801db6c:	429a      	cmp	r2, r3
 801db6e:	d10c      	bne.n	801db8a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801db70:	687b      	ldr	r3, [r7, #4]
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	785b      	ldrb	r3, [r3, #1]
 801db76:	4618      	mov	r0, r3
 801db78:	f7fd fcea 	bl	801b550 <disk_status>
 801db7c:	4603      	mov	r3, r0
 801db7e:	f003 0301 	and.w	r3, r3, #1
 801db82:	2b00      	cmp	r3, #0
 801db84:	d101      	bne.n	801db8a <validate+0x4e>
			res = FR_OK;
 801db86:	2300      	movs	r3, #0
 801db88:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801db8a:	7bfb      	ldrb	r3, [r7, #15]
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d102      	bne.n	801db96 <validate+0x5a>
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	e000      	b.n	801db98 <validate+0x5c>
 801db96:	2300      	movs	r3, #0
 801db98:	683a      	ldr	r2, [r7, #0]
 801db9a:	6013      	str	r3, [r2, #0]
	return res;
 801db9c:	7bfb      	ldrb	r3, [r7, #15]
}
 801db9e:	4618      	mov	r0, r3
 801dba0:	3710      	adds	r7, #16
 801dba2:	46bd      	mov	sp, r7
 801dba4:	bd80      	pop	{r7, pc}
	...

0801dba8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	b088      	sub	sp, #32
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	60f8      	str	r0, [r7, #12]
 801dbb0:	60b9      	str	r1, [r7, #8]
 801dbb2:	4613      	mov	r3, r2
 801dbb4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801dbb6:	68bb      	ldr	r3, [r7, #8]
 801dbb8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801dbba:	f107 0310 	add.w	r3, r7, #16
 801dbbe:	4618      	mov	r0, r3
 801dbc0:	f7ff fc9c 	bl	801d4fc <get_ldnumber>
 801dbc4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801dbc6:	69fb      	ldr	r3, [r7, #28]
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	da01      	bge.n	801dbd0 <f_mount+0x28>
 801dbcc:	230b      	movs	r3, #11
 801dbce:	e02b      	b.n	801dc28 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801dbd0:	4a17      	ldr	r2, [pc, #92]	@ (801dc30 <f_mount+0x88>)
 801dbd2:	69fb      	ldr	r3, [r7, #28]
 801dbd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dbd8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801dbda:	69bb      	ldr	r3, [r7, #24]
 801dbdc:	2b00      	cmp	r3, #0
 801dbde:	d005      	beq.n	801dbec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801dbe0:	69b8      	ldr	r0, [r7, #24]
 801dbe2:	f7fd ff9d 	bl	801bb20 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801dbe6:	69bb      	ldr	r3, [r7, #24]
 801dbe8:	2200      	movs	r2, #0
 801dbea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801dbec:	68fb      	ldr	r3, [r7, #12]
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d002      	beq.n	801dbf8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801dbf2:	68fb      	ldr	r3, [r7, #12]
 801dbf4:	2200      	movs	r2, #0
 801dbf6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801dbf8:	68fa      	ldr	r2, [r7, #12]
 801dbfa:	490d      	ldr	r1, [pc, #52]	@ (801dc30 <f_mount+0x88>)
 801dbfc:	69fb      	ldr	r3, [r7, #28]
 801dbfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801dc02:	68fb      	ldr	r3, [r7, #12]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d002      	beq.n	801dc0e <f_mount+0x66>
 801dc08:	79fb      	ldrb	r3, [r7, #7]
 801dc0a:	2b01      	cmp	r3, #1
 801dc0c:	d001      	beq.n	801dc12 <f_mount+0x6a>
 801dc0e:	2300      	movs	r3, #0
 801dc10:	e00a      	b.n	801dc28 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801dc12:	f107 010c 	add.w	r1, r7, #12
 801dc16:	f107 0308 	add.w	r3, r7, #8
 801dc1a:	2200      	movs	r2, #0
 801dc1c:	4618      	mov	r0, r3
 801dc1e:	f7ff fd07 	bl	801d630 <find_volume>
 801dc22:	4603      	mov	r3, r0
 801dc24:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801dc26:	7dfb      	ldrb	r3, [r7, #23]
}
 801dc28:	4618      	mov	r0, r3
 801dc2a:	3720      	adds	r7, #32
 801dc2c:	46bd      	mov	sp, r7
 801dc2e:	bd80      	pop	{r7, pc}
 801dc30:	24000550 	.word	0x24000550

0801dc34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801dc34:	b580      	push	{r7, lr}
 801dc36:	b09a      	sub	sp, #104	@ 0x68
 801dc38:	af00      	add	r7, sp, #0
 801dc3a:	60f8      	str	r0, [r7, #12]
 801dc3c:	60b9      	str	r1, [r7, #8]
 801dc3e:	4613      	mov	r3, r2
 801dc40:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	d101      	bne.n	801dc4c <f_open+0x18>
 801dc48:	2309      	movs	r3, #9
 801dc4a:	e1b7      	b.n	801dfbc <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801dc4c:	79fb      	ldrb	r3, [r7, #7]
 801dc4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dc52:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801dc54:	79fa      	ldrb	r2, [r7, #7]
 801dc56:	f107 0114 	add.w	r1, r7, #20
 801dc5a:	f107 0308 	add.w	r3, r7, #8
 801dc5e:	4618      	mov	r0, r3
 801dc60:	f7ff fce6 	bl	801d630 <find_volume>
 801dc64:	4603      	mov	r3, r0
 801dc66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801dc6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	f040 819b 	bne.w	801dfaa <f_open+0x376>
		dj.obj.fs = fs;
 801dc74:	697b      	ldr	r3, [r7, #20]
 801dc76:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801dc78:	68ba      	ldr	r2, [r7, #8]
 801dc7a:	f107 0318 	add.w	r3, r7, #24
 801dc7e:	4611      	mov	r1, r2
 801dc80:	4618      	mov	r0, r3
 801dc82:	f7ff fbc5 	bl	801d410 <follow_path>
 801dc86:	4603      	mov	r3, r0
 801dc88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801dc8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	d118      	bne.n	801dcc6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801dc94:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801dc98:	b25b      	sxtb	r3, r3
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	da03      	bge.n	801dca6 <f_open+0x72>
				res = FR_INVALID_NAME;
 801dc9e:	2306      	movs	r3, #6
 801dca0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801dca4:	e00f      	b.n	801dcc6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801dca6:	79fb      	ldrb	r3, [r7, #7]
 801dca8:	2b01      	cmp	r3, #1
 801dcaa:	bf8c      	ite	hi
 801dcac:	2301      	movhi	r3, #1
 801dcae:	2300      	movls	r3, #0
 801dcb0:	b2db      	uxtb	r3, r3
 801dcb2:	461a      	mov	r2, r3
 801dcb4:	f107 0318 	add.w	r3, r7, #24
 801dcb8:	4611      	mov	r1, r2
 801dcba:	4618      	mov	r0, r3
 801dcbc:	f7fd fde8 	bl	801b890 <chk_lock>
 801dcc0:	4603      	mov	r3, r0
 801dcc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801dcc6:	79fb      	ldrb	r3, [r7, #7]
 801dcc8:	f003 031c 	and.w	r3, r3, #28
 801dccc:	2b00      	cmp	r3, #0
 801dcce:	d07f      	beq.n	801ddd0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801dcd0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d017      	beq.n	801dd08 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801dcd8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801dcdc:	2b04      	cmp	r3, #4
 801dcde:	d10e      	bne.n	801dcfe <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801dce0:	f7fd fe32 	bl	801b948 <enq_lock>
 801dce4:	4603      	mov	r3, r0
 801dce6:	2b00      	cmp	r3, #0
 801dce8:	d006      	beq.n	801dcf8 <f_open+0xc4>
 801dcea:	f107 0318 	add.w	r3, r7, #24
 801dcee:	4618      	mov	r0, r3
 801dcf0:	f7ff f894 	bl	801ce1c <dir_register>
 801dcf4:	4603      	mov	r3, r0
 801dcf6:	e000      	b.n	801dcfa <f_open+0xc6>
 801dcf8:	2312      	movs	r3, #18
 801dcfa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801dcfe:	79fb      	ldrb	r3, [r7, #7]
 801dd00:	f043 0308 	orr.w	r3, r3, #8
 801dd04:	71fb      	strb	r3, [r7, #7]
 801dd06:	e010      	b.n	801dd2a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801dd08:	7fbb      	ldrb	r3, [r7, #30]
 801dd0a:	f003 0311 	and.w	r3, r3, #17
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d003      	beq.n	801dd1a <f_open+0xe6>
					res = FR_DENIED;
 801dd12:	2307      	movs	r3, #7
 801dd14:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801dd18:	e007      	b.n	801dd2a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801dd1a:	79fb      	ldrb	r3, [r7, #7]
 801dd1c:	f003 0304 	and.w	r3, r3, #4
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d002      	beq.n	801dd2a <f_open+0xf6>
 801dd24:	2308      	movs	r3, #8
 801dd26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801dd2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801dd2e:	2b00      	cmp	r3, #0
 801dd30:	d168      	bne.n	801de04 <f_open+0x1d0>
 801dd32:	79fb      	ldrb	r3, [r7, #7]
 801dd34:	f003 0308 	and.w	r3, r3, #8
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d063      	beq.n	801de04 <f_open+0x1d0>
				dw = GET_FATTIME();
 801dd3c:	f7fd fbaa 	bl	801b494 <get_fattime>
 801dd40:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801dd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd44:	330e      	adds	r3, #14
 801dd46:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801dd48:	4618      	mov	r0, r3
 801dd4a:	f7fd fcf7 	bl	801b73c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801dd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd50:	3316      	adds	r3, #22
 801dd52:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801dd54:	4618      	mov	r0, r3
 801dd56:	f7fd fcf1 	bl	801b73c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801dd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd5c:	330b      	adds	r3, #11
 801dd5e:	2220      	movs	r2, #32
 801dd60:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801dd62:	697b      	ldr	r3, [r7, #20]
 801dd64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801dd66:	4611      	mov	r1, r2
 801dd68:	4618      	mov	r0, r3
 801dd6a:	f7fe fcc6 	bl	801c6fa <ld_clust>
 801dd6e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801dd70:	697b      	ldr	r3, [r7, #20]
 801dd72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801dd74:	2200      	movs	r2, #0
 801dd76:	4618      	mov	r0, r3
 801dd78:	f7fe fcde 	bl	801c738 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801dd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd7e:	331c      	adds	r3, #28
 801dd80:	2100      	movs	r1, #0
 801dd82:	4618      	mov	r0, r3
 801dd84:	f7fd fcda 	bl	801b73c <st_dword>
					fs->wflag = 1;
 801dd88:	697b      	ldr	r3, [r7, #20]
 801dd8a:	2201      	movs	r2, #1
 801dd8c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801dd8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dd90:	2b00      	cmp	r3, #0
 801dd92:	d037      	beq.n	801de04 <f_open+0x1d0>
						dw = fs->winsect;
 801dd94:	697b      	ldr	r3, [r7, #20]
 801dd96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801dd98:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801dd9a:	f107 0318 	add.w	r3, r7, #24
 801dd9e:	2200      	movs	r2, #0
 801dda0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801dda2:	4618      	mov	r0, r3
 801dda4:	f7fe f9ce 	bl	801c144 <remove_chain>
 801dda8:	4603      	mov	r3, r0
 801ddaa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801ddae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ddb2:	2b00      	cmp	r3, #0
 801ddb4:	d126      	bne.n	801de04 <f_open+0x1d0>
							res = move_window(fs, dw);
 801ddb6:	697b      	ldr	r3, [r7, #20]
 801ddb8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801ddba:	4618      	mov	r0, r3
 801ddbc:	f7fd ff18 	bl	801bbf0 <move_window>
 801ddc0:	4603      	mov	r3, r0
 801ddc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801ddc6:	697b      	ldr	r3, [r7, #20]
 801ddc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ddca:	3a01      	subs	r2, #1
 801ddcc:	615a      	str	r2, [r3, #20]
 801ddce:	e019      	b.n	801de04 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801ddd0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ddd4:	2b00      	cmp	r3, #0
 801ddd6:	d115      	bne.n	801de04 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801ddd8:	7fbb      	ldrb	r3, [r7, #30]
 801ddda:	f003 0310 	and.w	r3, r3, #16
 801ddde:	2b00      	cmp	r3, #0
 801dde0:	d003      	beq.n	801ddea <f_open+0x1b6>
					res = FR_NO_FILE;
 801dde2:	2304      	movs	r3, #4
 801dde4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801dde8:	e00c      	b.n	801de04 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801ddea:	79fb      	ldrb	r3, [r7, #7]
 801ddec:	f003 0302 	and.w	r3, r3, #2
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d007      	beq.n	801de04 <f_open+0x1d0>
 801ddf4:	7fbb      	ldrb	r3, [r7, #30]
 801ddf6:	f003 0301 	and.w	r3, r3, #1
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	d002      	beq.n	801de04 <f_open+0x1d0>
						res = FR_DENIED;
 801ddfe:	2307      	movs	r3, #7
 801de00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801de04:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d126      	bne.n	801de5a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801de0c:	79fb      	ldrb	r3, [r7, #7]
 801de0e:	f003 0308 	and.w	r3, r3, #8
 801de12:	2b00      	cmp	r3, #0
 801de14:	d003      	beq.n	801de1e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801de16:	79fb      	ldrb	r3, [r7, #7]
 801de18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801de1c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801de1e:	697b      	ldr	r3, [r7, #20]
 801de20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801de22:	68fb      	ldr	r3, [r7, #12]
 801de24:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801de26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801de28:	68fb      	ldr	r3, [r7, #12]
 801de2a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801de2c:	79fb      	ldrb	r3, [r7, #7]
 801de2e:	2b01      	cmp	r3, #1
 801de30:	bf8c      	ite	hi
 801de32:	2301      	movhi	r3, #1
 801de34:	2300      	movls	r3, #0
 801de36:	b2db      	uxtb	r3, r3
 801de38:	461a      	mov	r2, r3
 801de3a:	f107 0318 	add.w	r3, r7, #24
 801de3e:	4611      	mov	r1, r2
 801de40:	4618      	mov	r0, r3
 801de42:	f7fd fda3 	bl	801b98c <inc_lock>
 801de46:	4602      	mov	r2, r0
 801de48:	68fb      	ldr	r3, [r7, #12]
 801de4a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801de4c:	68fb      	ldr	r3, [r7, #12]
 801de4e:	691b      	ldr	r3, [r3, #16]
 801de50:	2b00      	cmp	r3, #0
 801de52:	d102      	bne.n	801de5a <f_open+0x226>
 801de54:	2302      	movs	r3, #2
 801de56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801de5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801de5e:	2b00      	cmp	r3, #0
 801de60:	f040 80a3 	bne.w	801dfaa <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801de64:	697b      	ldr	r3, [r7, #20]
 801de66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801de68:	4611      	mov	r1, r2
 801de6a:	4618      	mov	r0, r3
 801de6c:	f7fe fc45 	bl	801c6fa <ld_clust>
 801de70:	4602      	mov	r2, r0
 801de72:	68fb      	ldr	r3, [r7, #12]
 801de74:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801de76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de78:	331c      	adds	r3, #28
 801de7a:	4618      	mov	r0, r3
 801de7c:	f7fd fc20 	bl	801b6c0 <ld_dword>
 801de80:	4602      	mov	r2, r0
 801de82:	68fb      	ldr	r3, [r7, #12]
 801de84:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801de86:	68fb      	ldr	r3, [r7, #12]
 801de88:	2200      	movs	r2, #0
 801de8a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801de8c:	697a      	ldr	r2, [r7, #20]
 801de8e:	68fb      	ldr	r3, [r7, #12]
 801de90:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801de92:	697b      	ldr	r3, [r7, #20]
 801de94:	88da      	ldrh	r2, [r3, #6]
 801de96:	68fb      	ldr	r3, [r7, #12]
 801de98:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801de9a:	68fb      	ldr	r3, [r7, #12]
 801de9c:	79fa      	ldrb	r2, [r7, #7]
 801de9e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801dea0:	68fb      	ldr	r3, [r7, #12]
 801dea2:	2200      	movs	r2, #0
 801dea4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	2200      	movs	r2, #0
 801deaa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	2200      	movs	r2, #0
 801deb0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801deb2:	68fb      	ldr	r3, [r7, #12]
 801deb4:	3330      	adds	r3, #48	@ 0x30
 801deb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801deba:	2100      	movs	r1, #0
 801debc:	4618      	mov	r0, r3
 801debe:	f7fd fc8a 	bl	801b7d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801dec2:	79fb      	ldrb	r3, [r7, #7]
 801dec4:	f003 0320 	and.w	r3, r3, #32
 801dec8:	2b00      	cmp	r3, #0
 801deca:	d06e      	beq.n	801dfaa <f_open+0x376>
 801decc:	68fb      	ldr	r3, [r7, #12]
 801dece:	68db      	ldr	r3, [r3, #12]
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	d06a      	beq.n	801dfaa <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	68da      	ldr	r2, [r3, #12]
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801dedc:	697b      	ldr	r3, [r7, #20]
 801dede:	895b      	ldrh	r3, [r3, #10]
 801dee0:	461a      	mov	r2, r3
 801dee2:	697b      	ldr	r3, [r7, #20]
 801dee4:	899b      	ldrh	r3, [r3, #12]
 801dee6:	fb02 f303 	mul.w	r3, r2, r3
 801deea:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	689b      	ldr	r3, [r3, #8]
 801def0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801def2:	68fb      	ldr	r3, [r7, #12]
 801def4:	68db      	ldr	r3, [r3, #12]
 801def6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801def8:	e016      	b.n	801df28 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801defa:	68fb      	ldr	r3, [r7, #12]
 801defc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801defe:	4618      	mov	r0, r3
 801df00:	f7fd ff33 	bl	801bd6a <get_fat>
 801df04:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801df06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801df08:	2b01      	cmp	r3, #1
 801df0a:	d802      	bhi.n	801df12 <f_open+0x2de>
 801df0c:	2302      	movs	r3, #2
 801df0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801df12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801df14:	f1b3 3fff 	cmp.w	r3, #4294967295
 801df18:	d102      	bne.n	801df20 <f_open+0x2ec>
 801df1a:	2301      	movs	r3, #1
 801df1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801df20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801df22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801df24:	1ad3      	subs	r3, r2, r3
 801df26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801df28:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801df2c:	2b00      	cmp	r3, #0
 801df2e:	d103      	bne.n	801df38 <f_open+0x304>
 801df30:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801df32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801df34:	429a      	cmp	r2, r3
 801df36:	d8e0      	bhi.n	801defa <f_open+0x2c6>
				}
				fp->clust = clst;
 801df38:	68fb      	ldr	r3, [r7, #12]
 801df3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801df3c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801df3e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801df42:	2b00      	cmp	r3, #0
 801df44:	d131      	bne.n	801dfaa <f_open+0x376>
 801df46:	697b      	ldr	r3, [r7, #20]
 801df48:	899b      	ldrh	r3, [r3, #12]
 801df4a:	461a      	mov	r2, r3
 801df4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801df4e:	fbb3 f1f2 	udiv	r1, r3, r2
 801df52:	fb01 f202 	mul.w	r2, r1, r2
 801df56:	1a9b      	subs	r3, r3, r2
 801df58:	2b00      	cmp	r3, #0
 801df5a:	d026      	beq.n	801dfaa <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801df5c:	697b      	ldr	r3, [r7, #20]
 801df5e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801df60:	4618      	mov	r0, r3
 801df62:	f7fd fee3 	bl	801bd2c <clust2sect>
 801df66:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801df68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	d103      	bne.n	801df76 <f_open+0x342>
						res = FR_INT_ERR;
 801df6e:	2302      	movs	r3, #2
 801df70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801df74:	e019      	b.n	801dfaa <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801df76:	697b      	ldr	r3, [r7, #20]
 801df78:	899b      	ldrh	r3, [r3, #12]
 801df7a:	461a      	mov	r2, r3
 801df7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801df7e:	fbb3 f2f2 	udiv	r2, r3, r2
 801df82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df84:	441a      	add	r2, r3
 801df86:	68fb      	ldr	r3, [r7, #12]
 801df88:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801df8a:	697b      	ldr	r3, [r7, #20]
 801df8c:	7858      	ldrb	r0, [r3, #1]
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	6a1a      	ldr	r2, [r3, #32]
 801df98:	2301      	movs	r3, #1
 801df9a:	f7fd fb1b 	bl	801b5d4 <disk_read>
 801df9e:	4603      	mov	r3, r0
 801dfa0:	2b00      	cmp	r3, #0
 801dfa2:	d002      	beq.n	801dfaa <f_open+0x376>
 801dfa4:	2301      	movs	r3, #1
 801dfa6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801dfaa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d002      	beq.n	801dfb8 <f_open+0x384>
 801dfb2:	68fb      	ldr	r3, [r7, #12]
 801dfb4:	2200      	movs	r2, #0
 801dfb6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801dfb8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801dfbc:	4618      	mov	r0, r3
 801dfbe:	3768      	adds	r7, #104	@ 0x68
 801dfc0:	46bd      	mov	sp, r7
 801dfc2:	bd80      	pop	{r7, pc}

0801dfc4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801dfc4:	b580      	push	{r7, lr}
 801dfc6:	b08c      	sub	sp, #48	@ 0x30
 801dfc8:	af00      	add	r7, sp, #0
 801dfca:	60f8      	str	r0, [r7, #12]
 801dfcc:	60b9      	str	r1, [r7, #8]
 801dfce:	607a      	str	r2, [r7, #4]
 801dfd0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801dfd2:	68bb      	ldr	r3, [r7, #8]
 801dfd4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801dfd6:	683b      	ldr	r3, [r7, #0]
 801dfd8:	2200      	movs	r2, #0
 801dfda:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801dfdc:	68fb      	ldr	r3, [r7, #12]
 801dfde:	f107 0210 	add.w	r2, r7, #16
 801dfe2:	4611      	mov	r1, r2
 801dfe4:	4618      	mov	r0, r3
 801dfe6:	f7ff fda9 	bl	801db3c <validate>
 801dfea:	4603      	mov	r3, r0
 801dfec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801dff0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	d107      	bne.n	801e008 <f_write+0x44>
 801dff8:	68fb      	ldr	r3, [r7, #12]
 801dffa:	7d5b      	ldrb	r3, [r3, #21]
 801dffc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801e000:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e004:	2b00      	cmp	r3, #0
 801e006:	d002      	beq.n	801e00e <f_write+0x4a>
 801e008:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e00c:	e16a      	b.n	801e2e4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801e00e:	68fb      	ldr	r3, [r7, #12]
 801e010:	7d1b      	ldrb	r3, [r3, #20]
 801e012:	f003 0302 	and.w	r3, r3, #2
 801e016:	2b00      	cmp	r3, #0
 801e018:	d101      	bne.n	801e01e <f_write+0x5a>
 801e01a:	2307      	movs	r3, #7
 801e01c:	e162      	b.n	801e2e4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801e01e:	68fb      	ldr	r3, [r7, #12]
 801e020:	699a      	ldr	r2, [r3, #24]
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	441a      	add	r2, r3
 801e026:	68fb      	ldr	r3, [r7, #12]
 801e028:	699b      	ldr	r3, [r3, #24]
 801e02a:	429a      	cmp	r2, r3
 801e02c:	f080 814c 	bcs.w	801e2c8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801e030:	68fb      	ldr	r3, [r7, #12]
 801e032:	699b      	ldr	r3, [r3, #24]
 801e034:	43db      	mvns	r3, r3
 801e036:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801e038:	e146      	b.n	801e2c8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801e03a:	68fb      	ldr	r3, [r7, #12]
 801e03c:	699b      	ldr	r3, [r3, #24]
 801e03e:	693a      	ldr	r2, [r7, #16]
 801e040:	8992      	ldrh	r2, [r2, #12]
 801e042:	fbb3 f1f2 	udiv	r1, r3, r2
 801e046:	fb01 f202 	mul.w	r2, r1, r2
 801e04a:	1a9b      	subs	r3, r3, r2
 801e04c:	2b00      	cmp	r3, #0
 801e04e:	f040 80f1 	bne.w	801e234 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801e052:	68fb      	ldr	r3, [r7, #12]
 801e054:	699b      	ldr	r3, [r3, #24]
 801e056:	693a      	ldr	r2, [r7, #16]
 801e058:	8992      	ldrh	r2, [r2, #12]
 801e05a:	fbb3 f3f2 	udiv	r3, r3, r2
 801e05e:	693a      	ldr	r2, [r7, #16]
 801e060:	8952      	ldrh	r2, [r2, #10]
 801e062:	3a01      	subs	r2, #1
 801e064:	4013      	ands	r3, r2
 801e066:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801e068:	69bb      	ldr	r3, [r7, #24]
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	d143      	bne.n	801e0f6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	699b      	ldr	r3, [r3, #24]
 801e072:	2b00      	cmp	r3, #0
 801e074:	d10c      	bne.n	801e090 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801e076:	68fb      	ldr	r3, [r7, #12]
 801e078:	689b      	ldr	r3, [r3, #8]
 801e07a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801e07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e07e:	2b00      	cmp	r3, #0
 801e080:	d11a      	bne.n	801e0b8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	2100      	movs	r1, #0
 801e086:	4618      	mov	r0, r3
 801e088:	f7fe f8c1 	bl	801c20e <create_chain>
 801e08c:	62b8      	str	r0, [r7, #40]	@ 0x28
 801e08e:	e013      	b.n	801e0b8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801e090:	68fb      	ldr	r3, [r7, #12]
 801e092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e094:	2b00      	cmp	r3, #0
 801e096:	d007      	beq.n	801e0a8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801e098:	68fb      	ldr	r3, [r7, #12]
 801e09a:	699b      	ldr	r3, [r3, #24]
 801e09c:	4619      	mov	r1, r3
 801e09e:	68f8      	ldr	r0, [r7, #12]
 801e0a0:	f7fe f94d 	bl	801c33e <clmt_clust>
 801e0a4:	62b8      	str	r0, [r7, #40]	@ 0x28
 801e0a6:	e007      	b.n	801e0b8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801e0a8:	68fa      	ldr	r2, [r7, #12]
 801e0aa:	68fb      	ldr	r3, [r7, #12]
 801e0ac:	69db      	ldr	r3, [r3, #28]
 801e0ae:	4619      	mov	r1, r3
 801e0b0:	4610      	mov	r0, r2
 801e0b2:	f7fe f8ac 	bl	801c20e <create_chain>
 801e0b6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801e0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	f000 8109 	beq.w	801e2d2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801e0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e0c2:	2b01      	cmp	r3, #1
 801e0c4:	d104      	bne.n	801e0d0 <f_write+0x10c>
 801e0c6:	68fb      	ldr	r3, [r7, #12]
 801e0c8:	2202      	movs	r2, #2
 801e0ca:	755a      	strb	r2, [r3, #21]
 801e0cc:	2302      	movs	r3, #2
 801e0ce:	e109      	b.n	801e2e4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801e0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e0d6:	d104      	bne.n	801e0e2 <f_write+0x11e>
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	2201      	movs	r2, #1
 801e0dc:	755a      	strb	r2, [r3, #21]
 801e0de:	2301      	movs	r3, #1
 801e0e0:	e100      	b.n	801e2e4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801e0e2:	68fb      	ldr	r3, [r7, #12]
 801e0e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e0e6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801e0e8:	68fb      	ldr	r3, [r7, #12]
 801e0ea:	689b      	ldr	r3, [r3, #8]
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	d102      	bne.n	801e0f6 <f_write+0x132>
 801e0f0:	68fb      	ldr	r3, [r7, #12]
 801e0f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e0f4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801e0f6:	68fb      	ldr	r3, [r7, #12]
 801e0f8:	7d1b      	ldrb	r3, [r3, #20]
 801e0fa:	b25b      	sxtb	r3, r3
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	da18      	bge.n	801e132 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801e100:	693b      	ldr	r3, [r7, #16]
 801e102:	7858      	ldrb	r0, [r3, #1]
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801e10a:	68fb      	ldr	r3, [r7, #12]
 801e10c:	6a1a      	ldr	r2, [r3, #32]
 801e10e:	2301      	movs	r3, #1
 801e110:	f7fd fa80 	bl	801b614 <disk_write>
 801e114:	4603      	mov	r3, r0
 801e116:	2b00      	cmp	r3, #0
 801e118:	d004      	beq.n	801e124 <f_write+0x160>
 801e11a:	68fb      	ldr	r3, [r7, #12]
 801e11c:	2201      	movs	r2, #1
 801e11e:	755a      	strb	r2, [r3, #21]
 801e120:	2301      	movs	r3, #1
 801e122:	e0df      	b.n	801e2e4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801e124:	68fb      	ldr	r3, [r7, #12]
 801e126:	7d1b      	ldrb	r3, [r3, #20]
 801e128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e12c:	b2da      	uxtb	r2, r3
 801e12e:	68fb      	ldr	r3, [r7, #12]
 801e130:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801e132:	693a      	ldr	r2, [r7, #16]
 801e134:	68fb      	ldr	r3, [r7, #12]
 801e136:	69db      	ldr	r3, [r3, #28]
 801e138:	4619      	mov	r1, r3
 801e13a:	4610      	mov	r0, r2
 801e13c:	f7fd fdf6 	bl	801bd2c <clust2sect>
 801e140:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801e142:	697b      	ldr	r3, [r7, #20]
 801e144:	2b00      	cmp	r3, #0
 801e146:	d104      	bne.n	801e152 <f_write+0x18e>
 801e148:	68fb      	ldr	r3, [r7, #12]
 801e14a:	2202      	movs	r2, #2
 801e14c:	755a      	strb	r2, [r3, #21]
 801e14e:	2302      	movs	r3, #2
 801e150:	e0c8      	b.n	801e2e4 <f_write+0x320>
			sect += csect;
 801e152:	697a      	ldr	r2, [r7, #20]
 801e154:	69bb      	ldr	r3, [r7, #24]
 801e156:	4413      	add	r3, r2
 801e158:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801e15a:	693b      	ldr	r3, [r7, #16]
 801e15c:	899b      	ldrh	r3, [r3, #12]
 801e15e:	461a      	mov	r2, r3
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	fbb3 f3f2 	udiv	r3, r3, r2
 801e166:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801e168:	6a3b      	ldr	r3, [r7, #32]
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	d043      	beq.n	801e1f6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801e16e:	69ba      	ldr	r2, [r7, #24]
 801e170:	6a3b      	ldr	r3, [r7, #32]
 801e172:	4413      	add	r3, r2
 801e174:	693a      	ldr	r2, [r7, #16]
 801e176:	8952      	ldrh	r2, [r2, #10]
 801e178:	4293      	cmp	r3, r2
 801e17a:	d905      	bls.n	801e188 <f_write+0x1c4>
					cc = fs->csize - csect;
 801e17c:	693b      	ldr	r3, [r7, #16]
 801e17e:	895b      	ldrh	r3, [r3, #10]
 801e180:	461a      	mov	r2, r3
 801e182:	69bb      	ldr	r3, [r7, #24]
 801e184:	1ad3      	subs	r3, r2, r3
 801e186:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801e188:	693b      	ldr	r3, [r7, #16]
 801e18a:	7858      	ldrb	r0, [r3, #1]
 801e18c:	6a3b      	ldr	r3, [r7, #32]
 801e18e:	697a      	ldr	r2, [r7, #20]
 801e190:	69f9      	ldr	r1, [r7, #28]
 801e192:	f7fd fa3f 	bl	801b614 <disk_write>
 801e196:	4603      	mov	r3, r0
 801e198:	2b00      	cmp	r3, #0
 801e19a:	d004      	beq.n	801e1a6 <f_write+0x1e2>
 801e19c:	68fb      	ldr	r3, [r7, #12]
 801e19e:	2201      	movs	r2, #1
 801e1a0:	755a      	strb	r2, [r3, #21]
 801e1a2:	2301      	movs	r3, #1
 801e1a4:	e09e      	b.n	801e2e4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801e1a6:	68fb      	ldr	r3, [r7, #12]
 801e1a8:	6a1a      	ldr	r2, [r3, #32]
 801e1aa:	697b      	ldr	r3, [r7, #20]
 801e1ac:	1ad3      	subs	r3, r2, r3
 801e1ae:	6a3a      	ldr	r2, [r7, #32]
 801e1b0:	429a      	cmp	r2, r3
 801e1b2:	d918      	bls.n	801e1e6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801e1b4:	68fb      	ldr	r3, [r7, #12]
 801e1b6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801e1ba:	68fb      	ldr	r3, [r7, #12]
 801e1bc:	6a1a      	ldr	r2, [r3, #32]
 801e1be:	697b      	ldr	r3, [r7, #20]
 801e1c0:	1ad3      	subs	r3, r2, r3
 801e1c2:	693a      	ldr	r2, [r7, #16]
 801e1c4:	8992      	ldrh	r2, [r2, #12]
 801e1c6:	fb02 f303 	mul.w	r3, r2, r3
 801e1ca:	69fa      	ldr	r2, [r7, #28]
 801e1cc:	18d1      	adds	r1, r2, r3
 801e1ce:	693b      	ldr	r3, [r7, #16]
 801e1d0:	899b      	ldrh	r3, [r3, #12]
 801e1d2:	461a      	mov	r2, r3
 801e1d4:	f7fd fade 	bl	801b794 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801e1d8:	68fb      	ldr	r3, [r7, #12]
 801e1da:	7d1b      	ldrb	r3, [r3, #20]
 801e1dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e1e0:	b2da      	uxtb	r2, r3
 801e1e2:	68fb      	ldr	r3, [r7, #12]
 801e1e4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801e1e6:	693b      	ldr	r3, [r7, #16]
 801e1e8:	899b      	ldrh	r3, [r3, #12]
 801e1ea:	461a      	mov	r2, r3
 801e1ec:	6a3b      	ldr	r3, [r7, #32]
 801e1ee:	fb02 f303 	mul.w	r3, r2, r3
 801e1f2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801e1f4:	e04b      	b.n	801e28e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801e1f6:	68fb      	ldr	r3, [r7, #12]
 801e1f8:	6a1b      	ldr	r3, [r3, #32]
 801e1fa:	697a      	ldr	r2, [r7, #20]
 801e1fc:	429a      	cmp	r2, r3
 801e1fe:	d016      	beq.n	801e22e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801e200:	68fb      	ldr	r3, [r7, #12]
 801e202:	699a      	ldr	r2, [r3, #24]
 801e204:	68fb      	ldr	r3, [r7, #12]
 801e206:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801e208:	429a      	cmp	r2, r3
 801e20a:	d210      	bcs.n	801e22e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801e20c:	693b      	ldr	r3, [r7, #16]
 801e20e:	7858      	ldrb	r0, [r3, #1]
 801e210:	68fb      	ldr	r3, [r7, #12]
 801e212:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801e216:	2301      	movs	r3, #1
 801e218:	697a      	ldr	r2, [r7, #20]
 801e21a:	f7fd f9db 	bl	801b5d4 <disk_read>
 801e21e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801e220:	2b00      	cmp	r3, #0
 801e222:	d004      	beq.n	801e22e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801e224:	68fb      	ldr	r3, [r7, #12]
 801e226:	2201      	movs	r2, #1
 801e228:	755a      	strb	r2, [r3, #21]
 801e22a:	2301      	movs	r3, #1
 801e22c:	e05a      	b.n	801e2e4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801e22e:	68fb      	ldr	r3, [r7, #12]
 801e230:	697a      	ldr	r2, [r7, #20]
 801e232:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801e234:	693b      	ldr	r3, [r7, #16]
 801e236:	899b      	ldrh	r3, [r3, #12]
 801e238:	4618      	mov	r0, r3
 801e23a:	68fb      	ldr	r3, [r7, #12]
 801e23c:	699b      	ldr	r3, [r3, #24]
 801e23e:	693a      	ldr	r2, [r7, #16]
 801e240:	8992      	ldrh	r2, [r2, #12]
 801e242:	fbb3 f1f2 	udiv	r1, r3, r2
 801e246:	fb01 f202 	mul.w	r2, r1, r2
 801e24a:	1a9b      	subs	r3, r3, r2
 801e24c:	1ac3      	subs	r3, r0, r3
 801e24e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801e250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	429a      	cmp	r2, r3
 801e256:	d901      	bls.n	801e25c <f_write+0x298>
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801e25c:	68fb      	ldr	r3, [r7, #12]
 801e25e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801e262:	68fb      	ldr	r3, [r7, #12]
 801e264:	699b      	ldr	r3, [r3, #24]
 801e266:	693a      	ldr	r2, [r7, #16]
 801e268:	8992      	ldrh	r2, [r2, #12]
 801e26a:	fbb3 f0f2 	udiv	r0, r3, r2
 801e26e:	fb00 f202 	mul.w	r2, r0, r2
 801e272:	1a9b      	subs	r3, r3, r2
 801e274:	440b      	add	r3, r1
 801e276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e278:	69f9      	ldr	r1, [r7, #28]
 801e27a:	4618      	mov	r0, r3
 801e27c:	f7fd fa8a 	bl	801b794 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801e280:	68fb      	ldr	r3, [r7, #12]
 801e282:	7d1b      	ldrb	r3, [r3, #20]
 801e284:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801e288:	b2da      	uxtb	r2, r3
 801e28a:	68fb      	ldr	r3, [r7, #12]
 801e28c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801e28e:	69fa      	ldr	r2, [r7, #28]
 801e290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e292:	4413      	add	r3, r2
 801e294:	61fb      	str	r3, [r7, #28]
 801e296:	68fb      	ldr	r3, [r7, #12]
 801e298:	699a      	ldr	r2, [r3, #24]
 801e29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e29c:	441a      	add	r2, r3
 801e29e:	68fb      	ldr	r3, [r7, #12]
 801e2a0:	619a      	str	r2, [r3, #24]
 801e2a2:	68fb      	ldr	r3, [r7, #12]
 801e2a4:	68da      	ldr	r2, [r3, #12]
 801e2a6:	68fb      	ldr	r3, [r7, #12]
 801e2a8:	699b      	ldr	r3, [r3, #24]
 801e2aa:	429a      	cmp	r2, r3
 801e2ac:	bf38      	it	cc
 801e2ae:	461a      	movcc	r2, r3
 801e2b0:	68fb      	ldr	r3, [r7, #12]
 801e2b2:	60da      	str	r2, [r3, #12]
 801e2b4:	683b      	ldr	r3, [r7, #0]
 801e2b6:	681a      	ldr	r2, [r3, #0]
 801e2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e2ba:	441a      	add	r2, r3
 801e2bc:	683b      	ldr	r3, [r7, #0]
 801e2be:	601a      	str	r2, [r3, #0]
 801e2c0:	687a      	ldr	r2, [r7, #4]
 801e2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e2c4:	1ad3      	subs	r3, r2, r3
 801e2c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801e2c8:	687b      	ldr	r3, [r7, #4]
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	f47f aeb5 	bne.w	801e03a <f_write+0x76>
 801e2d0:	e000      	b.n	801e2d4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801e2d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801e2d4:	68fb      	ldr	r3, [r7, #12]
 801e2d6:	7d1b      	ldrb	r3, [r3, #20]
 801e2d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e2dc:	b2da      	uxtb	r2, r3
 801e2de:	68fb      	ldr	r3, [r7, #12]
 801e2e0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801e2e2:	2300      	movs	r3, #0
}
 801e2e4:	4618      	mov	r0, r3
 801e2e6:	3730      	adds	r7, #48	@ 0x30
 801e2e8:	46bd      	mov	sp, r7
 801e2ea:	bd80      	pop	{r7, pc}

0801e2ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801e2ec:	b580      	push	{r7, lr}
 801e2ee:	b086      	sub	sp, #24
 801e2f0:	af00      	add	r7, sp, #0
 801e2f2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801e2f4:	687b      	ldr	r3, [r7, #4]
 801e2f6:	f107 0208 	add.w	r2, r7, #8
 801e2fa:	4611      	mov	r1, r2
 801e2fc:	4618      	mov	r0, r3
 801e2fe:	f7ff fc1d 	bl	801db3c <validate>
 801e302:	4603      	mov	r3, r0
 801e304:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801e306:	7dfb      	ldrb	r3, [r7, #23]
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d168      	bne.n	801e3de <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	7d1b      	ldrb	r3, [r3, #20]
 801e310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e314:	2b00      	cmp	r3, #0
 801e316:	d062      	beq.n	801e3de <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	7d1b      	ldrb	r3, [r3, #20]
 801e31c:	b25b      	sxtb	r3, r3
 801e31e:	2b00      	cmp	r3, #0
 801e320:	da15      	bge.n	801e34e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801e322:	68bb      	ldr	r3, [r7, #8]
 801e324:	7858      	ldrb	r0, [r3, #1]
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	6a1a      	ldr	r2, [r3, #32]
 801e330:	2301      	movs	r3, #1
 801e332:	f7fd f96f 	bl	801b614 <disk_write>
 801e336:	4603      	mov	r3, r0
 801e338:	2b00      	cmp	r3, #0
 801e33a:	d001      	beq.n	801e340 <f_sync+0x54>
 801e33c:	2301      	movs	r3, #1
 801e33e:	e04f      	b.n	801e3e0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	7d1b      	ldrb	r3, [r3, #20]
 801e344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e348:	b2da      	uxtb	r2, r3
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801e34e:	f7fd f8a1 	bl	801b494 <get_fattime>
 801e352:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801e354:	68ba      	ldr	r2, [r7, #8]
 801e356:	687b      	ldr	r3, [r7, #4]
 801e358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e35a:	4619      	mov	r1, r3
 801e35c:	4610      	mov	r0, r2
 801e35e:	f7fd fc47 	bl	801bbf0 <move_window>
 801e362:	4603      	mov	r3, r0
 801e364:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801e366:	7dfb      	ldrb	r3, [r7, #23]
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d138      	bne.n	801e3de <f_sync+0xf2>
					dir = fp->dir_ptr;
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e370:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801e372:	68fb      	ldr	r3, [r7, #12]
 801e374:	330b      	adds	r3, #11
 801e376:	781a      	ldrb	r2, [r3, #0]
 801e378:	68fb      	ldr	r3, [r7, #12]
 801e37a:	330b      	adds	r3, #11
 801e37c:	f042 0220 	orr.w	r2, r2, #32
 801e380:	b2d2      	uxtb	r2, r2
 801e382:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	6818      	ldr	r0, [r3, #0]
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	689b      	ldr	r3, [r3, #8]
 801e38c:	461a      	mov	r2, r3
 801e38e:	68f9      	ldr	r1, [r7, #12]
 801e390:	f7fe f9d2 	bl	801c738 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801e394:	68fb      	ldr	r3, [r7, #12]
 801e396:	f103 021c 	add.w	r2, r3, #28
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	68db      	ldr	r3, [r3, #12]
 801e39e:	4619      	mov	r1, r3
 801e3a0:	4610      	mov	r0, r2
 801e3a2:	f7fd f9cb 	bl	801b73c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801e3a6:	68fb      	ldr	r3, [r7, #12]
 801e3a8:	3316      	adds	r3, #22
 801e3aa:	6939      	ldr	r1, [r7, #16]
 801e3ac:	4618      	mov	r0, r3
 801e3ae:	f7fd f9c5 	bl	801b73c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801e3b2:	68fb      	ldr	r3, [r7, #12]
 801e3b4:	3312      	adds	r3, #18
 801e3b6:	2100      	movs	r1, #0
 801e3b8:	4618      	mov	r0, r3
 801e3ba:	f7fd f9a4 	bl	801b706 <st_word>
					fs->wflag = 1;
 801e3be:	68bb      	ldr	r3, [r7, #8]
 801e3c0:	2201      	movs	r2, #1
 801e3c2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801e3c4:	68bb      	ldr	r3, [r7, #8]
 801e3c6:	4618      	mov	r0, r3
 801e3c8:	f7fd fc40 	bl	801bc4c <sync_fs>
 801e3cc:	4603      	mov	r3, r0
 801e3ce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801e3d0:	687b      	ldr	r3, [r7, #4]
 801e3d2:	7d1b      	ldrb	r3, [r3, #20]
 801e3d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801e3d8:	b2da      	uxtb	r2, r3
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801e3de:	7dfb      	ldrb	r3, [r7, #23]
}
 801e3e0:	4618      	mov	r0, r3
 801e3e2:	3718      	adds	r7, #24
 801e3e4:	46bd      	mov	sp, r7
 801e3e6:	bd80      	pop	{r7, pc}

0801e3e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801e3e8:	b580      	push	{r7, lr}
 801e3ea:	b084      	sub	sp, #16
 801e3ec:	af00      	add	r7, sp, #0
 801e3ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801e3f0:	6878      	ldr	r0, [r7, #4]
 801e3f2:	f7ff ff7b 	bl	801e2ec <f_sync>
 801e3f6:	4603      	mov	r3, r0
 801e3f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801e3fa:	7bfb      	ldrb	r3, [r7, #15]
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	d118      	bne.n	801e432 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801e400:	687b      	ldr	r3, [r7, #4]
 801e402:	f107 0208 	add.w	r2, r7, #8
 801e406:	4611      	mov	r1, r2
 801e408:	4618      	mov	r0, r3
 801e40a:	f7ff fb97 	bl	801db3c <validate>
 801e40e:	4603      	mov	r3, r0
 801e410:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801e412:	7bfb      	ldrb	r3, [r7, #15]
 801e414:	2b00      	cmp	r3, #0
 801e416:	d10c      	bne.n	801e432 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	691b      	ldr	r3, [r3, #16]
 801e41c:	4618      	mov	r0, r3
 801e41e:	f7fd fb43 	bl	801baa8 <dec_lock>
 801e422:	4603      	mov	r3, r0
 801e424:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801e426:	7bfb      	ldrb	r3, [r7, #15]
 801e428:	2b00      	cmp	r3, #0
 801e42a:	d102      	bne.n	801e432 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801e42c:	687b      	ldr	r3, [r7, #4]
 801e42e:	2200      	movs	r2, #0
 801e430:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801e432:	7bfb      	ldrb	r3, [r7, #15]
}
 801e434:	4618      	mov	r0, r3
 801e436:	3710      	adds	r7, #16
 801e438:	46bd      	mov	sp, r7
 801e43a:	bd80      	pop	{r7, pc}

0801e43c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801e43c:	b580      	push	{r7, lr}
 801e43e:	b0a0      	sub	sp, #128	@ 0x80
 801e440:	af00      	add	r7, sp, #0
 801e442:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801e444:	2300      	movs	r3, #0
 801e446:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801e448:	f107 010c 	add.w	r1, r7, #12
 801e44c:	1d3b      	adds	r3, r7, #4
 801e44e:	2202      	movs	r2, #2
 801e450:	4618      	mov	r0, r3
 801e452:	f7ff f8ed 	bl	801d630 <find_volume>
 801e456:	4603      	mov	r3, r0
 801e458:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801e460:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801e464:	2b00      	cmp	r3, #0
 801e466:	f040 808e 	bne.w	801e586 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801e46a:	687a      	ldr	r2, [r7, #4]
 801e46c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801e470:	4611      	mov	r1, r2
 801e472:	4618      	mov	r0, r3
 801e474:	f7fe ffcc 	bl	801d410 <follow_path>
 801e478:	4603      	mov	r3, r0
 801e47a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801e47e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801e482:	2b00      	cmp	r3, #0
 801e484:	d108      	bne.n	801e498 <f_unlink+0x5c>
 801e486:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801e48a:	2102      	movs	r1, #2
 801e48c:	4618      	mov	r0, r3
 801e48e:	f7fd f9ff 	bl	801b890 <chk_lock>
 801e492:	4603      	mov	r3, r0
 801e494:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801e498:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	d172      	bne.n	801e586 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801e4a0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801e4a4:	b25b      	sxtb	r3, r3
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	da03      	bge.n	801e4b2 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801e4aa:	2306      	movs	r3, #6
 801e4ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801e4b0:	e008      	b.n	801e4c4 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801e4b2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801e4b6:	f003 0301 	and.w	r3, r3, #1
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	d002      	beq.n	801e4c4 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801e4be:	2307      	movs	r3, #7
 801e4c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801e4c4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	d134      	bne.n	801e536 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801e4cc:	68fb      	ldr	r3, [r7, #12]
 801e4ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801e4d0:	4611      	mov	r1, r2
 801e4d2:	4618      	mov	r0, r3
 801e4d4:	f7fe f911 	bl	801c6fa <ld_clust>
 801e4d8:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801e4da:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801e4de:	f003 0310 	and.w	r3, r3, #16
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d027      	beq.n	801e536 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801e4e6:	68fb      	ldr	r3, [r7, #12]
 801e4e8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801e4ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e4ec:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801e4ee:	f107 0310 	add.w	r3, r7, #16
 801e4f2:	2100      	movs	r1, #0
 801e4f4:	4618      	mov	r0, r3
 801e4f6:	f7fd ff5a 	bl	801c3ae <dir_sdi>
 801e4fa:	4603      	mov	r3, r0
 801e4fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801e500:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801e504:	2b00      	cmp	r3, #0
 801e506:	d116      	bne.n	801e536 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801e508:	f107 0310 	add.w	r3, r7, #16
 801e50c:	2100      	movs	r1, #0
 801e50e:	4618      	mov	r0, r3
 801e510:	f7fe fb1d 	bl	801cb4e <dir_read>
 801e514:	4603      	mov	r3, r0
 801e516:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801e51a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801e51e:	2b00      	cmp	r3, #0
 801e520:	d102      	bne.n	801e528 <f_unlink+0xec>
 801e522:	2307      	movs	r3, #7
 801e524:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801e528:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801e52c:	2b04      	cmp	r3, #4
 801e52e:	d102      	bne.n	801e536 <f_unlink+0xfa>
 801e530:	2300      	movs	r3, #0
 801e532:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801e536:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801e53a:	2b00      	cmp	r3, #0
 801e53c:	d123      	bne.n	801e586 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801e53e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801e542:	4618      	mov	r0, r3
 801e544:	f7fe fd62 	bl	801d00c <dir_remove>
 801e548:	4603      	mov	r3, r0
 801e54a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801e54e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801e552:	2b00      	cmp	r3, #0
 801e554:	d10c      	bne.n	801e570 <f_unlink+0x134>
 801e556:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e558:	2b00      	cmp	r3, #0
 801e55a:	d009      	beq.n	801e570 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801e55c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801e560:	2200      	movs	r2, #0
 801e562:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801e564:	4618      	mov	r0, r3
 801e566:	f7fd fded 	bl	801c144 <remove_chain>
 801e56a:	4603      	mov	r3, r0
 801e56c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801e570:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801e574:	2b00      	cmp	r3, #0
 801e576:	d106      	bne.n	801e586 <f_unlink+0x14a>
 801e578:	68fb      	ldr	r3, [r7, #12]
 801e57a:	4618      	mov	r0, r3
 801e57c:	f7fd fb66 	bl	801bc4c <sync_fs>
 801e580:	4603      	mov	r3, r0
 801e582:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801e586:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801e58a:	4618      	mov	r0, r3
 801e58c:	3780      	adds	r7, #128	@ 0x80
 801e58e:	46bd      	mov	sp, r7
 801e590:	bd80      	pop	{r7, pc}
	...

0801e594 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801e594:	b480      	push	{r7}
 801e596:	b087      	sub	sp, #28
 801e598:	af00      	add	r7, sp, #0
 801e59a:	60f8      	str	r0, [r7, #12]
 801e59c:	60b9      	str	r1, [r7, #8]
 801e59e:	4613      	mov	r3, r2
 801e5a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801e5a2:	2301      	movs	r3, #1
 801e5a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801e5a6:	2300      	movs	r3, #0
 801e5a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801e5aa:	4b1f      	ldr	r3, [pc, #124]	@ (801e628 <FATFS_LinkDriverEx+0x94>)
 801e5ac:	7a5b      	ldrb	r3, [r3, #9]
 801e5ae:	b2db      	uxtb	r3, r3
 801e5b0:	2b00      	cmp	r3, #0
 801e5b2:	d131      	bne.n	801e618 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801e5b4:	4b1c      	ldr	r3, [pc, #112]	@ (801e628 <FATFS_LinkDriverEx+0x94>)
 801e5b6:	7a5b      	ldrb	r3, [r3, #9]
 801e5b8:	b2db      	uxtb	r3, r3
 801e5ba:	461a      	mov	r2, r3
 801e5bc:	4b1a      	ldr	r3, [pc, #104]	@ (801e628 <FATFS_LinkDriverEx+0x94>)
 801e5be:	2100      	movs	r1, #0
 801e5c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801e5c2:	4b19      	ldr	r3, [pc, #100]	@ (801e628 <FATFS_LinkDriverEx+0x94>)
 801e5c4:	7a5b      	ldrb	r3, [r3, #9]
 801e5c6:	b2db      	uxtb	r3, r3
 801e5c8:	4a17      	ldr	r2, [pc, #92]	@ (801e628 <FATFS_LinkDriverEx+0x94>)
 801e5ca:	009b      	lsls	r3, r3, #2
 801e5cc:	4413      	add	r3, r2
 801e5ce:	68fa      	ldr	r2, [r7, #12]
 801e5d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801e5d2:	4b15      	ldr	r3, [pc, #84]	@ (801e628 <FATFS_LinkDriverEx+0x94>)
 801e5d4:	7a5b      	ldrb	r3, [r3, #9]
 801e5d6:	b2db      	uxtb	r3, r3
 801e5d8:	461a      	mov	r2, r3
 801e5da:	4b13      	ldr	r3, [pc, #76]	@ (801e628 <FATFS_LinkDriverEx+0x94>)
 801e5dc:	4413      	add	r3, r2
 801e5de:	79fa      	ldrb	r2, [r7, #7]
 801e5e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801e5e2:	4b11      	ldr	r3, [pc, #68]	@ (801e628 <FATFS_LinkDriverEx+0x94>)
 801e5e4:	7a5b      	ldrb	r3, [r3, #9]
 801e5e6:	b2db      	uxtb	r3, r3
 801e5e8:	1c5a      	adds	r2, r3, #1
 801e5ea:	b2d1      	uxtb	r1, r2
 801e5ec:	4a0e      	ldr	r2, [pc, #56]	@ (801e628 <FATFS_LinkDriverEx+0x94>)
 801e5ee:	7251      	strb	r1, [r2, #9]
 801e5f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801e5f2:	7dbb      	ldrb	r3, [r7, #22]
 801e5f4:	3330      	adds	r3, #48	@ 0x30
 801e5f6:	b2da      	uxtb	r2, r3
 801e5f8:	68bb      	ldr	r3, [r7, #8]
 801e5fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801e5fc:	68bb      	ldr	r3, [r7, #8]
 801e5fe:	3301      	adds	r3, #1
 801e600:	223a      	movs	r2, #58	@ 0x3a
 801e602:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801e604:	68bb      	ldr	r3, [r7, #8]
 801e606:	3302      	adds	r3, #2
 801e608:	222f      	movs	r2, #47	@ 0x2f
 801e60a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801e60c:	68bb      	ldr	r3, [r7, #8]
 801e60e:	3303      	adds	r3, #3
 801e610:	2200      	movs	r2, #0
 801e612:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801e614:	2300      	movs	r3, #0
 801e616:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801e618:	7dfb      	ldrb	r3, [r7, #23]
}
 801e61a:	4618      	mov	r0, r3
 801e61c:	371c      	adds	r7, #28
 801e61e:	46bd      	mov	sp, r7
 801e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e624:	4770      	bx	lr
 801e626:	bf00      	nop
 801e628:	24000768 	.word	0x24000768

0801e62c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801e62c:	b580      	push	{r7, lr}
 801e62e:	b082      	sub	sp, #8
 801e630:	af00      	add	r7, sp, #0
 801e632:	6078      	str	r0, [r7, #4]
 801e634:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801e636:	2200      	movs	r2, #0
 801e638:	6839      	ldr	r1, [r7, #0]
 801e63a:	6878      	ldr	r0, [r7, #4]
 801e63c:	f7ff ffaa 	bl	801e594 <FATFS_LinkDriverEx>
 801e640:	4603      	mov	r3, r0
}
 801e642:	4618      	mov	r0, r3
 801e644:	3708      	adds	r7, #8
 801e646:	46bd      	mov	sp, r7
 801e648:	bd80      	pop	{r7, pc}
	...

0801e64c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801e64c:	b480      	push	{r7}
 801e64e:	b085      	sub	sp, #20
 801e650:	af00      	add	r7, sp, #0
 801e652:	4603      	mov	r3, r0
 801e654:	6039      	str	r1, [r7, #0]
 801e656:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801e658:	88fb      	ldrh	r3, [r7, #6]
 801e65a:	2b7f      	cmp	r3, #127	@ 0x7f
 801e65c:	d802      	bhi.n	801e664 <ff_convert+0x18>
		c = chr;
 801e65e:	88fb      	ldrh	r3, [r7, #6]
 801e660:	81fb      	strh	r3, [r7, #14]
 801e662:	e025      	b.n	801e6b0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801e664:	683b      	ldr	r3, [r7, #0]
 801e666:	2b00      	cmp	r3, #0
 801e668:	d00b      	beq.n	801e682 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801e66a:	88fb      	ldrh	r3, [r7, #6]
 801e66c:	2bff      	cmp	r3, #255	@ 0xff
 801e66e:	d805      	bhi.n	801e67c <ff_convert+0x30>
 801e670:	88fb      	ldrh	r3, [r7, #6]
 801e672:	3b80      	subs	r3, #128	@ 0x80
 801e674:	4a12      	ldr	r2, [pc, #72]	@ (801e6c0 <ff_convert+0x74>)
 801e676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e67a:	e000      	b.n	801e67e <ff_convert+0x32>
 801e67c:	2300      	movs	r3, #0
 801e67e:	81fb      	strh	r3, [r7, #14]
 801e680:	e016      	b.n	801e6b0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801e682:	2300      	movs	r3, #0
 801e684:	81fb      	strh	r3, [r7, #14]
 801e686:	e009      	b.n	801e69c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801e688:	89fb      	ldrh	r3, [r7, #14]
 801e68a:	4a0d      	ldr	r2, [pc, #52]	@ (801e6c0 <ff_convert+0x74>)
 801e68c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e690:	88fa      	ldrh	r2, [r7, #6]
 801e692:	429a      	cmp	r2, r3
 801e694:	d006      	beq.n	801e6a4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801e696:	89fb      	ldrh	r3, [r7, #14]
 801e698:	3301      	adds	r3, #1
 801e69a:	81fb      	strh	r3, [r7, #14]
 801e69c:	89fb      	ldrh	r3, [r7, #14]
 801e69e:	2b7f      	cmp	r3, #127	@ 0x7f
 801e6a0:	d9f2      	bls.n	801e688 <ff_convert+0x3c>
 801e6a2:	e000      	b.n	801e6a6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801e6a4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801e6a6:	89fb      	ldrh	r3, [r7, #14]
 801e6a8:	3380      	adds	r3, #128	@ 0x80
 801e6aa:	b29b      	uxth	r3, r3
 801e6ac:	b2db      	uxtb	r3, r3
 801e6ae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801e6b0:	89fb      	ldrh	r3, [r7, #14]
}
 801e6b2:	4618      	mov	r0, r3
 801e6b4:	3714      	adds	r7, #20
 801e6b6:	46bd      	mov	sp, r7
 801e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6bc:	4770      	bx	lr
 801e6be:	bf00      	nop
 801e6c0:	0801f36c 	.word	0x0801f36c

0801e6c4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801e6c4:	b480      	push	{r7}
 801e6c6:	b087      	sub	sp, #28
 801e6c8:	af00      	add	r7, sp, #0
 801e6ca:	4603      	mov	r3, r0
 801e6cc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801e6ce:	88fb      	ldrh	r3, [r7, #6]
 801e6d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e6d4:	d201      	bcs.n	801e6da <ff_wtoupper+0x16>
 801e6d6:	4b3e      	ldr	r3, [pc, #248]	@ (801e7d0 <ff_wtoupper+0x10c>)
 801e6d8:	e000      	b.n	801e6dc <ff_wtoupper+0x18>
 801e6da:	4b3e      	ldr	r3, [pc, #248]	@ (801e7d4 <ff_wtoupper+0x110>)
 801e6dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801e6de:	697b      	ldr	r3, [r7, #20]
 801e6e0:	1c9a      	adds	r2, r3, #2
 801e6e2:	617a      	str	r2, [r7, #20]
 801e6e4:	881b      	ldrh	r3, [r3, #0]
 801e6e6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801e6e8:	8a7b      	ldrh	r3, [r7, #18]
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d068      	beq.n	801e7c0 <ff_wtoupper+0xfc>
 801e6ee:	88fa      	ldrh	r2, [r7, #6]
 801e6f0:	8a7b      	ldrh	r3, [r7, #18]
 801e6f2:	429a      	cmp	r2, r3
 801e6f4:	d364      	bcc.n	801e7c0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801e6f6:	697b      	ldr	r3, [r7, #20]
 801e6f8:	1c9a      	adds	r2, r3, #2
 801e6fa:	617a      	str	r2, [r7, #20]
 801e6fc:	881b      	ldrh	r3, [r3, #0]
 801e6fe:	823b      	strh	r3, [r7, #16]
 801e700:	8a3b      	ldrh	r3, [r7, #16]
 801e702:	0a1b      	lsrs	r3, r3, #8
 801e704:	81fb      	strh	r3, [r7, #14]
 801e706:	8a3b      	ldrh	r3, [r7, #16]
 801e708:	b2db      	uxtb	r3, r3
 801e70a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801e70c:	88fa      	ldrh	r2, [r7, #6]
 801e70e:	8a79      	ldrh	r1, [r7, #18]
 801e710:	8a3b      	ldrh	r3, [r7, #16]
 801e712:	440b      	add	r3, r1
 801e714:	429a      	cmp	r2, r3
 801e716:	da49      	bge.n	801e7ac <ff_wtoupper+0xe8>
			switch (cmd) {
 801e718:	89fb      	ldrh	r3, [r7, #14]
 801e71a:	2b08      	cmp	r3, #8
 801e71c:	d84f      	bhi.n	801e7be <ff_wtoupper+0xfa>
 801e71e:	a201      	add	r2, pc, #4	@ (adr r2, 801e724 <ff_wtoupper+0x60>)
 801e720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e724:	0801e749 	.word	0x0801e749
 801e728:	0801e75b 	.word	0x0801e75b
 801e72c:	0801e771 	.word	0x0801e771
 801e730:	0801e779 	.word	0x0801e779
 801e734:	0801e781 	.word	0x0801e781
 801e738:	0801e789 	.word	0x0801e789
 801e73c:	0801e791 	.word	0x0801e791
 801e740:	0801e799 	.word	0x0801e799
 801e744:	0801e7a1 	.word	0x0801e7a1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801e748:	88fa      	ldrh	r2, [r7, #6]
 801e74a:	8a7b      	ldrh	r3, [r7, #18]
 801e74c:	1ad3      	subs	r3, r2, r3
 801e74e:	005b      	lsls	r3, r3, #1
 801e750:	697a      	ldr	r2, [r7, #20]
 801e752:	4413      	add	r3, r2
 801e754:	881b      	ldrh	r3, [r3, #0]
 801e756:	80fb      	strh	r3, [r7, #6]
 801e758:	e027      	b.n	801e7aa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801e75a:	88fa      	ldrh	r2, [r7, #6]
 801e75c:	8a7b      	ldrh	r3, [r7, #18]
 801e75e:	1ad3      	subs	r3, r2, r3
 801e760:	b29b      	uxth	r3, r3
 801e762:	f003 0301 	and.w	r3, r3, #1
 801e766:	b29b      	uxth	r3, r3
 801e768:	88fa      	ldrh	r2, [r7, #6]
 801e76a:	1ad3      	subs	r3, r2, r3
 801e76c:	80fb      	strh	r3, [r7, #6]
 801e76e:	e01c      	b.n	801e7aa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801e770:	88fb      	ldrh	r3, [r7, #6]
 801e772:	3b10      	subs	r3, #16
 801e774:	80fb      	strh	r3, [r7, #6]
 801e776:	e018      	b.n	801e7aa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801e778:	88fb      	ldrh	r3, [r7, #6]
 801e77a:	3b20      	subs	r3, #32
 801e77c:	80fb      	strh	r3, [r7, #6]
 801e77e:	e014      	b.n	801e7aa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801e780:	88fb      	ldrh	r3, [r7, #6]
 801e782:	3b30      	subs	r3, #48	@ 0x30
 801e784:	80fb      	strh	r3, [r7, #6]
 801e786:	e010      	b.n	801e7aa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801e788:	88fb      	ldrh	r3, [r7, #6]
 801e78a:	3b1a      	subs	r3, #26
 801e78c:	80fb      	strh	r3, [r7, #6]
 801e78e:	e00c      	b.n	801e7aa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801e790:	88fb      	ldrh	r3, [r7, #6]
 801e792:	3308      	adds	r3, #8
 801e794:	80fb      	strh	r3, [r7, #6]
 801e796:	e008      	b.n	801e7aa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801e798:	88fb      	ldrh	r3, [r7, #6]
 801e79a:	3b50      	subs	r3, #80	@ 0x50
 801e79c:	80fb      	strh	r3, [r7, #6]
 801e79e:	e004      	b.n	801e7aa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801e7a0:	88fb      	ldrh	r3, [r7, #6]
 801e7a2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801e7a6:	80fb      	strh	r3, [r7, #6]
 801e7a8:	bf00      	nop
			}
			break;
 801e7aa:	e008      	b.n	801e7be <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801e7ac:	89fb      	ldrh	r3, [r7, #14]
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	d195      	bne.n	801e6de <ff_wtoupper+0x1a>
 801e7b2:	8a3b      	ldrh	r3, [r7, #16]
 801e7b4:	005b      	lsls	r3, r3, #1
 801e7b6:	697a      	ldr	r2, [r7, #20]
 801e7b8:	4413      	add	r3, r2
 801e7ba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801e7bc:	e78f      	b.n	801e6de <ff_wtoupper+0x1a>
			break;
 801e7be:	bf00      	nop
	}

	return chr;
 801e7c0:	88fb      	ldrh	r3, [r7, #6]
}
 801e7c2:	4618      	mov	r0, r3
 801e7c4:	371c      	adds	r7, #28
 801e7c6:	46bd      	mov	sp, r7
 801e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7cc:	4770      	bx	lr
 801e7ce:	bf00      	nop
 801e7d0:	0801f46c 	.word	0x0801f46c
 801e7d4:	0801f660 	.word	0x0801f660

0801e7d8 <memset>:
 801e7d8:	4402      	add	r2, r0
 801e7da:	4603      	mov	r3, r0
 801e7dc:	4293      	cmp	r3, r2
 801e7de:	d100      	bne.n	801e7e2 <memset+0xa>
 801e7e0:	4770      	bx	lr
 801e7e2:	f803 1b01 	strb.w	r1, [r3], #1
 801e7e6:	e7f9      	b.n	801e7dc <memset+0x4>

0801e7e8 <__errno>:
 801e7e8:	4b01      	ldr	r3, [pc, #4]	@ (801e7f0 <__errno+0x8>)
 801e7ea:	6818      	ldr	r0, [r3, #0]
 801e7ec:	4770      	bx	lr
 801e7ee:	bf00      	nop
 801e7f0:	24000028 	.word	0x24000028

0801e7f4 <__libc_init_array>:
 801e7f4:	b570      	push	{r4, r5, r6, lr}
 801e7f6:	4d0d      	ldr	r5, [pc, #52]	@ (801e82c <__libc_init_array+0x38>)
 801e7f8:	4c0d      	ldr	r4, [pc, #52]	@ (801e830 <__libc_init_array+0x3c>)
 801e7fa:	1b64      	subs	r4, r4, r5
 801e7fc:	10a4      	asrs	r4, r4, #2
 801e7fe:	2600      	movs	r6, #0
 801e800:	42a6      	cmp	r6, r4
 801e802:	d109      	bne.n	801e818 <__libc_init_array+0x24>
 801e804:	4d0b      	ldr	r5, [pc, #44]	@ (801e834 <__libc_init_array+0x40>)
 801e806:	4c0c      	ldr	r4, [pc, #48]	@ (801e838 <__libc_init_array+0x44>)
 801e808:	f000 fcfe 	bl	801f208 <_init>
 801e80c:	1b64      	subs	r4, r4, r5
 801e80e:	10a4      	asrs	r4, r4, #2
 801e810:	2600      	movs	r6, #0
 801e812:	42a6      	cmp	r6, r4
 801e814:	d105      	bne.n	801e822 <__libc_init_array+0x2e>
 801e816:	bd70      	pop	{r4, r5, r6, pc}
 801e818:	f855 3b04 	ldr.w	r3, [r5], #4
 801e81c:	4798      	blx	r3
 801e81e:	3601      	adds	r6, #1
 801e820:	e7ee      	b.n	801e800 <__libc_init_array+0xc>
 801e822:	f855 3b04 	ldr.w	r3, [r5], #4
 801e826:	4798      	blx	r3
 801e828:	3601      	adds	r6, #1
 801e82a:	e7f2      	b.n	801e812 <__libc_init_array+0x1e>
 801e82c:	08021050 	.word	0x08021050
 801e830:	08021050 	.word	0x08021050
 801e834:	08021050 	.word	0x08021050
 801e838:	08021054 	.word	0x08021054

0801e83c <atan2>:
 801e83c:	f000 bbac 	b.w	801ef98 <__ieee754_atan2>

0801e840 <sqrt>:
 801e840:	b508      	push	{r3, lr}
 801e842:	ed2d 8b04 	vpush	{d8-d9}
 801e846:	eeb0 8b40 	vmov.f64	d8, d0
 801e84a:	f000 fba1 	bl	801ef90 <__ieee754_sqrt>
 801e84e:	eeb4 8b48 	vcmp.f64	d8, d8
 801e852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e856:	d60c      	bvs.n	801e872 <sqrt+0x32>
 801e858:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801e878 <sqrt+0x38>
 801e85c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801e860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e864:	d505      	bpl.n	801e872 <sqrt+0x32>
 801e866:	f7ff ffbf 	bl	801e7e8 <__errno>
 801e86a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801e86e:	2321      	movs	r3, #33	@ 0x21
 801e870:	6003      	str	r3, [r0, #0]
 801e872:	ecbd 8b04 	vpop	{d8-d9}
 801e876:	bd08      	pop	{r3, pc}
	...

0801e880 <atan>:
 801e880:	b538      	push	{r3, r4, r5, lr}
 801e882:	eeb0 7b40 	vmov.f64	d7, d0
 801e886:	ee17 5a90 	vmov	r5, s15
 801e88a:	4b73      	ldr	r3, [pc, #460]	@ (801ea58 <atan+0x1d8>)
 801e88c:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e890:	429c      	cmp	r4, r3
 801e892:	d913      	bls.n	801e8bc <atan+0x3c>
 801e894:	4b71      	ldr	r3, [pc, #452]	@ (801ea5c <atan+0x1dc>)
 801e896:	429c      	cmp	r4, r3
 801e898:	d803      	bhi.n	801e8a2 <atan+0x22>
 801e89a:	d107      	bne.n	801e8ac <atan+0x2c>
 801e89c:	ee10 3a10 	vmov	r3, s0
 801e8a0:	b123      	cbz	r3, 801e8ac <atan+0x2c>
 801e8a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e8a6:	eeb0 0b47 	vmov.f64	d0, d7
 801e8aa:	bd38      	pop	{r3, r4, r5, pc}
 801e8ac:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e9e8 <atan+0x168>
 801e8b0:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e9f0 <atan+0x170>
 801e8b4:	2d00      	cmp	r5, #0
 801e8b6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e8ba:	e7f4      	b.n	801e8a6 <atan+0x26>
 801e8bc:	4b68      	ldr	r3, [pc, #416]	@ (801ea60 <atan+0x1e0>)
 801e8be:	429c      	cmp	r4, r3
 801e8c0:	d811      	bhi.n	801e8e6 <atan+0x66>
 801e8c2:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e8c6:	429c      	cmp	r4, r3
 801e8c8:	d80a      	bhi.n	801e8e0 <atan+0x60>
 801e8ca:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e8ce:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e9f8 <atan+0x178>
 801e8d2:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e8d6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8de:	dce2      	bgt.n	801e8a6 <atan+0x26>
 801e8e0:	f04f 33ff 	mov.w	r3, #4294967295
 801e8e4:	e013      	b.n	801e90e <atan+0x8e>
 801e8e6:	f000 f8c5 	bl	801ea74 <fabs>
 801e8ea:	4b5e      	ldr	r3, [pc, #376]	@ (801ea64 <atan+0x1e4>)
 801e8ec:	429c      	cmp	r4, r3
 801e8ee:	d84f      	bhi.n	801e990 <atan+0x110>
 801e8f0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e8f4:	429c      	cmp	r4, r3
 801e8f6:	d841      	bhi.n	801e97c <atan+0xfc>
 801e8f8:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e8fc:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e900:	2300      	movs	r3, #0
 801e902:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e906:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e90a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e90e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801ea00 <atan+0x180>
 801e912:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e916:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e91a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801ea08 <atan+0x188>
 801e91e:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e922:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801ea10 <atan+0x190>
 801e926:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e92a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801ea18 <atan+0x198>
 801e92e:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e932:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801ea20 <atan+0x1a0>
 801e936:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e93a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801ea28 <atan+0x1a8>
 801e93e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801ea30 <atan+0x1b0>
 801e942:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e946:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801ea38 <atan+0x1b8>
 801e94a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e94e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801ea40 <atan+0x1c0>
 801e952:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e956:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801ea48 <atan+0x1c8>
 801e95a:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e95e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801ea50 <atan+0x1d0>
 801e962:	1c5a      	adds	r2, r3, #1
 801e964:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e968:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e96c:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e970:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e974:	d121      	bne.n	801e9ba <atan+0x13a>
 801e976:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e97a:	e794      	b.n	801e8a6 <atan+0x26>
 801e97c:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e980:	2301      	movs	r3, #1
 801e982:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e986:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e98a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e98e:	e7be      	b.n	801e90e <atan+0x8e>
 801e990:	4b35      	ldr	r3, [pc, #212]	@ (801ea68 <atan+0x1e8>)
 801e992:	429c      	cmp	r4, r3
 801e994:	d20b      	bcs.n	801e9ae <atan+0x12e>
 801e996:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e99a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e99e:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e9a2:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e9a6:	2302      	movs	r3, #2
 801e9a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e9ac:	e7af      	b.n	801e90e <atan+0x8e>
 801e9ae:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e9b2:	2303      	movs	r3, #3
 801e9b4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e9b8:	e7a9      	b.n	801e90e <atan+0x8e>
 801e9ba:	4a2c      	ldr	r2, [pc, #176]	@ (801ea6c <atan+0x1ec>)
 801e9bc:	492c      	ldr	r1, [pc, #176]	@ (801ea70 <atan+0x1f0>)
 801e9be:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e9c2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e9c6:	ed93 5b00 	vldr	d5, [r3]
 801e9ca:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e9ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e9d2:	ed92 7b00 	vldr	d7, [r2]
 801e9d6:	2d00      	cmp	r5, #0
 801e9d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e9dc:	bfb8      	it	lt
 801e9de:	eeb1 7b47 	vneglt.f64	d7, d7
 801e9e2:	e760      	b.n	801e8a6 <atan+0x26>
 801e9e4:	f3af 8000 	nop.w
 801e9e8:	54442d18 	.word	0x54442d18
 801e9ec:	bff921fb 	.word	0xbff921fb
 801e9f0:	54442d18 	.word	0x54442d18
 801e9f4:	3ff921fb 	.word	0x3ff921fb
 801e9f8:	8800759c 	.word	0x8800759c
 801e9fc:	7e37e43c 	.word	0x7e37e43c
 801ea00:	e322da11 	.word	0xe322da11
 801ea04:	3f90ad3a 	.word	0x3f90ad3a
 801ea08:	24760deb 	.word	0x24760deb
 801ea0c:	3fa97b4b 	.word	0x3fa97b4b
 801ea10:	a0d03d51 	.word	0xa0d03d51
 801ea14:	3fb10d66 	.word	0x3fb10d66
 801ea18:	c54c206e 	.word	0xc54c206e
 801ea1c:	3fb745cd 	.word	0x3fb745cd
 801ea20:	920083ff 	.word	0x920083ff
 801ea24:	3fc24924 	.word	0x3fc24924
 801ea28:	5555550d 	.word	0x5555550d
 801ea2c:	3fd55555 	.word	0x3fd55555
 801ea30:	52defd9a 	.word	0x52defd9a
 801ea34:	bfadde2d 	.word	0xbfadde2d
 801ea38:	2c6a6c2f 	.word	0x2c6a6c2f
 801ea3c:	bfa2b444 	.word	0xbfa2b444
 801ea40:	af749a6d 	.word	0xaf749a6d
 801ea44:	bfb3b0f2 	.word	0xbfb3b0f2
 801ea48:	fe231671 	.word	0xfe231671
 801ea4c:	bfbc71c6 	.word	0xbfbc71c6
 801ea50:	9998ebc4 	.word	0x9998ebc4
 801ea54:	bfc99999 	.word	0xbfc99999
 801ea58:	440fffff 	.word	0x440fffff
 801ea5c:	7ff00000 	.word	0x7ff00000
 801ea60:	3fdbffff 	.word	0x3fdbffff
 801ea64:	3ff2ffff 	.word	0x3ff2ffff
 801ea68:	40038000 	.word	0x40038000
 801ea6c:	0801f740 	.word	0x0801f740
 801ea70:	0801f720 	.word	0x0801f720

0801ea74 <fabs>:
 801ea74:	ec51 0b10 	vmov	r0, r1, d0
 801ea78:	4602      	mov	r2, r0
 801ea7a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ea7e:	ec43 2b10 	vmov	d0, r2, r3
 801ea82:	4770      	bx	lr

0801ea84 <checkint>:
 801ea84:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ea88:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801ea8c:	429a      	cmp	r2, r3
 801ea8e:	b570      	push	{r4, r5, r6, lr}
 801ea90:	dd2a      	ble.n	801eae8 <checkint+0x64>
 801ea92:	f240 4333 	movw	r3, #1075	@ 0x433
 801ea96:	429a      	cmp	r2, r3
 801ea98:	dc24      	bgt.n	801eae4 <checkint+0x60>
 801ea9a:	1a9b      	subs	r3, r3, r2
 801ea9c:	f1a3 0620 	sub.w	r6, r3, #32
 801eaa0:	f04f 32ff 	mov.w	r2, #4294967295
 801eaa4:	fa02 f403 	lsl.w	r4, r2, r3
 801eaa8:	fa02 f606 	lsl.w	r6, r2, r6
 801eaac:	f1c3 0520 	rsb	r5, r3, #32
 801eab0:	fa22 f505 	lsr.w	r5, r2, r5
 801eab4:	4334      	orrs	r4, r6
 801eab6:	432c      	orrs	r4, r5
 801eab8:	409a      	lsls	r2, r3
 801eaba:	ea20 0202 	bic.w	r2, r0, r2
 801eabe:	ea21 0404 	bic.w	r4, r1, r4
 801eac2:	4322      	orrs	r2, r4
 801eac4:	f1a3 0420 	sub.w	r4, r3, #32
 801eac8:	f1c3 0220 	rsb	r2, r3, #32
 801eacc:	d10c      	bne.n	801eae8 <checkint+0x64>
 801eace:	40d8      	lsrs	r0, r3
 801ead0:	fa01 f302 	lsl.w	r3, r1, r2
 801ead4:	4318      	orrs	r0, r3
 801ead6:	40e1      	lsrs	r1, r4
 801ead8:	4308      	orrs	r0, r1
 801eada:	f000 0001 	and.w	r0, r0, #1
 801eade:	f1d0 0002 	rsbs	r0, r0, #2
 801eae2:	bd70      	pop	{r4, r5, r6, pc}
 801eae4:	2002      	movs	r0, #2
 801eae6:	e7fc      	b.n	801eae2 <checkint+0x5e>
 801eae8:	2000      	movs	r0, #0
 801eaea:	e7fa      	b.n	801eae2 <checkint+0x5e>
 801eaec:	0000      	movs	r0, r0
	...

0801eaf0 <pow>:
 801eaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaf4:	ee10 4a90 	vmov	r4, s1
 801eaf8:	ed2d 8b0a 	vpush	{d8-d12}
 801eafc:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801eb00:	ee11 aa90 	vmov	sl, s3
 801eb04:	f108 32ff 	add.w	r2, r8, #4294967295
 801eb08:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801eb0c:	429a      	cmp	r2, r3
 801eb0e:	ee10 5a10 	vmov	r5, s0
 801eb12:	ee11 0a10 	vmov	r0, s2
 801eb16:	b087      	sub	sp, #28
 801eb18:	46c4      	mov	ip, r8
 801eb1a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801eb1e:	d806      	bhi.n	801eb2e <pow+0x3e>
 801eb20:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801eb24:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801eb28:	2b7f      	cmp	r3, #127	@ 0x7f
 801eb2a:	f240 8157 	bls.w	801eddc <pow+0x2ec>
 801eb2e:	1802      	adds	r2, r0, r0
 801eb30:	eb4a 010a 	adc.w	r1, sl, sl
 801eb34:	f06f 0b01 	mvn.w	fp, #1
 801eb38:	1e57      	subs	r7, r2, #1
 801eb3a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801eb3e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801eb42:	45bb      	cmp	fp, r7
 801eb44:	eb7e 0303 	sbcs.w	r3, lr, r3
 801eb48:	d242      	bcs.n	801ebd0 <pow+0xe0>
 801eb4a:	ea52 0301 	orrs.w	r3, r2, r1
 801eb4e:	f04f 0300 	mov.w	r3, #0
 801eb52:	d10c      	bne.n	801eb6e <pow+0x7e>
 801eb54:	196d      	adds	r5, r5, r5
 801eb56:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801eb5a:	4164      	adcs	r4, r4
 801eb5c:	42ab      	cmp	r3, r5
 801eb5e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801eb62:	41a3      	sbcs	r3, r4
 801eb64:	f0c0 808f 	bcc.w	801ec86 <pow+0x196>
 801eb68:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801eb6c:	e02b      	b.n	801ebc6 <pow+0xd6>
 801eb6e:	4ed4      	ldr	r6, [pc, #848]	@ (801eec0 <pow+0x3d0>)
 801eb70:	42b4      	cmp	r4, r6
 801eb72:	bf08      	it	eq
 801eb74:	429d      	cmpeq	r5, r3
 801eb76:	d109      	bne.n	801eb8c <pow+0x9c>
 801eb78:	1800      	adds	r0, r0, r0
 801eb7a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801eb7e:	eb4a 0a0a 	adc.w	sl, sl, sl
 801eb82:	4283      	cmp	r3, r0
 801eb84:	4bcf      	ldr	r3, [pc, #828]	@ (801eec4 <pow+0x3d4>)
 801eb86:	eb73 030a 	sbcs.w	r3, r3, sl
 801eb8a:	e7eb      	b.n	801eb64 <pow+0x74>
 801eb8c:	196d      	adds	r5, r5, r5
 801eb8e:	48ce      	ldr	r0, [pc, #824]	@ (801eec8 <pow+0x3d8>)
 801eb90:	4164      	adcs	r4, r4
 801eb92:	42ab      	cmp	r3, r5
 801eb94:	eb70 0604 	sbcs.w	r6, r0, r4
 801eb98:	d375      	bcc.n	801ec86 <pow+0x196>
 801eb9a:	4281      	cmp	r1, r0
 801eb9c:	bf08      	it	eq
 801eb9e:	429a      	cmpeq	r2, r3
 801eba0:	d171      	bne.n	801ec86 <pow+0x196>
 801eba2:	4aca      	ldr	r2, [pc, #808]	@ (801eecc <pow+0x3dc>)
 801eba4:	4294      	cmp	r4, r2
 801eba6:	bf08      	it	eq
 801eba8:	429d      	cmpeq	r5, r3
 801ebaa:	d0dd      	beq.n	801eb68 <pow+0x78>
 801ebac:	4294      	cmp	r4, r2
 801ebae:	ea6f 0a0a 	mvn.w	sl, sl
 801ebb2:	bf34      	ite	cc
 801ebb4:	2400      	movcc	r4, #0
 801ebb6:	2401      	movcs	r4, #1
 801ebb8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801ebbc:	4554      	cmp	r4, sl
 801ebbe:	f040 81dc 	bne.w	801ef7a <pow+0x48a>
 801ebc2:	ee21 0b01 	vmul.f64	d0, d1, d1
 801ebc6:	b007      	add	sp, #28
 801ebc8:	ecbd 8b0a 	vpop	{d8-d12}
 801ebcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebd0:	196f      	adds	r7, r5, r5
 801ebd2:	eb44 0904 	adc.w	r9, r4, r4
 801ebd6:	1e7a      	subs	r2, r7, #1
 801ebd8:	f169 0300 	sbc.w	r3, r9, #0
 801ebdc:	4593      	cmp	fp, r2
 801ebde:	eb7e 0303 	sbcs.w	r3, lr, r3
 801ebe2:	d225      	bcs.n	801ec30 <pow+0x140>
 801ebe4:	ee20 0b00 	vmul.f64	d0, d0, d0
 801ebe8:	2c00      	cmp	r4, #0
 801ebea:	da13      	bge.n	801ec14 <pow+0x124>
 801ebec:	4651      	mov	r1, sl
 801ebee:	f7ff ff49 	bl	801ea84 <checkint>
 801ebf2:	2801      	cmp	r0, #1
 801ebf4:	d10e      	bne.n	801ec14 <pow+0x124>
 801ebf6:	eeb1 0b40 	vneg.f64	d0, d0
 801ebfa:	ea57 0909 	orrs.w	r9, r7, r9
 801ebfe:	d10b      	bne.n	801ec18 <pow+0x128>
 801ec00:	f1ba 0f00 	cmp.w	sl, #0
 801ec04:	dadf      	bge.n	801ebc6 <pow+0xd6>
 801ec06:	b007      	add	sp, #28
 801ec08:	ecbd 8b0a 	vpop	{d8-d12}
 801ec0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec10:	f000 bab6 	b.w	801f180 <__math_divzero>
 801ec14:	2000      	movs	r0, #0
 801ec16:	e7f0      	b.n	801ebfa <pow+0x10a>
 801ec18:	f1ba 0f00 	cmp.w	sl, #0
 801ec1c:	dad3      	bge.n	801ebc6 <pow+0xd6>
 801ec1e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801ec22:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801ec26:	ed8d 7b00 	vstr	d7, [sp]
 801ec2a:	ed9d 0b00 	vldr	d0, [sp]
 801ec2e:	e7ca      	b.n	801ebc6 <pow+0xd6>
 801ec30:	2c00      	cmp	r4, #0
 801ec32:	da2b      	bge.n	801ec8c <pow+0x19c>
 801ec34:	4651      	mov	r1, sl
 801ec36:	f7ff ff25 	bl	801ea84 <checkint>
 801ec3a:	b930      	cbnz	r0, 801ec4a <pow+0x15a>
 801ec3c:	b007      	add	sp, #28
 801ec3e:	ecbd 8b0a 	vpop	{d8-d12}
 801ec42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec46:	f000 bab3 	b.w	801f1b0 <__math_invalid>
 801ec4a:	1e41      	subs	r1, r0, #1
 801ec4c:	4248      	negs	r0, r1
 801ec4e:	4148      	adcs	r0, r1
 801ec50:	0480      	lsls	r0, r0, #18
 801ec52:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801ec56:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801ec5a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801ec5e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801ec62:	2b7f      	cmp	r3, #127	@ 0x7f
 801ec64:	d92d      	bls.n	801ecc2 <pow+0x1d2>
 801ec66:	4b96      	ldr	r3, [pc, #600]	@ (801eec0 <pow+0x3d0>)
 801ec68:	2000      	movs	r0, #0
 801ec6a:	429c      	cmp	r4, r3
 801ec6c:	bf08      	it	eq
 801ec6e:	4285      	cmpeq	r5, r0
 801ec70:	f43f af7a 	beq.w	801eb68 <pow+0x78>
 801ec74:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801ec78:	428a      	cmp	r2, r1
 801ec7a:	d80c      	bhi.n	801ec96 <pow+0x1a6>
 801ec7c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801ec80:	42a8      	cmp	r0, r5
 801ec82:	41a3      	sbcs	r3, r4
 801ec84:	d204      	bcs.n	801ec90 <pow+0x1a0>
 801ec86:	ee31 0b00 	vadd.f64	d0, d1, d0
 801ec8a:	e79c      	b.n	801ebc6 <pow+0xd6>
 801ec8c:	2000      	movs	r0, #0
 801ec8e:	e7e4      	b.n	801ec5a <pow+0x16a>
 801ec90:	ee30 0b41 	vsub.f64	d0, d0, d1
 801ec94:	e797      	b.n	801ebc6 <pow+0xd6>
 801ec96:	2d01      	cmp	r5, #1
 801ec98:	eb74 0303 	sbcs.w	r3, r4, r3
 801ec9c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801eca0:	bf34      	ite	cc
 801eca2:	2301      	movcc	r3, #1
 801eca4:	2300      	movcs	r3, #0
 801eca6:	4296      	cmp	r6, r2
 801eca8:	bf8c      	ite	hi
 801ecaa:	2600      	movhi	r6, #0
 801ecac:	2601      	movls	r6, #1
 801ecae:	42b3      	cmp	r3, r6
 801ecb0:	f000 809c 	beq.w	801edec <pow+0x2fc>
 801ecb4:	b007      	add	sp, #28
 801ecb6:	ecbd 8b0a 	vpop	{d8-d12}
 801ecba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecbe:	f000 ba57 	b.w	801f170 <__math_oflow>
 801ecc2:	f1bc 0f00 	cmp.w	ip, #0
 801ecc6:	d10a      	bne.n	801ecde <pow+0x1ee>
 801ecc8:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801eeb0 <pow+0x3c0>
 801eccc:	ee20 7b07 	vmul.f64	d7, d0, d7
 801ecd0:	ec53 2b17 	vmov	r2, r3, d7
 801ecd4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801ecd8:	4615      	mov	r5, r2
 801ecda:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801ecde:	4a7c      	ldr	r2, [pc, #496]	@ (801eed0 <pow+0x3e0>)
 801ece0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801ece4:	4422      	add	r2, r4
 801ece6:	1513      	asrs	r3, r2, #20
 801ece8:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801ecec:	ee03 3a10 	vmov	s6, r3
 801ecf0:	0d12      	lsrs	r2, r2, #20
 801ecf2:	4b78      	ldr	r3, [pc, #480]	@ (801eed4 <pow+0x3e4>)
 801ecf4:	0512      	lsls	r2, r2, #20
 801ecf6:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801ecfa:	1aa7      	subs	r7, r4, r2
 801ecfc:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801ed00:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801ed04:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801ed08:	1e2e      	subs	r6, r5, #0
 801ed0a:	ec47 6b14 	vmov	d4, r6, r7
 801ed0e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801ed12:	eea4 6b05 	vfma.f64	d6, d4, d5
 801ed16:	ed93 5b00 	vldr	d5, [r3]
 801ed1a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801ed1e:	eea3 2b05 	vfma.f64	d2, d3, d5
 801ed22:	ed93 5b02 	vldr	d5, [r3, #8]
 801ed26:	ee36 4b02 	vadd.f64	d4, d6, d2
 801ed2a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801ed2e:	eea3 7b05 	vfma.f64	d7, d3, d5
 801ed32:	ed93 5b04 	vldr	d5, [r3, #16]
 801ed36:	ee32 2b06 	vadd.f64	d2, d2, d6
 801ed3a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801ed3e:	ee26 5b05 	vmul.f64	d5, d6, d5
 801ed42:	ee26 0b05 	vmul.f64	d0, d6, d5
 801ed46:	ee34 8b00 	vadd.f64	d8, d4, d0
 801ed4a:	eeb0 9b40 	vmov.f64	d9, d0
 801ed4e:	ee34 4b48 	vsub.f64	d4, d4, d8
 801ed52:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801ed56:	ee34 ab00 	vadd.f64	d10, d4, d0
 801ed5a:	ed93 5b06 	vldr	d5, [r3, #24]
 801ed5e:	ee26 bb00 	vmul.f64	d11, d6, d0
 801ed62:	ee37 7b09 	vadd.f64	d7, d7, d9
 801ed66:	ed93 4b08 	vldr	d4, [r3, #32]
 801ed6a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801ed6e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801ed72:	eea6 5b04 	vfma.f64	d5, d6, d4
 801ed76:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801ed7a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801ed7e:	eea6 4b03 	vfma.f64	d4, d6, d3
 801ed82:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801ed86:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801ed8a:	eea0 4b03 	vfma.f64	d4, d0, d3
 801ed8e:	eea0 5b04 	vfma.f64	d5, d0, d4
 801ed92:	eeab 7b05 	vfma.f64	d7, d11, d5
 801ed96:	ee38 4b07 	vadd.f64	d4, d8, d7
 801ed9a:	ee21 6b04 	vmul.f64	d6, d1, d4
 801ed9e:	ee16 3a90 	vmov	r3, s13
 801eda2:	eeb0 5b46 	vmov.f64	d5, d6
 801eda6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801edaa:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801edae:	18b2      	adds	r2, r6, r2
 801edb0:	2a3e      	cmp	r2, #62	@ 0x3e
 801edb2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801edb6:	ee38 8b44 	vsub.f64	d8, d8, d4
 801edba:	ee38 8b07 	vadd.f64	d8, d8, d7
 801edbe:	eea1 5b08 	vfma.f64	d5, d1, d8
 801edc2:	d91b      	bls.n	801edfc <pow+0x30c>
 801edc4:	2a00      	cmp	r2, #0
 801edc6:	da0b      	bge.n	801ede0 <pow+0x2f0>
 801edc8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801edcc:	ee36 0b00 	vadd.f64	d0, d6, d0
 801edd0:	2800      	cmp	r0, #0
 801edd2:	f43f aef8 	beq.w	801ebc6 <pow+0xd6>
 801edd6:	eeb1 0b40 	vneg.f64	d0, d0
 801edda:	e6f4      	b.n	801ebc6 <pow+0xd6>
 801eddc:	2000      	movs	r0, #0
 801edde:	e77e      	b.n	801ecde <pow+0x1ee>
 801ede0:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801ede4:	d909      	bls.n	801edfa <pow+0x30a>
 801ede6:	2b00      	cmp	r3, #0
 801ede8:	f6bf af64 	bge.w	801ecb4 <pow+0x1c4>
 801edec:	b007      	add	sp, #28
 801edee:	ecbd 8b0a 	vpop	{d8-d12}
 801edf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edf6:	f000 b9b3 	b.w	801f160 <__math_uflow>
 801edfa:	2600      	movs	r6, #0
 801edfc:	4936      	ldr	r1, [pc, #216]	@ (801eed8 <pow+0x3e8>)
 801edfe:	ed91 4b02 	vldr	d4, [r1, #8]
 801ee02:	ed91 3b00 	vldr	d3, [r1]
 801ee06:	eeb0 7b44 	vmov.f64	d7, d4
 801ee0a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801ee0e:	ee17 5a10 	vmov	r5, s14
 801ee12:	ee37 7b44 	vsub.f64	d7, d7, d4
 801ee16:	ed91 4b04 	vldr	d4, [r1, #16]
 801ee1a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801ee1e:	eea7 6b04 	vfma.f64	d6, d7, d4
 801ee22:	ed91 4b06 	vldr	d4, [r1, #24]
 801ee26:	18dc      	adds	r4, r3, r3
 801ee28:	f104 030f 	add.w	r3, r4, #15
 801ee2c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801ee30:	eea7 6b04 	vfma.f64	d6, d7, d4
 801ee34:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801ee38:	ee35 5b06 	vadd.f64	d5, d5, d6
 801ee3c:	ee25 6b05 	vmul.f64	d6, d5, d5
 801ee40:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801ee44:	ed91 4b08 	vldr	d4, [r1, #32]
 801ee48:	ee35 7b07 	vadd.f64	d7, d5, d7
 801ee4c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801ee50:	eea5 4b03 	vfma.f64	d4, d5, d3
 801ee54:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801ee58:	eea6 7b04 	vfma.f64	d7, d6, d4
 801ee5c:	ee26 6b06 	vmul.f64	d6, d6, d6
 801ee60:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801ee64:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801ee68:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801ee6c:	eea5 4b03 	vfma.f64	d4, d5, d3
 801ee70:	1940      	adds	r0, r0, r5
 801ee72:	2700      	movs	r7, #0
 801ee74:	eb17 020c 	adds.w	r2, r7, ip
 801ee78:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801ee7c:	eea6 7b04 	vfma.f64	d7, d6, d4
 801ee80:	2e00      	cmp	r6, #0
 801ee82:	d175      	bne.n	801ef70 <pow+0x480>
 801ee84:	42bd      	cmp	r5, r7
 801ee86:	db29      	blt.n	801eedc <pow+0x3ec>
 801ee88:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801ee8c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801ee90:	4610      	mov	r0, r2
 801ee92:	ec41 0b10 	vmov	d0, r0, r1
 801ee96:	eea7 0b00 	vfma.f64	d0, d7, d0
 801ee9a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801eeb8 <pow+0x3c8>
 801ee9e:	ee20 0b07 	vmul.f64	d0, d0, d7
 801eea2:	b007      	add	sp, #28
 801eea4:	ecbd 8b0a 	vpop	{d8-d12}
 801eea8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeac:	f000 b998 	b.w	801f1e0 <__math_check_oflow>
 801eeb0:	00000000 	.word	0x00000000
 801eeb4:	43300000 	.word	0x43300000
 801eeb8:	00000000 	.word	0x00000000
 801eebc:	7f000000 	.word	0x7f000000
 801eec0:	3ff00000 	.word	0x3ff00000
 801eec4:	fff00000 	.word	0xfff00000
 801eec8:	ffe00000 	.word	0xffe00000
 801eecc:	7fe00000 	.word	0x7fe00000
 801eed0:	c0196aab 	.word	0xc0196aab
 801eed4:	0801f760 	.word	0x0801f760
 801eed8:	080207d8 	.word	0x080207d8
 801eedc:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801eee0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801eee4:	4610      	mov	r0, r2
 801eee6:	ec41 0b15 	vmov	d5, r0, r1
 801eeea:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801eeee:	ee27 6b05 	vmul.f64	d6, d7, d5
 801eef2:	ee35 7b06 	vadd.f64	d7, d5, d6
 801eef6:	eeb0 4bc7 	vabs.f64	d4, d7
 801eefa:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801eefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef02:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801ef80 <pow+0x490>
 801ef06:	d52a      	bpl.n	801ef5e <pow+0x46e>
 801ef08:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801ef0c:	ee35 5b47 	vsub.f64	d5, d5, d7
 801ef10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef14:	ee35 5b06 	vadd.f64	d5, d5, d6
 801ef18:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801ef1c:	bf58      	it	pl
 801ef1e:	eeb0 4b43 	vmovpl.f64	d4, d3
 801ef22:	ee37 3b04 	vadd.f64	d3, d7, d4
 801ef26:	ee34 6b43 	vsub.f64	d6, d4, d3
 801ef2a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801ef2e:	ee36 6b05 	vadd.f64	d6, d6, d5
 801ef32:	ee36 6b03 	vadd.f64	d6, d6, d3
 801ef36:	ee36 7b44 	vsub.f64	d7, d6, d4
 801ef3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ef3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef42:	d104      	bne.n	801ef4e <pow+0x45e>
 801ef44:	4632      	mov	r2, r6
 801ef46:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801ef4a:	ec43 2b17 	vmov	d7, r2, r3
 801ef4e:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ef52:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ef56:	ee26 6b00 	vmul.f64	d6, d6, d0
 801ef5a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801ef5e:	ee27 0b00 	vmul.f64	d0, d7, d0
 801ef62:	b007      	add	sp, #28
 801ef64:	ecbd 8b0a 	vpop	{d8-d12}
 801ef68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef6c:	f000 b92f 	b.w	801f1ce <__math_check_uflow>
 801ef70:	ec43 2b10 	vmov	d0, r2, r3
 801ef74:	eea7 0b00 	vfma.f64	d0, d7, d0
 801ef78:	e625      	b.n	801ebc6 <pow+0xd6>
 801ef7a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801ef88 <pow+0x498>
 801ef7e:	e622      	b.n	801ebc6 <pow+0xd6>
 801ef80:	00000000 	.word	0x00000000
 801ef84:	00100000 	.word	0x00100000
	...

0801ef90 <__ieee754_sqrt>:
 801ef90:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801ef94:	4770      	bx	lr
	...

0801ef98 <__ieee754_atan2>:
 801ef98:	ee11 1a10 	vmov	r1, s2
 801ef9c:	eeb0 7b40 	vmov.f64	d7, d0
 801efa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801efa2:	ee11 5a90 	vmov	r5, s3
 801efa6:	424b      	negs	r3, r1
 801efa8:	4f59      	ldr	r7, [pc, #356]	@ (801f110 <__ieee754_atan2+0x178>)
 801efaa:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801efae:	430b      	orrs	r3, r1
 801efb0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801efb4:	42bb      	cmp	r3, r7
 801efb6:	d80d      	bhi.n	801efd4 <__ieee754_atan2+0x3c>
 801efb8:	ee10 ca10 	vmov	ip, s0
 801efbc:	ee17 6a90 	vmov	r6, s15
 801efc0:	f1cc 0000 	rsb	r0, ip, #0
 801efc4:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801efc8:	ea40 000c 	orr.w	r0, r0, ip
 801efcc:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801efd0:	42b8      	cmp	r0, r7
 801efd2:	d904      	bls.n	801efde <__ieee754_atan2+0x46>
 801efd4:	ee37 7b01 	vadd.f64	d7, d7, d1
 801efd8:	eeb0 0b47 	vmov.f64	d0, d7
 801efdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801efde:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801efe2:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801efe6:	4308      	orrs	r0, r1
 801efe8:	d103      	bne.n	801eff2 <__ieee754_atan2+0x5a>
 801efea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801efee:	f7ff bc47 	b.w	801e880 <atan>
 801eff2:	17ac      	asrs	r4, r5, #30
 801eff4:	f004 0402 	and.w	r4, r4, #2
 801eff8:	ea53 0c0c 	orrs.w	ip, r3, ip
 801effc:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801f000:	d107      	bne.n	801f012 <__ieee754_atan2+0x7a>
 801f002:	2c02      	cmp	r4, #2
 801f004:	d05c      	beq.n	801f0c0 <__ieee754_atan2+0x128>
 801f006:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801f0d8 <__ieee754_atan2+0x140>
 801f00a:	2c03      	cmp	r4, #3
 801f00c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801f010:	e7e2      	b.n	801efd8 <__ieee754_atan2+0x40>
 801f012:	4311      	orrs	r1, r2
 801f014:	d107      	bne.n	801f026 <__ieee754_atan2+0x8e>
 801f016:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801f0e0 <__ieee754_atan2+0x148>
 801f01a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801f0e8 <__ieee754_atan2+0x150>
 801f01e:	2e00      	cmp	r6, #0
 801f020:	fe27 7b06 	vselge.f64	d7, d7, d6
 801f024:	e7d8      	b.n	801efd8 <__ieee754_atan2+0x40>
 801f026:	42ba      	cmp	r2, r7
 801f028:	d10f      	bne.n	801f04a <__ieee754_atan2+0xb2>
 801f02a:	4293      	cmp	r3, r2
 801f02c:	f104 34ff 	add.w	r4, r4, #4294967295
 801f030:	d107      	bne.n	801f042 <__ieee754_atan2+0xaa>
 801f032:	2c02      	cmp	r4, #2
 801f034:	d847      	bhi.n	801f0c6 <__ieee754_atan2+0x12e>
 801f036:	4b37      	ldr	r3, [pc, #220]	@ (801f114 <__ieee754_atan2+0x17c>)
 801f038:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f03c:	ed93 7b00 	vldr	d7, [r3]
 801f040:	e7ca      	b.n	801efd8 <__ieee754_atan2+0x40>
 801f042:	2c02      	cmp	r4, #2
 801f044:	d842      	bhi.n	801f0cc <__ieee754_atan2+0x134>
 801f046:	4b34      	ldr	r3, [pc, #208]	@ (801f118 <__ieee754_atan2+0x180>)
 801f048:	e7f6      	b.n	801f038 <__ieee754_atan2+0xa0>
 801f04a:	42bb      	cmp	r3, r7
 801f04c:	d0e3      	beq.n	801f016 <__ieee754_atan2+0x7e>
 801f04e:	1a9b      	subs	r3, r3, r2
 801f050:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801f054:	ea4f 5223 	mov.w	r2, r3, asr #20
 801f058:	da1a      	bge.n	801f090 <__ieee754_atan2+0xf8>
 801f05a:	2d00      	cmp	r5, #0
 801f05c:	da01      	bge.n	801f062 <__ieee754_atan2+0xca>
 801f05e:	323c      	adds	r2, #60	@ 0x3c
 801f060:	db19      	blt.n	801f096 <__ieee754_atan2+0xfe>
 801f062:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801f066:	f7ff fd05 	bl	801ea74 <fabs>
 801f06a:	f7ff fc09 	bl	801e880 <atan>
 801f06e:	eeb0 7b40 	vmov.f64	d7, d0
 801f072:	2c01      	cmp	r4, #1
 801f074:	d012      	beq.n	801f09c <__ieee754_atan2+0x104>
 801f076:	2c02      	cmp	r4, #2
 801f078:	d019      	beq.n	801f0ae <__ieee754_atan2+0x116>
 801f07a:	2c00      	cmp	r4, #0
 801f07c:	d0ac      	beq.n	801efd8 <__ieee754_atan2+0x40>
 801f07e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801f0f0 <__ieee754_atan2+0x158>
 801f082:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f086:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801f0f8 <__ieee754_atan2+0x160>
 801f08a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f08e:	e7a3      	b.n	801efd8 <__ieee754_atan2+0x40>
 801f090:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801f0e0 <__ieee754_atan2+0x148>
 801f094:	e7ed      	b.n	801f072 <__ieee754_atan2+0xda>
 801f096:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801f100 <__ieee754_atan2+0x168>
 801f09a:	e7ea      	b.n	801f072 <__ieee754_atan2+0xda>
 801f09c:	ee17 1a90 	vmov	r1, s15
 801f0a0:	ec53 2b17 	vmov	r2, r3, d7
 801f0a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f0a8:	ec43 2b17 	vmov	d7, r2, r3
 801f0ac:	e794      	b.n	801efd8 <__ieee754_atan2+0x40>
 801f0ae:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801f0f0 <__ieee754_atan2+0x158>
 801f0b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f0b6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801f0f8 <__ieee754_atan2+0x160>
 801f0ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 801f0be:	e78b      	b.n	801efd8 <__ieee754_atan2+0x40>
 801f0c0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801f0f8 <__ieee754_atan2+0x160>
 801f0c4:	e788      	b.n	801efd8 <__ieee754_atan2+0x40>
 801f0c6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801f108 <__ieee754_atan2+0x170>
 801f0ca:	e785      	b.n	801efd8 <__ieee754_atan2+0x40>
 801f0cc:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801f100 <__ieee754_atan2+0x168>
 801f0d0:	e782      	b.n	801efd8 <__ieee754_atan2+0x40>
 801f0d2:	bf00      	nop
 801f0d4:	f3af 8000 	nop.w
 801f0d8:	54442d18 	.word	0x54442d18
 801f0dc:	c00921fb 	.word	0xc00921fb
 801f0e0:	54442d18 	.word	0x54442d18
 801f0e4:	3ff921fb 	.word	0x3ff921fb
 801f0e8:	54442d18 	.word	0x54442d18
 801f0ec:	bff921fb 	.word	0xbff921fb
 801f0f0:	33145c07 	.word	0x33145c07
 801f0f4:	3ca1a626 	.word	0x3ca1a626
 801f0f8:	54442d18 	.word	0x54442d18
 801f0fc:	400921fb 	.word	0x400921fb
	...
 801f108:	54442d18 	.word	0x54442d18
 801f10c:	3fe921fb 	.word	0x3fe921fb
 801f110:	7ff00000 	.word	0x7ff00000
 801f114:	080207c0 	.word	0x080207c0
 801f118:	080207a8 	.word	0x080207a8

0801f11c <with_errno>:
 801f11c:	b510      	push	{r4, lr}
 801f11e:	ed2d 8b02 	vpush	{d8}
 801f122:	eeb0 8b40 	vmov.f64	d8, d0
 801f126:	4604      	mov	r4, r0
 801f128:	f7ff fb5e 	bl	801e7e8 <__errno>
 801f12c:	eeb0 0b48 	vmov.f64	d0, d8
 801f130:	ecbd 8b02 	vpop	{d8}
 801f134:	6004      	str	r4, [r0, #0]
 801f136:	bd10      	pop	{r4, pc}

0801f138 <xflow>:
 801f138:	b082      	sub	sp, #8
 801f13a:	b158      	cbz	r0, 801f154 <xflow+0x1c>
 801f13c:	eeb1 7b40 	vneg.f64	d7, d0
 801f140:	ed8d 7b00 	vstr	d7, [sp]
 801f144:	ed9d 7b00 	vldr	d7, [sp]
 801f148:	2022      	movs	r0, #34	@ 0x22
 801f14a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801f14e:	b002      	add	sp, #8
 801f150:	f7ff bfe4 	b.w	801f11c <with_errno>
 801f154:	eeb0 7b40 	vmov.f64	d7, d0
 801f158:	e7f2      	b.n	801f140 <xflow+0x8>
 801f15a:	0000      	movs	r0, r0
 801f15c:	0000      	movs	r0, r0
	...

0801f160 <__math_uflow>:
 801f160:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801f168 <__math_uflow+0x8>
 801f164:	f7ff bfe8 	b.w	801f138 <xflow>
 801f168:	00000000 	.word	0x00000000
 801f16c:	10000000 	.word	0x10000000

0801f170 <__math_oflow>:
 801f170:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801f178 <__math_oflow+0x8>
 801f174:	f7ff bfe0 	b.w	801f138 <xflow>
 801f178:	00000000 	.word	0x00000000
 801f17c:	70000000 	.word	0x70000000

0801f180 <__math_divzero>:
 801f180:	b082      	sub	sp, #8
 801f182:	2800      	cmp	r0, #0
 801f184:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801f188:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801f18c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801f190:	ed8d 7b00 	vstr	d7, [sp]
 801f194:	ed9d 0b00 	vldr	d0, [sp]
 801f198:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801f1a8 <__math_divzero+0x28>
 801f19c:	2022      	movs	r0, #34	@ 0x22
 801f19e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801f1a2:	b002      	add	sp, #8
 801f1a4:	f7ff bfba 	b.w	801f11c <with_errno>
	...

0801f1b0 <__math_invalid>:
 801f1b0:	eeb0 7b40 	vmov.f64	d7, d0
 801f1b4:	eeb4 7b47 	vcmp.f64	d7, d7
 801f1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1bc:	ee30 6b40 	vsub.f64	d6, d0, d0
 801f1c0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801f1c4:	d602      	bvs.n	801f1cc <__math_invalid+0x1c>
 801f1c6:	2021      	movs	r0, #33	@ 0x21
 801f1c8:	f7ff bfa8 	b.w	801f11c <with_errno>
 801f1cc:	4770      	bx	lr

0801f1ce <__math_check_uflow>:
 801f1ce:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801f1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1d6:	d102      	bne.n	801f1de <__math_check_uflow+0x10>
 801f1d8:	2022      	movs	r0, #34	@ 0x22
 801f1da:	f7ff bf9f 	b.w	801f11c <with_errno>
 801f1de:	4770      	bx	lr

0801f1e0 <__math_check_oflow>:
 801f1e0:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801f200 <__math_check_oflow+0x20>
 801f1e4:	eeb0 7bc0 	vabs.f64	d7, d0
 801f1e8:	eeb4 7b46 	vcmp.f64	d7, d6
 801f1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1f0:	dd02      	ble.n	801f1f8 <__math_check_oflow+0x18>
 801f1f2:	2022      	movs	r0, #34	@ 0x22
 801f1f4:	f7ff bf92 	b.w	801f11c <with_errno>
 801f1f8:	4770      	bx	lr
 801f1fa:	bf00      	nop
 801f1fc:	f3af 8000 	nop.w
 801f200:	ffffffff 	.word	0xffffffff
 801f204:	7fefffff 	.word	0x7fefffff

0801f208 <_init>:
 801f208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f20a:	bf00      	nop
 801f20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f20e:	bc08      	pop	{r3}
 801f210:	469e      	mov	lr, r3
 801f212:	4770      	bx	lr

0801f214 <_fini>:
 801f214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f216:	bf00      	nop
 801f218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f21a:	bc08      	pop	{r3}
 801f21c:	469e      	mov	lr, r3
 801f21e:	4770      	bx	lr
